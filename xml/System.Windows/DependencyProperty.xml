<Type Name="DependencyProperty" FullName="System.Windows.DependencyProperty">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f9af7c7588dee4a02565170423aec4646b42e947" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37550309" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DependencyProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyProperty extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyProperty" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyProperty" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyProperty sealed" />
  <TypeSignature Language="F#" Value="type DependencyProperty = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.DependencyPropertyValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="573ea-101">Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.</span>
      <span class="sxs-lookup">
        <span data-stu-id="573ea-101">Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-102">Oggetto <xref:System.Windows.DependencyProperty> supporta le funzionalità seguenti in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]:</span><span class="sxs-lookup"><span data-stu-id="573ea-102">A <xref:System.Windows.DependencyProperty> supports the following capabilities in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]:</span></span>  
  
-   <span data-ttu-id="573ea-103">La proprietà può essere impostata in uno stile.</span><span class="sxs-lookup"><span data-stu-id="573ea-103">The property can be set in a style.</span></span> <span data-ttu-id="573ea-104">Per altre informazioni, vedere [Applicazione di stili e modelli](~/docs/framework/wpf/controls/styling-and-templating.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-104">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
-   <span data-ttu-id="573ea-105">La proprietà può essere impostata tramite l'associazione dati.</span><span class="sxs-lookup"><span data-stu-id="573ea-105">The property can be set through data binding.</span></span> <span data-ttu-id="573ea-106">Per altre informazioni sulle proprietà di dipendenza di data binding, vedere [procedura: associare la proprietà di due controlli](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-106">For more information about data binding dependency properties, see [How to: Bind the Properties of Two Controls](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md).</span></span>  
  
-   <span data-ttu-id="573ea-107">La proprietà può essere impostata con un riferimento di risorsa dinamica.</span><span class="sxs-lookup"><span data-stu-id="573ea-107">The property can be set with a dynamic resource reference.</span></span> <span data-ttu-id="573ea-108">Per altre informazioni, vedere [Risorse XAML](~/docs/framework/wpf/advanced/xaml-resources.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-108">For more information, see [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
-   <span data-ttu-id="573ea-109">La proprietà può ereditare automaticamente il valore da un elemento padre nell'albero degli elementi.</span><span class="sxs-lookup"><span data-stu-id="573ea-109">The property can inherit its value automatically from a parent element in the element tree.</span></span> <span data-ttu-id="573ea-110">Per altre informazioni, vedere [Ereditarietà del valore della proprietà](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-110">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
-   <span data-ttu-id="573ea-111">È possibile animare la proprietà.</span><span class="sxs-lookup"><span data-stu-id="573ea-111">The property can be animated.</span></span> <span data-ttu-id="573ea-112">Per altre informazioni, vedere [Panoramica dell'animazione](~/docs/framework/wpf/graphics-multimedia/animation-overview.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-112">For more information, see [Animation Overview](~/docs/framework/wpf/graphics-multimedia/animation-overview.md).</span></span>  
  
-   <span data-ttu-id="573ea-113">La proprietà può segnalare se il valore precedente della proprietà è stato modificato e può essere assegnato il valore della proprietà.</span><span class="sxs-lookup"><span data-stu-id="573ea-113">The property can report when the previous value of the property has been changed and the property value can be coerced.</span></span> <span data-ttu-id="573ea-114">Per altre informazioni, vedere [Callback e convalida delle proprietà di dipendenza](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-114">For more information, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
-   <span data-ttu-id="573ea-115">La proprietà segnala informazioni da [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], ad esempio se la modifica di un valore della proprietà richiede il sistema di layout ricomponga gli elementi visivi per un elemento.</span><span class="sxs-lookup"><span data-stu-id="573ea-115">The property reports information to [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], such as whether changing a property value should require the layout system to recompose the visuals for an element.</span></span>  
  
-   <span data-ttu-id="573ea-116">La proprietà riceve supporto nel [!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)].</span><span class="sxs-lookup"><span data-stu-id="573ea-116">The property receives support in the [!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)].</span></span>  <span data-ttu-id="573ea-117">Ad esempio, la proprietà può essere modificata nel **proprietà** finestra.</span><span class="sxs-lookup"><span data-stu-id="573ea-117">For example, the property can be edited in the **Properties** window.</span></span>  
  
 <span data-ttu-id="573ea-118">Per altre informazioni sulle proprietà di dipendenza, vedere [Cenni preliminari sulle proprietà di dipendenza](~/docs/framework/wpf/advanced/dependency-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-118">To learn more about dependency properties, see [Dependency Properties Overview](~/docs/framework/wpf/advanced/dependency-properties-overview.md).</span></span> <span data-ttu-id="573ea-119">Se si desidera che le proprietà sui tipi personalizzati per supportare le funzionalità nell'elenco precedente, è necessario creare una proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="573ea-119">If you want properties on your custom types to support the capabilities in the preceding list, you should create a dependency property.</span></span>  <span data-ttu-id="573ea-120">Per informazioni su come creare proprietà di dipendenza personalizzate, vedere [proprietà di dipendenza personalizzate](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-120">To learn how to create custom dependency properties, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span></span>  
  
 <span data-ttu-id="573ea-121">Una proprietà associata è una proprietà che consente a qualsiasi oggetto di informazioni sul report per il tipo che definisce la proprietà associata.</span><span class="sxs-lookup"><span data-stu-id="573ea-121">An attached property is a property that enables any object to report information to the type that defines the attached property.</span></span> <span data-ttu-id="573ea-122">Nelle [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], qualsiasi tipo che eredita da <xref:System.Windows.DependencyObject> può usare una proprietà associata indipendentemente dal fatto che il tipo eredita dal tipo che definisce la proprietà.</span><span class="sxs-lookup"><span data-stu-id="573ea-122">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], any type that inherits from <xref:System.Windows.DependencyObject> can use an attached property regardless of whether the type inherits from the type that defines the property.</span></span> <span data-ttu-id="573ea-123">Una proprietà associata è una funzionalità del [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language.</span><span class="sxs-lookup"><span data-stu-id="573ea-123">An attached property is a feature of the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language.</span></span>  <span data-ttu-id="573ea-124">Per impostare una proprietà associata [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], usare il *TipoProprietario*.* propertyName* sintassi.</span><span class="sxs-lookup"><span data-stu-id="573ea-124">To set an attached property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], use the *ownerType*.*propertyName* syntax.</span></span> <span data-ttu-id="573ea-125">Un esempio di una proprietà associata è di <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> proprietà.</span><span class="sxs-lookup"><span data-stu-id="573ea-125">An example of an attached property is the <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="573ea-126">Se si desidera creare una proprietà che può essere utilizzata in tutti i <xref:System.Windows.DependencyObject> tipi, è necessario creare una proprietà associata.</span><span class="sxs-lookup"><span data-stu-id="573ea-126">If you want to create a property that can be used on all <xref:System.Windows.DependencyObject> types, then you should create an attached property.</span></span> <span data-ttu-id="573ea-127">Per altre informazioni sulle proprietà associate, tra cui come crearli, vedere [Cenni preliminari sulle proprietà associate](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-127">To learn more about attached properties, including how to create them, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
<a name="xamlAttributeUsage_DependencyProperty"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="573ea-128">Uso della sintassi XAML per gli attributi</span><span class="sxs-lookup"><span data-stu-id="573ea-128">XAML Attribute Usage</span></span>  
  
```  
<object property="dependencyPropertyName"/>  
- or -  
<object property="ownerType.dependencyPropertyName"/>  
- or -  
<object property="attachedPropertyOwnerType.attachedPropertyName"/>  
```  
  
<a name="xamlValues_DependencyProperty"></a>   
## <a name="xaml-values"></a><span data-ttu-id="573ea-129">Valori XAML</span><span class="sxs-lookup"><span data-stu-id="573ea-129">XAML Values</span></span>  
 `dependencyPropertyName`  
 <span data-ttu-id="573ea-130">Stringa che specifica il <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> della proprietà di dipendenza desiderato.</span><span class="sxs-lookup"><span data-stu-id="573ea-130">A string that specifies the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> of the desired dependency property.</span></span> <span data-ttu-id="573ea-131">Questo può essere preceduto dal prefisso dello spazio dei nomi XML, se la proprietà non è incluso nello spazio dei nomi XML predefinito (per informazioni dettagliate, vedere [spazi dei nomi XAML e Mapping di Namespace per XAML WPF](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).)</span><span class="sxs-lookup"><span data-stu-id="573ea-131">This can be preceded by an XML namespace prefix if the property is not in the default XML namespace (for details, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).)</span></span>  
  
 <span data-ttu-id="573ea-132">`ownerType`.`dependencyPropertyName`</span><span class="sxs-lookup"><span data-stu-id="573ea-132">`ownerType`.`dependencyPropertyName`</span></span>  
 <span data-ttu-id="573ea-133">Stringa che specifica un tipo di proprietario di una proprietà di dipendenza, un punto (.), quindi il <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="573ea-133">A string that specifies an owner type of a dependency property, a dot (.), then the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="573ea-134">`ownerType` possono anche essere preceduti dal prefisso dello spazio dei nomi XML.</span><span class="sxs-lookup"><span data-stu-id="573ea-134">`ownerType` can also be preceded by an XML namespace prefix.</span></span> <span data-ttu-id="573ea-135">Questo utilizzo è specifico di associazione tardiva stili e modelli, in cui il proprietario della proprietà di dipendenza deve essere specificato per l'analisi del contesto perché il `TargetType` non è ancora noto.</span><span class="sxs-lookup"><span data-stu-id="573ea-135">This usage is particular to late-bound styles and templates, where the owner of the dependency property must be specified for parsing context because the `TargetType` is not yet known.</span></span> <span data-ttu-id="573ea-136">Per altre informazioni, vedere [Applicazione di stili e modelli](~/docs/framework/wpf/controls/styling-and-templating.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-136">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
 <span data-ttu-id="573ea-137">`attachedPropertyOwnerType` *.*</span><span class="sxs-lookup"><span data-stu-id="573ea-137">`attachedPropertyOwnerType` *.*</span></span> `attachedPropertyName`  
 <span data-ttu-id="573ea-138">Stringa che specifica il proprietario di una proprietà associata, un punto (.), quindi il nome della proprietà associata.</span><span class="sxs-lookup"><span data-stu-id="573ea-138">A string that specifies  the owner of an attached property, a dot (.), then the attached property name.</span></span> <span data-ttu-id="573ea-139">`attachedPropertyOwnerType` possono anche essere preceduti dal prefisso dello spazio dei nomi XML.</span><span class="sxs-lookup"><span data-stu-id="573ea-139">`attachedPropertyOwnerType` can also be preceded by an XML namespace prefix.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.DependencyPropertyHelper" />
  </Docs>
  <Members>
    <MemberGroup MemberName="AddOwner">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="573ea-140">Adds another type as an owner of a dependency property that has already been registered to a type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-140">Adds another type as an owner of a dependency property that has already been registered to a type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="member this.AddOwner : Type -&gt; System.Windows.DependencyProperty" Usage="dependencyProperty.AddOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">
          <span data-ttu-id="573ea-141">The type to add as an owner of this dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-141">The type to add as an owner of this dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="573ea-142">Adds another type as an owner of a dependency property that has already been registered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-142">Adds another type as an owner of a dependency property that has already been registered.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="573ea-143">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-143">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span>
          </span>
          <span data-ttu-id="573ea-144">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-144">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-145">Questo metodo consente al sistema di proprietà di riconoscere una proprietà di dipendenza in un tipo che non ha registrato la proprietà di dipendenza specifica inizialmente.</span><span class="sxs-lookup"><span data-stu-id="573ea-145">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="573ea-146">In genere, <xref:System.Windows.DependencyProperty.AddOwner%2A> consente di aggiungere le proprietà di dipendenza per le classi che non espongono già quella proprietà di dipendenza tramite l'ereditarietà di classe gestita (ereditarietà della classe causerebbe la proprietà wrapper da ereditare dalla classe derivata e di conseguenza fornisce l'accesso generale alla tabella dei membri alla proprietà di dipendenza già).</span><span class="sxs-lookup"><span data-stu-id="573ea-146">Typically, <xref:System.Windows.DependencyProperty.AddOwner%2A> is used to add dependency properties to classes that do not already expose that dependency property through managed class inheritance (class inheritance would cause the wrapper properties to be inherited by the derived class, and thus would provide general members-table access to the dependency property already).</span></span> <span data-ttu-id="573ea-147"><xref:System.Windows.DependencyProperty.AddOwner%2A> consente al sistema di proprietà di riconoscere una proprietà di dipendenza in un tipo che non ha registrato la proprietà di dipendenza iniziale.</span><span class="sxs-lookup"><span data-stu-id="573ea-147"><xref:System.Windows.DependencyProperty.AddOwner%2A> enables the property system to recognize a dependency property on a type that did not register that dependency property initially.</span></span>  
  
 <span data-ttu-id="573ea-148">Questa firma non consente di specificare i metadati.</span><span class="sxs-lookup"><span data-stu-id="573ea-148">This signature does not allow for specifying metadata.</span></span>  <span data-ttu-id="573ea-149">Quando si usa questo metodo, i metadati viene generato automaticamente per il nuovo <xref:System.Windows.DependencyProperty> e il relativo tipo di proprietario.</span><span class="sxs-lookup"><span data-stu-id="573ea-149">When you use this method, the metadata is automatically generated for the new <xref:System.Windows.DependencyProperty> and its owner type.</span></span> <span data-ttu-id="573ea-150">I metadati generati automaticamente sono il risultato dei metadati di merge da tutti i tipi di base che dispongono di questa proprietà definite.</span><span class="sxs-lookup"><span data-stu-id="573ea-150">The auto-generated metadata is the result of the merged metadata from all of the base types that have this property defined.</span></span> <span data-ttu-id="573ea-151">Se i metadati non unito sono disponibili, i metadati predefiniti per la proprietà viene utilizzata.</span><span class="sxs-lookup"><span data-stu-id="573ea-151">If no merged metadata is available, then the default metadata for the property is used.</span></span> <span data-ttu-id="573ea-152">Se la proprietà è registrata con il <xref:System.Windows.DependencyProperty.RegisterAttached%2A> metodo, il metadato predefinito è quello utilizzato per i metadati che viene creato quando <xref:System.Windows.DependencyProperty.RegisterAttached%2A> è stato chiamato.</span><span class="sxs-lookup"><span data-stu-id="573ea-152">If the property is registered by using the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, then the default metadata is the same as the metadata that is created when <xref:System.Windows.DependencyProperty.RegisterAttached%2A> was called.</span></span> <span data-ttu-id="573ea-153">In caso contrario, il <xref:System.Windows.PropertyMetadata> oggetto viene creato con il <xref:System.Windows.PropertyMetadata.DefaultValue%2A> proprietà è impostata per impostazione predefinita del tipo di proprietà e tutte le altre proprietà delle <xref:System.Windows.PropertyMetadata> è impostata su `null`.</span><span class="sxs-lookup"><span data-stu-id="573ea-153">Otherwise, the <xref:System.Windows.PropertyMetadata> object is created with the <xref:System.Windows.PropertyMetadata.DefaultValue%2A> property set to the property type's default and all other properties of the <xref:System.Windows.PropertyMetadata> is set to `null`.</span></span> <span data-ttu-id="573ea-154">Usare il <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> firma se si desidera fornire i metadati per la versione della proprietà di dipendenza con l'aggiunta al tipo fornito.</span><span class="sxs-lookup"><span data-stu-id="573ea-154">Use the <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> signature if you want to provide metadata for the version of the dependency property as added to the provided type.</span></span>  
  
 <span data-ttu-id="573ea-155">Il valore restituito di questo metodo viene in genere usato per dichiarare ed esporre le proprietà di dipendenza tramite l'archiviazione di un identificatore di proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="573ea-155">The return value of this method is typically used to declare and expose the dependency property by storing a dependency property identifier.</span></span> <span data-ttu-id="573ea-156">L'identificatore fornisce l'accesso alla proprietà di dipendenza se si desidera chiamare il sistema di proprietà [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] rispetto alla proprietà di dipendenza, in particolare perché esiste nella classe proprietario aggiunta.</span><span class="sxs-lookup"><span data-stu-id="573ea-156">The identifier provides access to the dependency property if you want to call property system [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] against the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="573ea-157">Lo stesso nome di proprietà per il proprietario originale sia stato aggiunto un proprietario deve essere utilizzato per indicare la funzionalità simile.</span><span class="sxs-lookup"><span data-stu-id="573ea-157">The same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="573ea-158">È consigliabile usare la <xref:System.Windows.DependencyProperty> valore restituito del <xref:System.Windows.DependencyProperty.AddOwner%2A> metodo per definire l'identificatore di proprietà di dipendenza, nonché per dichiarare [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper della proprietà, per le proprietà di dipendenza che vengono aggiunti ai tipi usando <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span><span class="sxs-lookup"><span data-stu-id="573ea-158">You should use the <xref:System.Windows.DependencyProperty> return value of the <xref:System.Windows.DependencyProperty.AddOwner%2A> method to define the dependency property identifier, and also to declare [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="573ea-159">Il <xref:System.Windows.DependencyProperty.AddOwner%2A> metodologia consigliata in precedenza viene usato durante la creazione di proprietà di dipendenza che vengono dichiarate all'interno di [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span><span class="sxs-lookup"><span data-stu-id="573ea-159">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating the dependency properties that are declared within [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="573ea-160">Ad esempio, entrambe <xref:System.Windows.Controls.Border> e <xref:System.Windows.Controls.Control> definiscono un `BorderBrush` proprietà di dipendenza, che hanno una funzionalità simile.</span><span class="sxs-lookup"><span data-stu-id="573ea-160">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="573ea-161"><xref:System.Windows.Controls.Control> definisce relativi `BorderBrush` proprietà per il sistema di proprietà chiamando <xref:System.Windows.DependencyProperty.AddOwner%2A> base il proprietario originale <xref:System.Windows.Controls.Border> e relativi registrati <xref:System.Windows.Controls.Border.BorderBrushProperty> identificatore della proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="573ea-161"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> based on the original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="573ea-162">Il <xref:System.Windows.DependencyProperty.AddOwner%2A> valore restituito viene quindi utilizzato per stabilire un nuovo valore statico <xref:System.Windows.DependencyProperty> campo (<xref:System.Windows.Controls.Control.BorderBrushProperty>) per la proprietà del proprietario aggiunto e un `BorderBrush` wrapper della proprietà viene dichiarato.</span><span class="sxs-lookup"><span data-stu-id="573ea-162">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a new static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>) for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.AddOwner : Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="dependencyProperty.AddOwner (ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="ownerType">
          <span data-ttu-id="573ea-163">The type to add as owner of this dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-163">The type to add as owner of this dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="573ea-164">The metadata that qualifies the dependency property as it exists on the provided type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-164">The metadata that qualifies the dependency property as it exists on the provided type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="573ea-165">Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-165">Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="573ea-166">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-166">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span>
          </span>
          <span data-ttu-id="573ea-167">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-167">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-168">Questo metodo consente al sistema di proprietà di riconoscere una proprietà di dipendenza in un tipo che non ha registrato la proprietà di dipendenza specifica inizialmente.</span><span class="sxs-lookup"><span data-stu-id="573ea-168">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="573ea-169">Il valore restituito di questo metodo viene usato per dichiarare ed esporre proprietà di dipendenza, in particolar modo esiste nella classe proprietario aggiunta.</span><span class="sxs-lookup"><span data-stu-id="573ea-169">The return value of this method is used to declare and expose the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="573ea-170">In genere, lo stesso nome di proprietà per il proprietario originale sia stato aggiunto un proprietario da utilizzare per indicare la funzionalità simile.</span><span class="sxs-lookup"><span data-stu-id="573ea-170">Generally, the same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="573ea-171">È buona norma per esporre gli identificatori, nonché i nuovi [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper della proprietà, per le proprietà di dipendenza che vengono aggiunti ai tipi usando <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span><span class="sxs-lookup"><span data-stu-id="573ea-171">It is good practice to expose the identifiers, as well as new [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="573ea-172">Il <xref:System.Windows.DependencyProperty.AddOwner%2A> metodologia consigliata in precedenza viene usato durante la creazione [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] dichiarati all'interno di [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span><span class="sxs-lookup"><span data-stu-id="573ea-172">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] declared within [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="573ea-173">Ad esempio, entrambe <xref:System.Windows.Controls.Border> e <xref:System.Windows.Controls.Control> definiscono un `BorderBrush` proprietà di dipendenza, che hanno una funzionalità simile.</span><span class="sxs-lookup"><span data-stu-id="573ea-173">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="573ea-174"><xref:System.Windows.Controls.Control> definisce le `BorderBrush` proprietà per il sistema di proprietà chiamando <xref:System.Windows.DependencyProperty.AddOwner%2A> sul proprietario originale <xref:System.Windows.Controls.Border> e relativi registrati <xref:System.Windows.Controls.Border.BorderBrushProperty> identificatore della proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="573ea-174"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> on original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="573ea-175">Il <xref:System.Windows.DependencyProperty.AddOwner%2A> valore restituito viene quindi utilizzato per stabilire un valore statico <xref:System.Windows.DependencyProperty> campo (<xref:System.Windows.Controls.Control.BorderBrushProperty>) per la proprietà del proprietario aggiunto e un `BorderBrush` wrapper della proprietà viene dichiarato.</span><span class="sxs-lookup"><span data-stu-id="573ea-175">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>)for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 <span data-ttu-id="573ea-176">Identificatore della proprietà di dipendenza del proprietario aggiunto deve essere utilizzato per le operazioni, ad esempio <xref:System.Windows.DependencyObject.GetValue%2A>.</span><span class="sxs-lookup"><span data-stu-id="573ea-176">The added owner's dependency property identifier should be used for operations such as <xref:System.Windows.DependencyObject.GetValue%2A>.</span></span> <span data-ttu-id="573ea-177">Tuttavia, operazioni specifiche del tipo che coinvolgono tipi o le istanze della classe che è stato aggiunto come proprietario con metadati diversi verrà comunque restituiranno i risultati previsti, anche se originale (non l'aggiunta del proprietario) identificatore della proprietà di dipendenza viene specificato le chiamate a metodi quali <xref:System.Windows.DependencyObject.GetValue%2A> o <xref:System.Windows.DependencyProperty.GetMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="573ea-177">However, type-specific operations involving either types or instances of the class that was added as owner with different metadata will still return the expected results even if the original (not the added owner's) dependency property identifier is specified in calls to methods such as <xref:System.Windows.DependencyObject.GetValue%2A> or <xref:System.Windows.DependencyProperty.GetMetadata%2A>.</span></span> <span data-ttu-id="573ea-178">I metadati per il proprietario aggiunto vengono trasmessi dal <xref:System.Windows.DependencyProperty.AddOwner%2A> chiamare se stesso, non necessariamente fa riferimento il campo dell'identificatore di classe proprietario aggiunta.</span><span class="sxs-lookup"><span data-stu-id="573ea-178">The metadata for the added owner is perpetuated by the <xref:System.Windows.DependencyProperty.AddOwner%2A> call itself, not necessarily referenced exclusively by the adding owner class identifier field.</span></span> <span data-ttu-id="573ea-179">Tuttavia, è buona norma per esporre l'identificatore, nonché i nuovi [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper della proprietà, per le proprietà di dipendenza che vengono aggiunti ai tipi di uso <xref:System.Windows.DependencyProperty.AddOwner%2A>, poiché in caso contrario crea disparità tra il [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] e[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] rappresentazioni delle proprietà.</span><span class="sxs-lookup"><span data-stu-id="573ea-179">Nevertheless, it is good practice to expose the  identifier, as well as new [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>, because failing to do so creates disparity between the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] representations of your properties.</span></span>  
  
 <span data-ttu-id="573ea-180">Metadati forniti vengono uniti i metadati della proprietà per la proprietà di dipendenza esistente sul proprietario di base.</span><span class="sxs-lookup"><span data-stu-id="573ea-180">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="573ea-181">Tutte le caratteristiche specificate nei metadati di base originali verranno mantenuti.</span><span class="sxs-lookup"><span data-stu-id="573ea-181">Any characteristics that were specified in the original base metadata will persist.</span></span> <span data-ttu-id="573ea-182">Solo le caratteristiche che sono state modificate in modo specifico i nuovi metadati sostituiranno le caratteristiche dei metadati di base.</span><span class="sxs-lookup"><span data-stu-id="573ea-182">Only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="573ea-183">Alcune caratteristiche, ad esempio <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, vengono sostituite se vengono specificate nei metadati di nuovo.</span><span class="sxs-lookup"><span data-stu-id="573ea-183">Some characteristics, such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, are replaced if they are specified in the new metadata.</span></span> <span data-ttu-id="573ea-184">Altri, ad esempio <xref:System.Windows.PropertyChangedCallback>, vengono combinate.</span><span class="sxs-lookup"><span data-stu-id="573ea-184">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="573ea-185">In definitiva, il comportamento di tipo merge dipende dal tipo metadati proprietà utilizzato per la sostituzione, pertanto il comportamento qui descritto è per le classi di metadati di proprietà esistente usate da [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] le proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="573ea-185">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dependency properties.</span></span> <span data-ttu-id="573ea-186">Per informazioni dettagliate, vedere [metadati delle proprietà di dipendenza](~/docs/framework/wpf/advanced/dependency-property-metadata.md) e [i metadati della proprietà Framework](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-186">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata DefaultMetadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyMetadata DefaultMetadata" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultMetadata As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PropertyMetadata ^ DefaultMetadata { System::Windows::PropertyMetadata ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMetadata : System.Windows.PropertyMetadata" Usage="System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="573ea-187">Gets the default metadata of the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-187">Gets the default metadata of the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="573ea-188">I metadati predefiniti della proprietà di dipendenza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-188">The default metadata of the dependency property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-189">I metadati predefiniti sono i metadati della proprietà che sono disponibili per quel particolare oggetto o un oggetto di un tipo derivato in cui i metadati alternativi non sono stati forniti da esplicita <xref:System.Windows.DependencyProperty.Register%2A> o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> chiamare.</span><span class="sxs-lookup"><span data-stu-id="573ea-189">The default metadata is the property metadata that is available to that particular object or an object of a derived type where no alternative metadata was supplied by an explicit <xref:System.Windows.DependencyProperty.Register%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> call.</span></span>  
  
 <span data-ttu-id="573ea-190">Se il proprietario originale applicati i metadati per il primo <xref:System.Windows.DependencyProperty.Register%2A> chiamata che ha stabilito la proprietà di dipendenza, quindi che i metadati viene restituito come <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="573ea-190">If the original owner applied metadata to the first <xref:System.Windows.DependencyProperty.Register%2A> call that established the dependency property, then that metadata is returned as <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="573ea-191">Se i metadati non è stato applicato nell'originale <xref:System.Windows.DependencyProperty.Register%2A> chiamare, metadati predefiniti viene generato dall'interno di <xref:System.Windows.DependencyProperty.Register%2A> chiamata e questo valore viene restituito come il <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="573ea-191">If no metadata was applied in the original <xref:System.Windows.DependencyProperty.Register%2A> call, then default metadata is generated from within the <xref:System.Windows.DependencyProperty.Register%2A> call and this value is returned as the <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="573ea-192">Lo scopo principale di avere metadati predefiniti associati a un <xref:System.Windows.DependencyProperty> consiste nel fornire un valore predefinito per questa proprietà su qualsiasi <xref:System.Windows.DependencyObject> o un tipo derivato.</span><span class="sxs-lookup"><span data-stu-id="573ea-192">The main purpose of having default metadata associated with a <xref:System.Windows.DependencyProperty> is to supply a default value for this property on any <xref:System.Windows.DependencyObject> or a derived type.</span></span>  
  
 <span data-ttu-id="573ea-193">Per le proprietà non associate, il tipo di metadati restituito da questa proprietà non è possibile eseguire il cast ai tipi derivati di <xref:System.Windows.PropertyMetadata> digita, anche se la proprietà è stata originariamente registrata con un tipo di metadati derivate.</span><span class="sxs-lookup"><span data-stu-id="573ea-193">For nonattached properties, the metadata type returned by this property cannot be cast to derived types of <xref:System.Windows.PropertyMetadata> type, even if the property was originally registered with a derived metadata type.</span></span> <span data-ttu-id="573ea-194">Se si desidera che i metadati registrati in origine, inclusi il tipo di metadati derivate possibilmente originale, chiamare <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> invece il passaggio di registrazione originale digitare come parametro.</span><span class="sxs-lookup"><span data-stu-id="573ea-194">If you want the originally registered metadata including its original possibly derived metadata type, call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> instead, passing the original registering type as a parameter.</span></span>  
  
 <span data-ttu-id="573ea-195">Per le proprietà associate, il tipo di metadati restituiti da questa proprietà verrà corrisponde al tipo specificato nell'oggetto originale <xref:System.Windows.DependencyProperty.RegisterAttached%2A> metodo di registrazione.</span><span class="sxs-lookup"><span data-stu-id="573ea-195">For attached properties, the type of the metadata returned by this property will match the type given in the original <xref:System.Windows.DependencyProperty.RegisterAttached%2A> registration method.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpdefaultvalue)]
[!code-vb[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpdefaultvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyProperty.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="573ea-196">Returns a hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-196">Returns a hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="573ea-197">The hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-197">The hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-198">Il sistema di proprietà Usa il proprio identificatore univoco <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, e il valore di tale proprietà viene restituito da <xref:System.Windows.DependencyProperty.GetHashCode%2A>.</span><span class="sxs-lookup"><span data-stu-id="573ea-198">The property system uses its own unique identifier <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, and the value of that property is returned by <xref:System.Windows.DependencyProperty.GetHashCode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="573ea-199">Returns the metadata associated with this dependency property as it exists for a particular type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-199">Returns the metadata associated with this dependency property as it exists for a particular type.</span>
          </span>
          <span data-ttu-id="573ea-200">This can be the type where the dependency property was first registered, one to which it was added subsequently, or a type where the dependency property was obtained through inheritance but the metadata was specifically overridden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-200">This can be the type where the dependency property was first registered, one to which it was added subsequently, or a type where the dependency property was obtained through inheritance but the metadata was specifically overridden.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (Type forType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Type forType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata (forType As Type) As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(Type ^ forType);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : Type -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata forType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="573ea-201">The specific type from which to retrieve the dependency property metadata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-201">The specific type from which to retrieve the dependency property metadata.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="573ea-202">Returns the metadata for this dependency property as it exists on a specified existing type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-202">Returns the metadata for this dependency property as it exists on a specified existing type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="573ea-203">A property metadata object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-203">A property metadata object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-204">Specifica il tipo o un riferimento all'oggetto da utilizzare come tipo è necessario perché i metadati possono variare dalla registrazione originale a causa delle <xref:System.Windows.DependencyProperty.AddOwner%2A> o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> chiamate che modificano i metadati della proprietà di dipendenza esistente in un tipo.</span><span class="sxs-lookup"><span data-stu-id="573ea-204">Specifying either the type or an object reference to use as type is necessary because the metadata can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that alter the metadata of the dependency property as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="573ea-205">Nell'esempio seguente ottiene i metadati per una proprietà di dipendenza in base al tipo.</span><span class="sxs-lookup"><span data-stu-id="573ea-205">The following example gets metadata for a dependency property based on its type.</span></span> <span data-ttu-id="573ea-206">Il tipo viene ottenuto tramite un `typeof` operatore.</span><span class="sxs-lookup"><span data-stu-id="573ea-206">The type is obtained by using a `typeof` operator.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatatype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatatype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObject dependencyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObject dependencyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObject ^ dependencyObject);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : System.Windows.DependencyObject -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata dependencyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="dependencyObject">
          <span data-ttu-id="573ea-207">A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-207">A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="573ea-208">Returns the metadata for this dependency property as it exists on the specified object instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-208">Returns the metadata for this dependency property as it exists on the specified object instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="573ea-209">A property metadata object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-209">A property metadata object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-210">Specifica il tipo o un riferimento all'oggetto è necessaria perché i metadati di qualsiasi proprietà di dipendenza possono variare dalla registrazione originale a causa delle <xref:System.Windows.DependencyProperty.AddOwner%2A> o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> chiamate che possono definire i metadati della proprietà esistente in un tipo.</span><span class="sxs-lookup"><span data-stu-id="573ea-210">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
 <span data-ttu-id="573ea-211">Quando si richiedono i metadati della proprietà basato su un'istanza, si sta semplicemente passando l'istanza in modo che il relativo tipo può essere valutato internamente.</span><span class="sxs-lookup"><span data-stu-id="573ea-211">When you request property metadata based on an instance, you are really just passing the instance so that its type can be evaluated internally.</span></span> <span data-ttu-id="573ea-212">Metadati della proprietà di dipendenza non variano per ogni istanza. è sempre coerenza per qualsiasi combinazione di proprietà del tipo specificato.</span><span class="sxs-lookup"><span data-stu-id="573ea-212">Dependency property metadata does not vary per instance; it is always consistent for any given type-property combination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="573ea-213">L'esempio seguente ottiene i metadati per una proprietà di dipendenza basata su una specifica <xref:System.Windows.DependencyObject> istanza.</span><span class="sxs-lookup"><span data-stu-id="573ea-213">The following example gets metadata for a dependency property based on a specific <xref:System.Windows.DependencyObject> instance.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadoinstance)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadoinstance)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObjectType dependencyObjectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObjectType dependencyObjectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObjectType ^ dependencyObjectType);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : System.Windows.DependencyObjectType -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata dependencyObjectType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObjectType" Type="System.Windows.DependencyObjectType" />
      </Parameters>
      <Docs>
        <param name="dependencyObjectType">
          <span data-ttu-id="573ea-214">A specific object that records the dependency object type from which the dependency property metadata is desired.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-214">A specific object that records the dependency object type from which the dependency property metadata is desired.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="573ea-215">Returns the metadata for this dependency property as it exists on a specified type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-215">Returns the metadata for this dependency property as it exists on a specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="573ea-216">A property metadata object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-216">A property metadata object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-217">Specifica il tipo o un riferimento all'oggetto è necessaria perché i metadati di qualsiasi proprietà di dipendenza possono variare dalla registrazione originale a causa delle <xref:System.Windows.DependencyProperty.AddOwner%2A> o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> chiamate che possono definire i metadati della proprietà esistente in un tipo.</span><span class="sxs-lookup"><span data-stu-id="573ea-217">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="573ea-218">L'esempio seguente ottiene i metadati per una proprietà di dipendenza di base relativi <xref:System.Windows.DependencyObjectType>.</span><span class="sxs-lookup"><span data-stu-id="573ea-218">The following example gets metadata for a dependency property based on its <xref:System.Windows.DependencyObjectType>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadotype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadotype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalIndex">
      <MemberSignature Language="C#" Value="public int GlobalIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GlobalIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.GlobalIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int GlobalIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalIndex : int" Usage="System.Windows.DependencyProperty.GlobalIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="573ea-219">Gets an internally generated value that uniquely identifies the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-219">Gets an internally generated value that uniquely identifies the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="573ea-220">Identificatore numerico univoco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-220">A unique numeric identifier.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-221">Questo valore è un numero intero, non un identificatore univoco globale (GUID).</span><span class="sxs-lookup"><span data-stu-id="573ea-221">This value is an integer, not a globally unique identifier (GUID).</span></span> <span data-ttu-id="573ea-222">In generale, Usa questo valore di indice non è obbligatorio e non è possibile accedere indice nelle tabelle di tutte le proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="573ea-222">Generally, using this index value is not required, and there is no index access to tables of all dependency properties.</span></span> <span data-ttu-id="573ea-223">Le proprietà di dipendenza devono essere invece fatto riferimento dai campi dell'identificatore.</span><span class="sxs-lookup"><span data-stu-id="573ea-223">Dependency properties should instead be referenced by their identifier fields.</span></span>  
  
 <span data-ttu-id="573ea-224"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> viene usato internamente per un accesso più rapido alle strutture di dati che usano il <xref:System.Windows.DependencyProperty.GlobalIndex%2A> come un indice di matrice in base zero.</span><span class="sxs-lookup"><span data-stu-id="573ea-224"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> is used internally for faster access to data structures that use the <xref:System.Windows.DependencyProperty.GlobalIndex%2A> as a zero-based array index.</span></span> <span data-ttu-id="573ea-225">Un utilizzo simile potrebbe avere applicazioni per gli strumenti o finestre di progettazione.</span><span class="sxs-lookup"><span data-stu-id="573ea-225">A similar usage might have applications for designers or tools.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidType">
      <MemberSignature Language="C#" Value="public bool IsValidType (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidType(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidType (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidType(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.IsValidType : obj -&gt; bool" Usage="dependencyProperty.IsValidType value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="573ea-226">The value to check.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-226">The value to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="573ea-227">Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-227">Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="573ea-228">
            <see langword="true" /> if the specified value is the registered property type or an acceptable derived type; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-228">
              <see langword="true" /> if the specified value is the registered property type or an acceptable derived type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-229">Un valore pari `null` è un tipo valido per le proprietà di dipendenza di tipo riferimento o per un <xref:System.Nullable%601> proprietà di dipendenza e restituirebbe `true` in questi casi.</span><span class="sxs-lookup"><span data-stu-id="573ea-229">A value of `null` is a valid type for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="573ea-230">Nei casi in cui la proprietà di dipendenza né un riferimento né <xref:System.Nullable%601> , digitare <xref:System.Windows.DependencyProperty.IsValidType%2A> restituirà `false` per un valore null anziché generare un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="573ea-230">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="573ea-231">L'esempio seguente usa <xref:System.Windows.DependencyProperty.IsValidType%2A> come un controllo prima di chiamare <xref:System.Windows.DependencyObject.SetValue%2A> nella proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="573ea-231">The following example uses <xref:System.Windows.DependencyProperty.IsValidType%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvalue)]
 [!code-vb[PropertySystemEsoterics#TrySetValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidValue">
      <MemberSignature Language="C#" Value="public bool IsValidValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidValue (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.IsValidValue : obj -&gt; bool" Usage="dependencyProperty.IsValidValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="573ea-232">The value to check.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-232">The value to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="573ea-233">Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-233">Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="573ea-234">
            <see langword="true" /> if the value is acceptable and is of the correct type or a derived type; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-234">
              <see langword="true" /> if the value is acceptable and is of the correct type or a derived type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-235">Per una proprietà di dipendenza, è possibile specificare un intervallo di valori per il tipo consentito attraverso un <xref:System.Windows.ValidateValueCallback> fornito nella registrazione della proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="573ea-235">For a dependency property, an allowed range of values for that type can be specified through a <xref:System.Windows.ValidateValueCallback> that is provided in the dependency property registration.</span></span>  
  
 <span data-ttu-id="573ea-236">Questo metodo chiama <xref:System.Windows.DependencyProperty.IsValidType%2A> internamente.</span><span class="sxs-lookup"><span data-stu-id="573ea-236">This method calls <xref:System.Windows.DependencyProperty.IsValidType%2A> internally.</span></span> <span data-ttu-id="573ea-237">Se la proprietà di dipendenza in questione non ha alcun <xref:System.Windows.ValidateValueCallback>, quindi si chiama questo metodo equivale alla chiamata al metodo <xref:System.Windows.DependencyProperty.IsValidType%2A>.</span><span class="sxs-lookup"><span data-stu-id="573ea-237">If the dependency property in question has no <xref:System.Windows.ValidateValueCallback>,then calling this method is effectively equivalent to calling <xref:System.Windows.DependencyProperty.IsValidType%2A>.</span></span> <span data-ttu-id="573ea-238">Se la proprietà di dipendenza sono un <xref:System.Windows.ValidateValueCallback>e se <xref:System.Windows.DependencyProperty.IsValidType%2A> avrebbe restituito `true`, il valore restituito è come implementato nel callback.</span><span class="sxs-lookup"><span data-stu-id="573ea-238">If the dependency property does have a <xref:System.Windows.ValidateValueCallback>, and if <xref:System.Windows.DependencyProperty.IsValidType%2A> would have returned `true`, then the value returned will be as implemented in the callback.</span></span>  
  
 <span data-ttu-id="573ea-239">Un valore null è un valore valido per le proprietà di dipendenza di tipo riferimento o per un <xref:System.Nullable%601> proprietà di dipendenza e restituirebbe `true` in questi casi.</span><span class="sxs-lookup"><span data-stu-id="573ea-239">A null value is a valid value for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="573ea-240">Nei casi in cui la proprietà di dipendenza né un riferimento né <xref:System.Nullable%601> , digitare <xref:System.Windows.DependencyProperty.IsValidType%2A> restituirà `false` per un valore null anziché generare un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="573ea-240">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="573ea-241">L'esempio seguente usa <xref:System.Windows.DependencyProperty.IsValidValue%2A> come un controllo prima di chiamare <xref:System.Windows.DependencyObject.SetValue%2A> nella proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="573ea-241">The following example uses <xref:System.Windows.DependencyProperty.IsValidValue%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvaluewithvalidate)]
 [!code-vb[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvaluewithvalidate)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.DependencyProperty.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="573ea-242">Gets the name of the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-242">Gets the name of the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="573ea-243">Nome della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-243">The name of the property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-244">Questa proprietà ottiene il nome fornito come il `name` parametro durante la registrazione di proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="573ea-244">This property gets the name provided as the `name` parameter during dependency property registration.</span></span> <span data-ttu-id="573ea-245">Questo nome non è modificabile e non può essere `null` o una stringa vuota.</span><span class="sxs-lookup"><span data-stu-id="573ea-245">This name is immutable, and cannot be `null` or an empty string.</span></span> <span data-ttu-id="573ea-246">Le registrazioni dei nomi duplicati nello stesso tipo del proprietario non sono consentiti e verrà generata un'eccezione quando si prova a registrare il duplicato.</span><span class="sxs-lookup"><span data-stu-id="573ea-246">Duplicate name registrations on the same owner type are not permitted, and will throw an exception when you attempt to register the duplicate.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="573ea-247">Il <xref:System.Windows.DependencyProperty.Name%2A> una dipendenza della proprietà deve seguire la convenzione di corrispondere al nome dell'identificatore meno il suffisso "Proprietà" proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="573ea-247">The <xref:System.Windows.DependencyProperty.Name%2A> of a dependency property must follow the convention of matching the name of its dependency property identifier minus the suffix "Property".</span></span> <span data-ttu-id="573ea-248">Per informazioni dettagliate, vedere [Proprietà di dipendenza personalizzate](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-248">For details, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="573ea-249">Nell'esempio seguente esegue una query varie caratteristiche di un identificatore di proprietà di dipendenza, tra cui la <xref:System.Windows.DependencyProperty.Name%2A>.</span><span class="sxs-lookup"><span data-stu-id="573ea-249">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.Name%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OverrideMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="573ea-250">Supplies alternate metadata for this dependency property when it is present on instances of a specified type, versus the metadata that was provided in the initial dependency property registration.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-250">Supplies alternate metadata for this dependency property when it is present on instances of a specified type, versus the metadata that was provided in the initial dependency property registration.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyProperty.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="573ea-251">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-251">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="573ea-252">The metadata to apply to the dependency property on the overriding type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-252">The metadata to apply to the dependency property on the overriding type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="573ea-253">Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-253">Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-254">Prima che il sistema di proprietà viene utilizzata la proprietà di dipendenza, è necessario eseguire l'override dei metadati di proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="573ea-254">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="573ea-255">Ciò equivale all'ora in cui vengono create istanze specifiche usando la classe che registra la proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="573ea-255">This equates to the time that specific instances are created using the class that registers the dependency property.</span></span> <span data-ttu-id="573ea-256">Le chiamate a <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> deve essere eseguita solo all'interno dei costruttori statici del tipo che fornisce se stesso come il `forType` parametro di questo metodo, o tramite la creazione di istanze analoghe.</span><span class="sxs-lookup"><span data-stu-id="573ea-256">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="573ea-257">Tentativo di modificare i metadati dopo esistono istanze del tipo di proprietario non genererà eccezioni, ma comporterà comportamenti incoerenti nel sistema di proprietà.</span><span class="sxs-lookup"><span data-stu-id="573ea-257">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="573ea-258">Dopo aver stabilito i metadati per una determinata classe derivata di sostituzione con questo metodo, i tentativi successivi di eseguire l'override dei metadati di questa classe derivata stessa genererà un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="573ea-258">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="573ea-259">Metadati forniti vengono uniti i metadati della proprietà per la proprietà di dipendenza esistente sul proprietario di base.</span><span class="sxs-lookup"><span data-stu-id="573ea-259">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="573ea-260">Tutte le caratteristiche specificate nei metadati di base originali verranno mantenuti; solo le caratteristiche che sono state modificate in modo specifico i nuovi metadati sostituiranno le caratteristiche dei metadati di base.</span><span class="sxs-lookup"><span data-stu-id="573ea-260">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="573ea-261">Alcune caratteristiche, ad esempio <xref:System.Windows.PropertyMetadata.DefaultValue%2A> vengono sostituiti se specificato nei metadati di nuovo.</span><span class="sxs-lookup"><span data-stu-id="573ea-261">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="573ea-262">Altri, ad esempio <xref:System.Windows.PropertyChangedCallback>, vengono combinate.</span><span class="sxs-lookup"><span data-stu-id="573ea-262">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="573ea-263">In definitiva, il comportamento di tipo merge dipende dal tipo metadati proprietà utilizzato per la sostituzione, pertanto il comportamento qui descritto è per le classi di metadati di proprietà esistente usate da [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] le proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="573ea-263">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dependency properties.</span></span> <span data-ttu-id="573ea-264">Per informazioni dettagliate, vedere [metadati delle proprietà di dipendenza](~/docs/framework/wpf/advanced/dependency-property-metadata.md) e [i metadati della proprietà Framework](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-264">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="573ea-265">An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-265">An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="573ea-266">Metadata was already established for the dependency property as it exists on the provided type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-266">Metadata was already established for the dependency property as it exists on the provided type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata, System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata, key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::DependencyPropertyKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata * System.Windows.DependencyPropertyKey -&gt; unit" Usage="dependencyProperty.OverrideMetadata (forType, typeMetadata, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="573ea-267">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-267">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="573ea-268">The metadata to apply to the dependency property on the overriding type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-268">The metadata to apply to the dependency property on the overriding type.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="573ea-269">The access key for a read-only dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-269">The access key for a read-only dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="573ea-270">Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-270">Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration.</span>
          </span>
          <span data-ttu-id="573ea-271">You must pass the <see cref="T:System.Windows.DependencyPropertyKey" /> for the read-only dependency property to avoid raising an exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-271">You must pass the <see cref="T:System.Windows.DependencyPropertyKey" /> for the read-only dependency property to avoid raising an exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-272">Questa firma fornisce l'implementazione sottostante per un identificatore di proprietà di dipendenza di sola lettura (<xref:System.Windows.DependencyPropertyKey>) (metodo).</span><span class="sxs-lookup"><span data-stu-id="573ea-272">This signature provides underlying implementation for a read-only dependency property identifier (<xref:System.Windows.DependencyPropertyKey>) method.</span></span> <span data-ttu-id="573ea-273">Se si esegue l'override dei metadati per una proprietà di dipendenza di lettura / scrittura, usare <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span><span class="sxs-lookup"><span data-stu-id="573ea-273">If overriding metadata for a read-write dependency property, use <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span></span>  
  
 <span data-ttu-id="573ea-274">Prima che il sistema di proprietà viene utilizzata la proprietà di dipendenza, è necessario eseguire l'override dei metadati di proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="573ea-274">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="573ea-275">Ciò equivale al tempo che vengono creati oggetti specifici per la classe che registra la proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="573ea-275">This equates to the time that specific objects are created for the class that registers the dependency property.</span></span> <span data-ttu-id="573ea-276">Le chiamate a <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> deve essere eseguita solo all'interno dei costruttori statici del tipo che fornisce se stesso come il `forType` parametro di questo metodo, o tramite la creazione di istanze analoghe.</span><span class="sxs-lookup"><span data-stu-id="573ea-276">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="573ea-277">Tentativo di modificare i metadati dopo esistono istanze del tipo di proprietario non genererà eccezioni, ma comporterà comportamenti incoerenti nel sistema di proprietà.</span><span class="sxs-lookup"><span data-stu-id="573ea-277">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="573ea-278">Dopo aver stabilito i metadati per una determinata classe derivata di sostituzione con questo metodo, i tentativi successivi di eseguire l'override dei metadati di questa classe derivata stessa genererà un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="573ea-278">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="573ea-279">Metadati forniti vengono uniti i metadati della proprietà per la proprietà di dipendenza esistente sul proprietario di base.</span><span class="sxs-lookup"><span data-stu-id="573ea-279">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="573ea-280">Tutte le caratteristiche specificate nei metadati di base originali verranno mantenuti; solo le caratteristiche che sono state modificate in modo specifico i nuovi metadati sostituiranno le caratteristiche dei metadati di base.</span><span class="sxs-lookup"><span data-stu-id="573ea-280">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="573ea-281">Alcune caratteristiche, ad esempio <xref:System.Windows.PropertyMetadata.DefaultValue%2A> vengono sostituiti se specificato nei metadati di nuovo.</span><span class="sxs-lookup"><span data-stu-id="573ea-281">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="573ea-282">Altri, ad esempio <xref:System.Windows.PropertyChangedCallback>, vengono combinate.</span><span class="sxs-lookup"><span data-stu-id="573ea-282">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="573ea-283">Il comportamento di tipo merge dipende dal tipo proprietà dei metadati utilizzato per l'override.</span><span class="sxs-lookup"><span data-stu-id="573ea-283">The merge behavior depends on the property metadata type being used for the override.</span></span> <span data-ttu-id="573ea-284">Per informazioni dettagliate, vedere [metadati delle proprietà di dipendenza](~/docs/framework/wpf/advanced/dependency-property-metadata.md) e [i metadati della proprietà Framework](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-284">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnerType : Type" Usage="System.Windows.DependencyProperty.OwnerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="573ea-285">Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-285">Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="573ea-286">Tipo dell'oggetto che ha registrato la proprietà o che si è aggiunto come proprietario della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-286">The type of the object that registered the property or added itself as owner of the property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-287">Questo valore è stato fornito durante la registrazione della proprietà.</span><span class="sxs-lookup"><span data-stu-id="573ea-287">This value was provided during property registration.</span></span> <span data-ttu-id="573ea-288">Il proprietario sarà il tipo della registrazione originale nel caso di un <xref:System.Windows.DependencyProperty> identificatore generato da un <xref:System.Windows.DependencyProperty.Register%2A> chiamata o il tipo che è stato aggiunto come proprietario nel caso di un <xref:System.Windows.DependencyProperty> identificatore generato da un <xref:System.Windows.DependencyProperty.AddOwner%2A> chiamare.</span><span class="sxs-lookup"><span data-stu-id="573ea-288">The owner will be either the original registering type in the case of a <xref:System.Windows.DependencyProperty> identifier generated from a <xref:System.Windows.DependencyProperty.Register%2A> call, or the type that added itself as owner in the case of a <xref:System.Windows.DependencyProperty> identifier generated from an <xref:System.Windows.DependencyProperty.AddOwner%2A> call.</span></span>  
  
 <span data-ttu-id="573ea-289">Il <xref:System.Windows.DependencyProperty.OwnerType%2A> su qualsiasi dato <xref:System.Windows.DependencyProperty> non è modificabile e non può essere `null` in un valore valido <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="573ea-289">The <xref:System.Windows.DependencyProperty.OwnerType%2A> on any given <xref:System.Windows.DependencyProperty> is immutable, and cannot be `null` in a valid <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="573ea-290">L'esempio seguente ottiene il tipo di proprietario basato su un identificatore di proprietà di dipendenza `dp`e quindi Ottiene i metadati sul tipo di proprietario per tale identificatore stesso.</span><span class="sxs-lookup"><span data-stu-id="573ea-290">The following example gets the owner type based on a dependency property identifier `dp`, and then gets metadata on the owner type for that same identifier.</span></span> <span data-ttu-id="573ea-291">Questa operazione equivale effettivamente a ottenere <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> su `dp`.</span><span class="sxs-lookup"><span data-stu-id="573ea-291">This operation is actually equivalent to getting <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> on `dp`.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ PropertyType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyType : Type" Usage="System.Windows.DependencyProperty.PropertyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="573ea-292">Gets the type that the dependency property uses for its value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-292">Gets the type that the dependency property uses for its value.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="573ea-293">Il <see cref="T:System.Type" /> del valore della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-293">The <see cref="T:System.Type" /> of the property value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-294">Questa proprietà indica il tipo del valore della proprietà come dichiarato dalla registrazione della proprietà originale, tramite il `propertyType` parametro.</span><span class="sxs-lookup"><span data-stu-id="573ea-294">This property reports the type of the property's value as declared by the original property registration, through the `propertyType` parameter.</span></span> <span data-ttu-id="573ea-295">Simile al <xref:System.Windows.DependencyProperty.Name%2A>, il tipo di proprietà di una proprietà di dipendenza non è modificabile dopo la registrazione.</span><span class="sxs-lookup"><span data-stu-id="573ea-295">Similar to the <xref:System.Windows.DependencyProperty.Name%2A>, the property type of a dependency property is immutable after registration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="573ea-296">Nell'esempio seguente esegue una query varie caratteristiche di un identificatore di proprietà di dipendenza, tra cui la <xref:System.Windows.DependencyProperty.PropertyType%2A>.</span><span class="sxs-lookup"><span data-stu-id="573ea-296">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.PropertyType%2A>.</span></span> <span data-ttu-id="573ea-297">La stringa del nome del tipo di <xref:System.Windows.DependencyProperty.PropertyType%2A> viene ottenuto dall'oggetto restituito <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="573ea-297">The type name string of the <xref:System.Windows.DependencyProperty.PropertyType%2A> is obtained from the returned <xref:System.Type>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadOnly : bool" Usage="System.Windows.DependencyProperty.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="573ea-298">Gets a value that indicates whether the dependency property identified by this <see cref="T:System.Windows.DependencyProperty" /> instance is a read-only dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-298">Gets a value that indicates whether the dependency property identified by this <see cref="T:System.Windows.DependencyProperty" /> instance is a read-only dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="573ea-299">
            <see langword="true" /> Se la proprietà di dipendenza è di sola lettura. in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-299">
              <see langword="true" /> if the dependency property is read-only; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-300">Le proprietà di dipendenza di sola lettura vengono registrate all'interno del sistema di proprietà chiamando i <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> metodo anziché il <xref:System.Windows.DependencyProperty.Register%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="573ea-300">Read-only dependency properties are registered within the property system by calling the <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> method as opposed to the <xref:System.Windows.DependencyProperty.Register%2A> method.</span></span> <span data-ttu-id="573ea-301">Le proprietà associate possono essere registrate come di sola lettura. vedere <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span><span class="sxs-lookup"><span data-stu-id="573ea-301">Attached properties can also be registered as read-only; see <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span></span>  
  
 <span data-ttu-id="573ea-302">Le proprietà di dipendenza di sola lettura richiedono un <xref:System.Windows.DependencyPropertyKey> identificatore anziché un <xref:System.Windows.DependencyProperty> identificatore per eseguire operazioni sui metadati, ad esempio l'override dei metadati o l'impostazione del valore.</span><span class="sxs-lookup"><span data-stu-id="573ea-302">Read-only dependency properties require a <xref:System.Windows.DependencyPropertyKey> identifier rather than a <xref:System.Windows.DependencyProperty> identifier to perform metadata operations such as overriding the metadata or setting the value.</span></span> <span data-ttu-id="573ea-303">Se si ottiene una raccolta di <xref:System.Windows.DependencyProperty> identificatori tramite una chiamata a <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> o da un'altra [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] che espone gli identificatori, controllare il <xref:System.Windows.DependencyProperty.ReadOnly%2A> valore prima di chiamare <xref:System.Windows.DependencyObject.SetValue%2A> o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> utilizzando quel Identificatore della proprietà di dipendenza come parametro di input, per verificare che la proprietà di dipendenza che rappresenta l'identificatore non è in sola lettura.</span><span class="sxs-lookup"><span data-stu-id="573ea-303">If you obtained a collection of <xref:System.Windows.DependencyProperty> identifiers through a call to <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> or another [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] that exposes identifiers, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value before attempting to call <xref:System.Windows.DependencyObject.SetValue%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> using that dependency property identifier as an input parameter, to verify that the dependency property that the identifier represents is not read-only.</span></span> <span data-ttu-id="573ea-304">Se il valore di <xref:System.Windows.DependencyProperty.ReadOnly%2A> viene `true` su una proprietà di dipendenza, non vi è alcuna modalità programmatica per ottenere un riferimento al <xref:System.Windows.DependencyPropertyKey> identificatore di tale proprietà di dipendenza, dai metadati o dal <xref:System.Windows.DependencyProperty> identificatore; l'identificatore deve essere disponibile come un campo statico affinché la chiamata <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> in base a una proprietà di dipendenza di sola lettura.</span><span class="sxs-lookup"><span data-stu-id="573ea-304">If the value of <xref:System.Windows.DependencyProperty.ReadOnly%2A> is `true` on a dependency property, there is no programmatic way to obtain a reference to the <xref:System.Windows.DependencyPropertyKey> identifier of that dependency property, from the metadata or from the <xref:System.Windows.DependencyProperty> identifier; the identifier must be available as a static field in order to call <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> against a read-only dependency property.</span></span>  
  
 <span data-ttu-id="573ea-305">Quando si crea una proprietà di dipendenza personalizzate e registrarlo in sola lettura, è consigliabile definire solo una funzione di accesso get per il [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] proprietà wrapper.</span><span class="sxs-lookup"><span data-stu-id="573ea-305">When you create a custom dependency property, and register it as read-only, you should define only a get accessor for the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper property.</span></span> <span data-ttu-id="573ea-306">In caso contrario, la classe avrà un modello a oggetti poco chiaro per il wrapper della proprietà a confronto l'accesso alla proprietà di dipendenza sottostante.</span><span class="sxs-lookup"><span data-stu-id="573ea-306">Otherwise, your class will have a confusing object model for the property wrapper as compared to the access to the backing dependency property.</span></span> <span data-ttu-id="573ea-307">Per informazioni dettagliate, vedere [proprietà di dipendenza personalizzate](~/docs/framework/wpf/advanced/custom-dependency-properties.md) oppure [delle proprietà di dipendenza di sola lettura](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-307">For details, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md) or [Read-Only Dependency Properties](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="573ea-308">Nell'esempio seguente ottiene i metadati predefiniti e le proprietà identificatore di proprietà di dipendenza da vari campi di proprietà di dipendenza e utilizza le informazioni per popolare una tabella per implementare un visualizzatore"metadati".</span><span class="sxs-lookup"><span data-stu-id="573ea-308">The following example obtains the default metadata and the dependency property identifier properties from various dependency property fields, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="573ea-309">Registers a dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-309">Registers a dependency property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="573ea-310">The name of the dependency property to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-310">The name of the dependency property to register.</span>
          </span>
          <span data-ttu-id="573ea-311">The name must be unique within the registration namespace of the owner type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-311">The name must be unique within the registration namespace of the owner type.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="573ea-312">The type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-312">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="573ea-313">The owner type that is registering the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-313">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="573ea-314">Registers a dependency property with the specified property name, property type, and owner type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-314">Registers a dependency property with the specified property name, property type, and owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="573ea-315">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-315">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="573ea-316">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-316">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-317">Per altre informazioni sulla registrazione di proprietà di dipendenza, vedere <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="573ea-317">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 [!code-csharp[WPFAquariumSln#Register3Param](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#register3param)]
 [!code-vb[WPFAquariumSln#Register3Param](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#register3param)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="573ea-318">The name of the dependency property to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-318">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="573ea-319">The type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-319">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="573ea-320">The owner type that is registering the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-320">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="573ea-321">Property metadata for the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-321">Property metadata for the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="573ea-322">Registers a dependency property with the specified property name, property type, owner type, and property metadata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-322">Registers a dependency property with the specified property name, property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="573ea-323">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-323">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="573ea-324">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-324">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-325">Per altre informazioni sulla registrazione di proprietà di dipendenza, vedere <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="573ea-325">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType, typeMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="573ea-326">The name of the dependency property to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-326">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="573ea-327">The type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-327">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="573ea-328">The owner type that is registering the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-328">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="573ea-329">Property metadata for the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-329">Property metadata for the dependency property.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="573ea-330">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-330">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="573ea-331">Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-331">Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="573ea-332">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-332">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="573ea-333">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-333">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-334">Per altre informazioni sulla registrazione di proprietà di dipendenza, vedere <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="573ea-334">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="573ea-335">Nell'esempio seguente registra una proprietà di dipendenza, tra cui un callback di convalida (la definizione di callback non viene visualizzato; per informazioni dettagliate sulla definizione di callback, vedere <xref:System.Windows.ValidateValueCallback>).</span><span class="sxs-lookup"><span data-stu-id="573ea-335">The following example registers a dependency property, including a validation callback (the callback definition is not shown; for details on the callback definition, see <xref:System.Windows.ValidateValueCallback>).</span></span>  
  
 [!code-csharp[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#currentdefinitionwithwrapper)]
 [!code-vb[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#currentdefinitionwithwrapper)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttached">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="573ea-336">Registers an attached property with the property system.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-336">Registers an attached property with the property system.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="573ea-337">The name of the dependency property to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-337">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="573ea-338">The type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-338">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="573ea-339">The owner type that is registering the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-339">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="573ea-340">Registers an attached property with the specified property name, property type, and owner type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-340">Registers an attached property with the specified property name, property type, and owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="573ea-341">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-341">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="573ea-342">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-342">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-343">Una proprietà associata è un concetto di proprietà definito da [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="573ea-343">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="573ea-344"> le proprietà associati vengono implementati come proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="573ea-344"> implements attached properties as dependency properties.</span></span> <span data-ttu-id="573ea-345">Poiché il [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] le proprietà associate sono proprietà di dipendenza, possono avere metadati applicati e che possono essere utilizzato dal sistema di proprietà generale per operazioni quali la segnalazione delle caratteristiche di layout.</span><span class="sxs-lookup"><span data-stu-id="573ea-345">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="573ea-346">Per altre informazioni, vedere [Cenni preliminari sulle proprietà associate](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-346">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="573ea-347">Per altre informazioni sulla registrazione di proprietà di dipendenza, vedere <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="573ea-347">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="573ea-348">Nell'esempio seguente registra una proprietà associata in una classe astratta usando questo <xref:System.Windows.DependencyProperty.RegisterAttached%2A> firma.</span><span class="sxs-lookup"><span data-stu-id="573ea-348">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType, defaultMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="573ea-349">The name of the dependency property to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-349">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="573ea-350">The type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-350">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="573ea-351">The owner type that is registering the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-351">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="573ea-352">Property metadata for the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-352">Property metadata for the dependency property.</span>
          </span>
          <span data-ttu-id="573ea-353">This can include the default value as well as other characteristics.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-353">This can include the default value as well as other characteristics.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="573ea-354">Registers an attached property with the specified property name, property type, owner type, and property metadata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-354">Registers an attached property with the specified property name, property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="573ea-355">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-355">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="573ea-356">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-356">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-357">Una proprietà associata è un concetto di proprietà definito da [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="573ea-357">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="573ea-358"> le proprietà associati vengono implementati come proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="573ea-358"> implements attached properties as dependency properties.</span></span> <span data-ttu-id="573ea-359">Poiché il [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] le proprietà associate sono proprietà di dipendenza, possono avere metadati applicati e che possono essere utilizzato dal sistema di proprietà generale per operazioni quali la segnalazione delle caratteristiche di layout.</span><span class="sxs-lookup"><span data-stu-id="573ea-359">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="573ea-360">Per altre informazioni, vedere [Cenni preliminari sulle proprietà associate](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-360">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="573ea-361">Per altre informazioni sulla registrazione di proprietà di dipendenza, vedere <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="573ea-361">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="573ea-362">Utilizzare RegisterAttached eredità valore delle proprietà di dipendenza</span><span class="sxs-lookup"><span data-stu-id="573ea-362">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="573ea-363">Uno scenario specifico per la registrazione di una proprietà di dipendenza con <xref:System.Windows.DependencyProperty.RegisterAttached%2A> invece di <xref:System.Windows.DependencyProperty.Register%2A> per supportare l'ereditarietà del valore della proprietà.</span><span class="sxs-lookup"><span data-stu-id="573ea-363">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="573ea-364">È consigliabile registrare il valore che eredita le proprietà di dipendenza con <xref:System.Windows.DependencyProperty.RegisterAttached%2A> anche se la classe definisce funzioni wrapper di proprietà che espongono la proprietà di dipendenza e anche se non si prevede di esporre Get * e * Set di metodi statici per fornire true collegati funzioni di supporto di proprietà.</span><span class="sxs-lookup"><span data-stu-id="573ea-364">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="573ea-365">Anche se può sembrare ereditarietà del valore della proprietà per le proprietà di dipendenza non associata, il comportamento di ereditarietà per una proprietà non associata tramite certi limiti di elementi nell'albero della fase di esecuzione è definito.</span><span class="sxs-lookup"><span data-stu-id="573ea-365">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="573ea-366">Registrazione della proprietà collegata in modo efficace rende la proprietà associata una proprietà globale per il sistema di proprietà e assicura che l'ereditarietà del valore della proprietà funziona tra tutti i limiti in un albero degli elementi.</span><span class="sxs-lookup"><span data-stu-id="573ea-366">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="573ea-367">L'esempio canonico di tale limite è il contenuto di un <xref:System.Windows.DependencyProperty.RegisterAttached%2A>, dove il <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> contenuto potrebbe essere ricaricato indipendentemente dall'esistenza del .</span><span class="sxs-lookup"><span data-stu-id="573ea-367">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="573ea-368">Per altre informazioni, vedere [Ereditarietà del valore della proprietà](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-368">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType, defaultMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="573ea-369">The name of the dependency property to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-369">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="573ea-370">The type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-370">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="573ea-371">The owner type that is registering the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-371">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="573ea-372">Property metadata for the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-372">Property metadata for the dependency property.</span>
          </span>
          <span data-ttu-id="573ea-373">This can include the default value as well as other characteristics.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-373">This can include the default value as well as other characteristics.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="573ea-374">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-374">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="573ea-375">Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-375">Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="573ea-376">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-376">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="573ea-377">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-377">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-378">Una proprietà associata è un concetto di proprietà definito da [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="573ea-378">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="573ea-379"> le proprietà associati vengono implementati come proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="573ea-379"> implements attached properties as dependency properties.</span></span> <span data-ttu-id="573ea-380">Poiché il [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] le proprietà associate sono proprietà di dipendenza, possono avere metadati applicati e che possono essere utilizzato dal sistema di proprietà generale per operazioni quali la segnalazione delle caratteristiche di layout.</span><span class="sxs-lookup"><span data-stu-id="573ea-380">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="573ea-381">Per altre informazioni, vedere [Cenni preliminari sulle proprietà associate](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-381">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="573ea-382">Per altre informazioni sulla registrazione di proprietà di dipendenza, vedere <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="573ea-382">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="573ea-383">Utilizzare RegisterAttached eredità valore delle proprietà di dipendenza</span><span class="sxs-lookup"><span data-stu-id="573ea-383">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="573ea-384">Uno scenario specifico per la registrazione di una proprietà di dipendenza con <xref:System.Windows.DependencyProperty.RegisterAttached%2A> invece di <xref:System.Windows.DependencyProperty.Register%2A> per supportare l'ereditarietà del valore della proprietà.</span><span class="sxs-lookup"><span data-stu-id="573ea-384">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="573ea-385">È consigliabile registrare il valore che eredita le proprietà di dipendenza con <xref:System.Windows.DependencyProperty.RegisterAttached%2A> anche se la classe definisce funzioni wrapper di proprietà che espongono la proprietà di dipendenza e anche se non si prevede di esporre Get * e * Set di metodi statici per fornire true collegati funzioni di supporto di proprietà.</span><span class="sxs-lookup"><span data-stu-id="573ea-385">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="573ea-386">Anche se può sembrare ereditarietà del valore della proprietà per le proprietà di dipendenza non associata, il comportamento di ereditarietà per una proprietà non associata tramite certi limiti di elementi nell'albero della fase di esecuzione è definito.</span><span class="sxs-lookup"><span data-stu-id="573ea-386">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="573ea-387">Registrazione della proprietà collegata in modo efficace rende la proprietà associata una proprietà globale per il sistema di proprietà e assicura che l'ereditarietà del valore della proprietà funziona tra tutti i limiti in un albero degli elementi.</span><span class="sxs-lookup"><span data-stu-id="573ea-387">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="573ea-388">L'esempio canonico di tale limite è il contenuto di un <xref:System.Windows.DependencyProperty.RegisterAttached%2A>, dove il <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> contenuto potrebbe essere ricaricato indipendentemente dall'esistenza del .</span><span class="sxs-lookup"><span data-stu-id="573ea-388">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="573ea-389">Per altre informazioni, vedere [Ereditarietà del valore della proprietà](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-389">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="573ea-390">Nell'esempio seguente registra una proprietà associata in una classe astratta usando questo <xref:System.Windows.DependencyProperty.RegisterAttached%2A> firma.</span><span class="sxs-lookup"><span data-stu-id="573ea-390">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span> <span data-ttu-id="573ea-391">Questa proprietà associata è una proprietà del tipo di enumerazione e la registrazione consente di aggiungere un callback di convalida per verificare che il valore specificato è un valore dell'enumerazione.</span><span class="sxs-lookup"><span data-stu-id="573ea-391">This attached property is an enumeration type property, and the registration adds a validation callback to verify that the provided value is a value of the enumeration.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttachedReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="573ea-392">Registers a read-only attached property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-392">Registers a read-only attached property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttachedReadOnly (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterAttachedReadOnly : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterAttachedReadOnly (name, propertyType, ownerType, defaultMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="573ea-393">The name of the dependency property to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-393">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="573ea-394">The type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-394">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="573ea-395">The owner type that is registering the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-395">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="573ea-396">Property metadata for the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-396">Property metadata for the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="573ea-397">Registers a read-only attached property, with the specified property type, owner type, and property metadata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-397">Registers a read-only attached property, with the specified property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="573ea-398">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-398">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-399">Questo metodo restituisce il tipo <xref:System.Windows.DependencyPropertyKey>, mentre <xref:System.Windows.DependencyProperty.RegisterAttached%2A> restituisce il tipo <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="573ea-399">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="573ea-400">In genere, le chiavi che rappresentano le proprietà di sola lettura non sono rese pubbliche, perché le chiavi possono essere utilizzate per impostare il valore di proprietà di dipendenza chiamando <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="573ea-400">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="573ea-401">La progettazione della classe influirà sui requisiti, ma è in genere consigliabile limitare l'accesso e la visibilità di qualsiasi <xref:System.Windows.DependencyPropertyKey> solo alle parti del codice che è necessario impostare questa proprietà di dipendenza come parte della logica di classe o l'applicazione.</span><span class="sxs-lookup"><span data-stu-id="573ea-401">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="573ea-402">Si consiglia inoltre di esporre un identificatore di proprietà di dipendenza per la proprietà di dipendenza di sola lettura, esponendo il valore di <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> come un `public static readonly` campo nella classe.</span><span class="sxs-lookup"><span data-stu-id="573ea-402">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="573ea-403">Le proprietà associate di sola lettura sono uno scenario raro, perché lo scenario principale per una proprietà associata è l'utilizzo in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="573ea-403">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="573ea-404">Senza un setter pubblico, non può essere impostata una proprietà associata [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] sintassi.</span><span class="sxs-lookup"><span data-stu-id="573ea-404">Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="573ea-405">Per altre informazioni sulla registrazione di proprietà di dipendenza, vedere <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="573ea-405">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="573ea-406">Utilizzare RegisterAttached eredità valore delle proprietà di dipendenza</span><span class="sxs-lookup"><span data-stu-id="573ea-406">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="573ea-407">Per supportare l'ereditarietà del valore della proprietà associata è uno scenario specifico per la registrazione di una proprietà di dipendenza come.</span><span class="sxs-lookup"><span data-stu-id="573ea-407">One particular scenario for registering a dependency property as attached is to support property value inheritance.</span></span> <span data-ttu-id="573ea-408">È consigliabile registrare il valore che eredita le proprietà di dipendenza con <xref:System.Windows.DependencyProperty.RegisterAttached%2A> anche se la classe definisce funzioni wrapper di proprietà che espongono la proprietà di dipendenza e anche se non si prevede di esporre Get * e * Set di metodi statici per fornire true collegati funzioni di supporto di proprietà.</span><span class="sxs-lookup"><span data-stu-id="573ea-408">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="573ea-409">Anche se può sembrare ereditarietà del valore della proprietà per le proprietà di dipendenza non associata, il comportamento di ereditarietà per una proprietà non associata tramite certi limiti di elementi nell'albero della fase di esecuzione è definito.</span><span class="sxs-lookup"><span data-stu-id="573ea-409">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="573ea-410">Registrazione della proprietà collegata in modo efficace rende la proprietà associata una proprietà globale per il sistema di proprietà e assicura che l'ereditarietà del valore della proprietà funziona tra tutti i limiti in un albero degli elementi.</span><span class="sxs-lookup"><span data-stu-id="573ea-410">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="573ea-411">L'esempio canonico di tale limite è il contenuto di un <xref:System.Windows.DependencyProperty.RegisterAttached%2A>, dove il <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> contenuto potrebbe essere ricaricato indipendentemente dall'esistenza del .</span><span class="sxs-lookup"><span data-stu-id="573ea-411">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="573ea-412">Per altre informazioni, vedere [Ereditarietà del valore della proprietà](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-412">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterAttachedReadOnly : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterAttachedReadOnly (name, propertyType, ownerType, defaultMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="573ea-413">The name of the dependency property to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-413">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="573ea-414">The type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-414">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="573ea-415">The owner type that is registering the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-415">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="573ea-416">Property metadata for the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-416">Property metadata for the dependency property.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="573ea-417">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-417">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="573ea-418">Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-418">Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="573ea-419">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-419">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-420">Questo metodo restituisce il tipo <xref:System.Windows.DependencyPropertyKey>, mentre <xref:System.Windows.DependencyProperty.RegisterAttached%2A> restituisce il tipo <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="573ea-420">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="573ea-421">In genere, le chiavi che rappresentano il tipo <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="573ea-421">Typically, the keys that represent the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="573ea-422">In genere, le chiavi che rappresentano le proprietà di sola lettura non sono rese pubbliche, perché le chiavi possono essere utilizzate per impostare il valore di proprietà di dipendenza chiamando <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="573ea-422">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="573ea-423">La progettazione della classe influirà sui requisiti, ma è in genere consigliabile limitare l'accesso e la visibilità di qualsiasi <xref:System.Windows.DependencyPropertyKey> solo alle parti del codice che è necessario impostare questa proprietà di dipendenza come parte della logica di classe o l'applicazione.</span><span class="sxs-lookup"><span data-stu-id="573ea-423">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="573ea-424">Si consiglia inoltre di esporre un identificatore di proprietà di dipendenza per la proprietà di dipendenza di sola lettura, esponendo il valore di <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> come un `public static readonly` campo nella classe.</span><span class="sxs-lookup"><span data-stu-id="573ea-424">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="573ea-425">Le proprietà associate di sola lettura sono uno scenario raro, perché lo scenario principale per una proprietà associata è l'utilizzo in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="573ea-425">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="573ea-426">Senza un setter pubblico, non può essere impostata una proprietà associata [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] sintassi.</span><span class="sxs-lookup"><span data-stu-id="573ea-426">Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="573ea-427">Per altre informazioni sulla registrazione di proprietà di dipendenza, vedere <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="573ea-427">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="573ea-428">Utilizzare RegisterAttached eredità valore delle proprietà di dipendenza</span><span class="sxs-lookup"><span data-stu-id="573ea-428">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="573ea-429">Uno scenario specifico per la registrazione di una proprietà di dipendenza collegata anziché <xref:System.Windows.DependencyProperty.Register%2A> per supportare l'ereditarietà del valore della proprietà.</span><span class="sxs-lookup"><span data-stu-id="573ea-429">One particular scenario for registering a dependency property as attached instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="573ea-430">È consigliabile registrare il valore che eredita le proprietà di dipendenza con <xref:System.Windows.DependencyProperty.RegisterAttached%2A> anche se la classe definisce funzioni wrapper di proprietà che espongono la proprietà di dipendenza e anche se non si prevede di esporre Get * e * Set di metodi statici per fornire true collegati funzioni di supporto di proprietà.</span><span class="sxs-lookup"><span data-stu-id="573ea-430">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="573ea-431">Anche se può sembrare ereditarietà del valore della proprietà per le proprietà di dipendenza non associata, il comportamento di ereditarietà per una proprietà non associata tramite certi limiti di elementi nell'albero della fase di esecuzione è definito.</span><span class="sxs-lookup"><span data-stu-id="573ea-431">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="573ea-432">Registrazione della proprietà collegata in modo efficace rende la proprietà associata una proprietà globale per il sistema di proprietà e assicura che l'ereditarietà del valore della proprietà funziona tra tutti i limiti in un albero degli elementi.</span><span class="sxs-lookup"><span data-stu-id="573ea-432">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="573ea-433">L'esempio canonico di tale limite è il contenuto di un <xref:System.Windows.DependencyProperty.RegisterAttached%2A>, dove il <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> contenuto potrebbe essere ricaricato indipendentemente dall'esistenza del .</span><span class="sxs-lookup"><span data-stu-id="573ea-433">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="573ea-434">Per altre informazioni, vedere [Ereditarietà del valore della proprietà](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-434">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="573ea-435">Registers a dependency property as a read-only dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-435">Registers a dependency property as a read-only dependency property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterReadOnly (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterReadOnly : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterReadOnly (name, propertyType, ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="573ea-436">The name of the dependency property to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-436">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="573ea-437">The type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-437">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="573ea-438">The owner type that is registering the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-438">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="573ea-439">Property metadata for the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-439">Property metadata for the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="573ea-440">Registers a read-only dependency property, with the specified property type, owner type, and property metadata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-440">Registers a read-only dependency property, with the specified property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="573ea-441">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-441">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-442">Questo metodo restituisce il tipo <xref:System.Windows.DependencyPropertyKey>, mentre <xref:System.Windows.DependencyProperty.RegisterAttached%2A> restituisce il tipo <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="573ea-442">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="573ea-443">In genere, le chiavi che rappresentano le proprietà di sola lettura non sono rese pubbliche, perché le chiavi possono essere utilizzate per impostare il valore di proprietà di dipendenza chiamando <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="573ea-443">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="573ea-444">La progettazione della classe influirà sui requisiti, ma è in genere consigliabile limitare l'accesso e la visibilità di qualsiasi <xref:System.Windows.DependencyPropertyKey> solo alle parti del codice che è necessario impostare questa proprietà di dipendenza come parte della logica di classe o l'applicazione.</span><span class="sxs-lookup"><span data-stu-id="573ea-444">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="573ea-445">Si consiglia inoltre di esporre un identificatore di proprietà di dipendenza per la proprietà di dipendenza di sola lettura, esponendo il valore di <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> come un `public static readonly` campo nella classe.</span><span class="sxs-lookup"><span data-stu-id="573ea-445">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="573ea-446">Le proprietà di dipendenza di sola lettura sono piuttosto uno scenario tipico entrambi esistente [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] e per gli scenari di personalizzazione, perché altri [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] funzionalità potrebbero richiedere una proprietà di dipendenza, anche se tale proprietà non deve essere impostata da chiamanti.</span><span class="sxs-lookup"><span data-stu-id="573ea-446">Read-only dependency properties are a fairly typical scenario both in the existing [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] and for customization scenarios, because other [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features might require a dependency property even if that property is not intended to be settable by callers.</span></span> <span data-ttu-id="573ea-447">È possibile usare il valore di una proprietà di dipendenza di sola lettura come base per altre operazioni di sistema di proprietà che accettano una proprietà di dipendenza, ad esempio basare un <xref:System.Windows.Trigger> nella proprietà di dipendenza in uno stile.</span><span class="sxs-lookup"><span data-stu-id="573ea-447">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="573ea-448">Per altre informazioni sulla registrazione di proprietà di dipendenza, vedere <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="573ea-448">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="573ea-449">Nell'esempio seguente viene registrato un `AquariumSize` proprietà di dipendenza di sola lettura.</span><span class="sxs-lookup"><span data-stu-id="573ea-449">The following example registers an `AquariumSize` dependency property as read-only.</span></span> <span data-ttu-id="573ea-450">Nell'esempio viene definita `AquariumSizeKey` come una chiave interna (in modo che le altre classi nell'assembly è stato possibile eseguire l'override dei metadati) ed espone l'identificatore di proprietà di dipendenza in base a tale chiave come `AquariumSizeProperty`.</span><span class="sxs-lookup"><span data-stu-id="573ea-450">The example defines `AquariumSizeKey` as an internal key (so that other classes in the assembly could override metadata) and exposes the dependency property identifier based on that key as `AquariumSizeProperty`.</span></span> <span data-ttu-id="573ea-451">Inoltre, viene creato un wrapper per `AquariumSize`, con solo una funzione di accesso get.</span><span class="sxs-lookup"><span data-stu-id="573ea-451">Also, a wrapper is created for `AquariumSize`, with only a get accessor.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterReadOnly : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterReadOnly (name, propertyType, ownerType, typeMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="573ea-452">The name of the dependency property to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-452">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="573ea-453">The type of the property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-453">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="573ea-454">The owner type that is registering the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-454">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="573ea-455">Property metadata for the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-455">Property metadata for the dependency property.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="573ea-456">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-456">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="573ea-457">Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-457">Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="573ea-458">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-458">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-459">Questo metodo restituisce il tipo <xref:System.Windows.DependencyPropertyKey>, mentre <xref:System.Windows.DependencyProperty.RegisterAttached%2A> restituisce il tipo <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="573ea-459">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="573ea-460">In genere, le chiavi che rappresentano le proprietà di sola lettura non sono rese pubbliche, perché le chiavi possono essere utilizzate per impostare il valore di proprietà di dipendenza chiamando <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="573ea-460">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="573ea-461">La progettazione della classe influirà sui requisiti, ma è in genere consigliabile limitare l'accesso e la visibilità di qualsiasi <xref:System.Windows.DependencyPropertyKey> solo alle parti del codice che è necessario impostare questa proprietà di dipendenza come parte della logica di classe o l'applicazione.</span><span class="sxs-lookup"><span data-stu-id="573ea-461">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="573ea-462">Si consiglia inoltre di esporre un identificatore di proprietà di dipendenza per la proprietà di dipendenza di sola lettura, esponendo il valore di <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> come un `public static readonly` campo nella classe.</span><span class="sxs-lookup"><span data-stu-id="573ea-462">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="573ea-463">Le proprietà di dipendenza di sola lettura sono uno scenario tipico.</span><span class="sxs-lookup"><span data-stu-id="573ea-463">Read-only dependency properties are a fairly typical scenario.</span></span> <span data-ttu-id="573ea-464">È possibile usare il valore di una proprietà di dipendenza di sola lettura come base per altre operazioni di sistema di proprietà che accettano una proprietà di dipendenza, ad esempio basare un <xref:System.Windows.Trigger> nella proprietà di dipendenza in uno stile.</span><span class="sxs-lookup"><span data-stu-id="573ea-464">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="573ea-465">Per altre informazioni sulla registrazione di proprietà di dipendenza, vedere <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="573ea-465">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 <span data-ttu-id="573ea-466">La convalida su una proprietà di dipendenza di sola lettura potrebbe essere meno importante.</span><span class="sxs-lookup"><span data-stu-id="573ea-466">Validation on a read-only dependency property might be less important.</span></span> <span data-ttu-id="573ea-467">Il livello di accesso non pubblico specificato per la chiave riduce la probabilità per l'input non valido non autorizzato.</span><span class="sxs-lookup"><span data-stu-id="573ea-467">The nonpublic access level you specify for the key reduces the likelihood for arbitrary invalid input.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dependencyProperty.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="573ea-468">Returns the string representation of the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-468">Returns the string representation of the dependency property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="573ea-469">The string representation of the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-469">The string representation of the dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-470">Questa implementazione restituisce il <xref:System.Windows.DependencyProperty.Name%2A> valore della proprietà.</span><span class="sxs-lookup"><span data-stu-id="573ea-470">This implementation returns the <xref:System.Windows.DependencyProperty.Name%2A> property value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.DependencyProperty.Name" />
      </Docs>
    </Member>
    <Member MemberName="UnsetValue">
      <MemberSignature Language="C#" Value="public static readonly object UnsetValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object UnsetValue" />
      <MemberSignature Language="DocId" Value="F:System.Windows.DependencyProperty.UnsetValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnsetValue As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ UnsetValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnsetValue : obj" Usage="System.Windows.DependencyProperty.UnsetValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="573ea-471">Specifies a static value that is used by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system rather than <see langword="null" /> to indicate that the property exists, but does not have its value set by the property system.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-471">Specifies a static value that is used by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system rather than <see langword="null" /> to indicate that the property exists, but does not have its value set by the property system.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-472"><xref:System.Windows.DependencyProperty.UnsetValue> è un valore di sentinel che viene usato per gli scenari in cui il [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] sistema di proprietà non è in grado di determinare una richiesta <xref:System.Windows.DependencyProperty> valore.</span><span class="sxs-lookup"><span data-stu-id="573ea-472"><xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value that is used for scenarios where the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system is unable to determine a requested <xref:System.Windows.DependencyProperty> value.</span></span> <span data-ttu-id="573ea-473"><xref:System.Windows.DependencyProperty.UnsetValue> viene usato invece `null`, in quanto `null` potrebbe essere un valore di proprietà valido, nonché un valore valido (e più frequente) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>.</span><span class="sxs-lookup"><span data-stu-id="573ea-473"><xref:System.Windows.DependencyProperty.UnsetValue> is used rather than `null`, because `null` could be a valid property value, as well as a valid (and frequently used) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>.</span></span>  
  
 <span data-ttu-id="573ea-474"><xref:System.Windows.DependencyProperty.UnsetValue> non viene mai restituita fuori <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="573ea-474"><xref:System.Windows.DependencyProperty.UnsetValue> is never returned out of <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="573ea-475">Quando si chiama <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> su una proprietà di dipendenza su un <xref:System.Windows.DependencyObject> istanza, si applica una delle opzioni seguenti condizioni:</span><span class="sxs-lookup"><span data-stu-id="573ea-475">When you call <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> on a dependency property on a <xref:System.Windows.DependencyObject> instance, one of the following applies:</span></span>  
  
-   <span data-ttu-id="573ea-476">Una proprietà di dipendenza è un valore predefinito stabilito nei metadati e viene restituito tale valore.</span><span class="sxs-lookup"><span data-stu-id="573ea-476">A dependency property has a default value established in metadata and that value is returned.</span></span> <span data-ttu-id="573ea-477">Questo valore potrebbe derivare da <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="573ea-477">This value might come from <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
-   <span data-ttu-id="573ea-478">Un altro valore definito dal sistema di proprietà e il valore predefinito è più pertinente.</span><span class="sxs-lookup"><span data-stu-id="573ea-478">Some other value was established by the property system, and the default value is no longer relevant.</span></span> <span data-ttu-id="573ea-479">Per altri dettagli, vedere [Precedenza del valore della proprietà di dipendenza](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-479">For details, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="573ea-480">Impostazione di un <xref:System.Windows.PropertyMetadata.DefaultValue%2A> di <xref:System.Windows.DependencyProperty.UnsetValue> specificamente è consentita.</span><span class="sxs-lookup"><span data-stu-id="573ea-480">Setting a <xref:System.Windows.PropertyMetadata.DefaultValue%2A> of <xref:System.Windows.DependencyProperty.UnsetValue> is specifically disallowed.</span></span>  
  
 <span data-ttu-id="573ea-481"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType> Restituisce <xref:System.Windows.DependencyProperty.UnsetValue> quando la proprietà richiesta è non stato impostata localmente.</span><span class="sxs-lookup"><span data-stu-id="573ea-481"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType> returns <xref:System.Windows.DependencyProperty.UnsetValue> when the requested property has not been locally set.</span></span>  
  
 <span data-ttu-id="573ea-482"><xref:System.Windows.DependencyProperty.UnsetValue> ha un significato speciale quando usato come valore restituito di un <xref:System.Windows.CoerceValueCallback>.</span><span class="sxs-lookup"><span data-stu-id="573ea-482"><xref:System.Windows.DependencyProperty.UnsetValue> has a special meaning when used as the return value of a <xref:System.Windows.CoerceValueCallback>.</span></span> <span data-ttu-id="573ea-483">Per informazioni dettagliate, vedere [callback delle proprietà di dipendenza e la convalida](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-483">For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
 <span data-ttu-id="573ea-484">Se esegue il binding a un database, si noti che <xref:System.Windows.DependencyProperty.UnsetValue> non equivale al <xref:System.DBNull.Value>, in modo analogo al modo in cui <xref:System.DBNull.Value> non equivale a un vero null.</span><span class="sxs-lookup"><span data-stu-id="573ea-484">If you are binding to a database, note that <xref:System.Windows.DependencyProperty.UnsetValue> is not equivalent to <xref:System.DBNull.Value>, in a similar way to how <xref:System.DBNull.Value> is not equivalent to a true null.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateValueCallback">
      <MemberSignature Language="C#" Value="public System.Windows.ValidateValueCallback ValidateValueCallback { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ValidateValueCallback ValidateValueCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidateValueCallback As ValidateValueCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ValidateValueCallback ^ ValidateValueCallback { System::Windows::ValidateValueCallback ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidateValueCallback : System.Windows.ValidateValueCallback" Usage="System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ValidateValueCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="573ea-485">Gets the value validation callback for the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-485">Gets the value validation callback for the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="573ea-486">Il callback di convalida del valore per questa proprietà di dipendenza, come fornito per il <paramref name="validateValueCallback" /> parametro nella registrazione della proprietà di dipendenza originale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="573ea-486">The value validation callback for this dependency property, as provided for the <paramref name="validateValueCallback" /> parameter in the original dependency property registration.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="573ea-487">Questa proprietà conterrà `null` per qualsiasi proprietà di dipendenza con alcun callback di convalida registrato.</span><span class="sxs-lookup"><span data-stu-id="573ea-487">This property will contain `null` for any dependency property with no registered validation callback.</span></span>  
  
 <span data-ttu-id="573ea-488">Valore di convalida richiamate devono agire in senso statico: convalida applicata tramite il <xref:System.Windows.ValidateValueCallback> non è possibile determinare se il valore specificato è valido per una particolare istanza.</span><span class="sxs-lookup"><span data-stu-id="573ea-488">Validate value callbacks must act in a static sense: validation applied through the <xref:System.Windows.ValidateValueCallback> cannot determine whether the provided value is valid for any particular instance.</span></span> <span data-ttu-id="573ea-489">Il callback può determinare solo se tutti gli oggetti che possiedono la proprietà di dipendenza devono o non devono accettare il valore specificato come valido.</span><span class="sxs-lookup"><span data-stu-id="573ea-489">The callback can only determine whether all objects that possess the dependency property should or should not accept the provided value as valid.</span></span> <span data-ttu-id="573ea-490">Se è necessario eseguire la convalida che si basa sulla conoscenza dei valori di altre proprietà di dipendenza in una determinata istanza, utilizzare un <xref:System.Windows.CoerceValueCallback> invece.</span><span class="sxs-lookup"><span data-stu-id="573ea-490">If you need to perform validation that relies on knowing the values of other dependency properties on a particular instance, use a <xref:System.Windows.CoerceValueCallback> instead.</span></span> <span data-ttu-id="573ea-491">Il <xref:System.Windows.CoerceValueCallback> viene registrata come parte dei metadati di proprietà di dipendenza, anziché direttamente nell'identificatore delle proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="573ea-491">The <xref:System.Windows.CoerceValueCallback> is registered as part of dependency property metadata, rather than directly within the dependency property identifier.</span></span> <span data-ttu-id="573ea-492">Per informazioni dettagliate, vedere [callback delle proprietà di dipendenza e la convalida](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="573ea-492">For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.ValidateValueCallback" />
      </Docs>
    </Member>
  </Members>
</Type>