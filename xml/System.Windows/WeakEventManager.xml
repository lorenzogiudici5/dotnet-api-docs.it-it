<Type Name="WeakEventManager" FullName="System.Windows.WeakEventManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8241e2ff47b51e906cfa1cf3ca25aac03e6ca974" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37489330" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract WeakEventManager extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WeakEventManager&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class WeakEventManager abstract : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type WeakEventManager = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="40cf3-101">Fornisce una classe base per la gestione degli eventi usata nel *modello di eventi deboli*.</span>
      <span class="sxs-lookup">
        <span data-stu-id="40cf3-101">Provides a base class for the event manager that is used in the *weak event pattern*.</span>
      </span>
      <span data-ttu-id="40cf3-102">Il gestore aggiunge e rimuove listener per eventi (o callback) che utilizzano il modello.</span>
      <span class="sxs-lookup">
        <span data-stu-id="40cf3-102">The manager adds and removes listeners for events (or callbacks) that also use the pattern.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40cf3-103">È in genere possibile usare il modello di eventi deboli quando l'origine evento abbia una durata degli oggetti che è indipendente dal listener di eventi.</span><span class="sxs-lookup"><span data-stu-id="40cf3-103">You typically use the weak event pattern when the event source has an object lifetime that is independent of the event listeners.</span></span> <span data-ttu-id="40cf3-104">Tramite l'evento centrale dell'invio di funzionalità di un <xref:System.Windows.WeakEventManager> consente ai gestori del listener venga sottoposto a garbage collection anche se l'oggetto di origine viene mantenuto.</span><span class="sxs-lookup"><span data-stu-id="40cf3-104">Using the central event dispatching capability of a <xref:System.Windows.WeakEventManager> allows the listener's handlers to be garbage collected even if the source object persists.</span></span> <span data-ttu-id="40cf3-105">Al contrario, un'associazione dell'evento normale utilizzando il `+=` operatore fa sì che l'origine eventualmente disconnessa che contiene un riferimento di listener di traccia.</span><span class="sxs-lookup"><span data-stu-id="40cf3-105">By contrast, a regular event hookup using the `+=` operator causes the potentially disconnected source to hold a reference to the listeners.</span></span> <span data-ttu-id="40cf3-106">Ciò impedisce che il destinatario di garbage collection in modo tempestivo.</span><span class="sxs-lookup"><span data-stu-id="40cf3-106">This prevents the receiver from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="40cf3-107">Una situazione comune in cui è necessario utilizzare le relazioni di durata tra le origini e i listener dello schema di eventi debole è la gestione degli eventi di aggiornamento provenienti dal data binding.</span><span class="sxs-lookup"><span data-stu-id="40cf3-107">One common situation where the lifetime relationships between sources and listeners should use of the weak event pattern is the handling of update events coming from data bindings.</span></span>  
  
 <span data-ttu-id="40cf3-108">Il modello di eventi deboli è anche utilizzabile per eventi regolari e i callback.</span><span class="sxs-lookup"><span data-stu-id="40cf3-108">The weak event pattern can also be used for callbacks and regular events.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="40cf3-109">
        <para>Per un esempio di una classe personalizzata <see cref="T:System.Windows.WeakEventManager" />, vedere [modelli di eventi deboli](~/docs/framework/wpf/advanced/weak-event-patterns.md).</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="40cf3-109">
          <para>For an example of a custom <see cref="T:System.Windows.WeakEventManager" />, see [Weak Event Patterns](~/docs/framework/wpf/advanced/weak-event-patterns.md).</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WeakEventManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WeakEventManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="40cf3-110">Inizializza i valori della classe di base quando viene utilizzato come inizializzatore dal costruttore di una classe derivata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-110">Initializes base class values when it is used as the initializer by the constructor of a derived class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="protected void DeliverEvent (object sender, EventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEvent(object sender, class System.EventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEvent (sender As Object, args As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEvent(System::Object ^ sender, EventArgs ^ args);" />
      <MemberSignature Language="F#" Value="member this.DeliverEvent : obj * EventArgs -&gt; unit" Usage="weakEventManager.DeliverEvent (sender, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">
          <span data-ttu-id="40cf3-111">Oggetto nel quale è gestito l'evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-111">The object on which the event is being handled.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="40cf3-112">Oggetto <see cref="T:System.EventArgs" /> che contiene i dati dell'evento da recapitare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-112">An <see cref="T:System.EventArgs" /> that contains the event data for the event to deliver.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40cf3-113">Recapita l'evento gestito a ogni listener.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-113">Delivers the event being managed to each listener.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40cf3-114">Chiamare il <xref:System.Windows.WeakEventManager.DeliverEvent%2A> metodo all'interno di gestori eventi che vengono aggiunti o rimossi dal <xref:System.Windows.WeakEventManager.StartListening%2A> e <xref:System.Windows.WeakEventManager.StopListening%2A> implementazioni delle sottoclassi.</span><span class="sxs-lookup"><span data-stu-id="40cf3-114">Call the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method from within the event handlers that are added or removed by the <xref:System.Windows.WeakEventManager.StartListening%2A> and <xref:System.Windows.WeakEventManager.StopListening%2A> implementations of subclasses.</span></span>  
  
 <span data-ttu-id="40cf3-115">Se si chiama il <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> metodo di `AddListener` implementazione della classe, l'elenco di listener che riceve l'evento viene mantenuta in una raccolta sottostante.</span><span class="sxs-lookup"><span data-stu-id="40cf3-115">If you call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method in your `AddListener` implementation of your class, the list of listeners receiving the event is kept in an underlying collection.</span></span> <span data-ttu-id="40cf3-116">(`AddListener` non fa parte di un contratto di interfaccia o classe.</span><span class="sxs-lookup"><span data-stu-id="40cf3-116">(`AddListener` is not part of an interface or class contract.</span></span> <span data-ttu-id="40cf3-117">`AddListener` è il nome suggerito per il metodo della classe del gestore che chiama <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> e aggiunge i listener di eventi deboli modello per l'evento.)</span><span class="sxs-lookup"><span data-stu-id="40cf3-117">`AddListener` is the suggested name for the method of your manager class that calls <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and adds weak event pattern listeners for the event.)</span></span>  
  
 <span data-ttu-id="40cf3-118"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> Aggiunge i listener a un unico elenco.</span><span class="sxs-lookup"><span data-stu-id="40cf3-118"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single list.</span></span> <span data-ttu-id="40cf3-119">Se l'implementazione del gestore gestisce più di un elenco di listener per ogni evento, non utilizzare <xref:System.Windows.WeakEventManager.DeliverEvent%2A> o <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span><span class="sxs-lookup"><span data-stu-id="40cf3-119">If your manager implementation maintains more than one list of listeners per event, do not use <xref:System.Windows.WeakEventManager.DeliverEvent%2A> or <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span></span> <span data-ttu-id="40cf3-120">Al contrario, l'implementazione deve creare la propria <xref:System.Windows.WeakEventManager.ListenerList> istanze `AddListener` deve aggiungere i listener all'elenco appropriato, e gli eventi devono essere recapitati all'elenco di listener appropriato chiamando <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span><span class="sxs-lookup"><span data-stu-id="40cf3-120">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="DeliverEventToList">
      <MemberSignature Language="C#" Value="protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEventToList(object sender, class System.EventArgs args, class System.Windows.WeakEventManager/ListenerList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEventToList (sender As Object, args As EventArgs, list As WeakEventManager.ListenerList)" />
      <MemberSignature Language="F#" Value="member this.DeliverEventToList : obj * EventArgs * System.Windows.WeakEventManager.ListenerList -&gt; unit" Usage="weakEventManager.DeliverEventToList (sender, args, list)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEventToList(System::Object ^ sender, EventArgs ^ args, System::Windows::WeakEventManager::ListenerList ^ list);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList" />
      </Parameters>
      <Docs>
        <param name="sender">
          <span data-ttu-id="40cf3-121">Oggetto nel quale è gestito l'evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-121">The object on which the event is being handled.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="40cf3-122">Oggetto <see cref="T:System.EventArgs" /> che contiene i dati dell'evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-122">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <param name="list">
          <span data-ttu-id="40cf3-123">Oggetto <see cref="T:System.Windows.WeakEventManager.ListenerList" /> fornito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-123">The provided <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40cf3-124">Recapita l'evento gestito a ogni listener contenuto nell'elenco fornito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-124">Delivers the event being managed to each listener in the provided list.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40cf3-125">Questo metodo è necessario se l'implementazione del gestore gestisce gli elenchi di listener separati in base alle informazioni acquisite nei dati dell'evento.</span><span class="sxs-lookup"><span data-stu-id="40cf3-125">This method is necessary if your manager implementation maintains separate listeners lists based on information that is captured in the event data.</span></span> <span data-ttu-id="40cf3-126">Se si usa questa tecnica avanzata, è necessario creare e gestire elenchi separati come parte dell'implementazione della gestione ed è necessario fornire un modo per aggiungere i listener per un elenco specifico.</span><span class="sxs-lookup"><span data-stu-id="40cf3-126">If you use this advanced technique, you must create and maintain the separate lists as part of your manager implementation, and you must provide a way to add listeners to a specific list.</span></span> <span data-ttu-id="40cf3-127">L'implementazione del gestore che ascolta l'evento non elaborato deve agire la condizione che si utilizzano per differenziare gli elenchi e recapitare l'evento solo l'elenco appropriato o agli elenchi.</span><span class="sxs-lookup"><span data-stu-id="40cf3-127">Your handler implementation that listens to the raw event must act upon the condition that you use to differentiate the lists, and deliver the event only to the appropriate list or lists.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentManager">
      <MemberSignature Language="C#" Value="protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Windows.WeakEventManager GetCurrentManager(class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetCurrentManager (managerType As Type) As WeakEventManager" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Windows::WeakEventManager ^ GetCurrentManager(Type ^ managerType);" />
      <MemberSignature Language="F#" Value="static member GetCurrentManager : Type -&gt; System.Windows.WeakEventManager" Usage="System.Windows.WeakEventManager.GetCurrentManager managerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managerType">
          <span data-ttu-id="40cf3-128">Tipo per il quale ottenere <see cref="T:System.Windows.WeakEventManager" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-128">The type to obtain the <see cref="T:System.Windows.WeakEventManager" /> for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40cf3-129">Restituisce l'implementazione di <see cref="T:System.Windows.WeakEventManager" /> utilizzata per il tipo fornito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-129">Returns the <see cref="T:System.Windows.WeakEventManager" /> implementation that is used for the provided type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40cf3-130">Implementazione di <see cref="T:System.Windows.WeakEventManager" /> corrispondente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-130">The matching <see cref="T:System.Windows.WeakEventManager" /> implementation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40cf3-131"><xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> le implementazioni di chiamano questo metodo con loro passato `managerType`.</span><span class="sxs-lookup"><span data-stu-id="40cf3-131"><xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementations call this method using their passed `managerType`.</span></span> <span data-ttu-id="40cf3-132">L'oggetto restituito <xref:System.Windows.WeakEventManager> viene quindi utilizzato come l'elemento di differenziazione che determina quali eventi è stato ricevuto e il gestore di classe privata da richiamare.</span><span class="sxs-lookup"><span data-stu-id="40cf3-132">The returned <xref:System.Windows.WeakEventManager> is then used as the differentiator that determines which event was received, and which private class handler to invoke.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="protected object this[object source] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Protected Property Item(source As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ source); void set(System::Object ^ source, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj with get, set" Usage="System.Windows.WeakEventManager.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="40cf3-133">Indice in base zero dell'origine richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-133">The zero-based index of the requested source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40cf3-134">Ottiene o imposta i dati archiviati per l'origine specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-134">Gets or sets the data being stored for the specified source.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="40cf3-135">Dati archiviati dal gestore per questa origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-135">Data being stored by the manager for this source.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40cf3-136">Le classi derivate possono scegliere quali dati e il tipo da archiviare in questo indicizzatore.</span><span class="sxs-lookup"><span data-stu-id="40cf3-136">Derived classes can choose what data and type to store in this indexer.</span></span> <span data-ttu-id="40cf3-137">In genere viene implementato come un <xref:System.Windows.WeakEventManager.ListenerList>, ovvero un elenco di riferimenti deboli al listener.</span><span class="sxs-lookup"><span data-stu-id="40cf3-137">Typically this is implemented as a <xref:System.Windows.WeakEventManager.ListenerList>, which is a list of weak references to listeners.</span></span> <span data-ttu-id="40cf3-138">Si sarebbe sufficiente modificare il tipo se il <xref:System.Windows.WeakEventManager.ListenerList> tipo non può contenere le informazioni necessarie.</span><span class="sxs-lookup"><span data-stu-id="40cf3-138">You would only have to change this type if the <xref:System.Windows.WeakEventManager.ListenerList> type cannot contain your required information.</span></span> <span data-ttu-id="40cf3-139">Se, pertanto, sarà necessario eseguire l'override di <xref:System.Windows.WeakEventManager.Purge%2A> metodo in modo che tutte le operazioni di pulitura del tipo sottostante viene eseguita correttamente.</span><span class="sxs-lookup"><span data-stu-id="40cf3-139">If so, you will have to override the <xref:System.Windows.WeakEventManager.Purge%2A> method so that all cleanup of the underlying type is performed correctly.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.NewListenerList" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function NewListenerList () As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="abstract member NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList&#xA;override this.NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="weakEventManager.NewListenerList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="40cf3-140">Restituisce un nuovo oggetto per contenere i listener per un evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-140">Returns a new object to contain listeners to an event.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40cf3-141">Nuovo oggetto per contenere i listener a un evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-141">A new object to contain listeners to an event.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedAddHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedAddHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="40cf3-142">Oggetto di origine cui il delegato del gestore esegue la sottoscrizione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-142">The source object that the handler delegate subscribes to.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="40cf3-143">Il delegato che gestisce l'evento generato da <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-143">The delegate that handles the event that is raised by <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40cf3-144">Aggiunge il delegato specificato come gestore eventi dell'origine specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-144">Adds the specified delegate as an event handler of the specified source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddListener">
      <MemberSignature Language="C#" Value="protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedAddListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="40cf3-145">Origine alla quale associare il listener.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-145">The source to attach listeners to.</span>
          </span>
        </param>
        <param name="listener">
          <span data-ttu-id="40cf3-146">Classe in ascolto (che deve implementare <see cref="T:System.Windows.IWeakEventListener" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-146">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40cf3-147">Aggiunge il listener fornito all'origine fornita per l'evento gestito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-147">Adds the provided listener to the provided source for the event being managed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40cf3-148">Chiamare questo metodo all'interno della classe di gestione `AddListener` metodi su <xref:System.Windows.WeakEventManager> implementazioni.</span><span class="sxs-lookup"><span data-stu-id="40cf3-148">Call this method within your manager class `AddListener` methods on <xref:System.Windows.WeakEventManager> implementations.</span></span> <span data-ttu-id="40cf3-149">`AddListener` è il nome suggerito per il metodo statico è definire nella classe del gestore per consentire alle altre classi aggiungere un listener per il modello di eventi deboli.</span><span class="sxs-lookup"><span data-stu-id="40cf3-149">`AddListener` is the suggested name for the static method you define on your manager class to enable other classes to add a listener for your weak event pattern.</span></span> <span data-ttu-id="40cf3-150">`AddListener` deve accettare due parametri: la `source` in cui è associato il listener e il `listener` istanza.</span><span class="sxs-lookup"><span data-stu-id="40cf3-150">`AddListener` should take two parameters: the `source` where the listener is attached, and the `listener` instance.</span></span> <span data-ttu-id="40cf3-151">Per i `AddListener` implementazione, chiamare il <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> metodo nel gestore corrente e passare gli stessi due parametri.</span><span class="sxs-lookup"><span data-stu-id="40cf3-151">For your `AddListener` implementation, call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method on the current manager and pass the same two parameters.</span></span>  
  
 <span data-ttu-id="40cf3-152">Se è stata precedentemente vuoto, l'elenco di listener <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> chiamate il <xref:System.Windows.WeakEventManager.StartListening%2A> metodo internamente, specifico che verrà chiamato <xref:System.Windows.WeakEventManager.StartListening%2A> eseguire l'override tramite il polimorfismo.</span><span class="sxs-lookup"><span data-stu-id="40cf3-152">If the list of listeners was previously empty, <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> calls the <xref:System.Windows.WeakEventManager.StartListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StartListening%2A> override through polymorphism.</span></span>  
  
 <span data-ttu-id="40cf3-153"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> Aggiunge i listener a un singolo interno <xref:System.Windows.WeakEventManager.ListenerList> per ogni `source`.</span><span class="sxs-lookup"><span data-stu-id="40cf3-153"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`.</span></span> <span data-ttu-id="40cf3-154">Se l'implementazione del gestore gestisce più di un elenco di listener per ogni combinazione di origini eventi, non utilizzare <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span><span class="sxs-lookup"><span data-stu-id="40cf3-154">If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span></span> <span data-ttu-id="40cf3-155">Invece, l'implementazione deve creare la propria <xref:System.Windows.WeakEventManager.ListenerList> istanze `AddListener` deve aggiungere i listener all'elenco appropriato, e gli eventi devono essere recapitati all'elenco di listener appropriato chiamando il <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> evento invece di <xref:System.Windows.WeakEventManager.DeliverEvent%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="40cf3-155">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> event instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedRemoveHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="40cf3-156">Origine da cui rimuovere il gestore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-156">The source to remove the handler from.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="40cf3-157">Delegato da rimuovere da <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-157">The delegate to remove from <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40cf3-158">Rimuove il gestore aggiunto in precedenza dall'origine specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-158">Removes the previously added handler from the specified source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveListener">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedRemoveListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="40cf3-159">Origine da cui rimuovere i listener.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-159">The source to remove listeners from.</span>
          </span>
        </param>
        <param name="listener">
          <span data-ttu-id="40cf3-160">Classe in ascolto (che deve implementare <see cref="T:System.Windows.IWeakEventListener" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-160">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40cf3-161">Rimuove un listener precedentemente aggiunto dall'origine fornita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-161">Removes a previously added listener from the provided source.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40cf3-162">Chiamare questo metodo all'interno della classe di gestione `RemoveListener` metodi su <xref:System.Windows.WeakEventManager> implementazioni.</span><span class="sxs-lookup"><span data-stu-id="40cf3-162">Call this method within your manager class `RemoveListener` methods on <xref:System.Windows.WeakEventManager> implementations.</span></span> <span data-ttu-id="40cf3-163">`RemoveListener` è il nome suggerito per il metodo statico è definire nella classe del gestore per consentire alle altre classi rimuovere un listener per il modello di eventi deboli.</span><span class="sxs-lookup"><span data-stu-id="40cf3-163">`RemoveListener` is the suggested name for the static method you define on your manager class to enable other classes to remove a listener for your weak event pattern.</span></span> <span data-ttu-id="40cf3-164">`RemoveListener` deve accettare due parametri: la `source` in cui il listener viene rimosso e il `listener` classe.</span><span class="sxs-lookup"><span data-stu-id="40cf3-164">`RemoveListener` should take two parameters: the `source` where the listener is removed, and the `listener` class.</span></span> <span data-ttu-id="40cf3-165">Per i `RemoveListener` implementazione, chiamare il <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> metodo nel gestore corrente e passare gli stessi due parametri.</span><span class="sxs-lookup"><span data-stu-id="40cf3-165">For your `RemoveListener` implementation, call the <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> method on the current manager and pass the same two parameters.</span></span>  
  
 <span data-ttu-id="40cf3-166">Se una chiamata a <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> rimuove l'ultimo listener nell'elenco <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> chiamate il <xref:System.Windows.WeakEventManager.StopListening%2A> metodo internamente, specifico che verrà chiamato <xref:System.Windows.WeakEventManager.StopListening%2A> eseguire l'override tramite il polimorfismo.</span><span class="sxs-lookup"><span data-stu-id="40cf3-166">If a call to <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> removes the last listener in the list, <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> calls the <xref:System.Windows.WeakEventManager.StopListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StopListening%2A> override through polymorphism.</span></span>  
  
 <span data-ttu-id="40cf3-167"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> Rimuove i listener da un singolo interno <xref:System.Windows.WeakEventManager.ListenerList> per ogni `source`.</span><span class="sxs-lookup"><span data-stu-id="40cf3-167"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> removes listeners from a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`.</span></span> <span data-ttu-id="40cf3-168">Se l'implementazione del gestore gestisce più di un elenco di listener per ogni combinazione di origini eventi, non utilizzare <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>.</span><span class="sxs-lookup"><span data-stu-id="40cf3-168">If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>.</span></span> <span data-ttu-id="40cf3-169">Al contrario, l'implementazione deve creare la propria <xref:System.Windows.WeakEventManager.ListenerList> istanze, `RemoveListener` deve rimuovere i listener dall'elenco appropriato e gli eventi devono essere recapitati all'elenco di listener appropriato chiamando il <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> invece del metodo di <xref:System.Windows.WeakEventManager.DeliverEvent%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="40cf3-169">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `RemoveListener` should remove listeners from the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> method instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="protected virtual bool Purge (object source, object data, bool purgeAll);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool Purge(object source, object data, bool purgeAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Purge (source As Object, data As Object, purgeAll As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool Purge(System::Object ^ source, System::Object ^ data, bool purgeAll);" />
      <MemberSignature Language="F#" Value="abstract member Purge : obj * obj * bool -&gt; bool&#xA;override this.Purge : obj * obj * bool -&gt; bool" Usage="weakEventManager.Purge (source, data, purgeAll)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="purgeAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="40cf3-170">Origine per gli eventi attesi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-170">The source for events being listened to.</span>
          </span>
        </param>
        <param name="data">
          <span data-ttu-id="40cf3-171">Dati da controllare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-171">The data to check.</span>
          </span>
          <span data-ttu-id="40cf3-172">Si presume che questo oggetto sia un'implementazione di <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-172">This object is expected to be a <see cref="T:System.Windows.WeakEventManager.ListenerList" /> implementation.</span>
          </span>
        </param>
        <param name="purgeAll">
          <span data-ttu-id="40cf3-173">
            <see langword="true" /> per interrompere l'ascolto di <c>source</c> e rimuovere completamente tutte le voci da <c>data</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-173">
              <see langword="true" /> to stop listening to <c>source</c>, and completely remove all entries from <c>data</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40cf3-174">Rimuove voci di listener inattivi dall'elenco di dati per l'origine fornita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-174">Removes inactive listener entries from the data list for the provided source.</span>
          </span>
          <span data-ttu-id="40cf3-175">Restituisce <see langword="true" /> se alcune voci sono state effettivamente rimosse dall'elenco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-175">Returns <see langword="true" /> if some entries were actually removed from the list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="40cf3-176">
            <see langword="true" /> se alcune voci sono state effettivamente rimosse, in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-176">
              <see langword="true" /> if some entries were actually removed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40cf3-177">Il <xref:System.Windows.WeakEventManager.Purge%2A> metodo ha un'implementazione predefinita che rimuoverà tutte le voci quando i dati sono un <xref:System.Windows.WeakEventManager.ListenerList>.</span><span class="sxs-lookup"><span data-stu-id="40cf3-177">The <xref:System.Windows.WeakEventManager.Purge%2A> method has a default implementation that will remove all entries when data is a <xref:System.Windows.WeakEventManager.ListenerList>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="40cf3-178">
            <para>Se il tipo sottostante per il <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> è diverso da <see cref="T:System.Windows.WeakEventManager.ListenerList" />, o contiene dati oltre a un <see cref="T:System.Windows.WeakEventManager.ListenerList" />, è necessario eseguire l'override di <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> (metodo). La sostituzione deve fornire un comportamento di eliminazione per l'elenco di elementi di tipo alternativo. In generale, la sostituzione deve fornire un comportamento senza chiamare l'implementazione di base. Se uno specifico <see cref="T:System.Windows.WeakEventManager.ListenerList" /> deve comunque la cancellazione, chiamare <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-178">
              <para>If the underlying type for the <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> is something other than <see cref="T:System.Windows.WeakEventManager.ListenerList" />, or contains data beyond a <see cref="T:System.Windows.WeakEventManager.ListenerList" />, you must override the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method. The override should provide purge behavior for the alternate type items list. Generally, the override should provide behavior without calling the base implementation. If a specific <see cref="T:System.Windows.WeakEventManager.ListenerList" /> still needs clearing, call <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="ReadLock">
      <MemberSignature Language="C#" Value="protected IDisposable ReadLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable ReadLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ReadLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ReadLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ ReadLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadLock : IDisposable" Usage="System.Windows.WeakEventManager.ReadLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="40cf3-179">Imposta un blocco di lettura nella tabella di dati sottostanti e restituisce <see cref="T:System.IDisposable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-179">Establishes a read-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="40cf3-180">Oggetto che può essere utilizzato per impostare un blocco sui membri della tabella di dati ed essere rimosso all'occorrenza, mediante un costrutto <see langword="using" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-180">An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40cf3-181">Nelle classi derivate, esegue una query alla tabella dei contenuti in <xref:System.Windows.WeakEventManager.Item%2A> devono essere sempre eseguiti all'interno di un `using (ReadLock) { ... }` clausola, fatta eccezione per le query che sono già all'interno di un blocco di scrittura.</span><span class="sxs-lookup"><span data-stu-id="40cf3-181">In derived classes, queries to the table contained in <xref:System.Windows.WeakEventManager.Item%2A> should always occur within a `using (ReadLock) { ... }` clause, except for queries that are already within a write lock.</span></span> <span data-ttu-id="40cf3-182">Queste query possono essere necessarie se la classe supporta più sofisticati `AddListener` implementazione che richiede più dati oltre i `source` e il `listener`e utilizza il <xref:System.Windows.WeakEventManager.Item%2A> raccolta per archiviare le informazioni aggiuntive.</span><span class="sxs-lookup"><span data-stu-id="40cf3-182">These queries may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.WriteLock" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="protected void Remove (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Remove(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub Remove (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void Remove(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="member this.Remove : obj -&gt; unit" Usage="weakEventManager.Remove source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="40cf3-183">Origine per la quale rimuovere le informazioni del listener.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-183">The source to remove listener information for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40cf3-184">Rimuove tutti i listener per l'origine specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-184">Removes all listeners for the specified source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleCleanup">
      <MemberSignature Language="C#" Value="protected void ScheduleCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ScheduleCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ScheduleCleanup" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ScheduleCleanup ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ScheduleCleanup();" />
      <MemberSignature Language="F#" Value="member this.ScheduleCleanup : unit -&gt; unit" Usage="weakEventManager.ScheduleCleanup " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="40cf3-185">Richiede l'esecuzione, in un thread con priorità inferiore, della cancellazione di voci inutilizzate contenute nell'elenco di listener sottostante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-185">Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40cf3-186">Chiama il <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> è simile alla chiamata al metodo il <xref:System.Windows.WeakEventManager.Purge%2A> metodo nell'elenco del gestore corrente al thread con priorità inferiore, con il `purgeAll` parametro impostato su `false`.</span><span class="sxs-lookup"><span data-stu-id="40cf3-186">Calling the <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> method is similar to calling the <xref:System.Windows.WeakEventManager.Purge%2A> method on the current manager's list, at lower thread priority, with the `purgeAll` parameter set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentManager">
      <MemberSignature Language="C#" Value="protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void SetCurrentManager(class System.Type managerType, class System.Windows.WeakEventManager manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub SetCurrentManager (managerType As Type, manager As WeakEventManager)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void SetCurrentManager(Type ^ managerType, System::Windows::WeakEventManager ^ manager);" />
      <MemberSignature Language="F#" Value="static member SetCurrentManager : Type * System.Windows.WeakEventManager -&gt; unit" Usage="System.Windows.WeakEventManager.SetCurrentManager (managerType, manager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="manager" Type="System.Windows.WeakEventManager" />
      </Parameters>
      <Docs>
        <param name="managerType">
          <span data-ttu-id="40cf3-187">Tipo su cui impostare la gestione degli eventi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-187">The type to set the new event manager.</span>
          </span>
        </param>
        <param name="manager">
          <span data-ttu-id="40cf3-188">Nuovo gestore degli eventi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-188">The new event manager.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40cf3-189">Imposta la gestione corrente per il tipo di gestione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-189">Sets the current manager for the specified manager type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40cf3-190">Chiamare il <xref:System.Windows.WeakEventManager.SetCurrentManager%2A> metodo per inizializzare un manager, se è richiesto da una chiamata ai `CurrentManager` proprietà su un <xref:System.Windows.WeakEventManager> implementazione.</span><span class="sxs-lookup"><span data-stu-id="40cf3-190">Call the <xref:System.Windows.WeakEventManager.SetCurrentManager%2A> method to initialize a manager, if that is required by a call to your `CurrentManager` property on a <xref:System.Windows.WeakEventManager> implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected abstract void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StartListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StartListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StartListening : obj -&gt; unit" Usage="weakEventManager.StartListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="40cf3-191">Origine in cui avviare l'attesa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-191">The source to begin listening on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40cf3-192">Quando è sottoposto a override in una classe derivata, avvia l'attesa dell'evento gestito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-192">When overridden in a derived class, starts listening for the event being managed.</span>
          </span>
          <span data-ttu-id="40cf3-193">Dopo la prima chiamata al metodo <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />, la gestione deve restare nello stato di chiamata a <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> o a <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> ogni volta che viene gestito l'evento pertinente proveniente dall'origine fornita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-193">After the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method is first called, the manager should be in the state of calling <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> or <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> whenever the relevant event from the provided source is handled.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="40cf3-194">
            <para>
              <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> gli override devono aggiungere un gestore per l'oggetto fornito <paramref name="source" />. Il gestore di è dichiarato dal gestore di se stesso. Il gestore della classe non deve essere pubblico e deve essere chiamato solo in risposta all'evento che si sta gestendo. Deve chiamare il gestore della classe di <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> metodo o il <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> metodo in modo appropriato.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-194">
              <para>
                <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> overrides should add a handler to the provided <paramref name="source" />. The handler is declared by the manager itself. The class handler should not be public, and it should only be called in response to the event being managed. The class handler should call the <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> method or the <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> method appropriately.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected abstract void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StopListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StopListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StopListening : obj -&gt; unit" Usage="weakEventManager.StopListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="40cf3-195">Origine in cui arrestare l'attesa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-195">The source to stop listening on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="40cf3-196">Quando è sottoposto a override in una classe derivata, interrompe l'attesa dell'evento gestito nell'origine fornita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-196">When overridden in a derived class, stops listening on the provided source for the event being managed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="40cf3-197">
            <para>
              <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> le implementazioni devono rimuovere il gestore della classe di aggiunta dal <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> (metodo). Rimozione di un listener non cancellare l'elenco di listener. Al contrario, ma solo disconnettere il gestore della classe (ad esempio temporaneamente). Sono disponibili altri metodi per cancellare l'elenco completo, ad esempio la <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> metodo con il <paramref name="purgeAll" /> parametro impostato su <see langword="true" />.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-197">
              <para>
                <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> implementations should remove the class handler as added by the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method. Removing a listener should not clear the listener list. Instead, it should only disconnect the class handler (perhaps temporarily). Other methods are available for clearing the entire list, such as the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method with the <paramref name="purgeAll" /> parameter set to <see langword="true" />.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLock">
      <MemberSignature Language="C#" Value="protected IDisposable WriteLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable WriteLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.WriteLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property WriteLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ WriteLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WriteLock : IDisposable" Usage="System.Windows.WeakEventManager.WriteLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="40cf3-198">Imposta un blocco di scrittura nella tabella di dati sottostanti e restituisce <see cref="T:System.IDisposable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-198">Establishes a write-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="40cf3-199">Oggetto che può essere utilizzato per impostare un blocco sui membri della tabella di dati ed essere rimosso all'occorrenza, mediante un costrutto <see langword="using" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="40cf3-199">An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="40cf3-200">Nelle classi derivate, tutte le modifiche apportate alla tabella dati sottostante devono verificarsi all'interno di un `using (WriteLock) { ... }` clausola.</span><span class="sxs-lookup"><span data-stu-id="40cf3-200">In derived classes, all modifications to the underlying data table should occur within a `using (WriteLock) { ... }` clause.</span></span> <span data-ttu-id="40cf3-201">Queste modifiche potrebbero essere necessarie se la classe supporta più sofisticati `AddListener` implementazione che richiede più dati oltre i `source` e il `listener`e utilizza il <xref:System.Windows.WeakEventManager.Item%2A> raccolta per archiviare le informazioni aggiuntive.</span><span class="sxs-lookup"><span data-stu-id="40cf3-201">These modifications may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.ReadLock" />
      </Docs>
    </Member>
  </Members>
</Type>