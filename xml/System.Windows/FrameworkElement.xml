<Type Name="FrameworkElement" FullName="System.Windows.FrameworkElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7049e59815fcdb66b7b948f059543244a818ba11" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51937211" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FrameworkElement : System.Windows.UIElement, System.ComponentModel.ISupportInitialize, System.Windows.IFrameworkInputElement, System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FrameworkElement extends System.Windows.UIElement implements class System.ComponentModel.ISupportInitialize, class System.Windows.IFrameworkInputElement, class System.Windows.IInputElement, class System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkElement" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkElement&#xA;Inherits UIElement&#xA;Implements IFrameworkInputElement, IQueryAmbient, ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkElement : System::Windows::UIElement, System::ComponentModel::ISupportInitialize, System::Windows::IFrameworkInputElement, System::Windows::Markup::IQueryAmbient" />
  <TypeSignature Language="F#" Value="type FrameworkElement = class&#xA;    inherit UIElement&#xA;    interface IFrameworkInputElement&#xA;    interface IInputElement&#xA;    interface ISupportInitialize&#xA;    interface IQueryAmbient" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.UIElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.IFrameworkInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IQueryAmbient</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.UsableDuringInitialization(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.XmlLangProperty("Language")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.StyleTypedProperty(Property="FocusVisualStyle", StyleTargetType=typeof(System.Windows.Controls.Control))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornisce un set a livello di framework WPF di proprietà, eventi e metodi per elementi Windows Presentation Foundation (WPF). Questa classe rappresenta l'implementazione a livello di framework WPF fornita, compilata in base alle API a livello di memoria centrale di WPF definite da <see cref="T:System.Windows.UIElement" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement> è il punto di collegamento tra le classi di elemento a livello di framework WPF e il set di livello principale WPF di <xref:System.Windows.UIElement> servizi di presentazione. Per altre informazioni su questi concetti, vedere [architettura WPF](~/docs/framework/wpf/advanced/wpf-architecture.md).  
  
 <xref:System.Windows.FrameworkElement> estende <xref:System.Windows.UIElement> e aggiunge le funzionalità seguenti:  
  
-   **Definizione di sistema di layout**: <xref:System.Windows.FrameworkElement> fornisce le implementazioni specifiche a livello di framework WPF per alcuni metodi che sono stati definiti come membri virtuali nei <xref:System.Windows.UIElement>. In particolare, <xref:System.Windows.FrameworkElement> Sigilla determinate sostituzioni di layout a livello di base WPF e fornisce invece un equivalente a livello di framework WPF che le classi derivate dovrebbe eseguire l'override. Ad esempio, <xref:System.Windows.FrameworkElement> sigilli <xref:System.Windows.UIElement.ArrangeCore%2A> ma fornisce <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>. Queste modifiche rispecchiare il fatto che a livello di framework WPF è disponibile un sistema di layout completo che può eseguire il rendering di qualsiasi <xref:System.Windows.FrameworkElement> classe derivata. WPF di livello, alcuni membri che creazione della struttura generale di base [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] layout basato su soluzione sono presenti, ma il motore effettivo del sistema di layout non è definito. Per altre informazioni, vedere [Layout](~/docs/framework/wpf/advanced/layout.md).  
  
-   **L'albero logico:** generali [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] modello di programmazione viene spesso espresso in termini di albero di elementi. Supporto per esprimere l'albero di elementi come un albero logico e il supporto per la definizione di tale albero nel markup viene implementata al <xref:System.Windows.FrameworkElement> livello. Si noti tuttavia che <xref:System.Windows.FrameworkElement> deliberatamente non definisce un modello di contenuto e mantiene tale compito alle classi derivate. Per altre informazioni, vedere [Strutture ad albero in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
-   **Eventi di durata dell'oggetto:** è spesso utile sapere quando un elemento viene inizializzato (viene chiamato il costruttore) o quando l'elemento viene caricata inizialmente in un albero logico. <xref:System.Windows.FrameworkElement> definisce diversi eventi correlati alla durata degli oggetti che forniscono gli hook utili per le operazioni di code-behind che interessano gli elementi, ad esempio l'aggiunta di più elementi figlio. Per altre informazioni, vedere [eventi di durata degli oggetti](~/docs/framework/wpf/advanced/object-lifetime-events.md).  
  
-   **Supporto per l'associazione dati e riferimenti a risorse dinamiche:** viene implementato il supporto a livello di proprietà per l'associazione dati e le risorse dal <xref:System.Windows.DependencyProperty> classe e rappresentate da un sistema di proprietà, ma la possibilità di risolvere un valore membro archiviato come un <xref:System.Windows.Expression> (il costrutto di programmazione alla base di associazione dati e le risorse dinamiche) viene implementato da <xref:System.Windows.FrameworkElement>. Per altre informazioni, vedere [Panoramica sul Data Binding](~/docs/framework/wpf/data/data-binding-overview.md) e [risorse XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
-   **Stili:** <xref:System.Windows.FrameworkElement> definisce il <xref:System.Windows.FrameworkElement.Style%2A> proprietà. Tuttavia, <xref:System.Windows.FrameworkElement> definire il supporto per i modelli non ancora o supporta gli elementi Decorator. Queste funzionalità vengono introdotte tramite classi di controlli, ad esempio <xref:System.Windows.Controls.Control> e <xref:System.Windows.Controls.ContentControl>.  
  
-   **Supporto per le altre animazioni:** alcuni supporta l'animazione è stata già definita a livello di base di WPF, ma <xref:System.Windows.FrameworkElement> estende tale funzionalità implementando <xref:System.Windows.FrameworkElement.BeginStoryboard%2A> e dei relativi membri.  
  
 Come si può notare dalla gerarchia di classi, molte [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] classi derivano dal <xref:System.Windows.FrameworkElement>, direttamente o tramite le classi di base intermediate, ad esempio <xref:System.Windows.Controls.Panel> o <xref:System.Windows.Controls.Control>.  
  
 Se si prevede di usare <xref:System.Windows.FrameworkElement> come classe di base, si potrebbe voler esaminare innanzitutto le classi derivate esistente. <xref:System.Windows.FrameworkElement> fornisce il supporto per numerosi scenari di base, ma non include una serie di funzionalità che sono utili per un "elemento" nel senso di un blocco predefinito utilizzato per creare [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]. Ad esempio, un <xref:System.Windows.FrameworkElement> non definisce alcun modello di contenuto true; <xref:System.Windows.FrameworkElement> come una classe di base non definisce una proprietà che è possibile creare [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] gli elementi figlio. In particolare, si potrebbe voler osservare <xref:System.Windows.Controls.Control> e <xref:System.Windows.Controls.ContentControl>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.FrameworkContentElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualHeight">
      <MemberSignature Language="C#" Value="public double ActualHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ActualHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ActualHeight" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActualHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double ActualHeight { double get(); };" />
      <MemberSignature Language="F#" Value="member this.ActualHeight : double" Usage="System.Windows.FrameworkElement.ActualHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'altezza di questo elemento di cui è stato eseguito il rendering.</summary>
        <value>Altezza dell'elemento sotto forma di valore in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. Il valore predefinito è 0 (zero).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà è un valore calcolato in base a altri input di altezza e al sistema di layout. Il valore viene impostato dal sistema di layout, basato su un passaggio di rendering effettiva e può quindi essere leggermente rispetto al valore impostato delle proprietà, ad esempio <xref:System.Windows.FrameworkElement.Height%2A> che costituiscono la base della modifica dell'input.  
  
 Poiché <xref:System.Windows.FrameworkElement.ActualHeight%2A> è un valore calcolato, è necessario essere consapevoli che potrebbero esserci più modifiche o modifiche incrementali a esso in seguito a operazioni diverse dal sistema di layout. Il sistema di layout può calcolare lo spazio di misurazione necessario per gli elementi figlio, i vincoli dell'elemento padre e così via.  
  
 Anche se non è possibile impostare questa proprietà dalla [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], è possibile basare un <xref:System.Windows.Trigger> sul relativo valore in uno stile.  
  
<a name="dependencyPropertyInfo_ActualHeight"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.ActualHeightProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 Nell'esempio seguente consente di visualizzare varie proprietà di altezza.  
  
 [!code-csharp[HeightMinHeightMaxHeight#3](~/samples/snippets/csharp/VS_Snippets_Wpf/HeightMinHeightMaxHeight/CSharp/Window1.xaml.cs#3)]
 [!code-vb[HeightMinHeightMaxHeight#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HeightMinHeightMaxHeight/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ActualHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ActualHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ActualHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ActualHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ActualHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ActualHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ActualHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.ActualHeight" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualWidth">
      <MemberSignature Language="C#" Value="public double ActualWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ActualWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ActualWidth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActualWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double ActualWidth { double get(); };" />
      <MemberSignature Language="F#" Value="member this.ActualWidth : double" Usage="System.Windows.FrameworkElement.ActualWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la larghezza di questo elemento di cui è stato eseguito il rendering.</summary>
        <value>La larghezza dell'elemento sotto forma di valore in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. Il valore predefinito è 0 (zero).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà è un valore calcolato in base a altri input di larghezza e il sistema di layout. Il valore viene impostato dal sistema di layout, basato su un passaggio di rendering effettiva e può quindi essere leggermente rispetto al valore impostato delle proprietà, ad esempio <xref:System.Windows.FrameworkElement.Width%2A> che costituiscono la base della modifica dell'input.  
  
 Poiché <xref:System.Windows.FrameworkElement.ActualWidth%2A> è un valore calcolato, è necessario essere consapevoli che potrebbero esserci più modifiche o modifiche incrementali a esso in seguito a operazioni diverse dal sistema di layout. Il sistema di layout può calcolare lo spazio di misurazione necessario per gli elementi figlio, i vincoli dell'elemento padre e così via.  
  
 Anche se non è possibile impostare questa proprietà dalla [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], è possibile basare un <xref:System.Windows.Trigger> sul relativo valore in uno stile.  
  
<a name="dependencyPropertyInfo_ActualWidth"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.ActualWidthProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 Nell'esempio seguente consente di visualizzare varie proprietà di larghezza.  
  
 [!code-csharp[WidthMinWidthMaxWidth#3](~/samples/snippets/csharp/VS_Snippets_Wpf/WidthMinWidthMaxWidth/CSharp/Window1.xaml.cs#3)]
 [!code-vb[WidthMinWidthMaxWidth#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WidthMinWidthMaxWidth/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ActualWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ActualWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ActualWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ActualWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ActualWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ActualWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ActualWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.ActualWidth" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void AddLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AddLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AddLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void AddLogicalChild(System::Object ^ child);" />
      <MemberSignature Language="F#" Value="member this.AddLogicalChild : obj -&gt; unit" Usage="frameworkElement.AddLogicalChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child">Elemento figlio da aggiungere.</param>
        <summary>Aggiunge l'oggetto fornito alla struttura ad albero logica di questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare questo metodo per l'implementazione di insiemi per gli oggetti che rappresentano gli elementi figlio logici di un elemento. Manutenzione della raccolta per raccolte di elementi figlio potrebbe essere eseguita nel getter o Setter, la gestione degli eventi di modifica, costruttori, o all'interno degli stessi tipi di raccolta delle classi.  
  
 Per gli autori di controlli, modificare l'albero logico a questo livello non è la procedura consigliata, a meno che nessuno dei modelli di contenuto per le classi di controllo di base disponibili siano appropriati per lo scenario di controllo. È consigliabile a livello di creazione di una sottoclasse <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, e <xref:System.Windows.Controls.HeaderedItemsControl>. Queste classi forniscono un modello di contenuto con l'imposizione specifico degli elementi figlio dell'albero logico con dedicato [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], nonché il supporto per altre funzionalità generalmente utili in un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controllo, ad esempio lo stile tramite i modelli. Per altre informazioni su come usare <xref:System.Windows.FrameworkElement.LogicalChildren%2A> e <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>, vedere [strutture ad albero in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
 <xref:System.Windows.FrameworkElement.AddLogicalChild%2A> genera un'eccezione se viene chiamato quando l'albero logico è in fase di iterazione da un altro processo.  
  
   
  
## Examples  
 L'esempio seguente implementa un `Child` proprietà in una classe personalizzata <xref:System.Windows.FrameworkElement> che esegue la propria implementazione del livello visivo. I setter delle proprietà è progettato in modo che se il valore viene modificato, il valore precedente viene rimosso dall'albero logico, nonché una raccolta visuale specifico della classe. Il valore della proprietà viene memorizzata nella cache e quindi viene aggiunto il nuovo valore per l'albero logico sia la raccolta visuale personalizzata.  
  
 [!code-csharp[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/CSharp/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]
 [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/visualbasic/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ApplyTemplate">
      <MemberSignature Language="C#" Value="public bool ApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyTemplate () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ApplyTemplate();" />
      <MemberSignature Language="F#" Value="member this.ApplyTemplate : unit -&gt; bool" Usage="frameworkElement.ApplyTemplate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Compila una struttura ad albero visuale del modello corrente se necessario e restituisce un valore che indica se tale struttura è stata ricompilata da questa chiamata.</summary>
        <returns>
          <see langword="true" /> se sono stati aggiunti elementi visivi alla struttura ad albero. In caso contrario, restituisce <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le applicazioni possono chiamare questo metodo per garantire che la struttura ad albero visuale di un elemento è stato completato. Questo passaggio potrebbe essere necessario se codice verrà eseguita la verifica gli elementi figlio nell'albero. Per la logica tipico elemento all'interno delle applicazioni, la chiamata a <xref:System.Windows.FrameworkElement.ApplyTemplate%2A> non è necessaria, perché i modelli verranno applicati automaticamente agli elementi in un momento appropriato della relativa durata.  
  
 <xref:System.Windows.FrameworkElement.ApplyTemplate%2A> viene chiamato in tutte le misure passare per il sistema di layout a livello di framework WPF.  
  
 <xref:System.Windows.FrameworkElement> le classi derivate possono utilizzare il <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> gestore classi per ricevere una notifica di casi in cui questo metodo viene chiamato in modo esplicito o dal sistema di layout. <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> viene chiamato dopo che il modello è completamente generato e collegato all'albero logico.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ControlTemplate" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected override sealed void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="override this.ArrangeCore : System.Windows.Rect -&gt; unit" Usage="frameworkElement.ArrangeCore finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">Area finale nel controllo padre che questo elemento deve usare per disporre se stesso e i relativi elementi figlio.</param>
        <summary>Implementa <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> (definito come virtuale in <see cref="T:System.Windows.UIElement" />) ed esegue il sealing dell'implementazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è sealed. Per eseguire l'override la logica nell'elemento personalizzato in modo specifico per il passaggio di disposizione del layout dell'elemento, il <xref:System.Windows.FrameworkElement> classe derivata deve eseguire l'override <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size ArrangeOverride (System.Windows.Size finalSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size finalSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ArrangeOverride (finalSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size ArrangeOverride(System::Windows::Size finalSize);" />
      <MemberSignature Language="F#" Value="abstract member ArrangeOverride : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.ArrangeOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.ArrangeOverride finalSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="finalSize">Area finale nel controllo padre che questo elemento deve usare per disporre se stesso e i relativi elementi figlio.</param>
        <summary>In caso di override in una classe derivata, posiziona gli elementi figlio e determina le dimensioni per una classe derivata <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <returns>Dimensioni effettive usate.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Gli autori di controlli che vogliono personalizzare il passaggio di disposizione dell'elaborazione del layout devono eseguire l'override di questo metodo. Il modello di implementazione deve chiamare <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> su ogni elemento figlio visibile e passare la dimensione per ogni elemento figlio come finale desiderata di <paramref name="finalRect" /> parametro. Elementi padre chiamano <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> su ogni elemento figlio, in caso contrario, gli elementi figlio non vengono visualizzati.  
  
Molte classi derivate offrono le implementazioni di questo metodo. Le più importanti includono: <see cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />, <see cref="M:System.Windows.Controls.Page.ArrangeOverride(System.Windows.Size)" /> e <see cref="M:System.Windows.Controls.Control.ArrangeOverride(System.Windows.Size)" />.</para>
        </block>
        <altmember cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public virtual void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="frameworkElement.BeginInit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Avvia il processo di inizializzazione per questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se si sono in corso di modifica in modo che non è ancora esporre o connettere l'elemento a un albero di elemento, è possibile chiamare questo metodo su singoli elementi. Ad esempio, potrebbe aver creato un nuovo <xref:System.Windows.FrameworkElement>, ma non è ancora associato a un albero logico. In alternativa, l'albero logico in cui l'elemento è un elemento figlio all'interno di esso potrebbe non essere connesso a una finestra o una pagina dell'applicazione.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Implementare questo metodo per fornire una gestione speciale che dovrebbe verificarsi prima che l'elemento viene inizializzato durante il processo di caricamento dell'elemento.  
  
L'implementazione deve chiamare l'implementazione di base, perché l'implementazione di base (valore predefinito) imposta alcuni flag interno per tenere traccia di inizializzazione. Una possibile implementazione consiste nell'usare questo metodo come un hook in routine di inizializzazione classe privata che non sono già abilitate per i costruttori.  
  
L'implementazione di base genererà un'eccezione se <see cref="M:System.Windows.FrameworkElement.BeginInit" /> viene chiamato più volte sullo stesso elemento prima di <see cref="M:System.Windows.FrameworkElement.EndInit" /> chiamato.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.EndInit" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginStoryboard">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizia la sequenza di azioni contenuta nello storyboard fornito.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard -&gt; unit" Usage="frameworkElement.BeginStoryboard storyboard" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
      </Parameters>
      <Docs>
        <param name="storyboard">Storyboard da avviare.</param>
        <summary>Inizia la sequenza di azioni contenuta nello storyboard fornito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Scenari più comuni di animazione non usano questo metodo. In genere, si crea il <xref:System.Windows.Media.Animation.Storyboard> oppure <xref:System.Windows.Media.Animation.BeginStoryboard> elemento nel markup e quindi inserire queste informazioni come il <xref:System.Windows.EventTrigger> contenuto su un elemento. Quando viene attivata da evento, quindi l'animazione viene eseguita. La maggior parte degli aspetti controllo di un <xref:System.Windows.Media.Animation.Storyboard> possono essere indirizzati da proprietà che vengono esposti nel markup.  
  
 Per le firme che non usano i `isControllable`, parametro, o quando viene specificato questo parametro `false`, gli orologi di sequenza temporale che sono associati dell'animazione vengono rimossi, non appena l'animazione raggiunge il periodo di "Fill". Pertanto l'animazione non può essere riavviata dopo aver eseguito una sola volta. Controllo di un'animazione richiede anche che lo storyboard abbia un' [direttiva X:Name](~/docs/framework/xaml-services/x-name-directive.md) o essere accessibili per riferimento nel codice.  
  
   
  
## Examples  
 Nell'esempio seguente recupera un' <xref:System.Windows.Media.Animation.Storyboard> dalle risorse, quindi viene eseguito tale <xref:System.Windows.Media.Animation.Storyboard> quando un evento interno è classe gestita.  
  
 [!code-csharp[CubeAnimation#FEBeginStoryboard](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Page1.xaml.cs#febeginstoryboard)]
 [!code-vb[CubeAnimation#FEBeginStoryboard](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/page1.xaml.vb#febeginstoryboard)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="frameworkElement.BeginStoryboard (storyboard, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="storyboard">Storyboard da avviare.</param>
        <param name="handoffBehavior">Valore dell'enumerazione che descrive il comportamento da utilizzare se una proprietà descritta nello storyboard è già animata.</param>
        <summary>Inizia la sequenza di azioni contenuta nello storyboard fornito, specificando le opzioni relative alle azioni che dovrebbero verificarsi se la proprietà è già animata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Scenari più comuni di animazione non usano questo metodo. In genere, si crea il <xref:System.Windows.Media.Animation.Storyboard> oppure <xref:System.Windows.Media.Animation.BeginStoryboard> elemento nel markup e quindi inserire queste informazioni come il <xref:System.Windows.EventTrigger> contenuto su un elemento. Quando viene attivata da evento, quindi l'animazione viene eseguita. La maggior parte degli aspetti controllo di un <xref:System.Windows.Media.Animation.Storyboard> possono essere indirizzati da proprietà che vengono esposti nel markup.  
  
 Per le firme che non usano i `isControllable`, parametro, o quando viene specificato questo parametro `false`, gli orologi di sequenza temporale che sono associati dell'animazione vengono rimossi, non appena l'animazione raggiunge il periodo di "Fill". Pertanto l'animazione non può essere riavviata dopo aver eseguito una sola volta. Controllo di un'animazione richiede anche che lo storyboard abbia un' [direttiva X:Name](~/docs/framework/xaml-services/x-name-directive.md) o essere accessibili per riferimento nel codice.  
  
 Comportamento di continuità può essere specificato come attributo del <xref:System.Windows.Media.Animation.BeginStoryboard>.  
  
## <a name="using-the-compose-handoffbehavior"></a>Utilizzo di Compose HandoffBehavior  
 Quando si applica una <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, o <xref:System.Windows.Media.Animation.AnimationClock> a una proprietà utilizzando la <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, qualsiasi <xref:System.Windows.Media.Animation.Clock> oggetti associati in precedenza a tale proprietà continueranno a utilizzare le risorse di sistema; il sistema di temporizzazione non non rimuovere automaticamente gli orologi.  
  
 Per evitare problemi di prestazioni quando si applica un numero elevato di orologi usando <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, è necessario rimuovere gli orologi di composizione dalla proprietà animata una volta completati. Esistono diversi modi per rimuovere un orologio:  
  
-   Per rimuovere tutti gli orologi da una proprietà, usare il <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> o <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> metodo dell'oggetto animato. Specificare la proprietà animata come primo parametro, e `null` come il secondo. Questo rimuove tutti gli orologi di animazione la proprietà.  
  
-   Per rimuovere uno specifico <xref:System.Windows.Media.Animation.AnimationClock> da un elenco di orologi, usare il <xref:System.Windows.Media.Animation.Clock.Controller%2A> proprietà delle <xref:System.Windows.Media.Animation.AnimationClock> per recuperare un <xref:System.Windows.Media.Animation.ClockController>, quindi chiamare il <xref:System.Windows.Media.Animation.ClockController.Remove%2A> metodo del <xref:System.Windows.Media.Animation.ClockController>. Ciò avviene in genere il <xref:System.Windows.Media.Animation.Clock.Completed> gestore eventi per un orologio. Si noti che solo gli orologi di radice possono essere controllati da un <xref:System.Windows.Media.Animation.ClockController>; la <xref:System.Windows.Media.Animation.Clock.Controller%2A> proprietà di un orologio figlio restituirà `null`. Si noti inoltre che il <xref:System.Windows.Media.Animation.Clock.Completed> evento non viene generato se la durata effettiva dell'orologio è infinita.  In tal caso, l'utente deve determinare quando chiamare <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.  
  
 Si tratta principalmente di un problema relativo alle animazioni su oggetti di lunga durata.  Quando un oggetto viene sottoposto a garbage collection, gli orologi vengono disconnessi anche e sottoposti a garbage collection.  
  
 Per altre informazioni sugli oggetti orologio, vedere [Panoramica sistema di temporizzazione e animazione](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).  
  
   
  
## Examples  
 Nell'esempio seguente recupera un' <xref:System.Windows.Media.Animation.Storyboard> dalle risorse, quindi viene eseguito tale <xref:System.Windows.Media.Animation.Storyboard> quando un evento interno è classe gestita.  
  
 [!code-csharp[CubeAnimation#FEBeginStoryboard](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Page1.xaml.cs#febeginstoryboard)]
 [!code-vb[CubeAnimation#FEBeginStoryboard](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/page1.xaml.vb#febeginstoryboard)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard * System.Windows.Media.Animation.HandoffBehavior * bool -&gt; unit" Usage="frameworkElement.BeginStoryboard (storyboard, handoffBehavior, isControllable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="storyboard">Storyboard da avviare.</param>
        <param name="handoffBehavior">Valore dell'enumerazione che descrive il comportamento da utilizzare se una proprietà descritta nello storyboard è già animata.</param>
        <param name="isControllable">Dichiara se l'animazione è controllabile (può essere sospesa) dopo l'avvio.</param>
        <summary>Inizia la sequenza di azioni contenuta nello storyboard fornito, specificando lo stato per il controllo dell'animazione dopo l'avvio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Scenari più comuni di animazione non usano questo metodo. In genere, si crea il <xref:System.Windows.Media.Animation.Storyboard> oppure <xref:System.Windows.Media.Animation.BeginStoryboard> elemento nel markup e quindi inserire queste informazioni come il <xref:System.Windows.EventTrigger> contenuto su un elemento. Quando viene attivata da evento, quindi l'animazione viene eseguita. La maggior parte degli aspetti controllo di un <xref:System.Windows.Media.Animation.Storyboard> possono essere indirizzati da proprietà che vengono esposti nel markup.  
  
 Per le firme che non usano i `isControllable`, parametro, o quando viene specificato questo parametro `false`, gli orologi di sequenza temporale che sono associati dell'animazione vengono rimossi, non appena l'animazione raggiunge il periodo di "Fill". Pertanto l'animazione non può essere riavviata dopo aver eseguito una sola volta. Controllo di un'animazione richiede anche che lo storyboard abbia un' [direttiva X:Name](~/docs/framework/xaml-services/x-name-directive.md) o essere accessibili per riferimento nel codice.  
  
 Comportamento di continuità può essere specificato come attributo del <xref:System.Windows.Media.Animation.BeginStoryboard>.  
  
## <a name="using-the-compose-handoffbehavior"></a>Utilizzo di Compose HandoffBehavior  
 Quando si applica una <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, o <xref:System.Windows.Media.Animation.AnimationClock> a una proprietà utilizzando la <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, qualsiasi <xref:System.Windows.Media.Animation.Clock> oggetti associati in precedenza a tale proprietà continueranno a utilizzare le risorse di sistema; il sistema di temporizzazione non non rimuovere automaticamente gli orologi.  
  
 Per evitare problemi di prestazioni quando si applica un numero elevato di orologi usando <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, è necessario rimuovere gli orologi di composizione dalla proprietà animata una volta completati. Esistono diversi modi per rimuovere un orologio:  
  
-   Per rimuovere tutti gli orologi da una proprietà, usare il <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> o <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> metodo dell'oggetto animato. Specificare la proprietà animata come primo parametro, e `null` come il secondo. Questo rimuove tutti gli orologi di animazione la proprietà.  
  
-   Per rimuovere uno specifico <xref:System.Windows.Media.Animation.AnimationClock> da un elenco di orologi, usare il <xref:System.Windows.Media.Animation.Clock.Controller%2A> proprietà delle <xref:System.Windows.Media.Animation.AnimationClock> per recuperare un <xref:System.Windows.Media.Animation.ClockController>, quindi chiamare il <xref:System.Windows.Media.Animation.ClockController.Remove%2A> metodo del <xref:System.Windows.Media.Animation.ClockController>. Ciò avviene in genere il <xref:System.Windows.Media.Animation.Clock.Completed> gestore eventi per un orologio. Si noti che solo gli orologi di radice possono essere controllati da un <xref:System.Windows.Media.Animation.ClockController>; la <xref:System.Windows.Media.Animation.Clock.Controller%2A> proprietà di un orologio figlio restituirà `null`. Si noti inoltre che il <xref:System.Windows.Media.Animation.Clock.Completed> evento non viene generato se la durata effettiva dell'orologio è infinita.  In tal caso, l'utente deve determinare quando chiamare <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.  
  
 Si tratta principalmente di un problema relativo alle animazioni su oggetti di lunga durata.  Quando un oggetto viene sottoposto a garbage collection, gli orologi vengono disconnessi anche e sottoposti a garbage collection.  
  
 Per altre informazioni sugli oggetti orologio, vedere [Panoramica sistema di temporizzazione e animazione](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroup">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingGroup BindingGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingGroup BindingGroup" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.BindingGroup" />
      <MemberSignature Language="VB.NET" Value="Public Property BindingGroup As BindingGroup" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingGroup ^ BindingGroup { System::Windows::Data::BindingGroup ^ get(); void set(System::Windows::Data::BindingGroup ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BindingGroup : System.Windows.Data.BindingGroup with get, set" Usage="System.Windows.FrameworkElement.BindingGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'oggetto <see cref="T:System.Windows.Data.BindingGroup" /> utilizzato per l'elemento.</summary>
        <value>Oggetto <see cref="T:System.Windows.Data.BindingGroup" /> utilizzato per l'elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Windows.Data.BindingGroup> può essere utilizzato per convalidare i valori delle proprietà più di un oggetto. Ad esempio, si supponga che un'applicazione richiede all'utente di immettere un indirizzo e quindi popola un oggetto di tipo `Address`, che presenta le proprietà `Street`, `City`, `ZipCode`, e `Country`, con i valori che l'utente fornito. L'applicazione dispone di un pannello che contiene quattro <xref:System.Windows.Controls.TextBox> controlli, ognuno dei quali è associato a una delle proprietà dell'oggetto. È possibile usare una <xref:System.Windows.Controls.ValidationRule> in un <xref:System.Windows.Data.BindingGroup> convalidare il `Address` oggetto. Ad esempio, il <xref:System.Windows.Controls.ValidationRule> può verificare che il codice postale zip sia valido per il paese dell'indirizzo.  
  
 Gli elementi figlio ereditano il <xref:System.Windows.Data.BindingGroup> dagli elementi padre, proprio come per qualsiasi altra proprietà ereditabile.  
  
<a name="dependencyPropertyInfo_BindingGroup"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.BindingGroupProperty>|  
|Impostare le proprietà dei metadati **true**|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 Negli esempi seguenti sono parte di un'applicazione che controlla se l'utente ha impostato le proprietà di due oggetti su valori uguali. Nel primo esempio vengono creati due <xref:System.Windows.Controls.TextBox> controlli, ognuno dei quali è associato a un'origine dati diversa. Il <xref:System.Windows.Controls.StackPanel> ha un <xref:System.Windows.Data.BindingGroup> che contiene un <xref:System.Windows.Controls.ValidationRule> che verifica che due stringhe sono uguali.  
  
 [!code-xaml[BindingGroupSnippets#BindingGroupComplete](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#bindinggroupcomplete)]  
  
 L'esempio seguente illustra il <xref:System.Windows.Controls.ValidationRule> utilizzato dall'esempio precedente.  Nel <xref:System.Windows.Controls.ValidationRule.Validate%2A> override del metodo, l'esempio ottiene ogni oggetto di origine dal <xref:System.Windows.Data.BindingGroup> e controlla se le proprietà degli oggetti sono uguali.  
  
 [!code-csharp[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#bindinggroupnamevalidationrule)]
 [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#bindinggroupnamevalidationrule)]  
  
 Per richiamare il <xref:System.Windows.Controls.ValidationRule>, chiamare il <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> (metodo).  L'esempio seguente chiama <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> quando si verifica l'evento click del pulsante.  
  
 [!code-csharp[BindingGroupSnippets#UpdateSourcesClick](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#updatesourcesclick)]
 [!code-vb[BindingGroupSnippets#UpdateSourcesClick](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#updatesourcesclick)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroupProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BindingGroupProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BindingGroupProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.BindingGroupProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BindingGroupProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BindingGroupProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BindingGroupProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.BindingGroupProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.BindingGroup" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BringIntoView">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tenta di visualizzare questo elemento all'interno di qualsiasi area di scorrimento che lo contiene.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView();" />
      <MemberSignature Language="F#" Value="member this.BringIntoView : unit -&gt; unit" Usage="frameworkElement.BringIntoView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tenta di visualizzare questo elemento all'interno di qualsiasi area di scorrimento che lo contiene.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamando questo metodo, viene generato un <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento proveniente dall'elemento corrente. Questo evento viene generato in modo che possa essere gestita da un <xref:System.Windows.Controls.ScrollViewer>, o una classe derivata o simile. Il comportamento previsto è che l'evento è gestito dall'elemento padre, contrassegnato come gestito nei dati dell'evento, e l'origine dell'evento viene inserito nella visualizzazione tramite la logica incorporata nel <xref:System.Windows.Controls.ScrollViewer> controllo. Né il <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento né la <xref:System.Windows.FrameworkElement.BringIntoView%2A> metodo trasmettono informazioni sull'esito positivo o negativo, oltre che in genere è l'evento contrassegnato come gestito su esito positivo. I motivi per l'errore può includere le impostazioni dell'elemento, ad esempio <xref:System.Windows.UIElement.Visibility%2A> da un valore diverso da <xref:System.Windows.Visibility.Visible>.  
  
 Se si usa la firma che non specifica un `targetRectangle`, quindi la dimensione dell'intero elemento (relativo <xref:System.Windows.UIElement.RenderSize%2A>) verrà reso visibile.  
  
 Chiamando questo metodo, è potenzialmente chiamerà <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> in qualsiasi area di scorrevole padre che contiene l'elemento. Se questo elemento non è contenuto in un'area scorrevole, il <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento viene generato ugualmente, ma non vi sarà alcun effetto perché non esistono alcun listener di eventi.  
  
   
  
## Examples  
 L'esempio seguente implementa un gestore per un evento di navigazione dell'applicazione che risponde quando il [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] a cui si accede include un frammento. Il frammento viene denominato nel [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] che segue il segno hash (#), e il comportamento implementato fa sì che l'elemento scorra all'interno della visualizzazione all'interno del frame. <xref:System.Windows.FrameworkElement.BringIntoView%2A> e <xref:System.Windows.FrameworkElement.RequestBringIntoView> richiedere che lo scorrimento nell'esempio.  
  
 [!code-csharp[FragmentNavigationSample#FEBringIntoView](~/samples/snippets/csharp/VS_Snippets_Wpf/FragmentNavigationSample/CSharp/MainWindow.xaml.cs#febringintoview)]
 [!code-vb[FragmentNavigationSample#FEBringIntoView](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FragmentNavigationSample/VisualBasic/MainWindow.xaml.vb#febringintoview)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView (System.Windows.Rect targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView(valuetype System.Windows.Rect targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView (targetRectangle As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView(System::Windows::Rect targetRectangle);" />
      <MemberSignature Language="F#" Value="member this.BringIntoView : System.Windows.Rect -&gt; unit" Usage="frameworkElement.BringIntoView targetRectangle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetRectangle" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="targetRectangle">Dimensione specificata dell'elemento che deve essere visualizzata.</param>
        <summary>Tenta di visualizzare le dimensioni dell'area fornite per questo elemento all'interno di qualsiasi area di scorrimento che lo contiene.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamando questo metodo, viene generato un <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento proveniente dall'elemento corrente. Questo evento viene generato in modo che possa essere gestita da un <xref:System.Windows.Controls.ScrollViewer>, o una classe derivata o simile. Il comportamento previsto è che l'evento è gestito dall'elemento padre, contrassegnato come gestito nei dati dell'evento, e l'origine dell'evento viene inserito nella visualizzazione tramite la logica incorporata nel <xref:System.Windows.Controls.ScrollViewer> controllo. Né il <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento né la <xref:System.Windows.FrameworkElement.BringIntoView%2A> metodo trasmettono informazioni sull'esito positivo o negativo, oltre che in genere è l'evento contrassegnato come gestito su esito positivo. I motivi per l'errore può includere le impostazioni dell'elemento, ad esempio <xref:System.Windows.UIElement.Visibility%2A> da un valore diverso da <xref:System.Windows.Visibility.Visible>.  
  
 Se si usa la firma che non specifica un `targetRectangle`, quindi la dimensione dell'intero elemento (relativo <xref:System.Windows.UIElement.RenderSize%2A>) verrà reso visibile.  
  
 Chiamando questo metodo, è potenzialmente chiamerà <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> in qualsiasi area di scorrevole padre che contiene l'elemento. Se questo elemento non è contenuto in un'area scorrevole, il <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento viene generato ugualmente, ma non vi sarà alcun effetto perché non esistono alcun listener di eventi.  
  
   
  
## Examples  
 L'esempio seguente contiene un'immagine di grandi dimensioni in un'area di scorrimento vincolata. Un pulsante nella pagina dispone di un gestore che scorre la visualizzazione per una determinata area dell'immagine grande.  
  
 [!code-xaml[BaseElementsSmorgasbord#BringIntoViewRectMarkup](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml#bringintoviewrectmarkup)]  
  
 [!code-csharp[BaseElementsSmorgasbord#BringIntoViewRectCode](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#bringintoviewrectcode)]
 [!code-vb[BaseElementsSmorgasbord#BringIntoViewRectCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#bringintoviewrectcode)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.FlowDocumentScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ContextMenu ContextMenu { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ContextMenu ContextMenu" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ContextMenu" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextMenu As ContextMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ContextMenu ^ ContextMenu { System::Windows::Controls::ContextMenu ^ get(); void set(System::Windows::Controls::ContextMenu ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextMenu : System.Windows.Controls.ContextMenu with get, set" Usage="System.Windows.FrameworkElement.ContextMenu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Recupera o imposta l'elemento del menu di scelta rapida che deve essere visualizzato ogni volta che il menu di scelta rapida viene richiesto tramite [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] all'interno dell'elemento.</summary>
        <value>Menu di scelta rapida assegnato all'elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ContextMenu> a sua volta è un <xref:System.Windows.FrameworkElement> classe derivata ed è tecnicamente possibile <xref:System.Windows.Controls.ContextMenu> disponga di un <xref:System.Windows.FrameworkElement.ContextMenu%2A> proprietà. Tuttavia, questo crea confusione nell'esperienza menu di scelta rapida per l'utente e questa pratica non è consigliata.  
  
<a name="dependencyPropertyInfo_ContextMenu"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.ContextMenuProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ContextMenuClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuClosing As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuClosing;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuClosing : System.Windows.Controls.ContextMenuEventHandler " Usage="member this.ContextMenuClosing : System.Windows.Controls.ContextMenuEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica subito prima che venga chiuso un menu di scelta rapida relativo all'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per evitare la chiusura menu di scelta rapida, i gestori dell'evento che venga contrassegnato come gestito.  
  
 Per utilizzare questo evento come un <xref:System.Windows.EventTrigger> in uno stile, è necessario fare riferimento alla sottostante definizione del servizio dell'evento:  
  
 [!code-xaml[CorePseudocode#FEContextMenuClosing](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuclosing)]  
  
 (Questo utilizzo è obbligatorio poiché l'implementazione di eventi in <xref:System.Windows.FrameworkElement> che espone l'evento servizio sottostante non esegue il mapping di <xref:System.Windows.FrameworkElement.ContextMenuClosing> identificatore in modo che è possibile utilizzarlo come trigger).  
  
 <xref:System.Windows.Controls.ContextMenu> a sua volta è un <xref:System.Windows.FrameworkElement> derivate (classe), ma il <xref:System.Windows.FrameworkElement.ContextMenuClosing> evento non verrà generato direttamente da un menu di scelta rapida. Al contrario, l'evento viene generato dall'elemento che "proprietario" del menu di contesto come una proprietà e viene generato solo quando un utente tenta di chiudere un menu di scelta rapida nell'interfaccia utente. Tuttavia è possibile <xref:System.Windows.Controls.ContextMenu> disponga di un <xref:System.Windows.FrameworkElement.ContextMenu%2A> proprietà (un menu di contesto annidati). In questo caso il <xref:System.Windows.Controls.ContextMenu> davvero proprietà annidata <xref:System.Windows.Controls.ContextMenu> e potrebbe generare l'evento, con l'origine dell'evento è il menu di contesto annidati.  
  
 Il <xref:System.Windows.Controls.ContextMenu> classe dispone anche di un evento simile (<xref:System.Windows.Controls.ContextMenu.Closed>), ma il <xref:System.Windows.Controls.ContextMenu.Closed> eventi non offrono la possibilità di annullare l'azione dell'utente.  
  
<a name="routedEventInfo_ContextMenuClosing"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.ContextMenuClosingEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuClosingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuClosingEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ContextMenuClosingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per altre informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per altre informazioni sull'uso degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ContextMenuOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuOpening As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuOpening;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuOpening : System.Windows.Controls.ContextMenuEventHandler " Usage="member this.ContextMenuOpening : System.Windows.Controls.ContextMenuEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene aperto un menu di scelta rapida relativo all'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per aprire manualmente menu di scelta rapida, i gestori degli eventi devono contrassegnare l'evento rilevante come gestito. In caso contrario, il valore esistente del <xref:System.Windows.FrameworkElement.ContextMenu%2A> proprietà verrà utilizzata per aprire automaticamente un menu di scelta rapida. Contrassegnare l'evento come gestito in modo efficace annullerà l'azione predefinita e può essere un'opportunità per reimpostare il valore dei <xref:System.Windows.FrameworkElement.ContextMenu%2A> proprietà e quindi aprire il nuovo <xref:System.Windows.Controls.ContextMenu>. Tuttavia, vi è un problema di temporizzazione di che è necessario essere consapevoli. Per sostituire completamente il menu di scelta rapida attraverso un <xref:System.Windows.FrameworkElement.ContextMenuOpening> gestore, i menu di scelta rapida iniziale non deve essere null / vuoto. In alternativa, potrebbe essere necessario gestire l'evento e quindi aprire manualmente un nuovo menu di scelta rapida. Per informazioni dettagliate, vedere [procedura: gestire l'evento ContextMenuOpening](~/docs/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event.md).  
  
 Per utilizzare questo evento come un <xref:System.Windows.EventTrigger> in uno stile, è necessario fare riferimento l'evento associato sottostante:  
  
 [!code-xaml[CorePseudocode#FEContextMenuOpening](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuopening)]  
  
 (Questo utilizzo è obbligatorio poiché l'implementazione di eventi in <xref:System.Windows.FrameworkElement> che espone l'evento servizio sottostante non esegue il mapping di <xref:System.Windows.FrameworkElement.ContextMenuOpening> identificatore in modo che è possibile utilizzarlo nei trigger).  
  
 <xref:System.Windows.Controls.ContextMenu> a sua volta è un <xref:System.Windows.FrameworkElement> classe derivata, ma non verrà generato questo evento dal menu di scelta rapida viene aperto come origine. L'evento viene generato dall'elemento che "proprietario" del menu di contesto come una proprietà e viene generato solo quando un utente tenta di aprire un menu di scelta rapida nell'interfaccia utente. È possibile <xref:System.Windows.Controls.ContextMenu> disponga di un <xref:System.Windows.FrameworkElement.ContextMenu%2A> proprietà, ma è consigliabile evitare questo scenario (per informazioni dettagliate, vedere <xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=nameWithType>).  
  
 Il <xref:System.Windows.Controls.ContextMenu> classe dispone anche di un evento simile (<xref:System.Windows.Controls.ContextMenu.Opened>), ma <xref:System.Windows.Controls.ContextMenu.Opened> non offre la possibilità di annullare l'azione dell'utente.  
  
<a name="routedEventInfo_ContextMenuOpening"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.ContextMenuOpeningEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuOpeningEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuOpeningEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ContextMenuOpeningEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per altre informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per altre informazioni sull'uso degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ContextMenuProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ContextMenuProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ContextMenuProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ContextMenuProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.ContextMenu" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Cursor Cursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Cursor Cursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Cursor" />
      <MemberSignature Language="VB.NET" Value="Public Property Cursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Cursor ^ Cursor { System::Windows::Input::Cursor ^ get(); void set(System::Windows::Input::Cursor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Cursor : System.Windows.Input.Cursor with get, set" Usage="System.Windows.FrameworkElement.Cursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Recupera o imposta il cursore visualizzato quando il puntatore del mouse è posizionato sull'elemento.</summary>
        <value>Cursore da visualizzare. Il valore predefinito è definito come <see langword="null" /> in base a questa proprietà di dipendenza. Tuttavia, l'impostazione predefinita pratica in fase di esecuzione dipenderà da numerosi fattori.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si imposta questa proprietà [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], il [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processore si basa sulla conversione del tipo per il <xref:System.Windows.Input.Cursor> classe per valutare la stringa. La stringa fornita deve restituire un <xref:System.Windows.Input.CursorType> valore. Per informazioni dettagliate, vedere <xref:System.Windows.Input.Cursor>.  
  
 Se il cursore definito da questa proprietà sarà o non venga visualizzato quando il puntatore del mouse è sopra questo elemento dipende anche il valore della <xref:System.Windows.FrameworkElement.ForceCursor%2A> proprietà. Inoltre, considerazioni relative a eventi, ad esempio un trascinamento attivo, stato mouse capture, all'interno di controlli e così via, modalità di modifica del testo influirà anche il cursore con priorità più alta rispetto al valore specificato in questa proprietà.  
  
 Per ripristinare il comportamento dell'impostazione di questa proprietà sul valore predefinito finale, impostarla su `null` nuovamente.  
  
 Il `null` predefinito in realtà indica che la definizione del valore del cursore pratico è rinviata qui e deve essere ottenuta da un' posizione. Se viene visualizzata senza valori a livello di codice da qualsiasi origine, il cursore predefinito che è visivamente su una [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] applicazione sarà una freccia. Tuttavia, le modifiche temporanee cursore non è impostate la <xref:System.Windows.FrameworkElement.Cursor%2A> valori degli elementi quando vengono passati. Il <xref:System.Windows.FrameworkElement.Cursor%2A> proprietà verranno solo valori non null nei casi in cui effettivamente impostata, ad esempio tramite codice o uno stile. Ogni movimento del mouse su un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] applicazione genera un <xref:System.Windows.UIElement.QueryCursor> evento. Le bolle di eventi e qualsiasi altro elemento lungo la route ha la possibilità di gestire l'evento e di impostare il valore del cursore tramite gli argomenti dell'evento. Questo è il meccanismo che produce il visualizzazione del cursore nella maggior parte dei casi. Se un <xref:System.Windows.UIElement.QueryCursor> gestore restituisce un risultato del cursore, quindi il fatto che l'evento è gestito e ha un valore modificato negli argomenti di ha la precedenza sul valore della <xref:System.Windows.FrameworkElement.Cursor%2A> proprietà in qualsiasi livello, a meno che non <xref:System.Windows.FrameworkElement.ForceCursor%2A> è impostata.  
  
 Se non sta creando un cursore personalizzato, in genere impostare questa proprietà su un valore della proprietà statica il <xref:System.Windows.Input.Cursors> classe. Impostazione <xref:System.Windows.FrameworkElement.Cursor%2A> nel codice richiede uno dei seguenti:  
  
-   Chiamare il <xref:System.Windows.Input.Cursor> costruttore per ottenere un <xref:System.Windows.Input.Cursor> istanza. Entrambe le firme del <xref:System.Windows.Input.Cursor> costruttore usare flussi o file, in attesa che si sta creando il <xref:System.Windows.Input.Cursor> oggetto per un cursore personalizzato.  
  
-   Usare il <xref:System.Windows.Input.CursorConverter> classe e il relativo <xref:System.Windows.Input.CursorConverter.ConvertFrom%2A> specificare un cursore dal metodo <xref:System.Windows.Input.CursorType>, o una stringa che può essere valutato con un <xref:System.Windows.Input.CursorType>ed eseguire il cast di ritornare allo <xref:System.Windows.Input.Cursor>.  
  
 L'impostazione di <xref:System.Windows.Input.Cursor> su un valore personalizzato non è abilitato in attendibilità parziale. Per altre informazioni sui cursori personalizzati, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_Cursor"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.CursorProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come impostare deliberatamente l'icona del cursore.  
  
 [!code-csharp[cursors#ChangeCursorsSample](~/samples/snippets/csharp/VS_Snippets_Wpf/cursors/CSharp/Window1.xaml.cs#changecursorssample)]
 [!code-vb[cursors#ChangeCursorsSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/cursors/VisualBasic/Window1.xaml.vb#changecursorssample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
        <altmember cref="P:System.Windows.FrameworkElement.ForceCursor" />
        <altmember cref="P:System.Windows.Input.Mouse.OverrideCursor" />
      </Docs>
    </Member>
    <Member MemberName="CursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.CursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CursorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CursorProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.CursorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.Cursor" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContext">
      <MemberSignature Language="C#" Value="public object DataContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.DataContext" />
      <MemberSignature Language="VB.NET" Value="Public Property DataContext As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataContext { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataContext : obj with get, set" Usage="System.Windows.FrameworkElement.DataContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il contesto dei dati per un elemento quando partecipa al data binding.</summary>
        <value>Oggetto da usare come contesto dei dati.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 *Contesto dati* è un concetto che consente agli elementi di ereditare informazioni dagli elementi padre sull'origine dati che viene usato per associazione, nonché altre caratteristiche dell'associazione, ad esempio il percorso.  
  
 Contesto di dati può essere impostato direttamente a un oggetto .NET, con le associazioni che restituiscono le proprietà di quell'oggetto. In alternativa, è possibile impostare il contesto dei dati un <xref:System.Windows.Data.DataSourceProvider> oggetto.  
  
 Questa proprietà di dipendenza eredita i valori delle proprietà. Se sono presenti elementi figlio senza altri valori per <xref:System.Windows.FrameworkElement.DataContext%2A> configurati tramite i valori locali o gli stili, il sistema di proprietà verrà impostato il valore sarà il <xref:System.Windows.FrameworkElement.DataContext%2A> valore dell'elemento padre più vicino con questo valore viene assegnato.  
  
 In alternativa, è possibile usare una delle seguenti proprietà del <xref:System.Windows.Data.Binding> classe per specificare l'origine del binding in modo esplicito:
  
    - <xref:System.Windows.Data.Binding.ElementName%2A>.
    - <xref:System.Windows.Data.Binding.Source%2A>.
    - <xref:System.Windows.Data.Binding.RelativeSource%2A>. 
  
  Per altre informazioni, vedere [procedura: specificare l'origine del Binding](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md).  
  
 In XAML, <xref:System.Windows.FrameworkElement.DataContext%2A> generalmente viene impostato come un <xref:System.Windows.Data.Binding> dichiarazione. È possibile usare la sintassi degli elementi di proprietà o la sintassi degli attributi. La sintassi degli attributi è illustrato nell'esempio in questa pagina. È anche possibile usare codice per impostare <xref:System.Windows.FrameworkElement.DataContext%2A>.  
  
 <xref:System.Windows.FrameworkElement.DataContext%2A> è una proprietà associabile per facilitare scenari in cui un contesto può essere associato a un altro. Tuttavia, se si associa a <xref:System.Windows.FrameworkElement.DataContext%2A>, prestare attenzione a non creare i riferimenti di associazione circolare (non deve essere associato un <xref:System.Windows.FrameworkElement.DataContext%2A> a se stessa, che è possibile eseguire questa operazione a causa della natura di ereditarietà di valori di proprietà del <xref:System.Windows.FrameworkElement.DataContext%2A> proprietà).  
  
<a name="xamlPropertyElementUsage_DataContext"></a>   
## <a name="xaml-property-element-usage"></a>Utilizzo della sintassi XAML per elementi proprietà  
  
```  
<object>  
  <object.DataContext>  
    <dataContextObject />  
  </object.DataContext>  
</object>  
```  
  
<a name="xamlAttributeUsage_DataContext"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object DataContext="bindingUsage"/>  
- or -  
<object DataContext="{resourceExtension contextResourceKey}"/>  
```  
  
<a name="xamlValues_DataContext"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *dataContextObject*  
 Un oggetto direttamente incorporato che viene usato come contesto dei dati per tutti i binding all'interno dell'elemento padre. In genere, questo oggetto è un <xref:System.Windows.Data.Binding> o un altro <xref:System.Windows.Data.BindingBase> classe derivata. In alternativa, i dati non elaborati di qualsiasi tipo di oggetto previsto per il binding possono essere collocati in questo caso, con le associazioni effettive definite in un secondo momento.  
  
 *bindingUsage*  
 Utilizzo di associazione che restituisce un contesto di dati appropriato. Per informazioni dettagliate, vedere [Estensione di markup Binding](~/docs/framework/wpf/advanced/binding-markup-extension.md).  
  
 *ResourceExtension*  
 Uno dei seguenti: [ `StaticResource` ](~/docs/framework/wpf/advanced/staticresource-markup-extension.md) oppure [ `DynamicResource` ](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md). Questo utilizzo viene utilizzato quando si fa riferimento ai dati non elaborati, definiti come un oggetto nelle risorse. Visualizzare [risorse XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
 *contextResourceKey*  
 L'identificatore di chiave per l'oggetto richiesto dall'interno una <xref:System.Windows.ResourceDictionary>.  
  
<a name="dependencyPropertyInfo_DataContext"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.DataContextProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrata l'azione eseguita da un contesto dei dati in un'associazione e vengono fornite le informazioni che definiscono i valori specifici delle proprietà associate.  
  
 [!code-xaml[MasterDetail#DataContextProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty)]  
[!code-xaml[MasterDetail#DataContextProperty2](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty2)]  
[!code-xaml[MasterDetail#DataContextProperty3](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler DataContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler DataContextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.DataContextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataContextChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ DataContextChanged;" />
      <MemberSignature Language="F#" Value="member this.DataContextChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.DataContextChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito alla modifica del contesto dei dati per questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per una spiegazione dei contesti dei dati e il data binding, vedere [Panoramica sul Data Binding](~/docs/framework/wpf/data/data-binding-overview.md).  
  
> [!IMPORTANT]
>  Quando il <xref:System.Windows.FrameworkElement.DataContext%2A> potenzialmente interessate per un elemento viene modificato, tutte le proprietà con associazione a dati sull'elemento. Questo vale per tutti gli elementi che sono elementi figlio dell'elemento corrente nell'albero logico, che eredita il contesto di dati, e anche lo stesso elemento corrente. Tali associazioni esistenti devono reinterpretare nuovo <xref:System.Windows.FrameworkElement.DataContext%2A> e verranno rivalutati i risultati di associazione. Il motore di data binding non è deterministico sull'ordine di queste rivalutazioni, relativo alla generazione del <xref:System.Windows.FrameworkElement.DataContextChanged> evento. Il rivalutazioni possono verificarsi prima dell'evento, dopo l'evento, o in qualsiasi combinazione.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.DataContext" />
      </Docs>
    </Member>
    <Member MemberName="DataContextProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty DataContextProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty DataContextProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.DataContextProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DataContextProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ DataContextProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable DataContextProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.DataContextProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.DataContext" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKey">
      <MemberSignature Language="C#" Value="protected internal object DefaultStyleKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultStyleKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.DefaultStyleKey" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property DefaultStyleKey As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Object ^ DefaultStyleKey { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultStyleKey : obj with get, set" Usage="System.Windows.FrameworkElement.DefaultStyleKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la chiave da usare per fare riferimento allo stile per il controllo quando vengono usati o definiti stili del tema.</summary>
        <value>Chiave di stile. Perché funzioni correttamente durante la ricerca dello stile del tema, l'oggetto <see cref="T:System.Type" /> di questo valore deve corrispondere a quello del controllo a cui viene applicato lo stile.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà non è in genere impostata tramite una delle relative funzioni di accesso diretta delle proprietà. Al contrario, si esegue l'override di metadati specifici del tipo di questa proprietà di dipendenza ogni volta che si crea un nuovo <xref:System.Windows.FrameworkElement> classe derivata. Quando si deriva un controllo, chiamare il <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> metodo contro il <xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty> identificatore, all'interno del costruttore statico del controllo derivato classe (o inizializzazione della classe equivalenti).  
  
 Un controllo in genere prevale sul valore predefinito di questa proprietà come un tipo specifico, ma in alcuni casi può anche usare un tipo di base per il quale esiste uno stile in dizionari dei temi. Ciò è pratico solo se i modelli di controllo del controllo di base definiscono completamente la rappresentazione visiva del controllo derivata, e se i membri aggiuntivi espongano i tipi derivati non sono elementi aggiuntivi come parte del modello di controllo.  
  
 Se si desidera che l'elemento o controllo deliberatamente non utilizzino gli stili di tema, impostare il <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> proprietà `true`.  
  
<a name="dependencyPropertyInfo_DefaultStyleKey"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato l'utilizzo di override dei metadati di proprietà di dipendenza discusso nella sezione Osservazioni. Questo codice definisce una classe del controllo personalizzato `NumericUpDown` dovrà essere utilizzato da un assembly libreria di controlli dedicato. Il costruttore statico illustrato fa riferimento a una funzione di inizializzazione privato, registra un gestore di classe (un altro comune scenario di creazione di una sottoclasse di controllo, vedere [contrassegno degli eventi indirizzati come gestiti e gestione delle classi](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)) e infine esegue l'override di <xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> metadati delle proprietà di dipendenza nel `NumericUpDown` classe. <xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> Restituisce sempre un tipo specifico come chiave desiderata, vale a dire la convenzione utilizzata dal sistema di stile del tema per cercare lo stile di un controllo in caso contrario, non nello stile arbitrario. L'esempio completo definisce anche stile del tema del controllo effettivo che viene fatto riferimento da tale chiave. visualizzare [controllo personalizzato NumericUpDown con esempio di supporto per automazione interfaccia utente e del tema](https://go.microsoft.com/fwlink/?LinkID=160025).  
  
 [!code-csharp[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/NumericUpDown2.cs)]
 [!code-vb[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary/numericupdown2.vb)]  

  Il codice sorgente completo per questo esempio è disponibile in GitHub per entrambi [ C# ](https://github.com/dotnet/samples/tree/master/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary) e [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary).

 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160025">Controllo personalizzato NumericUpDown con esempio di supporto per automazione interfaccia utente e del tema</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKeyProperty">
      <MemberSignature Language="C#" Value="protected internal static readonly System.Windows.DependencyProperty DefaultStyleKeyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly static initonly class System.Windows.DependencyProperty DefaultStyleKeyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.DefaultStyleKeyProperty" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared ReadOnly DefaultStyleKeyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="protected public: static initonly System::Windows::DependencyProperty ^ DefaultStyleKeyProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultStyleKeyProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.DefaultStyleKeyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.DefaultStyleKey" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public virtual void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="frameworkElement.EndInit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indica che il processo di inizializzazione dell'elemento è completato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se <xref:System.Windows.FrameworkElement.BeginInit%2A> è stato precedentemente chiamato, la base implementazione genererà il <xref:System.Windows.FrameworkElement.Initialized> evento. In caso contrario, se <xref:System.Windows.FrameworkElement.BeginInit%2A> non è stato chiamato o non è stato possibile determinare se <xref:System.Windows.FrameworkElement.BeginInit%2A> è stato chiamato, <xref:System.Windows.FrameworkElement.Initialized> non viene generato e viene invece generata un'eccezione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È stato chiamato <see cref="M:System.Windows.FrameworkElement.EndInit" /> senza che prima sia stato chiamato <see cref="M:System.Windows.FrameworkElement.BeginInit" /> sull'elemento.</exception>
        <block subset="none" type="overrides">
          <para>Implementare questo metodo per fornire una gestione speciale che deve verificarsi quando l'elemento viene inizializzato durante il processo di caricamento dell'elemento.  
  
L'implementazione deve chiamare l'implementazione di base, perché l'implementazione di base (valore predefinito) imposta alcuni flag interno per tenere traccia di inizializzazione.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.FindName : string -&gt; obj" Usage="frameworkElement.FindName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome dell'elemento richiesto.</param>
        <summary>Trova un elemento con il nome dell'identificatore specificato.</summary>
        <returns>Elemento richiesto. Può essere <see langword="null" /> se non viene trovato un elemento corrispondente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'elemento contiene elementi figlio, tali elementi figlio sono tutti effettuata in modo ricorsivo per il nome di elemento richiesto.  
  
 <xref:System.Windows.FrameworkElement.FindName%2A> opera all'interno di ambiti dei nomi dell'elemento corrente. Per informazioni dettagliate, vedere [NameScope XAML WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.FrameworkElement.Name" />
        <related type="Article" href="https://msdn.microsoft.com/library/b7e61222-e8cf-48d2-acd0-6df3b7685d48">Attributo X:Name</related>
      </Docs>
    </Member>
    <Member MemberName="FindResource">
      <MemberSignature Language="C#" Value="public object FindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.FindResource : obj -&gt; obj" Usage="frameworkElement.FindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey">Identificatore della chiave per la risorsa richiesta.</param>
        <summary>Cerca una risorsa con la chiave specificata e genera un'eccezione se la risorsa richiesta non viene trovata.</summary>
        <returns>Risorsa richiesta. Se non viene trovata una risorsa con la chiave specificata, viene generata un'eccezione. In tal caso potrebbe anche essere restituito un valore <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Se si chiama questo metodo per una chiave che non viene trovata, viene generata un'eccezione. Se non si desidera gestire le eccezioni risultanti dalla chiamata <xref:System.Windows.FrameworkElement.FindResource%2A>, chiamare <xref:System.Windows.FrameworkElement.TryFindResource%2A> invece. <xref:System.Windows.FrameworkElement.TryFindResource%2A> Restituisce `null` quando non è stata trovata una risorsa richiesta e non viene generata un'eccezione.  
  
 Se la risorsa non viene trovata nell'elemento chiamante, l'elemento padre nell'albero logico viene cercato, quindi l'applicazione, quindi i temi e successivamente le risorse di sistema. Questa metodologia di ricerca è identica al modo in cui la struttura ad albero viene eseguita la ricerca se una risorsa sono stati richiesti da un riferimento di risorsa dinamica nel markup. Per altre informazioni sulla ricerca delle risorse, vedere [risorse XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
 In genere, viene immediatamente eseguito il cast un <xref:System.Windows.FrameworkElement.FindResource%2A> restituiscono valore nel tipo della proprietà che è l'impostazione con il valore di risorsa restituita.  
  
 Le chiavi di risorsa non sono necessariamente stringhe. Ad esempio, gli stili per i controlli a livello di tema vengono deliberatamente chiave per il <xref:System.Type> del controllo e gli stili dell'applicazione o della pagina per i controlli utilizzano in genere questa stessa convenzione di chiavi. Per informazioni dettagliate, vedere [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md) oppure [risorse XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
   
  
## Examples  
 Nell'esempio seguente ottiene una risorsa denominata e ne esegue il cast a un tipo appropriato per riempire una proprietà.  
  
 [!code-csharp[PropertiesOvwSupport#ResourceProceduralGet](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertiesOvwSupport/CSharp/page3.xaml.cs#resourceproceduralget)]
 [!code-vb[PropertiesOvwSupport#ResourceProceduralGet](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertiesOvwSupport/visualbasic/page3.xaml.vb#resourceproceduralget)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Windows.ResourceReferenceKeyNotFoundException">
          <paramref name="resourceKey" /> non è trovato e un gestore eventi non esiste per l'evento <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" />.  
  
oppure 
 <paramref name="resourceKey" /> non è trovato e la proprietà <see cref="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled" /> è <see langword="false" /> nell'evento <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceKey" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FlowDirection">
      <MemberSignature Language="C#" Value="public System.Windows.FlowDirection FlowDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FlowDirection FlowDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.FlowDirection" />
      <MemberSignature Language="VB.NET" Value="Public Property FlowDirection As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::FlowDirection FlowDirection { System::Windows::FlowDirection get(); void set(System::Windows::FlowDirection value); };" />
      <MemberSignature Language="F#" Value="member this.FlowDirection : System.Windows.FlowDirection with get, set" Usage="System.Windows.FrameworkElement.FlowDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la direzione del testo e di altri elementi [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] all'interno di qualsiasi elemento padre che ne controlla il layout.</summary>
        <value>Direzione del testo e di altri elementi [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] all'interno del rispettivo elemento padre, come valore dell'enumerazione. Il valore predefinito è <see cref="F:System.Windows.FlowDirection.LeftToRight" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'utilizzo di proprietà di dipendenza imposta il <xref:System.Windows.FrameworkElement.FlowDirection%2A> su questo elemento. A causa di ereditarietà del valore della proprietà, l'impostazione <xref:System.Windows.FrameworkElement.FlowDirection%2A> su un elemento può impostare potenzialmente <xref:System.Windows.FrameworkElement.FlowDirection%2A> tutti gli elementi figlio che non sono state impostate <xref:System.Windows.FrameworkElement.FlowDirection%2A> localmente o in altri modi, ad esempio stili.  
  
 Questa proprietà non viene impostata automaticamente come parte di qualsiasi informazione di impostazioni cultura dell'applicazione, perché un elemento può contenere contenuto che necessariamente non è applicata la direzione di flusso generale per le informazioni sulle impostazioni cultura in cui è inclusa. Per altre informazioni sulle considerazioni relative alla globalizzazione, vedere [globalizzazione per WPF](~/docs/framework/wpf/advanced/globalization-for-wpf.md).  
  
 Questa proprietà è definita un' [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] proprietà della funzione di accesso, pertanto funziona come una proprietà di dipendenza. Tuttavia, viene registrato anche come collegato, in modo che può essere utilizzato anche come proprietà associata. La registrazione associata è principalmente destinata a ereditarietà del valore della proprietà è supportata, ma la proprietà può essere utilizzata anche come una proprietà associata di true. L'utilizzo della proprietà associata è applicabile solo se l'oggetto si intende impostare la direzione del flusso ha un <xref:System.Windows.FrameworkElement> elemento padre che esegue il layout su di essa, non costituisce un <xref:System.Windows.FrameworkElement>e non dispone già di un oggetto definito in modo più diretto `FlowDirection` proprietà. (Parte del flusso di documenti, ad esempio le classi <xref:System.Windows.Documents.Block> e <xref:System.Windows.Documents.Inline> definire le proprie `FlowDirection`, e questa proprietà può anche impostare la direzione del flusso. Il valore della proprietà viene quindi letto dall'host del contenuto finale senza richiedere l'utilizzo della proprietà associata.)  
  
<a name="xamlAttributeUsage_FlowDirection"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
 \<*oggetto* **FlowDirection**= "<xref:System.Windows.FlowDirection>" / >  
  
<a name="xamlTextUsage_FlowDirection"></a>   
## <a name="xaml-text-usage"></a>Utilizzo di testo XAML  
 Questa proprietà può essere impostata anche sulle classi che non sono <xref:System.Windows.FrameworkElement> classi, derivate dalle condizioni seguenti [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] utilizzo della proprietà associata:  
  
 `<` *object* `FrameworkElement.`**FlowDirection**="<xref:System.Windows.FlowDirection>`"/>`  
  
<a name="dependencyPropertyInfo_FlowDirection"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.FlowDirectionProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 Questa proprietà è una proprietà di dipendenza e una proprietà associata. vedere la sezione Osservazioni.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlowDirectionProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FlowDirectionProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FlowDirectionProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.FlowDirectionProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FlowDirectionProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FlowDirectionProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FlowDirectionProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.FlowDirectionProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.FlowDirection" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style FocusVisualStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style FocusVisualStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.FocusVisualStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property FocusVisualStyle As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ FocusVisualStyle { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FocusVisualStyle : System.Windows.Style with get, set" Usage="System.Windows.FrameworkElement.FocusVisualStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta una proprietà che consente la personalizzazione dell'aspetto, degli effetti o di altre caratteristiche di stile che si applicheranno a questo elemento quando acquisisce lo stato attivo della tastiera.</summary>
        <value>Stile desiderato da applicare allo stato attivo. Il valore predefinito dichiarato nella proprietà di dipendenza è un oggetto <see cref="T:System.Windows.Style" /> statico vuoto. Tuttavia, il valore effettivo in fase di esecuzione è spesso, ma non sempre, uno stile specificato dal supporto dei temi per i controlli.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà influisce sull'aspetto visivo, ma non segnala <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> nei metadati. Infatti, la modifica dell'aspetto visivo è basato sugli eventi e potrebbe non essere applicabile in qualsiasi momento e pertanto non deve in genere segnalare qualsiasi informazione visivo o layout nei metadati.  
  
 Concettualmente, il comportamento visivo dello stato attivo applicati a un controllo deve essere coerente da un controllo a un altro. Il modo più appropriato per imporre la coerenza consiste nel modificare solo lo stile di visualizzazione dello stato attivo se si sta componendo un tema completo. Impostazione di questa proprietà su stili del controllo singoli e non come parte di un tema non è l'utilizzo previsto di questa proprietà, perché ciò potrebbe causare confusione nell'esperienza utente relativamente allo stato attivo. Se si stanno prendendo in considerazione il comportamento specifico del controllo che viene deliberatamente non coerente all'interno di un tema, un approccio migliore consiste usare trigger negli stili per le proprietà dello stato di input singolo, ad esempio <xref:System.Windows.UIElement.IsFocused%2A> o <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>e per eseguire questa operazione in modo che non sono presenti visivamente interferire con gli stili di visualizzazione dello stato attivo esistente. Per altre informazioni sugli scopi della progettazione del <xref:System.Windows.FrameworkElement.FocusVisualStyle%2A> e alternativi concentrare le proprietà, vedere [applicazione di stili per lo stato attivo nei controlli e FocusVisualStyle](~/docs/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle.md).  
  
<a name="xamlAttributeUsage_FocusVisualStyle"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object FocusVisualStyle="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_FocusVisualStyle"></a>   
## <a name="xaml-property-element-usage"></a>Utilizzo della sintassi XAML per elementi proprietà  
  
<a name="xamlValues_FocusVisualStyle"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *ResourceExtension*  
 Uno dei seguenti:, o. Visualizzare [risorse XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
 *styleResourceKey*  
 La chiave che identifica lo stile della richiesta. La chiave fa riferimento a una risorsa esistente in un <xref:System.Windows.ResourceDictionary>.  
  
> [!NOTE]
>  La sintassi degli elementi è tecnicamente possibile, ma non è consigliata. Visualizzare [stili Inline e modelli](~/docs/framework/wpf/advanced/inline-styles-and-templates.md). Un riferimento dell'associazione usando o <xref:System.Windows.Data.Binding> è anche possibile, ma non comuni.  
  
<a name="dependencyPropertyInfo_FocusVisualStyle"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.FocusVisualStyleProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusVisualStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusVisualStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.FocusVisualStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusVisualStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusVisualStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusVisualStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.FocusVisualStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.FocusVisualStyle" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceCursor">
      <MemberSignature Language="C#" Value="public bool ForceCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ForceCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ForceCursor" />
      <MemberSignature Language="VB.NET" Value="Public Property ForceCursor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ForceCursor { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ForceCursor : bool with get, set" Usage="System.Windows.FrameworkElement.ForceCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se l'oggetto <see cref="T:System.Windows.FrameworkElement" /> deve forzare l'[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] per il rendering del cursore dichiarato dalla proprietà <see cref="P:System.Windows.FrameworkElement.Cursor" />.</summary>
        <value>
          <see langword="true" /> se per la presentazione del cursore mentre è posizionato su questo elemento viene forzato l'utilizzo delle impostazioni correnti di <see cref="P:System.Windows.FrameworkElement.Cursor" /> (inclusi tutti gli elementi figlio); in caso contrario <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se si imposta questa proprietà su `true` si sostituiranno le preferenze di cursore stabilite dagli elementi figlio. Tale operazione pertanto in generale dell'applicazione [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] potrebbe risultare poco chiaro per l'utente, in particolare se gli elementi figlio sono se si specificano i cursori. Impostazione <xref:System.Windows.FrameworkElement.ForceCursor%2A> più appropriato per scenari di creazione di una sottoclasse o la composizione del controllo.  
  
<a name="dependencyPropertyInfo_ForceCursor"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.ForceCursorProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 Nell'esempio seguente forza il valore del cursore.  
  
 [!code-xaml[ForceCursor#ForceCursor](~/samples/snippets/csharp/VS_Snippets_Wpf/ForceCursor/CS/default.xaml#forcecursor)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="ForceCursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ForceCursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ForceCursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ForceCursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ForceCursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ForceCursorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ForceCursorProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ForceCursorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.ForceCursor" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpression">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression GetBindingExpression (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression GetBindingExpression(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBindingExpression (dp As DependencyProperty) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ GetBindingExpression(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.GetBindingExpression : System.Windows.DependencyProperty -&gt; System.Windows.Data.BindingExpression" Usage="frameworkElement.GetBindingExpression dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">Oggetto <see cref="T:System.Windows.DependencyProperty" /> di destinazione da cui ottenere l'associazione.</param>
        <summary>Restituisce l'oggetto <see cref="T:System.Windows.Data.BindingExpression" /> che rappresenta l'associazione nella proprietà specificata.</summary>
        <returns>
          <see cref="T:System.Windows.Data.BindingExpression" /> se la proprietà di destinazione ha un'associazione attiva. In caso contrario, il metodo restituisce <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verifica del valore restituito per `null` è una tecnica che è possibile usare per determinare se una proprietà ha un'associazione attiva.  
  
 Questo metodo è semplicemente un wrapper di praticità per il <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType> (metodo). <xref:System.Windows.FrameworkElement.GetBindingExpression%2A> passa l'istanza corrente e il `dp` parametro per <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.BindingOperations" />
      </Docs>
    </Member>
    <Member MemberName="GetFlowDirection">
      <MemberSignature Language="C#" Value="public static System.Windows.FlowDirection GetFlowDirection (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.FlowDirection GetFlowDirection(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFlowDirection (element As DependencyObject) As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::FlowDirection GetFlowDirection(System::Windows::DependencyObject ^ element);" />
      <MemberSignature Language="F#" Value="static member GetFlowDirection : System.Windows.DependencyObject -&gt; System.Windows.FlowDirection" Usage="System.Windows.FrameworkElement.GetFlowDirection element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">Elemento per il quale restituire un oggetto <see cref="P:System.Windows.FrameworkElement.FlowDirection" />.</param>
        <summary>Ottiene il valore della proprietà associata <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> per l'elemento <see cref="T:System.Windows.DependencyObject" /> specificato.</summary>
        <returns>Direzione del flusso richiesto come valore dell'enumerazione.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lo scopo principale di questo metodo consiste nella sintassi della proprietà associata per supportare le <xref:System.Windows.FrameworkElement.FlowDirection%2A> proprietà, consentendo pertanto figlio di elementi di un oggetto fornito <xref:System.Windows.FrameworkElement> per specificare la direzione di flusso per la disposizione all'interno del relativo elemento padre. Per ottenere il valore sull'oggetto corrente <xref:System.Windows.FrameworkElement>, usare il direct [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] funzione di accesso <xref:System.Windows.FrameworkElement.FlowDirection%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.FlowDirection" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberSignature Language="F#" Value="override this.GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry" Usage="frameworkElement.GetLayoutClip layoutSlotSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize">Dimensione della parte dell'elemento che effettua la presentazione visiva.</param>
        <summary>Restituisce una geometria per una maschera di ritaglio. La maschera viene applicata se il sistema di layout tenta di disporre un elemento le cui dimensioni sono maggiori dello spazio di visualizzazione disponibile.</summary>
        <returns>Geometria del ritaglio.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I margini verranno sottratto dal `layoutSlotSize` come parte del comportamento del sistema di layout.  
  
 Un riferimento null restituito indica che si verificherà alcun ridimensionamento. L'implementazione predefinita restituisce sempre `null` quando si <xref:System.Windows.UIElement.ClipToBounds%2A> è `false`. Questo metodo esegue l'override di <xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=nameWithType>. Il <xref:System.Windows.FrameworkElement> implementazione Usa <xref:System.Windows.FrameworkElement.MaxHeight%2A> e <xref:System.Windows.FrameworkElement.MaxWidth%2A> nei calcoli. Diverse sottoclassi di <xref:System.Windows.FrameworkElement> anche in questo caso l'override del metodo. <xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=nameWithType>, esegue l'override per sempre restituito `null` perché gli strumenti decorativi visuali sono spesso intenzionalmente di fuori dei normali limiti. <xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=nameWithType> e <xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=nameWithType> restituire `null` se <xref:System.Windows.UIElement.ClipToBounds%2A> è `false`.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>L'implementazione predefinita restituisce sempre <see langword="null" /> quando si <see cref="P:System.Windows.UIElement.ClipToBounds" /> è <see langword="false" />. Le sostituzioni in genere devono mantenere questo comportamento, anche se sono presenti eccezioni, a seconda della relazione e scopo della classe derivata e la logica di layout anziché la classe di base.</para>
        </block>
        <altmember cref="P:System.Windows.UIElement.Clip" />
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="GetTemplateChild">
      <MemberSignature Language="C#" Value="protected internal System.Windows.DependencyObject GetTemplateChild (string childName);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Windows.DependencyObject GetTemplateChild(string childName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function GetTemplateChild (childName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; System::Windows::DependencyObject ^ GetTemplateChild(System::String ^ childName);" />
      <MemberSignature Language="F#" Value="member this.GetTemplateChild : string -&gt; System.Windows.DependencyObject" Usage="frameworkElement.GetTemplateChild childName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="childName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="childName">Nome dell'elemento figlio da trovare.</param>
        <summary>Restituisce l'elemento denominato nella struttura ad albero visuale di un oggetto <see cref="T:System.Windows.Controls.ControlTemplate" /> di cui è stata creata un'istanza.</summary>
        <returns>Elemento richiesto. Può essere <see langword="null" /> se non esiste alcun elemento con il nome richiesto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I modelli in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] hanno un ambito dei nomi indipendente. Infatti, i modelli vengono riutilizzati e qualsiasi nome definito in un modello non può rimanere univoca quando più istanze di un controllo ogni crea un'istanza del modello. Chiamare il <xref:System.Windows.FrameworkElement.GetTemplateChild%2A> per restituire i riferimenti agli oggetti che provengono dal modello dopo che ne viene creata un'istanza. Non è possibile usare la <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> metodo per trovare gli elementi dai modelli in quanto <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> opera in un più generico, ambito, e non c'è alcuna connessione tra il <xref:System.Windows.Controls.ControlTemplate> classe se stesso e il modello di istanziato dopo averla applicata.  
  
 <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> fornisce la stessa funzione di questo metodo. <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> protetto pubblico anziché e Usa considerazioni su nome ambito corretti che consentono di accedere al modello all'interno di un elemento e trovare gli elementi in esso denominati. Usare <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> quando è necessario ottenere un elemento all'esterno di relativo controllo padre.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkTemplate.FindName(System.String,System.Windows.FrameworkElement)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal override System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="frameworkElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un elemento padre logico alternativo per questo elemento se non esiste un elemento padre visuale.</summary>
        <returns>Restituisce un valore diverso da <see langword="null" /> ogni volta che un'implementazione a livello di framework WPF di questo metodo presenta una connessione padre non visuale.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo esegue l'override di <xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=nameWithType>. Il valore predefinito <xref:System.Windows.FrameworkElement> implementazione restituisce solo l'elemento padre visuale previsto, che è lo stesso risultato perché il recupero di <xref:System.Windows.FrameworkElement.Parent%2A> valore. Implementazioni della classe derivata potrebbero restituire le relazioni padre / alternativo.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Parent" />
      </Docs>
    </Member>
    <Member MemberName="GetVisualChild">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Visual GetVisualChild (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Visual GetVisualChild(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetVisualChild (index As Integer) As Visual" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Visual ^ GetVisualChild(int index);" />
      <MemberSignature Language="F#" Value="override this.GetVisualChild : int -&gt; System.Windows.Media.Visual" Usage="frameworkElement.GetVisualChild index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Visual</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indice in base zero dell'elemento figlio richiesto nella raccolta.</param>
        <summary>Esegue l'override di <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" /> e restituisce un elemento figlio in corrispondenza dell'indice specificato da una raccolta di elementi figlio.</summary>
        <returns>Elemento figlio richiesto. Non deve essere restituito un valore <see langword="null" />. Se l'indice fornito non è compreso nell'intervallo, viene generata un'eccezione.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nel <xref:System.Windows.FrameworkElement> implementazione, l'indice solo valido è pari a zero. Il modello di contenuto per <xref:System.Windows.FrameworkElement.GetVisualChild%2A> supporta uno zero o un elemento figlio, non una raccolta.  
  
   
  
## Examples  
 L'esempio seguente mostra come uno strumento decorativo personalizzato Usa i valori dichiarati da un <xref:System.Windows.Media.VisualCollection> gestita per i relativi elementi figlio visivi. Questi valori sono segnalati tramite le sostituzioni dei <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> e <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.  
  
 [!code-csharp[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverridespre)]
 [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverridespre)]  
[!code-csharp[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverrides)]
[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverrides)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Questa implementazione è valida solo per gli elementi che non usano un insieme di elementi figlio visivi più descrittivo. Qualsiasi elemento che dispone di tale insieme deve eseguire l'override di questo metodo ed eseguire il mapping dell'indice a un indice equivalente in insieme di elementi figlio che è supportato da quell'elemento. Un indice nell'intervallo compreso tra zero e <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> (meno uno) deve restituire un elemento valido; qualsiasi altro indice deve generare un'eccezione di out-of-range. Un esempio di un tipo di elemento che supporta una raccolta figlio ed esegue l'override <see cref="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" /> per restituire più elementi figlio possibili è <see cref="T:System.Windows.Controls.Panel" />.  
  
L'implementazione predefinita in <see cref="T:System.Windows.FrameworkElement" /> presuppone un solo elemento figlio visivo. Qualsiasi valore passato per <paramref name="index" /> diverso da zero causa un'eccezione generata. Molti elementi comuni, ad esempio gli elementi Decorator, gli strumenti decorativi o elementi con il rendering specializzato, eseguire l'override di <see cref="T:System.Windows.FrameworkElement" /> implementazione (dell'implementazione dalle classi di base intermediate). Alcune implementazioni imposti un elemento figlio visivo mentre altre consentono una raccolta.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public double Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Height" />
      <MemberSignature Language="VB.NET" Value="Public Property Height As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Height { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Height : double with get, set" Usage="System.Windows.FrameworkElement.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'altezza consigliata dell'elemento.</summary>
        <value>Altezza dell'elemento, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. Il valore predefinito è <see cref="F:System.Double.NaN" />. Questo valore deve essere maggiore o uguale a 0,0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.Height%2A> è una delle tre proprietà scrivibile in <xref:System.Windows.FrameworkElement> che specificano le informazioni sull'altezza. Gli altri due <xref:System.Windows.FrameworkElement.MinHeight%2A> e <xref:System.Windows.FrameworkElement.MaxHeight%2A>. Se si verifica un conflitto tra questi valori, l'ordine di applicazione per determinare l'altezza effettivo che è primo <xref:System.Windows.FrameworkElement.MinHeight%2A> quindi deve essere presa in considerazione <xref:System.Windows.FrameworkElement.MaxHeight%2A>e, infine, se si trova all'interno dei limiti definiti, <xref:System.Windows.FrameworkElement.Height%2A>.  
  
 Se questo elemento è un elemento figlio all'interno di un altro elemento, quindi l'impostazione di questa proprietà su un valore è effettivamente solo un valore suggerito. Il sistema di layout, nonché la logica di layout specifico dell'elemento padre userà il valore come un input non di associazione durante il processo di layout. In pratica, un <xref:System.Windows.FrameworkElement> è quasi sempre l'elemento figlio di un altro elemento; anche quando si imposta la <xref:System.Windows.FrameworkElement.Height%2A> sul <xref:System.Windows.Window>. (Per <xref:System.Windows.Window>, quel valore viene utilizzato quando il modello applicativo sottostante stabilisce i presupposti di base per il rendering che creano l'oggetto Hwnd che ospita l'applicazione.)  
  
 Inoltre a accettabile <xref:System.Double> valori, questa proprietà può anche essere <xref:System.Double.NaN?displayProperty=nameWithType>. Questa è la modalità per specificare il comportamento di ridimensionamento automatico nel codice. In [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] è impostare il valore per la stringa "Auto" (maiuscole e minuscole) per abilitare il comportamento del ridimensionamento automatico. Comportamento del ridimensionamento automatico implica che l'elemento riempirà l'altezza disponibile per il processo. Si noti tuttavia che controlli specifici spesso forniscono i valori predefiniti tramite gli stili di tema predefiniti che consente di disattivare il comportamento del ridimensionamento a meno che non è specificamente riabilitato automatico.  
  
 Il valore restituito di questa proprietà è sempre lo stesso come qualsiasi valore su cui è stato impostato. Al contrario, il valore della <xref:System.Windows.FrameworkElement.ActualHeight%2A> può variare. Ciò può verificarsi in modo statico perché il layout ha rifiutato la dimensione consigliata per qualche motivo, o momentaneamente. Il sistema di layout stesso funziona in modo asincrono rispetto al set del sistema di proprietà di <xref:System.Windows.FrameworkElement.Height%2A> e potrebbero non essere elaborati come quella particolare ancora alla modifica della proprietà di ridimensionamento.  
  
 Le restrizioni di valore per il <xref:System.Double> valore vengono applicati da una <xref:System.Windows.ValidateValueCallback> meccanismo. Se si prova a impostare un valore non valido, viene generata un'eccezione in fase di esecuzione.  
  
 Oltre al controllo di convalida, è disponibile un valore superiore non deterministico per <xref:System.Windows.FrameworkElement.Height%2A> che viene applicato dal sistema di layout (si tratta di un numero molto elevato, maggiore <xref:System.Single.MaxValue?displayProperty=nameWithType> ma più piccolo di <xref:System.Double.MaxValue?displayProperty=nameWithType>). Se si supera questo limite, l'elemento non verrà eseguito il rendering e viene generata alcuna eccezione. Non impostare <xref:System.Windows.FrameworkElement.Height%2A> su un valore che è significativamente maggiore la dimensione massima di qualsiasi visualizzazione possibile, o si potrebbe superare questo limite superiore non deterministico.  
  
<a name="xamlAttributeUsage_Height"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object Height="double"/>  
- or -  
<object Height="qualifiedDouble"/>  
- or -  
<object Height="Auto"/>  
```  
  
<a name="xamlValues_Height"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *double*  
 <xref:System.Double>  
  
 Rappresentazione di stringa di un <xref:System.Double> valore uguale o maggiore di 0,0. Per informazioni sul limite superiore, vedere la sezione Osservazioni. Questo valore viene interpretato come un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] misurazione. Le stringhe non necessario includere in modo esplicito i separatori decimali. Ad esempio un valore di `1` è accettabile.  
  
 *qualifiedDouble*  
 Oggetto *doppie* come descritto in precedenza, seguito da una delle seguenti stringhe di dichiarazione unit: `px`, `in`, `cm`, `pt`.  
  
 `px` (impostazione predefinita) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` pollici; in 1 = = 96 px  
  
 `cm` centimetri; 1cm==(96/2.54) px  
  
 `pt` punti; 1pt==(96/72) px  
  
 **Auto**  
 Abilita il comportamento di ridimensionamento automatico. Vedere la sezione Osservazioni.  
  
<a name="dependencyPropertyInfo_Height"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.HeightProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.ActualHeight" />
      </Docs>
    </Member>
    <Member MemberName="HeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.HeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable HeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.HeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.Height" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.HorizontalAlignment HorizontalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.HorizontalAlignment HorizontalAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.HorizontalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalAlignment As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::HorizontalAlignment HorizontalAlignment { System::Windows::HorizontalAlignment get(); void set(System::Windows::HorizontalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.HorizontalAlignment : System.Windows.HorizontalAlignment with get, set" Usage="System.Windows.FrameworkElement.HorizontalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Recupera o imposta le caratteristiche di allineamento orizzontale applicate all'elemento quando viene composto all'interno di un elemento padre, come un Panel o un controllo elementi.</summary>
        <value>Impostazione di allineamento orizzontale come valore dell'enumerazione. Il valore predefinito è <see cref="F:System.Windows.HorizontalAlignment.Stretch" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando <xref:System.Windows.FrameworkElement.Height%2A> e <xref:System.Windows.FrameworkElement.Width%2A> le proprietà vengono impostate in modo esplicito un elemento, tali misurazioni hanno precedenza maggiore durante il layout e annullerà gli effetti dell'impostazione tipici <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> a <xref:System.Windows.HorizontalAlignment.Stretch>.  
  
 <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> è il [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] funzione di accesso di proprietà per i quali è in realtà una proprietà di dipendenza. Questa proprietà di dipendenza specifica viene spesso ha il valore "predefinito" apparente impostato in modo diverso negli elementi delle sottoclassi, in particolare i controlli. In genere ciò si verifica in due modi: la proprietà di dipendenza viene nuovamente registrata in una sottoclasse specifica, ma con metadati diversi per l'impostazione dei valori predefiniti; oppure è un'impostazione predefinita viene applicato uno stile che imposta il valore della proprietà di dipendenza in modo diverso. Ad esempio, il valore "default" apparente della <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> per un <xref:System.Windows.Controls.Label> controllo sarà <xref:System.Windows.HorizontalAlignment.Left>, anche se <xref:System.Windows.Controls.Label> eredita <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> direttamente dai <xref:System.Windows.FrameworkElement>. Infatti, tale valore è stato reimpostato nello stile predefinito di <xref:System.Windows.Controls.Label>, nel modello di controllo dello stile.  
  
 <xref:System.Windows.Controls.Canvas> non usa <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> durante la composizione di layout, perché <xref:System.Windows.Controls.Canvas> si basa sul posizionamento assoluto.  
  
 Quando viene ereditato da <xref:System.Windows.Controls.Label> o le classi, derivate <xref:System.Windows.Controls.Label> ridefinisce il valore predefinito di questa proprietà di dipendenza sia <xref:System.Windows.HorizontalAlignment.Left>.  
  
<a name="dependencyPropertyInfo_HorizontalAlignment"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.HorizontalAlignmentProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HorizontalAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HorizontalAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.HorizontalAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HorizontalAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HorizontalAlignmentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable HorizontalAlignmentProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.HorizontalAlignmentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InheritanceBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Windows.InheritanceBehavior InheritanceBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.InheritanceBehavior InheritanceBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.InheritanceBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property InheritanceBehavior As InheritanceBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Windows::InheritanceBehavior InheritanceBehavior { System::Windows::InheritanceBehavior get(); void set(System::Windows::InheritanceBehavior value); };" />
      <MemberSignature Language="F#" Value="member this.InheritanceBehavior : System.Windows.InheritanceBehavior with get, set" Usage="System.Windows.FrameworkElement.InheritanceBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.InheritanceBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta i limiti di ambito per l'ereditarietà dei valori di proprietà, per la ricerca delle chiavi di risorsa e per la ricerca RelativeSource FindAncestor.</summary>
        <value>Valore dell'enumerazione. Il valore predefinito è <see cref="F:System.Windows.InheritanceBehavior.Default" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Determinati limiti nell'elemento di struttura ad albero come set <xref:System.Windows.FrameworkElement.InheritanceBehavior%2A> deliberatamente limitare l'ambito del comportamento di ereditarietà, su una ricerca delle risorse force per controllare le risorse dell'applicazione, o per impedire l'esecuzione di query dell'elemento corrente di una ricerca RelativeSource FindAncestor né ulteriore. La ricerca RelativeSource FindAncestor si verifica quando viene utilizzata un'associazione di un <xref:System.Windows.Data.RelativeSource> con relativo <xref:System.Windows.Data.RelativeSource.Mode%2A> proprietà impostata sul <xref:System.Windows.Data.RelativeSourceMode.FindAncestor?displayProperty=nameWithType> valore.  
  
 Se si desidera che la classe derivata di impostare questa proprietà, è necessario farlo all'interno del costruttore statico o in altre routine di inizializzazione.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Frame" />
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Initialized;" />
      <MemberSignature Language="F#" Value="member this.Initialized : EventHandler " Usage="member this.Initialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene inizializzato l'oggetto <see cref="T:System.Windows.FrameworkElement" />. che coincide con i casi in cui il valore della proprietà <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> viene modificato da <see langword="false" /> (o non definito) in <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento verrà generato ogni volta che il <xref:System.Windows.FrameworkElement.EndInit%2A> o <xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A> metodi vengono chiamati. Le chiamate a uno dei due metodi possono essere generate dal codice dell'applicazione oppure tramite il [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] comportamento del processore quando un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] pagina viene elaborata.  
  
 Se si sceglie di gestire <xref:System.Windows.FrameworkElement.Loaded> o <xref:System.Windows.FrameworkElement.Initialized> dipende dai requisiti. Se non è necessaria leggere le proprietà degli elementi, prevede di ripristinare le proprietà e non è necessario alcuna informazione sul layout <xref:System.Windows.FrameworkElement.Initialized> potrebbe essere la migliore evento su cui intervenire. Se è necessario conoscere tutte le proprietà dell'elemento sia disponibile e si desidera impostare le proprietà che sono probabile che reimpostare il layout, <xref:System.Windows.FrameworkElement.Loaded> potrebbe essere la migliore evento su cui intervenire. Prestare attenzione alla reentrancy se il gestore reimposta tutte le proprietà che vengono interpretate dal sistema di layout per indicare che un nuovo passaggio di layout è obbligatorio. (Potrebbe essere necessario controllare il <xref:System.Windows.FrameworkPropertyMetadata> i valori della proprietà se si è certi della proprietà che possono richiedere un nuovo layout viene superato se sono state modificate.)  
  
 Per altre informazioni sulla sequenza di eventi dell'oggetto per un <xref:System.Windows.FrameworkElement>, nonché per molti correlati dell'applicazione e le classi di elemento, vedere [eventi di durata degli oggetti](~/docs/framework/wpf/advanced/object-lifetime-events.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InputScope">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputScope InputScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputScope InputScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.InputScope" />
      <MemberSignature Language="VB.NET" Value="Public Property InputScope As InputScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputScope ^ InputScope { System::Windows::Input::InputScope ^ get(); void set(System::Windows::Input::InputScope ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InputScope : System.Windows.Input.InputScope with get, set" Usage="System.Windows.FrameworkElement.InputScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il contesto per l'input usato dall'oggetto <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <value>Ambito di input, che modifica il modo in cui viene interpretato l'input proveniente da metodi di input alternativi. Il valore predefinito è <see langword="null" />, che dà come risultato una gestione predefinita dei comandi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà di dipendenza eredita i valori delle proprietà. Se sono presenti elementi figlio senza altri valori per <xref:System.Windows.FrameworkElement.InputScope%2A> configurati tramite i valori locali o gli stili, il sistema di proprietà verrà impostato il valore sarà il <xref:System.Windows.FrameworkElement.InputScope%2A> valore dell'elemento progenitore più vicino con questo valore viene assegnato.  
  
 Anche se un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] utilizzo della sintassi viene elencato e sintatticamente è consentito, l'impostazione di questa proprietà [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] non è comune.  
  
<a name="dependencyPropertyInfo_InputScope"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.InputScopeProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputScope" />
        <altmember cref="T:System.Windows.IInputElement" />
      </Docs>
    </Member>
    <Member MemberName="InputScopeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty InputScopeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty InputScopeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.InputScopeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InputScopeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ InputScopeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable InputScopeProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.InputScopeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.InputScope" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitialized : bool" Usage="System.Windows.FrameworkElement.IsInitialized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se l'elemento è stato inizializzato, durante l'elaborazione da parte di un processore [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] o tramite la chiamata esplicita del metodo <see cref="M:System.Windows.FrameworkElement.EndInit" /> corrispondente.</summary>
        <value>
          <see langword="true" /> se l'elemento viene inizializzato tramite l'elaborazione [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] o le chiamate del metodo indicate sopra. In caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà può anche essere `true` se questo elemento è stato spostato all'interno dell'albero logico in modo che abbia un nuovo elemento padre e pertanto venga ricaricato nuovamente.  
  
 Questa proprietà è utile se si usano anche <xref:System.Windows.FrameworkElement.BeginInit%2A> e <xref:System.Windows.FrameworkElement.EndInit%2A>. Gli elementi dell'albero logico che viene caricato da un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processore vengono garantite da inizializzare. Gli elementi non inclusi nell'albero logico vengono inizializzati quando <xref:System.Windows.FrameworkElement.EndInit%2A> viene chiamato. In assenza di una gestione specifica di <xref:System.Windows.FrameworkElement.BeginInit%2A> e <xref:System.Windows.FrameworkElement.EndInit%2A>, ciò si verifica, non appena il costruttore restituisce il risultato inizializzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoaded">
      <MemberSignature Language="C#" Value="public bool IsLoaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoaded" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.IsLoaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoaded { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLoaded : bool" Usage="System.Windows.FrameworkElement.IsLoaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se questo elemento è stato caricato per la presentazione.</summary>
        <value>
          <see langword="true" /> se l'elemento corrente è associato alla struttura ad albero di un elemento; <see langword="false" /> se l'elemento non è mai stato associato alla struttura ad albero di un elemento caricato.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da un oggetto appena costruito <xref:System.Windows.FrameworkElement>, questa proprietà inizia `false`e rimane `true` dopo che è impostato su `true`, anche se l'elemento viene successivamente rimossa da un albero logico connesso dal codice. `true` lo stato è impostato per la logica di presentazione generale, quando gli elementi vengono caricati nel motore di presentazione.  
  
 Elementi caricati sono in genere sottoposta a rendering, ma non tutte le <xref:System.Windows.FrameworkElement> alle classi derivate hanno una presentazione e altre proprietà, ad esempio <xref:System.Windows.UIElement.Visibility%2A> possono influenzare la presentazione.  
  
   
  
## Examples  
 L'esempio seguente implementa due gestori: uno sta gestendo il <xref:System.Windows.FrameworkElement.Loaded> evento dell'elemento radice, in modo che si è certi che l'elemento radice della pagina viene caricata perché questo è il significato dell'evento. L'altro gestore è associato a un controllo utente e le chiamate <xref:System.Windows.FrameworkElement.IsLoaded%2A> per assicurare che l'elemento radice è caricato completamente. Entrambi i gestori di chiamano la funzione stessa (non mostrata) in grado di popolare gli elementi figlio con dati aggiornati.  
  
 [!code-csharp[GroupBoxExample#FEIsLoaded](~/samples/snippets/csharp/VS_Snippets_Wpf/GroupBoxExample/CSharp/Page1.xaml.cs#feisloaded)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.XmlLanguage Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.XmlLanguage Language" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Language" />
      <MemberSignature Language="VB.NET" Value="Public Property Language As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Markup::XmlLanguage ^ Language { System::Windows::Markup::XmlLanguage ^ get(); void set(System::Windows::Markup::XmlLanguage ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Language : System.Windows.Markup.XmlLanguage with get, set" Usage="System.Windows.FrameworkElement.Language" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta le informazioni relative alla lingua di localizzazione/globalizzazione che si applica a un elemento.</summary>
        <value>Informazioni relative alla lingua per questo elemento. Il valore predefinito è un oggetto <see cref="T:System.Windows.Markup.XmlLanguage" /> con il relativo valore <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> impostato sulla stringa "en-US".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I formati di stringa conforme allo standard RFC 3066. Ad esempio, Stati Uniti Inglese è "en-US". Per altre informazioni su valori e formato, vedere <xref:System.Windows.Markup.XmlLanguage>.  
  
 Questa proprietà di dipendenza eredita i valori delle proprietà. Se sono presenti elementi figlio senza altri valori per <xref:System.Windows.FrameworkElement.Language%2A> stabilita tramite i valori locali o gli stili, il sistema di proprietà verrà impostato il valore sarà il <xref:System.Windows.FrameworkElement.Language%2A> valore dell'elemento progenitore più vicino con questo valore viene assegnato.  
  
 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] definisce il significato generale del `xml:lang` attributo. <xref:System.Windows.FrameworkElement.Language%2A> essenzialmente espone il significato di questo attributo come proprietà di dipendenza. <xref:System.Windows.FrameworkElement.Language%2A> può essere modificata a livello di codice e possono partecipare all'ereditarietà del valore della proprietà del sistema in modo simile al modo in cui il `xml:lang` attributo può ereditare all'ambito elemento figlio in [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]. Se si imposta <xref:System.Windows.FrameworkElement.Language%2A>, tale valore diventa il `xml:lang` e sovrascrive gli eventuali valori precedenti. Per altre informazioni, vedere [XML: lang in XAML gestisce](~/docs/framework/xaml-services/xml-lang-handling-in-xaml.md).  
  
<a name="dependencyPropertyInfo_CultureInfo"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.LanguageProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LanguageProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LanguageProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LanguageProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LanguageProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LanguageProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LanguageProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LanguageProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.LanguageProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.Language" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform LayoutTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform LayoutTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.LayoutTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property LayoutTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ LayoutTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LayoutTransform : System.Windows.Media.Transform with get, set" Usage="System.Windows.FrameworkElement.LayoutTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Recupera o imposta una trasformazione grafica da applicare all'elemento quando viene eseguito il layout.</summary>
        <value>Trasformazione che dovrà essere utilizzata da questo elemento. Il valore predefinito è <see cref="P:System.Windows.Media.Transform.Identity" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A differenza <xref:System.Windows.UIElement.RenderTransform%2A>, <xref:System.Windows.FrameworkElement.LayoutTransform%2A> influirà sui risultati del layout.  
  
 L'impostazione di una trasformazione offre potenti funzionalità di scalabilità e rotazione. Tuttavia <xref:System.Windows.FrameworkElement.LayoutTransform%2A> ignora <xref:System.Windows.Media.TranslateTransform> operazioni. Infatti, il comportamento del sistema di layout per gli elementi figlio di un <xref:System.Windows.FrameworkElement> corregge automaticamente tutti gli offset per la posizione di un elemento ridimensionato o ruotato nel layout e il sistema di coordinate dell'elemento padre.  
  
 <xref:System.Windows.FrameworkElement.LayoutTransform%2A> può causare scarse prestazioni dell'applicazione se viene richiamato in uno scenario che non richiede un passaggio completo del sistema di layout. Quando si applica un <xref:System.Windows.FrameworkElement.LayoutTransform%2A> per il <xref:System.Windows.Controls.Panel.Children%2A> insieme del <xref:System.Windows.Controls.Panel>, attiva un nuovo passaggio dal sistema di layout e forza tutto su schermo oggetti misurazione e la ridisposizione. Se si sta aggiornando l'applicazione completa [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)], questa funzionalità potrebbe essere esattamente ciò che è necessario. Tuttavia, se non è necessario un passaggio di layout completo, usare il <xref:System.Windows.UIElement.RenderTransform%2A> proprietà, che non richiama il sistema di layout e di conseguenza, è in genere una scelta migliore per questo scenario.  
  
 Scenari di esempio in cui <xref:System.Windows.FrameworkElement.LayoutTransform%2A> potrebbe essere utile includere: rotazione di elementi, ad esempio i componenti di menu orizzontale, verticale o viceversa, ridimensionamento di elementi (ingrandire) sullo stato attivo, fornendo la modifica del comportamento e così via.  
  
<a name="dependencyPropertyInfo_LayoutTransform"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.LayoutTransformProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come applicare un <xref:System.Windows.FrameworkElement.LayoutTransform%2A> a un elemento. L'esempio crea un'istanza di <xref:System.Windows.Controls.Button> e per ospitarlo all'interno di un elemento padre <xref:System.Windows.Controls.Grid>. Viene inoltre utilizzata la <xref:System.Windows.FrameworkElement.LayoutTransform%2A> proprietà a cui applicare una <xref:System.Windows.Media.RotateTransform> per il <xref:System.Windows.Controls.Button>.  
  
 [!code-cpp[LayoutTransform#1](~/samples/snippets/cpp/VS_Snippets_Wpf/LayoutTransform/CPP/LayoutTransform.cpp#1)]
 [!code-csharp[LayoutTransform#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LayoutTransform/CSharp/LayoutTransform.cs#1)]
 [!code-vb[LayoutTransform#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LayoutTransform/VisualBasic/LayoutTransform.vb#1)]
 [!code-xaml[LayoutTransform#1](~/samples/snippets/xaml/VS_Snippets_Wpf/LayoutTransform/XAML/default.xaml#1)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=158252">Esempio di trasformazioni 2D</related>
      </Docs>
    </Member>
    <Member MemberName="LayoutTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LayoutTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LayoutTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LayoutTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LayoutTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LayoutTransformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LayoutTransformProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.LayoutTransformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.LayoutTransform" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Loaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Loaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Loaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Loaded;" />
      <MemberSignature Language="F#" Value="member this.Loaded : System.Windows.RoutedEventHandler " Usage="member this.Loaded : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al termine del layout e del rendering, quando l'elemento è pronto per l'interazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.Loaded> viene in genere l'ultimo evento generato in una sequenza di inizializzazione di elementi. Verrà sempre essere generato dopo <xref:System.Windows.FrameworkElement.Initialized>. Se si sceglie di gestire <xref:System.Windows.FrameworkElement.Loaded> o <xref:System.Windows.FrameworkElement.Initialized> dipende dai requisiti. Se non è necessaria leggere le proprietà degli elementi, prevede di ripristinare le proprietà e non è necessario alcuna informazione sul layout <xref:System.Windows.FrameworkElement.Initialized> potrebbe essere la migliore evento su cui intervenire. Se è necessario conoscere tutte le proprietà dell'elemento sia disponibile e si desidera impostare le proprietà che sono probabile che reimpostare il layout, <xref:System.Windows.FrameworkElement.Loaded> potrebbe essere la migliore evento su cui intervenire. Prestare attenzione alla reentrancy se il gestore reimposta tutte le proprietà che vengono interpretate dal sistema di layout per indicare che un nuovo passaggio di layout è obbligatorio. (Potrebbe essere necessario controllare il <xref:System.Windows.FrameworkPropertyMetadata> i valori della proprietà se si è certi della proprietà che possono richiedere un nuovo layout viene superato se sono state modificate.)  
  
 Per altre informazioni sulla sequenza di eventi dell'oggetto per un <xref:System.Windows.FrameworkElement>, nonché per molti correlati dell'applicazione e le classi di elemento, vedere [eventi di durata degli oggetti](~/docs/framework/wpf/advanced/object-lifetime-events.md).  
  
 Gli eventi indirizzati diretti non seguono una route, ma vengono gestiti solo all'interno dell'elemento stesso in cui vengono generati. Indirizzare gli eventi indirizzati supportano altri comportamenti di eventi indirizzati: supportano una raccolta di gestori accessibile e può essere utilizzati come un <xref:System.Windows.EventTrigger> in uno stile.  
  
 <xref:System.Windows.FrameworkElement.Loaded> e <xref:System.Windows.FrameworkElement.Unloaded> possono essere generati entrambi nei controlli in seguito a modifiche al tema del sistema avviata dall'utente. Una modifica al tema fa sì che un invalidamento dei dati del modello di controllo e la struttura visiva indipendente, che a sua volta, l'intero controllo confermare l'operazione. Di conseguenza <xref:System.Windows.FrameworkElement.Loaded> non è possibile presupporre che si verificano solo quando viene caricata una pagina prima di tutto tramite navigazione alla pagina.  
  
<a name="routedEventInfo_Loaded"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.LoadedEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      </Docs>
    </Member>
    <Member MemberName="LoadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LoadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LoadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LoadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LoadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LoadedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LoadedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.LoadedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.FrameworkElement.Loaded" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per altre informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per altre informazioni sull'uso degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal virtual System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LogicalChildren : System.Collections.IEnumerator" Usage="System.Windows.FrameworkElement.LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un enumeratore per gli elementi figlio logici di questo elemento.</summary>
        <value>Ottiene un enumeratore per gli elementi figlio logici di questo elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.LogicalChildren%2A> Consente di scorrere gli elementi figlio. Ciò è utile per gli elementi che non possono avere una raccolta dedicata e definita ma comunque contenere più di un elemento figlio, in particolare <xref:System.Windows.FrameworkContentElement> gli elementi figlio.  
  
 Per altre informazioni su come usare <xref:System.Windows.FrameworkElement.LogicalChildren%2A> e <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>, vedere [strutture ad albero in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c5358e14-d24c-44c7-b5eb-6062a4fd981c">Estensione del markup x:Array</related>
      </Docs>
    </Member>
    <Member MemberName="Margin">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness Margin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness Margin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Margin" />
      <MemberSignature Language="VB.NET" Value="Public Property Margin As Thickness" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Thickness Margin { System::Windows::Thickness get(); void set(System::Windows::Thickness value); };" />
      <MemberSignature Language="F#" Value="member this.Margin : System.Windows.Thickness with get, set" Usage="System.Windows.FrameworkElement.Margin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il margine esterno di un elemento.</summary>
        <value>Specifica i valori dei margini per l'elemento. Il valore predefinito è un oggetto <see cref="T:System.Windows.Thickness" /> con tutte le proprietà uguali a 0 (zero).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il margine è lo spazio tra questo elemento e gli altri elementi che risulteranno adiacenti durante la creazione di layout di [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]. Gli elementi condivisi potrebbero essere peer elementi (ad esempio, gli altri elementi nella raccolta di un controllo padre comune), o può essere padre di questo elemento.  
  
 <xref:System.Windows.FrameworkElement.Margin%2A> viene impostato come un <xref:System.Windows.Thickness> struttura anziché come un numero in modo che il margine può essere impostato in modo asimmetrico. Il <xref:System.Windows.Thickness> struttura stessa supporta la conversione del tipo stringa, in modo da poter specificare un oggetto asimmetrico <xref:System.Windows.FrameworkElement.Margin%2A> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] anche la sintassi di attributo.  
  
 Un margine diverso da zero applica uno spazio di fuori del layout dell'elemento <xref:System.Windows.FrameworkElement.ActualWidth%2A> e <xref:System.Windows.FrameworkElement.ActualHeight%2A>.  
  
 I margini si sommano tra loro per gli elementi di pari livello in un layout. ad esempio, due elementi adiacenti impostati entrambi con un margine pari a 30 del lato adiacente avranno 60 unità di spazio tra di essi.  
  
 Gli elementi con margini impostati in genere non limitano le dimensioni dell'oggetto specificato <xref:System.Windows.FrameworkElement.Margin%2A> se lo spazio del rettangolo assegnato non è sufficientemente grande per il margine oltre l'area di contenuto. L'area di contenuto sarà vincolato invece quando il calcolo del layout. L'unico caso in cui potrebbero essere vincolati margini è anche se il contenuto è già vincolato completamente da zero.  
  
<a name="xamlAttributeUsage_Margin"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object Margin="left,top,right,bottom"/>  
- or -  
<object Margin="left,top"/>  
- or -  
<object Margin="thicknessReference"/>  
```  
  
<a name="xamlPropertyElementUsage_Margin"></a>   
## <a name="xaml-property-element-usage"></a>Utilizzo della sintassi XAML per elementi proprietà  
  
```  
<object>  
  <object.Margin>  
    <Thickness Left="left" Top="top" Right="right" Bottom="bottom"/>  
  </object.Margin>  
</object>  
```  
  
<a name="xamlValues_Margin"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *a sinistra, dall'alto, basso a destra,*  
 Numero di valori compreso tra 0 e <xref:System.Double.PositiveInfinity> che specificano i quattro possibili proprietà di dimensione di un <xref:System.Windows.Thickness> struttura.  
  
 L'utilizzo dell'attributo accetterà anche abbreviati valori che si applicano nell'ordine specificato, in modo simmetrico e in modo logico. Ad esempio, `Margin="20"` verrà interpretato come un <xref:System.Windows.Thickness> con tutte le proprietà impostate su 20. `Margin="20,50"` verrà interpretato come un <xref:System.Windows.Thickness> con <xref:System.Windows.Thickness.Left%2A> e <xref:System.Windows.Thickness.Right%2A> impostato su 20, e <xref:System.Windows.Thickness.Top%2A> e <xref:System.Windows.Thickness.Bottom%2A> impostato su 50.  
  
 L'unità predefinita per un <xref:System.Windows.Thickness> measure è [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]. È inoltre possibile specificare altre unità aggiungendo le stringhe di tipo unit `cm`, `in`, o `pt` a qualsiasi misura.  
  
 Numero di valori forniti come [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attributi non è necessario specificare i separatori decimali (0 è accettabile, non deve essere specificato come 0,0). Per ulteriori informazioni sul [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] sull'utilizzo, vedere <xref:System.Windows.Thickness>.  
  
 *thicknessReference*  
 Un riferimento all'oggetto esistente <xref:System.Windows.Thickness>. Potrebbe trattarsi di un `}`, a, o `}` riferimento. Per ulteriori informazioni sul [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] sull'utilizzo, vedere <xref:System.Windows.Thickness>.  
  
<a name="dependencyPropertyInfo_Margin"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.MarginProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Thickness" />
      </Docs>
    </Member>
    <Member MemberName="MarginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MarginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MarginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MarginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MarginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MarginProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MarginProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MarginProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.Margin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeight">
      <MemberSignature Language="C#" Value="public double MaxHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MaxHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxHeight { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MaxHeight : double with get, set" Usage="System.Windows.FrameworkElement.MaxHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Recupera o imposta il vincolo di altezza massima dell'elemento.</summary>
        <value>Altezza massima dell'elemento, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. Il valore predefinito è <see cref="F:System.Double.PositiveInfinity" />. Può essere qualsiasi valore maggiore o uguale a 0,0. È valido anche il valore <see cref="F:System.Double.PositiveInfinity" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo è uno dei tre proprietà in <xref:System.Windows.FrameworkElement> che specificano le informazioni sull'altezza. Gli altri due <xref:System.Windows.FrameworkElement.MinHeight%2A> e <xref:System.Windows.FrameworkElement.Height%2A>.  Se si verifica un conflitto tra questi valori, l'ordine di applicazione per determinare l'altezza effettivo è primo <xref:System.Windows.FrameworkElement.MinHeight%2A> quindi deve essere presa in considerazione <xref:System.Windows.FrameworkElement.MaxHeight%2A>e infine se ognuno di questi si trovano all'interno dei limiti definiti, <xref:System.Windows.FrameworkElement.Height%2A>.  
  
 Le restrizioni di valore per il <xref:System.Double> valore vengono applicati da una <xref:System.Windows.ValidateValueCallback> meccanismo. Se si prova a impostare un valore non valido viene generata un'eccezione in fase di esecuzione.  
  
<a name="xamlAttributeUsage_MaxHeight"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object MaxHeight="double"/>  
- or –  
<object MaxHeight ="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MaxHeight"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *double*  
 <xref:System.Double>  
  
 Rappresentazione di stringa di un <xref:System.Double> valore uguale o maggiore di 0,0. Ciò viene interpretato come un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] misurazione. Le stringhe non necessario includere in modo esplicito i separatori decimali. Ad esempio un valore di `1` è accettabile.  
  
 Lo stesso <xref:System.Double> si applicano le restrizioni dell'intervallo come indicato nella sezione relativa al valore di proprietà, ad eccezione del fatto che si utilizzi [X:Static Markup Extension](~/docs/framework/xaml-services/x-static-markup-extension.md) se è necessario impostare in modo esplicito il valore sia <xref:System.Double.PositiveInfinity>.  
  
 *qualifiedDouble*  
 Oggetto *doppie* come descritto in precedenza, seguito da una delle seguenti stringhe di dichiarazione unit: `px`, `in`, `cm`, `pt`.  
  
 `px` (impostazione predefinita) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` pollici; in 1 = = 96 px  
  
 `cm` centimetri; 1cm==(96/2.54) px  
  
 `pt` punti; 1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MaxHeight"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.MaxHeightProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MaxHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MaxHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.MaxHeight" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidth">
      <MemberSignature Language="C#" Value="public double MaxWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MaxWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxWidth { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MaxWidth : double with get, set" Usage="System.Windows.FrameworkElement.MaxWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Recupera o imposta il vincolo di larghezza massima dell'elemento.</summary>
        <value>Larghezza massima dell'elemento in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. Il valore predefinito è <see cref="F:System.Double.PositiveInfinity" />. Può essere qualsiasi valore maggiore o uguale a 0,0. È valido anche il valore <see cref="F:System.Double.PositiveInfinity" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo è uno dei tre proprietà in <xref:System.Windows.FrameworkElement> che specificano le informazioni sulla larghezza. Gli altri due <xref:System.Windows.FrameworkElement.MinWidth%2A> e <xref:System.Windows.FrameworkElement.Width%2A>. Se si verifica un conflitto tra questi valori, l'ordine di applicazione per determinare la larghezza effettiva è primo <xref:System.Windows.FrameworkElement.MinWidth%2A> quindi deve essere presa in considerazione <xref:System.Windows.FrameworkElement.MaxWidth%2A>e infine se ognuno di questi si trovano all'interno dei limiti definiti, <xref:System.Windows.FrameworkElement.Width%2A>.  
  
 Le restrizioni di valore per il <xref:System.Double> valore vengono applicati da una <xref:System.Windows.ValidateValueCallback> meccanismo. Se si prova a impostare un valore non valido, viene generata un'eccezione in fase di esecuzione.  
  
<a name="xamlAttributeUsage_MaxWidth"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object MaxWidth="double"/>  
- or -  
<object MaxWidth="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MaxWidth"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *double*  
 <xref:System.Double>  
  
 Rappresentazione di stringa di un <xref:System.Double> valore uguale o maggiore di 0,0. Ciò viene interpretato come un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] misurazione. Le stringhe non necessario includere in modo esplicito i separatori decimali. Ad esempio un valore di `1` è accettabile.  
  
 Lo stesso <xref:System.Double> si applicano le restrizioni dell'intervallo come indicato nella sezione relativa al valore di proprietà, ad eccezione del fatto che si utilizzi [X:Static Markup Extension](~/docs/framework/xaml-services/x-static-markup-extension.md) per impostare il valore sia <xref:System.Double.PositiveInfinity>.  
  
 *qualifiedDouble*  
 Oggetto *doppie* come descritto in precedenza, seguito da una delle seguenti stringhe di dichiarazione unit: `px`, `in`, `cm`, `pt`.  
  
 `px` (impostazione predefinita) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` pollici; in 1 = = 96 px  
  
 `cm` centimetri; 1cm==(96/2.54) px  
  
 `pt` punti; 1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MaxWidth"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.MaxWidthProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MaxWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MaxWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.MaxWidth" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected override sealed System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="override this.MeasureCore : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.MeasureCore availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">Dimensioni disponibili che l'elemento padre può assegnare agli elementi figlio.</param>
        <summary>Implementa il comportamento del sistema di layout per il passaggio di misurazione di base per <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <returns>Dimensioni desiderate dell'elemento nel layout.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo esegue l'override <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType> per connettere il livello di base WPF e implementazioni di misurazione di layout a livello di framework WPF. Il <xref:System.Windows.FrameworkElement> esegue il sealing di implementazione del metodo. Per modificare il comportamento di layout di passaggio di misurazione di qualsiasi elemento che si basa sul livello di framework WPF, eseguire l'override <xref:System.Windows.FrameworkElement.MeasureOverride%2A> invece. Per modificare il comportamento di layout di un elemento che intenzionalmente non basati su WPF a livello di framework o utilizzare di passaggio di misurazione <xref:System.Windows.FrameworkElement>, eseguire l'override <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureOverride (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureOverride (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureOverride(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="abstract member MeasureOverride : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.MeasureOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.MeasureOverride availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">Dimensioni disponibili che l'elemento può assegnare agli elementi figlio. È possibile specificare infinito come valore per indicare che l'elemento verrà adattato a qualsiasi contenuto disponibile.</param>
        <summary>In caso di override in una classe derivata, misura le dimensioni nel layout necessarie per gli elementi figlio e determina le dimensioni per la classe derivata da <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <returns>Dimensioni che questo elemento determina come necessarie durante il layout, in base ai calcoli delle dimensioni degli elementi figlio.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eseguire l'override <xref:System.Windows.FrameworkElement.MeasureOverride%2A> per implementare il comportamento di ridimensionamento layout personalizzato per l'elemento che partecipa la [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] sistema di layout. L'implementazione deve eseguire le operazioni seguenti:  
  
1.  Eseguire l'iterazione di raccolta specifico dell'elemento di elementi figlio che fanno parte del layout, chiamare <xref:System.Windows.UIElement.Measure%2A> su ogni elemento figlio.  
  
2.  Ottieni immediatamente <xref:System.Windows.UIElement.DesiredSize%2A> sull'elemento figlio (viene impostato come una proprietà dopo <xref:System.Windows.UIElement.Measure%2A> viene chiamato).  
  
3.  Calcolare la dimensione desiderata dell'elemento padre in base alla misurazione degli elementi figlio.  
  
 Il valore restituito di <xref:System.Windows.FrameworkElement.MeasureOverride%2A> devono essere le dimensioni desiderata dell'elemento, che diventa quindi la misura di input per l'elemento padre dell'elemento corrente. Lo stesso processo continua attraverso il sistema di layout fino a raggiungere l'elemento radice della pagina.  
  
 Durante questo processo, gli elementi figlio potrebbero restituire una più grande <xref:System.Windows.UIElement.DesiredSize%2A> dimensioni rispetto a iniziale `availableSize` per indicare che l'elemento figlio richiede più spazio. Ciò potrebbe essere gestita in un'implementazione personalizzata con l'introduzione di un'area scorrevole, mediante il ridimensionamento al controllo padre, stabilendo alcune modalità di ordine di barre in pila oppure un numero qualsiasi di soluzioni per la misurazione e disposizione del contenuto.  
  
> [!IMPORTANT]
>  Gli elementi devono chiamare <xref:System.Windows.UIElement.Measure%2A> su ogni elemento figlio durante questo processo, in caso contrario, gli elementi figlio non verrà correttamente ridimensionati o disposti.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Il codice non di compilazione seguente illustra questo modello di implementazione.  <c>VisualChildren</c> rappresenta una proprietà di raccolta enumerabile di elementi figlio che deve definire un elemento personalizzato. La proprietà può essere denominata alcuna operazione. <c>VisualChildren</c> è un nome segnaposto per fini di questo esempio, <c>VisualChildren</c> non è un [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] fornito da [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] o una parte di un modello di denominazione...  
  
[! codice-csharp[CorePseudocode #FEMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#femeasureoverride)] [! codice vb[CorePseudocode #FEMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#femeasureoverride)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MinHeight">
      <MemberSignature Language="C#" Value="public double MinHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MinHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MinHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MinHeight { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MinHeight : double with get, set" Usage="System.Windows.FrameworkElement.MinHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Recupera o imposta il vincolo di altezza minima dell'elemento.</summary>
        <value>Altezza minima dell'elemento, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. Il valore predefinito è 0,0. Può essere qualsiasi valore maggiore o uguale a 0,0. Tuttavia, <see cref="F:System.Double.PositiveInfinity" /> e <see cref="F:System.Double.NaN" /> NON sono validi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo è uno dei tre proprietà in <xref:System.Windows.FrameworkElement> che specificano le informazioni sull'altezza.  Gli altri due <xref:System.Windows.FrameworkElement.Height%2A> e <xref:System.Windows.FrameworkElement.MaxHeight%2A>. Se si verifica un conflitto tra questi valori, l'ordine di applicazione per determinare l'altezza effettivo è primo <xref:System.Windows.FrameworkElement.MinHeight%2A> quindi deve essere presa in considerazione <xref:System.Windows.FrameworkElement.MaxHeight%2A>e infine se ognuno di questi si trovano all'interno dei limiti definiti, <xref:System.Windows.FrameworkElement.Height%2A>.  
  
 Le restrizioni di valore per il <xref:System.Double> valore vengono applicati da una <xref:System.Windows.ValidateValueCallback> meccanismo. Se si prova a impostare un valore non valido, viene generata un'eccezione in fase di esecuzione.  
  
<a name="xamlAttributeUsage_MinHeight"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object MinHeight="double"/>  
- or -  
<object MinHeight="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MinHeight"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *double*  
 <xref:System.Double>  
  
 Rappresentazione di stringa di un <xref:System.Double> valore uguale o maggiore di 0,0. Ciò viene interpretato come un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] misurazione. Le stringhe non necessario includere in modo esplicito i separatori decimali. Ad esempio un valore di `1` è accettabile.  
  
 Lo stesso <xref:System.Double> si applicano le restrizioni dell'intervallo come indicato nella sezione relativa al valore di proprietà.  
  
 *qualifiedDouble*  
 Oggetto *doppie* come descritto in precedenza, seguito da una delle seguenti stringhe di dichiarazione unit: `px`, `in`, `cm`, `pt`.  
  
 `px` (impostazione predefinita) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` pollici; in 1 = = 96 px  
  
 `cm` centimetri; 1cm==(96/2.54) px  
  
 `pt` punti; 1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MinHeight"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.MinHeightProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MinHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MinHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MinHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.MinHeight" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidth">
      <MemberSignature Language="C#" Value="public double MinWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MinWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property MinWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MinWidth { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MinWidth : double with get, set" Usage="System.Windows.FrameworkElement.MinWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Recupera o imposta il vincolo di larghezza minima dell'elemento.</summary>
        <value>Larghezza minima dell'elemento, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. Il valore predefinito è 0,0. Può essere qualsiasi valore maggiore o uguale a 0,0. Tuttavia, <see cref="F:System.Double.PositiveInfinity" /> e <see cref="F:System.Double.NaN" /> non sono validi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo è uno dei tre proprietà in <xref:System.Windows.FrameworkElement> che specificano le informazioni sulla larghezza.  Gli altri due <xref:System.Windows.FrameworkElement.Width%2A> e <xref:System.Windows.FrameworkElement.MaxWidth%2A>.  Se si verifica un conflitto tra questi valori, l'ordine di applicazione per determinare la larghezza effettiva è primo <xref:System.Windows.FrameworkElement.MinWidth%2A> quindi deve essere presa in considerazione <xref:System.Windows.FrameworkElement.MaxWidth%2A>e infine se ognuno di questi si trovano all'interno dei limiti definiti, <xref:System.Windows.FrameworkElement.Width%2A>.  
  
 Le restrizioni di valore per il <xref:System.Double> valore vengono applicati da una <xref:System.Windows.ValidateValueCallback> meccanismo. Se si prova a impostare un valore non valido, viene generata un'eccezione in fase di esecuzione.  
  
<a name="xamlAttributeUsage_MinWidth"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object MinWidth="double"/>  
- or -  
<object MinWidth="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MinWidth"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *double*  
 <xref:System.Double>  
  
 Rappresentazione di stringa di un <xref:System.Double> valore uguale o maggiore di 0,0. Ciò viene interpretato come un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] misurazione. Le stringhe non necessario includere in modo esplicito i separatori decimali. Ad esempio un valore di `1` è accettabile.  
  
 Lo stesso <xref:System.Double> si applicano le restrizioni dell'intervallo come indicato nella sezione relativa al valore di proprietà.  
  
 *qualifiedDouble*  
 Oggetto *doppie* come descritto in precedenza, seguito da una delle seguenti stringhe di dichiarazione unit: `px`, `in`, `cm`, `pt`.  
  
 `px` (impostazione predefinita) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` pollici; in 1 = = 96 px  
  
 `cm` centimetri; 1cm==(96/2.54) px  
  
 `pt` punti; 1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MinWidth"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.MinWidthProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MinWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MinWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MinWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.MinWidth" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public override sealed bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="frameworkElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">Direzione dello spostamento dello stato attivo, sotto forma di valore dell'enumerazione.</param>
        <summary>Sposta lo stato attivo da questo elemento a un altro elemento in una direzione di attraversamento specificata.</summary>
        <returns>Restituisce <see langword="true" /> se lo stato attivo viene spostato correttamente; <see langword="false" /> se l'elemento di destinazione nella direzione specificata non esiste o non è stato possibile spostarvi lo stato attivo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esegue l'override di questa implementazione <xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=nameWithType> ed esegue il sealing il metodo.  
  
   
  
## Examples  
 L'esempio seguente implementa un gestore che gestisce diversi input di pulsante. Ogni pulsante rappresenta un possibile <xref:System.Windows.Input.FocusNavigationDirection>. Il gestore tiene traccia dell'elemento con lo stato attivo della tastiera corrente e chiama <xref:System.Windows.FrameworkElement.MoveFocus%2A> su quell'elemento, specificando l'oggetto appropriato <xref:System.Windows.Input.FocusNavigationDirection> come l'inizializzazione per il <xref:System.Windows.Input.TraversalRequest> parametro di tipo specificato.  
  
 [!code-csharp[FocusSample#FocusSampleMoveFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#focussamplemovefocus)]
 [!code-vb[FocusSample#FocusSampleMoveFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#focussamplemovefocus)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.FrameworkElement.Name" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IFrameworkInputElement.Name</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Markup.DesignerSerializationOptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.Windows.Markup.DesignerSerializationOptions(System.Windows.Markup.DesignerSerializationOptions.SerializeAsAttribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome identificativo dell'elemento. Il nome fornisce un riferimento, in modo che il code-behind, ad esempio il codice di un gestore eventi, possa fare riferimento a un elemento di markup dopo la sua creazione durante l'elaborazione tramite un processore di [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</summary>
        <value>Nome dell'elemento. Il valore predefinito è una stringa vuota.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'uso più comune di questa proprietà consiste nello specificare un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] nome dell'elemento come un attributo nel markup.  
  
 Questa proprietà fornisce essenzialmente una proprietà di praticità a livello di framework WPF per impostare il [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] [direttiva X:Name](~/docs/framework/xaml-services/x-name-directive.md).  
  
 I nomi devono essere univoci all'interno di un ambito dei nomi. Per altre informazioni, vedere [NameScope XAML WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 Ottenere un <xref:System.Windows.FrameworkElement.Name%2A> se si siano creando gli elementi nel codice non è comune. Se si dispone già di riferimento appropriato nel codice, è possibile chiamare solo metodi e proprietà sull'elemento di riferimento e non sarà in genere necessario il <xref:System.Windows.FrameworkElement.Name%2A>. È un'eccezione se il <xref:System.Windows.FrameworkElement.Name%2A> stringa ha un significato aggiuntivo, ad esempio se è utile visualizzare tale nome nel [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]. Impostazione di un <xref:System.Windows.FrameworkElement.Name%2A> dal code-behind se originale <xref:System.Windows.FrameworkElement.Name%2A> è stata impostata dal markup inoltre non è consigliata e la modifica della proprietà dopo il caricamento di [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] non modificherà il riferimento all'oggetto originale. I riferimenti agli oggetti vengono creati solo quando i NameScope sottostanti vengono creati in modo esplicito durante l'analisi. È necessario chiamare espressamente <xref:System.Windows.FrameworkElement.RegisterName%2A> per rendere effettiva una modifica per il <xref:System.Windows.FrameworkElement.Name%2A> proprietà di un elemento già caricato.  
  
 Un rilevanti caso in cui l'impostazione <xref:System.Windows.FrameworkElement.Name%2A> dal codice è importante sia quando la registrazione dei nomi per gli elementi storyboard verrà eseguita in, in modo che vi possano far riferimento in fase di esecuzione. Prima di poter registrare un nome, potrebbe essere necessario anche creare un'istanza e assegnare un <xref:System.Windows.NameScope> istanza. Vedere la sezione di esempio, oppure [Cenni preliminari sugli storyboard](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).  
  
 L'impostazione <xref:System.Windows.FrameworkElement.Name%2A> dal codice ha limitato le applicazioni, ma il recupero di un elemento <xref:System.Windows.FrameworkElement.Name%2A> è più comune. Uno scenario particolare è un'applicazione che supporta un modello di navigazione in cui le pagine vengono ricaricate all'applicazione e il codice in fase di esecuzione non è necessariamente definito per la pagina code-behind. Il metodo di utilità <xref:System.Windows.FrameworkElement.FindName%2A>, disponibile da qualsiasi <xref:System.Windows.FrameworkElement>, può individuare qualsiasi elemento in base <xref:System.Windows.FrameworkElement.Name%2A> nell'albero logico per questo elemento, la ricerca in modo ricorsivo la struttura ad albero in base alle esigenze. Oppure è possibile usare la <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> metodo statico dei <xref:System.Windows.LogicalTreeHelper>, che accetta anche un <xref:System.Windows.FrameworkElement.Name%2A> stringa come argomento.  
  
 In genere usato elementi radice (<xref:System.Windows.Window>, <xref:System.Windows.Controls.Page> ad esempio) implementano l'interfaccia <xref:System.Windows.Markup.INameScope>. Le implementazioni di questa interfaccia devono imporre che i nomi di essere non ambigua nel proprio ambito. Elementi radice che definiscono questa interfaccia anche definiscono i limiti di comportamento namescope per tutti i relativi [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)].  
  
 Il <xref:System.Windows.FrameworkElement.Name%2A> proprietà funge anche da un identificatore per gli altri processi. Ad esempio, il [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] verrà usato il modello di automazione <xref:System.Windows.FrameworkElement.Name%2A> come AutomationId per client e provider.  
  
 I valori stringa utilizzati per <xref:System.Windows.FrameworkElement.Name%2A> presentano alcune restrizioni, come imposto dal sottostante [direttiva X:Name](~/docs/framework/xaml-services/x-name-directive.md) definiti dal [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] specifica. In particolare, un <xref:System.Windows.FrameworkElement.Name%2A> deve iniziare con una lettera o il carattere di sottolineatura (_) e deve contenere solo lettere, cifre o caratteri di sottolineatura. Per altre informazioni, vedere [NameScope XAML WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 <xref:System.Windows.FrameworkElement.Name%2A> è una delle poche proprietà di dipendenza che non possono essere animate (<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> è `true` nei metadati), in quanto il nome stesso è fondamentale per specificare come destinazione un'animazione. Associazione dati un <xref:System.Windows.FrameworkElement.Name%2A> sia tecnicamente possibile, ma è uno scenario molto comune perché con associazione a dati <xref:System.Windows.FrameworkElement.Name%2A> non può essere utilizzato lo scopo principale della proprietà: per fornire un punto di connessione dell'identificatore per il code-behind.  
  
<a name="dependencyPropertyInfo_Name"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.NameProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>|  
  
   
  
## Examples  
 L'esempio seguente imposta la <xref:System.Windows.FrameworkElement.Name%2A> proprietà nel codice e quindi registra il nome nell'oggetto appena creato <xref:System.Windows.NameScope> chiamando <xref:System.Windows.FrameworkElement.RegisterName%2A>. La tecnica illustrata di seguito è un requisito per l'animazione con gli storyboard, perché gli storyboard richiedono l'indirizzamento mediante la <xref:System.Windows.FrameworkElement.Name%2A>e non possono essere assegnati dal riferimento all'oggetto.  
  
 [!code-csharp[animateHeight_procedural#FEName](~/samples/snippets/csharp/VS_Snippets_Wpf/animateHeight_procedural/CSharp/AnimatedHeightExample.cs#fename)]
 [!code-vb[animateHeight_procedural#FEName](~/samples/snippets/visualbasic/VS_Snippets_Wpf/animateHeight_procedural/visualbasic/animatedheightexample.vb#fename)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty NameProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty NameProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.NameProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NameProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ NameProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable NameProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.NameProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.Name" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnApplyTemplate">
      <MemberSignature Language="C#" Value="public virtual void OnApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnApplyTemplate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnApplyTemplate();" />
      <MemberSignature Language="F#" Value="abstract member OnApplyTemplate : unit -&gt; unit&#xA;override this.OnApplyTemplate : unit -&gt; unit" Usage="frameworkElement.OnApplyTemplate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>In caso di override in una classe derivata, viene richiamato ogni volta che il codice dell'applicazione o i processi interni chiamano <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita.  
  
 I modelli sono la sezione di completato struttura ad albero visuale un elemento che deriva dalla proprietà del modello di un <xref:System.Windows.Style> applicato per l'elemento. Per altre informazioni, vedere [Applicazione di stili e modelli](~/docs/framework/wpf/controls/styling-and-templating.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Le classi derivate di <see cref="T:System.Windows.FrameworkElement" /> può usare questo metodo come una notifica per un'ampia gamma di scenari possibili: 
-È possibile chiamare la propria implementazione di codice che compila il resto della struttura ad albero visuale elemento.  
  
-È possibile eseguire codice cui si basa la struttura ad albero visuale da modelli applicati, ad esempio ottenere riferimenti agli elementi denominati proveniente da un modello.  
  
-È possibile introdurre i servizi che ha senso solo a esistere al termine dell'albero degli elementi visivi dai modelli.  
  
-È possibile impostare gli Stati e le proprietà degli elementi all'interno del modello che dipendono da altri fattori. Ad esempio, i valori delle proprietà potrebbero essere individuabile solo se si conosce l'elemento padre, o quando si deriva una specifica classe Usa un modello comune.  
  
Gli implementatori devono chiamare sempre l'implementazione di base prima la propria implementazione. <see cref="T:System.Windows.FrameworkElement" /> ha a sua non volta alcun valore predefinito potrebbe essere l'implementazione, ma classi coinvolte.  
  
 <see cref="T:System.Windows.Controls.Control" /> offre un override simile, <see cref="M:System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuClosing (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuClosing(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuClosing (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuClosing(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuClosing : System.Windows.Controls.ContextMenuEventArgs -&gt; unit&#xA;override this.OnContextMenuClosing : System.Windows.Controls.ContextMenuEventArgs -&gt; unit" Usage="frameworkElement.OnContextMenuClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Fornisce i dati sull'evento.</param>
        <summary>Richiamato ogni qualvolta un evento indirizzato <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> non gestito raggiunge questa classe nella relativa route. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. È comunque necessario chiamare l'implementazione di base nel caso in cui una classe intermedia nell'ereditarietà ha implementato questo metodo.  
  
 Lo scopo di questo metodo è un po' come [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate con un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché l'evento indirizzato può essere generato da un elemento figlio, non necessariamente l'elemento che richiama i gestori, in modo che l'implementazione dovrà eseguire origine degli argomenti dell'evento le proprietà in considerazione (e non deve tentare di generare nuovamente l'evento nella maggior parte dei casi). Le sottoclassi di <xref:System.Windows.FrameworkElement> può scegliere di chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route. Uno scenario di potenziale prevede accettano gli argomenti dell'evento e deliberatamente contrassegnare l'evento come gestito.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuOpening (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuOpening(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuOpening (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuOpening(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuOpening : System.Windows.Controls.ContextMenuEventArgs -&gt; unit&#xA;override this.OnContextMenuOpening : System.Windows.Controls.ContextMenuEventArgs -&gt; unit" Usage="frameworkElement.OnContextMenuOpening e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.RoutedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Richiamato ogni qualvolta un evento indirizzato <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> non gestito raggiunge questa classe nella relativa route. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. È comunque necessario chiamare l'implementazione di base nel caso in cui una classe intermedia nell'ereditarietà ha implementato questo metodo.  
  
 Lo scopo di questo metodo è un po' come [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate con un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché l'evento indirizzato può essere generato da un elemento figlio, non necessariamente l'elemento che richiama i gestori, in modo che l'implementazione dovrà eseguire origine degli argomenti dell'evento le proprietà in considerazione (e non deve tentare di generare nuovamente l'evento nella maggior parte dei casi). Le sottoclassi di <xref:System.Windows.FrameworkElement> può scegliere di chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route. Uno scenario di potenziale prevede accettano gli argomenti dell'evento e deliberatamente contrassegnare l'evento come gestito.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="frameworkElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.RoutedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Richiamato ogni qualvolta un evento <see cref="E:System.Windows.UIElement.GotFocus" /> non gestito raggiunge questo elemento nella relativa route.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A differenza di altri in * i metodi esposti dagli elementi di base, <xref:System.Windows.FrameworkElement.OnGotFocus%2A> dispone di un'implementazione predefinita. In particolare, dispone di un'implementazione che esegue l'override dell'implementazione null nel livello successivo dell'elemento di base verso il basso, <xref:System.Windows.UIElement.OnGotFocus%2A>. Quando viene richiamato, <xref:System.Windows.FrameworkElement.OnGotFocus%2A> imposta il comportamento appropriato dello stato attivo su questo elemento nei casi in cui l'evento ha origine dall'elemento corrente a causa dello stato attivo della tastiera. Il <xref:System.Windows.FrameworkElement.OnGotFocus%2A> gestore non contrassegna gli argomenti dell'evento come gestito, anche quando lo stato attivo è impostato per l'elemento corrente. Se l'origine dell'evento è stato un altro elemento dell'albero (non l'elemento corrente), il gestore non esegue alcuna operazione.  
  
 È possibile eseguire l'override di questo metodo per modificare il comportamento dello stato attivo predefinito sull'elemento, ma tenere presente che la modifica di comportamento dello stato attivo in questo modo può essere effettuata migliore non consentendo l'elemento essere attivabile e a tutti (vedere <xref:System.Windows.UIElement.Focusable%2A>).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Se si prevede di contrassegnare l'evento come gestito gli argomenti, è necessario conoscere le conseguenze sulla gestione degli eventi in altri elementi padre nell'albero degli elementi. Poiché questo gestore agisce su un evento con un routing di bubbling, se si imposta lo stato attivo corrente <paramref name="sender" /> per ogni evento di argomenti potrebbero non essere appropriati. Potrebbe essere necessario passare a un elemento figlio composito o a un elemento padre, a seconda della composizione di determinati controlli lo stato attivo. Di conseguenza il contrassegno di un evento dello stato attivo come gestito è consigliato solo se l'intero della struttura visiva al routing tramite l'evento fa parte della composizione di un controllo che è stato creato.</para>
        </block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="OnInitialized">
      <MemberSignature Language="C#" Value="protected virtual void OnInitialized (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitialized(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInitialized (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInitialized(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInitialized : EventArgs -&gt; unit&#xA;override this.OnInitialized : EventArgs -&gt; unit" Usage="frameworkElement.OnInitialized e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.RoutedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Windows.FrameworkElement.Initialized" />. Questo metodo viene richiamato ogni volta che la proprietà <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> è impostata internamente su <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo particolare in * metodo non è un hook del gestore di classe. Né esattamente segue consolidata [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] su * convenzione di metodo che l'evento corrispondente potrebbe essere evitato eseguendo l'override di questo metodo e non si chiama l'implementazione di base.  
  
 Si noti che il <xref:System.Windows.FrameworkElement.IsInitialized%2A> proprietà è di sola lettura, pertanto non è possibile impostare <xref:System.Windows.FrameworkElement.IsInitialized%2A> per forzare il comportamento dell'inizializzazione. Impostazione dello stato di inizializzazione deve essere eseguita solo dal [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>L'implementazione predefinita di questo metodo virtuale genera l'evento descritto sopra. Per mantenere questo comportamento, è necessario che gli override chiamino l'implementazione di base. Se non si riesce a chiamare l'implementazione di base, non solo non verrà generato il <see cref="E:System.Windows.FrameworkElement.Initialized" /> eventi in genere previsto da un <see cref="T:System.Windows.FrameworkElement" /> classe derivata, ma si elimineranno anche due importanti dello stile e del tema stile operazioni di inizializzazione implementata da questa implementazione di base.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.OnApplyTemplate" />
        <altmember cref="E:System.Windows.FrameworkElement.Initialized" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected override void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="frameworkElement.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dati dell'evento che descrivono la proprietà modificata, nonché i valori vecchio e nuovo.</param>
        <summary>Richiamato ogni volta che viene aggiornato il valore effettivo di qualsiasi proprietà di dipendenza in <see cref="T:System.Windows.FrameworkElement" />. La proprietà di dipendenza specifica modificata viene indicata nel parametro degli argomenti. Esegue l'override di <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è in genere rileva le modifiche alle proprietà o le convalide. Invece è destinato alle modifiche del modello generale di invalidamento se sono noto che alcune informazioni sulle classificazioni a livello delle proprietà.  
  
 Questo metodo viene richiamato potenzialmente più volte nel corso della durata di un oggetto. Pertanto, è possibile ottenere prestazioni migliorate se esegue l'override di metadati di proprietà specifiche e quindi collegarli <xref:System.Windows.CoerceValueCallback> o <xref:System.Windows.PropertyChangedCallback> funzioni per le singole proprietà. Questo metodo, tuttavia, è consigliabile se un <xref:System.Windows.FrameworkElement> include un numero significativo di proprietà di dipendenza correlata al valore, o se ne include la logica, ad esempio il comportamento di rendering, che deve essere ripetuto per molti casi di convalide di proprietà correlati.  
  
 Si noti che vi sia un nome identico `OnPropertyChanged` metodo con una firma diversa (tipo di parametro non <xref:System.ComponentModel.PropertyChangedEventArgs>) che possono essere visualizzati in una serie di classi. Che `OnPropertyChanged` viene usato per le notifiche di oggetti dati e fa parte del contratto per <xref:System.ComponentModel.INotifyPropertyChanged>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Chiamare sempre l'implementazione di base, come prima operazione nell'implementazione. Errore eseguire questa operazione disabiliterà in modo significativo l'intera [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] sistema di proprietà, che fa sì che valori non corretti da segnalare. Le specifiche <see cref="T:System.Windows.FrameworkElement" /> implementazione è anche responsabile della gestione stato appropriato per un'ampia gamma di proprietà che influiscono sull'interfaccia utente visibile. Ad esempio invalidare la struttura ad albero visuale in base alle modifiche allo stile al momento appropriato.</para>
        </block>
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
        <altmember cref="T:System.Windows.PropertyChangedCallback" />
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnRenderSizeChanged (System.Windows.SizeChangedInfo sizeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo sizeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnRenderSizeChanged (sizeInfo As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ sizeInfo);" />
      <MemberSignature Language="F#" Value="override this.OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit" Usage="frameworkElement.OnRenderSizeChanged sizeInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sizeInfo" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="sizeInfo">Dettagli delle dimensioni nuove e precedenti interessate dalla modifica.</param>
        <summary>Genera l'evento <see cref="E:System.Windows.FrameworkElement.SizeChanged" />, usando le informazioni specificate come parte degli eventuali dati dell'evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo esegue l'override di <xref:System.Windows.UIElement.OnRenderSizeChanged%2A>. Se si chiama questo metodo sarà necessario reimpostare i <xref:System.Windows.FrameworkElement.ActualWidth%2A> proprietà, il <xref:System.Windows.FrameworkElement.ActualHeight%2A> proprietà o entrambe, a seconda di ciò che viene specificato come modificato negli argomenti forniti e verranno sempre l'evento viene generato.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Si esegue l'override di questo metodo per gli scenari di layout tipico. Il sistema di layout opera in modo asincrono intenzionalmente per garantire che tutte le possibili del layout Disponi e casi di misura vengono presi in considerazione. Eseguire l'override del sistema di layout <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> e <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> vengono in genere sufficiente per tutte le personalizzazioni di layout obbligatorie. <see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> viene esposta come metodo virtuale. È possibile eseguire l'override <see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> per correggere i casi eccezionali in cui una modifica di comportamento in fase di esecuzione relative a eventi combinati con il controllo di input ricomposizione nella risposta potrebbe fornire informazioni sul layout non accurati.  
  
Si può comunque eseguire l'override di questo metodo nelle classi derivate (è protetto ma non sealed). Chiamare sempre l'implementazione di base per mantenere il comportamento indicato in precedenza, a meno che non si hanno motivi molto specifici per la disabilitazione del comportamento predefinito per il rendering a livello di framework WPF. Impossibile generare il <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> evento causerà il comportamento di layout non standard se si usa l'implementazione di sistema di layout a livello di framework WPF standard.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStyleChanged (System.Windows.Style oldStyle, System.Windows.Style newStyle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStyleChanged(class System.Windows.Style oldStyle, class System.Windows.Style newStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStyleChanged (oldStyle As Style, newStyle As Style)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStyleChanged(System::Windows::Style ^ oldStyle, System::Windows::Style ^ newStyle);" />
      <MemberSignature Language="F#" Value="abstract member OnStyleChanged : System.Windows.Style * System.Windows.Style -&gt; unit&#xA;override this.OnStyleChanged : System.Windows.Style * System.Windows.Style -&gt; unit" Usage="frameworkElement.OnStyleChanged (oldStyle, newStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldStyle" Type="System.Windows.Style" />
        <Parameter Name="newStyle" Type="System.Windows.Style" />
      </Parameters>
      <Docs>
        <param name="oldStyle">Stile precedente.</param>
        <param name="newStyle">Stile nuovo.</param>
        <summary>Richiamato quando lo stile utilizzato per questo elemento viene modificato, invalidando il layout.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo ha un'implementazione predefinita che consente di impostare un flag interno che indica la condizione di stile di visualizzazione modificato.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Non è in genere necessario eseguire l'override di questo metodo. Qualsiasi modifica a uno stile che include una misura o disposizione modifica attiverà già un altro ciclo di rendering, presupponendo un'implementazione tipica delle <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />  /  <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />, o i valori predefiniti. Esegue l'override di <see cref="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" /> potrebbe essere appropriata se le <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />  /  <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> implementazioni prevedono l'ottimizzazione o che supportano gli aggiornamenti parziali, ma ancora si desidera applicare le modifiche apportate agli stili in modo più diretto. (Gli aggiornamenti parziali sarebbe un tentativo di evitare più chiamate incrementale al <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> e <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> su qualsiasi elemento figlio).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipClosing (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipClosing(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipClosing (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipClosing(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnToolTipClosing : System.Windows.Controls.ToolTipEventArgs -&gt; unit&#xA;override this.OnToolTipClosing : System.Windows.Controls.ToolTipEventArgs -&gt; unit" Usage="frameworkElement.OnToolTipClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Fornisce i dati sull'evento.</param>
        <summary>Richiamato ogni qualvolta un evento indirizzato <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> non gestito raggiunge questa classe nella relativa route. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. È comunque necessario chiamare l'implementazione di base nel caso in cui una classe intermedia nell'ereditarietà ha implementato questo metodo.  
  
 Lo scopo di questo metodo è un po' come [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate con un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché l'evento indirizzato può essere generato da un elemento figlio, non necessariamente l'elemento che richiama i gestori, in modo che l'implementazione dovrà eseguire origine degli argomenti dell'evento le proprietà in considerazione (e non deve tentare di generare nuovamente l'evento nella maggior parte dei casi). Le sottoclassi di <xref:System.Windows.FrameworkElement> può scegliere di chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route. Uno scenario di potenziale prevede accettano gli argomenti dell'evento e deliberatamente contrassegnare l'evento come gestito.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipOpening (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipOpening(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipOpening (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipOpening(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnToolTipOpening : System.Windows.Controls.ToolTipEventArgs -&gt; unit&#xA;override this.OnToolTipOpening : System.Windows.Controls.ToolTipEventArgs -&gt; unit" Usage="frameworkElement.OnToolTipOpening e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Fornisce i dati sull'evento.</param>
        <summary>Richiamato ogni qualvolta l'evento indirizzato <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> raggiunge questa classe nella relativa route. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. È comunque necessario chiamare l'implementazione di base nel caso in cui una classe intermedia nell'ereditarietà ha implementato questo metodo.  
  
 Lo scopo di questo metodo è un po' come [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate con un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché l'evento indirizzato può essere generato da un elemento figlio, non necessariamente l'elemento che richiama i gestori, in modo che l'implementazione dovrà eseguire origine degli argomenti dell'evento le proprietà in considerazione (e non deve tentare di generare nuovamente l'evento nella maggior parte dei casi). Le sottoclassi di <xref:System.Windows.FrameworkElement> può scegliere di chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route. Uno scenario di potenziale prevede accettano gli argomenti dell'evento e deliberatamente contrassegnare l'evento come gestito per abbreviare la route.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="frameworkElement.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">Elemento padre precedente. Può essere <see langword="null" /> per indicare che l'elemento prima non aveva un'entità principale visuale.</param>
        <summary>Viene richiamato ogni volta che l'entità principale di questo elemento nella struttura ad albero visuale viene modificata. Esegue l'override di <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La struttura ad albero visuale è potenzialmente diversa dall'albero logico quanto include gli elementi che non vengono visualizzati in modo visivo, ad esempio raccolte e si espande alcuni elementi in base alla composizione di tema e uno stile. Per altre informazioni, vedere [Strutture ad albero in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>L'implementazione predefinita di questo metodo virtuale esegue una query per il nuovo elemento padre, genera vari eventi di inizializzazione e imposta i flag interni sullo stato di inizializzazione di <see cref="T:System.Windows.FrameworkElement" /> come appropriato. Infine, chiama le implementazioni di base successive come dichiarato da <see cref="T:System.Windows.UIElement" />, che a sua volta chiama relativa base nel <see cref="T:System.Windows.Media.Visual" />. Chiamare sempre l'implementazione di base per mantenere questo comportamento, in caso contrario, il comportamento di struttura ad albero dell'elemento per questo elemento quando dichiarato come elemento figlio di un altro elemento potrebbe non essere come previsto.  
  
Esistente pochi [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] classi l'override del metodo, ad esempio: <see cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />, <see cref="M:System.Windows.Controls.ListBoxItem.OnVisualParentChanged(System.Windows.DependencyObject)" />. Lo scenario più comune consiste nell'imporre che il nuovo elemento padre deve essere un tipo particolare. Questo potrebbe comportare la generazione di un'eccezione se il nuovo elemento padre non è stato possibile alcune modalità di verifica del tipo. Nelle implementazioni per gli elementi dell'elenco e voci di menu, che non avranno alcun significato all'esterno di un elemento padre visual cui appartiene una raccolta appropriata per l'archiviazione nel presente una versione specializzata di questo scenario. Si noti che questi casi non necessariamente generare eccezioni, perché potrebbero essere presenti scenari che si basano su assegnazione di elementi che vengono momentaneamente senza padri "normali".  
  
Questo metodo viene sottoposto a override anche in determinati elementi che sono in genere l'elemento radice, ad esempio <see cref="T:System.Windows.Window" />. Un altro caso costituito da elementi che corrispondono all'elemento radice evidente nel markup, ma che genera automaticamente un'infrastruttura più grande in un albero logico compilato (ad esempio <see cref="T:System.Windows.Controls.Page" />). Il <see cref="T:System.Windows.Window" /> e <see cref="T:System.Windows.Controls.Page" /> implementazioni di bloccare intenzionalmente il metodo.</para>
        </block>
        <altmember cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyle">
      <MemberSignature Language="C#" Value="public bool OverridesDefaultStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesDefaultStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesDefaultStyle As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesDefaultStyle { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OverridesDefaultStyle : bool with get, set" Usage="System.Windows.FrameworkElement.OverridesDefaultStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Recupera o imposta un valore che indica se l'elemento incorpora proprietà di stile dagli stili del tema.</summary>
        <value>
          <see langword="true" /> se questo elemento non utilizza le proprietà di stile del tema; tutte le proprietà che hanno origine dallo stile provengono dagli stili dell'applicazione locale e le proprietà di stile del tema non sono applicabili. <see langword="false" /> se vengono applicati prima gli stili dell'applicazione, quindi gli stili del tema per le proprietà non specificamente impostate negli stili dell'applicazione. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'uso più comune di questa proprietà è un indiretto all'interno di setter di uno stile che include uno stile a tema.  
  
> [!IMPORTANT]
>  Se si imposta <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> a `true` su un controllo, si annullerà il modello di controllo predefinito fornito dagli stili del tema. Tale modello di controllo in genere include il Visualizzatore di contenuto e altri elementi composti che forniscono base [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] funzionalità e la visualizzazione per il controllo. Se si desidera che il controllo per continuare a supportare le stesse funzionalità gli stili del tema predefinito, è necessario fornire uno stile alternativo con un modello di controllo che consente di replicare la stessa struttura. Per altre informazioni, vedere [Cenni preliminari sulla modifica di controlli](~/docs/framework/wpf/controls/control-authoring-overview.md).  
  
<a name="dependencyPropertyInfo_OverridesDefaultStyle"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.OverridesDefaultStyleProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OverridesDefaultStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OverridesDefaultStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.OverridesDefaultStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OverridesDefaultStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OverridesDefaultStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OverridesDefaultStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.OverridesDefaultStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ Parent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.DependencyObject" Usage="System.Windows.FrameworkElement.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'elemento padre logico di questo elemento.</summary>
        <value>Elemento padre logico di questo elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.Parent%2A> potrebbe essere `null` nei casi in cui un elemento è stata creata un'istanza, ma non è collegato a un albero logico che si connette l'elemento radice a livello di pagina o l'oggetto applicazione.  
  
 Si noti che l'elemento padre logico di un elemento può essere modificato a seconda delle funzionalità dell'applicazione, e mantenere il valore di questa proprietà non rifletterà le modifiche. È in genere deve ottenere il valore immediatamente prima che ti serve.  
  
 Visualizzare [strutture ad albero in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md) per altre informazioni sull'attraversamento dell'albero logico e per gli scenari in cui l'utilizzo <xref:System.Windows.FrameworkElement.Parent%2A> come tecnica dell'elemento padre l'individuazione è appropriato.  
  
 Il motore della proprietà potrà ricalcolare tutti i valori di proprietà di un elemento quando viene riassociato come padre, perché alcune proprietà ereditano valori attraverso l'albero logico. Il <xref:System.Windows.FrameworkElement.DataContext%2A> che applica le associazioni possono essere modificato anche quando gli elementi vengono riassociate come elementi padre.  
  
 Modifica padre di un elemento viene in genere eseguita mediante manipolazione di raccolte, utilizzando dedicato aggiungere o rimuovere metodi, o tramite l'impostazione delle proprietà del contenuto degli elementi.  
  
 Lo scenario più comune per l'uso di <xref:System.Windows.FrameworkElement.Parent%2A> proprietà consiste nell'ottenere un riferimento, quindi ottenere varie <xref:System.Windows.FrameworkElement> i valori delle proprietà dall'elemento padre. Per i modelli, il <xref:System.Windows.FrameworkElement.Parent%2A> del modello alla fine saranno `null`. Per ottenere dopo questo passaggio e passare all'albero logico in cui viene fatto applicato il modello, usare <xref:System.Windows.FrameworkElement.TemplatedParent%2A>.  
  
 Si noti che questa proprietà non indica elementi padre di struttura ad albero visuale nei casi in cui si va da elementi padre dell'albero logico. Elementi padre di struttura ad albero visuale non sono in genere rilevanti per i casi di applicazioni generali ma siano gli elementi padre desiderato per alcuni casi di livello visual. Vedere <xref:System.Windows.Media.VisualTreeHelper>.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il codice che verifica la presenza di un elemento e quindi Usa i valori delle proprietà dall'elemento padre per impostare le proprietà dell'elemento figlio in modo che corrispondano. In questo caso, queste sono proprietà che interessano la dimensione del rendering.  
  
 [!code-csharp[GeometryDesigner#FEParentProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryDesigner/CSharp/Window1.xaml.cs#feparentproperty)]
 [!code-vb[GeometryDesigner#FEParentProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometryDesigner/visualbasic/window1.xaml.vb#feparentproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.TemplatedParent" />
        <altmember cref="T:System.Windows.LogicalTreeHelper" />
      </Docs>
    </Member>
    <Member MemberName="ParentLayoutInvalidated">
      <MemberSignature Language="C#" Value="protected internal virtual void ParentLayoutInvalidated (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void ParentLayoutInvalidated(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub ParentLayoutInvalidated (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void ParentLayoutInvalidated(System::Windows::UIElement ^ child);" />
      <MemberSignature Language="F#" Value="abstract member ParentLayoutInvalidated : System.Windows.UIElement -&gt; unit&#xA;override this.ParentLayoutInvalidated : System.Windows.UIElement -&gt; unit" Usage="frameworkElement.ParentLayoutInvalidated child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child">Elemento figlio che segnala la modifica.</param>
        <summary>Supporta implementazioni di layout incrementali in sottoclassi specializzate di <see cref="T:System.Windows.FrameworkElement" />. <see cref="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" /> viene richiamato quando un elemento figlio ha invalidato una proprietà contrassegnata nei metadati per indicare che influisce sui passaggi di misurazione o disposizione dell'elemento padre durante il layout.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se questo elemento include un elemento figlio in cui è stata invalidata alcune proprietà e la proprietà è stata contrassegnata come <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> o <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> nei metadati della proprietà durante la registrazione, questo metodo viene richiamato. La chiamata al metodo invia una notifica all'elemento padre l'elemento figlio specifico deve essere misurato nuovamente se questo elemento supporta l'aggiornamento (incrementale) parziale del layout.  
  
 Per impostazione predefinita, <xref:System.Windows.FrameworkElement> non supporta il layout incrementale e nel <xref:System.Windows.FrameworkElement> classe questo metodo presenta alcuna implementazione predefinita. Lo scenario in cui si esegue l'override di questo metodo potrebbe essere necessario non è comune, perché richiede di modificare il comportamento del sistema di layout predefinito.  
  
 Uno scenario di implementazione di esempio potrebbe essere se una classe che dispone di limitazioni dei tipi per gli elementi figlio possibili che sono significativamente più restrittive rispetto al sistema di layout a livello di framework WPF. A causa della natura di questi elementi personalizzati, le modifiche alle proprietà può essere rinviati deliberatamente quando si implementano un comportamento di layout personalizzato. Misura/Disponi override dei metodi, il passaggio di rendering che tentano di ottimizzare l'elemento figlio, ad esempio, può essere rinviati per determinati tipi di modifiche che normalmente comporterebbe un altro passaggio di layout.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public override sealed System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="frameworkElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">Direzione per la quale deve essere determinata una potenziale modifica dello stato attivo.</param>
        <summary>Determina il successivo elemento che riceverà lo stato attivo in relazione a questo elemento per una direzione dello spostamento dello stato attivo specificata, ma non sposta effettivamente lo stato attivo.</summary>
        <returns>Elemento successivo su cui verrebbe spostato lo stato attivo in caso di effettivo attraversamento dello stato attivo. Potrebbe restituire <see langword="null" /> se lo stato attivo non può essere spostato in relazione a questo elemento per la direzione specificata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.MoveFocus%2A> è il metodo correlato che effettivamente spostare lo stato attivo.  
  
   
  
## Examples  
 L'esempio seguente implementa un gestore che gestisce diversi input di pulsante, tutti i pulsanti che rappresenta un possibile <xref:System.Windows.Input.FocusNavigationDirection>. Il gestore tiene traccia dell'elemento con lo stato attivo della tastiera corrente e chiama <xref:System.Windows.FrameworkElement.PredictFocus%2A> su quell'elemento e specifica l'oggetto appropriato <xref:System.Windows.Input.FocusNavigationDirection> come l'inizializzazione per il <xref:System.Windows.Input.TraversalRequest> parametro di tipo specificato. Anziché spostarsi a tale elemento come <xref:System.Windows.FrameworkElement.MoveFocus%2A> procede, il gestore di modifica le dimensioni fisiche della destinazione stimato messa a fuoco per scopi di visualizzazione.  
  
 [!code-csharp[FocusSample#FEPredictFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#fepredictfocus)]
 [!code-vb[FocusSample#FEPredictFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#fepredictfocus)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Specificata per una delle seguenti direzioni in <see cref="T:System.Windows.Input.TraversalRequest" />: <see cref="F:System.Windows.Input.FocusNavigationDirection.Next" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.First" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Last" />. Queste direzioni non sono valide per <see cref="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />, ma lo sono per <see cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />.</exception>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="member this.RegisterName : string * obj -&gt; unit" Usage="frameworkElement.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">Nome da utilizzare per il mapping nome-oggetto specificato.</param>
        <param name="scopedElement">Oggetto per il mapping.</param>
        <summary>Fornisce una funzione di accesso che semplifica l'accesso al metodo di registrazione di <see cref="T:System.Windows.NameScope" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è un metodo pratico per chiamare il metodo <xref:System.Windows.NameScope.RegisterName%2A>. L'implementazione controllerà gli elementi padre successivi fino a individuare applicabile <xref:System.Windows.NameScope> implementazione, che viene calcolata eseguendo la ricerca di un elemento che implementa <xref:System.Windows.Markup.INameScope>. Per altre informazioni su ambiti dei nomi, vedere [NameScope XAML WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 La chiamata a <xref:System.Windows.FrameworkElement.RegisterName%2A> laborioso correttamente collegare gli storyboard per animazioni per le applicazioni create nel codice. Infatti, proprietà, una delle principali storyboard <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>, utilizza una ricerca in fase di esecuzione anziché essere in grado di accettare un riferimento a un elemento di destinazione. Questo vale anche se tale elemento è accessibile mediante un riferimento dal codice. Per altre informazioni sul motivo per cui è necessario registrare i nomi per le destinazioni di storyboard, vedere [Cenni preliminari sugli storyboard](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).  
  
   
  
## Examples  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/ScopeExample.cs#namescopeexample)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/scopeexample.vb#namescopeexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.NameScope.RegisterName(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void RemoveLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RemoveLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RemoveLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RemoveLogicalChild(System::Object ^ child);" />
      <MemberSignature Language="F#" Value="member this.RemoveLogicalChild : obj -&gt; unit" Usage="frameworkElement.RemoveLogicalChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child">Elemento da rimuovere.</param>
        <summary>Rimuove l'oggetto fornito dall'albero logico dell'elemento. <see cref="T:System.Windows.FrameworkElement" /> aggiorna i puntatori padre dell'albero logico interessato per mantenerlo sincronizzati con l'eliminazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare questo metodo per l'implementazione di insiemi per gli oggetti che rappresentano elementi figlio logici di un elemento. Questa operazione può essere eseguita nel getter o Setter, gestori di classi di `Changed` eventi, costruttori, o all'interno della raccolta di tipi se stessi.  
  
 Per gli autori di controlli, modificare l'albero logico a questo livello non è la procedura consigliata, a meno che nessuno dei modelli di contenuto della classe controllo di base forniti siano appropriati. È consigliabile a livello di creazione di una sottoclasse <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, e <xref:System.Windows.Controls.HeaderedItemsControl>. Queste classi forniscono un modello di contenuto con l'imposizione specifico di elementi figlio logici tramite dedicato [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], nonché il supporto per altre funzionalità generalmente utili in un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controllo, ad esempio lo stile tramite i modelli.  
  
   
  
## Examples  
 L'esempio seguente implementa un `Child` proprietà in una classe personalizzata <xref:System.Windows.FrameworkElement> che esegue la propria implementazione del livello visivo. Il setter della proprietà è progettato in modo che se il valore viene modificato, il valore precedente viene rimosso dall'albero logico, nonché una raccolta visuale specifico della classe. I valori vengono memorizzati nella cache e quindi viene aggiunto il nuovo valore di standard framework a livello logico dell'albero di WPF sia la raccolta visuale personalizzata.  
  
 [!code-csharp[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/CSharp/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]
 [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/visualbasic/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RequestBringIntoView">
      <MemberSignature Language="C#" Value="public event System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RequestBringIntoView As RequestBringIntoViewEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RequestBringIntoViewEventHandler ^ RequestBringIntoView;" />
      <MemberSignature Language="F#" Value="member this.RequestBringIntoView : System.Windows.RequestBringIntoViewEventHandler " Usage="member this.RequestBringIntoView : System.Windows.RequestBringIntoViewEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RequestBringIntoViewEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando <see cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" /> viene chiamato su questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento indica a un elemento padre <xref:System.Windows.Controls.ScrollViewer> (o una classe derivata) che l'elemento che genera il <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento deve essere reso visibile all'interno dell'area di scorrimento. Il <xref:System.Windows.Controls.ScrollViewer> quindi contrassegnerà la <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento come gestito, usando la gestione della classe dell'evento. In genere <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento dati debe marcar non gestiti da qualsiasi classe che consentono di controllare un'area di scorrimento o da qualsiasi istanza del gestore, perché in questo modo generava un'interferenza con l'obiettivo dell'elemento che ha chiamato <xref:System.Windows.FrameworkElement.BringIntoView%2A>.  
  
<a name="routedEventInfo_RequestBringIntoView"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.RequestBringIntoViewEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.RequestBringIntoViewEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
        <altmember cref="T:System.Windows.Controls.ScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="RequestBringIntoViewEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent RequestBringIntoViewEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent RequestBringIntoViewEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.RequestBringIntoViewEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RequestBringIntoViewEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ RequestBringIntoViewEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable RequestBringIntoViewEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.RequestBringIntoViewEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public System.Windows.ResourceDictionary Resources { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ResourceDictionary Resources" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Resources" />
      <MemberSignature Language="VB.NET" Value="Public Property Resources As ResourceDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResourceDictionary ^ Resources { System::Windows::ResourceDictionary ^ get(); void set(System::Windows::ResourceDictionary ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Resources : System.Windows.ResourceDictionary with get, set" Usage="System.Windows.FrameworkElement.Resources" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Markup.IHaveResources.Resources</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ResourceDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il dizionario risorse definite localmente.</summary>
        <value>Dizionario corrente definito localmente delle risorse, in cui ogni risorsa è accessibile in base alla chiave.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dizionari risorse che possono essere definiti completamente o parzialmente in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] vengono in genere creati jako prvek vlastnosti e sono in genere per l'elemento radice di qualsiasi pagina singola o per l'applicazione. Posizionando il dizionario risorse a questo livello rende più semplice trovare da singoli elementi figlio nella pagina (o da qualsiasi pagina, nel caso dell'applicazione). Nella maggior parte degli scenari di applicazione, è consigliabile che gli stili viene definita come elementi oggetto all'interno di un dizionario risorse, o essere definiti come risorse esterne in modo che la risorsa di stile intero può essere autonoma (questo approccio consente di progettazione separate le responsabilità di responsabilità degli sviluppatori, separando i file fisici che devono essere modificate).  
  
 Si noti che questa proprietà restituisce solo il dizionario risorse dichiarati direttamente all'interno di tale elemento. Ciò è diverso rispetto al processo di ricerca di risorse effettivi, in cui un elemento figlio può accedere a tutte le risorse definite in ogni elemento padre, la ricerca in modo ricorsivo verso l'alto.  
  
 Può anche essere richiamate dal codice dall'interno dell'insieme di risorse, ma tenere presente che le risorse create [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] indubbiamente non sarà possibile accedere fino a dopo <xref:System.Windows.FrameworkElement.Loaded> viene generato dall'elemento che dichiara il dizionario. In effetti, le risorse vengono analizzate in modo asincrono e non anche sul <xref:System.Windows.FrameworkElement.Loaded> evento è una garanzia che è possibile fare riferimento a un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] risorsa definita. Per questo motivo è consigliabile in genere solo accedere [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] risorse definite come parte del codice in fase di esecuzione o tramite altri [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] tecniche, ad esempio stili o i riferimenti all'estensione di risorsa per i valori di attributo. Quando si accede alle risorse tramite codice, è essenzialmente equivalente a un riferimento effettuato da [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 Sottostante <xref:System.Windows.ResourceDictionary> supporta i metodi necessari per aggiungere, rimuovere o eseguire una query sulle risorse dall'interno dell'insieme utilizzando il codice. Il <xref:System.Windows.FrameworkElement.Resources%2A> è possibile impostare per supportare lo scenario di sostituzione completa la raccolta di risorse di un elemento per ottenere un nuovo o diverso proprietà <xref:System.Windows.ResourceDictionary>.  
  
 Si noti che il [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] sintassi illustrata include un elemento per il <xref:System.Windows.ResourceDictionary>. Questo è un esempio di sintassi per raccolte implicite; un tag che rappresenta l'elemento della raccolta può essere omessa. Gli elementi che vengono aggiunte come elementi nella raccolta vengono invece specificati. Per altre informazioni sulle raccolte implicite e [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], vedere [XAML descrizione dettagliata della sintassi](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md). Un caso in cui un <xref:System.Windows.ResourceDictionary> sono ancora specificate in modo esplicito come un elemento è se si inserisce un dizionario unito, nel qual caso sono non presenti in genere elementi figlio per tale <xref:System.Windows.ResourceDictionary>. Per informazioni dettagliate, vedere [dizionari risorse uniti](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md).  
  
<a name="xamlPropertyElementUsage_Resources"></a>   
## <a name="xaml-property-element-usage"></a>Utilizzo della sintassi XAML per elementi proprietà  
  
```  
<object>  
  <object.Resources>  
    oneOrMoreResourceElements  
  </object.Resources>  
</object>  
```  
  
<a name="xamlValues_Resources"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *oneOrMoreResourceElements*  
 Uno o più elementi oggetto, ognuno dei quali definisce una risorsa. Ogni elemento di proprietà della risorsa all'interno di ciascun <xref:System.Windows.ResourceDictionary> deve avere un valore univoco per il [direttiva X:Key](~/docs/framework/xaml-services/x-key-directive.md), che funge da chiave univoca quando vengono recuperati valori dal <xref:System.Windows.ResourceDictionary>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Application.Resources" />
        <related type="Article" href="https://msdn.microsoft.com/library/1985cd45-f197-42d5-b75e-886add64b248">Attributo X:Key</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetBinding">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aggiunge un'associazione a questo elemento per la proprietà di dipendenza specificata.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression SetBinding (System.Windows.DependencyProperty dp, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression SetBinding(class System.Windows.DependencyProperty dp, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, path As String) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : System.Windows.DependencyProperty * string -&gt; System.Windows.Data.BindingExpression" Usage="frameworkElement.SetBinding (dp, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dp">Identifica la proprietà di destinazione in cui è necessario configurare l'associazione.</param>
        <param name="path">Nome della proprietà di origine o percorso della proprietà utilizzata per l'associazione.</param>
        <summary>Connette un'associazione a questo elemento in base al nome della proprietà di origine specificata come qualificazione del percorso all'origine dati.</summary>
        <returns>Registra le condizioni dell'associazione. Questo valore restituito può essere utile per il controllo degli errori.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è un metodo pratico per la chiamata <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, che consente di passare l'istanza corrente come il <xref:System.Windows.DependencyObject>e crea un nuovo <xref:System.Windows.Data.Binding> base fornito `path` parametro. Questa firma è più pratica, se si stabilisce un binding predefinito semplice. Se è necessario specificare alcuna proprietà di associazione per le condizioni non predefinito, o da usare una <xref:System.Windows.Data.MultiBinding> oppure <xref:System.Windows.Data.PriorityBinding>, è consigliabile usare il <xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29> firma.  
  
   
  
## Examples  
 L'esempio seguente imposta un'associazione utilizzando un percorso specifico.  
  
 [!code-csharp[BaseElementsSmorgasbord#SetBindingPath](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#setbindingpath)]
 [!code-vb[BaseElementsSmorgasbord#SetBindingPath](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#setbindingpath)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpressionBase SetBinding (System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpressionBase SetBinding(class System.Windows.DependencyProperty dp, class System.Windows.Data.BindingBase binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, binding As BindingBase) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpressionBase ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::Windows::Data::BindingBase ^ binding);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : System.Windows.DependencyProperty * System.Windows.Data.BindingBase -&gt; System.Windows.Data.BindingExpressionBase" Usage="frameworkElement.SetBinding (dp, binding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="binding" Type="System.Windows.Data.BindingBase" />
      </Parameters>
      <Docs>
        <param name="dp">Identifica la proprietà in corrispondenza della quale è necessario stabilire l'associazione.</param>
        <param name="binding">Rappresenta le specifiche del data binding.</param>
        <summary>Collega un'associazione a questo elemento in base all'oggetto di associazione specificato.</summary>
        <returns>Registra le condizioni dell'associazione. Questo valore restituito può essere utile per il controllo degli errori.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è un metodo pratico per la chiamata <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, che consente di passare l'istanza corrente come il <xref:System.Windows.DependencyObject>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFlowDirection">
      <MemberSignature Language="C#" Value="public static void SetFlowDirection (System.Windows.DependencyObject element, System.Windows.FlowDirection value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetFlowDirection(class System.Windows.DependencyObject element, valuetype System.Windows.FlowDirection value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetFlowDirection (element As DependencyObject, value As FlowDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetFlowDirection(System::Windows::DependencyObject ^ element, System::Windows::FlowDirection value);" />
      <MemberSignature Language="F#" Value="static member SetFlowDirection : System.Windows.DependencyObject * System.Windows.FlowDirection -&gt; unit" Usage="System.Windows.FrameworkElement.SetFlowDirection (element, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Windows.FlowDirection" />
      </Parameters>
      <Docs>
        <param name="element">Elemento che specifica una direzione di flusso.</param>
        <param name="value">Valore dell'enumerazione che specifica la direzione.</param>
        <summary>Imposta il valore della proprietà associata <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> per l'elemento specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo supporta la sintassi della proprietà associata per il <xref:System.Windows.FrameworkElement.FlowDirection%2A> proprietà, consentendo pertanto figlio di elementi di un oggetto fornito <xref:System.Windows.FrameworkElement> per specificare la direzione di flusso per la disposizione all'interno del relativo elemento padre. Su cui impostare il valore corrente <xref:System.Windows.FrameworkElement>, usare il direct [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] funzione di accesso <xref:System.Windows.FrameworkElement.FlowDirection%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.FlowDirection" />
      </Docs>
    </Member>
    <Member MemberName="SetResourceReference">
      <MemberSignature Language="C#" Value="public void SetResourceReference (System.Windows.DependencyProperty dp, object name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResourceReference(class System.Windows.DependencyProperty dp, object name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetResourceReference (dp As DependencyProperty, name As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetResourceReference(System::Windows::DependencyProperty ^ dp, System::Object ^ name);" />
      <MemberSignature Language="F#" Value="member this.SetResourceReference : System.Windows.DependencyProperty * obj -&gt; unit" Usage="frameworkElement.SetResourceReference (dp, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="name" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp">Proprietà a cui è associata la risorsa.</param>
        <param name="name">Nome della risorsa.</param>
        <summary>Cerca una risorsa con il nome specificato e ne configura un riferimento alla risorsa per la proprietà specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un riferimento a una risorsa è simile all'utilizzo di un [estensione di Markup DynamicResource](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md) nel markup. Il riferimento di risorsa viene creata un'espressione interna che fornisce il valore della proprietà specificata in fase di esecuzione posticipata. L'espressione verrà riconsiderato ogni volta che il dizionario risorse indica un valore modificato tramite gli eventi interni o ogni volta che viene riassociate come elementi padre dell'elemento corrente (un elemento padre è cambiato modificherebbe il percorso di ricerca di dizionario).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.Application.Resources" />
        <altmember cref="P:System.Windows.FrameworkElement.Resources" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeResources">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeResources" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeResources () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeResources();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeResources : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeResources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un valore che indica se i processi di serializzazione devono serializzare il contenuto della proprietà <see cref="P:System.Windows.FrameworkElement.Resources" />.</summary>
        <returns>
          <see langword="true" /> se il valore della proprietà <see cref="P:System.Windows.FrameworkElement.Resources" /> deve essere serializzato; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verrà restituito `true` , purché vi sia almeno una risorsa con chiave locale <xref:System.Windows.FrameworkElement.Resources%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeStyle">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeStyle" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeStyle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeStyle();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeStyle : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un valore che indica se i processi di serializzazione devono serializzare il contenuto della proprietà <see cref="P:System.Windows.FrameworkElement.Style" />.</summary>
        <returns>
          <see langword="true" /> se il valore della proprietà <see cref="P:System.Windows.FrameworkElement.Style" /> deve essere serializzato; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verrà restituito `true` se il <xref:System.Windows.Style> è impostato localmente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTriggers">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeTriggers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeTriggers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeTriggers" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeTriggers () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeTriggers();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeTriggers : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeTriggers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un valore che indica se i processi di serializzazione devono serializzare il contenuto della proprietà <see cref="P:System.Windows.FrameworkElement.Triggers" />.</summary>
        <returns>
          <see langword="true" /> se il valore della proprietà <see cref="P:System.Windows.FrameworkElement.Triggers" /> deve essere serializzato; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo restituisce `true` se il <xref:System.Windows.FrameworkElement.Triggers%2A> proprietà viene impostata localmente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.SizeChangedEventHandler SizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.SizeChangedEventHandler SizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.SizeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SizeChanged As SizeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::SizeChangedEventHandler ^ SizeChanged;" />
      <MemberSignature Language="F#" Value="member this.SizeChanged : System.Windows.SizeChangedEventHandler " Usage="member this.SizeChanged : System.Windows.SizeChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.SizeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore di questo elemento viene modificato dalla proprietà <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> o <see cref="P:System.Windows.FrameworkElement.ActualWidth" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli eventi indirizzati diretti non seguono una route, ma vengono gestiti solo all'interno dell'elemento stesso in cui vengono generati. Indirizzare gli eventi indirizzati supportano altri comportamenti di eventi indirizzati: supportano una raccolta di gestori accessibile e può essere utilizzati come un <xref:System.Windows.EventTrigger> in uno stile.  
  
 Il sistema di layout legge le proprietà all'interno di <xref:System.Windows.SizeChangedEventArgs> classe argomento dell'evento, per determinare se le modifiche segnalate dimensioni devono essere considerate significative. In questo modo il sistema di layout o implementazioni specifiche di un controllo layout per evitare di forzare una modifica di layout a causa delle differenze visivamente impercettibile tra valori di larghezza o altezza vecchio e nuovo. Le differenze impercettibili potrebbero essere dovuto calcoli arrotondamento o stesso risultato di un tipo di dati a virgola mobile.  
  
<a name="routedEventInfo_SizeChanged"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.SizeChangedEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.SizeChangedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Height" />
        <altmember cref="P:System.Windows.FrameworkElement.Width" />
      </Docs>
    </Member>
    <Member MemberName="SizeChangedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent SizeChangedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent SizeChangedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.SizeChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeChangedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ SizeChangedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable SizeChangedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.SizeChangedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.FrameworkElement.SizeChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per altre informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per altre informazioni sull'uso degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.SourceUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SourceUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ SourceUpdated;" />
      <MemberSignature Language="F#" Value="member this.SourceUpdated : EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " Usage="member this.SourceUpdated : System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene modificato il valore di origine per una qualsiasi associazione di proprietà esistente per questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Data.Binding.SourceUpdated> evento generato da qualsiasi <xref:System.Windows.Data.Binding> associato a questo elemento.  
  
<a name="xamlAttributeUsage_SourceUpdated"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object SourceUpdated="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Data.Binding.SourceUpdated" />
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public System.Windows.Style Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style Style" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Style" />
      <MemberSignature Language="VB.NET" Value="Public Property Style As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ Style { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Style : System.Windows.Style with get, set" Usage="System.Windows.FrameworkElement.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta lo stile usato dall'elemento quando viene sottoposto a rendering.</summary>
        <value>Stile non predefinito applicato per l'elemento, se presente. In caso contrario, <see langword="null" />. Il valore predefinito per un oggetto <see cref="T:System.Windows.FrameworkElement" /> costruito in modo predefinito è <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per i controlli, lo stile corrente viene spesso fornito da uno stile predefinito dal tema del controllo o dagli stili in genere applicato ai controlli di tale tipo per le risorse a livello di pagina o un'applicazione (uno stile implicito). Questa proprietà non stili (tema) predefiniti non impostato o restituito, ma restituisce uno stile implicito o uno stile esplicito che agisce sull'elemento. Nel caso di stili impliciti o espliciti, non è importante se lo stile deve essere specificato come una risorsa o definito in locale.  
  
 Impostare gli stili presenta alcune restrizioni. È possibile reimpostare l'intera <xref:System.Windows.FrameworkElement.Style%2A> a una nuova proprietà <xref:System.Windows.Style> in qualsiasi momento, che forzerà la ricomposizione un layout. Tuttavia, appena lo stile verrà utilizzato da un elemento caricato, il <xref:System.Windows.Style> deve essere considerato sealed. Tenta di apportare una modifica a una singola proprietà di uno stile in uso (ad esempio qualsiasi elemento all'interno dell'insieme di <xref:System.Windows.Style.Setters%2A>) viene generata un'eccezione. Uno stile che viene definito nel markup viene considerato per essere in uso, non appena viene caricato da un dizionario di risorse (per le risorse) o (per gli stili inline) viene caricata la pagina che è contenuta.  
  
 <xref:System.Windows.FrameworkElement.Style%2A> è una proprietà di dipendenza con la precedenza speciale. Impostata localmente lo stile in genere ha la precedenza più alta nel sistema di proprietà. Se il <xref:System.Windows.FrameworkElement.Style%2A> è null a questo punto, durante il caricamento del sistema di proprietà Cerca stili impliciti nelle risorse locali o applicazioni che specificano tale tipo. Se lo stile è ancora null dopo questo passaggio, quindi lo stile ad agire per scopi di presentazione in genere deriva dallo stile (tema) predefiniti, ma lo stile predefinito non viene restituito nel <xref:System.Windows.FrameworkElement.Style%2A> valore della proprietà. Visualizzare [precedenza dei valori di proprietà di dipendenza](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md) oppure [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).  
  
<a name="xamlAttributeUsage_Style"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object Style="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_Style"></a>   
## <a name="xaml-property-element-usage"></a>Utilizzo della sintassi XAML per elementi proprietà  
  
<a name="xamlValues_Style"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *ResourceExtension*  
 Uno dei seguenti:, o. Visualizzare [risorse XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
 *styleResourceKey*  
 La chiave che identifica lo stile della richiesta. La chiave fa riferimento a una risorsa esistente in un <xref:System.Windows.ResourceDictionary>.  
  
> [!NOTE]
>  La sintassi degli elementi è tecnicamente possibile, ma non è consigliata per la maggior parte degli scenari di stile. Visualizzare [stili Inline e modelli](~/docs/framework/wpf/advanced/inline-styles-and-templates.md). Un riferimento dell'associazione usando o <xref:System.Windows.Data.Binding> è anche possibile, ma non comuni.  
  
<a name="dependencyPropertyInfo_Style"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.StyleProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 L'esempio seguente definisce uno stile in un dizionario risorse.  
  
 [!code-xaml[FEResource#StyleProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty)]  
[!code-xaml[FEResource#StyleProperty2](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty2)]  
[!code-xaml[FEResource#StyleProperty3](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty3)]  
[!code-xaml[FEResource#StyleProperty4](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty StyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty StyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.StyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ StyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable StyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.StyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.Style" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function IsAmbientPropertyAvailable (propertyName As String) As Boolean Implements IQueryAmbient.IsAmbientPropertyAvailable" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System::String ^ propertyName) = System::Windows::Markup::IQueryAmbient::IsAmbientPropertyAvailable;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nome della proprietà di ambiente richiesta.</param>
        <summary>Per una descrizione di questo membro, vedere il metodo <see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" />.</summary>
        <returns>
          <see langword="true" /> se <paramref name="propertyName" /> è disponibile; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Windows.FrameworkElement> a un'interfaccia <xref:System.Windows.Markup.IQueryAmbient>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.FrameworkElement.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Recupera o imposta un valore di oggetto arbitrario utilizzabile per archiviare informazioni personalizzate sull'elemento.</summary>
        <value>Valore previsto. Nessun valore predefinito per questa proprietà.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà è analoga alle proprietà di Tag in altri modelli di programmazione di Microsoft, ad esempio Visual Basic, Applications Edition o Windows Form. <xref:System.Windows.FrameworkElement.Tag%2A> è concepito per offrire un percorso della proprietà preesistente in cui è possibile archiviare alcune informazioni di base personalizzate su qualsiasi <xref:System.Windows.FrameworkElement> senza richiedere la creazione di una sottoclasse di un elemento.  
  
 Poiché questa proprietà accetta un oggetto, è necessario usare l'utilizzo dell'elemento di proprietà per impostare il <xref:System.Windows.FrameworkElement.Tag%2A> proprietà in XAML su un valore qualsiasi diverso da un oggetto con un convertitore di tipi noti e predefiniti, ad esempio una stringa. Gli oggetti utilizzati in questo modo non sono in genere all'interno di spazi dei nomi standard di WPF e pertanto possono richiedere il mapping dello spazio dei nomi per lo spazio dei nomi esterno per poter essere introdotti come elementi XAML. Per informazioni dettagliate, vedere [spazi dei nomi XAML e Mapping di Namespace per XAML WPF](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md) e [XAML e classi personalizzate per WPF](~/docs/framework/wpf/advanced/xaml-and-custom-classes-for-wpf.md).  
  
<a name="dependencyPropertyInfo_Tag"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.TagProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Name" />
      </Docs>
    </Member>
    <Member MemberName="TagProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TagProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TagProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.TagProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TagProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TagProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TagProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.TagProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.Tag" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.TargetUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TargetUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ TargetUpdated;" />
      <MemberSignature Language="F#" Value="member this.TargetUpdated : EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " Usage="member this.TargetUpdated : System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore di destinazione di un'associazione di proprietà cambia per questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Data.Binding.TargetUpdated> evento generato da qualsiasi <xref:System.Windows.Data.Binding> associato a questo elemento. In genere ciò significa che l'associazione in questione è un'associazione bidirezionale, e che la proprietà di dipendenza associata che il valore della proprietà precedente non è più valido in base a qualsiasi schema di convalida o memorizzazione nella cache che supportano la proprietà o l'origine dati.  
  
 Utilizzare i dati dell'evento di <xref:System.Windows.FrameworkElement.TargetUpdated> evento per determinare le proprietà specifiche che segnala l'aggiornamento del valore di destinazione.  
  
<a name="xamlAttributeUsage_TargetUpdated"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object TargetUpdated="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Data.Binding.TargetUpdated" />
      </Docs>
    </Member>
    <Member MemberName="TemplatedParent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject TemplatedParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject TemplatedParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.TemplatedParent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemplatedParent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ TemplatedParent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TemplatedParent : System.Windows.DependencyObject" Usage="System.Windows.FrameworkElement.TemplatedParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un riferimento al modello padre di questo elemento. Questa proprietà non è pertinente se l'elemento non è stato creato con un modello.</summary>
        <value>L'elemento il cui <see cref="T:System.Windows.FrameworkTemplate" /><see cref="P:System.Windows.FrameworkTemplate.VisualTree" /> ha causato questo elemento deve essere creato. Questo valore è spesso <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.TemplatedParent%2A> è spesso `null` per gli oggetti creati nel codice o markup dell'applicazione. Questo avviene perché tali oggetti vengono creati direttamente, anziché tramite un modello. I riferimenti ottenuti scorrendo l'albero logico dalla radice dell'oggetto o dal nome tipico riferimenti, non sono concessi da un modello.  
  
 Casi in cui <xref:System.Windows.FrameworkElement.TemplatedParent%2A> potrebbe non essere `null` includono operazioni quali l'hit testing, la gestione degli eventi per determinati eventi di input a basso livello, seguire la struttura ad albero visuale con <xref:System.Windows.Media.VisualTreeHelper>, o si utilizzano gli enumeratori, che potrebbero restituire elementi risultanti dai modelli. Un altro caso riguarda in particolare se si chiama <xref:System.Windows.FrameworkTemplate.FindName%2A> su un oggetto esistente <xref:System.Windows.FrameworkTemplate> e l'utilizzo con l'oggetto restituito.  
  
 I modelli sono oggetti condivisi in realtà, in cui il contenuto del modello viene creato una sola volta. Pertanto, se si ottiene un riferimento all'oggetto a un elemento che proviene da un modello, è possibile che l'albero logico evidente non raggiunge la radice della pagina. Per connettersi a tale riferimento del modello alla struttura ad albero logica della pagina, è necessario ottenere il <xref:System.Windows.FrameworkElement.TemplatedParent%2A> valore e continuare a esplorare tale albero degli elementi in base alle esigenze.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public object ToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ToolTip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ToolTip" />
      <MemberSignature Language="VB.NET" Value="Public Property ToolTip As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ToolTip { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ToolTip : obj with get, set" Usage="System.Windows.FrameworkElement.ToolTip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.ToolTip)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'oggetto della descrizione comandi visualizzato per questo elemento nell'[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</summary>
        <value>Oggetto della descrizione comandi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il valore di questa proprietà è di tipo <xref:System.Windows.Controls.ToolTip>, quindi tale valore è la descrizione che verrà usata nel [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].  Se il valore è di altro tipo, quindi tale valore verrà utilizzato come il *contenuto* per un <xref:System.Windows.Controls.ToolTip> specificato (costruito) dal sistema. Per ulteriori informazioni, vedere <xref:System.Windows.Controls.ToolTipService>. La classe di servizio fornisce le proprietà associate che possono essere utilizzate per personalizzare ulteriormente una <xref:System.Windows.Controls.ToolTip>.  
  
<a name="xamlAttributeUsage_ToolTip"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object ToolTip="toolTipContent"/>  
```  
  
<a name="xamlPropertyElementUsage_ToolTip"></a>   
## <a name="xaml-property-element-usage"></a>Utilizzo della sintassi XAML per elementi proprietà  
  
```  
<object>  
  <object.ToolTip>  
    <ToolTip .../>  
  </object.ToolTip>  
</object>  
- or -  
<object>  
  <object.ToolTip>  
    toolTipObjectContent  
  </object.ToolTip>  
</object>  
```  
  
<a name="xamlValues_ToolTip"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *toolTipContent*  
 Stringa che entra il testo visualizzato per il <xref:System.Windows.FrameworkElement.ToolTip%2A>.  
  
 *toolTipObjectContent*  
 Un oggetto, specificato nel formato dell'elemento oggetto, che deve essere utilizzato come il contenuto per il <xref:System.Windows.FrameworkElement> . In genere il risultato sarà un <xref:System.Windows.FrameworkElement> o un altro elemento che crea la composizione di layout per il <xref:System.Windows.FrameworkElement.ToolTip%2A>, alla fine che contiene il contenuto di testo all'interno della composizione. In questo caso, il <xref:System.Windows.Controls.ToolTip> elemento creato in modo implicito da analizzata [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]e il *toolTipObjectContent* content è impostato come relativo <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType> proprietà.  
  
 <`ToolTip` .../>  
 Vedere <xref:System.Windows.Controls.ToolTip>.  
  
<a name="dependencyPropertyInfo_ToolTip"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.ToolTipProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 L'esempio seguente crea una <xref:System.Windows.Controls.ToolTip> nel codice e viene quindi impostata la <xref:System.Windows.FrameworkElement.ToolTip%2A> proprietà su un <xref:System.Windows.Controls.Primitives.StatusBar> controllo.  
  
 [!code-csharp[StatusBar#MakeProgressBar](~/samples/snippets/csharp/VS_Snippets_Wpf/StatusBar/CSharp/Window1.xaml.cs#makeprogressbar)]
 [!code-vb[StatusBar#MakeProgressBar](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StatusBar/visualbasic/window1.xaml.vb#makeprogressbar)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ToolTipClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipClosing As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipClosing;" />
      <MemberSignature Language="F#" Value="member this.ToolTipClosing : System.Windows.Controls.ToolTipEventHandler " Usage="member this.ToolTipClosing : System.Windows.Controls.ToolTipEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica subito prima che venga chiusa una descrizione comandi relativa all'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contrassegnare il <xref:System.Windows.FrameworkElement.ToolTipClosing> evento come gestito non annulli la relativa chiusura. Una volta che viene visualizzata la descrizione, chiudendo la descrizione comando viene eseguita solo in risposta all'interazione dell'utente con l'interfaccia utente.  
  
 Questo evento non può essere un <xref:System.Windows.EventTrigger> in uno stile. Questo avviene perché il campo dell'identificatore di questo evento viene nuovamente utilizzata un'implementazione da un servizio che espone i metodi di aggiungere o rimuovere eventi per l'evento a livello di servizio.  
  
<a name="routedEventInfo_ToolTipClosing"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.ToolTipClosingEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipClosingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipClosingEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ToolTipClosingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per altre informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per altre informazioni sull'uso degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ToolTipOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipOpening As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipOpening;" />
      <MemberSignature Language="F#" Value="member this.ToolTipOpening : System.Windows.Controls.ToolTipEventHandler " Usage="member this.ToolTipOpening : System.Windows.Controls.ToolTipEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica all'apertura di qualsiasi descrizione per l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impedire la visualizzazione nell'interfaccia utente, il gestore per una descrizione comando <xref:System.Windows.FrameworkElement.ToolTipOpening> possibile contrassegnare il <xref:System.Windows.Controls.ToolTipEventArgs> i dati dell'evento gestiti. In caso contrario, viene visualizzata la descrizione, utilizzando il valore della <xref:System.Windows.FrameworkElement.ToolTip%2A> proprietà come il contenuto della descrizione comando. Un altro possibile scenario è che è possibile scrivere un gestore che reimposta il valore della <xref:System.Windows.FrameworkElement.ToolTip%2A> proprietà per l'elemento che rappresenta l'origine evento, appena prima di visualizzata la descrizione comando.  
  
 <xref:System.Windows.FrameworkElement.ToolTipOpening> non verrà generato se il valore di <xref:System.Windows.FrameworkElement.ToolTip%2A> è `null` o in caso contrario, non impostato. Non impostare deliberatamente <xref:System.Windows.FrameworkElement.ToolTip%2A> a `null` mentre un tooltip è aperto o aprendo; ciò non avrà l'effetto della descrizione comando di chiusura e verrà invece creato un effetto visivo indesiderabile nell'interfaccia utente.  
  
 Il <xref:System.Windows.FrameworkElement.ToolTipOpening> evento non può essere un <xref:System.Windows.EventTrigger> in uno stile. Questo avviene perché il campo dell'identificatore di questo evento viene nuovamente utilizzata un'implementazione da un servizio che espone i metodi di aggiungere o rimuovere eventi per l'evento a livello di servizio.  
  
<a name="routedEventInfo_ToolTipOpening"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.ToolTipOpeningEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipOpeningEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipOpeningEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ToolTipOpeningEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per altre informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per altre informazioni sull'uso degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ToolTipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ToolTipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ToolTipProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ToolTipProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.ToolTip" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.FrameworkElement.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la raccolta di trigger aggiunti direttamente per questo elemento o negli elementi figlio.</summary>
        <value>Raccolta fortemente tipizzata di oggetti <see cref="T:System.Windows.Trigger" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Questa proprietà può essere impostata solo [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] tramite la sintassi delle raccolte illustrato, oppure accedendo all'oggetto collection e utilizzando i vari metodi, ad esempio Add. La proprietà per accedere all'oggetto raccolta stesso è di sola lettura, l'insieme è di lettura / scrittura. La proprietà esiste solo in elementi radice. si prova a trovarla o impostarlo in un' posizione genererà un'eccezione generata.  
  
 Questa proprietà non consente di esaminare i trigger esistenti all'interno degli stili in uso su questo elemento. Fornisce solo la raccolta dei trigger letteralmente aggiunti alla raccolta, nel markup o codice. Gli elementi non è in genere tali elementi esistenti per impostazione predefinita (tramite un modello, ad esempio); è più comune per i trigger che provengono dalla composizione del controllo da stabilire invece negli stili.  
  
 In termini di comportamento (e il tentativo di stabilire quale effetto da quale elemento dichiarato <xref:System.Windows.FrameworkElement.Triggers%2A> raccolta), la condizione di attivazione e l'effetto del trigger potrebbe trovarsi in questo elemento, o ai relativi elementi figlio nell'albero logico. Si noti che se si usano ad esempio eventi di durata <xref:System.Windows.FrameworkElement.Loaded> per ottenere questa raccolta, i trigger dell'elemento figlio potrebbero non essere ancora completamente caricati e l'insieme sarà inferiore rispetto a come sarebbe davvero in fase di esecuzione.  
  
 Si noti che la raccolta dei trigger definito per un elemento supporta solo <xref:System.Windows.EventTrigger>, non i trigger di proprietà (<xref:System.Windows.Trigger>). Se sono necessari i trigger di proprietà, è necessario inserirli all'interno di uno stile o modello e quindi assegnare tale stile o il modello per l'elemento sia direttamente tramite il <xref:System.Windows.FrameworkElement.Style%2A> proprietà, oppure indirettamente tramite un riferimento di stile implicito.  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a>Utilizzo della sintassi XAML per elementi proprietà  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *oneOrMoreTriggers*  
 Uno o più definita <xref:System.Windows.EventTrigger> elementi. Questo tipo ogni trigger deve contenere riferimenti e le azioni di storyboard valido. Si noti che questa raccolta può essere stabilita solo per l'elemento radice di una pagina. Per altre informazioni, vedere [Cenni preliminari sugli storyboard](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.EventTrigger" />
      </Docs>
    </Member>
    <Member MemberName="TryFindResource">
      <MemberSignature Language="C#" Value="public object TryFindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object TryFindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ TryFindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.TryFindResource : obj -&gt; obj" Usage="frameworkElement.TryFindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey">Identificatore di chiave della risorsa da trovare.</param>
        <summary>Cerca una risorsa con la chiave specificata e restituisce tale risorsa, se trovata.</summary>
        <returns>Risorsa trovata oppure <see langword="null" /> se non viene trovata una risorsa con il parametro <paramref name="key" /> specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se la risorsa non viene trovata nell'elemento chiamante, ricerca nell'albero di risorsa padre verso l'alto attraverso l'albero logico, nello stesso modo che la struttura ad albero sarebbe effettuata se la risorsa richiesti dalla chiave in fase di esecuzione. Il metodo restituisce `null` solo se nessuna risorsa di tale chiave era presente in un punto qualsiasi nell'albero delle risorse, per le condizioni esistenti dell'albero al momento che <xref:System.Windows.FrameworkElement.TryFindResource%2A> viene chiamato.  
  
 In genere si esegue immediatamente il cast del valore restituito al tipo della proprietà che si stava tentando di impostare con il valore di risorsa restituita.  
  
 Il <xref:System.Windows.FrameworkElement.FindResource%2A> metodo presenta un comportamento simile, ad eccezione del fatto che genera un'eccezione se è stata restituita alcuna risorsa con la chiave fornita.  
  
   
  
## Examples  
 Nell'esempio seguente viene implementato come un gestore del pulsante, in cui set clic sul pulsante relativo sfondo di un pennello definiti dalle risorse ottenuto chiamando <xref:System.Windows.FrameworkElement.TryFindResource%2A> su se stesso. Viene effettuata nell'albero degli elementi e trova la risorsa (risorsa stessa viene definita [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] e non viene visualizzata).  
  
 [!code-csharp[BaseElementsSmorgasbord#FETryFindResource](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#fetryfindresource)]
 [!code-vb[BaseElementsSmorgasbord#FETryFindResource](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#fetryfindresource)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Unloaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Unloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Unloaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Unloaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unloaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Unloaded;" />
      <MemberSignature Language="F#" Value="member this.Unloaded : System.Windows.RoutedEventHandler " Usage="member this.Unloaded : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'elemento viene rimosso dall'interno di una struttura ad albero di elementi caricati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli eventi indirizzati diretti non seguono una route, ma vengono gestiti solo all'interno dell'elemento stesso in cui vengono generati. Indirizzare gli eventi indirizzati supportano altri comportamenti di eventi indirizzati: supportano una raccolta di gestori accessibile e può essere utilizzati come un <xref:System.Windows.EventTrigger> in uno stile.  
  
 <xref:System.Windows.FrameworkElement.Loaded> e <xref:System.Windows.FrameworkElement.Unloaded> possono essere generati entrambi nei controlli in seguito a modifiche al tema del sistema avviata dall'utente. Una modifica al tema fa sì che un invalidamento dei dati del modello di controllo e la struttura visiva indipendente, che a sua volta, l'intero controllo confermare l'operazione. Di conseguenza <xref:System.Windows.FrameworkElement.Unloaded> non è possibile presupporre che si verifichi solo sullo spostamento all'esterno della pagina.  
  
 Si noti che il <xref:System.Windows.FrameworkElement.Unloaded> evento non viene generato dopo che un'applicazione inizia ad arrestarsi. Arresto dell'applicazione si verifica quando la condizione definita per il <xref:System.Windows.Application.ShutdownMode%2A> proprietà si trova. Se si inserisce il codice di pulitura all'interno di un gestore per il <xref:System.Windows.FrameworkElement.Unloaded> evento, ad esempio per un <xref:System.Windows.Window> o un <xref:System.Windows.Controls.UserControl>, questo potrebbe non essere chiamato come previsto.  
  
<a name="routedEventInfo_Unloaded"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.UnloadedEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="UnloadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent UnloadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent UnloadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.UnloadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnloadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ UnloadedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnloadedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.UnloadedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.FrameworkElement.Unloaded" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per altre informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per altre informazioni sull'uso degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.UnregisterName : string -&gt; unit" Usage="frameworkElement.UnregisterName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome della coppia nome-oggetto da rimuovere dall'ambito corrente.</param>
        <summary>Semplifica l'accesso al metodo di annullamento della registrazione <see cref="T:System.Windows.NameScope" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È necessario solo per i nomi di annullare la registrazione se si prevede di registrare nuovamente un altro elemento con lo stesso nome.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)" />
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UpdateDefaultStyle">
      <MemberSignature Language="C#" Value="public void UpdateDefaultStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateDefaultStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.UpdateDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateDefaultStyle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateDefaultStyle();" />
      <MemberSignature Language="F#" Value="member this.UpdateDefaultStyle : unit -&gt; unit" Usage="frameworkElement.UpdateDefaultStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Riapplica lo stile predefinito al controllo <see cref="T:System.Windows.FrameworkElement" /> corrente.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutRounding">
      <MemberSignature Language="C#" Value="public bool UseLayoutRounding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseLayoutRounding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.UseLayoutRounding" />
      <MemberSignature Language="VB.NET" Value="Public Property UseLayoutRounding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseLayoutRounding { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseLayoutRounding : bool with get, set" Usage="System.Windows.FrameworkElement.UseLayoutRounding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se l'arrotondamento del layout deve essere applicato alla posizione e alle dimensioni dell'elemento durante il layout.</summary>
        <value>
          <see langword="true" /> se l'arrotondamento del layout è applicato; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando la <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> è di proprietà per un elemento `true`, tutti i valori di pixel non integrali che vengono calcolati durante la <xref:System.Windows.UIElement.Measure%2A> e <xref:System.Windows.UIElement.Arrange%2A> passa viene arrotondato a valori di pixel intero.  
  
 Questa proprietà viene ereditata dagli elementi figlio.  
  
> [!NOTE]
>  È consigliabile impostare <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> a `true` nell'elemento radice. Il sistema di layout aggiunge le coordinate figlio in corrispondenza delle coordinate padre; Pertanto, se le coordinate padre non sono presenti in un confine di pixel, le coordinate figlio non sono in un confine di pixel. Se <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> non può essere impostata in corrispondenza della radice, impostare <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> sull'elemento figlio per ottenere l'effetto desiderato.  
  
 Disegnare oggetti sui limiti dei pixel Elimina bordi semitrasparenti che vengono prodotte da anti-aliasing quando una rete perimetrale cade all'interno di un pixel del dispositivo. Nella figura seguente mostra l'output di una riga espressa in pixel singolo che cade all'interno di un pixel del dispositivo. La riga a sinistra non usa l'arrotondamento del layout e anti-alias. La riga a destra Usa l'arrotondamento del layout.  
  
 ![Anti&#45;riga alias rispetto a pixel singolo. ] (~/add/media/pixelsnaplinecompare.PNG "Linea con anti-aliasing confrontata a pixel singolo.")  
  
 Quando si usa l'arrotondamento del layout e <xref:System.Windows.GridUnitType.Star> il ridimensionamento, il sistema di layout crea variazioni di lieve entità nelle misure di riga o colonna per evitare il rendering dei subpixel. Se, ad esempio, una griglia con una larghezza pari a 100 con 3 colonne ciascuna delle dimensioni totale <xref:System.Windows.GridUnitType.Star>, invece di creare tre colonne che hanno una larghezza uguale di 33,3, il sistema di layout consente di creare 2 colonne che hanno una larghezza pari a 33 e quello che ha una larghezza pari a 34.  
  
> [!NOTE]
>  In .NET 4.6 sono state apportate modifiche all'arrotondamento per ridurre le istanze di ritaglio nei controlli con bordi del layout. Per impostazione predefinita, questa funzionalità è abilitata se il Framework di destinazione è .NET Framework 4.6 o versione successiva. Applicazioni destinate a versioni precedenti del framework possono acconsentire esplicitamente il nuovo comportamento aggiungendo l'impostazione seguente in un file app. config: `<runtime><AppContextSwitchOverrides value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/></runtime>` l'impostazione ha effetto solo quando l'applicazione viene eseguita in .NET Framework 4.6.  
  
   
  
## Examples  
 L'esempio seguente illustra l'effetto che la <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> dispone di proprietà in una riga singola espressa in pixel. La riga a sinistra non usa l'arrotondamento del layout e la riga a destra Usa l'arrotondamento del layout. Se lenta ridimensiona la finestra, è possibile visualizzare la differenza di arrotondamento del layout.  
  
```xaml  
  
<Page x:Class="LayoutRounding.Lines"  
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"  
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  
    Title="Lines" Name="linesPage"  
    >  
  <StackPanel Width="150"  Margin="7" Orientation="Horizontal">  
    <!-- Single pixel line with layout rounding turned OFF.-->  
    <Rectangle UseLayoutRounding="False"  
       Width="45.5" Margin="10" Height="1" Fill="Red"/>  
    <!-- Single pixel line with layout rounding turned ON.-->  
    <Rectangle UseLayoutRounding="True"  
      Width="45.5" Margin="10" Height="1" Fill="Red"/>  
  </StackPanel>  
  <!-- Background Grid -->  
  <Page.Background>  
    <DrawingBrush  Viewport="0,0,10,10" ViewportUnits="Absolute" TileMode="Tile">  
      <DrawingBrush.Drawing>  
        <DrawingGroup>  
          <GeometryDrawing Brush="White">  
            <GeometryDrawing.Geometry>  
              <RectangleGeometry Rect="0,0,1,1" />  
            </GeometryDrawing.Geometry>  
          </GeometryDrawing>  
          <GeometryDrawing Geometry="M0,0 L1,0 1,0.1, 0,0.1Z " Brush="#CCCCFF" />  
          <GeometryDrawing Geometry="M0,0 L0,1 0.1,1, 0.1,0Z" Brush="#CCCCFF" />  
        </DrawingGroup>  
      </DrawingBrush.Drawing>  
    </DrawingBrush>  
  </Page.Background>  
</Page>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutRoundingProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UseLayoutRoundingProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UseLayoutRoundingProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.UseLayoutRoundingProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UseLayoutRoundingProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UseLayoutRoundingProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable UseLayoutRoundingProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.UseLayoutRoundingProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.UseLayoutRounding" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.VerticalAlignment VerticalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.VerticalAlignment VerticalAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.VerticalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property VerticalAlignment As VerticalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::VerticalAlignment VerticalAlignment { System::Windows::VerticalAlignment get(); void set(System::Windows::VerticalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.VerticalAlignment : System.Windows.VerticalAlignment with get, set" Usage="System.Windows.FrameworkElement.VerticalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VerticalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta le caratteristiche di allineamento verticale applicate all'elemento quando viene composto all'interno di un elemento padre, come un controllo pannello o elementi.</summary>
        <value>Impostazione di allineamento verticale. Il valore predefinito è <see cref="F:System.Windows.VerticalAlignment.Stretch" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando <xref:System.Windows.FrameworkElement.Height%2A> e <xref:System.Windows.FrameworkElement.Width%2A> le proprietà vengono impostate in modo esplicito un elemento, queste misure hanno precedenza rispetto al layout e annullano i normali effetti dell'impostazione di questa proprietà su <xref:System.Windows.VerticalAlignment.Stretch>.  
  
 <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> è il [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] funzione di accesso di proprietà per i quali è in realtà una proprietà di dipendenza. Questa proprietà di dipendenza specifica viene spesso ha il valore "predefinito" apparente impostato in modo diverso nelle classi derivate dell'elemento, in particolare i controlli. In genere ciò si verifica in due modi: la proprietà di dipendenza viene nuovamente registrata a una determinata classe derivata, ma con metadati diversi per l'impostazione dei valori predefiniti; oppure è un'impostazione predefinita viene applicato uno stile che imposta il valore della proprietà di dipendenza in modo diverso. Ad esempio, il valore "default" apparente della <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> per un <xref:System.Windows.Controls.ComboBoxItem> controllo sarà <xref:System.Windows.VerticalAlignment.Center>, anche se <xref:System.Windows.Controls.ComboBoxItem> eredita <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> direttamente dai <xref:System.Windows.FrameworkElement>. Infatti, tale valore è stato reimpostato nello stile predefinito di <xref:System.Windows.Controls.ComboBoxItem>, nel modello di controllo dello stile.  
  
 <xref:System.Windows.Controls.Canvas> non usa <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> durante la composizione di layout, perché <xref:System.Windows.Controls.Canvas> si basa sul posizionamento assoluto.  
  
 Quando viene ereditato da <xref:System.Windows.Controls.ComboBoxItem> o qualsiasi classe derivata, <xref:System.Windows.Controls.ComboBoxItem> ridefinisce il valore predefinito di questa proprietà sia <xref:System.Windows.VerticalAlignment.Center>.  
  
<a name="dependencyPropertyInfo_VerticalAlignment"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.VerticalAlignmentProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VerticalAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VerticalAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.VerticalAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VerticalAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VerticalAlignmentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VerticalAlignmentProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.VerticalAlignmentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.VerticalAlignment" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualChildrenCount">
      <MemberSignature Language="C#" Value="protected override int VisualChildrenCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VisualChildrenCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.VisualChildrenCount" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property VisualChildrenCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property int VisualChildrenCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.VisualChildrenCount : int" Usage="System.Windows.FrameworkElement.VisualChildrenCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il numero di elementi figlio visivi in questo elemento.</summary>
        <value>Numero di elementi figlio visivi per questo elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.FrameworkElement> implementazione di <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> restituisce sempre zero o uno. Le classi che gestiscono una raccolta figlio visivi che può superare uno devono eseguire l'override di questa proprietà e <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.  
  
 Questa proprietà viene in genere utilizzata per determinare i limiti superiori della raccolta figlio corrente ai fini dell'implementazione di override di layout (<xref:System.Windows.FrameworkElement.MeasureOverride%2A>, <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>).  
  
   
  
## Examples  
 L'esempio seguente mostra come uno strumento decorativo personalizzato Usa i valori dichiarati da un <xref:System.Windows.Media.VisualCollection> che mantiene per i relativi elementi figlio visivi e report questi valori tramite sostituzioni dello <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> e <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.  
  
 [!code-csharp[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverridespre)]
 [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverridespre)]  
[!code-csharp[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverrides)]
[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverrides)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Se la classe supporta più di un elemento figlio visivo in una raccolta di elementi figlio, ignorare questa proprietà per restituire il conteggio di elementi in tale raccolta. Questa operazione è necessaria anche se l'oggetto raccolta stesso restituisce un conteggio. La logica di layout dell'elemento a livello di framework WPF si presuppone che tutti gli elementi restituirà un conteggio valido tramite loro <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> proprietà.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public double Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Width { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Width : double with get, set" Usage="System.Windows.FrameworkElement.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Recupera o imposta la larghezza dell'elemento.</summary>
        <value>Larghezza dell'elemento in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]. Il valore predefinito è <see cref="F:System.Double.NaN" />. Questo valore deve essere maggiore o uguale a 0,0. Per informazioni sul limite superiore, vedere la sezione Osservazioni.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo è uno dei tre proprietà in <xref:System.Windows.FrameworkElement> che specificano le informazioni sulla larghezza.  Gli altri due <xref:System.Windows.FrameworkElement.MinWidth%2A> e <xref:System.Windows.FrameworkElement.MaxWidth%2A>.  Se si verifica un conflitto tra questi valori, l'ordine di applicazione per determinare la larghezza effettiva è primo <xref:System.Windows.FrameworkElement.MinWidth%2A> quindi deve essere presa in considerazione <xref:System.Windows.FrameworkElement.MaxWidth%2A>e infine se ognuno di questi si trovano all'interno dei limiti definiti, <xref:System.Windows.FrameworkElement.Width%2A>.  
  
 Il valore restituito di questa proprietà è sempre lo stesso come qualsiasi valore su cui è stato impostato. Al contrario, il valore della <xref:System.Windows.FrameworkElement.ActualWidth%2A> può variare. Il layout potrebbe avere rifiutato dimensione consigliata per qualche motivo. Inoltre, il sistema di layout stesso funziona in modo asincrono rispetto al set di sistema di proprietà di <xref:System.Windows.FrameworkElement.Width%2A> e potrebbero non essere elaborati come quella particolare ancora alla modifica della proprietà di ridimensionamento.  
  
 Inoltre a accettabile <xref:System.Double> valori, questa proprietà può anche essere <xref:System.Double.NaN?displayProperty=nameWithType>. Si tratta di come specificare il comportamento di ridimensionamento automatico. In [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] è impostare il valore per la stringa "Auto" (maiuscole e minuscole) per abilitare il comportamento del ridimensionamento automatico. Comportamento del ridimensionamento automatico implica che l'elemento riempirà alla larghezza disponibile ad esso. Si noti tuttavia che controlli specifici spesso forniscono i valori predefiniti tramite gli stili predefiniti che consente di disattivare il comportamento del ridimensionamento a meno che non è specificamente riabilitato automatico.  
  
 Oltre al controllo di convalida, è disponibile un valore superiore non deterministico per <xref:System.Windows.FrameworkElement.Width%2A> che viene applicato dal sistema di layout (si tratta di un numero molto elevato, maggiore <xref:System.Single.MaxValue?displayProperty=nameWithType> ma più piccolo di <xref:System.Double.MaxValue?displayProperty=nameWithType>). Se si supera questo limite, l'elemento non verrà eseguito il rendering e viene generata alcuna eccezione. Non impostare <xref:System.Windows.FrameworkElement.Width%2A> su un valore che è significativamente maggiore la dimensione massima di qualsiasi visualizzazione possibile, o si potrebbe superare questo limite superiore non deterministico.  
  
<a name="xamlAttributeUsage_Width"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object Width="double"/>  
- or –  
<object Width ="qualifiedDouble"/>  
- or -  
<object Width ="Auto"/>  
```  
  
<a name="xamlValues_Width"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *double*  
 <xref:System.Double>  
  
 Rappresentazione di stringa di un <xref:System.Double> valore uguale o maggiore di 0,0. Per informazioni sul limite superiore, vedere la sezione Osservazioni. Questo valore viene interpretato come un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] misurazione. Le stringhe non necessario includere in modo esplicito i separatori decimali. Ad esempio un valore di `1` è accettabile.  
  
 *qualifiedDouble*  
 Oggetto *doppie* come descritto in precedenza, seguito da una delle seguenti stringhe di dichiarazione unit: `px`, `in`, `cm`, `pt`.  
  
 `px` (impostazione predefinita) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` pollici; in 1 = = 96 px  
  
 `cm` centimetri; 1cm==(96/2.54) px  
  
 `pt` punti; 1pt==(96/72) px  
  
 `Auto`  
 Abilita il comportamento di ridimensionamento automatico. Vedere la sezione Osservazioni.  
  
<a name="dependencyPropertyInfo_Width"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.WidthProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.WidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable WidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.WidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.FrameworkElement.Width" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>