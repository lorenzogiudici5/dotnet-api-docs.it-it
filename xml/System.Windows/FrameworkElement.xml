<Type Name="FrameworkElement" FullName="System.Windows.FrameworkElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="37e7aed83bb8605e1fc6521bbaffa487694de176" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36461200" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FrameworkElement : System.Windows.UIElement, System.ComponentModel.ISupportInitialize, System.Windows.IFrameworkInputElement, System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FrameworkElement extends System.Windows.UIElement implements class System.ComponentModel.ISupportInitialize, class System.Windows.IFrameworkInputElement, class System.Windows.IInputElement, class System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkElement" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkElement&#xA;Inherits UIElement&#xA;Implements IFrameworkInputElement, IQueryAmbient, ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkElement : System::Windows::UIElement, System::ComponentModel::ISupportInitialize, System::Windows::IFrameworkInputElement, System::Windows::Markup::IQueryAmbient" />
  <TypeSignature Language="F#" Value="type FrameworkElement = class&#xA;    inherit UIElement&#xA;    interface IFrameworkInputElement&#xA;    interface IInputElement&#xA;    interface ISupportInitialize&#xA;    interface IQueryAmbient" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.UIElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.IFrameworkInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IQueryAmbient</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.UsableDuringInitialization(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.XmlLangProperty("Language")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.StyleTypedProperty(Property="FocusVisualStyle", StyleTargetType=typeof(System.Windows.Controls.Control))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides a WPF framework-level set of properties, events, and methods for Windows Presentation Foundation (WPF) elements. This class represents the provided WPF framework-level implementation that is built on the WPF core-level APIs that are defined by <see cref="T:System.Windows.UIElement" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement> è il punto di connessione tra classi dell'elemento a livello di framework WPF e il set di livello principale WPF di <xref:System.Windows.UIElement> servizi di presentazione. Per ulteriori informazioni su questi concetti, vedere [architettura WPF](~/docs/framework/wpf/advanced/wpf-architecture.md).  
  
 <xref:System.Windows.FrameworkElement> estende <xref:System.Windows.UIElement> e aggiunge le funzionalità seguenti:  
  
-   **Definizione di sistema di layout**: <xref:System.Windows.FrameworkElement> fornisce le implementazioni specifiche a livello di framework WPF per alcuni metodi che sono stati definiti come membri virtuali nei <xref:System.Windows.UIElement>. In particolare, <xref:System.Windows.FrameworkElement> esegue il sealing alcune sostituzioni di layout a livello di base WPF e, invece, fornisce un equivalente a livello di framework WPF che le classi derivate debba eseguire invece l'override. Ad esempio <xref:System.Windows.FrameworkElement> esegue il sealing <xref:System.Windows.UIElement.ArrangeCore%2A> ma fornisce <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>. Queste modifiche riflettono il fatto che a livello di framework WPF è disponibile un sistema di layout completo che può eseguire il rendering di qualsiasi <xref:System.Windows.FrameworkElement> classe derivata. WPF core livelli, alcuni membri che verranno struttura generale [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] soluzione di base di layout sono presenti, ma il motore effettivo del sistema di layout non è definito. Per altre informazioni, vedere [Layout](~/docs/framework/wpf/advanced/layout.md).  
  
-   **L'albero logico:** generali [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] modello di programmazione è spesso espressi in termini di albero di elementi. Supporto per esprimere l'albero di elementi come un albero logico e il supporto per la definizione di tale struttura ad albero nel markup viene implementata al <xref:System.Windows.FrameworkElement> livello. Si noti tuttavia che <xref:System.Windows.FrameworkElement> deliberatamente non definisce un modello di contenuto e lascia tale compito alle classi derivate. Per altre informazioni, vedere [Strutture ad albero in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
-   **Oggetto gli eventi di durata:** è spesso utile sapere quando viene inizializzato un elemento (il costruttore viene chiamato) o quando l'elemento viene caricata inizialmente in un albero logico. <xref:System.Windows.FrameworkElement> definisce diversi eventi correlati alla durata degli oggetti che forniscono utili hook per le operazioni di code-behind che interessano elementi, ad esempio l'aggiunta di più elementi figlio. Per altre informazioni, vedere [eventi durata oggetti](~/docs/framework/wpf/advanced/object-lifetime-events.md).  
  
-   **Supporto per l'associazione dati e i riferimenti alle risorse dinamica:** viene implementato il supporto a livello di proprietà per l'associazione dati e risorse per la <xref:System.Windows.DependencyProperty> classe e incorporati nel sistema di proprietà, ma la possibilità di risolvere un valore del membro che è archiviato come un <xref:System.Windows.Expression> (il costrutto di programmazione sottostante sia data binding e le risorse dinamiche) viene implementato da <xref:System.Windows.FrameworkElement>. Per altre informazioni, vedere [Panoramica del Data Binding](~/docs/framework/wpf/data/data-binding-overview.md) e [risorse XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
-   **Stili:** <xref:System.Windows.FrameworkElement> definisce il <xref:System.Windows.FrameworkElement.Style%2A> proprietà. Tuttavia, <xref:System.Windows.FrameworkElement> definire il supporto per modelli non ancora o supportano le espressioni Decorator. Queste funzionalità introdotte da classi di controlli, ad esempio <xref:System.Windows.Controls.Control> e <xref:System.Windows.Controls.ContentControl>.  
  
-   **Maggiore supporto di animazione:** alcune funzionalità di supporto animazione è stata già definita a livello dei componenti di base di WPF, ma <xref:System.Windows.FrameworkElement> estende tale funzionalità mediante l'implementazione <xref:System.Windows.FrameworkElement.BeginStoryboard%2A> e dei relativi membri.  
  
 Come si può notare dalla gerarchia di classi, molti [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] classi derivano dalle <xref:System.Windows.FrameworkElement>, direttamente o tramite classi di base intermedie, ad esempio <xref:System.Windows.Controls.Panel> o <xref:System.Windows.Controls.Control>.  
  
 Se si prevede di usare <xref:System.Windows.FrameworkElement> come classe base, si potrebbe voler esaminare innanzitutto le classi derivate esistenti. <xref:System.Windows.FrameworkElement> fornisce il supporto per il numero di scenari di base, ma non include numerose funzionalità che sono utili per un "elemento" nel senso di un blocco predefinito che consente di creare [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]. Ad esempio, un <xref:System.Windows.FrameworkElement> non definisce un modello di contenuto true; <xref:System.Windows.FrameworkElement> come una classe di base non definisce una proprietà che possa creare [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] gli elementi figlio. In particolare, è possibile esaminare <xref:System.Windows.Controls.Control> e <xref:System.Windows.Controls.ContentControl>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.FrameworkContentElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.FrameworkElement" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualHeight">
      <MemberSignature Language="C#" Value="public double ActualHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ActualHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ActualHeight" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActualHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double ActualHeight { double get(); };" />
      <MemberSignature Language="F#" Value="member this.ActualHeight : double" Usage="System.Windows.FrameworkElement.ActualHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the rendered height of this element.</summary>
        <value>Altezza dell'elemento, come un valore in [! INCLUDE[TLA#tla_dipixel#plural](~/Includes/tlasharptla-dipixelsharpplural-MD.MD)]. Il valore predefinito è 0 (zero).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà è un valore calcolato basato su altri input di altezza e il sistema di layout. Il valore viene impostato dal sistema di layout, in base a un passaggio di rendering effettivo e potrebbe pertanto rimanere indietro rispetto al valore impostato di proprietà, ad esempio <xref:System.Windows.FrameworkElement.Height%2A> che costituiscono la base della modifica dell'input.  
  
 Poiché <xref:System.Windows.FrameworkElement.ActualHeight%2A> è un valore calcolato, è necessario essere consapevoli che sono possibili più modifiche o modifiche incrementali a esso in seguito a operazioni diverse dal sistema di layout. Il sistema di layout può calcolare lo spazio di misurazione necessario per gli elementi figlio, i vincoli dell'elemento padre e così via.  
  
 Anche se è possibile impostare questa proprietà dal [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], è possibile basare un <xref:System.Windows.Trigger> sul relativo valore in uno stile.  
  
<a name="dependencyPropertyInfo_ActualHeight"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.ActualHeightProperty>|  
|Impostare le proprietà dei metadati su `true`|nessuno|  
  
   
  
## Examples  
 L'esempio seguente mostra le varie proprietà di altezza.  
  
 [!code-csharp[HeightMinHeightMaxHeight#3](~/samples/snippets/csharp/VS_Snippets_Wpf/HeightMinHeightMaxHeight/CSharp/Window1.xaml.cs#3)]
 [!code-vb[HeightMinHeightMaxHeight#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HeightMinHeightMaxHeight/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ActualHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ActualHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ActualHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ActualHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ActualHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ActualHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ActualHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualWidth">
      <MemberSignature Language="C#" Value="public double ActualWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ActualWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ActualWidth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActualWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double ActualWidth { double get(); };" />
      <MemberSignature Language="F#" Value="member this.ActualWidth : double" Usage="System.Windows.FrameworkElement.ActualWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the rendered width of this element.</summary>
        <value>La larghezza dell'elemento, come un valore in [! INCLUDE[TLA#tla_dipixel#plural](~/Includes/tlasharptla-dipixelsharpplural-MD.MD)]. Il valore predefinito è 0 (zero).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà è un valore calcolato basato su altri input di larghezza e il sistema di layout. Il valore viene impostato dal sistema di layout, in base a un passaggio di rendering effettivo e potrebbe pertanto rimanere indietro rispetto al valore impostato di proprietà, ad esempio <xref:System.Windows.FrameworkElement.Width%2A> che costituiscono la base della modifica dell'input.  
  
 Poiché <xref:System.Windows.FrameworkElement.ActualWidth%2A> è un valore calcolato, è necessario essere consapevoli che sono possibili più modifiche o modifiche incrementali a esso in seguito a operazioni diverse dal sistema di layout. Il sistema di layout può calcolare lo spazio di misurazione necessario per gli elementi figlio, i vincoli dell'elemento padre e così via.  
  
 Anche se è possibile impostare questa proprietà dal [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], è possibile basare un <xref:System.Windows.Trigger> sul relativo valore in uno stile.  
  
<a name="dependencyPropertyInfo_ActualWidth"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.ActualWidthProperty>|  
|Impostare le proprietà dei metadati su `true`|nessuno|  
  
   
  
## Examples  
 L'esempio seguente mostra le varie proprietà di larghezza.  
  
 [!code-csharp[WidthMinWidthMaxWidth#3](~/samples/snippets/csharp/VS_Snippets_Wpf/WidthMinWidthMaxWidth/CSharp/Window1.xaml.cs#3)]
 [!code-vb[WidthMinWidthMaxWidth#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WidthMinWidthMaxWidth/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ActualWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ActualWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ActualWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ActualWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ActualWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ActualWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ActualWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void AddLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AddLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AddLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void AddLogicalChild(System::Object ^ child);" />
      <MemberSignature Language="F#" Value="member this.AddLogicalChild : obj -&gt; unit" Usage="frameworkElement.AddLogicalChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child">Child element to be added.</param>
        <summary>Adds the provided object to the logical tree of this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per l'implementazione di raccolte di oggetti che rappresentano gli elementi figlio logico di un elemento. Manutenzione della raccolta per le raccolte di elementi figlio può essere effettuata nelle proprietà Get o set, la gestione di eventi Changed, costruttori, o all'interno degli stessi tipi di raccolta di classi.  
  
 Gli autori di controllo, la modifica dell'albero logico a questo livello non è consigliabile, a meno che nessuno dei modelli di contenuto per le classi di controllo di base disponibili sono appropriati per lo scenario di controllo. Prendere in considerazione il livello di creazione di una sottoclasse <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, e <xref:System.Windows.Controls.HeaderedItemsControl>. Queste classi forniscono un modello di contenuto con l'imposizione specifico di elementi figlio dell'albero logico tramite dedicato [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], nonché il supporto per altre funzionalità in genere utili in un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controllo, ad esempio lo stile tramite i modelli. Per ulteriori informazioni su come usare <xref:System.Windows.FrameworkElement.LogicalChildren%2A> e <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>, vedere [alberi in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
 <xref:System.Windows.FrameworkElement.AddLogicalChild%2A> può generare un'eccezione se viene chiamato quando l'albero logico scorrimento da parte di un altro processo.  
  
   
  
## Examples  
 Nell'esempio seguente viene implementata una `Child` proprietà in un oggetto personalizzato <xref:System.Windows.FrameworkElement> che crea la propria implementazione del livello visivo. Il setter di proprietà è progettato in modo che se il valore viene modificato, il valore precedente viene rimosso dall'albero logico, nonché una raccolta visuale specifici di una classe. Il valore della proprietà viene memorizzata nella cache e quindi il nuovo valore verrà aggiunto all'albero logico sia la raccolta visuale personalizzata.  
  
 [!code-csharp[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/CSharp/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]
 [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/visualbasic/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ApplyTemplate">
      <MemberSignature Language="C#" Value="public bool ApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyTemplate () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ApplyTemplate();" />
      <MemberSignature Language="F#" Value="member this.ApplyTemplate : unit -&gt; bool" Usage="frameworkElement.ApplyTemplate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Builds the current template's visual tree if necessary, and returns a value that indicates whether the visual tree was rebuilt by this call.</summary>
        <returns>
          <see langword="true" /> if visuals were added to the tree; returns <see langword="false" /> otherwise.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le applicazioni possono chiamare questo metodo per garantire che la struttura ad albero visuale di un elemento è stato completato. Questo passaggio potrebbe essere necessario se codice verrà eseguita la verifica gli elementi figlio nell'albero. Per la logica di tipico dell'elemento all'interno delle applicazioni, la chiamata <xref:System.Windows.FrameworkElement.ApplyTemplate%2A> non è necessario, perché i modelli verranno applicati automaticamente agli elementi in un momento appropriato della relativa durata.  
  
 <xref:System.Windows.FrameworkElement.ApplyTemplate%2A> viene chiamato su ogni misura passare per il sistema di layout a livello di framework WPF.  
  
 <xref:System.Windows.FrameworkElement> le classi derivate possono utilizzare il <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> gestore della classe per ricevere una notifica di casi in cui questo metodo viene chiamato in modo esplicito o dal sistema di layout. <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> viene chiamato dopo che il modello non è completamente generato e collegato all'albero logico.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ControlTemplate" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected override sealed void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="override this.ArrangeCore : System.Windows.Rect -&gt; unit" Usage="frameworkElement.ArrangeCore finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">The final area within the parent that this element should use to arrange itself and its children.</param>
        <summary>Implements <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> (defined as virtual in <see cref="T:System.Windows.UIElement" />) and seals the implementation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è bloccato. Per sostituire la logica nell'elemento personalizzato in modo specifico per il passaggio di disposizione del layout dell'elemento, il <xref:System.Windows.FrameworkElement> classe derivata deve eseguire l'override <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size ArrangeOverride (System.Windows.Size finalSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size finalSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ArrangeOverride (finalSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size ArrangeOverride(System::Windows::Size finalSize);" />
      <MemberSignature Language="F#" Value="abstract member ArrangeOverride : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.ArrangeOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.ArrangeOverride finalSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
        <summary>When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class.</summary>
        <returns>The actual size used.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Gli autori di controlli che desiderano personalizzare il passaggio di disposizione dell'elaborazione del layout deve eseguire l'override di questo metodo. Il modello di implementazione deve chiamare <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> su ogni elemento figlio visibile e passare la dimensione per ogni elemento figlio come finale desiderata il <paramref name="finalRect" /> parametro. Gli elementi padre chiamano <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> su ogni elemento figlio, in caso contrario, gli elementi figlio non vengono visualizzati.  Molte classi derivate offrono le implementazioni di questo metodo. Le più importanti includono: <see cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />, <see cref="M:System.Windows.Controls.Page.ArrangeOverride(System.Windows.Size)" /> e <see cref="M:System.Windows.Controls.Control.ArrangeOverride(System.Windows.Size)" />.</para>
        </block>
        <altmember cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public virtual void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="frameworkElement.BeginInit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts the initialization process for this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se si sono in corso di modifica in modo che non ancora esporre o connettere l'elemento a qualsiasi albero degli elementi, è possibile chiamare questo metodo su singoli elementi. Ad esempio, si potrebbe essere stato creato un nuovo <xref:System.Windows.FrameworkElement>, ma non è ancora associato a un albero logico. In alternativa, l'albero logico in cui l'elemento è un elemento figlio all'interno di esso potrebbe non essere connesso a una finestra o una pagina dell'applicazione.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Implementare questo metodo per fornire una gestione speciale che deve verificarsi prima che l'elemento viene inizializzato durante il processo di caricamento dell'elemento.  L'implementazione deve chiamare l'implementazione di base, poiché l'implementazione di base (valore predefinito) imposta un flag interno per tenere traccia dell'inizializzazione. Una possibile implementazione consiste nell'utilizzare questo metodo come un hook in routine di inizializzazione classe privata che non sono già attivati dai costruttori.  L'implementazione di base verrà generata un'eccezione se <see cref="M:System.Windows.FrameworkElement.BeginInit" /> viene chiamato più volte sullo stesso elemento prima della <see cref="M:System.Windows.FrameworkElement.EndInit" /> la chiamata.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.EndInit" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginStoryboard">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Begins the sequence of actions contained in the provided storyboard.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard -&gt; unit" Usage="frameworkElement.BeginStoryboard storyboard" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
      </Parameters>
      <Docs>
        <param name="storyboard">The storyboard to begin.</param>
        <summary>Begins the sequence of actions that are contained in the provided storyboard.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli scenari più comuni di animazione non utilizzano questo metodo. In genere, si crea il <xref:System.Windows.Media.Animation.Storyboard> oppure <xref:System.Windows.Media.Animation.BeginStoryboard> elemento nel markup e quindi inserire queste informazioni come il <xref:System.Windows.EventTrigger> contenuto su un elemento. Durante l'attivazione dell'evento, esegue quindi l'animazione. La maggior parte degli aspetti di controllo di un <xref:System.Windows.Media.Animation.Storyboard> può essere indirizzato da proprietà esposte nel markup.  
  
 Per le firme che non usano il `isControllable`, parametro, o quando viene specificato il parametro `false`, vengono rimossi gli orologi di sequenza temporale che sono associati l'animazione non appena l'animazione raggiunge il periodo di "Riempimento". Pertanto l'animazione non può essere riavviato dopo l'esecuzione di una volta. Il controllo di un'animazione richiede inoltre che lo storyboard abbia un' [direttiva X:Name](~/docs/framework/xaml-services/x-name-directive.md) o essere accessibili per riferimento nel codice.  
  
   
  
## Examples  
 L'esempio seguente recupera una <xref:System.Windows.Media.Animation.Storyboard> dalle risorse, quindi viene eseguito tale <xref:System.Windows.Media.Animation.Storyboard> quando un evento interno è classe gestita.  
  
 [!code-csharp[CubeAnimation#FEBeginStoryboard](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Page1.xaml.cs#febeginstoryboard)]
 [!code-vb[CubeAnimation#FEBeginStoryboard](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/page1.xaml.vb#febeginstoryboard)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="frameworkElement.BeginStoryboard (storyboard, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="storyboard">The storyboard to begin.</param>
        <param name="handoffBehavior">A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</param>
        <summary>Begins the sequence of actions contained in the provided storyboard, with options specified for what should happen if the property is already animated.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli scenari più comuni di animazione non utilizzano questo metodo. In genere, si crea il <xref:System.Windows.Media.Animation.Storyboard> oppure <xref:System.Windows.Media.Animation.BeginStoryboard> elemento nel markup e quindi inserire queste informazioni come il <xref:System.Windows.EventTrigger> contenuto su un elemento. Durante l'attivazione dell'evento, esegue quindi l'animazione. La maggior parte degli aspetti di controllo di un <xref:System.Windows.Media.Animation.Storyboard> può essere indirizzato da proprietà esposte nel markup.  
  
 Per le firme che non usano il `isControllable`, parametro, o quando viene specificato il parametro `false`, vengono rimossi gli orologi di sequenza temporale che sono associati l'animazione non appena l'animazione raggiunge il periodo di "Riempimento". Pertanto l'animazione non può essere riavviato dopo l'esecuzione di una volta. Il controllo di un'animazione richiede inoltre che lo storyboard abbia un' [direttiva X:Name](~/docs/framework/xaml-services/x-name-directive.md) o essere accessibili per riferimento nel codice.  
  
 Comportamento di continuità può essere specificato come attributo del <xref:System.Windows.Media.Animation.BeginStoryboard>.  
  
## <a name="using-the-compose-handoffbehavior"></a>Utilizzando la composizione HandoffBehavior  
 Quando si applica una <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, o <xref:System.Windows.Media.Animation.AnimationClock> a una proprietà tramite il <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, qualsiasi <xref:System.Windows.Media.Animation.Clock> gli oggetti associati in precedenza a tale proprietà continuano a utilizzare risorse di sistema; il sistema di temporizzazione non non rimuovere automaticamente gli orologi di.  
  
 Per evitare problemi di prestazioni quando si applica un numero elevato di orologi con <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, è necessario rimuovere gli orologi composto dalla proprietà animata dopo il completamento. Esistono diversi modi per rimuovere un orario in formato:  
  
-   Per rimuovere tutti gli orologi da una proprietà, utilizzare il <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> o <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> metodo dell'oggetto animato. Specificare la proprietà da animare come primo parametro, e `null` come il secondo. Questo rimuove tutti gli orologi di animazione dalla proprietà.  
  
-   Per rimuovere uno specifico <xref:System.Windows.Media.Animation.AnimationClock> da un elenco di orologi, utilizzare il <xref:System.Windows.Media.Animation.Clock.Controller%2A> proprietà del <xref:System.Windows.Media.Animation.AnimationClock> per recuperare un <xref:System.Windows.Media.Animation.ClockController>, quindi chiamare il <xref:System.Windows.Media.Animation.ClockController.Remove%2A> metodo il <xref:System.Windows.Media.Animation.ClockController>. Questa operazione viene in genere eseguita <xref:System.Windows.Media.Animation.Clock.Completed> gestore eventi per un orologio. Si noti che solo i clock radice possono essere controllati da un <xref:System.Windows.Media.Animation.ClockController>; il <xref:System.Windows.Media.Animation.Clock.Controller%2A> proprietà di un orologio figlio restituisce `null`. Si noti inoltre che il <xref:System.Windows.Media.Animation.Clock.Completed> evento non viene generato se la durata effettiva dell'orologio è infinita.  In tal caso, l'utente deve determinare quando chiamare <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.  
  
 Si tratta principalmente di un problema relativo alle animazioni su oggetti di lunga durata.  Quando un oggetto è sottoposto a garbage collection, anche i clock vengono disconnessi e raccolti nel Garbage Collector.  
  
 Per ulteriori informazioni sugli oggetti di orologio, vedere [animazione e temporizzazione System Overview](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).  
  
   
  
## Examples  
 L'esempio seguente recupera una <xref:System.Windows.Media.Animation.Storyboard> dalle risorse, quindi viene eseguito tale <xref:System.Windows.Media.Animation.Storyboard> quando un evento interno è classe gestita.  
  
 [!code-csharp[CubeAnimation#FEBeginStoryboard](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Page1.xaml.cs#febeginstoryboard)]
 [!code-vb[CubeAnimation#FEBeginStoryboard](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/page1.xaml.vb#febeginstoryboard)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard * System.Windows.Media.Animation.HandoffBehavior * bool -&gt; unit" Usage="frameworkElement.BeginStoryboard (storyboard, handoffBehavior, isControllable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="storyboard">The storyboard to begin.</param>
        <param name="handoffBehavior">A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</param>
        <param name="isControllable">Declares whether the animation is controllable (can be paused) after it is started.</param>
        <summary>Begins the sequence of actions contained in the provided storyboard, with specified state for control of the animation after it is started.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli scenari più comuni di animazione non utilizzano questo metodo. In genere, si crea il <xref:System.Windows.Media.Animation.Storyboard> oppure <xref:System.Windows.Media.Animation.BeginStoryboard> elemento nel markup e quindi inserire queste informazioni come il <xref:System.Windows.EventTrigger> contenuto su un elemento. Durante l'attivazione dell'evento, esegue quindi l'animazione. La maggior parte degli aspetti di controllo di un <xref:System.Windows.Media.Animation.Storyboard> può essere indirizzato da proprietà esposte nel markup.  
  
 Per le firme che non usano il `isControllable`, parametro, o quando viene specificato il parametro `false`, vengono rimossi gli orologi di sequenza temporale che sono associati l'animazione non appena l'animazione raggiunge il periodo di "Riempimento". Pertanto l'animazione non può essere riavviato dopo l'esecuzione di una volta. Il controllo di un'animazione richiede inoltre che lo storyboard abbia un' [direttiva X:Name](~/docs/framework/xaml-services/x-name-directive.md) o essere accessibili per riferimento nel codice.  
  
 Comportamento di continuità può essere specificato come attributo del <xref:System.Windows.Media.Animation.BeginStoryboard>.  
  
## <a name="using-the-compose-handoffbehavior"></a>Utilizzando la composizione HandoffBehavior  
 Quando si applica una <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, o <xref:System.Windows.Media.Animation.AnimationClock> a una proprietà tramite il <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, qualsiasi <xref:System.Windows.Media.Animation.Clock> gli oggetti associati in precedenza a tale proprietà continuano a utilizzare risorse di sistema; il sistema di temporizzazione non non rimuovere automaticamente gli orologi di.  
  
 Per evitare problemi di prestazioni quando si applica un numero elevato di orologi con <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, è necessario rimuovere gli orologi composto dalla proprietà animata dopo il completamento. Esistono diversi modi per rimuovere un orario in formato:  
  
-   Per rimuovere tutti gli orologi da una proprietà, utilizzare il <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> o <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> metodo dell'oggetto animato. Specificare la proprietà da animare come primo parametro, e `null` come il secondo. Questo rimuove tutti gli orologi di animazione dalla proprietà.  
  
-   Per rimuovere uno specifico <xref:System.Windows.Media.Animation.AnimationClock> da un elenco di orologi, utilizzare il <xref:System.Windows.Media.Animation.Clock.Controller%2A> proprietà del <xref:System.Windows.Media.Animation.AnimationClock> per recuperare un <xref:System.Windows.Media.Animation.ClockController>, quindi chiamare il <xref:System.Windows.Media.Animation.ClockController.Remove%2A> metodo il <xref:System.Windows.Media.Animation.ClockController>. Questa operazione viene in genere eseguita <xref:System.Windows.Media.Animation.Clock.Completed> gestore eventi per un orologio. Si noti che solo i clock radice possono essere controllati da un <xref:System.Windows.Media.Animation.ClockController>; il <xref:System.Windows.Media.Animation.Clock.Controller%2A> proprietà di un orologio figlio restituisce `null`. Si noti inoltre che il <xref:System.Windows.Media.Animation.Clock.Completed> evento non viene generato se la durata effettiva dell'orologio è infinita.  In tal caso, l'utente deve determinare quando chiamare <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.  
  
 Si tratta principalmente di un problema relativo alle animazioni su oggetti di lunga durata.  Quando un oggetto è sottoposto a garbage collection, anche i clock vengono disconnessi e raccolti nel Garbage Collector.  
  
 Per ulteriori informazioni sugli oggetti di orologio, vedere [animazione e temporizzazione System Overview](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroup">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingGroup BindingGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingGroup BindingGroup" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.BindingGroup" />
      <MemberSignature Language="VB.NET" Value="Public Property BindingGroup As BindingGroup" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingGroup ^ BindingGroup { System::Windows::Data::BindingGroup ^ get(); void set(System::Windows::Data::BindingGroup ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BindingGroup : System.Windows.Data.BindingGroup with get, set" Usage="System.Windows.FrameworkElement.BindingGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.Data.BindingGroup" /> that is used for the element.</summary>
        <value>Il <see cref="T:System.Windows.Data.BindingGroup" /> utilizzato per l'elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Windows.Data.BindingGroup> può essere usato per convalidare i valori delle proprietà più di un oggetto. Ad esempio, si supponga che un'applicazione richiede all'utente di immettere un indirizzo e quindi popola un oggetto di tipo `Address`, che dispone delle proprietà `Street`, `City`, `ZipCode`, e `Country`, con i valori che l'utente fornito. L'applicazione include un pannello che contiene quattro <xref:System.Windows.Controls.TextBox> controlli, ognuno dei quali è associato a una delle proprietà dell'oggetto. È possibile utilizzare un <xref:System.Windows.Controls.ValidationRule> in un <xref:System.Windows.Data.BindingGroup> per convalidare il `Address` oggetto. Ad esempio, il <xref:System.Windows.Controls.ValidationRule> può verificare che il codice postale zip sia valido per il paese dell'indirizzo.  
  
 Gli elementi figlio ereditano il <xref:System.Windows.Data.BindingGroup> dagli elementi padre, proprio come per qualsiasi altra proprietà ereditabile.  
  
<a name="dependencyPropertyInfo_BindingGroup"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.BindingGroupProperty>|  
|Impostare le proprietà dei metadati su **true**|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 Negli esempi seguenti sono parte di un'applicazione che controlla se l'utente ha impostato la proprietà di due oggetti su valori uguali. Nel primo esempio vengono create due <xref:System.Windows.Controls.TextBox> controlli, ognuno dei quali è associato a un'origine dati diversa. Il <xref:System.Windows.Controls.StackPanel> ha un <xref:System.Windows.Data.BindingGroup> che contiene un <xref:System.Windows.Controls.ValidationRule> che verifica che le due stringhe sono uguali.  
  
 [!code-xaml[BindingGroupSnippets#BindingGroupComplete](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#bindinggroupcomplete)]  
  
 Nell'esempio seguente il <xref:System.Windows.Controls.ValidationRule> utilizzato dall'esempio precedente.  Nel <xref:System.Windows.Controls.ValidationRule.Validate%2A> override del metodo, l'esempio ottiene ogni oggetto di origine dal <xref:System.Windows.Data.BindingGroup> e controlla se le proprietà degli oggetti sono uguali.  
  
 [!code-csharp[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#bindinggroupnamevalidationrule)]
 [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#bindinggroupnamevalidationrule)]  
  
 Per richiamare il <xref:System.Windows.Controls.ValidationRule>, chiamare il <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> metodo.  L'esempio seguente chiama <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> quando si verifica l'evento click del pulsante.  
  
 [!code-csharp[BindingGroupSnippets#UpdateSourcesClick](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#updatesourcesclick)]
 [!code-vb[BindingGroupSnippets#UpdateSourcesClick](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#updatesourcesclick)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroupProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BindingGroupProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BindingGroupProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.BindingGroupProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BindingGroupProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BindingGroupProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BindingGroupProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.BindingGroupProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.BindingGroup" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BringIntoView">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Attempts to bring this element into view, within any scrollable regions it is contained within.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView();" />
      <MemberSignature Language="F#" Value="member this.BringIntoView : unit -&gt; unit" Usage="frameworkElement.BringIntoView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Attempts to bring this element into view, within any scrollable regions it is contained within.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamando questo metodo, viene generato un <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento che ha origine dall'elemento corrente. Questo evento viene generato in modo che possa essere gestita da un <xref:System.Windows.Controls.ScrollViewer>, o una classe derivata o simile. Il comportamento previsto è che l'evento è gestito dall'elemento padre, contrassegnato come gestito nei dati dell'evento, e l'origine dell'evento verrà inserito nella vista tramite la logica incorporata nel <xref:System.Windows.Controls.ScrollViewer> controllo. Né il <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento né la <xref:System.Windows.FrameworkElement.BringIntoView%2A> metodo trasmettono informazioni sull'esito positivo o negativo, che l'evento è in genere contrassegnato come gestito esito positivo. Motivi per l'errore può includere le impostazioni dell'elemento, ad esempio <xref:System.Windows.UIElement.Visibility%2A> in corso di un valore diverso da <xref:System.Windows.Visibility.Visible>.  
  
 Se si utilizza la firma che non specifica un `targetRectangle`, quindi la dimensione dell'intero elemento (relativo <xref:System.Windows.UIElement.RenderSize%2A>) saranno visibili.  
  
 Chiamando questo metodo, si chiamerà potenzialmente <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> in qualsiasi area di scorrimento padre che contiene l'elemento. Se questo elemento non è contenuto in un'area scorrevole, il <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento viene generato ugualmente, ma non vi sarà alcun effetto perché non sono presenti listener di eventi.  
  
   
  
## Examples  
 Nell'esempio seguente implementa un gestore per un evento di navigazione dell'applicazione che risponde ogni volta che il [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] esplorato include un frammento. Il frammento viene denominato nel [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] che segue il segno hash (#), e il comportamento implementato fa sì che l'elemento scorrere all'interno della visualizzazione all'interno della cornice. <xref:System.Windows.FrameworkElement.BringIntoView%2A> e <xref:System.Windows.FrameworkElement.RequestBringIntoView> tale comportamento di scorrimento nell'esempio di richiesta.  
  
 [!code-csharp[FragmentNavigationSample#FEBringIntoView](~/samples/snippets/csharp/VS_Snippets_Wpf/FragmentNavigationSample/CSharp/MainWindow.xaml.cs#febringintoview)]
 [!code-vb[FragmentNavigationSample#FEBringIntoView](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FragmentNavigationSample/VisualBasic/MainWindow.xaml.vb#febringintoview)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView (System.Windows.Rect targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView(valuetype System.Windows.Rect targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView (targetRectangle As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView(System::Windows::Rect targetRectangle);" />
      <MemberSignature Language="F#" Value="member this.BringIntoView : System.Windows.Rect -&gt; unit" Usage="frameworkElement.BringIntoView targetRectangle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetRectangle" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="targetRectangle">Specified size of the element that should also be brought into view.</param>
        <summary>Attempts to bring the provided region size of this element into view, within any scrollable regions it is contained within.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamando questo metodo, viene generato un <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento che ha origine dall'elemento corrente. Questo evento viene generato in modo che possa essere gestita da un <xref:System.Windows.Controls.ScrollViewer>, o una classe derivata o simile. Il comportamento previsto è che l'evento è gestito dall'elemento padre, contrassegnato come gestito nei dati dell'evento, e l'origine dell'evento verrà inserito nella vista tramite la logica incorporata nel <xref:System.Windows.Controls.ScrollViewer> controllo. Né il <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento né la <xref:System.Windows.FrameworkElement.BringIntoView%2A> metodo trasmettono informazioni sull'esito positivo o negativo, che l'evento è in genere contrassegnato come gestito esito positivo. Motivi per l'errore può includere le impostazioni dell'elemento, ad esempio <xref:System.Windows.UIElement.Visibility%2A> in corso di un valore diverso da <xref:System.Windows.Visibility.Visible>.  
  
 Se si utilizza la firma che non specifica un `targetRectangle`, quindi la dimensione dell'intero elemento (relativo <xref:System.Windows.UIElement.RenderSize%2A>) saranno visibili.  
  
 Chiamando questo metodo, si chiamerà potenzialmente <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> in qualsiasi area di scorrimento padre che contiene l'elemento. Se questo elemento non è contenuto in un'area scorrevole, il <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento viene generato ugualmente, ma non vi sarà alcun effetto perché non sono presenti listener di eventi.  
  
   
  
## Examples  
 Nell'esempio seguente è un immagine di grandi dimensioni in un'area di scorrimento vincolata. Un pulsante nella pagina dispone di un gestore che scorre la visualizzazione per una determinata area nel grafico di grandi dimensioni.  
  
 [!code-xaml[BaseElementsSmorgasbord#BringIntoViewRectMarkup](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml#bringintoviewrectmarkup)]  
  
 [!code-csharp[BaseElementsSmorgasbord#BringIntoViewRectCode](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#bringintoviewrectcode)]
 [!code-vb[BaseElementsSmorgasbord#BringIntoViewRectCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#bringintoviewrectcode)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.FlowDocumentScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ContextMenu ContextMenu { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ContextMenu ContextMenu" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ContextMenu" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextMenu As ContextMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ContextMenu ^ ContextMenu { System::Windows::Controls::ContextMenu ^ get(); void set(System::Windows::Controls::ContextMenu ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextMenu : System.Windows.Controls.ContextMenu with get, set" Usage="System.Windows.FrameworkElement.ContextMenu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the context menu element that should appear whenever the context menu is requested through [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] from within this element.</summary>
        <value>Menu di scelta rapida assegnato all'elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ContextMenu> è un <xref:System.Windows.FrameworkElement> classe derivata, ed è tecnicamente possibile per <xref:System.Windows.Controls.ContextMenu> disponga di un <xref:System.Windows.FrameworkElement.ContextMenu%2A> proprietà. Tuttavia, questo crea confusione nell'esperienza menu di scelta rapida per l'utente e questa operazione non è consigliabile.  
  
<a name="dependencyPropertyInfo_ContextMenu"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.ContextMenuProperty>|  
|Impostare le proprietà dei metadati su `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ContextMenuClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuClosing As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuClosing;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuClosing : System.Windows.Controls.ContextMenuEventHandler " Usage="member this.ContextMenuClosing : System.Windows.Controls.ContextMenuEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs just before any context menu on the element is closed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per evitare la chiusura menu di scelta rapida, i gestori dell'evento che venga contrassegnato come gestito.  
  
 Per usare questo evento come un <xref:System.Windows.EventTrigger> in uno stile, è necessario fare riferimento alla sottostante definizione del servizio dell'evento:  
  
 [!code-xaml[CorePseudocode#FEContextMenuClosing](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuclosing)]  
  
 (Questo utilizzo è obbligatorio poiché l'implementazione di eventi in <xref:System.Windows.FrameworkElement> che espone l'evento servizio sottostante non è mappato il <xref:System.Windows.FrameworkElement.ContextMenuClosing> identificatore in modo che è possibile utilizzarlo come trigger).  
  
 <xref:System.Windows.Controls.ContextMenu> è un <xref:System.Windows.FrameworkElement> derivata, ma la <xref:System.Windows.FrameworkElement.ContextMenuClosing> evento non verrà generato direttamente da un menu di scelta rapida. Al contrario, l'evento viene generato dall'elemento del menu di scelta rapida come una proprietà è "proprietario" e viene generato solo quando un utente tenta di chiudere un menu di scelta rapida nell'interfaccia utente. Tuttavia è possibile <xref:System.Windows.Controls.ContextMenu> disponga di un <xref:System.Windows.FrameworkElement.ContextMenu%2A> proprietà (un menu di scelta rapida annidato). In questo caso il <xref:System.Windows.Controls.ContextMenu> effettivamente proprietà annidata <xref:System.Windows.Controls.ContextMenu> e potrebbe generare l'evento, con l'origine dell'evento è il menu di scelta rapida annidato.  
  
 Il <xref:System.Windows.Controls.ContextMenu> classe dispone anche di un evento simile (<xref:System.Windows.Controls.ContextMenu.Closed>), ma il <xref:System.Windows.Controls.ContextMenu.Closed> evento non si fornisce la possibilità di annullare l'azione dell'utente.  
  
<a name="routedEventInfo_ContextMenuClosing"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.ContextMenuClosingEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuClosingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuClosingEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ContextMenuClosingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ContextMenuOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuOpening As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuOpening;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuOpening : System.Windows.Controls.ContextMenuEventHandler " Usage="member this.ContextMenuOpening : System.Windows.Controls.ContextMenuEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when any context menu on the element is opened.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per aprire manualmente menu di scelta rapida, i gestori degli eventi necessario contrassegnare l'evento pertinente come gestito. In caso contrario, il valore esistente del <xref:System.Windows.FrameworkElement.ContextMenu%2A> proprietà verrà utilizzata per aprire automaticamente un menu di scelta rapida. Contrassegnare l'evento gestito in modo efficace annullerà l'azione predefinita e potrebbe essere la possibilità di reimpostare il valore della <xref:System.Windows.FrameworkElement.ContextMenu%2A> proprietà e quindi aprire il nuovo <xref:System.Windows.Controls.ContextMenu>. Tuttavia, si verifica un problema di temporizzazione di che è necessario essere consapevoli. Per sostituire completamente il menu di scelta rapida tramite un <xref:System.Windows.FrameworkElement.ContextMenuOpening> gestore, i menu di scelta rapida iniziale non deve essere null o vuoto. In alternativa, potrebbe essere necessario gestire l'evento e quindi aprire manualmente un nuovo menu di scelta rapida. Per informazioni dettagliate, vedere [procedura: gestire l'evento ContextMenuOpening](~/docs/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event.md).  
  
 Per usare questo evento come un <xref:System.Windows.EventTrigger> in uno stile, è necessario fare riferimento evento sottostante:  
  
 [!code-xaml[CorePseudocode#FEContextMenuOpening](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuopening)]  
  
 (Questo utilizzo è obbligatorio poiché l'implementazione di eventi in <xref:System.Windows.FrameworkElement> che espone l'evento servizio sottostante non è mappato il <xref:System.Windows.FrameworkElement.ContextMenuOpening> identificatore in modo che è possibile utilizzarlo nei trigger).  
  
 <xref:System.Windows.Controls.ContextMenu> è un <xref:System.Windows.FrameworkElement> classe derivata, ma non verrà generato questo evento dal menu di scelta rapida viene aperto come origine. L'evento viene generato dall'elemento del menu di scelta rapida come una proprietà è "proprietario" e viene generato solo quando un utente tenta di aprire un menu di scelta rapida nell'interfaccia utente. È possibile <xref:System.Windows.Controls.ContextMenu> disponga di un <xref:System.Windows.FrameworkElement.ContextMenu%2A> proprietà, ma è consigliabile evitare questo scenario (per informazioni dettagliate, vedere <xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=nameWithType>).  
  
 Il <xref:System.Windows.Controls.ContextMenu> classe dispone anche di un evento simile (<xref:System.Windows.Controls.ContextMenu.Opened>), ma <xref:System.Windows.Controls.ContextMenu.Opened> non fornisce la possibilità di annullare l'azione dell'utente.  
  
<a name="routedEventInfo_ContextMenuOpening"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.ContextMenuOpeningEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuOpeningEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuOpeningEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ContextMenuOpeningEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ContextMenuProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ContextMenuProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ContextMenuProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ContextMenuProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.ContextMenu" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Cursor Cursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Cursor Cursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Cursor" />
      <MemberSignature Language="VB.NET" Value="Public Property Cursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Cursor ^ Cursor { System::Windows::Input::Cursor ^ get(); void set(System::Windows::Input::Cursor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Cursor : System.Windows.Input.Cursor with get, set" Usage="System.Windows.FrameworkElement.Cursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the cursor that displays when the mouse pointer is over this element.</summary>
        <value>Cursore da visualizzare. Il valore predefinito è definito come <see langword="null" /> in base a questa proprietà di dipendenza. Tuttavia, l'impostazione predefinita pratica in fase di esecuzione dipenderà da numerosi fattori.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si imposta questa proprietà [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], il [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processore si basa sulla conversione del tipo per il <xref:System.Windows.Input.Cursor> (classe) per valutare la stringa. La stringa deve restituire un <xref:System.Windows.Input.CursorType> valore. Per informazioni dettagliate, vedere <xref:System.Windows.Input.Cursor>.  
  
 Se il cursore definito da questa proprietà o non verranno visualizzati quando il puntatore del mouse è posizionato sull'elemento dipende anche il valore della <xref:System.Windows.FrameworkElement.ForceCursor%2A> proprietà. Inoltre, le considerazioni correlate all'evento, ad esempio un trascinamento attivo lo stato mouse capture, la modifica di modalità di controlli e così via, del testo avrà effetto anche sul cursore con priorità più alta rispetto al valore specificato in questa proprietà.  
  
 Per ripristinare il comportamento dell'impostazione di questa proprietà sul valore predefinito di eventuale, impostarla su `null` nuovamente.  
  
 Il `null` predefinito in realtà indica che la definizione del valore del cursore pratico è rinviata qui e deve essere ottenuta da un punto qualsiasi. Se viene visualizzata senza valori a livello di codice da qualsiasi origine, il cursore predefinito che è visivamente su una [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] applicazione sarà una freccia. Tuttavia, le modifiche di cursore temporaneo non è impostate la <xref:System.Windows.FrameworkElement.Cursor%2A> valori degli elementi quando vengono passati. Il <xref:System.Windows.FrameworkElement.Cursor%2A> proprietà verrà solo valori non null nei casi in cui effettivamente impostata, per l'istanza tramite codice o uno stile. Ogni movimento del mouse su un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] applicazione genera un <xref:System.Windows.UIElement.QueryCursor> evento. L'evento si propaga e qualsiasi altro elemento lungo la route ha la possibilità di gestire l'evento e di impostare il valore del cursore tramite gli argomenti dell'evento. Questo è il meccanismo che produce il visualizzazione del cursore nella maggior parte dei casi. Se un <xref:System.Windows.UIElement.QueryCursor> gestore restituisce un risultato del cursore, quindi il fatto che l'evento è gestito e presenta un valore modificato negli argomenti di ha la precedenza sul valore della <xref:System.Windows.FrameworkElement.Cursor%2A> proprietà in qualsiasi livello, a meno che non <xref:System.Windows.FrameworkElement.ForceCursor%2A> è impostata.  
  
 Se non sta creando un cursore personalizzato, in genere impostata questa proprietà su un valore di proprietà statica del <xref:System.Windows.Input.Cursors> classe. Impostazione <xref:System.Windows.FrameworkElement.Cursor%2A> nel codice richiede uno dei seguenti:  
  
-   Chiamare il <xref:System.Windows.Input.Cursor> costruttore da ottenere un <xref:System.Windows.Input.Cursor> istanza. Entrambe le firme del <xref:System.Windows.Input.Cursor> costruttore utilizzare flussi o file, perché si prevede che si sta creando il <xref:System.Windows.Input.Cursor> oggetto per un cursore personalizzato.  
  
-   Utilizzare la <xref:System.Windows.Input.CursorConverter> classe e il relativo <xref:System.Windows.Input.CursorConverter.ConvertFrom%2A> metodo per specificare un cursore mediante <xref:System.Windows.Input.CursorType>, o una stringa che può restituire un <xref:System.Windows.Input.CursorType>ed eseguire il cast il valore restituito per <xref:System.Windows.Input.Cursor>.  
  
 Impostazione di <xref:System.Windows.Input.Cursor> su un valore personalizzato non è abilitato in attendibilità parziale. Per ulteriori informazioni sui cursori personalizzati, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_Cursor"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.CursorProperty>|  
|Impostare le proprietà dei metadati su `true`|nessuno|  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come impostare deliberatamente elemento grafico del cursore.  
  
 [!code-csharp[cursors#ChangeCursorsSample](~/samples/snippets/csharp/VS_Snippets_Wpf/cursors/CSharp/Window1.xaml.cs#changecursorssample)]
 [!code-vb[cursors#ChangeCursorsSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/cursors/VisualBasic/Window1.xaml.vb#changecursorssample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
        <altmember cref="P:System.Windows.FrameworkElement.ForceCursor" />
        <altmember cref="P:System.Windows.Input.Mouse.OverrideCursor" />
      </Docs>
    </Member>
    <Member MemberName="CursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.CursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CursorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CursorProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.CursorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Cursor" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContext">
      <MemberSignature Language="C#" Value="public object DataContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.DataContext" />
      <MemberSignature Language="VB.NET" Value="Public Property DataContext As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataContext { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataContext : obj with get, set" Usage="System.Windows.FrameworkElement.DataContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the data context for an element when it participates in data binding.</summary>
        <value>Oggetto da usare come contesto dei dati.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 *Contesto dati* è un concetto che consente agli elementi di ereditare informazioni dagli elementi padre sull'origine dati che viene utilizzato per l'associazione e su altre caratteristiche dell'associazione, ad esempio il percorso.  
  
 Contesto dei dati può essere impostato direttamente su un [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] oggetto, con le associazioni restituiscono le proprietà di tale oggetto. In alternativa, è possibile impostare il contesto dei dati un <xref:System.Windows.Data.DataSourceProvider> oggetto.  
  
 Questa proprietà di dipendenza eredita i valori delle proprietà. Se non esistono elementi figlio senza altri valori per <xref:System.Windows.FrameworkElement.DataContext%2A> stabilita tramite valori locali o gli stili, il sistema di proprietà verrà impostato il valore sarà il <xref:System.Windows.FrameworkElement.DataContext%2A> valore dell'elemento padre più vicino con questo valore assegnato.  
  
 In alternativa, è possibile utilizzare una delle seguenti proprietà del <xref:System.Windows.Data.Binding> classe per specificare in modo esplicito l'origine di associazione: <xref:System.Windows.Data.Binding.ElementName%2A>, <xref:System.Windows.Data.Binding.Source%2A>, o <xref:System.Windows.Data.Binding.RelativeSource%2A>. Per altre informazioni, vedere [procedura: specificare l'origine di associazione](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md).  
  
 In [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], <xref:System.Windows.FrameworkElement.DataContext%2A> generalmente è impostato come un <xref:System.Windows.Data.Binding> dichiarazione. È possibile utilizzare la sintassi degli elementi di proprietà o la sintassi degli attributi. Sintassi degli attributi è illustrata nell'esempio in questa pagina. È inoltre possibile utilizzare codice per impostare <xref:System.Windows.FrameworkElement.DataContext%2A>.  
  
 <xref:System.Windows.FrameworkElement.DataContext%2A> è una proprietà associabile, per semplificare gli scenari in cui un contesto può essere associato a un altro. Tuttavia, se si associa a <xref:System.Windows.FrameworkElement.DataContext%2A>, prestare attenzione a non creare riferimenti di associazione circolari (non è possibile associare un <xref:System.Windows.FrameworkElement.DataContext%2A> al suo interno, che è possibile eseguire questa operazione a causa della natura di ereditarietà di valore di proprietà del <xref:System.Windows.FrameworkElement.DataContext%2A> proprietà).  
  
<a name="xamlPropertyElementUsage_DataContext"></a>   
## <a name="xaml-property-element-usage"></a>Utilizzo della sintassi XAML per elementi proprietà  
  
```  
<object>  
  <object.DataContext>  
    <dataContextObject />  
  </object.DataContext>  
</object>  
```  
  
<a name="xamlAttributeUsage_DataContext"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object DataContext="bindingUsage"/>  
- or -  
<object DataContext="{resourceExtension contextResourceKey}"/>  
```  
  
<a name="xamlValues_DataContext"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *dataContextObject*  
 Un oggetto direttamente incorporato che serve come contesto dei dati per tutte le associazioni all'interno dell'elemento padre. In genere, questo oggetto è un <xref:System.Windows.Data.Binding> o un altro <xref:System.Windows.Data.BindingBase> classe derivata. In alternativa, i dati non elaborati di qualsiasi [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] dell'oggetto di tipo designato per l'associazione può essere inserita qui, con le associazioni effettive definite in un secondo momento.  
  
 *bindingUsage*  
 Un utilizzo dell'associazione che restituisce un contesto dei dati appropriati. Per informazioni dettagliate, vedere [Estensione di markup Binding](~/docs/framework/wpf/advanced/binding-markup-extension.md).  
  
 *ResourceExtension*  
 Uno dei seguenti: o. Questo utilizzo viene utilizzato quando si fa riferimento ai dati non elaborati definiti come un oggetto nelle risorse. Vedere [risorse XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
 *contextResourceKey*  
 L'identificatore di chiave per l'oggetto richiesto dall'interno un <xref:System.Windows.ResourceDictionary>.  
  
<a name="dependencyPropertyInfo_DataContext"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.DataContextProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come un contesto dati agisce su un'associazione e vengono fornite le informazioni che definiscono i valori specifici delle proprietà associate.  
  
 [!code-xaml[MasterDetail#DataContextProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty)]  
[!code-xaml[MasterDetail#DataContextProperty2](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty2)]  
[!code-xaml[MasterDetail#DataContextProperty3](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler DataContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler DataContextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.DataContextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataContextChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ DataContextChanged;" />
      <MemberSignature Language="F#" Value="member this.DataContextChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.DataContextChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the data context for this element changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per una spiegazione dei contesti dati e il data binding, vedere [Panoramica sul Data Binding](~/docs/framework/wpf/data/data-binding-overview.md).  
  
> [!IMPORTANT]
>  Quando il <xref:System.Windows.FrameworkElement.DataContext%2A> per un elemento cambia, potenzialmente interessate tutte le proprietà di associazione a dati per questo elemento. Questo vale per tutti gli elementi che sono elementi figlio dell'elemento corrente nell'albero logico, che ereditano il contesto dei dati, nonché lo stesso elemento corrente. Tali associazioni esistenti devono reinterpretare nuovo <xref:System.Windows.FrameworkElement.DataContext%2A> e rivaluterà risultati dell'associazione. Il motore di data binding non è deterministico sull'ordine di queste rivalutazioni, relativo alla generazione del <xref:System.Windows.FrameworkElement.DataContextChanged> evento. Le rivalutazioni possono verificarsi prima dell'evento, dopo l'evento o in qualsiasi combinazione.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.DataContext" />
      </Docs>
    </Member>
    <Member MemberName="DataContextProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty DataContextProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty DataContextProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.DataContextProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DataContextProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ DataContextProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable DataContextProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.DataContextProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.DataContext" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKey">
      <MemberSignature Language="C#" Value="protected internal object DefaultStyleKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultStyleKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.DefaultStyleKey" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property DefaultStyleKey As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Object ^ DefaultStyleKey { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultStyleKey : obj with get, set" Usage="System.Windows.FrameworkElement.DefaultStyleKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the key to use to reference the style for this control, when theme styles are used or defined.</summary>
        <value>Chiave di stile. Perché funzioni correttamente durante la ricerca dello stile del tema, l'oggetto <see cref="T:System.Type" /> di questo valore deve corrispondere a quello del controllo a cui viene applicato lo stile.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà non è in genere impostata tramite una delle relative funzioni di accesso diretta delle proprietà. Al contrario, si esegue l'override i metadati specifici del tipo di questa proprietà di dipendenza ogni volta che si crea un nuovo <xref:System.Windows.FrameworkElement> classe derivata. Quando si deriva un controllo, chiamare il <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> metodo contro il <xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty> identificatore, all'interno del costruttore statico del controllo derivato classe (o inizializzazione della classe equivalente).  
  
 In genere un controllo sostituisce il valore predefinito di questa proprietà su un proprio tipo, ma in alcuni casi può anche usare un tipo di base per il quale esiste uno stile nei dizionari del tema. Ciò è pratica solo se i modelli di controllo del controllo di base definiscono completamente la rappresentazione visiva del controllo derivato e se qualsiasi ulteriore membro espongano i tipi derivati non sono necessari elementi aggiuntivi all'interno del modello di controllo.  
  
 Se si desidera che l'elemento o il controllo sceglie intenzionalmente di non utilizzare gli stili del tema, impostare il <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> proprietà `true`.  
  
<a name="dependencyPropertyInfo_DefaultStyleKey"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato l'utilizzo di override dei metadati di proprietà di dipendenza discusso nella sezione Osservazioni. Questo codice definisce una classe del controllo personalizzato `NumericUpDown` dovrà essere utilizzato da un assembly libreria di controlli dedicata. Il costruttore statico illustrato fa riferimento a una funzione di inizializzazione privata, registra un gestore di classe (un altro scenario comune di creazione di una sottoclasse controllo, vedere [contrassegnare gli eventi indirizzati come Handled e la gestione della classe](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)) e infine esegue l'override di <xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> dei metadati di proprietà di dipendenza sul `NumericUpDown` classe. <xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> Restituisce sempre un tipo specifico come chiave designata, che è la convenzione utilizzata dal sistema di stile del tema per cercare lo stile di un controllo in caso contrario, non nello stile arbitrario. Nell'esempio completo definisce anche lo stile di tema del controllo effettivo che fa riferimento la chiave; vedere [controllo personalizzato NumericUpDown con esempio supporto di automazione interfaccia utente e il tema](http://go.microsoft.com/fwlink/?LinkID=160025).  
  
 [!code-csharp[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/NumericUpDown.cs#staticctorofcustomclasscommontasks)]
 [!code-vb[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary/numericupdown.vb#staticctorofcustomclasscommontasks)]  
[!code-csharp[CustomControlNumericUpDown#Close](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/NumericUpDown.cs#close)]
[!code-vb[CustomControlNumericUpDown#Close](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary/numericupdown.vb#close)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKeyProperty">
      <MemberSignature Language="C#" Value="protected internal static readonly System.Windows.DependencyProperty DefaultStyleKeyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly static initonly class System.Windows.DependencyProperty DefaultStyleKeyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.DefaultStyleKeyProperty" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared ReadOnly DefaultStyleKeyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="protected public: static initonly System::Windows::DependencyProperty ^ DefaultStyleKeyProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultStyleKeyProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.DefaultStyleKeyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.DefaultStyleKey" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public virtual void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="frameworkElement.EndInit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates that the initialization process for the element is complete.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se <xref:System.Windows.FrameworkElement.BeginInit%2A> è stato chiamato in precedenza, la base implementazione genererà il <xref:System.Windows.FrameworkElement.Initialized> evento. In caso contrario, se <xref:System.Windows.FrameworkElement.BeginInit%2A> non è stato chiamato o non è stato possibile determinare se <xref:System.Windows.FrameworkElement.BeginInit%2A> è stato chiamato, <xref:System.Windows.FrameworkElement.Initialized> non viene generato e viene invece generata un'eccezione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Windows.FrameworkElement.EndInit" /> was called without <see cref="M:System.Windows.FrameworkElement.BeginInit" /> having previously been called on the element.</exception>
        <block subset="none" type="overrides">
          <para>Implementare questo metodo per fornire una gestione speciale che deve verificarsi quando l'elemento viene inizializzato durante il processo di caricamento dell'elemento.  L'implementazione deve chiamare l'implementazione di base, poiché l'implementazione di base (valore predefinito) imposta un flag interno per tenere traccia dell'inizializzazione.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.FindName : string -&gt; obj" Usage="frameworkElement.FindName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the requested element.</param>
        <summary>Finds an element that has the provided identifier name.</summary>
        <returns>The requested element. This can be <see langword="null" /> if no matching element was found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'elemento contiene elementi figlio, tali elementi figlio sono tutti effettuata in modo ricorsivo per il nome di elemento richiesto.  
  
 <xref:System.Windows.FrameworkElement.FindName%2A> funziona all'interno di ambito dei nomi dell'elemento corrente. Per informazioni dettagliate, vedere [ambiti dei nomi XAML di WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.FrameworkElement.Name" />
      </Docs>
    </Member>
    <Member MemberName="FindResource">
      <MemberSignature Language="C#" Value="public object FindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.FindResource : obj -&gt; obj" Usage="frameworkElement.FindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey">The key identifier for the requested resource.</param>
        <summary>Searches for a resource with the specified key, and throws an exception if the requested resource is not found.</summary>
        <returns>The requested resource. If no resource with the provided key was found, an exception is thrown. An <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> value might also be returned in the exception case.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Se si chiama questo metodo per una chiave che non è stata trovata, viene generata un'eccezione. Se non si desidera gestire le eccezioni generate dalla chiamata <xref:System.Windows.FrameworkElement.FindResource%2A>, chiamare <xref:System.Windows.FrameworkElement.TryFindResource%2A> invece. <xref:System.Windows.FrameworkElement.TryFindResource%2A> Restituisce `null` quando una risorsa richiesta non è stata trovata e non viene generata un'eccezione.  
  
 Se la risorsa non viene trovata nell'elemento chiamante, l'elemento padre nell'albero logico viene cercata Avanti, quindi l'applicazione, quindi i temi e infine le risorse di sistema. Questa metodologia di ricerca è identica al modo in cui l'albero viene eseguita la ricerca se una risorsa sono stati richiesti da un riferimento di risorsa dinamica nel markup. Per ulteriori informazioni sulla ricerca di risorse, vedere [risorse XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
 In genere, si esegue immediatamente il cast un <xref:System.Windows.FrameworkElement.FindResource%2A> valore restituito per il tipo della proprietà che si sta impostando con il valore della risorsa restituito.  
  
 Chiavi di risorsa non sono necessariamente stringhe. Ad esempio, gli stili per i controlli a livello di tema sono deliberatamente chiave per la <xref:System.Type> del controllo e gli stili dell'applicazione o pagina per i controlli utilizzano in genere questa stessa convenzione di chiavi. Per informazioni dettagliate, vedere [stili e modelli](~/docs/framework/wpf/controls/styling-and-templating.md) oppure [risorse XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
   
  
## Examples  
 Nell'esempio seguente ottiene una risorsa denominata e ne esegue il cast a un tipo appropriato per riempire una proprietà.  
  
 [!code-csharp[PropertiesOvwSupport#ResourceProceduralGet](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertiesOvwSupport/CSharp/page3.xaml.cs#resourceproceduralget)]
 [!code-vb[PropertiesOvwSupport#ResourceProceduralGet](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertiesOvwSupport/visualbasic/page3.xaml.vb#resourceproceduralget)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Windows.ResourceReferenceKeyNotFoundException">
          <paramref name="resourceKey" /> was not found and an event handler does not exist for the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> event.  -or-  <paramref name="resourceKey" /> was not found and the <see cref="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled" /> property is <see langword="false" /> in the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> event.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceKey" /> is <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FlowDirection">
      <MemberSignature Language="C#" Value="public System.Windows.FlowDirection FlowDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FlowDirection FlowDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.FlowDirection" />
      <MemberSignature Language="VB.NET" Value="Public Property FlowDirection As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::FlowDirection FlowDirection { System::Windows::FlowDirection get(); void set(System::Windows::FlowDirection value); };" />
      <MemberSignature Language="F#" Value="member this.FlowDirection : System.Windows.FlowDirection with get, set" Usage="System.Windows.FrameworkElement.FlowDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the direction that text and other [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] elements flow within any parent element that controls their layout.</summary>
        <value>La direzione del testo e altri [! INCLUDE[TLA2#tla_ui](~/Includes/tla2sharptla-UI-MD.MD)] elementi all'interno del rispettivo elemento padre, come valore dell'enumerazione. Il valore predefinito è <see cref="F:System.Windows.FlowDirection.LeftToRight" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzo della proprietà di dipendenza imposta il <xref:System.Windows.FrameworkElement.FlowDirection%2A> per questo elemento. A causa di ereditarietà del valore proprietà, l'impostazione <xref:System.Windows.FrameworkElement.FlowDirection%2A> su un elemento può impostare potenzialmente <xref:System.Windows.FrameworkElement.FlowDirection%2A> tutti gli elementi figlio che non è stata impostata <xref:System.Windows.FrameworkElement.FlowDirection%2A> localmente o in altri modi, ad esempio stili.  
  
 Questa proprietà non viene impostata automaticamente come parte delle informazioni delle impostazioni cultura dell'applicazione, perché un elemento potrebbe includere contenuto che non necessariamente deve applicata la direzione di flusso generale in cui è inclusa l'informazioni sulle impostazioni cultura. Per ulteriori informazioni sulla globalizzazione, vedere [globalizzazione per WPF](~/docs/framework/wpf/advanced/globalization-for-wpf.md).  
  
 Questa proprietà è definita un' [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] proprietà delle funzioni di accesso, in modo che funziona come una proprietà di dipendenza. Tuttavia, viene registrato anche come associata, pertanto può essere utilizzato anche come una proprietà associata. La registrazione associata è principalmente destinata a ereditarietà del valore di proprietà è supportata, ma la proprietà può essere utilizzata anche come una proprietà associata di true. L'utilizzo della proprietà associata è pertinente solo se l'oggetto si intende impostare la direzione del flusso ha una <xref:System.Windows.FrameworkElement> elemento padre che esegue il layout su di esso, non costituisce un <xref:System.Windows.FrameworkElement>e non dispone già di un modo più diretto definito `FlowDirection` proprietà. (Parte del flusso di documento, ad esempio le classi <xref:System.Windows.Documents.Block> e <xref:System.Windows.Documents.Inline> definire i propri `FlowDirection`, e questa proprietà può anche impostare la direzione del flusso. Il valore della proprietà viene letto dall'eventuale contenuto host senza richiedere l'utilizzo della proprietà associata.)  
  
<a name="xamlAttributeUsage_FlowDirection"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
 \<*oggetto* **FlowDirection**= "<xref:System.Windows.FlowDirection>" / >  
  
<a name="xamlTextUsage_FlowDirection"></a>   
## <a name="xaml-text-usage"></a>Utilizzo di testo XAML  
 Questa proprietà può essere impostata anche per classi che non sono <xref:System.Windows.FrameworkElement> classi derivate, nell'esempio seguente [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] utilizzo della proprietà associata:  
  
 `<` *object* `FrameworkElement.`**FlowDirection**="<xref:System.Windows.FlowDirection>`"/>`  
  
<a name="dependencyPropertyInfo_FlowDirection"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.FlowDirectionProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 Questa proprietà è una proprietà di dipendenza sia una proprietà associata. vedere la sezione Osservazioni.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlowDirectionProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FlowDirectionProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FlowDirectionProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.FlowDirectionProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FlowDirectionProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FlowDirectionProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FlowDirectionProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.FlowDirectionProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style FocusVisualStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style FocusVisualStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.FocusVisualStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property FocusVisualStyle As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ FocusVisualStyle { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FocusVisualStyle : System.Windows.Style with get, set" Usage="System.Windows.FrameworkElement.FocusVisualStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a property that enables customization of appearance, effects, or other style characteristics that will apply to this element when it captures keyboard focus.</summary>
        <value>Stile desiderato da applicare allo stato attivo. Il valore predefinito dichiarato nella proprietà di dipendenza è un classe statica vuota <see cref="T:System.Windows.Style" />. Tuttavia, il valore effettivo in fase di esecuzione è spesso, ma non sempre, uno stile specificato dal supporto dei temi per i controlli.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà influisce sull'aspetto visivo ma non è stata segnalata <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> nei metadati. Infatti, la modifica dell'aspetto visivo è basato su eventi potrebbe non essere applicabile a tutti gli orari e pertanto non deve in genere segnalare qualsiasi informazione visual o layout nei metadati.  
  
 Concettualmente, il comportamento visivo di concentrazione applicati a un controllo deve essere coerente da un controllo a un altro. Il modo più appropriato per assicurare la coerenza consiste nel modificare solo lo stile di visualizzazione dello stato attivo se si sta scrivendo un tema completo. Impostazione di questa proprietà su stili del controllo singoli e non come parte di un tema non è l'utilizzo previsto di questa proprietà, perché potrebbe generare confusione nell'esperienza utente relativamente allo stato attivo. Se si sta prendendo in considerazione il comportamento di specifica del controllo che si sceglie intenzionalmente di non coerente all'interno di un tema, un approccio migliore consiste nell'utilizzare i trigger negli stili per le proprietà di singoli dello stato di input, ad esempio <xref:System.Windows.UIElement.IsFocused%2A> o <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>e a tale scopo in modo che non sono presenti visivamente interferire con gli stili di visualizzazione dello stato attivo esistente. Per ulteriori informazioni sugli scopi della progettazione della <xref:System.Windows.FrameworkElement.FocusVisualStyle%2A> e alternativi concentrare le proprietà, vedere [stile per lo stato attivo nei controlli e FocusVisualStyle](~/docs/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle.md).  
  
<a name="xamlAttributeUsage_FocusVisualStyle"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object FocusVisualStyle="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_FocusVisualStyle"></a>   
## <a name="xaml-property-element-usage"></a>Utilizzo della sintassi XAML per elementi proprietà  
  
<a name="xamlValues_FocusVisualStyle"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *ResourceExtension*  
 Uno dei seguenti:, o. Vedere [risorse XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
 *styleResourceKey*  
 La chiave che identifica lo stile richiesto. La chiave fa riferimento a una risorsa esistente in un <xref:System.Windows.ResourceDictionary>.  
  
> [!NOTE]
>  La sintassi degli elementi è tecnicamente possibile, ma non è consigliata. Vedere [stili Inline e modelli](~/docs/framework/wpf/advanced/inline-styles-and-templates.md). Riferimento a un'associazione utilizzando o <xref:System.Windows.Data.Binding> è anche possibile, ma non comune.  
  
<a name="dependencyPropertyInfo_FocusVisualStyle"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.FocusVisualStyleProperty>|  
|Impostare le proprietà dei metadati su `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusVisualStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusVisualStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.FocusVisualStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusVisualStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusVisualStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusVisualStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.FocusVisualStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.FocusVisualStyle" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceCursor">
      <MemberSignature Language="C#" Value="public bool ForceCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ForceCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ForceCursor" />
      <MemberSignature Language="VB.NET" Value="Public Property ForceCursor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ForceCursor { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ForceCursor : bool with get, set" Usage="System.Windows.FrameworkElement.ForceCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether this <see cref="T:System.Windows.FrameworkElement" /> should force the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] to render the cursor as declared by the <see cref="P:System.Windows.FrameworkElement.Cursor" /> property.</summary>
        <value>
          <see langword="true" /> Se la presentazione del cursore posizionato sull'elemento viene forzata l'utilizzo corrente <see cref="P:System.Windows.FrameworkElement.Cursor" /> le impostazioni per il cursore (inclusi tutti gli elementi figlio); in caso contrario <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se si imposta questa proprietà su `true` si eseguirà l'override di preferenze del cursore definite dagli elementi figlio. Tale operazione pertanto in generale dell'applicazione [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] potrebbe risultare poco chiaro per l'utente, in particolare se siano tentando di elementi figlio specificare i cursori. Impostazione <xref:System.Windows.FrameworkElement.ForceCursor%2A> più appropriato in scenari di creazione di una sottoclasse o la composizione del controllo.  
  
<a name="dependencyPropertyInfo_ForceCursor"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.ForceCursorProperty>|  
|Impostare le proprietà dei metadati su `true`|nessuno|  
  
   
  
## Examples  
 Nell'esempio seguente forza il valore di cursore.  
  
 [!code-xaml[ForceCursor#ForceCursor](~/samples/snippets/csharp/VS_Snippets_Wpf/ForceCursor/CS/default.xaml#forcecursor)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="ForceCursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ForceCursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ForceCursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ForceCursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ForceCursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ForceCursorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ForceCursorProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ForceCursorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.ForceCursor" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpression">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression GetBindingExpression (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression GetBindingExpression(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBindingExpression (dp As DependencyProperty) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ GetBindingExpression(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.GetBindingExpression : System.Windows.DependencyProperty -&gt; System.Windows.Data.BindingExpression" Usage="frameworkElement.GetBindingExpression dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">The target <see cref="T:System.Windows.DependencyProperty" /> to get the binding from.</param>
        <summary>Returns the <see cref="T:System.Windows.Data.BindingExpression" /> that represents the binding on the specified property.</summary>
        <returns>A <see cref="T:System.Windows.Data.BindingExpression" /> if the target property has an active binding; otherwise, returns <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verifica del valore restituito per `null` è una tecnica che è possibile utilizzare per determinare se una proprietà ha un'associazione attiva.  
  
 Questo metodo è semplicemente un pratico wrapper per il <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType> metodo. <xref:System.Windows.FrameworkElement.GetBindingExpression%2A> passa l'istanza corrente e il `dp` parametro <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.BindingOperations" />
      </Docs>
    </Member>
    <Member MemberName="GetFlowDirection">
      <MemberSignature Language="C#" Value="public static System.Windows.FlowDirection GetFlowDirection (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.FlowDirection GetFlowDirection(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFlowDirection (element As DependencyObject) As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::FlowDirection GetFlowDirection(System::Windows::DependencyObject ^ element);" />
      <MemberSignature Language="F#" Value="static member GetFlowDirection : System.Windows.DependencyObject -&gt; System.Windows.FlowDirection" Usage="System.Windows.FrameworkElement.GetFlowDirection element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">The element to return a <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> for.</param>
        <summary>Gets the value of the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
        <returns>The requested flow direction, as a value of the enumeration.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lo scopo principale di questo metodo consiste nella sintassi della proprietà associata per supportare le <xref:System.Windows.FrameworkElement.FlowDirection%2A> proprietà, consentendo pertanto figlio di elementi di una classe <xref:System.Windows.FrameworkElement> per specificare la direzione di flusso per la disposizione all'interno del relativo elemento padre. Per ottenere il valore corrente <xref:System.Windows.FrameworkElement>, utilizzare il direct [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] funzione di accesso <xref:System.Windows.FrameworkElement.FlowDirection%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.FlowDirection" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberSignature Language="F#" Value="override this.GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry" Usage="frameworkElement.GetLayoutClip layoutSlotSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize">The size of the part of the element that does visual presentation.</param>
        <summary>Returns a geometry for a clipping mask. The mask applies if the layout system attempts to arrange an element that is larger than the available display space.</summary>
        <returns>The clipping geometry.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I margini verranno sottratto il `layoutSlotSize` come parte del comportamento del sistema di layout.  
  
 Un riferimento null restituito indica che si verifichi alcun ridimensionamento. L'implementazione predefinita restituisce sempre `null` quando <xref:System.Windows.UIElement.ClipToBounds%2A> è `false`. Questo metodo esegue l'override <xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=nameWithType>. Il <xref:System.Windows.FrameworkElement> implementazione Usa <xref:System.Windows.FrameworkElement.MaxHeight%2A> e <xref:System.Windows.FrameworkElement.MaxWidth%2A> nei calcoli. Diverse sottoclassi di <xref:System.Windows.FrameworkElement> eseguire nuovamente l'override di questo metodo. <xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=nameWithType>, le sostituzioni al sempre restituito `null` perché gli strumenti decorativi sono spesso deliberatamente di fuori dei normali limiti. <xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=nameWithType> e <xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=nameWithType> restituire `null` se <xref:System.Windows.UIElement.ClipToBounds%2A> è `false`.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>L'implementazione predefinita restituisce sempre <see langword="null" /> quando <see cref="P:System.Windows.UIElement.ClipToBounds" /> è <see langword="false" />. Le sostituzioni sono generalmente previsti per mantenere questo comportamento, anche se esistono eccezioni, a seconda della relazione e scopo della classe derivata e la logica di layout anziché la classe di base.</para>
        </block>
        <altmember cref="P:System.Windows.UIElement.Clip" />
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="GetTemplateChild">
      <MemberSignature Language="C#" Value="protected internal System.Windows.DependencyObject GetTemplateChild (string childName);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Windows.DependencyObject GetTemplateChild(string childName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function GetTemplateChild (childName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; System::Windows::DependencyObject ^ GetTemplateChild(System::String ^ childName);" />
      <MemberSignature Language="F#" Value="member this.GetTemplateChild : string -&gt; System.Windows.DependencyObject" Usage="frameworkElement.GetTemplateChild childName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="childName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="childName">Name of the child to find.</param>
        <summary>Returns the named element in the visual tree of an instantiated <see cref="T:System.Windows.Controls.ControlTemplate" />.</summary>
        <returns>The requested element. May be <see langword="null" /> if no element of the requested name exists.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Modelli in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] hanno un ambito dei nomi indipendente. Infatti, i modelli vengono riutilizzati e qualsiasi nome definito in un modello non può rimanere univoco quando più istanze di un controllo crea un'istanza del modello. Chiamare il <xref:System.Windows.FrameworkElement.GetTemplateChild%2A> per restituire i riferimenti agli oggetti forniti dal modello dopo che ne viene creata un'istanza. Non è possibile usare il <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> metodo per trovare gli elementi dai modelli perché <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> agisce in un più generale ambito, e non esiste alcuna connessione tra il <xref:System.Windows.Controls.ControlTemplate> classe se stesso e il modello di istanziato dopo averla applicata.  
  
 <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> fornisce la stessa funzione di questo metodo. <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> protetto pubblico anziché e Usa considerazioni su nome ambito corretti che consentono di accedere al modello all'interno di un elemento e di trovare gli elementi in esso contenuti denominati. Utilizzare <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> quando è necessario ottenere un elemento all'esterno di relativo controllo padre.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkTemplate.FindName(System.String,System.Windows.FrameworkElement)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal override System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="frameworkElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an alternative logical parent for this element if there is no visual parent.</summary>
        <returns>Returns something other than <see langword="null" /> whenever a WPF framework-level implementation of this method has a non-visual parent connection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo esegue l'override <xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=nameWithType>. Il valore predefinito <xref:System.Windows.FrameworkElement> implementazione restituisce solo l'elemento padre visuale previsto, che è lo stesso risultato perché il recupero di <xref:System.Windows.FrameworkElement.Parent%2A> valore. Le implementazioni di classe derivata potrebbero restituire le relazioni padre / alternativo.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Parent" />
      </Docs>
    </Member>
    <Member MemberName="GetVisualChild">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Visual GetVisualChild (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Visual GetVisualChild(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetVisualChild (index As Integer) As Visual" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Visual ^ GetVisualChild(int index);" />
      <MemberSignature Language="F#" Value="override this.GetVisualChild : int -&gt; System.Windows.Media.Visual" Usage="frameworkElement.GetVisualChild index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Visual</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the requested child element in the collection.</param>
        <summary>Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" />, and returns a child at the specified index from a collection of child elements.</summary>
        <returns>The requested child element. This should not return <see langword="null" />; if the provided index is out of range, an exception is thrown.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nel <xref:System.Windows.FrameworkElement> implementazione, l'indice valido solo è uguale a zero. Il modello di contenuto per <xref:System.Windows.FrameworkElement.GetVisualChild%2A> supporta zero o un elemento figlio, non una raccolta.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come uno strumento decorativo personalizzato utilizza i valori dichiarati da un <xref:System.Windows.Media.VisualCollection> gestita per i relativi elementi figlio visivi. Questi valori sono segnalati tramite sostituzioni dello <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> e <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.  
  
 [!code-csharp[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverridespre)]
 [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverridespre)]  
[!code-csharp[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverrides)]
[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverrides)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Questa implementazione è valida solo per gli elementi che non mantengono una raccolta di elementi figlio visivi più descrittiva. Qualsiasi elemento che dispone di una raccolta di questo tipo deve eseguire l'override di questo metodo ed eseguire il mapping dell'indice a un indice equivalente nella raccolta dell'elemento figlio che è supportato da quell'elemento. Un indice nell'intervallo tra zero e <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> (meno uno) deve restituire un elemento valido; qualsiasi altro indice deve generare un'eccezione di out-of-range. Un esempio di un tipo di elemento che supporta la raccolta figlio ed esegue l'override <see cref="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" /> per restituire più di un figlio possibili è <see cref="T:System.Windows.Controls.Panel" />.  L'implementazione predefinita in <see cref="T:System.Windows.FrameworkElement" /> presuppone un solo elemento figlio visivo. Qualsiasi valore passato per <paramref name="index" /> diverso da zero causa un'eccezione generata. Molti elementi comuni, ad esempio gli elementi Decorator, gli strumenti decorativi o gli elementi con rendering specializzato, eseguire l'override di <see cref="T:System.Windows.FrameworkElement" /> implementazione (dell'implementazione dalle classi di base intermediate). Alcune implementazioni impongono un elemento figlio visivo mentre altre consentono una raccolta.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public double Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Height" />
      <MemberSignature Language="VB.NET" Value="Public Property Height As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Height { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Height : double with get, set" Usage="System.Windows.FrameworkElement.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the suggested height of the element.</summary>
        <value>L'altezza dell'elemento, in [! INCLUDE[TLA#tla_dipixel#plural](~/Includes/tlasharptla-dipixelsharpplural-MD.MD)]. Il valore predefinito è <see cref="F:System.Double.NaN" />. Questo valore deve essere maggiore o uguale a 0,0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.Height%2A> è una delle tre proprietà accessibile in scrittura in <xref:System.Windows.FrameworkElement> che consente di specificare le informazioni sull'altezza. Le altre due sono <xref:System.Windows.FrameworkElement.MinHeight%2A> e <xref:System.Windows.FrameworkElement.MaxHeight%2A>. Se si verifica un conflitto tra questi valori, l'ordine di applicazione per determinare l'altezza effettiva che è il primo <xref:System.Windows.FrameworkElement.MinHeight%2A> deve essere tenuto in considerazione, quindi <xref:System.Windows.FrameworkElement.MaxHeight%2A>e, infine, se si trova all'interno dei limiti, <xref:System.Windows.FrameworkElement.Height%2A>.  
  
 Se questo elemento è un elemento figlio all'interno di un altro elemento, quindi l'impostazione di questa proprietà su un valore è solo un valore suggerito. Il sistema di layout, nonché la logica di layout particolare dell'elemento padre utilizzerà il valore come un input non vincolante durante il processo di layout. In pratica, un <xref:System.Windows.FrameworkElement> è quasi sempre l'elemento figlio di un altro elemento; anche quando si impostano le <xref:System.Windows.FrameworkElement.Height%2A> su <xref:System.Windows.Window>. (Per <xref:System.Windows.Window>, quel valore viene utilizzato quando il modello dell'applicazione sottostante stabilisce i presupposti di rendering di base che creano Hwnd che ospita l'applicazione.)  
  
 Inoltre a accettabile <xref:System.Double> valori, questa proprietà può anche essere <xref:System.Double.NaN?displayProperty=nameWithType>. Si tratta di modalità utilizzata per specificare il comportamento di ridimensionamento automatico nel codice. In [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] è impostare il valore per la stringa "Automatico" (distinzione tra maiuscole e minuscole) per abilitare il comportamento del ridimensionamento automatico. Comportamento del ridimensionamento automatico implica che l'elemento riempirà l'altezza disponibile per il processo. Si noti tuttavia che controlli specifici forniscono spesso valori predefiniti tramite gli stili del tema predefinito che consente di disattivare il comportamento del ridimensionamento a meno che non è specificamente abilitato nuovamente automatico.  
  
 Il valore restituito di questa proprietà è sempre quella di qualsiasi valore su cui è stato impostato. Al contrario, il valore della <xref:System.Windows.FrameworkElement.ActualHeight%2A> può variare. Questa situazione può verificarsi uno in modo statico perché il layout ha rifiutato la dimensione suggerita per qualche motivo, o solo temporaneamente. Sistema di layout funziona in modo asincrono rispetto al set del sistema di proprietà di <xref:System.Windows.FrameworkElement.Height%2A> e potrebbero non essere elaborati come quella particolare ancora alla modifica della proprietà di ridimensionamento.  
  
 Le restrizioni di valore per il <xref:System.Double> valore vengono applicati da una <xref:System.Windows.ValidateValueCallback> meccanismo. Se si tenta di impostare un valore non valido, viene generata un'eccezione in fase di esecuzione.  
  
 Oltre a controllo di convalida, è un valore superiore non deterministico per <xref:System.Windows.FrameworkElement.Height%2A> che viene forzata dal sistema di layout (si tratta di un numero molto elevato, più grande <xref:System.Single.MaxValue?displayProperty=nameWithType> ma inferiore a <xref:System.Double.MaxValue?displayProperty=nameWithType>). Se si supera questo limite, l'elemento non verrà eseguito il rendering e viene generata alcuna eccezione. Non impostare <xref:System.Windows.FrameworkElement.Height%2A> su un valore che è significativamente maggiore la dimensione massima di qualsiasi visualizzazione possibile, o si potrebbe superare il limite superiore non deterministico.  
  
<a name="xamlAttributeUsage_Height"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object Height="double"/>  
- or -  
<object Height="qualifiedDouble"/>  
- or -  
<object Height="Auto"/>  
```  
  
<a name="xamlValues_Height"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *double*  
 <xref:System.Double>  
  
 Rappresentazione di stringa di un <xref:System.Double> valore uguale o maggiore di 0.0. Per informazioni sul limite superiore, vedere la sezione Osservazioni. Questo valore viene interpretato come un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] misura. Le stringhe non necessario includere in modo esplicito i separatori decimali. Ad esempio, un valore di `1` è accettabile.  
  
 *qualifiedDouble*  
 Un *doppie* valore come descritto in precedenza, seguito da una delle seguenti stringhe di dichiarazione unità: `px`, `in`, `cm`, `pt`.  
  
 `px` (impostazione predefinita) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` è pollici; in 1 = = 96px  
  
 `cm` centimetri; 1cm==(96/2.54) px  
  
 `pt` punti; 1pt==(96/72) px  
  
 **Auto**  
 Abilita il ridimensionamento automatico. Vedere la sezione Osservazioni.  
  
<a name="dependencyPropertyInfo_Height"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.HeightProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.ActualHeight" />
      </Docs>
    </Member>
    <Member MemberName="HeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.HeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable HeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.HeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Height" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.HorizontalAlignment HorizontalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.HorizontalAlignment HorizontalAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.HorizontalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalAlignment As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::HorizontalAlignment HorizontalAlignment { System::Windows::HorizontalAlignment get(); void set(System::Windows::HorizontalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.HorizontalAlignment : System.Windows.HorizontalAlignment with get, set" Usage="System.Windows.FrameworkElement.HorizontalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the horizontal alignment characteristics applied to this element when it is composed within a parent element, such as a panel or items control.</summary>
        <value>Impostazione di allineamento orizzontale come valore dell'enumerazione. Il valore predefinito è <see cref="F:System.Windows.HorizontalAlignment.Stretch" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si <xref:System.Windows.FrameworkElement.Height%2A> e <xref:System.Windows.FrameworkElement.Width%2A> sono impostate in modo esplicito su un elemento, queste misure hanno precedenza maggiore durante il layout e Annulla gli effetti dell'impostazione tipici <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> a <xref:System.Windows.HorizontalAlignment.Stretch>.  
  
 <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> è il [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] funzione di accesso di proprietà per i quali è in realtà una proprietà di dipendenza. Questa proprietà di dipendenza specifica viene spesso avrà un valore di "predefinito" apparente impostato in modo diverso negli elementi sottoclassati, in particolare i controlli. Generalmente questo avviene in due modi: la proprietà di dipendenza viene nuovamente registrata in una particolare sottoclasse, ma con metadati diversi per l'impostazione dei valori predefiniti; oppure è un valore predefinito viene applicato uno stile che imposta il valore della proprietà di dipendenza in modo diverso. Ad esempio, il valore "predefinito" apparente di <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> per un <xref:System.Windows.Controls.Label> controllo sarà <xref:System.Windows.HorizontalAlignment.Left>, anche se <xref:System.Windows.Controls.Label> eredita <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> direttamente da <xref:System.Windows.FrameworkElement>. Infatti, tale valore è stato reimpostato nello stile predefinito di <xref:System.Windows.Controls.Label>, nel modello di controllo di stile.  
  
 <xref:System.Windows.Controls.Canvas> non utilizza <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> durante la composizione di layout, perché <xref:System.Windows.Controls.Canvas> basato sul posizionamento assoluto.  
  
 Quando viene ereditato da <xref:System.Windows.Controls.Label> o le classi, derivate <xref:System.Windows.Controls.Label> ridefinisce il valore predefinito di questa proprietà di dipendenza sia <xref:System.Windows.HorizontalAlignment.Left>.  
  
<a name="dependencyPropertyInfo_HorizontalAlignment"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.HorizontalAlignmentProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HorizontalAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HorizontalAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.HorizontalAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HorizontalAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HorizontalAlignmentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable HorizontalAlignmentProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.HorizontalAlignmentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InheritanceBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Windows.InheritanceBehavior InheritanceBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.InheritanceBehavior InheritanceBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.InheritanceBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property InheritanceBehavior As InheritanceBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Windows::InheritanceBehavior InheritanceBehavior { System::Windows::InheritanceBehavior get(); void set(System::Windows::InheritanceBehavior value); };" />
      <MemberSignature Language="F#" Value="member this.InheritanceBehavior : System.Windows.InheritanceBehavior with get, set" Usage="System.Windows.FrameworkElement.InheritanceBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.InheritanceBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the scope limits for property value inheritance, resource key lookup, and RelativeSource FindAncestor lookup.</summary>
        <value>Valore dell'enumerazione. Il valore predefinito è <see cref="F:System.Windows.InheritanceBehavior.Default" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Determinati limiti nell'elemento di struttura ad albero come set <xref:System.Windows.FrameworkElement.InheritanceBehavior%2A> deliberatamente limitare l'ambito del comportamento di ereditarietà, a una ricerca di risorse force per controllare le risorse dell'applicazione o per impedire l'esecuzione di query l'elemento corrente di una ricerca RelativeSource FindAncestor o ulteriore. Ricerca RelativeSource FindAncestor si verifica quando un'associazione utilizza una <xref:System.Windows.Data.RelativeSource> dotato relativi <xref:System.Windows.Data.RelativeSource.Mode%2A> impostata sul <xref:System.Windows.Data.RelativeSourceMode.FindAncestor?displayProperty=nameWithType> valore.  
  
 Se si desidera che la classe derivata per impostare questa proprietà, è consigliabile eseguire questa operazione all'interno del costruttore statico o in altre routine di inizializzazione.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Frame" />
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Initialized;" />
      <MemberSignature Language="F#" Value="member this.Initialized : EventHandler " Usage="member this.Initialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when this <see cref="T:System.Windows.FrameworkElement" /> is initialized. This event coincides with cases where the value of the <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> property changes from <see langword="false" /> (or undefined) to <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento verrà generato ogni volta che il <xref:System.Windows.FrameworkElement.EndInit%2A> o <xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A> metodi vengono chiamati. Le chiamate a uno dei due metodi possono essere generate dal codice dell'applicazione o tramite il [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] comportamento del processore quando un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] pagina viene elaborata.  
  
 Se si sceglie di gestire <xref:System.Windows.FrameworkElement.Loaded> o <xref:System.Windows.FrameworkElement.Initialized> varia a seconda dei requisiti. Se non è necessaria leggere le proprietà degli elementi, desidera reimpostare le proprietà e le informazioni di layout, non sono necessarie <xref:System.Windows.FrameworkElement.Initialized> potrebbe essere una migliore eventi possono eseguire operazioni. Se è necessario conoscere tutte le proprietà dell'elemento sia disponibile e si desidera impostare le proprietà che sono probabile che reimpostare il layout, <xref:System.Windows.FrameworkElement.Loaded> potrebbe essere una migliore eventi possono eseguire operazioni. Prestare attenzione della reentrancy se il gestore reimposta tutte le proprietà che vengono interpretate dal sistema di layout per indicare che un nuovo passaggio di layout è obbligatorio. (Potrebbe essere necessario controllare il <xref:System.Windows.FrameworkPropertyMetadata> se sono state modificate, passare i valori per la proprietà se si è certi di quali proprietà possono richiedere un nuovo layout.)  
  
 Per ulteriori informazioni sulla sequenza di eventi dell'oggetto per un <xref:System.Windows.FrameworkElement>, nonché per molti correlati dell'applicazione e le classi di elemento, vedere [eventi durata oggetti](~/docs/framework/wpf/advanced/object-lifetime-events.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InputScope">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputScope InputScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputScope InputScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.InputScope" />
      <MemberSignature Language="VB.NET" Value="Public Property InputScope As InputScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputScope ^ InputScope { System::Windows::Input::InputScope ^ get(); void set(System::Windows::Input::InputScope ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InputScope : System.Windows.Input.InputScope with get, set" Usage="System.Windows.FrameworkElement.InputScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the context for input used by this <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <value>Ambito di input, che modifica il modo in cui viene interpretato l'input proveniente da metodi di input alternativi. Il valore predefinito è <see langword="null" /> (risultati in una gestione predefinita dei comandi).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà di dipendenza eredita i valori delle proprietà. Se non esistono elementi figlio senza altri valori per <xref:System.Windows.FrameworkElement.InputScope%2A> stabilita tramite valori locali o gli stili, il sistema di proprietà verrà impostato il valore sarà il <xref:System.Windows.FrameworkElement.InputScope%2A> valore dell'elemento predecessore più vicino con questo valore assegnato.  
  
 Sebbene un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] utilizzo della sintassi è elencata e la sintassi è consentita, impostando questa proprietà [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] non è comune.  
  
<a name="dependencyPropertyInfo_InputScope"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.InputScopeProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputScope" />
        <altmember cref="T:System.Windows.IInputElement" />
      </Docs>
    </Member>
    <Member MemberName="InputScopeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty InputScopeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty InputScopeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.InputScopeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InputScopeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ InputScopeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable InputScopeProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.InputScopeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.InputScope" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitialized : bool" Usage="System.Windows.FrameworkElement.IsInitialized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether this element has been initialized, either during processing by a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor, or by explicitly having its <see cref="M:System.Windows.FrameworkElement.EndInit" /> method called.</summary>
        <value>
          <see langword="true" /> Se l'elemento viene inizializzato indicate sopra [! L'elaborazione include[TLA2#tla_xaml](~/Includes/tla2sharptla-XAML-MD.MD)] o chiamate al metodo; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà può anche essere `true` se questo elemento è stato spostato all'interno dell'albero logico in modo che abbia un nuovo elemento padre e pertanto diventa ricaricato nuovamente.  
  
 Questa proprietà è utile se si usano anche <xref:System.Windows.FrameworkElement.BeginInit%2A> e <xref:System.Windows.FrameworkElement.EndInit%2A>. Gli elementi dell'albero logico che viene caricato da un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processore viene assicurata da inizializzare. Gli elementi non inclusi nell'albero logico vengono inizializzati quando <xref:System.Windows.FrameworkElement.EndInit%2A> viene chiamato. In assenza di una gestione specifica di <xref:System.Windows.FrameworkElement.BeginInit%2A> e <xref:System.Windows.FrameworkElement.EndInit%2A>, verrà eseguita non appena il costruttore restituisce il risultato inizializzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoaded">
      <MemberSignature Language="C#" Value="public bool IsLoaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoaded" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.IsLoaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoaded { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLoaded : bool" Usage="System.Windows.FrameworkElement.IsLoaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether this element has been loaded for presentation.</summary>
        <value>
          <see langword="true" /> Se l'elemento corrente è associata a una struttura ad albero; <see langword="false" /> se l'elemento non è mai stato associato a una struttura ad albero elemento caricato.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da un'appena costruita <xref:System.Windows.FrameworkElement>, questa proprietà inizia `false`e rimane `true` è impostata su `true`, anche se l'elemento viene successivamente rimosso da un albero logico connesso tramite codice. `true` stato viene impostato dalla logica di presentazione generale, quando gli elementi vengono caricati nel motore di presentazione.  
  
 In genere, gli elementi caricati sono sottoposto a rendering, ma non tutti i <xref:System.Windows.FrameworkElement> le classi derivate includano una presentazione e altre proprietà, ad esempio <xref:System.Windows.UIElement.Visibility%2A> possono influenzare la presentazione.  
  
   
  
## Examples  
 Nell'esempio seguente implementa due gestori: uno gestisce il <xref:System.Windows.FrameworkElement.Loaded> evento dell'elemento radice, pertanto è certo che l'elemento radice della pagina venga caricato perché rappresenta il significato dell'evento. L'altro gestore è associato a un controllo utente e le chiamate <xref:System.Windows.FrameworkElement.IsLoaded%2A> per assicurare che l'elemento radice viene caricato completamente. Entrambi i gestori di chiamano la funzione stessa (non illustrata) che verrà popolati gli elementi figlio con i dati aggiornati.  
  
 [!code-csharp[GroupBoxExample#FEIsLoaded](~/samples/snippets/csharp/VS_Snippets_Wpf/GroupBoxExample/CSharp/Page1.xaml.cs#feisloaded)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.XmlLanguage Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.XmlLanguage Language" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Language" />
      <MemberSignature Language="VB.NET" Value="Public Property Language As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Markup::XmlLanguage ^ Language { System::Windows::Markup::XmlLanguage ^ get(); void set(System::Windows::Markup::XmlLanguage ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Language : System.Windows.Markup.XmlLanguage with get, set" Usage="System.Windows.FrameworkElement.Language" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets localization/globalization language information that applies to an element.</summary>
        <value>Informazioni relative alla lingua per questo elemento. Il valore predefinito è un <see cref="T:System.Windows.Markup.XmlLanguage" /> con il relativo <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> valore impostato sulla stringa "en-US".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I formati stringa conformi allo standard RFC 3066. Stati Uniti, ad esempio, L'inglese è "en-US". Per ulteriori informazioni sui valori e formato, vedere <xref:System.Windows.Markup.XmlLanguage>.  
  
 Questa proprietà di dipendenza eredita i valori delle proprietà. Se non esistono elementi figlio senza altri valori per <xref:System.Windows.FrameworkElement.Language%2A> stabilita tramite valori locali o gli stili, il sistema di proprietà verrà impostato il valore sarà il <xref:System.Windows.FrameworkElement.Language%2A> valore dell'elemento predecessore più vicino con questo valore assegnato.  
  
 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] definisce il significato generale del `xml:lang` attributo. <xref:System.Windows.FrameworkElement.Language%2A> espone essenzialmente il significato di questo attributo come una proprietà di dipendenza. <xref:System.Windows.FrameworkElement.Language%2A> può essere modificata a livello di codice e può partecipare all'ereditarietà del valore di proprietà del sistema in modo simile al modo in cui il `xml:lang` attributo può ereditare da ambito dell'elemento figlio in [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]. Se si imposta <xref:System.Windows.FrameworkElement.Language%2A>, tale valore diventa il `xml:lang` e sovrascrive qualsiasi valore precedente. Per altre informazioni, vedere [XML: lang Handling in XAML](~/docs/framework/xaml-services/xml-lang-handling-in-xaml.md).  
  
<a name="dependencyPropertyInfo_CultureInfo"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.LanguageProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LanguageProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LanguageProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LanguageProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LanguageProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LanguageProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LanguageProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LanguageProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.LanguageProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Language" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform LayoutTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform LayoutTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.LayoutTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property LayoutTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ LayoutTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LayoutTransform : System.Windows.Media.Transform with get, set" Usage="System.Windows.FrameworkElement.LayoutTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a graphics transformation that should apply to this element when  layout is performed.</summary>
        <value>La trasformazione di che questo elemento deve usare. Il valore predefinito è <see cref="P:System.Windows.Media.Transform.Identity" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al contrario <xref:System.Windows.UIElement.RenderTransform%2A>, <xref:System.Windows.FrameworkElement.LayoutTransform%2A> influirà sui risultati del layout.  
  
 L'impostazione di una trasformazione fornisce potenti funzionalità di scalabilità e la rotazione. Tuttavia, <xref:System.Windows.FrameworkElement.LayoutTransform%2A> ignora <xref:System.Windows.Media.TranslateTransform> operazioni. Infatti, il comportamento del sistema di layout per gli elementi figlio di un <xref:System.Windows.FrameworkElement> corregge automaticamente qualsiasi offset relativo alla posizione di un elemento ridimensionato o ruotato nel layout e sistema di coordinate dell'elemento padre.  
  
 <xref:System.Windows.FrameworkElement.LayoutTransform%2A> può influire sulle prestazioni dell'applicazione se si richiama in uno scenario che non richiede un passaggio completo del sistema di layout. Quando si applica una <xref:System.Windows.FrameworkElement.LayoutTransform%2A> per il <xref:System.Windows.Controls.Panel.Children%2A> insieme il <xref:System.Windows.Controls.Panel>, viene attivato un nuovo passaggio dal sistema di layout e forza gli oggetti tutti sullo schermo per rimisurazione e la. Se si vuole aggiornare l'applicazione completa [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)], questa funzionalità potrebbe essere esattamente ciò che è necessario. Tuttavia, se non è necessario un passaggio di layout completo, utilizzare il <xref:System.Windows.UIElement.RenderTransform%2A> proprietà, che non richiama il sistema di layout e pertanto rappresenta una scelta migliore per questo scenario.  
  
 Gli scenari di esempio in cui <xref:System.Windows.FrameworkElement.LayoutTransform%2A> potrebbe essere utile includere: rotazione di elementi, ad esempio componenti di menu da orizzontale in verticale o viceversa, ridimensionando (ingrandire) elementi sullo stato attivo, fornendo la modifica del comportamento e così via.  
  
<a name="dependencyPropertyInfo_LayoutTransform"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.LayoutTransformProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come applicare un <xref:System.Windows.FrameworkElement.LayoutTransform%2A> a un elemento. Nell'esempio viene creata un'istanza di <xref:System.Windows.Controls.Button> e viene contenuta all'interno di un elemento padre <xref:System.Windows.Controls.Grid>. Viene inoltre utilizzata la <xref:System.Windows.FrameworkElement.LayoutTransform%2A> proprietà a cui applicare un <xref:System.Windows.Media.RotateTransform> per il <xref:System.Windows.Controls.Button>.  
  
 [!code-cpp[LayoutTransform#1](~/samples/snippets/cpp/VS_Snippets_Wpf/LayoutTransform/CPP/LayoutTransform.cpp#1)]
 [!code-csharp[LayoutTransform#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LayoutTransform/CSharp/LayoutTransform.cs#1)]
 [!code-vb[LayoutTransform#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LayoutTransform/VisualBasic/LayoutTransform.vb#1)]
 [!code-xaml[LayoutTransform#1](~/samples/snippets/xaml/VS_Snippets_Wpf/LayoutTransform/XAML/default.xaml#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LayoutTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LayoutTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LayoutTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LayoutTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LayoutTransformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LayoutTransformProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.LayoutTransformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.LayoutTransform" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Loaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Loaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Loaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Loaded;" />
      <MemberSignature Language="F#" Value="member this.Loaded : System.Windows.RoutedEventHandler " Usage="member this.Loaded : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the element is laid out, rendered, and ready for interaction.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.Loaded> viene in genere l'ultimo evento generato in una sequenza di inizializzazione di elementi. Verrà generato sempre dopo <xref:System.Windows.FrameworkElement.Initialized>. Se si sceglie di gestire <xref:System.Windows.FrameworkElement.Loaded> o <xref:System.Windows.FrameworkElement.Initialized> varia a seconda dei requisiti. Se non è necessaria leggere le proprietà degli elementi, desidera reimpostare le proprietà e le informazioni di layout, non sono necessarie <xref:System.Windows.FrameworkElement.Initialized> potrebbe essere una migliore eventi possono eseguire operazioni. Se è necessario conoscere tutte le proprietà dell'elemento sia disponibile e si desidera impostare le proprietà che sono probabile che reimpostare il layout, <xref:System.Windows.FrameworkElement.Loaded> potrebbe essere una migliore eventi possono eseguire operazioni. Prestare attenzione della reentrancy se il gestore reimposta tutte le proprietà che vengono interpretate dal sistema di layout per indicare che un nuovo passaggio di layout è obbligatorio. (Potrebbe essere necessario controllare il <xref:System.Windows.FrameworkPropertyMetadata> se sono state modificate, passare i valori per la proprietà se si è certi di quali proprietà possono richiedere un nuovo layout.)  
  
 Per ulteriori informazioni sulla sequenza di eventi dell'oggetto per un <xref:System.Windows.FrameworkElement>, nonché per molti correlati dell'applicazione e le classi di elemento, vedere [eventi durata oggetti](~/docs/framework/wpf/advanced/object-lifetime-events.md).  
  
 Vengono gestiti solo all'interno dell'elemento stesso in cui vengono generati gli eventi indirizzati direttamente non seguono una route. Indirizzare gli eventi indirizzati supportare altri comportamenti dell'evento indirizzato: supportano una raccolta di gestori accessibile e può essere utilizzati come un <xref:System.Windows.EventTrigger> in uno stile.  
  
 <xref:System.Windows.FrameworkElement.Loaded> e <xref:System.Windows.FrameworkElement.Unloaded> potrebbero essere generati entrambi sui controlli in seguito a modifiche al tema del sistema avviata dall'utente. Modifica un tema provoca un invalidamento del modello di controllo e il contenuto struttura ad albero visuale, che a sua volta fa sì che l'intero controllo scaricare e ricaricare. Di conseguenza <xref:System.Windows.FrameworkElement.Loaded> non può essere si presuppone che si verificano solo quando viene caricata una pagina prima di tutto tramite navigazione alla pagina.  
  
<a name="routedEventInfo_Loaded"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.LoadedEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      </Docs>
    </Member>
    <Member MemberName="LoadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LoadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LoadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LoadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LoadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LoadedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LoadedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.LoadedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.Loaded" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal virtual System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LogicalChildren : System.Collections.IEnumerator" Usage="System.Windows.FrameworkElement.LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an enumerator for logical child elements of this element.</summary>
        <value>Un enumeratore per gli elementi figlio logici di questo elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.LogicalChildren%2A> Consente di scorrere gli elementi figlio. Ciò è utile per gli elementi che non possono avere un insieme definito e dedicato ma comunque contenere più di un elemento figlio, in particolare <xref:System.Windows.FrameworkContentElement> gli elementi figlio.  
  
 Per ulteriori informazioni su come usare <xref:System.Windows.FrameworkElement.LogicalChildren%2A> e <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>, vedere [alberi in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Margin">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness Margin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness Margin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Margin" />
      <MemberSignature Language="VB.NET" Value="Public Property Margin As Thickness" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Thickness Margin { System::Windows::Thickness get(); void set(System::Windows::Thickness value); };" />
      <MemberSignature Language="F#" Value="member this.Margin : System.Windows.Thickness with get, set" Usage="System.Windows.FrameworkElement.Margin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the outer margin of an element.</summary>
        <value>Specifica i valori dei margini per l'elemento. Il valore predefinito è una <see cref="T:System.Windows.Thickness" /> con tutte le proprietà uguali a 0 (zero).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il margine è lo spazio tra questo elemento e altri elementi che risulteranno adiacenti quando il layout crea il [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]. Gli elementi condivisi potrebbero essere elementi peer (ad esempio altri elementi della raccolta di un controllo padre comune), o può essere padre di questo elemento.  
  
 <xref:System.Windows.FrameworkElement.Margin%2A> viene impostato come un <xref:System.Windows.Thickness> struttura anziché come un numero in modo che il margine impostabili asimmetrico. Il <xref:System.Windows.Thickness> struttura stessa supporta la conversione di tipo stringa in modo che è possibile specificare un oggetto asimmetrico <xref:System.Windows.FrameworkElement.Margin%2A> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] anche la sintassi degli attributi.  
  
 Un margine diverso da zero applica uno spazio di fuori di layout dell'elemento <xref:System.Windows.FrameworkElement.ActualWidth%2A> e <xref:System.Windows.FrameworkElement.ActualHeight%2A>.  
  
 I margini si sommano tra loro per elementi di pari livello in un layout. ad esempio, due elementi adiacenti, che entrambi gli elementi con un margine pari a 30 impostati sul bordo adiacente avranno 60 unità di spazio tra di essi.  
  
 Gli elementi con margini impostati non verranno in genere limitano le dimensioni dell'oggetto specificato <xref:System.Windows.FrameworkElement.Margin%2A> se lo spazio del rettangolo assegnato non è sufficientemente grande per il margine e l'area di contenuto dell'elemento. L'area di contenuto dell'elemento sarà vincolato in alternativa, quando viene calcolato layout. L'unico caso in cui potrebbero essere vincolati margini è anche se il contenuto è già vincolato fino a zero.  
  
<a name="xamlAttributeUsage_Margin"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object Margin="left,top,right,bottom"/>  
- or -  
<object Margin="left,top"/>  
- or -  
<object Margin="thicknessReference"/>  
```  
  
<a name="xamlPropertyElementUsage_Margin"></a>   
## <a name="xaml-property-element-usage"></a>Utilizzo della sintassi XAML per elementi proprietà  
  
```  
<object>  
  <object.Margin>  
    <Thickness Left="left" Top="top" Right="right" Bottom="bottom"/>  
  </object.Margin>  
</object>  
```  
  
<a name="xamlValues_Margin"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *a sinistra, superiore, destro, inferiore*  
 Numero di valori compreso tra 0 e <xref:System.Double.PositiveInfinity> che consente di specificare le quattro proprietà di dimensione possibili di un <xref:System.Windows.Thickness> struttura.  
  
 L'utilizzo dell'attributo accetterà anche valori abbreviati che si applicano nell'ordine specificato, in modo simmetrico e logico. Ad esempio `Margin="20"` verrà interpretato come un <xref:System.Windows.Thickness> con tutte le proprietà impostate su 20. `Margin="20,50"` verrà interpretato come un <xref:System.Windows.Thickness> con <xref:System.Windows.Thickness.Left%2A> e <xref:System.Windows.Thickness.Right%2A> impostato su 20, e <xref:System.Windows.Thickness.Top%2A> e <xref:System.Windows.Thickness.Bottom%2A> impostata su 50.  
  
 L'unità predefinita per un <xref:System.Windows.Thickness> misura è [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]. È inoltre possibile specificare altre unità aggiungendo le stringhe di tipo unità `cm`, `in`, o `pt` a qualsiasi misura.  
  
 Numero di valori forniti come [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attributi non è necessario specificare i separatori decimali (0 è accettabile, non devono essere specificati come 0,0). Per ulteriori informazioni sul [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] utilizzo, vedere <xref:System.Windows.Thickness>.  
  
 *thicknessReference*  
 Riferimento a un oggetto esistente <xref:System.Windows.Thickness>. Potrebbe trattarsi di un `}`, a, o `}` riferimento. Per ulteriori informazioni sul [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] utilizzo, vedere <xref:System.Windows.Thickness>.  
  
<a name="dependencyPropertyInfo_Margin"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.MarginProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Thickness" />
      </Docs>
    </Member>
    <Member MemberName="MarginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MarginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MarginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MarginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MarginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MarginProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MarginProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MarginProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Margin" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeight">
      <MemberSignature Language="C#" Value="public double MaxHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MaxHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxHeight { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MaxHeight : double with get, set" Usage="System.Windows.FrameworkElement.MaxHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the maximum height constraint of the element.</summary>
        <value>L'altezza massima dell'elemento, in [! INCLUDE[TLA#tla_dipixel#plural](~/Includes/tlasharptla-dipixelsharpplural-MD.MD)]. Il valore predefinito è <see cref="F:System.Double.PositiveInfinity" />. Può essere qualsiasi valore maggiore o uguale a 0,0. <see cref="F:System.Double.PositiveInfinity" /> è inoltre valida.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta di una delle tre proprietà in <xref:System.Windows.FrameworkElement> che consente di specificare le informazioni sull'altezza. Le altre due sono <xref:System.Windows.FrameworkElement.MinHeight%2A> e <xref:System.Windows.FrameworkElement.Height%2A>.  Se si verifica un conflitto tra questi valori, l'ordine di applicazione per determinare l'altezza effettiva è il primo <xref:System.Windows.FrameworkElement.MinHeight%2A> deve essere tenuto in considerazione, quindi <xref:System.Windows.FrameworkElement.MaxHeight%2A>e infine se ognuno di questi rientrano nei limiti <xref:System.Windows.FrameworkElement.Height%2A>.  
  
 Le restrizioni di valore per il <xref:System.Double> valore vengono applicati da una <xref:System.Windows.ValidateValueCallback> meccanismo. Se si tenta di impostare un valore non valido viene generata un'eccezione in fase di esecuzione.  
  
<a name="xamlAttributeUsage_MaxHeight"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object MaxHeight="double"/>  
- or –  
<object MaxHeight ="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MaxHeight"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *double*  
 <xref:System.Double>  
  
 Rappresentazione di stringa di un <xref:System.Double> valore uguale o maggiore di 0.0. Ciò viene interpretato come un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] misura. Le stringhe non necessario includere in modo esplicito i separatori decimali. Ad esempio, un valore di `1` è accettabile.  
  
 Lo stesso <xref:System.Double> si applicano le restrizioni dell'intervallo come indicato nella sezione valore della proprietà, ad eccezione del fatto che sia necessario utilizzare [estensione di Markup X:Static](~/docs/framework/xaml-services/x-static-markup-extension.md) se è necessario impostare in modo esplicito il valore sia <xref:System.Double.PositiveInfinity>.  
  
 *qualifiedDouble*  
 Un *doppie* valore come descritto in precedenza, seguito da una delle seguenti stringhe di dichiarazione unità: `px`, `in`, `cm`, `pt`.  
  
 `px` (impostazione predefinita) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` è pollici; in 1 = = 96px  
  
 `cm` centimetri; 1cm==(96/2.54) px  
  
 `pt` punti; 1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MaxHeight"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.MaxHeightProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MaxHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MaxHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.MaxHeight" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidth">
      <MemberSignature Language="C#" Value="public double MaxWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MaxWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxWidth { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MaxWidth : double with get, set" Usage="System.Windows.FrameworkElement.MaxWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the maximum width constraint of the element.</summary>
        <value>La larghezza massima dell'elemento, in [! INCLUDE[TLA#tla_dipixel#plural](~/Includes/tlasharptla-dipixelsharpplural-MD.MD)]. Il valore predefinito è <see cref="F:System.Double.PositiveInfinity" />. Può essere qualsiasi valore maggiore o uguale a 0,0. <see cref="F:System.Double.PositiveInfinity" /> è inoltre valida.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta di una delle tre proprietà in <xref:System.Windows.FrameworkElement> che consente di specificare le informazioni sulla larghezza. Le altre due sono <xref:System.Windows.FrameworkElement.MinWidth%2A> e <xref:System.Windows.FrameworkElement.Width%2A>. Se si verifica un conflitto tra questi valori, l'ordine di applicazione per determinare l'effettiva larghezza è il primo <xref:System.Windows.FrameworkElement.MinWidth%2A> deve essere tenuto in considerazione, quindi <xref:System.Windows.FrameworkElement.MaxWidth%2A>e infine se ognuno di questi rientrano nei limiti <xref:System.Windows.FrameworkElement.Width%2A>.  
  
 Le restrizioni di valore per il <xref:System.Double> valore vengono applicati da una <xref:System.Windows.ValidateValueCallback> meccanismo. Se si tenta di impostare un valore non valido, viene generata un'eccezione in fase di esecuzione.  
  
<a name="xamlAttributeUsage_MaxWidth"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object MaxWidth="double"/>  
- or -  
<object MaxWidth="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MaxWidth"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *double*  
 <xref:System.Double>  
  
 Rappresentazione di stringa di un <xref:System.Double> valore uguale o maggiore di 0.0. Ciò viene interpretato come un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] misura. Le stringhe non necessario includere in modo esplicito i separatori decimali. Ad esempio, un valore di `1` è accettabile.  
  
 Lo stesso <xref:System.Double> si applicano le restrizioni dell'intervallo come indicato nella sezione valore della proprietà, ad eccezione del fatto che sia necessario utilizzare [estensione di Markup X:Static](~/docs/framework/xaml-services/x-static-markup-extension.md) per impostare il valore sia <xref:System.Double.PositiveInfinity>.  
  
 *qualifiedDouble*  
 Un *doppie* valore come descritto in precedenza, seguito da una delle seguenti stringhe di dichiarazione unità: `px`, `in`, `cm`, `pt`.  
  
 `px` (impostazione predefinita) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` è pollici; in 1 = = 96px  
  
 `cm` centimetri; 1cm==(96/2.54) px  
  
 `pt` punti; 1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MaxWidth"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.MaxWidthProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MaxWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MaxWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.MaxWidth" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected override sealed System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="override this.MeasureCore : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.MeasureCore availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">The available size that the parent element can give to the child elements.</param>
        <summary>Implements basic measure-pass layout system behavior for <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <returns>The desired size of this element in layout.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo esegue l'override <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType> per connettere il livello di base WPF e implementazioni di misurazione di layout a livello di framework WPF. Il <xref:System.Windows.FrameworkElement> il metodo esegue il sealing di implementazione. Per regolare il comportamento di layout di passaggio di misurazione di qualsiasi elemento che si basa sul livello di framework WPF, eseguire l'override <xref:System.Windows.FrameworkElement.MeasureOverride%2A> invece. Per modificare il passaggio di misurazione comportamento del layout di un elemento che deliberatamente non basato sul livello di framework WPF o utilizzare <xref:System.Windows.FrameworkElement>, eseguire l'override <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureOverride (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureOverride (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureOverride(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="abstract member MeasureOverride : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.MeasureOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.MeasureOverride availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
        <summary>When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.</summary>
        <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eseguire l'override <xref:System.Windows.FrameworkElement.MeasureOverride%2A> per implementare il comportamento di ridimensionamento layout personalizzato per l'elemento di cui fa parte il [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] sistema di layout. L'implementazione deve eseguire le operazioni seguenti:  
  
1.  Eseguire l'iterazione particolare insieme dell'elemento gli elementi figlio che fanno parte del layout, chiamare <xref:System.Windows.UIElement.Measure%2A> su ogni elemento figlio.  
  
2.  Ottenere immediatamente <xref:System.Windows.UIElement.DesiredSize%2A> sull'elemento figlio (viene impostato come una proprietà dopo <xref:System.Windows.UIElement.Measure%2A> viene chiamato).  
  
3.  Consente di calcolare la dimensione desiderata del padre in base alla misura gli elementi figlio.  
  
 Il valore restituito di <xref:System.Windows.FrameworkElement.MeasureOverride%2A> deve essere la dimensione desiderata dell'elemento, che diventa quindi la misura di input per l'elemento padre dell'elemento corrente. Lo stesso processo continua attraverso il sistema di layout fino a quando non viene raggiunto l'elemento radice della pagina.  
  
 Durante questo processo, gli elementi figlio potrebbero restituire un maggiore <xref:System.Windows.UIElement.DesiredSize%2A> dimensioni rispetto all'iniziale `availableSize` per indicare che l'elemento figlio richiede più spazio. Ciò potrebbe essere gestita nell'implementazione introducendo un'area scorrevole, ridimensionando il controllo padre, stabilendo alcune modalità di ordine in pila oppure un numero qualsiasi di soluzioni per la misurazione o disposizione del contenuto.  
  
> [!IMPORTANT]
>  Gli elementi devono chiamare <xref:System.Windows.UIElement.Measure%2A> su ogni elemento figlio durante questo processo, in caso contrario, gli elementi figlio non verranno correttamente ridimensionati o disposti.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Il codice non di compilazione seguente mostra questo modello di implementazione.  <c>VisualChildren</c> rappresenta una proprietà di raccolta enumerabile di elementi figlio che deve definire un proprio elemento. La proprietà può essere modificata. <c>VisualChildren</c> è un nome segnaposto per scopi di questo esempio, <c>VisualChildren</c> non è un [! INCLUDE[TLA#tla_api](~/Includes/tlasharptla-API-MD.MD)] fornito da [! INCLUDE[TLA2#tla_winclient](~/Includes/tla2sharptla-WinClient-MD.MD)] o una parte di un modello di denominazione...  [! code-csharp[CorePseudocode#FEMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#femeasureoverride)] [! code-vb[CorePseudocode#FEMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#femeasureoverride)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MinHeight">
      <MemberSignature Language="C#" Value="public double MinHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MinHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MinHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MinHeight { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MinHeight : double with get, set" Usage="System.Windows.FrameworkElement.MinHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the minimum height constraint of the element.</summary>
        <value>L'altezza minima dell'elemento, in [! INCLUDE[TLA#tla_dipixel#plural](~/Includes/tlasharptla-dipixelsharpplural-MD.MD)]. Il valore predefinito è 0,0. Può essere qualsiasi valore maggiore o uguale a 0,0. Tuttavia, <see cref="F:System.Double.PositiveInfinity" /> non è valido, non è né <see cref="F:System.Double.NaN" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta di una delle tre proprietà in <xref:System.Windows.FrameworkElement> che consente di specificare le informazioni sull'altezza.  Le altre due sono <xref:System.Windows.FrameworkElement.Height%2A> e <xref:System.Windows.FrameworkElement.MaxHeight%2A>. Se si verifica un conflitto tra questi valori, l'ordine di applicazione per determinare l'altezza effettiva è il primo <xref:System.Windows.FrameworkElement.MinHeight%2A> deve essere tenuto in considerazione, quindi <xref:System.Windows.FrameworkElement.MaxHeight%2A>e infine se ognuno di questi rientrano nei limiti <xref:System.Windows.FrameworkElement.Height%2A>.  
  
 Le restrizioni di valore per il <xref:System.Double> valore vengono applicati da una <xref:System.Windows.ValidateValueCallback> meccanismo. Se si tenta di impostare un valore non valido, viene generata un'eccezione in fase di esecuzione.  
  
<a name="xamlAttributeUsage_MinHeight"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object MinHeight="double"/>  
- or -  
<object MinHeight="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MinHeight"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *double*  
 <xref:System.Double>  
  
 Rappresentazione di stringa di un <xref:System.Double> valore uguale o maggiore di 0.0. Ciò viene interpretato come un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] misura. Le stringhe non necessario includere in modo esplicito i separatori decimali. Ad esempio, un valore di `1` è accettabile.  
  
 Lo stesso <xref:System.Double> si applicano le restrizioni dell'intervallo come indicato nella sezione valore della proprietà.  
  
 *qualifiedDouble*  
 Un *doppie* valore come descritto in precedenza, seguito da una delle seguenti stringhe di dichiarazione unità: `px`, `in`, `cm`, `pt`.  
  
 `px` (impostazione predefinita) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` è pollici; in 1 = = 96px  
  
 `cm` centimetri; 1cm==(96/2.54) px  
  
 `pt` punti; 1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MinHeight"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.MinHeightProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MinHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MinHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MinHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.MinHeight" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidth">
      <MemberSignature Language="C#" Value="public double MinWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MinWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property MinWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MinWidth { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MinWidth : double with get, set" Usage="System.Windows.FrameworkElement.MinWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the minimum width constraint of the element.</summary>
        <value>La larghezza minima dell'elemento, in [! INCLUDE[TLA#tla_dipixel#plural](~/Includes/tlasharptla-dipixelsharpplural-MD.MD)]. Il valore predefinito è 0,0. Può essere qualsiasi valore maggiore o uguale a 0,0. Tuttavia, <see cref="F:System.Double.PositiveInfinity" /> non è valido, non è <see cref="F:System.Double.NaN" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta di una delle tre proprietà in <xref:System.Windows.FrameworkElement> che consente di specificare le informazioni sulla larghezza.  Le altre due sono <xref:System.Windows.FrameworkElement.Width%2A> e <xref:System.Windows.FrameworkElement.MaxWidth%2A>.  Se si verifica un conflitto tra questi valori, l'ordine di applicazione per determinare l'effettiva larghezza è il primo <xref:System.Windows.FrameworkElement.MinWidth%2A> deve essere tenuto in considerazione, quindi <xref:System.Windows.FrameworkElement.MaxWidth%2A>e infine se ognuno di questi rientrano nei limiti <xref:System.Windows.FrameworkElement.Width%2A>.  
  
 Le restrizioni di valore per il <xref:System.Double> valore vengono applicati da una <xref:System.Windows.ValidateValueCallback> meccanismo. Se si tenta di impostare un valore non valido, viene generata un'eccezione in fase di esecuzione.  
  
<a name="xamlAttributeUsage_MinWidth"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object MinWidth="double"/>  
- or -  
<object MinWidth="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MinWidth"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *double*  
 <xref:System.Double>  
  
 Rappresentazione di stringa di un <xref:System.Double> valore uguale o maggiore di 0.0. Ciò viene interpretato come un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] misura. Le stringhe non necessario includere in modo esplicito i separatori decimali. Ad esempio, un valore di `1` è accettabile.  
  
 Lo stesso <xref:System.Double> si applicano le restrizioni dell'intervallo come indicato nella sezione valore della proprietà.  
  
 *qualifiedDouble*  
 Un *doppie* valore come descritto in precedenza, seguito da una delle seguenti stringhe di dichiarazione unità: `px`, `in`, `cm`, `pt`.  
  
 `px` (impostazione predefinita) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` è pollici; in 1 = = 96px  
  
 `cm` centimetri; 1cm==(96/2.54) px  
  
 `pt` punti; 1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MinWidth"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.MinWidthProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MinWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MinWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MinWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.MinWidth" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public override sealed bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="frameworkElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">The direction that focus is to be moved, as a value of the enumeration.</param>
        <summary>Moves the keyboard focus away from this element and to another element in a provided traversal direction.</summary>
        <returns>Returns <see langword="true" /> if focus is moved successfully; <see langword="false" /> if the target element in direction as specified does not exist or could not be keyboard focused.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esegue l'override di questa implementazione <xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=nameWithType> ed esegue il sealing il metodo.  
  
   
  
## Examples  
 Nell'esempio seguente implementa un gestore che gestisce diversi input di pulsante. Ogni pulsante rappresenta un possibile <xref:System.Windows.Input.FocusNavigationDirection>. Il gestore registra l'elemento con stato attivo della tastiera corrente e viene chiamato <xref:System.Windows.FrameworkElement.MoveFocus%2A> su tale elemento, specificando l'appropriata <xref:System.Windows.Input.FocusNavigationDirection> come inizializzazione per il <xref:System.Windows.Input.TraversalRequest> parametro di tipo specificato.  
  
 [!code-csharp[FocusSample#FocusSampleMoveFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#focussamplemovefocus)]
 [!code-vb[FocusSample#FocusSampleMoveFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#focussamplemovefocus)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.FrameworkElement.Name" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IFrameworkInputElement.Name</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DesignerSerializationOptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the identifying name of the element. The name provides a reference so that code-behind, such as event handler code, can refer to a markup element after it is constructed during processing by a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor.</summary>
        <value>Nome dell'elemento. Il valore predefinito è una stringa vuota.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'utilizzo più comune di questa proprietà consiste nello specificare un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] nome dell'elemento come un attributo nel markup.  
  
 Questa proprietà è essenzialmente fornisce una proprietà di praticità a livello di framework WPF per impostare il [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] [direttiva X:Name](~/docs/framework/xaml-services/x-name-directive.md).  
  
 I nomi devono essere univoci all'interno di un ambito dei nomi. Per altre informazioni, vedere [ambiti dei nomi XAML di WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 Recupero di un <xref:System.Windows.FrameworkElement.Name%2A> se si siano creando elementi nel codice non è comune. Se si dispone già di riferimento appropriati nel codice, è possibile chiamare solo metodi e proprietà sull'elemento di riferimento e non sarà in genere necessario il <xref:System.Windows.FrameworkElement.Name%2A>. È un'eccezione se il <xref:System.Windows.FrameworkElement.Name%2A> stringa con un significato aggiuntivo, ad esempio se è utile visualizzare tale nome nel [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]. Impostazione di un <xref:System.Windows.FrameworkElement.Name%2A> dal code-behind se originale <xref:System.Windows.FrameworkElement.Name%2A> è stato impostato dal markup inoltre non è consigliato e la modifica della proprietà dopo il caricamento di [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] non modificherà il riferimento all'oggetto originale. I riferimenti agli oggetti vengono creati solo quando i sottostanti NameScope creati in modo esplicito durante l'analisi. È necessario chiamare espressamente <xref:System.Windows.FrameworkElement.RegisterName%2A> per rendere effettiva una modifica per il <xref:System.Windows.FrameworkElement.Name%2A> proprietà di un elemento già caricato.  
  
 Un principale è il caso in cui l'impostazione <xref:System.Windows.FrameworkElement.Name%2A> dal codice, è importante la registrazione dei nomi per gli elementi che storyboard verrà eseguita, in modo che vi possano far riferimento in fase di esecuzione. Prima di poter registrare un nome, potrebbe essere inoltre necessario creare e assegnare un <xref:System.Windows.NameScope> istanza. Vedere la sezione di esempio, o [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).  
  
 L'impostazione <xref:System.Windows.FrameworkElement.Name%2A> dal codice limitate le applicazioni, ma ottenere un elemento da <xref:System.Windows.FrameworkElement.Name%2A> è più comune. Un particolare scenario è un'applicazione che supporta un modello di navigazione in cui le pagine vengono ricaricate all'applicazione e il codice in fase di esecuzione non è necessariamente code-behind definito per la pagina. Il metodo di utilità <xref:System.Windows.FrameworkElement.FindName%2A>, che è disponibile da qualsiasi <xref:System.Windows.FrameworkElement>, consente di trovare qualsiasi elemento da <xref:System.Windows.FrameworkElement.Name%2A> nell'albero logico per questo elemento, la ricerca in modo ricorsivo la struttura ad albero in base alle esigenze. In alternativa è possibile usare il <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> metodo statico del <xref:System.Windows.LogicalTreeHelper>, che accetta anche un <xref:System.Windows.FrameworkElement.Name%2A> stringa come argomento.  
  
 Gli elementi radice di utilizzati in genere (<xref:System.Windows.Window>, <xref:System.Windows.Controls.Page> ad esempio) implementa l'interfaccia <xref:System.Windows.Markup.INameScope>. Le implementazioni di questa interfaccia devono imporre che i nomi siano non ambigue nel relativo ambito. Gli elementi radice che definiscono questa interfaccia anche definiscono i limiti di comportamento namescope per tutte la correlate [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)].  
  
 Il <xref:System.Windows.FrameworkElement.Name%2A> proprietà funge anche da un identificatore per altri processi. Ad esempio, il [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] modello di automazione utilizzerà <xref:System.Windows.FrameworkElement.Name%2A> come AutomationId per client e provider.  
  
 I valori stringa utilizzati per <xref:System.Windows.FrameworkElement.Name%2A> presentano alcune restrizioni, come imposto dal sottostante [direttiva X:Name](~/docs/framework/xaml-services/x-name-directive.md) definito dal [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] specifica. In particolare, un <xref:System.Windows.FrameworkElement.Name%2A> deve iniziare con una lettera o il carattere di sottolineatura (_) e deve contenere solo lettere, cifre o caratteri di sottolineatura. Per altre informazioni, vedere [ambiti dei nomi XAML di WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 <xref:System.Windows.FrameworkElement.Name%2A> è una delle poche proprietà di dipendenza che non possono essere animate (<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> è `true` nei metadati), in quanto il nome stesso è essenziale per specificare come destinazione un'animazione. Associazione dati un <xref:System.Windows.FrameworkElement.Name%2A> sia tecnicamente possibile, ma è uno scenario molto comune perché un'associazione a dati <xref:System.Windows.FrameworkElement.Name%2A> non può essere utilizzato lo scopo principale della proprietà: per fornire un punto di connessione dell'identificatore per il code-behind.  
  
<a name="dependencyPropertyInfo_Name"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.NameProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>|  
  
   
  
## Examples  
 Nell'esempio seguente il <xref:System.Windows.FrameworkElement.Name%2A> proprietà nel codice e quindi registra il nome nell'oggetto appena creato <xref:System.Windows.NameScope> chiamando <xref:System.Windows.FrameworkElement.RegisterName%2A>. La tecnica illustrata di seguito è un requisito per l'animazione con storyboard, perché gli storyboard richiedono destinazione tramite il <xref:System.Windows.FrameworkElement.Name%2A>e non può essere la destinazione del riferimento all'oggetto.  
  
 [!code-csharp[animateHeight_procedural#FEName](~/samples/snippets/csharp/VS_Snippets_Wpf/animateHeight_procedural/CSharp/AnimatedHeightExample.cs#fename)]
 [!code-vb[animateHeight_procedural#FEName](~/samples/snippets/visualbasic/VS_Snippets_Wpf/animateHeight_procedural/visualbasic/animatedheightexample.vb#fename)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty NameProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty NameProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.NameProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NameProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ NameProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable NameProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.NameProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Name" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnApplyTemplate">
      <MemberSignature Language="C#" Value="public virtual void OnApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnApplyTemplate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnApplyTemplate();" />
      <MemberSignature Language="F#" Value="abstract member OnApplyTemplate : unit -&gt; unit&#xA;override this.OnApplyTemplate : unit -&gt; unit" Usage="frameworkElement.OnApplyTemplate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita.  
  
 I modelli sono la sezione di completato struttura ad albero visuale un elemento che deriva dalla proprietà modello di un <xref:System.Windows.Style> che viene applicata per l'elemento. Per altre informazioni, vedere [Applicazione di stili e modelli](~/docs/framework/wpf/controls/styling-and-templating.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Le classi derivate di <see cref="T:System.Windows.FrameworkElement" /> possibile utilizzare questo metodo come una notifica per un'ampia gamma di scenari possibili:-è possibile chiamare la propria implementazione di codice che compila il resto della struttura ad albero visuale elemento.  -È possibile eseguire il codice che si basa sulla struttura ad albero visuale da modelli applicati, ad esempio per ottenere riferimenti a elementi denominati che provengono da un modello.  -È possibile introdurre servizi che servono esclusivamente di esistere al termine dell'albero visuale da modelli.  -È possibile impostare gli Stati e le proprietà degli elementi all'interno del modello che dipendono da altri fattori. Ad esempio, i valori delle proprietà potrebbero essere individuabili solo se si conosce l'elemento padre, o quando si deriva una specifica classe utilizza un modello comune.  Gli implementatori devono chiamare sempre l'implementazione di base prima la propria implementazione. <see cref="T:System.Windows.FrameworkElement" /> non presenta alcun valore predefinito potrebbe essere l'implementazione, ma classi coinvolte.  <see cref="T:System.Windows.Controls.Control" /> offre un override simile, <see cref="M:System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuClosing (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuClosing(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuClosing (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuClosing(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuClosing : System.Windows.Controls.ContextMenuEventArgs -&gt; unit&#xA;override this.OnContextMenuClosing : System.Windows.Controls.ContextMenuEventArgs -&gt; unit" Usage="frameworkElement.OnContextMenuClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Provides data about the event.</param>
        <summary>Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> routed event reaches this class in its route. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. È comunque necessario chiamare l'implementazione di base nel caso in cui una classe intermedia nell'ereditarietà abbia implementato questo metodo.  
  
 Lo scopo di questo metodo è simile a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate con un gestore di classe anziché un gestore di istanza. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * infatti diverso per gli eventi indirizzati da un elemento figlio, non necessariamente l'elemento che richiama i gestori, pertanto l'implementazione dovranno tenere origine degli argomenti dell'evento potrebbe essere stato generato l'evento indirizzato proprietà conto (e non deve tentare di generare nuovamente l'evento nella maggior parte dei casi). Le sottoclassi di <xref:System.Windows.FrameworkElement> può scegliere di chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route. Uno scenario potenziale consiste nel accettano gli argomenti dell'evento e contrassegnare intenzionalmente l'evento come gestito.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuOpening (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuOpening(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuOpening (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuOpening(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuOpening : System.Windows.Controls.ContextMenuEventArgs -&gt; unit&#xA;override this.OnContextMenuOpening : System.Windows.Controls.ContextMenuEventArgs -&gt; unit" Usage="frameworkElement.OnContextMenuOpening e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
        <summary>Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> routed event reaches this class in its route. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. È comunque necessario chiamare l'implementazione di base nel caso in cui una classe intermedia nell'ereditarietà abbia implementato questo metodo.  
  
 Lo scopo di questo metodo è simile a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate con un gestore di classe anziché un gestore di istanza. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * infatti diverso per gli eventi indirizzati da un elemento figlio, non necessariamente l'elemento che richiama i gestori, pertanto l'implementazione dovranno tenere origine degli argomenti dell'evento potrebbe essere stato generato l'evento indirizzato proprietà conto (e non deve tentare di generare nuovamente l'evento nella maggior parte dei casi). Le sottoclassi di <xref:System.Windows.FrameworkElement> può scegliere di chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route. Uno scenario potenziale consiste nel accettano gli argomenti dell'evento e contrassegnare intenzionalmente l'evento come gestito.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="frameworkElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
        <summary>Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.GotFocus" /> event reaches this element in its route.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A differenza di altri in * metodi esposti dagli elementi di base, <xref:System.Windows.FrameworkElement.OnGotFocus%2A> dispone di un'implementazione predefinita. In particolare, ha un'implementazione che esegue l'override dell'implementazione null del successivo livello di elemento di base verso il basso, <xref:System.Windows.UIElement.OnGotFocus%2A>. Quando viene richiamato, <xref:System.Windows.FrameworkElement.OnGotFocus%2A> imposta il comportamento dello stato attivo appropriato su questo elemento nei casi in cui ha avuto origine l'evento dall'elemento corrente a causa dello stato attivo della tastiera. Il <xref:System.Windows.FrameworkElement.OnGotFocus%2A> gestore non contrassegnare gli argomenti dell'evento come gestito, anche quando lo stato attivo è impostato per l'elemento corrente. Se l'origine dell'evento è un altro elemento nell'albero della (non l'elemento corrente), il gestore non esegue alcuna operazione.  
  
 È possibile eseguire l'override di questo metodo per modificare il comportamento dello stato attivo predefinito sull'elemento, ma tenere presente che la modifica di comportamento dello stato attivo in questo modo può essere effettuata migliore non consentendo l'elemento a essere attivabile affatto (vedere <xref:System.Windows.UIElement.Focusable%2A>).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Se si desidera contrassegnare l'evento gestito negli argomenti, è necessario conoscere le conseguenze sulla gestione degli eventi in altri elementi padre nell'albero degli elementi. Poiché questo gestore agisce su un evento con un routing di bubbling, se si imposta lo stato attivo corrente <paramref name="sender" /> per l'evento argomenti potrebbero non essere appropriati. Lo stato attivo potrebbe essere necessario passare a un elemento figlio composito o a un elemento padre, a seconda della composizione di determinati controlli. Pertanto il contrassegno di un evento dello stato attivo come gestito è consigliato solo se l'intera struttura ad albero visuale al routing tramite l'evento fa parte della composizione di un controllo che è stato creato.</para>
        </block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="OnInitialized">
      <MemberSignature Language="C#" Value="protected virtual void OnInitialized (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitialized(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInitialized (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInitialized(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInitialized : EventArgs -&gt; unit&#xA;override this.OnInitialized : EventArgs -&gt; unit" Usage="frameworkElement.OnInitialized e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.FrameworkElement.Initialized" /> event. This method is invoked whenever <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> is set to <see langword="true" /> internally.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo particolare in * metodo non è un hook del gestore di classe. Né segue esattamente lo stabilita [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] su * convenzione del metodo che si esegue l'override di questo metodo e non chiamando l'implementazione di base è stato possibile eliminare l'evento corrispondente.  
  
 Si noti che il <xref:System.Windows.FrameworkElement.IsInitialized%2A> proprietà è di sola lettura, pertanto non è possibile impostare <xref:System.Windows.FrameworkElement.IsInitialized%2A> per forzare il comportamento dell'inizializzazione. Impostazione dello stato di inizializzazione deve essere eseguita solo dal [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>L'implementazione predefinita di questo metodo virtuale genera l'evento come descritto in precedenza. Per mantenere questo comportamento, è necessario che gli override chiamino l'implementazione di base. Se non è possibile chiamare l'implementazione di base, non solo non verrà generato il <see cref="E:System.Windows.FrameworkElement.Initialized" /> evento generalmente previsto di un <see cref="T:System.Windows.FrameworkElement" /> classe derivata, ma si elimineranno anche due importanti stile e il tema di stile operazioni di inizializzazione implementata da questa implementazione di base.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.OnApplyTemplate" />
        <altmember cref="E:System.Windows.FrameworkElement.Initialized" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected override void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="frameworkElement.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        <summary>Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement" /> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non deve in genere rilevare le modifiche alle proprietà o le convalide. Invece è destinato alle modifiche del modello generale di invalidamento se determinate informazioni sulle classificazioni generali delle proprietà sono note.  
  
 Questo metodo viene richiamato potenzialmente più volte durante il ciclo di vita di un oggetto. Pertanto, è possibile ottenere prestazioni migliori se si ignora i metadati di proprietà specifico e quindi collegare <xref:System.Windows.CoerceValueCallback> o <xref:System.Windows.PropertyChangedCallback> funzioni per le singole proprietà. Tuttavia, utilizzare questo metodo se un <xref:System.Windows.FrameworkElement> include un numero significativo di proprietà di dipendenza correlata al valore, o se ne include logica, ad esempio il comportamento di rendering, che deve essere ripetuto per molti casi correlati delle convalide di proprietà.  
  
 Si noti che vi sia un nome identico `OnPropertyChanged` metodo con una firma diversa (tipo di parametro non <xref:System.ComponentModel.PropertyChangedEventArgs>) che può essere incluso in una serie di classi. Che `OnPropertyChanged` viene utilizzato per notifiche di oggetto dati e fa parte del contratto per <xref:System.ComponentModel.INotifyPropertyChanged>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Chiamare sempre l'implementazione di base, come la prima operazione nell'implementazione. Errore per eseguire questa operazione disabiliterà in modo significativo l'intero [! Sistema di proprietà include[TLA2#tla_winclient](~/Includes/tla2sharptla-WinClient-MD.MD)], che fa sì che valori non corretti da segnalare. La specifica <see cref="T:System.Windows.FrameworkElement" /> implementazione è inoltre responsabile per la gestione dello stato corretto per una varietà di proprietà che interessano l'interfaccia utente visibile. Questi includono invalidare la struttura ad albero visuale in base alle modifiche apportate allo stile in momenti appropriati.</para>
        </block>
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
        <altmember cref="T:System.Windows.PropertyChangedCallback" />
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnRenderSizeChanged (System.Windows.SizeChangedInfo sizeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo sizeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnRenderSizeChanged (sizeInfo As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ sizeInfo);" />
      <MemberSignature Language="F#" Value="override this.OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit" Usage="frameworkElement.OnRenderSizeChanged sizeInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sizeInfo" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="sizeInfo">Details of the old and new size involved in the change.</param>
        <summary>Raises the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event, using the specified information as part of the eventual event data.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo esegue l'override <xref:System.Windows.UIElement.OnRenderSizeChanged%2A>. Se si chiama questo metodo sarà necessario reimpostare il <xref:System.Windows.FrameworkElement.ActualWidth%2A> proprietà, il <xref:System.Windows.FrameworkElement.ActualHeight%2A> proprietà o entrambe, a seconda di ciò che viene specificato come stati modificati negli argomenti specificati, ed è sempre genererà l'evento.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Esegue l'override di questo metodo per gli scenari di layout tipico. Il sistema di layout opera in modo asincrono deliberatamente per garantire che tutti i layout possibili disporre e misura casi vengono presi in considerazione. Il sistema di layout eseguire l'override di metodi <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> e <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> vengono in genere sufficiente per tutte le personalizzazioni di layout obbligatorie. <see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> viene esposta come metodo virtuale. È possibile eseguire l'override <see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> per risolvere i casi eccezionali in cui una modifica di comportamento in fase di esecuzione relative a combinato con il controllo degli eventi di input è possibile assegnare la ricomposizione in risposta a informazioni sul layout imprecise.  È comunque può eseguire l'override di questo metodo nelle classi derivate (è protetto ma non è sealed). Chiamare sempre l'implementazione di base per mantenere il comportamento indicato in precedenza, a meno che non si hanno motivi specifici per la disabilitazione del comportamento predefinito per il rendering a livello di framework WPF. Riesce a generare il <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> evento verrà causare un comportamento non standard layout se tramite l'implementazione di sistema di layout a livello di framework WPF standard.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStyleChanged (System.Windows.Style oldStyle, System.Windows.Style newStyle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStyleChanged(class System.Windows.Style oldStyle, class System.Windows.Style newStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStyleChanged (oldStyle As Style, newStyle As Style)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStyleChanged(System::Windows::Style ^ oldStyle, System::Windows::Style ^ newStyle);" />
      <MemberSignature Language="F#" Value="abstract member OnStyleChanged : System.Windows.Style * System.Windows.Style -&gt; unit&#xA;override this.OnStyleChanged : System.Windows.Style * System.Windows.Style -&gt; unit" Usage="frameworkElement.OnStyleChanged (oldStyle, newStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldStyle" Type="System.Windows.Style" />
        <Parameter Name="newStyle" Type="System.Windows.Style" />
      </Parameters>
      <Docs>
        <param name="oldStyle">The old style.</param>
        <param name="newStyle">The new style.</param>
        <summary>Invoked when the style in use on this element changes, which will invalidate the layout.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo ha un'implementazione predefinita che consente di impostare un flag interno che rileva la condizione di stile modificato.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Non è in genere necessario eseguire l'override di questo metodo. Qualsiasi modifica a uno stile che include una misura o disposizione modifica attiva già un altro ciclo di rendering, presupponendo un'implementazione tipica delle <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />  /  <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />, o i valori predefiniti. Esegue l'override di <see cref="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" /> potrebbe essere appropriata se il <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />  /  <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> implementazioni sono state intenzionalmente l'ottimizzazione o il supporto di aggiornamenti parziali, ma si desidera applicare le modifiche apportate agli stili più direttamente. (Gli aggiornamenti parziali sarebbe un tentativo di evitare più chiamate incrementali a <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> e <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> su tutti gli elementi figlio).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipClosing (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipClosing(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipClosing (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipClosing(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnToolTipClosing : System.Windows.Controls.ToolTipEventArgs -&gt; unit&#xA;override this.OnToolTipClosing : System.Windows.Controls.ToolTipEventArgs -&gt; unit" Usage="frameworkElement.OnToolTipClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Provides data about the event.</param>
        <summary>Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> routed event reaches this class in its route. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. È comunque necessario chiamare l'implementazione di base nel caso in cui una classe intermedia nell'ereditarietà abbia implementato questo metodo.  
  
 Lo scopo di questo metodo è simile a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate con un gestore di classe anziché un gestore di istanza. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * infatti diverso per gli eventi indirizzati da un elemento figlio, non necessariamente l'elemento che richiama i gestori, pertanto l'implementazione dovranno tenere origine degli argomenti dell'evento potrebbe essere stato generato l'evento indirizzato proprietà conto (e non deve tentare di generare nuovamente l'evento nella maggior parte dei casi). Le sottoclassi di <xref:System.Windows.FrameworkElement> può scegliere di chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route. Uno scenario potenziale consiste nel accettano gli argomenti dell'evento e contrassegnare intenzionalmente l'evento come gestito.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipOpening (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipOpening(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipOpening (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipOpening(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnToolTipOpening : System.Windows.Controls.ToolTipEventArgs -&gt; unit&#xA;override this.OnToolTipOpening : System.Windows.Controls.ToolTipEventArgs -&gt; unit" Usage="frameworkElement.OnToolTipOpening e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Provides data about the event.</param>
        <summary>Invoked whenever the <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> routed event reaches this class in its route. Implement this method to add class handling for this event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. È comunque necessario chiamare l'implementazione di base nel caso in cui una classe intermedia nell'ereditarietà abbia implementato questo metodo.  
  
 Lo scopo di questo metodo è simile a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate con un gestore di classe anziché un gestore di istanza. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * infatti diverso per gli eventi indirizzati da un elemento figlio, non necessariamente l'elemento che richiama i gestori, pertanto l'implementazione dovranno tenere origine degli argomenti dell'evento potrebbe essere stato generato l'evento indirizzato proprietà conto (e non deve tentare di generare nuovamente l'evento nella maggior parte dei casi). Le sottoclassi di <xref:System.Windows.FrameworkElement> può scegliere di chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route. Uno scenario potenziale consiste nel accettano gli argomenti dell'evento e contrassegnare intenzionalmente l'evento come gestito per abbreviare la route.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="frameworkElement.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">The old parent element. May be <see langword="null" /> to indicate that the element did not have a visual parent previously.</param>
        <summary>Invoked when the parent of this element in the visual tree is changed. Overrides <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La struttura ad albero visuale è potenzialmente diversa dall'albero logico quanto include gli elementi che non eseguono il rendering in modo visivo, ad esempio raccolte e si espande alcuni elementi in base alla composizione di tema e uno stile. Per altre informazioni, vedere [Strutture ad albero in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>L'implementazione predefinita di questo metodo virtuale esegue una query per il nuovo elemento padre, genera vari eventi di inizializzazione e imposta flag interni sullo stato di inizializzazione di <see cref="T:System.Windows.FrameworkElement" /> a seconda dei casi. Infine, chiama le implementazioni di base successive come dichiarato da <see cref="T:System.Windows.UIElement" />, che a sua volta chiama dalla base in <see cref="T:System.Windows.Media.Visual" />. Chiamare sempre il metodo di implementazione di base per mantenere questo comportamento, in caso contrario, il comportamento di struttura ad albero dell'elemento per questo elemento quando dichiarato come elemento figlio di un altro elemento non potrebbe essere come previsto.  Alcuni esistente [! Classi include[TLA#tla_winclient](~/Includes/tlasharptla-WinClient-MD.MD)] eseguire l'override di questo metodo, ad esempio: <see cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />, <see cref="M:System.Windows.Controls.ListBoxItem.OnVisualParentChanged(System.Windows.DependencyObject)" />. Lo scenario più comune consiste nell'imporre che il nuovo elemento padre deve essere un tipo specifico. Ciò potrebbe comportare la generazione di un'eccezione se il nuovo elemento padre non è stato possibile alcune modalità di test del tipo. Una versione specializzata di questo scenario esiste nelle implementazioni per voci di elenco e voci di menu, che non avranno alcun significato all'esterno di un elemento padre visual proprietaria di una raccolta appropriata per archiviarli in. Si noti che questi casi non necessariamente generano eccezioni, perché potrebbero essere presenti scenari della finestra di progettazione che si basano sull'assegnazione di elementi che vengono momentaneamente senza padri "normali".  È inoltre l'override del metodo in determinati elementi che sono in genere l'elemento radice, ad esempio <see cref="T:System.Windows.Window" />. Un altro caso costituito da elementi che sono apparentemente all'elemento radice nel markup ma che genera automaticamente un'infrastruttura più grande in un albero logico compilato (ad esempio <see cref="T:System.Windows.Controls.Page" />). Il <see cref="T:System.Windows.Window" /> e <see cref="T:System.Windows.Controls.Page" /> implementazioni intenzionalmente il sealing del metodo.</para>
        </block>
        <altmember cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyle">
      <MemberSignature Language="C#" Value="public bool OverridesDefaultStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesDefaultStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesDefaultStyle As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesDefaultStyle { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OverridesDefaultStyle : bool with get, set" Usage="System.Windows.FrameworkElement.OverridesDefaultStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether this element incorporates style properties from theme styles.</summary>
        <value>
          <see langword="true" /> Se questo elemento non utilizza le proprietà di stile del tema; tutte le proprietà di stile di origine provengono dagli stili dell'applicazione locale e non si applicano le proprietà di stile del tema. <see langword="false" /> Se vengono applicati per primi gli stili dell'applicazione e quindi di applicare gli stili del tema per le proprietà che non sono state impostate in particolare negli stili dell'applicazione. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'utilizzo più comune di questa proprietà è indiretta entro il setter di uno stile che include uno stile con tema.  
  
> [!IMPORTANT]
>  Se si imposta <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> a `true` su un controllo, si annullerà il modello di controllo predefinito fornito dagli stili del tema. Tale modello di controllo include in genere il Visualizzatore di contenuto e altri elementi composti che forniscono base [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] funzionalità e la visualizzazione per il controllo. Se si desidera il controllo per continuare a supportare le stesse funzionalità di stili del tema predefinito, è necessario fornire uno stile alternativo con un modello di controllo che consente di replicare la stessa struttura. Per altre informazioni, vedere [Cenni preliminari sulla modifica di controlli](~/docs/framework/wpf/controls/control-authoring-overview.md).  
  
<a name="dependencyPropertyInfo_OverridesDefaultStyle"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.OverridesDefaultStyleProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OverridesDefaultStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OverridesDefaultStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.OverridesDefaultStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OverridesDefaultStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OverridesDefaultStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OverridesDefaultStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.OverridesDefaultStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ Parent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.DependencyObject" Usage="System.Windows.FrameworkElement.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the logical parent  element of this element.</summary>
        <value>Elemento padre logico di questo elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.Parent%2A> potrebbe essere `null` nei casi in cui un elemento è stata creata un'istanza, ma non è collegato a un albero logico che si connette per l'elemento radice a livello di pagina o l'oggetto applicazione.  
  
 Si noti che l'elemento padre logico di un elemento può essere modificato a seconda delle funzionalità dell'applicazione e mantenere il valore di questa proprietà non riflette tale modifica. È in genere necessario ottenere il valore immediatamente prima è necessario.  
  
 Vedere [alberi in WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md) per ulteriori informazioni su attraversamento dell'albero logico e gli scenari in cui l'utilizzo <xref:System.Windows.FrameworkElement.Parent%2A> considerata una tecnica dell'elemento padre l'individuazione è appropriato.  
  
 Il motore della proprietà potrà ricalcolare tutti i valori delle proprietà di un elemento quando viene riassociato come padre, perché alcune proprietà ereditano i valori nell'albero logico. Il <xref:System.Windows.FrameworkElement.DataContext%2A> che applica le associazioni possono essere modificato anche quando gli elementi vengono riassociati come padre.  
  
 Modifica padre di un elemento viene in genere eseguita mediante manipolazione delle raccolte tramite dedicato aggiungere o rimuovere metodi, oppure impostando le proprietà del contenuto di elementi.  
  
 Lo scenario più comune per l'utilizzo di <xref:System.Windows.FrameworkElement.Parent%2A> proprietà consiste nell'ottenere un riferimento, quindi varie <xref:System.Windows.FrameworkElement> i valori delle proprietà dall'elemento padre. Per i modelli, il <xref:System.Windows.FrameworkElement.Parent%2A> del modello infine possibile `null`. Per andare oltre questo punto e passare all'albero logico in cui viene effettivamente applicato il modello, utilizzare <xref:System.Windows.FrameworkElement.TemplatedParent%2A>.  
  
 Si noti che questa proprietà non report padri di struttura ad albero visuale nei casi in cui questi variare dagli elementi padre dell'albero logico. Struttura ad albero visuale padre non sono in genere importanti per i casi generali dell'applicazione tuttavia sia gli elementi padre desiderato per determinati case livello visivo. Vedere <xref:System.Windows.Media.VisualTreeHelper>.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il codice che verifica la presenza di un elemento e quindi utilizza i valori delle proprietà dall'elemento padre per impostare le proprietà per l'elemento figlio in modo che corrisponda. In questo caso sono le proprietà che interessano le dimensioni per il rendering.  
  
 [!code-csharp[GeometryDesigner#FEParentProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryDesigner/CSharp/Window1.xaml.cs#feparentproperty)]
 [!code-vb[GeometryDesigner#FEParentProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometryDesigner/visualbasic/window1.xaml.vb#feparentproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.TemplatedParent" />
        <altmember cref="T:System.Windows.LogicalTreeHelper" />
      </Docs>
    </Member>
    <Member MemberName="ParentLayoutInvalidated">
      <MemberSignature Language="C#" Value="protected internal virtual void ParentLayoutInvalidated (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void ParentLayoutInvalidated(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub ParentLayoutInvalidated (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void ParentLayoutInvalidated(System::Windows::UIElement ^ child);" />
      <MemberSignature Language="F#" Value="abstract member ParentLayoutInvalidated : System.Windows.UIElement -&gt; unit&#xA;override this.ParentLayoutInvalidated : System.Windows.UIElement -&gt; unit" Usage="frameworkElement.ParentLayoutInvalidated child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child">The child element reporting the change.</param>
        <summary>Supports incremental layout implementations in specialized subclasses of <see cref="T:System.Windows.FrameworkElement" />. <see cref="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" /> is invoked when a child element has invalidated a property that is marked in metadata as affecting the parent's measure or arrange passes during layout.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'elemento ha un elemento figlio in cui è stata invalidata alcune proprietà e la proprietà è stata contrassegnata come <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> o <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> nei metadati di proprietà durante la registrazione, questo metodo viene richiamato. La chiamata al metodo notifica all'elemento padre quale particolare elemento figlio deve essere misurato di nuovo se questo elemento supporta l'aggiornamento parziale (incrementale) del layout.  
  
 Per impostazione predefinita, <xref:System.Windows.FrameworkElement> non supporta il layout incrementale e nel <xref:System.Windows.FrameworkElement> classe questo metodo non è Nessuna implementazione predefinita. Lo scenario in cui si esegue l'override di questo metodo potrebbe essere necessario non è comune, perché è necessario modificare il comportamento di sistema di layout predefinito.  
  
 Uno scenario di implementazione di esempio potrebbe essere in una classe abbia limitazioni del tipo per possibili elementi figlio vengono significativamente più restrittivi rispetto al sistema di layout a livello di framework WPF. A causa della natura di tali elementi personalizzati, le modifiche alle proprietà può essere rinviati deliberatamente quando si implementa il comportamento di alcuni layout personalizzato. Override dei metodi di misure/disporre, il passaggio di rendering che tentano di ottimizzare l'elemento figlio, ad esempio, può essere rinviati per determinati tipi di modifiche che normalmente comporterebbe un altro passaggio di layout.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public override sealed System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="frameworkElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">The direction for which a prospective focus change should be determined.</param>
        <summary>Determines the next element that would receive focus relative to this element for a provided focus movement direction, but does not actually move the focus.</summary>
        <returns>The next element that focus would move to if focus were actually traversed. May return <see langword="null" /> if focus cannot be moved relative to this element for the provided direction.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.MoveFocus%2A> è il metodo correlato che effettivamente sposta lo stato attivo.  
  
   
  
## Examples  
 Nell'esempio seguente implementa un gestore che gestisce diversi input di pulsante, tutti i pulsanti che rappresenta un possibile <xref:System.Windows.Input.FocusNavigationDirection>. Il gestore registra l'elemento con stato attivo della tastiera corrente e viene chiamato <xref:System.Windows.FrameworkElement.PredictFocus%2A> su tale elemento e specifica appropriata <xref:System.Windows.Input.FocusNavigationDirection> come inizializzazione per il <xref:System.Windows.Input.TraversalRequest> parametro di tipo specificato. Anziché spostarsi a tale elemento come <xref:System.Windows.FrameworkElement.MoveFocus%2A> farebbe, il gestore di modifica le dimensioni fisiche della destinazione stimato lo stato attivo per scopi di visualizzazione.  
  
 [!code-csharp[FocusSample#FEPredictFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#fepredictfocus)]
 [!code-vb[FocusSample#FEPredictFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#fepredictfocus)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Specified one of the following directions in the <see cref="T:System.Windows.Input.TraversalRequest" />: <see cref="F:System.Windows.Input.FocusNavigationDirection.Next" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.First" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Last" />. These directions are not legal for <see cref="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> (but they are legal for <see cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />).</exception>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="member this.RegisterName : string * obj -&gt; unit" Usage="frameworkElement.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">Name to use for the specified name-object mapping.</param>
        <param name="scopedElement">Object for the mapping.</param>
        <summary>Provides an accessor that simplifies access to the <see cref="T:System.Windows.NameScope" /> registration method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è un metodo pratico per chiamare <xref:System.Windows.NameScope.RegisterName%2A>. L'implementazione controllerà gli elementi padre successivi finché non trova applicabile <xref:System.Windows.NameScope> implementazione, che viene trovata mediante la ricerca di un elemento che implementa <xref:System.Windows.Markup.INameScope>. Per ulteriori informazioni su ambiti dei nomi, vedere [ambiti dei nomi XAML di WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 La chiamata <xref:System.Windows.FrameworkElement.RegisterName%2A> è necessaria per associare correttamente di storyboard per animazioni per le applicazioni create nel codice. Infatti, proprietà, uno della chiave storyboard <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>, utilizza una ricerca in fase di esecuzione anziché essere in grado di accettare un riferimento a un elemento di destinazione. Questo vale anche se tale elemento è accessibile mediante un riferimento dal codice. Per ulteriori informazioni sul motivo per cui è necessario registrare i nomi per le destinazioni di storyboard, vedere [Storyboards Overview](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).  
  
   
  
## Examples  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/ScopeExample.cs#namescopeexample)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/scopeexample.vb#namescopeexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.NameScope.RegisterName(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void RemoveLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RemoveLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RemoveLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RemoveLogicalChild(System::Object ^ child);" />
      <MemberSignature Language="F#" Value="member this.RemoveLogicalChild : obj -&gt; unit" Usage="frameworkElement.RemoveLogicalChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child">The element to remove.</param>
        <summary>Removes the provided object from this element's logical tree. <see cref="T:System.Windows.FrameworkElement" /> updates the affected logical tree parent pointers to keep in sync with this deletion.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per l'implementazione di raccolte di oggetti che rappresentano elementi figlio logici di un elemento. Questa operazione può essere eseguita nel getter o Setter, gestori di classi di `Changed` eventi, costruttori, o all'interno della raccolta di tipi autonomamente.  
  
 Gli autori di controllo, la modifica dell'albero logico a questo livello non è consigliabile, a meno che nessuno dei modelli di contenuto della classe di controllo di base forniti siano appropriate. Prendere in considerazione il livello di creazione di una sottoclasse <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, e <xref:System.Windows.Controls.HeaderedItemsControl>. Queste classi forniscono un modello di contenuto con l'imposizione particolare figlio logici tramite dedicato [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], nonché il supporto per altre funzionalità in genere utili in un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controllo, ad esempio lo stile tramite i modelli.  
  
   
  
## Examples  
 Nell'esempio seguente viene implementata una `Child` proprietà in un oggetto personalizzato <xref:System.Windows.FrameworkElement> che crea la propria implementazione del livello visivo. Setter della proprietà è progettata in modo che se il valore viene modificato, il valore precedente viene rimosso dall'albero logico, nonché una raccolta visuale specifici di una classe. I valori vengono memorizzati nella cache e quindi il nuovo valore verrà aggiunto il standard framework a livello logico dell'albero di WPF sia la raccolta visuale personalizzata.  
  
 [!code-csharp[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/CSharp/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]
 [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/visualbasic/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RequestBringIntoView">
      <MemberSignature Language="C#" Value="public event System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RequestBringIntoView As RequestBringIntoViewEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RequestBringIntoViewEventHandler ^ RequestBringIntoView;" />
      <MemberSignature Language="F#" Value="member this.RequestBringIntoView : System.Windows.RequestBringIntoViewEventHandler " Usage="member this.RequestBringIntoView : System.Windows.RequestBringIntoViewEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RequestBringIntoViewEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when <see cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" /> is called on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento indica a un elemento padre <xref:System.Windows.Controls.ScrollViewer> (o classe derivata) che l'elemento che genera il <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento deve essere reso visibile all'interno dell'area di scorrimento. Il <xref:System.Windows.Controls.ScrollViewer> quindi contrassegnerà la <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento come gestito, utilizzando la gestione di classi di evento. In genere <xref:System.Windows.FrameworkElement.RequestBringIntoView> evento dati dovrebbero non essere contrassegnato come gestiti da qualsiasi classe che consentono di controllare un'area di scorrimento o da qualsiasi gestore dell'istanza, in quanto in questo modo potrebbe interferire con l'obiettivo dell'elemento che ha chiamato <xref:System.Windows.FrameworkElement.BringIntoView%2A>.  
  
<a name="routedEventInfo_RequestBringIntoView"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.RequestBringIntoViewEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.RequestBringIntoViewEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
        <altmember cref="T:System.Windows.Controls.ScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="RequestBringIntoViewEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent RequestBringIntoViewEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent RequestBringIntoViewEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.RequestBringIntoViewEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RequestBringIntoViewEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ RequestBringIntoViewEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable RequestBringIntoViewEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.RequestBringIntoViewEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> routed event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public System.Windows.ResourceDictionary Resources { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ResourceDictionary Resources" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Resources" />
      <MemberSignature Language="VB.NET" Value="Public Property Resources As ResourceDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResourceDictionary ^ Resources { System::Windows::ResourceDictionary ^ get(); void set(System::Windows::ResourceDictionary ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Resources : System.Windows.ResourceDictionary with get, set" Usage="System.Windows.FrameworkElement.Resources" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Markup.IHaveResources.Resources</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ResourceDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the locally-defined resource dictionary.</summary>
        <value>Dizionario corrente definito localmente delle risorse, in cui ogni risorsa è accessibile in base alla chiave.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I dizionari delle risorse che possono essere definiti completamente o parzialmente in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] vengono in genere creati come elemento proprietà e si trovano in genere l'elemento radice di qualsiasi pagina singola o per l'applicazione. Posizionando il dizionario risorse a questo livello rende più semplice trovare i singoli elementi figlio nella pagina (o da qualsiasi pagina, nel caso dell'applicazione). Nella maggior parte degli scenari di applicazione, è consigliabile che gli stili viene definita come elementi oggetto all'interno di un dizionario risorse, o essere definita come risorse esterne in modo che l'intera risorsa dello stile può essere indipendente (grazie a questo approccio separato progettazione responsabilità da responsabilità degli sviluppatori separando i file fisici che devono essere modificate).  
  
 Si noti che questa proprietà restituisce solo il dizionario risorse dichiarato direttamente all'interno di quell'elemento. Ciò è diverso rispetto al processo di ricerca risorsa effettiva, in cui un elemento figlio possibile accedere alle risorse definite in ogni elemento padre, la ricerca in modo ricorsivo verso l'alto.  
  
 Può inoltre fare riferimento codice all'interno della raccolta di risorse, ma tenere presente che le risorse create [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] sicuramente non saranno più accessibili fino a dopo <xref:System.Windows.FrameworkElement.Loaded> viene generato dall'elemento che dichiara il dizionario. In effetti, le risorse vengono analizzate in modo asincrono e non anche il <xref:System.Windows.FrameworkElement.Loaded> evento è una garanzia che è possibile fare riferimento a un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] risorsa definita. Per questo motivo è consigliabile in genere solo accedere [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] risorse definite come parte di codice in fase di esecuzione o tramite altre [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] tecniche, ad esempio stili o riferimenti all'estensione di risorsa per i valori di attributo. Quando si accede alle risorse tramite codice, è essenzialmente equivalente a un riferimento da [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 Sottostante <xref:System.Windows.ResourceDictionary> supporta i metodi richiesti per aggiungere, rimuovere o inviare query delle risorse all'interno della raccolta utilizzando il codice. Il <xref:System.Windows.FrameworkElement.Resources%2A> proprietà è impostabile per supportare lo scenario di sostituzione completa la raccolta di risorse di un elemento di un nuovo o diverso <xref:System.Windows.ResourceDictionary>.  
  
 Si noti che il [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] sintassi illustrata non include un elemento per il <xref:System.Windows.ResourceDictionary>. Questo è un esempio di sintassi per raccolte implicite; un tag che rappresenta l'elemento della raccolta può essere omessa. In alternativa, sono specificati gli elementi che vengono aggiunte come elementi alla raccolta. Per altre informazioni sulle raccolte implicite e [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], vedere [sintassi di XAML In dettaglio](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md). Un caso in cui un <xref:System.Windows.ResourceDictionary> sono ancora specificate in modo esplicito come un elemento è se si stanno introducendo un dizionario unito, nel qual caso non sono presenti in genere gli elementi figlio che <xref:System.Windows.ResourceDictionary>. Per informazioni dettagliate, vedere [uniti i dizionari delle risorse](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md).  
  
<a name="xamlPropertyElementUsage_Resources"></a>   
## <a name="xaml-property-element-usage"></a>Utilizzo della sintassi XAML per elementi proprietà  
  
```  
<object>  
  <object.Resources>  
    oneOrMoreResourceElements  
  </object.Resources>  
</object>  
```  
  
<a name="xamlValues_Resources"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *oneOrMoreResourceElements*  
 Uno o più elementi oggetto, ognuno dei quali definisce una risorsa. Ogni elemento di proprietà della risorsa all'interno di ogni <xref:System.Windows.ResourceDictionary> deve avere un valore univoco per il [direttiva X:Key](~/docs/framework/xaml-services/x-key-directive.md), che funge da chiave univoca quando vengono recuperati i valori di <xref:System.Windows.ResourceDictionary>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Application.Resources" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetBinding">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Attaches a binding to this element for the specified dependency property.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression SetBinding (System.Windows.DependencyProperty dp, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression SetBinding(class System.Windows.DependencyProperty dp, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, path As String) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : System.Windows.DependencyProperty * string -&gt; System.Windows.Data.BindingExpression" Usage="frameworkElement.SetBinding (dp, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dp">Identifies the destination property where the binding should be established.</param>
        <param name="path">The source property name or the path to the property used for the binding.</param>
        <summary>Attaches a binding to this element, based on the provided source property name as a path qualification to the data source.</summary>
        <returns>Records the conditions of the binding. This return value can be useful for error checking.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è un metodo pratico per chiamare <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, che passa l'istanza corrente come il <xref:System.Windows.DependencyObject>e crea un nuovo <xref:System.Windows.Data.Binding> in base al `path` parametro. Questa firma è più conveniente di attivazione di una semplice associazione predefinita. Se è necessario specificare eventuali proprietà di associazione da condizioni non predefinite, o utilizzare un <xref:System.Windows.Data.MultiBinding> oppure <xref:System.Windows.Data.PriorityBinding>, è consigliabile utilizzare il <xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29> firma.  
  
   
  
## Examples  
 Nell'esempio seguente imposta un'associazione usando un percorso specifico.  
  
 [!code-csharp[BaseElementsSmorgasbord#SetBindingPath](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#setbindingpath)]
 [!code-vb[BaseElementsSmorgasbord#SetBindingPath](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#setbindingpath)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpressionBase SetBinding (System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpressionBase SetBinding(class System.Windows.DependencyProperty dp, class System.Windows.Data.BindingBase binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, binding As BindingBase) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpressionBase ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::Windows::Data::BindingBase ^ binding);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : System.Windows.DependencyProperty * System.Windows.Data.BindingBase -&gt; System.Windows.Data.BindingExpressionBase" Usage="frameworkElement.SetBinding (dp, binding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="binding" Type="System.Windows.Data.BindingBase" />
      </Parameters>
      <Docs>
        <param name="dp">Identifies the property where the binding should be established.</param>
        <param name="binding">Represents the specifics of the data binding.</param>
        <summary>Attaches a binding to this element, based on the provided binding object.</summary>
        <returns>Records the conditions of the binding. This return value can be useful for error checking.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è un metodo pratico per chiamare <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, che passa l'istanza corrente come il <xref:System.Windows.DependencyObject>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFlowDirection">
      <MemberSignature Language="C#" Value="public static void SetFlowDirection (System.Windows.DependencyObject element, System.Windows.FlowDirection value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetFlowDirection(class System.Windows.DependencyObject element, valuetype System.Windows.FlowDirection value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetFlowDirection (element As DependencyObject, value As FlowDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetFlowDirection(System::Windows::DependencyObject ^ element, System::Windows::FlowDirection value);" />
      <MemberSignature Language="F#" Value="static member SetFlowDirection : System.Windows.DependencyObject * System.Windows.FlowDirection -&gt; unit" Usage="System.Windows.FrameworkElement.SetFlowDirection (element, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Windows.FlowDirection" />
      </Parameters>
      <Docs>
        <param name="element">The element that specifies a flow direction.</param>
        <param name="value">A value of the enumeration, specifying the direction.</param>
        <summary>Sets the value of the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> attached property for the provided element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo supporta la sintassi della proprietà associata per la <xref:System.Windows.FrameworkElement.FlowDirection%2A> proprietà, consentendo pertanto figlio di elementi di una classe <xref:System.Windows.FrameworkElement> per specificare la direzione di flusso per la disposizione all'interno del relativo elemento padre. Per impostare il valore corrente <xref:System.Windows.FrameworkElement>, utilizzare il direct [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] funzione di accesso <xref:System.Windows.FrameworkElement.FlowDirection%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.FlowDirection" />
      </Docs>
    </Member>
    <Member MemberName="SetResourceReference">
      <MemberSignature Language="C#" Value="public void SetResourceReference (System.Windows.DependencyProperty dp, object name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResourceReference(class System.Windows.DependencyProperty dp, object name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetResourceReference (dp As DependencyProperty, name As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetResourceReference(System::Windows::DependencyProperty ^ dp, System::Object ^ name);" />
      <MemberSignature Language="F#" Value="member this.SetResourceReference : System.Windows.DependencyProperty * obj -&gt; unit" Usage="frameworkElement.SetResourceReference (dp, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="name" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp">The property to which the resource is bound.</param>
        <param name="name">The name of the resource.</param>
        <summary>Searches for a resource with the specified name and sets up a resource reference to it for the specified property.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Riferimento a una risorsa è simile all'utilizzo di un [estensione di Markup DynamicResource](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md) nel markup. Il riferimento di risorsa crea un'espressione interna che fornisce il valore della proprietà specificata in fase di esecuzione posticipata. L'espressione verrà valutata nuovamente ogni volta che il dizionario risorse indica un valore modificato tramite gli eventi interni oppure ogni volta che l'elemento corrente viene riassociato come padre (una modifica padre modificherebbe il percorso di ricerca dizionario).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.Application.Resources" />
        <altmember cref="P:System.Windows.FrameworkElement.Resources" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeResources">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeResources" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeResources () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeResources();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeResources : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeResources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkElement.Resources" /> property.</summary>
        <returns>
          <see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Resources" /> property value should be serialized; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verrà restituito `true` , purché vi sia almeno una risorsa con chiave locale <xref:System.Windows.FrameworkElement.Resources%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeStyle">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeStyle" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeStyle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeStyle();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeStyle : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkElement.Style" /> property.</summary>
        <returns>
          <see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Style" /> property value should be serialized; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verrà restituito `true` se il <xref:System.Windows.Style> è impostato localmente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTriggers">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeTriggers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeTriggers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeTriggers" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeTriggers () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeTriggers();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeTriggers : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeTriggers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkElement.Triggers" /> property.</summary>
        <returns>
          <see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Triggers" /> property value should be serialized; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo restituisce `true` se il <xref:System.Windows.FrameworkElement.Triggers%2A> proprietà è impostata localmente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.SizeChangedEventHandler SizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.SizeChangedEventHandler SizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.SizeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SizeChanged As SizeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::SizeChangedEventHandler ^ SizeChanged;" />
      <MemberSignature Language="F#" Value="member this.SizeChanged : System.Windows.SizeChangedEventHandler " Usage="member this.SizeChanged : System.Windows.SizeChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.SizeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when either the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> or the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> properties change value on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vengono gestiti solo all'interno dell'elemento stesso in cui vengono generati gli eventi indirizzati direttamente non seguono una route. Indirizzare gli eventi indirizzati supportare altri comportamenti dell'evento indirizzato: supportano una raccolta di gestori accessibile e può essere utilizzati come un <xref:System.Windows.EventTrigger> in uno stile.  
  
 Il sistema di layout legge le proprietà all'interno di <xref:System.Windows.SizeChangedEventArgs> classe di argomenti dell'evento, per determinare se le modifiche di dimensione indicate devono essere considerate significative. In questo modo il sistema di layout o le implementazioni di layout specifiche del controllo per evitare di forzare una modifica di layout a causa delle differenze visivamente impercettibile tra i valori di larghezza o altezza vecchio e nuovo. Le differenze impercettibile possono dipendere da calcoli di arrotondamento o stesso risultato di un tipo di dati a virgola mobile.  
  
<a name="routedEventInfo_SizeChanged"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.SizeChangedEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.SizeChangedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Height" />
        <altmember cref="P:System.Windows.FrameworkElement.Width" />
      </Docs>
    </Member>
    <Member MemberName="SizeChangedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent SizeChangedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent SizeChangedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.SizeChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeChangedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ SizeChangedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable SizeChangedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.SizeChangedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.SourceUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SourceUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ SourceUpdated;" />
      <MemberSignature Language="F#" Value="member this.SourceUpdated : EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " Usage="member this.SourceUpdated : System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the source value changes for any existing property binding on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Data.Binding.SourceUpdated> generato da qualsiasi evento <xref:System.Windows.Data.Binding> associata a questo elemento.  
  
<a name="xamlAttributeUsage_SourceUpdated"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object SourceUpdated="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Data.Binding.SourceUpdated" />
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public System.Windows.Style Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style Style" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Style" />
      <MemberSignature Language="VB.NET" Value="Public Property Style As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ Style { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Style : System.Windows.Style with get, set" Usage="System.Windows.FrameworkElement.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the style used by this element when it is rendered.</summary>
        <value>Stile non predefinito applicato per l'elemento, se presente. In caso contrario, <see langword="null" />. Il valore predefinito per un valore predefinito costruito <see cref="T:System.Windows.FrameworkElement" /> è <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per i controlli, lo stile corrente è spesso fornito da uno stile predefinito da temi di controllo oppure dagli stili generalmente applicato ai controlli di quel tipo dalle risorse a livello di pagina o un'applicazione (stile implicito). Questa proprietà non predefiniti non impostato o restituito stili (tema), ma viene restituito un impliciti allo stile o uno stile esplicito che agisce sull'elemento. Nel caso di stili impliciti o espliciti, non è importante se lo stile non è specificato come una risorsa o definito in locale.  
  
 Impostare gli stili presenta alcune restrizioni. È possibile reimpostare l'intera <xref:System.Windows.FrameworkElement.Style%2A> proprietà a un nuovo <xref:System.Windows.Style> in qualsiasi momento, forzando la ricomposizione un layout. Tuttavia, appena lo stile selezionato si trova in uso da un elemento caricato, il <xref:System.Windows.Style> deve essere considerato bloccato. Tentativo di apportare una modifica a una singola proprietà di uno stile in uso (ad esempio qualsiasi elemento all'interno della raccolta di <xref:System.Windows.Style.Setters%2A>) viene generata un'eccezione. Viene considerato uno stile che è definito nel markup di essere in uso, non appena viene caricato da un dizionario risorse (per le risorse) o viene caricata la pagina che è contenuto all'interno (per gli stili in linea).  
  
 <xref:System.Windows.FrameworkElement.Style%2A> è una proprietà di dipendenza con precedenza speciale. Impostato localmente stile in genere ha la precedenza più alta nel sistema di proprietà. Se il <xref:System.Windows.FrameworkElement.Style%2A> è null a questo punto, durante il caricamento del sistema di proprietà effettua per gli stili impliciti nelle risorse locali o dell'applicazione che specificano tale tipo. Se lo stile ancora null dopo questo passaggio, lo stile di agire per scopi di presentazione in genere proviene dallo stile predefinito (tema), ma lo stile predefinito non viene restituito nel <xref:System.Windows.FrameworkElement.Style%2A> valore della proprietà. Vedere [precedenza dei valori di proprietà di dipendenza](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md) oppure [applicazione di stili e modelli](~/docs/framework/wpf/controls/styling-and-templating.md).  
  
<a name="xamlAttributeUsage_Style"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object Style="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_Style"></a>   
## <a name="xaml-property-element-usage"></a>Utilizzo della sintassi XAML per elementi proprietà  
  
<a name="xamlValues_Style"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *ResourceExtension*  
 Uno dei seguenti:, o. Vedere [risorse XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
 *styleResourceKey*  
 La chiave che identifica lo stile richiesto. La chiave fa riferimento a una risorsa esistente in un <xref:System.Windows.ResourceDictionary>.  
  
> [!NOTE]
>  La sintassi degli elementi è tecnicamente possibile, ma non è consigliata per la maggior parte degli scenari. Vedere [stili Inline e modelli](~/docs/framework/wpf/advanced/inline-styles-and-templates.md). Riferimento a un'associazione utilizzando o <xref:System.Windows.Data.Binding> è anche possibile, ma non comune.  
  
<a name="dependencyPropertyInfo_Style"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.StyleProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 L'esempio seguente definisce uno stile in un dizionario risorse.  
  
 [!code-xaml[FEResource#StyleProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty)]  
[!code-xaml[FEResource#StyleProperty2](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty2)]  
[!code-xaml[FEResource#StyleProperty3](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty3)]  
[!code-xaml[FEResource#StyleProperty4](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty StyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty StyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.StyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ StyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable StyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.StyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Style" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function IsAmbientPropertyAvailable (propertyName As String) As Boolean Implements IQueryAmbient.IsAmbientPropertyAvailable" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System::String ^ propertyName) = System::Windows::Markup::IQueryAmbient::IsAmbientPropertyAvailable;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the requested ambient property.</param>
        <summary>For a description of this member, see the <see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" /> method.</summary>
        <returns>
          <see langword="true" /> if <paramref name="propertyName" /> is available; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un'implementazione esplicita di un membro di interfaccia. e può essere utilizzato solo quando si esegue il cast dell'istanza di <xref:System.Windows.FrameworkElement> su un'interfaccia <xref:System.Windows.Markup.IQueryAmbient>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.FrameworkElement.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an arbitrary object value that can be used to store custom information about this element.</summary>
        <value>Il valore previsto. Nessun valore predefinito per questa proprietà.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà è analoga alle proprietà di Tag in altri modelli di programmazione di Microsoft, ad esempio Visual Basic, Applications Edition o Windows Form. <xref:System.Windows.FrameworkElement.Tag%2A> documento intende fornire un percorso della proprietà preesistente in cui è possibile archiviare informazioni di base personalizzate qualsiasi <xref:System.Windows.FrameworkElement> senza richiedere la creazione di una sottoclasse di un elemento.  
  
 Poiché questa proprietà accetta un oggetto, è necessario utilizzare l'utilizzo dell'elemento di proprietà per impostare il <xref:System.Windows.FrameworkElement.Tag%2A> proprietà in XAML su un valore diverso da un oggetto con un convertitore di tipi noti e incorporato, ad esempio una stringa. Gli oggetti utilizzati in questo modo rientrano in genere non gli spazi dei nomi WPF standard e pertanto possono richiedere il mapping dello spazio dei nomi per lo spazio dei nomi esterno per poter essere introdotti come elementi XAML. Per informazioni dettagliate, vedere [spazi dei nomi XAML ed eseguendo il Mapping Namespace per XAML di WPF](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md) e [classi XAML e personalizzate per WPF](~/docs/framework/wpf/advanced/xaml-and-custom-classes-for-wpf.md).  
  
<a name="dependencyPropertyInfo_Tag"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.TagProperty>|  
|Impostare le proprietà dei metadati su `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Name" />
      </Docs>
    </Member>
    <Member MemberName="TagProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TagProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TagProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.TagProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TagProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TagProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TagProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.TagProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Tag" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.TargetUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TargetUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ TargetUpdated;" />
      <MemberSignature Language="F#" Value="member this.TargetUpdated : EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " Usage="member this.TargetUpdated : System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the target value changes for any property binding on this element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Data.Binding.TargetUpdated> generato da qualsiasi evento <xref:System.Windows.Data.Binding> associata a questo elemento. In genere ciò significa che l'associazione in questione è un'associazione bidirezionale, e che la proprietà di dipendenza associata che il valore della proprietà precedente non è più valido in base a qualsiasi schema di convalida o la memorizzazione nella cache che supportano la proprietà o l'origine dati.  
  
 Utilizzare i dati dell'evento di <xref:System.Windows.FrameworkElement.TargetUpdated> evento per determinare le proprietà specifiche che segnala l'aggiornamento del valore di destinazione.  
  
<a name="xamlAttributeUsage_TargetUpdated"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object TargetUpdated="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Data.Binding.TargetUpdated" />
      </Docs>
    </Member>
    <Member MemberName="TemplatedParent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject TemplatedParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject TemplatedParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.TemplatedParent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemplatedParent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ TemplatedParent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TemplatedParent : System.Windows.DependencyObject" Usage="System.Windows.FrameworkElement.TemplatedParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the template parent of this element. This property is not relevant if the element was not created through a template.</summary>
        <value>L'elemento il cui <see cref="T:System.Windows.FrameworkTemplate" /><see cref="P:System.Windows.FrameworkTemplate.VisualTree" /> ha causato questo elemento deve essere creato. Questo valore è spesso <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.TemplatedParent%2A> è spesso `null` per gli oggetti creati nel markup dell'applicazione o codice. Questo avviene perché tali oggetti vengono creati direttamente, anziché tramite un modello. I riferimenti ottenuti scorrendo l'albero logico dalla radice dell'oggetto o dal nome tipico riferimenti, non vengono forniti da un modello.  
  
 Case in cui <xref:System.Windows.FrameworkElement.TemplatedParent%2A> potrebbe non essere `null` includono operazioni quali l'hit test, la gestione degli eventi per determinati eventi di input di basso livello, la struttura ad albero visual con <xref:System.Windows.Media.VisualTreeHelper>, o utilizzo di enumeratori, che potrebbero restituire elementi fornita uno dei modelli. Un altro caso si in particolare se si chiama <xref:System.Windows.FrameworkTemplate.FindName%2A> rispetto a un oggetto esistente <xref:System.Windows.FrameworkTemplate> e l'utilizzo con l'oggetto restituito.  
  
 I modelli sono oggetti effettivamente condivisi, in cui il contenuto del modello viene creato una sola volta. Pertanto, se si ottiene un riferimento all'oggetto a un elemento che proviene da un modello, è possibile che l'albero logico apparente non raggiunge la radice della pagina. Per connettere questo tipo un riferimento del modello all'albero logico della pagina, è necessario ottenere il <xref:System.Windows.FrameworkElement.TemplatedParent%2A> valore e continuare a esplorare la struttura ad albero in base alle esigenze.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public object ToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ToolTip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ToolTip" />
      <MemberSignature Language="VB.NET" Value="Public Property ToolTip As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ToolTip { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ToolTip : obj with get, set" Usage="System.Windows.FrameworkElement.ToolTip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.ToolTip)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the tool-tip object that is displayed for this element in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</summary>
        <value>L'oggetto della descrizione comando.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il valore di questa proprietà è di tipo <xref:System.Windows.Controls.ToolTip>, tale valore è la descrizione comando che verrà utilizzata nel [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].  Se il valore è di qualsiasi altro tipo, quindi tale valore verrà utilizzato come il *contenuto* per un <xref:System.Windows.Controls.ToolTip> specificato (costruito) dal sistema. Per altre informazioni, vedere <xref:System.Windows.Controls.ToolTipService>. La classe del servizio fornisce le proprietà associate che possono essere utilizzate per personalizzare ulteriormente una <xref:System.Windows.Controls.ToolTip>.  
  
<a name="xamlAttributeUsage_ToolTip"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object ToolTip="toolTipContent"/>  
```  
  
<a name="xamlPropertyElementUsage_ToolTip"></a>   
## <a name="xaml-property-element-usage"></a>Utilizzo della sintassi XAML per elementi proprietà  
  
```  
<object>  
  <object.ToolTip>  
    <ToolTip .../>  
  </object.ToolTip>  
</object>  
- or -  
<object>  
  <object.ToolTip>  
    toolTipObjectContent  
  </object.ToolTip>  
</object>  
```  
  
<a name="xamlValues_ToolTip"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *toolTipContent*  
 Stringa che diventa il testo visualizzato per il <xref:System.Windows.FrameworkElement.ToolTip%2A>.  
  
 *toolTipObjectContent*  
 Un oggetto, fornito in forma di elemento oggetto, che deve essere utilizzato come il contenuto per il <xref:System.Windows.FrameworkElement> . In genere si tratterà di un <xref:System.Windows.FrameworkElement> o un altro elemento che consente di creare la composizione del layout per il <xref:System.Windows.FrameworkElement.ToolTip%2A>, infine contenuto di testo all'interno della composizione. In questo caso, il <xref:System.Windows.Controls.ToolTip> elemento viene creato in modo implicito da analizzata [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]e il *toolTipObjectContent* content è impostato come relativo <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType> proprietà.  
  
 <`ToolTip` .../>  
 Vedere <xref:System.Windows.Controls.ToolTip>.  
  
<a name="dependencyPropertyInfo_ToolTip"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.ToolTipProperty>|  
|Impostare le proprietà dei metadati su `true`|nessuno|  
  
   
  
## Examples  
 Nell'esempio seguente viene creata una <xref:System.Windows.Controls.ToolTip> nel codice e viene quindi impostata la <xref:System.Windows.FrameworkElement.ToolTip%2A> proprietà su un <xref:System.Windows.Controls.Primitives.StatusBar> controllo.  
  
 [!code-csharp[StatusBar#MakeProgressBar](~/samples/snippets/csharp/VS_Snippets_Wpf/StatusBar/CSharp/Window1.xaml.cs#makeprogressbar)]
 [!code-vb[StatusBar#MakeProgressBar](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StatusBar/visualbasic/window1.xaml.vb#makeprogressbar)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ToolTipClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipClosing As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipClosing;" />
      <MemberSignature Language="F#" Value="member this.ToolTipClosing : System.Windows.Controls.ToolTipEventHandler " Usage="member this.ToolTipClosing : System.Windows.Controls.ToolTipEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs just before any tooltip on the element is closed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contrassegnare il <xref:System.Windows.FrameworkElement.ToolTipClosing> evento come gestito non annulli la chiusura della descrizione comando. Una volta che viene visualizzata la descrizione, la chiusura della descrizione comando viene eseguita solo in risposta all'interazione dell'utente con l'interfaccia utente.  
  
 Questo evento non può essere un <xref:System.Windows.EventTrigger> in uno stile. Questo avviene perché il campo dell'identificatore dell'evento riutilizza un'implementazione di un servizio che espone i metodi di aggiunta/rimozione evento per l'evento a livello di servizio.  
  
<a name="routedEventInfo_ToolTipClosing"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.ToolTipClosingEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipClosingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipClosingEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ToolTipClosingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ToolTipOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipOpening As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipOpening;" />
      <MemberSignature Language="F#" Value="member this.ToolTipOpening : System.Windows.Controls.ToolTipEventHandler " Usage="member this.ToolTipOpening : System.Windows.Controls.ToolTipEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when any tooltip on the element is opened.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impedire la visualizzazione nell'interfaccia utente, il gestore per una descrizione comando <xref:System.Windows.FrameworkElement.ToolTipOpening> possibile contrassegnare il <xref:System.Windows.Controls.ToolTipEventArgs> dati dell'evento gestiti. In caso contrario, viene visualizzata la descrizione, utilizzando il valore della <xref:System.Windows.FrameworkElement.ToolTip%2A> proprietà come il contenuto della descrizione comando. Un altro possibile scenario è che è possibile scrivere un gestore che reimposta il valore della <xref:System.Windows.FrameworkElement.ToolTip%2A> proprietà per l'elemento che rappresenta l'origine evento, appena prima che venga visualizzata la descrizione comando.  
  
 <xref:System.Windows.FrameworkElement.ToolTipOpening> non verrà generato se il valore di <xref:System.Windows.FrameworkElement.ToolTip%2A> è `null` o in caso contrario non impostata. Non impostare intenzionalmente <xref:System.Windows.FrameworkElement.ToolTip%2A> a `null` mentre un tooltip è aperto o aprendo; ciò non avrà l'effetto della chiusura della descrizione comando e creerà invece un effetto visivo indesiderabile nell'interfaccia utente.  
  
 Il <xref:System.Windows.FrameworkElement.ToolTipOpening> evento non può essere un <xref:System.Windows.EventTrigger> in uno stile. Questo avviene perché il campo dell'identificatore dell'evento riutilizza un'implementazione di un servizio che espone i metodi di aggiunta/rimozione evento per l'evento a livello di servizio.  
  
<a name="routedEventInfo_ToolTipOpening"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.ToolTipOpeningEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipOpeningEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipOpeningEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ToolTipOpeningEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ToolTipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ToolTipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ToolTipProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ToolTipProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.ToolTip" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.FrameworkElement.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of triggers established directly on this element, or in child elements.</summary>
        <value>Una raccolta fortemente tipizzata di <see cref="T:System.Windows.Trigger" /> oggetti.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Questa proprietà può essere impostata solo [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] tramite la sintassi di raccolta illustrata, oppure accedendo all'oggetto collection e utilizzando vari metodi, ad esempio Aggiungi. La proprietà per accedere all'oggetto raccolta stesso è di sola lettura, la raccolta è in lettura-scrittura. La proprietà esiste solo per gli elementi radice; tentativo di trovarlo o impostare il valore in un' posizione genererà un'eccezione generata.  
  
 Questa proprietà non consentono di esaminare i trigger esistenti nell'ambito degli stili in uso per questo elemento. Fornisce solo la raccolta di trigger che vengono effettivamente aggiunti alla raccolta, nel markup o codice. Elementi non dispongono in genere di tali elementi per impostazione predefinita (tramite un modello per l'istanza); è più comune per i trigger che provengono da composizione del controllo venga stabilita negli stili.  
  
 In termini di comportamento (e il tentativo di stabilire quale effetto dal quale elemento dichiarato <xref:System.Windows.FrameworkElement.Triggers%2A> insieme), la condizione di attivazione e l'effetto del trigger potrebbe trovarsi in questo elemento, o ai relativi elementi figlio nell'albero logico. Si noti che se si utilizzano, ad esempio gli eventi di durata <xref:System.Windows.FrameworkElement.Loaded> per ottenere questa raccolta, i trigger dell'elemento figlio potrebbero non essere ancora caricati completamente e la raccolta non potranno essere inferiore rispetto a quanto sarebbe realmente in fase di esecuzione.  
  
 Si noti che la raccolta di trigger definito per un elemento supporta solo <xref:System.Windows.EventTrigger>, non i trigger di proprietà (<xref:System.Windows.Trigger>). Se sono necessari trigger di proprietà, è necessario inserire all'interno di uno stile o un modello e quindi assegnare tale stile o il modello all'elemento oppure direttamente tramite il <xref:System.Windows.FrameworkElement.Style%2A> proprietà, o indirettamente tramite un riferimento di stile implicito.  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a>Utilizzo della sintassi XAML per elementi proprietà  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *oneOrMoreTriggers*  
 Uno o più definita <xref:System.Windows.EventTrigger> elementi. Ogni trigger di questo tipo deve contenere riferimenti e le azioni di storyboard valido. Si noti che questa raccolta può essere stabilita solo per l'elemento radice di una pagina. Per altre informazioni, vedere [Cenni preliminari sugli storyboard](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.EventTrigger" />
      </Docs>
    </Member>
    <Member MemberName="TryFindResource">
      <MemberSignature Language="C#" Value="public object TryFindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object TryFindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ TryFindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.TryFindResource : obj -&gt; obj" Usage="frameworkElement.TryFindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey">The key identifier of the resource to be found.</param>
        <summary>Searches for a resource with the specified key, and returns that resource if found.</summary>
        <returns>The found resource, or <see langword="null" /> if no resource with the provided <paramref name="key" /> is found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se la risorsa non viene trovata nell'elemento chiamante, ricerca verso l'alto nell'albero di risorse padre nell'albero logico, nello stesso modo che la struttura ad albero sarebbe effettuata se la risorsa sono stati richiesti dalla chiave in fase di esecuzione. Il metodo restituisce `null` solo se nessuna risorsa di tale chiave esiste già un punto qualsiasi nell'albero della risorsa per le condizioni esistenti dell'albero al momento che <xref:System.Windows.FrameworkElement.TryFindResource%2A> viene chiamato.  
  
 In genere è eseguire immediatamente il cast il valore restituito per il tipo della proprietà che si stava tentando di impostare con il valore della risorsa restituito.  
  
 Il <xref:System.Windows.FrameworkElement.FindResource%2A> metodo presenta un comportamento simile, ad eccezione del fatto che genera un'eccezione se è stata restituita alcuna risorsa con la chiave specificata.  
  
   
  
## Examples  
 Nell'esempio seguente viene implementato come un gestore pulsanti, in cui il pulsante Imposta lo sfondo di un pennello definito dalla risorsa ottenuto chiamando <xref:System.Windows.FrameworkElement.TryFindResource%2A> su se stesso. Esamina la struttura ad albero e consente di trovare la risorsa (risorsa stessa è definita [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] e non viene visualizzata).  
  
 [!code-csharp[BaseElementsSmorgasbord#FETryFindResource](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#fetryfindresource)]
 [!code-vb[BaseElementsSmorgasbord#FETryFindResource](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#fetryfindresource)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Unloaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Unloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Unloaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Unloaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unloaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Unloaded;" />
      <MemberSignature Language="F#" Value="member this.Unloaded : System.Windows.RoutedEventHandler " Usage="member this.Unloaded : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the element is removed from within an element tree of loaded elements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vengono gestiti solo all'interno dell'elemento stesso in cui vengono generati gli eventi indirizzati direttamente non seguono una route. Indirizzare gli eventi indirizzati supportare altri comportamenti dell'evento indirizzato: supportano una raccolta di gestori accessibile e può essere utilizzati come un <xref:System.Windows.EventTrigger> in uno stile.  
  
 <xref:System.Windows.FrameworkElement.Loaded> e <xref:System.Windows.FrameworkElement.Unloaded> potrebbero essere generati entrambi sui controlli in seguito a modifiche al tema del sistema avviata dall'utente. Modifica un tema provoca un invalidamento del modello di controllo e il contenuto struttura ad albero visuale, che a sua volta fa sì che l'intero controllo scaricare e ricaricare. Di conseguenza <xref:System.Windows.FrameworkElement.Unloaded> non può essere si presuppone che si verifichi solo un'altra pagina.  
  
 Si noti che il <xref:System.Windows.FrameworkElement.Unloaded> non viene generato dopo l'avvio di un'applicazione in corso l'arresto. Arresto dell'applicazione si verifica se la condizione definita mediante il <xref:System.Windows.Application.ShutdownMode%2A> proprietà presente. Se si inserisce il codice di pulizia all'interno di un gestore per il <xref:System.Windows.FrameworkElement.Unloaded> evento, ad esempio per un <xref:System.Windows.Window> o <xref:System.Windows.Controls.UserControl>, potrebbe non essere chiamato come previsto.  
  
<a name="routedEventInfo_Unloaded"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.UnloadedEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="UnloadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent UnloadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent UnloadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.UnloadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnloadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ UnloadedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnloadedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.UnloadedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="E:System.Windows.FrameworkElement.Unloaded" /> routed event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.UnregisterName : string -&gt; unit" Usage="frameworkElement.UnregisterName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Name of the name-object pair to remove from the current scope.</param>
        <summary>Simplifies access to the <see cref="T:System.Windows.NameScope" /> de-registration method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È sufficiente annullare la registrazione nomi se si intende registrare un altro elemento con lo stesso nome.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)" />
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UpdateDefaultStyle">
      <MemberSignature Language="C#" Value="public void UpdateDefaultStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateDefaultStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.UpdateDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateDefaultStyle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateDefaultStyle();" />
      <MemberSignature Language="F#" Value="member this.UpdateDefaultStyle : unit -&gt; unit" Usage="frameworkElement.UpdateDefaultStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reapplies the default style to the current <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutRounding">
      <MemberSignature Language="C#" Value="public bool UseLayoutRounding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseLayoutRounding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.UseLayoutRounding" />
      <MemberSignature Language="VB.NET" Value="Public Property UseLayoutRounding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseLayoutRounding { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseLayoutRounding : bool with get, set" Usage="System.Windows.FrameworkElement.UseLayoutRounding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether layout rounding should be applied to this element's size and position during layout.</summary>
        <value>
          <see langword="true" /> Se viene applicato l'arrotondamento del layout; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando il <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> è di proprietà per un elemento `true`, tutti i valori non integrale pixel che vengono calcolati durante la <xref:System.Windows.UIElement.Measure%2A> e <xref:System.Windows.UIElement.Arrange%2A> passate vengono arrotondate a valori interi in pixel.  
  
 Questa proprietà viene ereditata dagli elementi figlio.  
  
> [!NOTE]
>  È consigliabile impostare <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> a `true` per l'elemento radice. Il sistema di layout aggiunge coordinate figlio in corrispondenza delle coordinate padre; Pertanto, se le coordinate padre non sono presenti in un confine di pixel, le coordinate figlio non sono in un confine di pixel. Se <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> non può essere impostato nella radice, <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> sull'elemento figlio per ottenere l'effetto desiderato.  
  
 Disegnare oggetti sul limiti dei pixel Elimina i bordi semi-trasparenti che vengono generati da anti-aliasing, quando un bordo cade all'interno di un pixel. Nella figura seguente mostra l'output di una riga espressa in pixel singolo che cade all'interno di un pixel. La riga a sinistra non viene utilizzata l'arrotondamento del layout e anti-alias. Nella riga a destra viene usato l'arrotondamento del layout.  
  
 ![Anti&#45;riga associata a un alias rispetto a pixel singolo. ] (~/add/media/pixelsnaplinecompare.PNG "Riga anti-aliasing confrontata con linea a pixel singolo.")  
  
 Quando si usa l'arrotondamento del layout e <xref:System.Windows.GridUnitType.Star> il ridimensionamento, il sistema di layout crea le piccole variazioni nelle misure di riga o colonna per evitare il rendering dei subpixel. Se, ad esempio, una griglia ha una larghezza totale pari a 100 con 3 colonne ciascuna delle dimensioni <xref:System.Windows.GridUnitType.Star>, anziché creare tre colonne che hanno una larghezza uguale di 33,3, il sistema di layout crea 2 colonne che hanno una larghezza 33 e una che ha una larghezza 34.  
  
> [!NOTE]
>  In .NET 4.6 sono state apportate modifiche all'arrotondamento per ridurre le istanze di ritaglio nei controlli con bordi del layout. Per impostazione predefinita, questa funzionalità è abilitata se il Framework di destinazione è .NET Framework 4.6 o successiva. Le applicazioni destinate a versioni precedenti del framework possono acconsentire esplicitamente nel nuovo comportamento aggiungendo la seguente impostazione in un file app. config: `<runtime><AppContextSwitchOverrides value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/></runtime>` l'impostazione diventa effettiva solo quando l'applicazione è in esecuzione su .NET Framework 4.6.  
  
   
  
## Examples  
 L'esempio seguente illustra l'effetto che il <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> dispone di proprietà in una riga singola espressa in pixel. La riga a sinistra non usa l'arrotondamento del layout e nella riga a destra viene usato l'arrotondamento del layout. Se la finestra viene ridimensionata lenta, è possibile visualizzare la differenza arrotondamento del layout.  
  
```xaml  
  
<Page x:Class="LayoutRounding.Lines"  
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"  
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  
    Title="Lines" Name="linesPage"  
    >  
  <StackPanel Width="150"  Margin="7" Orientation="Horizontal">  
    <!-- Single pixel line with layout rounding turned OFF.-->  
    <Rectangle UseLayoutRounding="False"  
       Width="45.5" Margin="10" Height="1" Fill="Red"/>  
    <!-- Single pixel line with layout rounding turned ON.-->  
    <Rectangle UseLayoutRounding="True"  
      Width="45.5" Margin="10" Height="1" Fill="Red"/>  
  </StackPanel>  
  <!-- Background Grid -->  
  <Page.Background>  
    <DrawingBrush  Viewport="0,0,10,10" ViewportUnits="Absolute" TileMode="Tile">  
      <DrawingBrush.Drawing>  
        <DrawingGroup>  
          <GeometryDrawing Brush="White">  
            <GeometryDrawing.Geometry>  
              <RectangleGeometry Rect="0,0,1,1" />  
            </GeometryDrawing.Geometry>  
          </GeometryDrawing>  
          <GeometryDrawing Geometry="M0,0 L1,0 1,0.1, 0,0.1Z " Brush="#CCCCFF" />  
          <GeometryDrawing Geometry="M0,0 L0,1 0.1,1, 0.1,0Z" Brush="#CCCCFF" />  
        </DrawingGroup>  
      </DrawingBrush.Drawing>  
    </DrawingBrush>  
  </Page.Background>  
</Page>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutRoundingProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UseLayoutRoundingProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UseLayoutRoundingProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.UseLayoutRoundingProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UseLayoutRoundingProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UseLayoutRoundingProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable UseLayoutRoundingProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.UseLayoutRoundingProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.UseLayoutRounding" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.VerticalAlignment VerticalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.VerticalAlignment VerticalAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.VerticalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property VerticalAlignment As VerticalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::VerticalAlignment VerticalAlignment { System::Windows::VerticalAlignment get(); void set(System::Windows::VerticalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.VerticalAlignment : System.Windows.VerticalAlignment with get, set" Usage="System.Windows.FrameworkElement.VerticalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VerticalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the vertical alignment characteristics applied to this element when it is composed within a parent element such as a panel or items control.</summary>
        <value>Impostazione di allineamento verticale. Il valore predefinito è <see cref="F:System.Windows.VerticalAlignment.Stretch" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si <xref:System.Windows.FrameworkElement.Height%2A> e <xref:System.Windows.FrameworkElement.Width%2A> sono impostate in modo esplicito su un elemento, queste misure hanno precedenza rispetto al layout e annullano i normali effetti dell'impostazione di questa proprietà su <xref:System.Windows.VerticalAlignment.Stretch>.  
  
 <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> è il [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] funzione di accesso di proprietà per i quali è in realtà una proprietà di dipendenza. Questa proprietà di dipendenza specifica viene spesso avrà un valore di "predefinito" apparente impostato in modo diverso nelle classi derivate dell'elemento, in particolare i controlli. Generalmente questo avviene in due modi: la proprietà di dipendenza viene registrata di nuovo a una determinata classe derivata, ma con metadati diversi per l'impostazione dei valori predefiniti; oppure è un valore predefinito viene applicato uno stile che imposta il valore della proprietà di dipendenza in modo diverso. Ad esempio, il valore "predefinito" apparente di <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> per un <xref:System.Windows.Controls.ComboBoxItem> controllo sarà <xref:System.Windows.VerticalAlignment.Center>, anche se <xref:System.Windows.Controls.ComboBoxItem> eredita <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> direttamente da <xref:System.Windows.FrameworkElement>. Infatti, tale valore è stato reimpostato nello stile predefinito di <xref:System.Windows.Controls.ComboBoxItem>, nel modello di controllo di stile.  
  
 <xref:System.Windows.Controls.Canvas> non utilizza <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> durante la composizione di layout, perché <xref:System.Windows.Controls.Canvas> basato sul posizionamento assoluto.  
  
 Quando viene ereditato da <xref:System.Windows.Controls.ComboBoxItem> o qualsiasi classe derivata, <xref:System.Windows.Controls.ComboBoxItem> ridefinisce il valore predefinito di questa proprietà sia <xref:System.Windows.VerticalAlignment.Center>.  
  
<a name="dependencyPropertyInfo_VerticalAlignment"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.VerticalAlignmentProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VerticalAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VerticalAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.VerticalAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VerticalAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VerticalAlignmentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VerticalAlignmentProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.VerticalAlignmentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualChildrenCount">
      <MemberSignature Language="C#" Value="protected override int VisualChildrenCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VisualChildrenCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.VisualChildrenCount" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property VisualChildrenCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property int VisualChildrenCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.VisualChildrenCount : int" Usage="System.Windows.FrameworkElement.VisualChildrenCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of visual child elements within this element.</summary>
        <value>Numero di elementi figlio visivi per questo elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.FrameworkElement> implementazione di <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> restituisce sempre zero o uno. Le classi che gestiscono un insieme di figlio visivi che potrebbe superare uno devono eseguire l'override di questa proprietà e <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.  
  
 Questa proprietà viene in genere utilizzata per determinare i limiti superiori della raccolta figlio corrente ai fini dell'implementazione le sostituzioni di layout (<xref:System.Windows.FrameworkElement.MeasureOverride%2A>, <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come uno strumento decorativo personalizzato utilizza i valori dichiarati da un <xref:System.Windows.Media.VisualCollection> che gestisce per i relativi elementi figlio visivi e report questi valori tramite le sostituzioni di <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> e <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.  
  
 [!code-csharp[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverridespre)]
 [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverridespre)]  
[!code-csharp[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverrides)]
[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverrides)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Se la classe supporta più di un elemento figlio visivo in una raccolta di elementi figlio, eseguire l'override di questa proprietà per restituire il numero di elementi in tale raccolta. Questa operazione è necessaria anche se l'oggetto raccolta stesso restituisce il conteggio. La logica di layout dell'elemento a livello di framework WPF presuppone che tutti gli elementi verranno restituito un conteggio valido tramite i relativi <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> proprietà.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public double Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Width { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Width : double with get, set" Usage="System.Windows.FrameworkElement.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the width of the element.</summary>
        <value>La larghezza dell'elemento, in [! INCLUDE[TLA#tla_dipixel#plural](~/Includes/tlasharptla-dipixelsharpplural-MD.MD)]. Il valore predefinito è <see cref="F:System.Double.NaN" />. Questo valore deve essere maggiore o uguale a 0,0. Per informazioni sul limite superiore, vedere la sezione Osservazioni.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta di una delle tre proprietà in <xref:System.Windows.FrameworkElement> che consente di specificare le informazioni sulla larghezza.  Le altre due sono <xref:System.Windows.FrameworkElement.MinWidth%2A> e <xref:System.Windows.FrameworkElement.MaxWidth%2A>.  Se si verifica un conflitto tra questi valori, l'ordine di applicazione per determinare l'effettiva larghezza è il primo <xref:System.Windows.FrameworkElement.MinWidth%2A> deve essere tenuto in considerazione, quindi <xref:System.Windows.FrameworkElement.MaxWidth%2A>e infine se ognuno di questi rientrano nei limiti <xref:System.Windows.FrameworkElement.Width%2A>.  
  
 Il valore restituito di questa proprietà è sempre quella di qualsiasi valore su cui è stato impostato. Al contrario, il valore della <xref:System.Windows.FrameworkElement.ActualWidth%2A> può variare. Il layout potrebbe avere rifiutato dimensione consigliata per qualche motivo. Inoltre, il sistema di layout funziona in modo asincrono rispetto al set di sistema di proprietà della <xref:System.Windows.FrameworkElement.Width%2A> e potrebbero non essere elaborati come quella particolare ancora alla modifica della proprietà di ridimensionamento.  
  
 Inoltre a accettabile <xref:System.Double> valori, questa proprietà può anche essere <xref:System.Double.NaN?displayProperty=nameWithType>. Si tratta di come specificare il comportamento di ridimensionamento automatico. In [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] è impostare il valore per la stringa "Automatico" (distinzione tra maiuscole e minuscole) per abilitare il comportamento del ridimensionamento automatico. Comportamento del ridimensionamento automatico implica che l'elemento riempirà la larghezza disponibile per il processo. Si noti tuttavia che controlli specifici forniscono spesso valori predefiniti negli stili predefiniti che disabiliteranno il comportamento del ridimensionamento a meno che non è specificamente abilitato nuovamente automatico.  
  
 Oltre a controllo di convalida, è un valore superiore non deterministico per <xref:System.Windows.FrameworkElement.Width%2A> che viene forzata dal sistema di layout (si tratta di un numero molto elevato, più grande <xref:System.Single.MaxValue?displayProperty=nameWithType> ma inferiore a <xref:System.Double.MaxValue?displayProperty=nameWithType>). Se si supera questo limite, l'elemento non verrà eseguito il rendering e viene generata alcuna eccezione. Non impostare <xref:System.Windows.FrameworkElement.Width%2A> su un valore che è significativamente maggiore la dimensione massima di qualsiasi visualizzazione possibile, o si potrebbe superare il limite superiore non deterministico.  
  
<a name="xamlAttributeUsage_Width"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object Width="double"/>  
- or –  
<object Width ="qualifiedDouble"/>  
- or -  
<object Width ="Auto"/>  
```  
  
<a name="xamlValues_Width"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *double*  
 <xref:System.Double>  
  
 Rappresentazione di stringa di un <xref:System.Double> valore uguale o maggiore di 0.0. Per informazioni sul limite superiore, vedere la sezione Osservazioni. Questo valore viene interpretato come un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] misura. Le stringhe non necessario includere in modo esplicito i separatori decimali. Ad esempio, un valore di `1` è accettabile.  
  
 *qualifiedDouble*  
 Un *doppie* valore come descritto in precedenza, seguito da una delle seguenti stringhe di dichiarazione unità: `px`, `in`, `cm`, `pt`.  
  
 `px` (impostazione predefinita) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` è pollici; in 1 = = 96px  
  
 `cm` centimetri; 1cm==(96/2.54) px  
  
 `pt` punti; 1pt==(96/72) px  
  
 `Auto`  
 Abilita il ridimensionamento automatico. Vedere la sezione Osservazioni.  
  
<a name="dependencyPropertyInfo_Width"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.FrameworkElement.WidthProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.WidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable WidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.WidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.FrameworkElement.Width" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>