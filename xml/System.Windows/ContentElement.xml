<Type Name="ContentElement" FullName="System.Windows.ContentElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3ead77d5c5a1444bb78a389f6dd17f78c4fdbd08" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
    <Meta Name="ms.locfileid" Value="32038489" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ContentElement : System.Windows.DependencyObject, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ContentElement extends System.Windows.DependencyObject implements class System.Windows.IInputElement, class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.ContentElement" />
  <TypeSignature Language="VB.NET" Value="Public Class ContentElement&#xA;Inherits DependencyObject&#xA;Implements IAnimatable, IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContentElement : System::Windows::DependencyObject, System::Windows::IInputElement, System::Windows::Media::Animation::IAnimatable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Fornisce una classe base WPF per gli elementi di contenuto. Gli elementi di contenuto sono progettati per presentazioni in stile flusso, usando un modello di layout intuitivo orientato al markup e un modello a oggetti volutamente semplice.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement> definisce le seguenti caratteristiche di contenuto comuni:  
  
-   Input: Tutte <xref:System.Windows.ContentElement> le classi derivate di fornire supporto per l'acquisizione base di input da tastiera, mouse, operazioni di trascinamento e rilascio, i controlli dello stilo e tasti di scelta rapida.  
  
-   Lo stato attivo: Tutti <xref:System.Windows.ContentElement> classi derivate sono potenzialmente attivabili. (Tuttavia, lo stato attivabile predefinito per il <xref:System.Windows.ContentElement> classe di base è `false`. Per informazioni dettagliate su come rendere un <xref:System.Windows.ContentElement> attivabile, vedere <xref:System.Windows.ContentElement.Focusable%2A>.) Inoltre, questa classe contiene [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] che è possibile utilizzare per trasferire lo stato attivo tra gli elementi correlati.  
  
-   Eventi: <xref:System.Windows.ContentElement> include gli eventi che riguardano l'input e lo stato attivo; include anche eventi per le modifiche nello stato. In molti casi, il <xref:System.Windows.ContentElement> eventi sono eventi indirizzati. In alcuni casi, gli eventi indirizzati hanno tunneling e di bubbling strategie di routing, generate come eventi distinti in risposta allo stesso stato o condizione. Inoltre, <xref:System.Windows.ContentElement> definisce [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] che può generare eventi indirizzati e che è possibile aggiungere o rimuovere i gestori di eventi.  
  
 <xref:System.Windows.ContentElement> condivide molte comuni [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] con <xref:System.Windows.UIElement>. Tali comuni [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] non provengono da un'ereditarietà delle classi condivise. Condividono tuttavia la denominazione comune, un comportamento simile e implementazione interna simile di [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in ogni classe. La somiglianza è dovuta <xref:System.Windows.ContentElement> e <xref:System.Windows.UIElement> sono le due classi che costituiscono un elemento di base, anche se ciascuna ha diverse finalità per quanto riguarda il comportamento del modello oggetto di markup.  
  
 In particolare, <xref:System.Windows.UIElement> discende dal <xref:System.Windows.Media.Visual>, che fornisce supporto per il rendering il grafico di livello inferiore un <xref:System.Windows.ContentElement> a un'area rettangolare all'interno di una finestra composta, mentre <xref:System.Windows.ContentElement> rinvia il rendering in modo che i concetti più comune agli scenari del documento, ad esempio il flusso e di ritorno a capo, sono supportati più facilmente. Queste due classi correlate implementano inoltre le interfacce comuni <xref:System.Windows.IInputElement> e <xref:System.Windows.Media.Animation.IAnimatable>.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>La <see cref="T:System.Windows.ContentElement" /> classe non definisce tutti gli aspetti di un elemento di contenuto completo per presentazioni di flusso. <see cref="T:System.Windows.FrameworkContentElement" /> è una classe derivata immediatamente di <see cref="T:System.Windows.ContentElement" />. <see cref="T:System.Windows.FrameworkContentElement" /> include un set più completo di membri aggiuntivi che supportano il rendering un <see cref="T:System.Windows.FrameworkContentElement" /> all'interno di un host del contenuto e Usa il sistema di layout a livello di framework WPF.</para>
    </block>
    <altmember cref="T:System.Windows.UIElement" />
    <altmember cref="T:System.Windows.FrameworkContentElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContentElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContentElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.ContentElement" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aggiunge un gestore eventi indirizzati per un evento indirizzato specifico, aggiungendo il gestore alla raccolta di gestori nell'elemento corrente.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identificatore dell'evento indirizzato da gestire.</param>
        <param name="handler">Riferimento all'implementazione del gestore.</param>
        <summary>Aggiunge un gestore eventi indirizzati per un evento indirizzato specifico, aggiungendo il gestore alla raccolta di gestori nell'elemento corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile aggiungere più volte lo stesso gestore per l'evento stesso senza generare un'eccezione. Tuttavia, il gestore viene effettivamente richiamato più volte quando l'evento è gestito. Pertanto, considerare come questo comportamento potrebbe avere effetti collaterali che devono essere presi in considerazione nell'implementazione del gestore.  
  
 È in genere utilizzare questo metodo per fornire l'implementazione della funzione di accesso "Aggiungi" per il [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] schema di accesso eventi di un evento indirizzato personalizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identificatore dell'evento indirizzato da gestire.</param>
        <param name="handler">Riferimento all'implementazione del gestore.</param>
        <param name="handledEventsToo">
          <see langword="true" /> per registrare il gestore affinché venga richiamato anche quando l'evento indirizzato è contrassegnato come gestito nei dati dell'evento; <see langword="false" /> per registrare il gestore con la condizione predefinita in base alla quale non verrà richiamato se l'evento indirizzato è già contrassegnato come gestito.  
  
 Il valore predefinito è <see langword="false" />.  
  
 Non chiedere ripetutamente di gestire di nuovo un evento indirizzato.</param>
        <summary>Aggiunge un gestore eventi indirizzati per un evento indirizzato specifico, aggiungendo il gestore alla raccolta di gestori nell'elemento corrente. Specificare che <paramref name="handledEventsToo" /> è <see langword="true" /> per fare in modo che il gestore specificato venga richiamato per eventi indirizzati già contrassegnati come gestiti da un altro elemento lungo la route dell'evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'elaborazione di eventi di input di basso livello in un modo pratico è un'attività complessa. Molti controlli implementano il comportamento in un determinato evento è contrassegnato come gestito e viene sostituito da un altro evento più intuitivo. In genere, un controllo contrassegnerà solo un evento di input di piattaforma come gestito nel caso di alcune intenzione di progettazione per questa operazione. In alcuni scenari, tali finalità potrebbe non essere ciò che richiede la gestione degli eventi di input specifica. È per questi scenari di registrazione di gestori con `handledEventsToo` come `true` appropriato. Ma non eseguire questa operazione regolarmente. Richiamare i gestori in risposta a tutti gli eventi anche se gestita verrà complicare il propria logica di elaborazione di eventi applicazione. Si verifichi una riduzione delle prestazioni se la logica del gestore è significativo. È necessario riservare l'uso di associare i gestori eventi per eventi già gestiti per le situazioni in cui sono stati individuati durante il processo di sviluppo che determinati controlli gestiscono gli eventi che si desidera gestire con la logica dell'applicazione.  
  
 Un'altra tecnica per evitare la classe del comportamento di alcune combinazioni di eventi controllo di gestione consiste nell'utilizzare alternativa di anteprima dell'evento. Ad esempio, se <xref:System.Windows.ContentElement.MouseLeftButtonDown> è contrassegnato come gestito dalla gestione delle classi, potrebbe essere in grado di aggiungere i gestori per <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> invece.  
  
 È possibile aggiungere più volte lo stesso gestore per l'evento stesso senza generare un'eccezione. Tuttavia, il gestore viene effettivamente richiamato più volte quando l'evento è gestito. Pertanto, considerare come questo comportamento potrebbe avere effetti collaterali che devono essere presi in considerazione nell'implementazione del gestore.  
  
 È in genere utilizzare questo metodo per fornire l'implementazione della funzione di accesso "Aggiungi" per il [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] schema di accesso eventi di un evento indirizzato personalizzato.  
  
   
  
## Examples  
 Nell'esempio seguente viene implementato un gestore richiamato il <xref:System.Windows.FrameworkElement.Initialized> evento in una pagina che associa un gestore definito a uno degli elementi denominati nella pagina utilizzando `handledEventsToo` `true`. Questo gestore verrebbe richiamato anche se i dati dell'evento condiviso come gestito prima di raggiungere l'elemento di gestione nella route contrassegnato come un altro elemento lungo la route.  
  
 [!code-csharp[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#addhandlerhandledtoo)]
 [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#addhandlerhandledtoo)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route">Route dell'evento alla quale vengono aggiunti i gestori.</param>
        <param name="e">Dati di evento utilizzati per aggiungere i gestori. Questo metodo utilizza la proprietà <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> degli argomenti per creare i gestori.</param>
        <summary>Aggiunge gestori all'oggetto <see cref="T:System.Windows.EventRoute" /> specificato per l'insieme di gestori degli eventi <see cref="T:System.Windows.ContentElement" /> corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per gli elementi host del contenuto (indipendentemente dal fatto che implementino <xref:System.Windows.IContentHost>) per aggiungere gestori per gli elementi figlio di host del contenuto all'host <xref:System.Windows.EventRoute>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Recupera o imposta un valore che indica se l'elemento può essere usato come destinazione di un'operazione di trascinamento e rilascio.</summary>
        <value>
          <see langword="true" /> se questo elemento può essere utilizzato come destinazione di un'operazione di trascinamento; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Non sono abilitate per impostazione predefinita, le operazioni di trascinamento e rilascio e devono essere abilitate intenzionalmente impostando <xref:System.Windows.ContentElement.AllowDrop%2A> a `true`. Oltre a questa impostazione di base, il comportamento di trascinamento e rilascio è interamente specifica dell'implementazione e non è definito da <xref:System.Windows.ContentElement> o qualsiasi altra classe di base dell'elemento. Alcuni controlli, ad esempio, <xref:System.Windows.Controls.RichTextBox>, si dispone di un comportamento predefinito, ma non <xref:System.Windows.ContentElement> le classi derivate includano un tale comportamento. Per ulteriori informazioni sul trascinamento della selezione, vedere [Drag and Drop Overview](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).  
  
 <xref:System.Windows.FrameworkContentElement> Ignora i metadati per questa proprietà di dipendenza nella relativa implementazione. In particolare, <xref:System.Windows.FrameworkContentElement> indica che questa proprietà consente l'ereditarietà del valore di proprietà (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> è `true` nei metadati). Ereditarietà del valore di proprietà in questo contesto significa che se sono presenti elementi figlio con nessun altro valore per <xref:System.Windows.ContentElement.AllowDrop%2A> assegnati tramite valori locali o gli stili, il valore dell'elemento padre più vicino con questo valore assegnato (nuovamente, sia negli stili, per impostazione predefinita i valori o un valore locale), viene assegnato il valore proveniente dall'elemento padre per tutti gli elementi figlio non assegnato dal sistema di proprietà. Ciò significa che è possibile specificare se consentire le operazioni di rilascio dell'elemento radice e quindi propaga il valore a tutti i <xref:System.Windows.FrameworkContentElement> gli elementi figlio che specificamente assegnato il valore `false`.  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.AllowDropProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 L'esempio seguente imposta <xref:System.Windows.ContentElement.AllowDrop%2A> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 [!code-xaml[ContentElementsSmorgasbord#AllowDrop](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#allowdrop)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.AllowDrop" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Applica un'animazione a una proprietà di dipendenza specificata nell'elemento.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp">Identificatore della proprietà a cui applicare l'animazione.</param>
        <param name="clock">Orologio dell'animazione che controlla e dichiara l'animazione.</param>
        <summary>Applica un'animazione a una proprietà di dipendenza specificata nell'elemento. Le animazioni esistenti vengono interrotte e sostituite con la nuova animazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per rimuovere un'animazione da una proprietà, specificare l'identificatore della proprietà come `dp` e specificare `clock` come `null`. Questa operazione rimuove l'animazione e la proprietà animata è impostata sul valore di base. Tuttavia, non è stato arrestato orologio dell'animazione originariamente associato. Le animazioni assegnate allo stesso clock continueranno a eseguire.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">Proprietà a cui applicare l'animazione.</param>
        <param name="clock">Orologio dell'animazione che controlla e dichiara l'animazione.</param>
        <param name="handoffBehavior">Valore dell'enumerazione. L'impostazione predefinita è <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, in base alla quale qualsiasi animazione esistente viene interrotta e sostituita con quella nuova.</param>
        <summary>Applica un'animazione a una proprietà di dipendenza specificata in questo elemento, con la possibilità di specificare che cosa succede se la proprietà ha già un'animazione in esecuzione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per rimuovere un'animazione da una proprietà, specificare l'identificatore della proprietà come `dp` e specificare `clock` come `null`. Questa operazione rimuove l'animazione e la proprietà animata è impostata sul valore di base. Tuttavia, non è stato arrestato orologio dell'animazione originariamente associato. Le animazioni assegnate allo stesso clock continueranno a eseguire.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se almeno un dispositivo a tocco è acquisito nell'elemento.</summary>
        <value>
          <see langword="true" /> se almeno un tocco è acquisito in questo elemento; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.AreAnyTouchesCaptured" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se almeno un tocco è acquisito nell'elemento o nei relativi elementi figlio della struttura ad albero visuale.</summary>
        <value>
          <see langword="true" /> se almeno un dispositivo a tocco è acquisito in questo elemento o nei relativi elementi figlio nella struttura ad albero visuale; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se almeno un dispositivo a tocco viene premuto sull'elemento.</summary>
        <value>
          <see langword="true" /> se almeno un dispositivo a tocco viene premuto sull'elemento; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se almeno un tocco viene premuto sull'elemento o sui relativi elementi figlio della struttura ad albero visuale.</summary>
        <value>
          <see langword="true" /> se almeno un dispositivo a tocco viene premuto su questo elemento o sui relativi elementi figlio nella struttura ad albero visuale; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.AreAnyTouchesOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Avvia un'animazione per una proprietà animata specificata su questo elemento.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp">Proprietà alla quale aggiungere un'animazione, specificata come identificatore della proprietà di dipendenza.</param>
        <param name="animation">Sequenza temporale dell'animazione da avviare.</param>
        <summary>Avvia un'animazione per una proprietà animata specificata su questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si seleziona una proprietà animata, si noti che l'animazione verrà avviata e considerato aggiungendo un'animazione quando viene eseguito il rendering del primo frame oltre il punto di partenza non animati.  
  
 Se il <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> per `animation` è `null`, vengono rimosse tutte le animazioni correnti e viene mantenuto il valore corrente della proprietà.  
  
 Se l'intera `animation` valore `null`, tutte le animazioni vengono rimosse dalla proprietà e il valore della proprietà viene ripristinato il valore di base. Tuttavia, la sequenza temporale di animazione associato inizialmente non viene interrotta. Le animazioni assegnate a tale sequenza temporale continuerà a eseguire.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">Proprietà alla quale aggiungere un'animazione, specificata come identificatore della proprietà di dipendenza.</param>
        <param name="animation">Sequenza temporale dell'animazione da applicare.</param>
        <param name="handoffBehavior">Valore dell'enumerazione che specifica il modo in cui la nuova animazione interagisce con tutte le animazioni correnti (in esecuzione) che già influiscono sul valore della proprietà.</param>
        <summary>Avvia un'animazione particolare per una proprietà animata specificata su questo elemento, con la possibilità di indicare cosa succede se la proprietà dispone già di un'animazione in esecuzione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si seleziona una proprietà animata, si noti che l'animazione verrà avviata e considerato aggiungendo un'animazione quando viene eseguito il rendering del primo frame oltre il punto di partenza non animati.  
  
 Se il <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> per `animation` è `null`, vengono rimosse tutte le animazioni correnti e viene mantenuto il valore corrente della proprietà.  
  
 Se l'intera `animation` valore `null`, tutte le animazioni vengono rimosse dalla proprietà e il valore della proprietà viene ripristinato il valore di base. Tuttavia, la sequenza temporale di animazione associato inizialmente non viene interrotta. Le animazioni assegnate a tale sequenza temporale continuerà a eseguire.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tenta di forzare l’acquisizione del mouse in questo elemento.</summary>
        <returns>
          <see langword="true" /> se il mouse viene acquisito correttamente; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per essere acquisito un elemento deve essere abilitato. Controllare se <xref:System.Windows.ContentElement.IsEnabled%2A> è `true` prima di chiamare <xref:System.Windows.ContentElement.CaptureMouse%2A>.  
  
 Se la chiamata <xref:System.Windows.ContentElement.CaptureMouse%2A> restituisce `true`, quindi <xref:System.Windows.ContentElement.IsMouseCaptured%2A> anche `true`.  
  
 Se la chiamata <xref:System.Windows.ContentElement.CaptureMouse%2A> restituisce `true`, quindi il <xref:System.Windows.ContentElement.GotMouseCapture> e <xref:System.Windows.ContentElement.IsMouseCapturedChanged> vengono generati eventi, con <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> nell'evento dati segnalati come elemento in cui il <xref:System.Windows.ContentElement.CaptureMouse%2A> metodo viene chiamato. Se si forza l'acquisizione, potrebbe interferire con acquisizioni esistenti, in particolare con le acquisizioni correlate a trascinare con il mouse.  
  
 Per cancellare l'input del mouse da tutti gli elementi, chiamare <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> con il `element` fornito come parametro `null`.  
  
   
  
## Examples  
 Nell'esempio seguente acquisisce il mouse acquisito o rilasciato, in base che il puntatore del mouse è già stata acquisita dall'elemento. Si noti che in questo esempio viene eseguito il cast di elemento di destinazione potenziale acquisizione di <xref:System.Windows.IInputElement> di interfaccia e quindi viene chiamato inizialmente il <xref:System.Windows.IInputElement.CaptureMouse%2A?displayProperty=nameWithType> metodo. Esegue il cast a <xref:System.Windows.IInputElement> è una tecnica che risulta utile se non si è sicuri se l'elemento che si desidera acquisire il mouse si trova un <xref:System.Windows.UIElement> o <xref:System.Windows.ContentElement>. Il cast di interfaccia e il metodo di interfaccia chiamare quindi chiama l'implementazione CaptureMouse specifica del tipo appropriata internamente senza un cast di prova su <xref:System.Windows.UIElement> o <xref:System.Windows.ContentElement>. La stessa tecnica di cast funziona per gli altri membri che <xref:System.Windows.IInputElement> definisce, ad esempio molti degli eventi correlati all'input e altri metodi di input.  
  
 [!code-csharp[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#ismousecaptured)]
 [!code-vb[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tenta di forzare l’acquisizione dello stilo in questo elemento.</summary>
        <returns>
          <see langword="true" /> se lo stilo viene acquisito correttamente, in caso contrario <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Restituisce l'implementazione predefinita basata sul dispositivo stilo predefinito sottostante sempre `true`. Tuttavia, se si estende i dispositivi di input che forniscono l'implementazione del dispositivo per il sistema di input, è possibile creare un sistema con un'implementazione di dispositivo stilo alternative che potrebbe restituire risultati diversi.  
  
 Quando un elemento acquisisce lo stilo, riceve l'input con stilo anche se lo stilo si trova di fuori dei limiti. Lo stilo viene acquisito in genere solo durante le operazioni di trascinamento e rilascio.  
  
 Chiamando questo metodo viene chiamato una sottostante statico <xref:System.Windows.Input.Stylus> metodo <xref:System.Windows.Input.Stylus.Capture%2A>. Il comportamento effettivo di acquisizione viene implementato dall'implementazione del dispositivo stilo attivo.  
  
 Per essere acquisito un elemento deve essere abilitato. Controllare se <xref:System.Windows.ContentElement.IsEnabled%2A> è `true` prima di chiamare <xref:System.Windows.ContentElement.CaptureStylus%2A>.  
  
 Se la chiamata <xref:System.Windows.ContentElement.CaptureStylus%2A> restituisce `true`, <xref:System.Windows.ContentElement.IsStylusCaptured%2A> anche `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">Dispositivo da acquisire.</param>
        <summary>Tenta di forzare l'acquisizione di un tocco in questo elemento.</summary>
        <returns>
          <see langword="true" /> se il tocco specificato viene acquisto nell'elemento. In caso contrario <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.CaptureTouch%2A> restituirà `false` se il <xref:System.Windows.Input.TouchDevice> viene attualmente acquisito da un altro elemento.  
  
 Se <xref:System.Windows.ContentElement.CaptureTouch%2A> restituisce `true`, quindi il <xref:System.Windows.ContentElement.GotTouchCapture> viene generato l'evento.  
  
 Per rilasciare l'acquisizione di un solo tocco da questo elemento, utilizzare il <xref:System.Windows.ContentElement.ReleaseTouchCapture%2A> (metodo) e specificare il dispositivo touchscreen da rilasciare. Per rilasciare tutti i tocchi da questo elemento, utilizzare il <xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A> metodo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="touchDevice" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un insieme di oggetti <see cref="T:System.Windows.Input.CommandBinding" /> associati all'elemento.</summary>
        <value>Insieme di tutti gli oggetti <see cref="T:System.Windows.Input.CommandBinding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Windows.Input.CommandBinding> consente la gestione di un comando specifico per questo elemento e dichiara il collegamento tra un comando, gli eventi e i gestori associati da questo elemento.  
  
 Un altro modo consueto per popolare il <xref:System.Windows.ContentElement.CommandBindings%2A> raccolta consiste nell'utilizzare <xref:System.Windows.Input.CommandManager> metodi a livello di codice.  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a>Utilizzo della sintassi XAML per elementi proprietà  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *oneOrMoreCommandBindings*  
 Uno o più <xref:System.Windows.Input.CommandBinding> elementi. Ognuno di questi deve avere un <xref:System.Windows.Input.CommandBinding.Command%2A> attributo impostato su un comando noto e gli attributi impostati per la <xref:System.Windows.Input.CommandBinding.CanExecute> e <xref:System.Windows.Input.CommandBinding.Executed> le implementazioni di gestori. Per altre informazioni, vedere <xref:System.Windows.Input.CommandBinding>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di trascinamento sottostante per cui questo elemento rappresenta la destinazione del trascinamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.DragEnter?displayProperty=nameWithType> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.DragEnter> evento sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.DragEnterEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.DragEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewDragEnter>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnDragEnter%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.DragEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di trascinamento sottostante per cui l'elemento rappresenta l'origine del trascinamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> evento per questa classe associato in modo che <xref:System.Windows.ContentElement.DragLeave?displayProperty=nameWithType> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.DragLeave> evento sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.DragLeaveEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.DragEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.DragDrop.PreviewDragLeave>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnDragLeave%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragEnter" />
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
        <altmember cref="E:System.Windows.ContentElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.DragLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di trascinamento sottostante per il quale l'elemento rappresenta la destinazione del rilascio potenziale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento si verifica anche se l'operazione di trascinamento i limiti dell'elemento. Se l'operazione di trascinamento viene avviato all'esterno dei limiti e quindi spostarsi all'interno, questo evento viene generato anche, così come <xref:System.Windows.ContentElement.DragEnter> e gli eventi di anteprima correlati.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> evento per questa classe associato in modo che <xref:System.Windows.ContentElement.DragOver?displayProperty=nameWithType> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.DragOver> evento sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.DragOverEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.DragEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.DragDrop.PreviewDragOver>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnDragOver%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragEnter" />
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
        <altmember cref="E:System.Windows.ContentElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.DragOver" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di rilascio sottostante con questo elemento come destinazione del rilascio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> evento per questa classe associato in modo che <xref:System.Windows.ContentElement.Drop?displayProperty=nameWithType> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.Drop> evento sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.DropEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.DragEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewDrop>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnDrop%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
        <altmember cref="E:System.Windows.ContentElement.MouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.Drop" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tenta di impostare lo stato attivo su questo elemento.</summary>
        <returns>
          <see langword="true" /> se lo stato attivo della tastiera può essere impostato su questo elemento, <see langword="false" /> se questa chiamata al metodo non forza lo stato attivo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per essere attivabile, <xref:System.Windows.ContentElement.Focusable%2A> e <xref:System.Windows.ContentElement.IsEnabled%2A> devono essere entrambi `true`. Si noti che quasi tutti <xref:System.Windows.ContentElement> classi derivate non sono <xref:System.Windows.ContentElement.Focusable%2A> per impostazione predefinita.  
  
 Anche se un elemento è una gestione degli eventi con stato attivabile e abilitato, all'interno di un struttura ad albero specifica, ad esempio per un controllo composito, può rispondere agli eventi di stato attivo di anteprima, non consentendo lo stato attivo, pertanto questo metodo restituirà `false`.  
  
 In generale, lo stato attivo è governato da due concetti separati: tastiera e lo stato attivo logico, che non sono sempre uguali. Questo metodo imposta lo stato attivo logico. Non c'è alcun mezzo a livello di codice per impostare lo stato attivo in modo specifico; stato attivo della tastiera è determinato dall'input dell'utente. Per ulteriori informazioni, vedere [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md) e [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
 Se la chiamata <xref:System.Windows.ContentElement.Focus%2A> restituisce `true`, <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> e <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> sono anche `true`.  
  
 Se le proprietà correlate non sono già `true`, quando si chiama <xref:System.Windows.ContentElement.Focus%2A>, uno o più dei seguenti eventi vengono generati nell'ordine seguente: <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>, <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> (l'origine è la nuova destinazione dello stato attivo), <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged>, <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.ContentElement.LostKeyboardFocus>, <xref:System.Windows.ContentElement.GotKeyboardFocus> (l'origine è la nuova destinazione di messa a fuoco).  
  
   
  
## Examples  
 Nell'esempio seguente è un gestore eventi di caricamento pagina che trova un paragrafo del documento e imposta lo stato attivo. Paragrafi non sono attivabili per impostazione predefinita. In questo particolare paragrafo è stato applicato uno stile che (non illustrato) usato uno stile <xref:System.Windows.Setter> per renderla attivabile.  
  
 [!code-csharp[ContentElementsSmorgasbord#Focus](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#focus)]
 [!code-vb[ContentElementsSmorgasbord#Focus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#focus)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Recupera o imposta un valore che indica se l'elemento può ricevere lo stato attivo.</summary>
        <value>
          <see langword="true" /> se l'elemento è attivabile, in caso contrario <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo l'elemento riceve input da tastiera.  
  
 Alcune classi derivate possono sostituire i metadati per questa proprietà di dipendenza in modo che sia attivabile per impostazione predefinita la classe derivata.  
  
 Quando viene ereditato da <xref:System.Windows.Documents.Hyperlink> o le relative classi derivate, <xref:System.Windows.Documents.Hyperlink> ignora i metadati per questa proprietà di dipendenza e ridefinisce il valore predefinito di questa proprietà sia `true`.  
  
<a name="dependencyPropertyInfo_Focusable"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.FocusableProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 Nell'esempio seguente viene creato uno stile che rende un <xref:System.Windows.Documents.Paragraph> attivabili per impostazione predefinita e offre un comportamento visivo quando riceve lo stato attivo.  
  
 [!code-xaml[ContentElementsSmorgasbord#Focusable](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#focusable)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si deriva dalla <see cref="T:System.Windows.ContentElement" />, valutare se l'elemento sia attivabile, dal momento che per impostazione predefinita non lo. Se si desidera rendere attivabile, sostituire i metadati per questa proprietà nel costruttore statico della classe derivata come indicato di seguito:  
  
 [!code-csharp[CorePseudocode#UIElementShortOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementshortoverride)]
 [!code-vb[CorePseudocode#UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)]  
  
 dove <paramref name="myElement" /> è il nome della classe del tipo che si esegue l'override dei metadati.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.ContentElement.Focusable" /> cambia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.Focusable" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">Proprietà di dipendenza da controllare.</param>
        <summary>Restituisce il valore della proprietà di base per la proprietà specificata in questo elemento, indipendentemente da eventuali valori animati provenienti da un'animazione in esecuzione o interrotta.</summary>
        <returns>Valore della proprietà se alla proprietà di dipendenza specificata non sono associate animazioni.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se non sono associate animazioni a proprietà, quindi il <xref:System.Windows.ContentElement.GetAnimationBaseValue%2A> valore restituito è sempre identico al <xref:System.Windows.DependencyObject.GetValue%2A> valore restituito. Se sono presenti animazioni associate, quindi tutti i possibili valori di animazione derivati tra l'inizio e i valori di arresto vengono ignorati e il valore della proprietà è determinato in base a tutti gli altri possibili input. Per altre informazioni, vedere [Precedenza del valore della proprietà di dipendenza](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal virtual System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Se sottoposto a override in una classe derivata, restituisce un elemento padre alternativo dell'[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] per questo elemento se non esiste alcun elemento padre visuale.</summary>
        <returns>Oggetto, se l'implementazione di una classe derivata dispone di una connessione a un elemento padre alternativo da segnalare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'implementazione virtuale predefinita di questo metodo restituisce `null`. <xref:System.Windows.FrameworkContentElement> fornisce un'implementazione pratica.  
  
 Gli elementi padre alternativi sono utilizzati per il routing, nei casi in cui un elemento crea una struttura elemento padre alternativo in modo che gli eventi vengono indirizzati in modo diverso dal modello di routing la struttura ad albero visuale padre standard, standard o verso il basso di visualizzare l'anteprima di strategia di routing.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di trascinamento e rilascio sottostante che coinvolge l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.GiveFeedback> evento consente all'origine di un evento di trascinamento di modificare l'aspetto del puntatore del mouse per fornire l'utente indicazioni visive durante un'operazione di trascinamento e rilascio. Il feedback visivo ribadiscono che è un'operazione di trascinamento e rilascio nel processo.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> evento per questa classe associato in modo che <xref:System.Windows.ContentElement.GiveFeedback> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.GiveFeedback> evento sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.GiveFeedbackEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewGiveFeedback>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnGiveFeedback%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.GiveFeedback" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'elemento riceve lo stato attivo logico.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lo stato attivo logico differisce dallo stato attivo della tastiera se lo stato attivo viene forzato intenzionalmente utilizzando una chiamata al metodo ma lo stato attivo della tastiera precedente esiste in un ambito diverso. In questo scenario, lo stato attivo rimane in cui si trova e l'elemento in cui un <xref:System.Windows.ContentElement.Focus%2A> viene chiamato comunque Ottiene lo stato attivo logico.  
  
 Interpretazione più precisa di questo evento è che viene generato quando il valore di <xref:System.Windows.ContentElement.IsFocused%2A> proprietà di un elemento nella route viene modificato da `false` per `true`.  
  
 Poiché questo evento viene utilizzato il routing di bubbling, l'elemento che riceve lo stato attivo potrebbe essere un elemento figlio anziché l'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo che ha acquisito lo stato attivo.  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.GotFocusEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.RoutedEventHandler>|  
  
-   Non vi è alcun evento di tunneling corrispondente.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnGotFocus%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.ContentElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.GotFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stato attivo della tastiera si trova sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> è un evento simile che tiene traccia delle modifiche dello stato in una proprietà che mantiene lo stato attivo di un elemento. il <xref:System.Windows.ContentElement.GotKeyboardFocus> evento viene generato in molte circostanze stesso.  
  
 Poiché questo evento viene utilizzato il routing di bubbling, l'elemento che ha lo stato attivo potrebbe essere un elemento figlio anziché l'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo che ha lo stato attivo.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> evento per questa classe associato in modo che <xref:System.Windows.ContentElement.GotKeyboardFocus> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.GotKeyboardFocus> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.GotKeyboardFocusEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.GotKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'elemento acquisisce lo stato mouse capture.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un elemento acquisisce il mouse, riceve l'input del mouse, anche se il puntatore del mouse non rientra nei limiti. Il puntatore del mouse in genere viene acquisito solo durante le operazioni di trascinamento e rilascio e rimane acquisito finché non si verifica l'azione di eliminazione dell'operazione di trascinamento e rilascio.  
  
 Poiché questo evento viene utilizzato il routing di bubbling, l'elemento con l'acquisizione potrebbe essere un elemento figlio invece dell'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nell'evento di acquisizione dei dati per determinare l'elemento effettivo con il mouse.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> evento per questa classe associato in modo che <xref:System.Windows.ContentElement.GotMouseCapture> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.GotMouseCapture> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.GotMouseCaptureEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Non vi è alcun evento di tunneling corrispondente definito.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnGotMouseCapture%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.GotMouseCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'elemento rileva lo stilo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un elemento acquisisce lo stilo, riceve l'input con stilo anche se il puntatore non rientra nei limiti. Lo stilo viene acquisito in genere solo durante le operazioni di trascinamento e rilascio e conserva fino a quando non si verifica l'azione di eliminazione dell'operazione di trascinamento e rilascio.  
  
 Poiché questo evento viene utilizzato il routing di bubbling, l'elemento con l'acquisizione potrebbe essere un elemento figlio invece dell'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo che ha lo stato capture.  
  
 Questo evento viene creato un alias per l'evento associato per questa classe in modo che <xref:System.Windows.ContentElement.GotStylusCapture> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.GotStylusCapture> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.GotStylusCaptureEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Non vi è alcun evento di tunneling corrispondente definito.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnGotStylusCapture%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.GotStylusCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un tocco viene acquisito in questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.GotTouchCaptureEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.GotTouchCapture" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se questo elemento dispone di proprietà a cui è stata aggiunta un'animazione.</summary>
        <value>
          <see langword="true" /> se questo elemento dispone di animazioni associate ad alcune proprietà, in caso contrario <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà restituisce `true` per animazioni permanenti (senza clock, sempre in esecuzione) o per le animazioni che una sequenza temporale specifica.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'insieme delle associazioni di input associate a questo elemento.</summary>
        <value>Insieme delle associazioni di input.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Associazioni di input supportano l'associazione di comandi ai dispositivi di input. Ad esempio, <xref:System.Windows.Input.MouseBinding> implementa associazioni di input che includono le proprietà specifiche dei mouse.  
  
 La raccolta di associazioni di input include sia le associazioni di input che riguardano il tipo e associazioni di input che vengono dichiarate nell'istanza.  
  
 Una proprietà correlata, <xref:System.Windows.ContentElement.CommandBindings%2A>, gestisce una raccolta di associazioni di comandi. Queste associazioni sono diverse dalle associazioni di input in quanto rappresentano il livello successivo verso il basso dell'elaborazione del comando - azioni legate a comandi noti e gestori di eventi specifici di una classe per loro.  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a>Utilizzo della sintassi XAML per elementi proprietà  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *oneOrMoreInputBindings*  
 Uno o più <xref:System.Windows.Input.InputBinding> elementi (in genere il <xref:System.Windows.Input.KeyBinding> o <xref:System.Windows.Input.MouseBinding> classi derivate). Ognuno di questi deve disporre di un <xref:System.Windows.Input.InputBinding.Command%2A> e <xref:System.Windows.Input.InputBinding.Gesture%2A> set di attributi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se questo elemento è abilitato nell'[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</summary>
        <value>
          <see langword="true" /> se l'elemento è abilitato; in caso contrario <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.IsEnabledProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 Nell'esempio seguente viene creato uno stile che include un setter di proprietà che fornisce un comportamento visivo alternativo quando un <xref:System.Windows.Documents.Hyperlink> è impostato su <xref:System.Windows.ContentElement.IsEnabled%2A> `false`.  
  
 [!code-xaml[ContentElementsSmorgasbord#IsEnabledIsMouseOver](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#isenabledismouseover)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.ContentElement.IsEnabled" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che diventa il valore restituito di <see cref="P:System.Windows.ContentElement.IsEnabled" /> in classi derivate.</summary>
        <value>
          <see langword="true" /> se l'elemento è abilitato; in caso contrario <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>L'implementazione predefinita di questa proprietà memorizza nella cache il valore e calcola anche se l'elemento padre di questo elemento è abilitato. (Se l'elemento padre non è abilitata, l'elemento figlio può essere abilitata in modo efficace nel pratici [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].) Se si sceglie di eseguire l'override di questa implementazione, assicurarsi di chiamare l'implementazione di base per mantenere questo comportamento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.IsEnabled" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che determina se l'elemento ha lo stato attivo logico.</summary>
        <value>
          <see langword="true" /> se questo elemento detiene lo stato attivo logico; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se un'applicazione dispone di più divisioni dello stato attivo, ad esempio tra contenuto menu e il resto dell'applicazione, lo stato attivo logico potrebbero essere diversi dallo stato attivo della tastiera. In questo scenario, in un elemento dell'interfaccia utente dell'applicazione può essere solo lo stato attivo, tuttavia, alcuni elementi in altre divisioni lo stato attivo potrebbero continuare a mantenere lo stato attivo logico. Per ulteriori informazioni sullo stato attivo logico, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) e [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.IsFocusedProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 Nell'esempio seguente viene creato uno stile che rende un <xref:System.Windows.Documents.Paragraph> attivabili per impostazione predefinita e offre un comportamento visivo quando riceve lo stato attivo.  
  
 [!code-xaml[ContentElementsSmorgasbord#Focusable](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#focusable)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.IsFocused" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se un sistema del metodo di input, ad esempio un [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)], viene abilitato per l'elaborazione dell'input in questo elemento.</summary>
        <value>
          <see langword="true" /> se è attivo un metodo di input, in caso contrario <see langword="false" />. Il valore predefinito della proprietà associata sottostante è <see langword="true" />; tuttavia, questo valore è influenzato dallo stato dei metodi di input in fase di esecuzione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà restituisce il valore restituito dalla proprietà connessa <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> per i metodi di input attualmente abilitati (tastiera, riconoscimento vocale e altri dispositivi di input).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se l'elemento ha lo stato attivo della tastiera.</summary>
        <value>
          <see langword="true" /> se questo elemento ha la tastiera allo stato attivo; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.IsKeyboardFocusedProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotFocus" />
        <altmember cref="E:System.Windows.ContentElement.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.IsKeyboardFocused" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se lo stato attivo della tastiera si trova in qualsiasi punto dell'elemento o degli elementi figlio.</summary>
        <value>
          <see langword="true" /> se lo stato attivo della tastiera è sull'elemento o sugli elementi figlio; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Modifica del valore di questa proprietà in genere aumentare di <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> evento, a meno che non abbia eseguito l'override di una classe derivata <xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A> per eliminare l'evento.  
  
 Questa proprietà non viene impostata direttamente, ma è possibile impostare lo stato attivo per l'elemento chiamando <xref:System.Windows.ContentElement.Focus%2A>, oppure effettuare una <xref:System.Windows.ContentElement.MoveFocus%2A> richiesta. Una di queste chiamate al metodo potrebbe modificare il valore della proprietà.  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.IsKeyboardFocusWithinProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.IsKeyboardFocusWithin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il mouse è acquisito da questo elemento.</summary>
        <value>
          <see langword="true" /> se l’elemento ha l’acquisizione del mouse, in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Stato di acquisizione del mouse è correlato a operazioni di trascinamento e rilascio in-process.  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.IsMouseCapturedProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 Nell'esempio seguente lo stato di acquisizione del mouse attiva o disattiva dipende se il mouse è già stato acquisito dall'elemento.  
  
 [!code-csharp[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#ismousecaptured)]
 [!code-vb[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.CaptureMouse" />
        <altmember cref="E:System.Windows.ContentElement.GotMouseCapture" />
        <altmember cref="E:System.Windows.ContentElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.ContentElement.IsMouseCaptured" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.IsMouseCaptured" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che determina se l'elemento o gli elementi figlio nel relativo albero di elementi hanno lo stato mouse capture.</summary>
        <value>
          <see langword="true" /> se questo elemento o un elemento contenuto riceve l'input del mouse; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.IsMouseCaptureWithinProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseCaptured" />
        <altmember cref="M:System.Windows.ContentElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore di <see cref="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se la posizione del puntatore del mouse corrisponde ai risultati dell'hit test, che prendono in considerazione la composizione dell'elemento.</summary>
        <value>
          <see langword="true" /> Se il puntatore del mouse è posizionato lo stesso elemento restituito come risultato un hit test. in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A differenza di <xref:System.Windows.ContentElement.IsMouseOver%2A>, questa proprietà è solo `true` se il puntatore del mouse è posizionato sull'elemento di valore letterale, come nel caso di un hit test. Se il puntatore del mouse è invece su un elemento figlio, in particolare su elementi che fanno parte di un elemento modello più profondo e composizione, questa proprietà sarà `false`. A meno che non si conosce come un controllo composito (ad esempio, si utilizza questa proprietà in un modello di controllo personalizzato per un controllo che definisce), questa proprietà potrebbe restituire risultati imprevisti. Per la maggior parte degli scenari in cui si non si creano controlli, utilizzare <xref:System.Windows.ContentElement.IsMouseOver%2A> invece.  
  
 Se il mouse viene acquisito da questo elemento e questa proprietà è `true` al momento dell'acquisizione, questa proprietà continuerà a restituire `true` fino a quando il mouse capture viene perso e il puntatore viene spostato nei limiti.  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.IsMouseDirectlyOverProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseEnter" />
        <altmember cref="E:System.Windows.ContentElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il puntatore del mouse è posizionato su questo elemento (elementi figlio di visualizzazione o composizione del controllo inclusi).</summary>
        <value>
          <see langword="true" /> se il puntatore del mouse è sull'elemento o sui rispettivi elementi figlio, in caso contrario <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anche se non esiste un evento "IsMouseOverChanged" analogo, molti eventi simili eseguire. Ad esempio, è possibile utilizzare <xref:System.Windows.ContentElement.MouseEnter>, <xref:System.Windows.ContentElement.MouseMove>, e <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged>.  
  
 Se l'elemento acquisisce il mouse, questa proprietà rimane `true` fino a quando il mouse capture viene perso e il puntatore del mouse esce dai limiti dell'elemento.  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.IsMouseOverProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 Nell'esempio seguente viene creato uno stile che include un setter di proprietà che fornisce un comportamento visivo alternativo quando un <xref:System.Windows.Documents.Hyperlink> report <xref:System.Windows.ContentElement.IsMouseOver%2A> `true`.  
  
 [!code-xaml[ContentElementsSmorgasbord#IsEnabledIsMouseOver](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#isenabledismouseover)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.IsMouseOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se lo stilo viene rilevato su questo elemento.</summary>
        <value>
          <see langword="true" /> se l’elemento ha l'acquisizione dello stilo, in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.IsStylusCapturedProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.CaptureStylus" />
        <altmember cref="E:System.Windows.ContentElement.GotStylusCapture" />
        <altmember cref="E:System.Windows.ContentElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.ContentElement.IsStylusCaptured" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.IsStylusCaptured" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che determina se l'input dello stilo viene acquisito dall'elemento, elementi figlio e composizione del controllo inclusi.</summary>
        <value>
          <see langword="true" /> se l'input dello stilo viene acquisito all'interno di questo elemento, in caso contrario <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.IsStylusCaptureWithinProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se la posizione dello stilo corrisponde a risultati dell'hit test, che prendono in considerazione la composizione dell'elemento.</summary>
        <value>
          <see langword="true" /> se lo stilo è sullo stesso elemento di un hit test, in caso contrario <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A differenza di <xref:System.Windows.ContentElement.IsStylusOver%2A>, questa proprietà è solo `true` se lo stilo è posizionato sull'elemento. Se lo stilo è invece su un elemento figlio o su elementi che fanno parte di più approfondita composizione di un elemento, questa proprietà sarà `false`.  
  
 A meno che non si conosce come un controllo composito (ad esempio, si utilizza questa proprietà in un modello di controllo personalizzato per un controllo che definisce), questa proprietà potrebbe restituire risultati imprevisti. Per la maggior parte degli scenari in cui si non si creano controlli, utilizzare <xref:System.Windows.ContentElement.IsStylusOver%2A> invece.  
  
 Se questo elemento acquisisce lo stilo e questa proprietà è `true` al momento dell'acquisizione, questa proprietà rimane `true` fino a quando acquisisce lo stilo viene perso e lo stilo viene spostato nei limiti.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.IsStylusDirectlyOverProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se lo stilo è posizionato su questo elemento (elementi figlio di visualizzazione inclusi).</summary>
        <value>
          <see langword="true" /> se lo stilo è sull'elemento o sugli elementi figlio, in caso contrario <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se questo elemento acquisisce lo stilo, questa proprietà rimane `true` fino a quando acquisisce lo stilo viene persa e il puntatore non rientra nei limiti.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.IsStylusOverProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.IsStylusOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene premuto un tasto mentre lo stato attivo si trova sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestione della chiave interagisce con altre funzionalità di piattaforma, ad esempio l'esecuzione di comandi e il testo di composizione. Il <xref:System.Windows.ContentElement.KeyDown> tratta di un evento di input di testo di basso livello che potrebbe non comportarsi come previsto su determinati controlli. Questo avviene perché alcuni controlli sono di composizione del controllo o la gestione della classe che fornisce una versione di livello superiore di testo, la gestione di input e gli eventi correlati.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> evento per questa classe associato in modo che <xref:System.Windows.ContentElement.KeyDown> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.KeyDown> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.KeyDownEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewKeyDown>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnKeyDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.KeyDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene rilasciato un tasto mentre lo stato attivo si trova sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> evento per questa classe associato in modo che <xref:System.Windows.ContentElement.KeyUp> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.KeyUp> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.KeyUpEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewKeyUp>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnKeyUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.KeyUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'elemento perde lo stato attivo logico.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lo stato attivo logico differisce dallo stato attivo della tastiera se lo stato attivo viene forzato intenzionalmente utilizzando una chiamata al metodo ma lo stato attivo della tastiera precedente esiste in un ambito diverso. In questo scenario e rimane impostato lo stato attivo della tastiera in cui è l'elemento in cui un <xref:System.Windows.ContentElement.Focus%2A> viene chiamato comunque Ottiene lo stato attivo logico.  
  
 Interpretazione più precisa di questo evento è che viene generato quando il valore della <xref:System.Windows.ContentElement.IsFocused%2A> proprietà di un elemento nella route viene cambiata da `true` a `false`.  
  
 Poiché questo evento viene utilizzato il routing di bubbling, l'elemento perde lo stato attivo potrebbe essere un elemento figlio anziché l'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo che ha acquisito lo stato attivo.  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.LostFocusEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.RoutedEventHandler>|  
  
-   Non vi è alcun evento di tunneling corrispondente.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnLostFocus%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.ContentElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.LostFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stato attivo della tastiera non si trova più sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poiché questo evento viene utilizzato il routing di bubbling, l'elemento perde lo stato attivo potrebbe essere un elemento figlio anziché l'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo che perde lo stato attivo.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.LostKeyboardFocus> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.LostKeyboardFocus> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.LostKeyboardFocusEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.LostKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'elemento perde lo stato mouse capture.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un elemento acquisisce il mouse, riceve l'input del mouse, anche se il puntatore non rientra nei limiti. In genere, il puntatore del mouse viene acquisito solo durante le operazioni di trascinamento e rilascio.  
  
 Poiché questo evento viene utilizzato il routing di bubbling, l'elemento perde l'acquisizione potrebbe essere un elemento figlio anziché l'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo che perde l'acquisizione.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.LostMouseCapture> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.LostMouseCapture> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.LostMouseCaptureEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Non vi è alcun evento di tunneling corrispondente definito.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnLostMouseCapture%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.LostMouseCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'elemento non rileva più lo stilo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un elemento acquisisce lo stilo, riceve l'input con stilo anche se il puntatore non rientra nei limiti. Lo stilo viene acquisito in genere solo durante le operazioni di trascinamento e rilascio.  
  
 Poiché questo evento viene utilizzato il routing di bubbling, l'elemento perde lo stato attivo potrebbe essere un elemento figlio anziché l'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo che perde lo stato attivo.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.LostStylusCapture> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.LostStylusCapture> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.LostStylusCaptureEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Non vi è alcun evento di tunneling corrispondente definito.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnLostStylusCapture%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.LostStylusCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando questo elemento perde l’acquisizione di un tocco.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.LostTouchCaptureEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.LostTouchCapture" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica alla pressione di qualsiasi pulsante del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.MouseDown> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.MouseDown> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Il <xref:System.Windows.ContentElement.MouseDown> evento viene generato spesso insieme al <xref:System.Windows.ContentElement.MouseLeftButtonDown> o <xref:System.Windows.ContentElement.MouseRightButtonDown>, che corrispondono alla pressione di uno dei due pulsanti standard. <xref:System.Windows.ContentElement.MouseLeftButtonDown> e <xref:System.Windows.ContentElement.MouseRightButtonDown> sono anche gli eventi indirizzati, ma sono eventi indirizzati diretti e viene generato l'evento appropriato pulsante specifico quando il <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento raggiunge questo elemento lungo la route dell'evento. Vedere la sezione Osservazioni per <xref:System.Windows.ContentElement.MouseLeftButtonDown> o <xref:System.Windows.ContentElement.MouseRightButtonDown>.  
  
> [!IMPORTANT]
>  Alcuni <xref:System.Windows.ContentElement> le classi derivate che hanno un comportamento simile al controllo, ad esempio, <xref:System.Windows.Documents.Hyperlink>, potrebbe essere una classe inerente la gestione per gli eventi del pulsante del mouse. Il pulsante sinistro del mouse verso il basso l'evento è più probabile di gestione di classi in un controllo. La gestione delle classi spesso contrassegna sottostante <xref:System.Windows.Input.Mouse> classe di evento come gestito. Dopo l'evento è contrassegnato come gestito, gli altri gestori istanza sono associati a tale elemento non vengono normalmente generati. Eventuali altri gestori di classe o istanza associati agli elementi nella direzione bubbling verso la radice dell'albero dell'interfaccia utente anche in genere non vengono generati.  
  
 È possibile risolvere il problema descritto nella nota Importante precedente e continuare a ricevere <xref:System.Windows.ContentElement.MouseDown> gli eventi per pulsante sinistro del mouse su una classe derivata che dispone di classe di gestione utilizzando una delle soluzioni seguenti:  
  
-   Gestori per il <xref:System.Windows.ContentElement.PreviewMouseDown> evento, che non è contrassegnato come gestito dai controlli. Si noti che, poiché si tratta di un evento di anteprima, la route inizia alla radice e giunge fino al controllo.  
  
-   Registrare un gestore del controllo a livello di routine chiamando <xref:System.Windows.ContentElement.AddHandler%2A> e scegliendo l'opzione di firma che consente ai gestori di ascolto degli eventi, anche se sono già contrassegnati come gestito nei dati dell'evento indirizzato.  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.MouseDownEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewMouseDown>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnMouseDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.MouseDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il puntatore del mouse viene spostato all'interno dei limiti dell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.MouseEnter> è un [indirizzato Cenni preliminari sugli eventi](~/docs/framework/wpf/advanced/routed-events-overview.md) che utilizza una strategia di routing di gestione degli eventi diretta. Gli eventi indirizzati direttamente non vengono generati una route; al contrario, vengono gestiti nello stesso elemento in cui vengono generati. Tuttavia, consentono di altri aspetti del comportamento dell'evento indirizzato, ad esempio i trigger di evento negli stili.  
  
 Sebbene <xref:System.Windows.ContentElement.MouseEnter> rilevi quando il puntatore del mouse entra nell'area di un elemento, questo evento ulteriori letteralmente che i <xref:System.Windows.ContentElement.IsMouseOver%2A> modificato dal valore della proprietà `false` a `true` per questo elemento.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.MouseEnter> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.MouseEnter> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.MouseEnterEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnMouseEnter%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.MouseEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il puntatore del mouse viene spostato all'esterno dei limiti dell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.MouseLeave> è un [indirizzato Cenni preliminari sugli eventi](~/docs/framework/wpf/advanced/routed-events-overview.md) che utilizza una strategia di routing di gestione degli eventi diretta. Gli eventi indirizzati direttamente non vengono generati una route; al contrario, vengono gestiti nello stesso elemento in cui vengono generati. Tuttavia, consentono di altri aspetti del comportamento dell'evento indirizzato, ad esempio i trigger di evento negli stili.  
  
 Sebbene <xref:System.Windows.ContentElement.MouseLeave> rilevi quando il puntatore del mouse esce da un elemento, questo evento più letteralmente che i <xref:System.Windows.ContentElement.IsMouseOver%2A> modificato dal valore della proprietà `true` a `false` per questo elemento.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.MouseLeave> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.MouseLeave> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.MouseLeaveEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnMouseLeave%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.MouseLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica alla pressione del pulsante sinistro del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sebbene questo [indirizzato Cenni preliminari sugli eventi](~/docs/framework/wpf/advanced/routed-events-overview.md) sembri seguire una route bubbling attraverso una struttura ad albero, in realtà è un evento indirizzato diretto generato e rigenerato nella struttura ad albero da ogni <xref:System.Windows.ContentElement>.  
  
 Questo evento è uno dei vari eventi correlati che indicano le specifiche del pulsante del mouse di un oggetto sottostante <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento, che è un evento che viene elaborato da ogni elemento lungo la route di un evento.  
  
 Gli argomenti dell'evento espongono gli argomenti di sottostante <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento. Se tale evento è contrassegnato come gestito lungo la route dell'evento, vengono comunque generati eventi specifici del pulsante del mouse. Tuttavia, è necessario aggiungere i gestori di eventi specifici del pulsante del mouse in modo esplicito chiamando <xref:System.Windows.ContentElement.AddHandler%2A>, con l'opzione per gestire eventi che sono già contrassegnati come gestito, in modo da essere listener dell'evento.  
  
 Concettualmente, pensare a questo evento (e altri eventi del pulsante del mouse su <xref:System.Windows.ContentElement>) da un mouse "servizio" (con la definizione del servizio fornita dalla <xref:System.Windows.Input.Mouse> classe). L'evento aggiunge la comodità di non dover controllare gli stati del pulsante del mouse (da sinistra a destra, giù) degli eventi del mouse originale nei dati dell'evento. Per scenari più avanzati, ad esempio la verifica degli stati dei pulsanti non standard, potrebbe essere necessario utilizzare il [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sul <xref:System.Windows.Input.Mouse> classe anziché quelli su <xref:System.Windows.ContentElement>.  
  
> [!IMPORTANT]
>  Alcuni <xref:System.Windows.ContentElement> le classi derivate che hanno un comportamento simile al controllo, ad esempio, <xref:System.Windows.Documents.Hyperlink>, potrebbe essere una classe inerente la gestione per gli eventi del pulsante del mouse. Il pulsante sinistro del mouse verso il basso l'evento è più probabile di gestione di classi in un controllo. La gestione delle classi spesso contrassegna sottostante <xref:System.Windows.Input.Mouse> classe di evento come gestito. Dopo l'evento è contrassegnato come gestito, gli altri gestori istanza sono associati a tale elemento non vengono normalmente generati. Eventuali altri gestori di classe o istanza associati agli elementi nella direzione bubbling verso la radice dell'albero dell'interfaccia utente anche in genere non vengono generati.  
  
 È possibile risolvere il problema descritto nella nota Importante precedente e continuare a ricevere <xref:System.Windows.ContentElement.MouseLeftButtonDown> gli eventi per pulsante sinistro del mouse su una classe derivata che dispone di classe di gestione utilizzando una delle soluzioni seguenti:  
  
-   Gestori per il <xref:System.Windows.ContentElement.PreviewMouseDown> evento, che non è contrassegnato come gestito dai controlli. Si noti che, poiché si tratta di un evento di anteprima, la route inizia alla radice e giunge fino al controllo.  
  
-   Registrare un gestore del controllo a livello di routine chiamando <xref:System.Windows.ContentElement.AddHandler%2A> e scegliendo l'opzione di firma che consente ai gestori di ascolto degli eventi, anche se sono già contrassegnati come gestito nei dati dell'evento indirizzato.  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.MouseLeftButtonDownEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al rilascio del pulsante sinistro del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sebbene questo [indirizzato Cenni preliminari sugli eventi](~/docs/framework/wpf/advanced/routed-events-overview.md) sembri seguire una route bubbling attraverso una struttura ad albero, in realtà è un evento indirizzato diretto generato e rigenerato nella struttura ad albero da ogni <xref:System.Windows.ContentElement>.  
  
 Questo evento è uno dei vari eventi correlati che indicano le specifiche del pulsante del mouse di un oggetto sottostante <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento, che è un evento che viene elaborato da ogni elemento lungo la route di un evento.  
  
 Gli argomenti dell'evento espongono gli argomenti di sottostante <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento. Se tale evento è contrassegnato come gestito lungo la route dell'evento, vengono comunque generati eventi specifici del pulsante del mouse. Tuttavia, è necessario aggiungere i gestori di eventi specifici del pulsante del mouse in modo esplicito chiamando <xref:System.Windows.ContentElement.AddHandler%2A>, con l'opzione per gestire eventi che sono già contrassegnati come gestito, in modo da essere listener dell'evento.  
  
 Concettualmente, pensare a questo evento (e altri eventi del pulsante del mouse su <xref:System.Windows.ContentElement>) da un mouse "servizio" (con la definizione del servizio fornita dalla <xref:System.Windows.Input.Mouse> classe). L'evento aggiunge la comodità di non dover controllare gli stati del pulsante del mouse (da sinistra a destra, giù) degli eventi del mouse originale nei dati dell'evento. Per scenari più avanzati, ad esempio la verifica degli stati dei pulsanti non standard, potrebbe essere necessario utilizzare il [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sul <xref:System.Windows.Input.Mouse> classe anziché quelli su <xref:System.Windows.ContentElement>.  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.MouseLeftButtonUpEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito allo spostamento del puntatore del mouse quando è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.MouseMove> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.MouseMove> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.MouseMoveEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewMouseMove>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnMouseMove%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseEnter" />
        <altmember cref="E:System.Windows.ContentElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.MouseMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica alla pressione del pulsante destro del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sebbene questo [indirizzato Cenni preliminari sugli eventi](~/docs/framework/wpf/advanced/routed-events-overview.md) sembri seguire una route bubbling attraverso una struttura ad albero, in realtà è un evento indirizzato diretto generato e rigenerato nella struttura ad albero da ogni <xref:System.Windows.ContentElement>.  
  
 Questo evento è uno dei vari eventi correlati che indicano le specifiche del pulsante del mouse di un oggetto sottostante <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento, che è un evento che viene elaborato da ogni elemento lungo la route di un evento.  
  
 Gli argomenti dell'evento espongono gli argomenti di sottostante <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento. Se tale evento è contrassegnato come gestito lungo la route dell'evento, vengono comunque generati eventi specifici del pulsante del mouse. Tuttavia, è necessario aggiungere i gestori di eventi specifici del pulsante del mouse in modo esplicito chiamando <xref:System.Windows.ContentElement.AddHandler%2A>, con l'opzione per gestire eventi che sono già contrassegnati come gestito, in modo da essere listener dell'evento.  
  
 Concettualmente, pensare a questo evento (e altri eventi del pulsante del mouse su <xref:System.Windows.ContentElement>) da un mouse "servizio" (con la definizione del servizio fornita dalla <xref:System.Windows.Input.Mouse> classe). L'evento aggiunge la comodità di non dover controllare gli stati del pulsante del mouse (da sinistra a destra, giù) degli eventi del mouse originale nei dati dell'evento. Per scenari più avanzati, ad esempio la verifica degli stati dei pulsanti non standard, potrebbe essere necessario utilizzare il [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sul <xref:System.Windows.Input.Mouse> classe anziché quelli su <xref:System.Windows.ContentElement>.  
  
 Il pulsante destro del mouse eventi hanno spesso la gestione nativa in scenari di applicazioni. Ad esempio, un pulsante destro del mouse verso il basso potrebbe visualizzare un menu di scelta rapida. Vedere [ContextMenu Overview](~/docs/framework/wpf/controls/contextmenu-overview.md).  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.MouseRightButtonDownEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.MouseRightButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al rilascio del pulsante destro del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sebbene questo [indirizzato Cenni preliminari sugli eventi](~/docs/framework/wpf/advanced/routed-events-overview.md) sembri seguire una route bubbling attraverso una struttura ad albero, in realtà è un evento indirizzato diretto generato e rigenerato nella struttura ad albero da ogni <xref:System.Windows.ContentElement>.  
  
 Questo evento è uno dei vari eventi correlati che indicano le specifiche del pulsante del mouse di un oggetto sottostante <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento, che è un evento che viene elaborato da ogni elemento lungo la route di un evento.  
  
 Gli argomenti dell'evento espongono gli argomenti di sottostante <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento. Se tale evento è contrassegnato come gestito lungo la route dell'evento, vengono comunque generati eventi specifici del pulsante del mouse. Tuttavia, è necessario aggiungere i gestori di eventi specifici del pulsante del mouse in modo esplicito chiamando <xref:System.Windows.ContentElement.AddHandler%2A>, con l'opzione per gestire eventi che sono già contrassegnati come gestito, in modo da essere listener dell'evento.  
  
 Concettualmente, pensare a questo evento (e altri eventi del pulsante del mouse su <xref:System.Windows.ContentElement>) da un mouse "servizio" (con la definizione del servizio fornita dalla <xref:System.Windows.Input.Mouse> classe). L'evento aggiunge la comodità di non dover controllare gli stati del pulsante del mouse (da sinistra a destra, giù) degli eventi del mouse originale nei dati dell'evento. Per scenari più avanzati, ad esempio la verifica degli stati dei pulsanti non standard, potrebbe essere necessario utilizzare il [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sul <xref:System.Windows.Input.Mouse> classe anziché quelli su <xref:System.Windows.ContentElement>.  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.MouseRightButtonUpEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.MouseRightButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al rilascio di qualsiasi pulsante del mouse sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.MouseUp> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.MouseUp> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Il <xref:System.Windows.ContentElement.MouseUp> evento viene generato spesso insieme al <xref:System.Windows.ContentElement.MouseLeftButtonUp> o <xref:System.Windows.ContentElement.MouseRightButtonUp>, che corrisponde a una versione di uno dei due pulsanti standard. <xref:System.Windows.ContentElement.MouseLeftButtonUp> e <xref:System.Windows.ContentElement.MouseRightButtonUp> sono anche gli eventi indirizzati, ma sono eventi indirizzati diretti e viene generato l'evento appropriato pulsante specifico quando il <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento raggiunge questo elemento lungo la route dell'evento. Vedere la sezione Osservazioni per <xref:System.Windows.ContentElement.MouseLeftButtonUp> o <xref:System.Windows.ContentElement.MouseRightButtonUp>.  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.MouseUpEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewMouseUp>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnMouseUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.MouseUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito alla rotazione della rotellina del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lo stato attivo o il mouse capture hanno la precedenza su dove è il puntatore del mouse; Pertanto, se si riceve il <xref:System.Windows.ContentElement.MouseWheel> evento da un elemento con lo stato attivo o acquisito, il puntatore del mouse potrebbe effettivamente trovarsi su un altro elemento.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.MouseWheel> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.MouseWheel> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.MouseWheelEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewMouseWheel>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnMouseWheel%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.MouseWheel" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">Richiesta di attraversamento, contenente una proprietà che indica una modalità per passare avanti nell'ordine di tabulazione esistente o una direzione per spostarsi visivamente.</param>
        <summary>Tenta di spostare lo stato attivo da questo elemento a un altro elemento. La direzione di spostamento dello stato attivo è specificata da linee guida che vengono interpretate nell'organizzazione del padre visuale per questo elemento.</summary>
        <returns>
          <see langword="true" /> se viene eseguito l'attraversamento richiesto; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Accertarsi di controllare il valore restituito di questo metodo. Valore restituito di `false` potrebbe essere restituito se viene eseguito lo scorrimento in un punto di tabulazione definito dalla composizione di un controllo e non la richiesta per eseguire il wrapping attraversamento.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce implementazioni di <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> specifiche della classe per l'infrastruttura di [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].</summary>
        <returns>Implementazione di <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> specifica del tipo.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>L'implementazione di questo metodo è in genere per chiamare il costruttore di uno specifico <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> , implementazione e restituirlo come valore restituito.  
  
 Tutti <see cref="T:System.Windows.ContentElement" /> classi derivate devono implementare questo metodo per fornire i propri specifiche <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> le implementazioni del [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] dell'infrastruttura. Per informazioni dettagliate sull'implementazione di questo modello, vedere <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.DragEnter" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.DragLeave" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.DragOver" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.DragEnter" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.GiveFeedbackEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.GiveFeedback" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.RoutedEventArgs" /> in cui sono contenuti i dati dell'evento. Questi dati dell'evento devono contenere l'identificatore dell'evento <see cref="E:System.Windows.ContentElement.GotFocus" />.</param>
        <summary>Genera l'evento indirizzato <see cref="E:System.Windows.ContentElement.GotFocus" /> usando i dati degli eventi forniti.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo, anche se virtuale, avere un'implementazione predefinita che genera l'evento.  
  
 Questa operazione, scegliere * implementazione del metodo deve generare l'evento e l'implementazione del metodo viene richiamata internamente per generare l'evento quando il <xref:System.Windows.ContentElement.IsFocused%2A> valore proprietà viene modificato. Il <xref:System.Windows.ContentElement.OnGotFocus%2A> implementazione è diverso da un altro [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] su * implementazioni, che forniscono solo un modo pratico per aggiungere la gestione per tale evento della classe.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>A meno che non intenzionali e non è necessario per non generare gli eventi di attivazione, verificare che l'implementazione chiama l'implementazione di base. In caso contrario, il <see cref="E:System.Windows.ContentElement.GotFocus" /> evento non viene generato durante le operazioni utente tipico che in genere impostano lo stato attivo su questo elemento. Se non si intende l'elemento sia attivabile, è possibile impedire l'elemento con stato attivabile impostando <see cref="P:System.Windows.ContentElement.Focusable" /> a <see langword="false" />. Si noti che per impostazione predefinita un <see cref="P:System.Windows.ContentElement.Focusable" /> non è attivabile, pertanto l'impostazione <see cref="P:System.Windows.ContentElement.Focusable" /> deliberatamente potrebbe non essere necessaria.</para>
        </block>
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
        <altmember cref="E:System.Windows.ContentElement.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato <see cref="E:System.Windows.ContentElement.GotTouchCapture" /> che si verifica quando un tocco viene acquisito nell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> in una classe derivata per gestire il <xref:System.Windows.ContentElement.GotTouchCapture> evento. Assicurarsi di chiamare la classe base <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> metodo in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato quando un evento <see cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" /> non gestito viene generato in questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo virtuale viene generato quando il valore di <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> le modifiche alle proprietà di dipendenza. Il metodo virtuale viene generato per primo e possa modificare i dati dell'evento in base alle esigenze. Il <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> con la stessa istanza di dati di evento viene generato l'evento. Si noti che il <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> evento non è un evento indirizzato. È pertanto, non è possibile contrassegnarlo come gestito nel gestore di classe.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato immediatamente prima della generazione dell'evento <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /> da questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo virtuale viene generato quando il valore di <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> cambia il valore di proprietà di dipendenza. Il metodo virtuale viene generato per primo e possa modificare i dati dell'evento in base alle esigenze. Il <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> con la stessa istanza di dati di evento viene generato l'evento. Si noti che il <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> evento non è un evento indirizzato. È pertanto, non è possibile contrassegnarlo come gestito nel gestore di classe.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato quando un evento <see cref="E:System.Windows.ContentElement.IsMouseCapturedChanged" /> non gestito viene generato in questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo virtuale viene generato quando il valore di <xref:System.Windows.ContentElement.IsMouseCaptured%2A> cambia il valore di proprietà di dipendenza. Il metodo virtuale viene generato per primo e possa modificare i dati dell'evento in base alle esigenze. Il <xref:System.Windows.ContentElement.IsMouseCapturedChanged> con la stessa istanza di dati di evento viene generato l'evento. Si noti che il <xref:System.Windows.ContentElement.IsMouseCapturedChanged> evento non è un evento indirizzato. È pertanto, non è possibile contrassegnarlo come gestito nel gestore di classe.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato quando un evento <see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /> non gestito viene generato in questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Questo metodo virtuale viene generato quando il valore di <see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /> cambia il valore di proprietà di dipendenza. Il metodo virtuale viene generato per primo e possa modificare i dati dell'evento in base alle esigenze. Il <see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /> con la stessa istanza di dati di evento viene generato l'evento. Si noti che l'evento non è un evento indirizzato. È pertanto, non è possibile contrassegnarlo come gestito nel gestore di classe.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato quando un evento <see cref="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged" /> non gestito viene generato in questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo virtuale viene generato quando il valore di <xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A> cambia il valore di proprietà di dipendenza. Il metodo virtuale viene generato per primo e possa modificare i dati dell'evento in base alle esigenze. Il <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> con la stessa istanza di dati di evento viene generato l'evento. Si noti che il <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> evento non è un evento indirizzato. È pertanto, non è possibile contrassegnarlo come gestito nel gestore di classe.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato quando un evento <see cref="E:System.Windows.ContentElement.IsStylusCapturedChanged" /> non gestito viene generato in questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo virtuale viene generato quando il valore di <xref:System.Windows.ContentElement.IsStylusCaptured%2A> cambia il valore di proprietà di dipendenza. Il metodo virtuale viene generato per primo e possa modificare i dati dell'evento in base alle esigenze. Il <xref:System.Windows.ContentElement.IsStylusCapturedChanged> con la stessa istanza di dati di evento viene generato l'evento. Si noti che l'evento non è un evento indirizzato. È pertanto, non è possibile contrassegnarlo come gestito nel gestore di classe.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato quando un evento <see cref="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged" /> non gestito viene generato in questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo virtuale viene generato quando il valore di <xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A> cambia il valore di proprietà di dipendenza. Il metodo virtuale viene generato per primo e possa modificare i dati dell'evento in base alle esigenze. Il <xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged> con la stessa istanza di dati di evento viene generato l'evento. Si noti che l'evento non è un evento indirizzato. È pertanto, non è possibile contrassegnarlo come gestito nel gestore di classe.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato quando un evento <see cref="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged" /> non gestito viene generato in questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo virtuale viene generato quando il valore di <xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A> cambia il valore di proprietà di dipendenza. Il metodo virtuale viene generato per primo e possa modificare i dati dell'evento in base alle esigenze. Il <xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged> con la stessa istanza di dati di evento viene generato l'evento. Si noti che l'evento non è un evento indirizzato. È pertanto non è possibile contrassegnarlo come gestito nel gestore di classe.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.KeyEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le sequenze di tasti sono gestite da un gestore di input dedicato. Altre funzionalità di programmazione che si basano su sequenze di tasti, ad esempio, le associazioni di input e di comando, è possibile gestire la sequenza di tasti prima che sia esposta come sequenza di tasti generale. Se queste funzionalità del sistema contrassegnano l'evento come gestito, quindi di input <xref:System.Windows.ContentElement.OnKeyDown%2A> non viene richiamato.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.KeyEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le sequenze di tasti sono gestite da un gestore di input dedicato. Altre funzionalità di programmazione che si basano su sequenze di tasti, ad esempio, le associazioni di input e di comando, è possibile gestire la sequenza di tasti prima che sia esposta come sequenza di tasti generale. Se queste funzionalità del sistema contrassegnano l'evento come gestito, quindi di input <xref:System.Windows.ContentElement.OnKeyUp%2A> non viene richiamato.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.RoutedEventArgs" /> in cui sono contenuti i dati dell'evento. Questi dati dell'evento devono contenere l'identificatore dell'evento <see cref="E:System.Windows.ContentElement.LostFocus" />.</param>
        <summary>Genera l'evento indirizzato <see cref="E:System.Windows.ContentElement.LostFocus" /> usando i dati degli eventi forniti.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo, anche se virtuale, avere un'implementazione predefinita che genera l'evento.  
  
 Questa operazione, scegliere * implementazione del metodo deve generare l'evento e l'implementazione del metodo viene richiamata internamente per generare l'evento quando il <xref:System.Windows.ContentElement.IsFocused%2A> valore proprietà viene modificato. Questa implementazione è diverso da un altro [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] su * implementazioni, che forniscono solo un modo pratico per aggiungere la gestione per tale evento della classe.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>A meno che non intenzionali e non è necessario per non generare gli eventi di attivazione, verificare che l'implementazione chiama l'implementazione di base. In caso contrario, il <see cref="E:System.Windows.ContentElement.LostFocus" /> evento non viene generato durante le operazioni utente tipico che in genere impostano lo stato attivo su questo elemento. Se non si intende l'elemento sia attivabile, è possibile impedire l'elemento con stato attivabile impostando <see cref="P:System.Windows.ContentElement.Focusable" /> a <see langword="false" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato<see cref="E:System.Windows.ContentElement.LostTouchCapture" /> che si verifica quando l'elemento perde l'acquisizione di un tocco.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> in una classe derivata per gestire il <xref:System.Windows.ContentElement.LostTouchCapture> evento. Assicurarsi di chiamare la classe base <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> metodo in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. Questi dati dell'evento contengono informazioni dettagliate sul pulsante del mouse che è stato premuto e sullo stato gestito.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.MouseDown" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le azioni di pulsante del mouse vengono anche gestite da un gestore di input dedicato. Altre funzionalità di programmazione che si basano sulle azioni di pulsante del mouse, ad esempio input e associazioni di comandi, può richiamare i gestori per l'azione prima che sia esposta come un'azione di pulsante del mouse generale. Se questi input contrassegna le funzionalità di sistema di <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento come gestito, <xref:System.Windows.ContentElement.OnMouseDown%2A> non viene richiamato.  
  
 Se si utilizza questo gestore della classe per contrassegnare l'evento come gestito, si potrebbero avere un impatto gli eventi seguenti: <xref:System.Windows.ContentElement.MouseLeftButtonDown> e <xref:System.Windows.ContentElement.MouseRightButtonDown>. Uno di questi eventi possono essere generato su elemento ricevente quando <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> viene ricevuto.  
  
 Se si contrassegna questo evento come gestito nella gestione delle classi, secondari vengono comunque generati; Tuttavia, passano lo stato gestito nei dati dell'evento. Se l'evento viene gestito nella gestione delle classi, i gestori di istanze per gli eventi secondari non vengono richiamati solo se si utilizza in modo esplicito <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> con `handledEventsToo` `true` per associare gestori. Gestori di classi anche non vengono richiamati a meno che non sono stati registrati con il <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma con `handledEventsToo` `true`. Gestendo <xref:System.Windows.ContentElement.OnMouseDown%2A>, si intende che la gestione delle classi di tutti i possibili pulsanti del mouse verso il basso le azioni. Questo comportamento potrebbe risultare indesiderato; di conseguenza, prestare attenzione quando si utilizza questo metodo virtuale per contrassegnare gli eventi come gestito.  
  
 Tutti gli eventi specifici pulsante diretti dispone anche di una macchina * metodo. è consigliabile se si esegue l'override di questi gestori di classi specifiche pulsante potrebbero essere più appropriato.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Richiamato quando viene generato un evento associato <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> non gestito per questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato, con una strategia di routing diretto. Contrassegnare l'evento come gestito è ancora utile per impedire che i gestori di istanze comuni (quelli che non si specifica `handledEventsToo`) da cui viene richiamato.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Richiamato quando viene generato un evento associato <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> non gestito per questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato, con una strategia di routing diretto. Contrassegnare l'evento come gestito è ancora utile per impedire che i gestori di istanze comuni (quelli che non si specifica `handledEventsToo`) da cui viene richiamato.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che è stato premuto il pulsante sinistro del mouse.</param>
        <summary>Richiamato quando viene generato un evento indirizzato <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /> non gestito per questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.MouseLeftButtonDown> eventi apparentemente percorre una route di bubbling, in realtà viene trasferito in modo indiretto. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> è l'evento sottostante indirizzato per bubbling e ogni <xref:System.Windows.ContentElement> lungo l'evento route utilizza la gestione delle identica per generare l'evento indirizzato diretto <xref:System.Windows.ContentElement.MouseLeftButtonDown>. Sebbene sia possibile contrassegnare il <xref:System.Windows.ContentElement.MouseLeftButtonDown> evento come gestito per scopi di questo elemento, lo stato gestito non viene trasmesso agli altri elementi lungo la route dell'evento. Tuttavia, potrebbe voler contrassegnare l'evento come gestito per evitare i gestori di istanze generici (quelli che non specificano `handledEventsToo`) da cui viene richiamato.  
  
 L'implementazione predefinita per la gestione degli eventi di mouse generale <xref:System.Windows.ContentElement> resta in attesa di <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> e lo converte in un evento locale appropriato. Se si desidera eseguire l'override di questa logica, è necessario creare una classe derivata. Nel costruttore statico della classe derivata, registrare un gestore di classe alternativa per <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. Non è possibile modificare il comportamento di gestione del mouse <xref:System.Windows.ContentElement> eseguendo l'override <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>.  
  
 In alternativa, è possibile eseguire l'override di questo metodo per modificare una gestione degli eventi per uno stato specifico del mouse. Se si sceglie di chiamare l'implementazione di base dipende dallo scenario. La mancata chiamata base disabilita la gestione di input predefinito per tale evento del mouse in classi predecessore che prevedono anche per richiamare <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>. Ad esempio, è possibile derivare da <xref:System.Windows.Controls.Button> ed eseguire l'override <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> nella classe derivata senza chiamare l'implementazione di base; tuttavia, questo override disabilita il <xref:System.Windows.Controls.Primitives.ButtonBase.Click> evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che è stato rilasciato il pulsante sinistro del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.MouseLeftButtonUp> eventi apparentemente percorre una route di bubbling, in realtà viene trasferito in modo indiretto. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> è l'evento sottostante indirizzato per bubbling e ogni <xref:System.Windows.ContentElement> lungo l'evento route utilizza la gestione delle identica per generare l'evento indirizzato diretto <xref:System.Windows.ContentElement.MouseLeftButtonUp>. Sebbene sia possibile contrassegnare il <xref:System.Windows.ContentElement.MouseLeftButtonUp> evento come gestito per scopi di questo elemento, lo stato gestito non viene trasmesso agli altri elementi lungo la route dell'evento. Tuttavia, potrebbe voler contrassegnare l'evento come gestito per evitare i gestori di istanze generici (quelli che non specificano `handledEventsToo`) da cui viene richiamato.  
  
 L'implementazione predefinita per la gestione degli eventi di mouse generale <xref:System.Windows.ContentElement> resta in attesa di <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> e lo converte in un evento locale appropriato. Se si desidera eseguire l'override di questa logica, è necessario creare una classe derivata. Nel costruttore statico della classe derivata, registrare un gestore di classe alternativa per <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. Non è possibile modificare il comportamento di gestione del mouse <xref:System.Windows.ContentElement> eseguendo l'override <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.MouseMove" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che è stato premuto il pulsante destro del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato <see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.MouseRightButtonDown> eventi apparentemente percorre una route di bubbling, in realtà viene trasferito in modo indiretto. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> è l'evento sottostante indirizzato per bubbling e ogni <xref:System.Windows.ContentElement> lungo l'evento route utilizza la gestione delle identica per generare l'evento indirizzato diretto <xref:System.Windows.ContentElement.MouseRightButtonDown>. Sebbene sia possibile contrassegnare il <xref:System.Windows.ContentElement.MouseRightButtonDown> evento come gestito per scopi di questo elemento, lo stato gestito non viene trasmesso agli altri elementi lungo la route dell'evento. Tuttavia, potrebbe voler contrassegnare l'evento come gestito per evitare i gestori di istanze generici (quelli che non specificano `handledEventsToo`) da cui viene richiamato.  
  
 L'implementazione predefinita per la gestione degli eventi di mouse generale <xref:System.Windows.ContentElement> resta in attesa di <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> e lo converte in un evento locale appropriato. Se si desidera eseguire l'override di questa logica, è necessario creare una classe derivata. Nel costruttore statico della classe derivata, registrare un gestore di classe alternativa per <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. Non è possibile modificare il comportamento di gestione del mouse <xref:System.Windows.ContentElement> eseguendo l'override <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>.  
  
 In alternativa, è possibile eseguire l'override di questo metodo per modificare una gestione degli eventi per uno stato specifico del mouse. Se si sceglie di chiamare l'implementazione di base dipende dallo scenario. La mancata chiamata base disabilita la gestione di input predefinito per tale evento del mouse in classi predecessore che prevedono anche per richiamare <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>. Ad esempio, è possibile derivare da <xref:System.Windows.Controls.Control> ed eseguire l'override <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> nella classe derivata senza chiamare la base; tuttavia, questo override disabilita i servizi dal menu di scelta del controllo, che fanno parte di <xref:System.Windows.Controls.Control> il comportamento predefinito.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che è stato rilasciato il pulsante destro del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato <see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.MouseRightButtonUp> eventi apparentemente percorre una route di bubbling, in realtà viene trasferito in modo indiretto. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> è l'evento sottostante indirizzato per bubbling e ogni <xref:System.Windows.ContentElement> lungo l'evento route utilizza la gestione delle identica per generare l'evento indirizzato diretto <xref:System.Windows.ContentElement.MouseRightButtonUp>. Sebbene sia possibile contrassegnare il <xref:System.Windows.ContentElement.MouseRightButtonUp> evento come gestito per scopi di questo elemento, lo stato gestito non viene trasmesso agli altri elementi lungo la route dell'evento. Tuttavia, potrebbe voler contrassegnare l'evento come gestito per evitare i gestori di istanze generici (quelli che non specificano `handledEventsToo`) da cui viene richiamato.  
  
 L'implementazione predefinita per la gestione degli eventi di mouse generale <xref:System.Windows.ContentElement> resta in attesa di <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> e lo converte in un evento locale appropriato. Se si desidera eseguire l'override di questa logica, è necessario creare una classe derivata. Nel costruttore statico della classe derivata, registrare un gestore di classe alternativa per <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. Non è possibile modificare il comportamento di gestione del mouse <xref:System.Windows.ContentElement> eseguendo l'override <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. Nei dati degli eventi è indicato che è stato rilasciato il pulsante del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato <see cref="E:System.Windows.Input.Mouse.MouseUp" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le azioni di pulsante del mouse vengono anche gestite da un gestore di input dedicato. Altre funzionalità di programmazione che si basano sulle azioni di pulsante del mouse, ad esempio input e associazioni di comandi, può richiamare i gestori per l'azione prima che sia esposta come un'azione di pulsante del mouse generale. Se questi input contrassegna le funzionalità di sistema di <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento come gestito, <xref:System.Windows.ContentElement.OnMouseUp%2A> non viene richiamato.  
  
 Se si utilizza questo gestore della classe per contrassegnare l'evento come gestito, si potrebbero avere un impatto gli eventi seguenti: <xref:System.Windows.ContentElement.MouseLeftButtonUp> e <xref:System.Windows.ContentElement.MouseRightButtonUp>. Uno di questi eventi può essere generato nell'elemento ricevente quando <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> viene ricevuto.  
  
 Se si contrassegna questo evento come gestito nella gestione delle classi, secondari vengono comunque generati; Tuttavia, passano lo stato gestito nei dati dell'evento. Se l'evento viene gestito nella gestione delle classi, i gestori di istanze per gli eventi secondari non vengono richiamati solo se si utilizza in modo esplicito <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> con `handledEventsToo` `true` per associare gestori. Gestori di classi anche non vengono richiamati a meno che non sono stati registrati con il <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma con `handledEventsToo` `true`. Gestendo <xref:System.Windows.ContentElement.OnMouseUp%2A>, si intende che la gestione delle classi di tutti i pulsanti del mouse possibili azioni. Questo comportamento potrebbe risultare indesiderato; Di conseguenza, prestare attenzione quando si utilizza questo metodo virtuale per contrassegnare gli eventi come gestito.  
  
 Tutti gli eventi specifici pulsante diretti dispone anche di una macchina * metodo. è consigliabile se si esegue l'override di questi gestori di classi specifiche pulsante potrebbero essere più appropriato.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.PreviewDrop" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.GiveFeedbackEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.KeyEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.KeyEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che sono stati premuti uno o più pulsanti del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato associato <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le azioni di pulsante del mouse vengono anche gestite da un gestore di input dedicato. Altre funzionalità di programmazione che si basano sulle azioni di pulsante del mouse, ad esempio input e associazioni di comandi, può richiamare i gestori per l'azione prima che sia esposta come un'azione di pulsante del mouse generale. Se questi input contrassegna le funzionalità di sistema di <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento come gestito, <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> non viene richiamato.  
  
 Se si utilizza questo gestore della classe per contrassegnare l'evento come gestito, si potrebbero avere un impatto gli eventi seguenti: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> e <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>. Uno di questi eventi possono essere generato su elemento ricevente quando <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> viene ricevuto.  
  
 Se si contrassegna questo evento come gestito nella gestione delle classi, secondari vengono comunque generati; Tuttavia, passano lo stato gestito nei dati dell'evento. Se l'evento viene gestito nella gestione delle classi, i gestori di istanze per gli eventi secondari non vengono richiamati solo se si utilizza in modo esplicito <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> con `handledEventsToo` `true` per associare gestori. Gestori di classi anche non vengono richiamati a meno che non sono stati registrati con il <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma con `handledEventsToo` `true`. Gestendo <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A>, si intende che la gestione delle classi di tutti i possibili pulsanti del mouse verso il basso le azioni. Questo comportamento potrebbe risultare indesiderato; Di conseguenza, prestare attenzione quando si utilizza questo metodo virtuale per contrassegnare gli eventi come gestito.  
  
 Tutti gli eventi specifici pulsante diretti dispone anche di una macchina * metodo. è consigliabile se si esegue l'override di questi gestori di classi specifiche pulsante potrebbero essere più appropriato.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che è stato premuto il pulsante sinistro del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> evento sembra una route di tunneling, ma in realtà viene trasferito in modo indiretto. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> è l'evento sottostante è tunneling e ogni <xref:System.Windows.ContentElement> lungo l'evento route utilizza la gestione delle identica per generare l'evento indirizzato diretto <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>. Sebbene sia possibile contrassegnare il <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> evento come gestito per scopi di questo elemento, lo stato gestito non viene trasmesso agli altri elementi lungo la route dell'evento. Tuttavia, potrebbe voler contrassegnare l'evento come gestito per evitare i gestori di istanze generici (quelli che non specificano `handledEventsToo`) da cui viene richiamato.  
  
 L'implementazione predefinita per la gestione degli eventi di mouse generale <xref:System.Windows.ContentElement> resta in attesa di <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> e lo converte in un evento locale appropriato. Se si desidera eseguire l'override di questa logica, è necessario creare una classe derivata. Nel costruttore statico della classe derivata, registrare un gestore di classe alternativa per <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. Non è possibile modificare il comportamento di gestione del mouse <xref:System.Windows.ContentElement> eseguendo l'override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>.  
  
 In alternativa, è possibile eseguire l'override di questo metodo per modificare una gestione degli eventi per uno stato specifico del mouse. Se si sceglie di chiamare l'implementazione di base dipende dallo scenario. La mancata chiamata base disabilita la gestione di input predefinito per tale evento del mouse in classi predecessore che prevedono anche per richiamare <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>. Ad esempio, è possibile derivare da <xref:System.Windows.Controls.Button> ed eseguire l'override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> nella classe derivata senza chiamare l'implementazione di base; tuttavia, questo override disabilita il <xref:System.Windows.Controls.Primitives.ButtonBase.Click> evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che è stato rilasciato il pulsante sinistro del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> evento sembra una route di tunneling, ma in realtà viene trasferito in modo indiretto. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> è l'evento sottostante è tunneling e ogni <xref:System.Windows.ContentElement> lungo l'evento route utilizza la gestione delle identica per generare l'evento indirizzato diretto <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>. Sebbene sia possibile contrassegnare il <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> evento come gestito per scopi di questo elemento, lo stato gestito non viene trasmesso agli altri elementi lungo la route dell'evento. Tuttavia, potrebbe voler contrassegnare l'evento come gestito per evitare i gestori di istanze generici (quelli che non specificano `handledEventsToo`) da cui viene richiamato.  
  
 L'implementazione predefinita per la gestione degli eventi di mouse generale <xref:System.Windows.ContentElement> resta in attesa di <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> e lo converte in un evento locale appropriato. Se si desidera eseguire l'override di questa logica, è necessario creare una classe derivata. Nel costruttore statico della classe derivata, registrare un gestore di classe alternativa per <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. Non è possibile modificare il comportamento di gestione del mouse <xref:System.Windows.ContentElement> eseguendo l'override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che è stato premuto il pulsante destro del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> evento sembra una route di tunneling, ma in realtà viene trasferito in modo indiretto. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> è l'evento sottostante è tunneling e ogni <xref:System.Windows.ContentElement> lungo l'evento route utilizza la gestione delle identica per generare l'evento indirizzato diretto <xref:System.Windows.ContentElement.MouseRightButtonDown>. Sebbene sia possibile contrassegnare il <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> evento come gestito per scopi di questo elemento, lo stato gestito non viene trasmesso agli altri elementi lungo la route dell'evento. Tuttavia, potrebbe voler contrassegnare l'evento come gestito per evitare i gestori di istanze generici (quelli che non specificano `handledEventsToo`) da cui viene richiamato.  
  
 L'implementazione predefinita per la gestione degli eventi di mouse generale <xref:System.Windows.ContentElement> resta in attesa di <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> e lo converte in un evento locale appropriato. Se si desidera eseguire l'override di questa logica, è necessario creare una classe derivata. Nel costruttore statico della classe derivata, registrare un gestore di classe alternativa per <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. Non è possibile modificare il comportamento di gestione del mouse <xref:System.Windows.ContentElement> eseguendo l'override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>.  
  
 In alternativa, è possibile eseguire l'override di questo metodo per modificare una gestione degli eventi per uno stato specifico del mouse. Se si sceglie di chiamare l'implementazione di base dipende dallo scenario. La mancata chiamata base disabilita la gestione di input predefinito per tale evento del mouse in classi predecessore che prevedono anche per richiamare <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>. Ad esempio, è possibile derivare da <xref:System.Windows.Controls.Control> ed eseguire l'override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> nella classe derivata senza chiamare la base; tuttavia, questo override disabilita i servizi dal menu di scelta del controllo, che fanno parte di <xref:System.Windows.Controls.Control> il comportamento predefinito.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che è stato rilasciato il pulsante destro del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> evento sembra una route di tunneling, ma in realtà viene trasferito in modo indiretto. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> è l'evento sottostante è tunneling e ogni <xref:System.Windows.ContentElement> lungo l'evento route utilizza la gestione delle identica per generare l'evento indirizzato diretto <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>. Sebbene sia possibile contrassegnare il <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> evento come gestito per scopi di questo elemento, lo stato gestito non viene trasmesso agli altri elementi lungo la route dell'evento. Tuttavia, potrebbe voler contrassegnare l'evento come gestito per evitare i gestori di istanze generici (quelli che non specificano `handledEventsToo`) da cui viene richiamato.  
  
 L'implementazione predefinita per la gestione degli eventi di mouse generale <xref:System.Windows.ContentElement> resta in attesa di <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> e lo converte in un evento locale appropriato. Se si desidera eseguire l'override di questa logica, è necessario creare una classe derivata. Nel costruttore statico della classe derivata, registrare un gestore di classe alternativa per <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. Non è possibile modificare il comportamento di gestione del mouse <xref:System.Windows.ContentElement> eseguendo l'override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. Nei dati degli eventi è indicato che stato rilasciato uno o più pulsanti del mouse.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le azioni di pulsante del mouse vengono anche gestite da un gestore di input dedicato. Altre funzionalità di programmazione che si basano sulle azioni di pulsante del mouse, ad esempio input e associazioni di comandi, può richiamare i gestori per l'azione prima che sia esposta come un'azione di pulsante del mouse generale. Se questi input contrassegna le funzionalità di sistema di <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento come gestito, <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> non viene richiamato.  
  
 Se si utilizza questo gestore della classe per contrassegnare l'evento come gestito, si potrebbero avere un impatto gli eventi seguenti: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> e <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>. Uno di questi eventi può essere generato nell'elemento ricevente quando <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> viene ricevuto.  
  
 Se si contrassegna questo evento come gestito nella gestione delle classi, secondari vengono comunque generati; Tuttavia, passano lo stato gestito nei dati dell'evento. Se l'evento viene gestito nella gestione delle classi, i gestori di istanze per gli eventi secondari non vengono richiamati solo se si utilizza in modo esplicito <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> con `handledEventsToo` `true` per associare gestori. Gestori di classi anche non vengono richiamati a meno che non sono stati registrati con il <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma con `handledEventsToo` `true`. Gestendo <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A>, si intende che la gestione delle classi di tutti i pulsanti del mouse possibili azioni. Questo comportamento potrebbe risultare indesiderato; Di conseguenza, prestare attenzione quando si utilizza questo metodo virtuale per contrassegnare gli eventi come gestito.  
  
 Tutti gli eventi specifici pulsante diretti dispone anche di una macchina * metodo. è consigliabile se si esegue l'override di questi gestori di classi specifiche pulsante potrebbero essere più appropriato.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.QueryContinueDragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusDownEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.ContentElement.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato<see cref="E:System.Windows.ContentElement.PreviewTouchDown" /> che si verifica quando un tocco preme l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> in una classe derivata per gestire il <xref:System.Windows.ContentElement.PreviewTouchDown> evento. Assicurarsi di chiamare la classe base <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> metodo in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewTouchMove" /> che viene generato quando un tocco si sposta all'interno di questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> in una classe derivata per gestire il <xref:System.Windows.ContentElement.PreviewTouchMove> evento. Assicurarsi di chiamare la classe base <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> metodo in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewTouchUp" /> che viene generato quando un tocco viene rilasciato all'interno di questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> in una classe derivata per gestire il <xref:System.Windows.ContentElement.PreviewTouchUp> evento. Assicurarsi di chiamare la classe base <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> metodo in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected internal virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.QueryContinueDragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected internal virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusDownEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusDown" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Richiamato quando viene generato un evento associato <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> non gestito da questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 Lo scopo di questo metodo è simile a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Contrassegnare l'evento come gestito è comunque utile per la prevenzione dei gestori di istanze comuni (quelli che non si specifica `handledEventsToo`) da cui viene richiamato.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Richiamato quando viene generato un evento associato <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> non gestito da questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 Lo scopo di questo metodo è simile a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Contrassegnare l'evento come gestito è comunque utile per la prevenzione dei gestori di istanze comuni (quelli che non si specifica `handledEventsToo`) da cui viene richiamato.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusMove" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusUp" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato<see cref="E:System.Windows.ContentElement.TouchDown" /> che si verifica quando un tocco preme all'interno dell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.OnTouchDown%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.ContentElement.OnTouchDown%2A> in una classe derivata per gestire il <xref:System.Windows.ContentElement.TouchDown> evento. Assicurarsi di chiamare la classe base <xref:System.Windows.ContentElement.OnTouchDown%2A> metodo in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato <see cref="E:System.Windows.ContentElement.TouchEnter" /> che si verifica quando un tocco si sposta dall'esterno all'interno dei limiti dell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.OnTouchEnter%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.ContentElement.OnTouchEnter%2A> in una classe derivata per gestire il <xref:System.Windows.ContentElement.TouchEnter> evento. Assicurarsi di chiamare la classe base <xref:System.Windows.ContentElement.OnTouchEnter%2A> metodo in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato<see cref="E:System.Windows.ContentElement.TouchLeave" /> che si verifica quando un tocco si sposta dall'interno all'esterno dei limiti dell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.OnTouchLeave%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.ContentElement.OnTouchLeave%2A> in una classe derivata per gestire il <xref:System.Windows.ContentElement.TouchLeave> evento. Assicurarsi di chiamare la classe base <xref:System.Windows.ContentElement.OnTouchLeave%2A> metodo in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato <see cref="E:System.Windows.ContentElement.TouchMove" /> che viene generato quando un tocco si sposta all'interno di questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.OnTouchMove%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.ContentElement.OnTouchMove%2A> in una classe derivata per gestire il <xref:System.Windows.ContentElement.TouchMove> evento. Assicurarsi di chiamare la classe base <xref:System.Windows.ContentElement.OnTouchMove%2A> metodo in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato <see cref="E:System.Windows.ContentElement.TouchUp" /> che viene generato quando un tocco viene rilasciato all'interno di questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.OnTouchUp%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.ContentElement.OnTouchUp%2A> in una classe derivata per gestire il <xref:System.Windows.ContentElement.TouchUp> evento. Assicurarsi di chiamare la classe base <xref:System.Windows.ContentElement.OnTouchUp%2A> metodo in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">Direzione dell'attraversamento dello stato attivo richiesto.</param>
        <summary>Se sottoposto a override in una classe derivata, restituisce l'elemento che riceverebbe lo stato attivo per una direzione di attraversamento dello stato attivo specificata, senza effettivamente spostare lo stato attivo su tale elemento.</summary>
        <returns>Elemento che avrebbe ricevuto lo stato attivo se <see cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> fosse stato effettivamente richiamato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'implementazione predefinita di questo metodo in questa classe è incompleta e restituisce sempre `null`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di trascinamento sottostante per cui questo elemento rappresenta la destinazione del trascinamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewDragEnter> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.PreviewDragEnter> evento sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewDragEnterEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.DragEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.DragEnter>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewDragEnter%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewDragEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di trascinamento sottostante per cui l'elemento rappresenta l'origine del trascinamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewDragLeave> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.PreviewDragLeave> evento sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewDragLeaveEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.DragEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.DragLeave>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewDragLeave%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewDragLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di trascinamento sottostante per il quale l'elemento rappresenta la destinazione del rilascio potenziale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewDragOver> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.PreviewDragOver> evento sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewDragOverEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.DragEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.DragOver>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewDragOver%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewDragOver" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di rilascio sottostante con questo elemento come destinazione del rilascio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewDrop> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.PreviewDrop> evento sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewDropEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.DragEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.Drop>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewDrop%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewDrop" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando inizia un'operazione di trascinamento e rilascio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.PreviewGiveFeedback> evento consente all'origine di un evento di trascinamento di modificare l'aspetto del puntatore del mouse, per fornire l'utente indicazioni visive durante un'operazione di trascinamento e rilascio.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewGiveFeedback> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.PreviewGiveFeedback> evento sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewGiveFeedbackEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.GiveFeedback>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewGiveFeedback" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stato attivo della tastiera si trova sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poiché questo evento viene utilizzato il routing di tunneling, l'elemento che ha lo stato attivo potrebbe essere un elemento figlio anziché l'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo che ha lo stato attivo.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.GotKeyboardFocus>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica alla pressione di un tasto quando lo stato attivo della tastiera si trova sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestione della chiave interagisce con altre funzionalità di piattaforma, ad esempio l'esecuzione di comandi e il testo di composizione. Il <xref:System.Windows.ContentElement.KeyDown> tratta di un evento di input di testo di basso livello che potrebbe non comportarsi come previsto su determinati controlli. Questo avviene perché alcuni controlli sono di composizione del controllo o la gestione della classe che fornisce una versione di livello superiore di testo, la gestione di input e gli eventi correlati.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewKeyDown> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.PreviewKeyDown> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewKeyDownEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.KeyDown>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewKeyDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewKeyDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al rilascio di un tasto quando lo stato attivo della tastiera si trova sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestione della chiave interagisce con altre funzionalità di piattaforma, ad esempio l'esecuzione di comandi e il testo di composizione. Il <xref:System.Windows.ContentElement.KeyUp> tratta di un evento di input di testo di basso livello che potrebbe non comportarsi come previsto su determinati controlli. Questo avviene perché alcuni controlli sono di composizione del controllo o la gestione della classe che fornisce una versione di livello superiore di testo, la gestione di input e gli eventi correlati. Per informazioni dettagliate, consultare la documentazione per i singoli controlli.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewKeyUp> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.PreviewKeyUp> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewKeyUpEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.KeyUp>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewKeyUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewKeyUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stato attivo della tastiera non si trova più sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poiché questo evento viene utilizzato il routing di tunneling, l'elemento perde lo stato attivo potrebbe essere un elemento figlio anziché l'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo che perde lo stato attivo.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.LostKeyboardFocus>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica alla pressione di qualsiasi pulsante del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewMouseDown> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.PreviewMouseDown> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Il <xref:System.Windows.ContentElement.PreviewMouseDown> evento viene generato spesso insieme al <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> o <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>, che corrispondono alla pressione di uno dei due pulsanti standard. <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> e <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> sono anche gli eventi indirizzati, ma sono eventi indirizzati diretti e viene generato l'evento appropriato pulsante specifico quando il <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento raggiunge questo elemento lungo la route dell'evento. Vedere la sezione Osservazioni per <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> o <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>.  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewMouseDownEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.MouseDown>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewMouseDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica alla pressione del pulsante sinistro del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sebbene questo [indirizzato Cenni preliminari sugli eventi](~/docs/framework/wpf/advanced/routed-events-overview.md) sembri seguire una route di tunneling tramite una struttura ad albero, in realtà è un evento indirizzato diretto generato e rigenerato nella struttura ad albero da ogni <xref:System.Windows.ContentElement>.  
  
 Questo evento è uno dei vari eventi correlati che indicano le specifiche del pulsante del mouse di un oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento, che è un evento che viene elaborato da ogni elemento lungo la route di un evento.  
  
 Gli argomenti dell'evento espongono gli argomenti di sottostante <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento. Se tale evento è contrassegnato come gestito lungo la route dell'evento, vengono comunque generati eventi specifici del pulsante del mouse. Tuttavia, è necessario aggiungere i gestori di eventi specifici del pulsante del mouse in modo esplicito chiamando <xref:System.Windows.ContentElement.AddHandler%2A>, con l'opzione per gestire eventi che sono già contrassegnati come gestito, in modo da essere listener dell'evento.  
  
 Concettualmente, pensare a questo evento (e altri eventi del pulsante del mouse su <xref:System.Windows.ContentElement>) da un mouse "servizio" (con la definizione del servizio fornita dalla <xref:System.Windows.Input.Mouse> classe). L'evento aggiunge la comodità di non dover controllare gli stati del pulsante del mouse (da sinistra a destra, giù) degli eventi del mouse originale nei dati dell'evento. Per scenari più avanzati, ad esempio la verifica degli stati dei pulsanti non standard, potrebbe essere necessario utilizzare il [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sul <xref:System.Windows.Input.Mouse> classe anziché quelli su <xref:System.Windows.ContentElement>.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al rilascio del pulsante sinistro del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sebbene questo [indirizzato Cenni preliminari sugli eventi](~/docs/framework/wpf/advanced/routed-events-overview.md) sembri seguire una route di tunneling tramite una struttura ad albero, in realtà è un evento indirizzato diretto generato e rigenerato nella struttura ad albero da ogni <xref:System.Windows.ContentElement>.  
  
 Questo evento è uno dei vari eventi correlati che indicano le specifiche del pulsante del mouse di un oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento, che è un evento che viene elaborato da ogni elemento lungo la route di un evento.  
  
 Gli argomenti dell'evento espongono gli argomenti di sottostante <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento. Se tale evento è contrassegnato come gestito lungo la route dell'evento, vengono comunque generati eventi specifici del pulsante del mouse. Tuttavia, è necessario aggiungere i gestori di eventi specifici del pulsante del mouse in modo esplicito chiamando <xref:System.Windows.ContentElement.AddHandler%2A>, con l'opzione per gestire eventi che sono già contrassegnati come gestito, in modo da essere listener dell'evento.  
  
 Concettualmente, pensare a questo evento (e altri eventi del pulsante del mouse su <xref:System.Windows.ContentElement>) da un mouse "servizio" (con la definizione del servizio fornita dalla <xref:System.Windows.Input.Mouse> classe). L'evento aggiunge la comodità di non dover controllare gli stati del pulsante del mouse (da sinistra a destra, giù) degli eventi del mouse originale nei dati dell'evento. Per scenari più avanzati, ad esempio la verifica degli stati dei pulsanti non standard, potrebbe essere necessario utilizzare il [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sul <xref:System.Windows.Input.Mouse> classe anziché quelli su <xref:System.Windows.ContentElement>.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito allo spostamento del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento si verifica quando il puntatore del mouse entra innanzitutto nei limiti dell'elemento, e anche quando il puntatore del mouse viene spostato, rimanendo comunque entro i limiti dell'elemento.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewMouseMove> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.PreviewMouseMove> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewMouseMoveEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.MouseMove>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewMouseMove%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewMouseMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica alla pressione del pulsante destro del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sebbene questo [indirizzato Cenni preliminari sugli eventi](~/docs/framework/wpf/advanced/routed-events-overview.md) sembri seguire una route di tunneling tramite una struttura ad albero, in realtà è un evento indirizzato diretto generato e rigenerato nella struttura ad albero da ogni <xref:System.Windows.ContentElement>.  
  
 Questo evento è uno dei vari eventi correlati che indicano le specifiche del pulsante del mouse di un oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento, che è un evento che viene elaborato da ogni elemento lungo la route di un evento.  
  
 Gli argomenti dell'evento espongono gli argomenti di sottostante <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento. Se tale evento è contrassegnato come gestito lungo la route dell'evento, vengono comunque generati eventi specifici del pulsante del mouse. Tuttavia, è necessario aggiungere i gestori di eventi specifici del pulsante del mouse in modo esplicito chiamando <xref:System.Windows.ContentElement.AddHandler%2A>, con l'opzione per gestire eventi che sono già contrassegnati come gestito, in modo da essere listener dell'evento.  
  
 Concettualmente, pensare a questo evento (e altri eventi del pulsante del mouse su <xref:System.Windows.ContentElement>) da un mouse "servizio" (con la definizione del servizio fornita dalla <xref:System.Windows.Input.Mouse> classe). L'evento aggiunge la comodità di non dover controllare gli stati del pulsante del mouse (da sinistra a destra, giù) degli eventi del mouse originale nei dati dell'evento. Per scenari più avanzati, ad esempio la verifica degli stati dei pulsanti non standard, potrebbe essere necessario utilizzare il [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sul <xref:System.Windows.Input.Mouse> classe anziché quelli su <xref:System.Windows.ContentElement>.  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al rilascio del pulsante destro del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sebbene questo [indirizzato Cenni preliminari sugli eventi](~/docs/framework/wpf/advanced/routed-events-overview.md) sembri seguire una route di tunneling tramite una struttura ad albero, in realtà è un evento indirizzato diretto generato e rigenerato nella struttura ad albero da ogni <xref:System.Windows.ContentElement>.  
  
 Questo evento è uno dei vari eventi correlati che indicano le specifiche del pulsante del mouse di un oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento, che è un evento che viene elaborato da ogni elemento lungo la route di un evento.  
  
 Gli argomenti dell'evento espongono gli argomenti di sottostante <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento. Se tale evento è contrassegnato come gestito lungo la route dell'evento, vengono comunque generati eventi specifici del pulsante del mouse. Tuttavia, è necessario aggiungere i gestori di eventi specifici del pulsante del mouse in modo esplicito chiamando <xref:System.Windows.ContentElement.AddHandler%2A>, con l'opzione per gestire eventi che sono già contrassegnati come gestito, in modo da essere listener dell'evento.  
  
 Concettualmente, pensare a questo evento (e altri eventi del pulsante del mouse su <xref:System.Windows.ContentElement>) da un mouse "servizio" (con la definizione del servizio fornita dalla <xref:System.Windows.Input.Mouse> classe). L'evento aggiunge la comodità di non dover controllare gli stati del pulsante del mouse (da sinistra a destra, giù) degli eventi del mouse originale nei dati dell'evento. Per scenari più avanzati, ad esempio la verifica degli stati dei pulsanti non standard, potrebbe essere necessario utilizzare il [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sul <xref:System.Windows.Input.Mouse> classe anziché quelli su <xref:System.Windows.ContentElement>.  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al rilascio di qualsiasi pulsante del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewMouseUp> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.PreviewMouseUp> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Il <xref:System.Windows.ContentElement.PreviewMouseUp> evento viene generato spesso insieme al <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> o <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>, che corrispondono alla pressione di uno dei due pulsanti standard. <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> e <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> sono anche gli eventi indirizzati, ma sono eventi indirizzati diretti e viene generato l'evento appropriato pulsante specifico quando il <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento raggiunge questo elemento lungo la route dell'evento. Vedere la sezione Osservazioni per <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> o <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>.  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewMouseUpEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.MouseUp>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewMouseUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito alla rotazione della rotellina del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lo stato attivo o il mouse capture hanno la precedenza su dove è il puntatore del mouse; Pertanto, se si riceve questo evento da un elemento con lo stato attivo o acquisito, il puntatore del mouse potrebbe effettivamente trovarsi su un altro elemento.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewMouseMove> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.PreviewMouseMove> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewMouseWheelEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.MouseWheel>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewMouseWheel" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito alla modifica dello stato della tastiera o del pulsante del mouse durante un'operazione di trascinamento e rilascio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> evento consente all'origine del trascinamento di dichiarare se l'operazione di trascinamento e rilascio deve essere annullata.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> evento sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewQueryContinueDragEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.QueryContinueDrag>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito alla pressione del pulsante dello stilo quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewStylusButtonDown> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.PreviewStylusButtonDown> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewStylusButtonDownEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.StylusButtonDown>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito al rilascio del pulsante dello stilo quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewStylusButtonUp> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.PreviewStylusButtonUp> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewStylusButtonUpEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.StylusButtonUp>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo tocca il digitalizzatore mentre è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewStylusDown> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.PreviewStylusDown> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewStylusDownEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.StylusDown>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewStylusDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewStylusDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo viene spostato su un elemento senza effettivamente toccare il digitalizzatore.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewStylusInAirMove> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.PreviewStylusInAirMove> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewStylusInAirMoveEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.StylusInAirMove>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo è sufficientemente vicino al digitalizzatore per poter essere rilevato, mentre è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewStylusInRange> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.PreviewStylusInRange> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewStylusInRangeEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.StylusInRange>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewStylusInRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo viene spostato mentre si trova sull'elemento. Lo stilo deve essere spostato mentre è rilevato dal digitalizzatore per generare questo evento. In caso contrario, viene generato l'evento <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewStylusMove> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.PreviewStylusMove> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewStylusMoveEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.StylusMove>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewStylusMove%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewStylusMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo è troppo lontano dal digitalizzatore per poter essere rilevato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.StylusOutOfRange>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un utente esegue uno dei vari movimenti con stilo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per informazioni sui movimenti dello stilo, vedere <xref:System.Windows.Input.SystemGesture>.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewStylusSystemGestureEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.StylusSystemGesture>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente solleva lo stilo dal digitalizzatore mentre lo stilo è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewStylusDown> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.PreviewStylusDown> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewStylusUpEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.StylusUp>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewStylusUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewStylusUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito all'input di testo per l'elemento in modo indipendente dalla periferica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.PreviewTextInput> evento consente a un componente o applicazione in ascolto dell'input di testo in modo indipendente dal dispositivo. La tastiera è il mezzo principale di <xref:System.Windows.ContentElement.PreviewTextInput>; ma riconoscimento grafia e altri dispositivi di input possono essere generato anche <xref:System.Windows.ContentElement.PreviewTextInput>.  
  
 A causa di combinazioni di tasti, predefiniti o tramite input method editor, ovvero gli eventi principali più possono generare un solo evento di input di testo.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewTextInput> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.PreviewTextInput> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewTextInputEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.TextInput>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewTextInput%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewTextInput" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un dito tocca lo schermo mentre si trova sopra l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, il <xref:System.Windows.ContentElement.PreviewTouchDown> e <xref:System.Windows.ContentElement.TouchDown> non si verificano fino a quando un dito tocca lo schermo e sposta. Premere un dito sullo schermo e azienda senza spostarlo provoca la pressione prolungata di un <xref:System.Windows.Input.Stylus>. Il comportamento la pressione prolungata è equivalente al pulsante destro del mouse.  
  
 Affinché il <xref:System.Windows.ContentElement.PreviewTouchDown> e <xref:System.Windows.ContentElement.TouchDown> degli eventi non appena un dito tocca lo schermo, impostare il <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> proprietà associata `false` per questo elemento.  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewTouchDownEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.TouchDown>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewTouchDown" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene spostato un dito sullo schermo mentre si trova sopra l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewTouchMoveEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.TouchMove>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewTouchMove" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene sollevato un dito dallo schermo mentre si trova sopra l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewTouchUpEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.ContentElement.TouchUp>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewTouchUp" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito alla modifica dello stato della tastiera o del pulsante del mouse durante un'operazione di trascinamento e rilascio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.QueryContinueDrag> evento consente all'origine del trascinamento di determinare se l'operazione di trascinamento e rilascio deve essere annullata.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.QueryContinueDrag> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.QueryContinueDrag> evento sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.QueryContinueDragEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewQueryContinueDrag>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnQueryContinueDrag%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.QueryContinueDrag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene richiesta la visualizzazione del cursore. L'evento viene generato per un elemento ogni volta che il puntatore del mouse viene spostato, perché ciò indica che l'oggetto cursore deve essere modificato in base alla nuova posizione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.QueryCursor> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.QueryCursor> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Il cursore a cui si fa riferimento con questo nome di evento non è necessariamente il cursore di testo (talvolta noto come punto di inserimento). Al contrario, il cursore in questo contesto è l'oggetto che dichiara la visualizzazione su schermo grafica correlata a vari possibili dispositivi di input o i concetti di programmazione di Windows. Tale oggetto è rappresentato dal <xref:System.Windows.Input.Cursor> classe in WPF. Il sistema di input di WPF consente di modificare questo cursore quando rappresenta la posizione sullo schermo del puntatore del mouse. È possibile utilizzare i valori predefiniti di <xref:System.Windows.Input.Cursors> enumerazione, oppure è possibile dichiarare un cursore personalizzato come file di immagine.  
  
 In attesa per il <xref:System.Windows.ContentElement.QueryCursor> evento non è una tecnica efficace per la gestione del cursore. Al contrario, ogni elemento deve definire il comportamento del cursore con <xref:System.Windows.FrameworkContentElement.Cursor%2A> e <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>. È consigliabile basarsi solo su <xref:System.Windows.ContentElement.QueryCursor> se non si utilizzano gli elementi di base a livello di framework WPF o in circostanze straordinarie in cui la definizione del comportamento del cursore in base a ciascun elemento non soddisfa le proprie esigenze. Per ulteriori informazioni sull'implementazione del funzionamento del cursore in risposta a <xref:System.Windows.ContentElement.QueryCursor>, vedere <xref:System.Windows.Input.QueryCursorEventHandler>.  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.QueryCursorEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   Non vi è alcun evento di tunneling corrispondente definito.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnQueryCursor%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.QueryCursor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.RoutedEventArgs" /> che contiene i dati degli eventi e identifica inoltre l'evento da generare.</param>
        <summary>Genera un evento indirizzato specifico. L'oggetto <see cref="T:System.Windows.RoutedEvent" /> da generare è identificato all'interno dell'istanza di <see cref="T:System.Windows.RoutedEventArgs" /> fornita (come proprietà <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> di tali dati degli eventi).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `e` parametro è tipizzato come tipo di base comune per tutti i dati dell'evento indirizzato; tuttavia, i dati dell'evento devono essere specificati come il tipo di dati evento più specifico che è disponibile per l'evento viene generato perché <xref:System.Windows.RoutedEventArgs> contengono le classi derivate di proprietà dei dati specifiche effettive previste per l'evento specifico quando viene generato.  
  
 <xref:System.Windows.RoutedEventArgs> non è solo le proprietà di stato per l'evento. vengono inoltre identificati evento indirizzato da generare. Questo modello di generazione di eventi e i dati dell'evento indirizzato sono entrambi diversi da [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] gli eventi e classi di dati, che in genere contengono solo le proprietà correlate all'evento.  
  
   
  
## Examples  
 Nell'esempio seguente crea i dati dell'evento, aggiunge l'identificatore dell'evento ai dati e quindi utilizza l'istanza di dati di evento per generare un evento indirizzato personalizzato.  
  
 [!code-csharp[ContentElementsSmorgasbord#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#raiseevent)]
 [!code-vb[ContentElementsSmorgasbord#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#raiseevent)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia tutti i dispositivi a tocco acquisiti dall'elemento.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia l'input del mouse, se questo elemento l'ha acquisito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se questo elemento non conteneva l'acquisizione, questo metodo non ha alcun effetto. È consigliabile verificare il valore di <xref:System.Windows.ContentElement.IsMouseCaptured%2A> prima di chiamare questo metodo.  
  
   
  
## Examples  
 Il seguente gestore acquisisce o rilascia il mouse capture in base a stati dei pulsanti del mouse. Nell'esempio viene illustrato come usare i movimenti del mouse acquisiti per scopi diversi di spostare il puntatore del mouse nel [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].  
  
 [!code-csharp[ContentElementsSmorgasbord#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[ContentElementsSmorgasbord#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia l'input dello stilo, se questo elemento lo ha acquisito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se questo elemento non conteneva l'acquisizione, questo metodo non ha alcun effetto. È consigliabile verificare il valore di <xref:System.Windows.ContentElement.IsStylusCaptured%2A> prima di chiamare questo metodo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">Dispositivo da rilasciare.</param>
        <summary>Tenta di rilasciare il dispositivo a tocco specificato dall'elemento.</summary>
        <returns>
          <see langword="true" /> se il dispositivo a tocco viene rilasciato; in caso contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="touchDevice" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identificatore dell'evento indirizzato al quale è associato il gestore.</param>
        <param name="handler">Implementazione del gestore specifico da rimuovere dalla raccolta di gestori eventi per questo elemento.</param>
        <summary>Rimuove il gestore dell'evento indirizzato specificato da questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lo scenario più comune per l'utilizzo di questo [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] quando si implementa il [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] evento "wrapper" che è associata a un evento indirizzato personalizzato, in particolare quando si implementa la logica di "Rimuovi" per gestori di [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] livello. Nell'esempio che segue questa sezione viene illustrato questo scenario osservazioni.  
  
 Chiamare questo metodo non ha alcun effetto se si sono verificati senza gestori registrati con criteri che corrispondono ai parametri di input per la chiamata al metodo.  
  
 Se più di un gestore è associato che soddisfano i criteri, solo il primo gestore eventi viene rimosso l'archivio del gestore. Questo comportamento è coerente con [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] comportamento del `-=` operatore.  
  
 Né `routedEvent` né `handler` potrebbe essere `null`. Il tentativo di fornire il valore come `null` genererà un'eccezione.  
  
 Questo metodo ignora la `handledEventsToo` le informazioni sui parametri, è disponibile se il gestore è stato inizialmente aggiunto con il <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma che consente la gestione di eventi già gestiti. Dei tipi di gestore è stato rimosso.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un valore che indica se i processi di serializzazione devono serializzare il contenuto della proprietà <see cref="P:System.Windows.ContentElement.CommandBindings" /> nelle istanze di questa classe.</summary>
        <returns>
          <see langword="true" /> se il valore della proprietà <see cref="P:System.Windows.ContentElement.CommandBindings" /> deve essere serializzato; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verrà restituito `true` se <xref:System.Windows.ContentElement.CommandBindings%2A> è impostato localmente.  
  
 Questo `ShouldSerialize` metodo viene fornito perché il <xref:System.Windows.UIElement.CommandBindings%2A> proprietà non dispone di un valore predefinito semplice. Questo metodo indica se la proprietà è stato modificato rispetto al valore predefinito. È in genere richiamare questo metodo se si sviluppa una finestra di progettazione o controllo personalizzato che includa un <xref:System.Windows.UIElement>.  
  
 Per ulteriori informazioni, vedere [la definizione di valori predefiniti con i metodi ShouldSerialize e Reset](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un valore che indica se i processi di serializzazione devono serializzare il contenuto della proprietà <see cref="P:System.Windows.ContentElement.InputBindings" /> nelle istanze di questa classe.</summary>
        <returns>
          <see langword="true" /> se il valore della proprietà <see cref="P:System.Windows.ContentElement.InputBindings" /> deve essere serializzato; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verrà restituito `true` se <xref:System.Windows.ContentElement.InputBindings%2A> è impostato localmente.  
  
 Questo `ShouldSerialize` metodo viene fornito perché il <xref:System.Windows.UIElement.InputBindings%2A> proprietà non dispone di un valore predefinito semplice. Questo metodo indica se la proprietà è stato modificato rispetto al valore predefinito. È in genere richiamare questo metodo se si sviluppa una finestra di progettazione o controllo personalizzato che includa un <xref:System.Windows.UIElement>.  
  
 Per ulteriori informazioni, vedere [la definizione di valori predefiniti con i metodi ShouldSerialize e Reset](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito alla pressione del pulsante dello stilo quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.StylusButtonDown> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.StylusButtonDown> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.StylusButtonDownEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewStylusButtonDown>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnStylusButtonDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.StylusButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito al rilascio del pulsante dello stilo quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.StylusButtonUp> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.StylusButtonUp> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.StylusButtonUpEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewStylusButtonUp>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnStylusButtonUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.StylusButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito al tocco del digitalizzatore con lo stilo quando lo stilo è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.StylusDown> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.StylusDown> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.StylusDownEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewStylusDown>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnStylusDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.StylusDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo viene spostato all'interno dei limiti dell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.StylusEnter> è un [indirizzato Cenni preliminari sugli eventi](~/docs/framework/wpf/advanced/routed-events-overview.md) che utilizza una strategia di routing di gestione degli eventi diretta. Gli eventi indirizzati direttamente non vengono generati una route; al contrario, vengono gestiti nello stesso elemento in cui vengono generati. Tuttavia, consentono di altri aspetti del comportamento dell'evento indirizzato, ad esempio i trigger di evento negli stili.  
  
 Sebbene <xref:System.Windows.ContentElement.StylusEnter> rilevi quando lo stilo entra nell'area di un elemento, questo evento ulteriori letteralmente che i <xref:System.Windows.ContentElement.IsStylusOver%2A> modificato dal valore della proprietà `false` a `true` per questo elemento.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.StylusEnter> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.StylusEnter> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.StylusEnterEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnStylusEnter%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.StylusEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo viene spostato su un elemento senza effettivamente toccare il digitalizzatore.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.StylusInAirMove> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.StylusInAirMove> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.StylusInAirMoveEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewStylusInAirMove>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnStylusInAirMove%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.StylusInAirMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo è sufficientemente vicino al digitalizzatore per poter essere rilevato, mentre è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.StylusInRange> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.StylusInRange> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.StylusInRangeEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewStylusInRange>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnStylusInRange%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.StylusInRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo viene spostato all'esterno dei limiti dell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.StylusLeave> è un [indirizzato Cenni preliminari sugli eventi](~/docs/framework/wpf/advanced/routed-events-overview.md) che utilizza una strategia di routing di gestione degli eventi diretta. Gli eventi indirizzati direttamente non vengono generati una route; al contrario, vengono gestiti nello stesso elemento in cui vengono generati. Tuttavia, consentono di altri aspetti del comportamento dell'evento indirizzato, ad esempio i trigger di evento negli stili.  
  
 Sebbene <xref:System.Windows.ContentElement.StylusLeave> rilevi quando lo stilo esce dai limiti di un elemento, questo evento più letteralmente che i <xref:System.Windows.ContentElement.IsStylusOver%2A> modificato dal valore della proprietà `true` a `false` per questo elemento.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.StylusLeave> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.StylusLeave> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.StylusLeaveEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnStylusLeave%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.StylusLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo viene spostato sull'elemento. Lo stilo deve essere spostato mentre è sul digitalizzatore per generare l'evento. altrimenti viene generato l'evento <see cref="E:System.Windows.ContentElement.StylusInAirMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.StylusMove> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.StylusMove> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.StylusMoveEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewStylusMove>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnStylusMove%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.StylusMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo è troppo lontano dal digitalizzatore per poter essere rilevato, mentre è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.StylusOutOfRange> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.StylusOutOfRange> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.StylusOutOfRangeEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewStylusOutOfRange>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnStylusOutOfRange%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.StylusOutOfRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un utente esegue uno dei vari movimenti con stilo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni sui movimenti dello stilo, vedere <xref:System.Windows.Input.SystemGesture>.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.StylusSystemGesture> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.StylusSystemGesture> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.StylusSystemGestureEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewStylusSystemGesture>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnStylusSystemGesture%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.StylusSystemGesture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente solleva lo stilo dal digitalizzatore mentre è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.StylusUp> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.StylusUp> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.StylusUpEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewStylusUp>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnStylusUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.StylusUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito all'input di testo per l'elemento in modo indipendente dalla periferica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Questo evento potrebbe già essere contrassegnato come gestito dalle implementazioni interne di controlli compositi. Vedere la sezione Osservazioni seguente.  
  
 Il <xref:System.Windows.ContentElement.TextInput> evento sia già contrassegnato come gestito dalle implementazioni interne di controlli compositi. Ad esempio, un <xref:System.Windows.Controls.TextBox> è un controllo composito in cui il <xref:System.Windows.ContentElement.TextInput> evento è già contrassegnato come gestito; all'interno la composizione. Controlli eseguire questa operazione perché il controllo deve interpretare alcuni tipi di input, ad esempio i tasti di direzione, come un significato speciale per tale controllo. Se si utilizza <xref:System.Windows.ContentElement.PreviewTextInput> dell'evento in cui associare gestori per l'input di testo, è possibile ottenere risultati migliori. Questa tecnica consente di evitare la maggior parte dei casi in cui la composizione del controllo è già contrassegnato questo evento come gestito e impedisce al gestore di ricezione dell'evento lungo la route dell'evento.  
  
 Il <xref:System.Windows.ContentElement.TextInput> evento consente a un componente o applicazione in ascolto dell'input di testo in modo indipendente dal dispositivo. La tastiera è il mezzo principale di <xref:System.Windows.ContentElement.TextInput>, ma possono anche sollevare riconoscimento grafia e altri dispositivi di input <xref:System.Windows.ContentElement.TextInput>.  
  
 A causa di combinazioni di tasti, predefiniti o tramite input method editor, ovvero gli eventi principali più potrebbero generare un solo evento di input di testo.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.TextInput> fa parte della classe elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.ContentElement.TextInput> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.TextInputEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewTextInput>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnTextInput%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.TextInput" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un dito tocca lo schermo mentre si trova sopra l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, il <xref:System.Windows.ContentElement.PreviewTouchDown> e <xref:System.Windows.ContentElement.TouchDown> non si verificano fino a quando un dito tocca lo schermo e sposta. Premere un dito sullo schermo e azienda senza spostarlo provoca la pressione prolungata di un <xref:System.Windows.Input.Stylus>. Il comportamento la pressione prolungata è equivalente al pulsante destro del mouse.  
  
 Affinché il <xref:System.Windows.ContentElement.PreviewTouchDown> e <xref:System.Windows.ContentElement.TouchDown> degli eventi non appena un dito tocca lo schermo, impostare il <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> proprietà associata `false` per questo elemento.  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.TouchDownEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewTouchDown>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnTouchDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.TouchDown" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un tocco si sposta dall'esterno all'interno dei limiti di questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene generato sempre, se il dispositivo a tocco viene acquisito da questo elemento dell'interfaccia utente.  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.TouchEnterEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnTouchEnter%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.TouchEnter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene tutti i dispositivi a tocco acquisiti in questo elemento.</summary>
        <value>Enumerazione di oggetti <see cref="T:System.Windows.Input.TouchDevice" /> che sono acquisiti in questo elemento.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene tutti i dispositivi a tocco che sono acquisiti in questo elemento o nei relativi elementi figlio nella struttura ad albero visuale.</summary>
        <value>Enumerazione degli oggetti <see cref="T:System.Windows.Input.TouchDevice" /> che sono acquisiti in questo elemento o nei relativi elementi figlio nella struttura ad albero visuale.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene tutti i dispositivi a tocco che si trovano su questo elemento.</summary>
        <value>Enumerazione di oggetti <see cref="T:System.Windows.Input.TouchDevice" /> che si trovano su questo elemento.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene tutti i dispositivi a tocco che sono su questo elemento o nei relativi elementi figlio nella struttura ad albero visuale.</summary>
        <value>Enumerazione degli oggetti <see cref="T:System.Windows.Input.TouchDevice" /> che sono su questo elemento o nei relativi elementi figlio nella struttura ad albero visuale.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un tocco si sposta dall'interno all'esterno dei limiti di questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.TouchLeaveEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnTouchLeave%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.TouchLeave" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene spostato un dito sullo schermo mentre si trova sopra l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.TouchMoveEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewTouchMove>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnTouchMove%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.TouchMove" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene sollevato un dito dallo schermo mentre si trova sopra l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.TouchUpEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewTouchUp>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnTouchUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.TouchUp" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>