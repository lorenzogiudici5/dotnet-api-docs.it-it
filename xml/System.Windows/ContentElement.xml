<Type Name="ContentElement" FullName="System.Windows.ContentElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f36232678eb3b8a808c2991f5ec80d66a7c9fe6e" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48632937" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ContentElement : System.Windows.DependencyObject, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ContentElement extends System.Windows.DependencyObject implements class System.Windows.IInputElement, class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.ContentElement" />
  <TypeSignature Language="VB.NET" Value="Public Class ContentElement&#xA;Inherits DependencyObject&#xA;Implements IAnimatable, IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContentElement : System::Windows::DependencyObject, System::Windows::IInputElement, System::Windows::Media::Animation::IAnimatable" />
  <TypeSignature Language="F#" Value="type ContentElement = class&#xA;    inherit DependencyObject&#xA;    interface IInputElement&#xA;    interface IAnimatable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Fornisce una classe base WPF per gli elementi di contenuto. Gli elementi di contenuto sono progettati per presentazioni in stile flusso, usando un modello di layout intuitivo orientato al markup e un modello a oggetti volutamente semplice.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement> definisce le caratteristiche seguenti di contenuto comuni:  
  
-   Input: Tutto <xref:System.Windows.ContentElement> le classi derivate di fornire supporto per l'acquisizione base di input da tastiera, mouse, operazioni di trascinamento e rilascio, i controlli dello stilo e tasti di scelta rapida.  
  
-   Lo stato attivo: Tutto <xref:System.Windows.ContentElement> classi derivate sono potenzialmente attivabile. (Tuttavia, lo stato attivabile predefinito per il <xref:System.Windows.ContentElement> classe di base è `false`. Per informazioni dettagliate su come effettuare una <xref:System.Windows.ContentElement> attivabili, vedere <xref:System.Windows.ContentElement.Focusable%2A>.) Inoltre, questa classe contiene [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] che è possibile usare per trasferire lo stato attivo tra gli elementi correlati.  
  
-   Eventi: <xref:System.Windows.ContentElement> include gli eventi che sono correlati a input e lo stato attivo; include anche eventi per le modifiche nello stato. In molti casi, il <xref:System.Windows.ContentElement> eventi sono eventi indirizzati. In alcuni casi, gli eventi indirizzati hanno sia tunneling e bubbling strategie di routing, generate come eventi distinti in risposta alla stessa condizione o stato. È inoltre <xref:System.Windows.ContentElement> definisce [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] che può generare eventi indirizzati e che è possibile aggiungere o rimuovere i gestori agli eventi.  
  
 <xref:System.Windows.ContentElement> condivide molte comuni [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] con <xref:System.Windows.UIElement>. Queste trappole [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] non provengono da un'ereditarietà delle classi condivise. Ma i medesimi di denominazione comuni, un comportamento simile e simile implementazione interna del [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in ogni classe. Data la similarità, infatti <xref:System.Windows.ContentElement> e <xref:System.Windows.UIElement> sono le due classi che costituiscono un elemento di base, anche se ognuno prevede diverse finalità per quanto riguarda il comportamento del modello oggetto di markup.  
  
 In particolare, <xref:System.Windows.UIElement> discende dal <xref:System.Windows.Media.Visual>, che fornisce supporto il grafico di basso livello per il rendering una <xref:System.Windows.ContentElement> in un'area rettangolare all'interno di una finestra composta, mentre <xref:System.Windows.ContentElement> rinvia il rendering in modo che i concetti più comuni per scenari di documento, ad esempio il flusso e ritorno a capo, sono supportati più facilmente. Queste due classi correlate anche implementano le interfacce comuni <xref:System.Windows.IInputElement> e <xref:System.Windows.Media.Animation.IAnimatable>.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Il <see cref="T:System.Windows.ContentElement" /> classe non definisce tutti gli aspetti di un elemento di contenuto completato per presentazioni in stile flusso. <see cref="T:System.Windows.FrameworkContentElement" /> è una classe immediatamente derivata di <see cref="T:System.Windows.ContentElement" />. <see cref="T:System.Windows.FrameworkContentElement" /> include un set più completo dei membri aggiuntivi che supportano il rendering un <see cref="T:System.Windows.FrameworkContentElement" /> all'interno di un host di contenuto e utilizza il sistema di layout a livello di framework WPF.</para>
    </block>
    <altmember cref="T:System.Windows.UIElement" />
    <altmember cref="T:System.Windows.FrameworkContentElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContentElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContentElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.ContentElement" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aggiunge un gestore eventi indirizzati per un evento indirizzato specifico, aggiungendo il gestore alla raccolta di gestori nell'elemento corrente.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="contentElement.AddHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identificatore dell'evento indirizzato da gestire.</param>
        <param name="handler">Riferimento all'implementazione del gestore.</param>
        <summary>Aggiunge un gestore eventi indirizzati per un evento indirizzato specifico, aggiungendo il gestore alla raccolta di gestori nell'elemento corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile aggiungere più volte lo stesso gestore dell'evento stesso senza generare un'eccezione. Tuttavia, il gestore di è effettivamente richiamato più volte quando l'evento è gestito. Pertanto, prendere in considerazione come questo comportamento potrebbe avere effetti collaterali che devono essere rappresentati nell'implementazione del gestore.  
  
 È in genere usare questo metodo per fornire l'implementazione della funzione di accesso "Aggiungi" per il [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] modello di accesso eventi di un evento indirizzato personalizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="member this.AddHandler : System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="contentElement.AddHandler (routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identificatore dell'evento indirizzato da gestire.</param>
        <param name="handler">Riferimento all'implementazione del gestore.</param>
        <param name="handledEventsToo">
          <see langword="true" /> per registrare il gestore affinché venga richiamato anche quando l'evento indirizzato è contrassegnato come gestito nei dati dell'evento; <see langword="false" /> per registrare il gestore con la condizione predefinita in base alla quale non verrà richiamato se l'evento indirizzato è già contrassegnato come gestito.  
  
Il valore predefinito è <see langword="false" />.  
  
Non chiedere ripetutamente di gestire di nuovo un evento indirizzato.</param>
        <summary>Aggiunge un gestore eventi indirizzati per un evento indirizzato specifico, aggiungendo il gestore alla raccolta di gestori nell'elemento corrente. Specificare che <paramref name="handledEventsToo" /> è <see langword="true" /> per fare in modo che il gestore specificato venga richiamato per eventi indirizzati già contrassegnati come gestiti da un altro elemento lungo la route dell'evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'elaborazione di eventi di input a basso livello in un modo pratico è un'attività complessa. Molti controlli implementano il comportamento in cui un determinato evento viene contrassegnato come gestito e viene sostituito da un altro evento più intuitivo. In genere, un controllo contrassegnerà solo un evento di input di piattaforma come gestito nel caso di alcuni rientra negli intenti di progettazione per questa operazione. In alcuni scenari, tali finalità non sia ciò che richiede la gestione dell'evento di input specifica. È per questi scenari che la registrazione di gestori eventi agli `handledEventsToo` come `true` appropriato. Ma è consigliabile non eseguire questa operazione periodicamente. Richiamare i gestori in risposta a tutti gli eventi anche se gestiti si complicano personalizzati per la logica di elaborazione di eventi dell'applicazione. È possibile notare una riduzione delle prestazioni se la logica del gestore è sostanziale. È necessario riservare l'utilizzo di associare i gestori eventi per gli eventi già gestito per le situazioni in cui hanno già scoperto durante il processo di sviluppo che alcuni controlli sono la gestione degli eventi che si desidera gestire con la logica dell'applicazione.  
  
 Un'altra tecnica per evitare il comportamento di alcune combinazioni di eventi controllo di gestione delle classi consiste nell'usare alternativa preview dell'evento. Ad esempio, se <xref:System.Windows.ContentElement.MouseLeftButtonDown> è contrassegnato come gestito dalla gestione delle classi, è possibile aggiungere gestori per <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> invece.  
  
 È possibile aggiungere più volte lo stesso gestore dell'evento stesso senza generare un'eccezione. Tuttavia, il gestore di è effettivamente richiamato più volte quando l'evento è gestito. Pertanto, prendere in considerazione come questo comportamento potrebbe avere effetti collaterali che devono essere rappresentati nell'implementazione del gestore.  
  
 È in genere usare questo metodo per fornire l'implementazione della funzione di accesso "Aggiungi" per il [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] modello di accesso eventi di un evento indirizzato personalizzato.  
  
   
  
## Examples  
 L'esempio seguente implementa un gestore richiamato il <xref:System.Windows.FrameworkElement.Initialized> eventi in una pagina che associa un gestore definito in uno degli elementi denominati nella pagina utilizzando `handledEventsToo` `true`. Questo gestore viene richiamato anche se un altro elemento lungo la route contrassegnate i dati degli eventi condivisi come gestito prima di raggiungere l'elemento di gestione nella route.  
  
 [!code-csharp[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#addhandlerhandledtoo)]
 [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#addhandlerhandledtoo)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.AddToEventRoute : System.Windows.EventRoute * System.Windows.RoutedEventArgs -&gt; unit" Usage="contentElement.AddToEventRoute (route, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route">Route dell'evento alla quale vengono aggiunti i gestori.</param>
        <param name="e">Dati di evento utilizzati per aggiungere i gestori. Questo metodo utilizza la proprietà <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> degli argomenti per creare i gestori.</param>
        <summary>Aggiunge gestori all'oggetto <see cref="T:System.Windows.EventRoute" /> specificato per l'insieme di gestori degli eventi <see cref="T:System.Windows.ContentElement" /> corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare questo metodo per gli elementi host del contenuto (indipendentemente dal fatto che implementino <xref:System.Windows.IContentHost>) per aggiungere gestori per gli elementi figlio di host del contenuto all'host <xref:System.Windows.EventRoute>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowDrop : bool with get, set" Usage="System.Windows.ContentElement.AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Recupera o imposta un valore che indica se l'elemento può essere usato come destinazione di un'operazione di trascinamento e rilascio.</summary>
        <value>
          <see langword="true" /> se questo elemento può essere utilizzato come destinazione di un'operazione di trascinamento; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operazioni di trascinamento e rilascio non sono abilitate per impostazione predefinita e deve essere abilitate deliberatamente impostando <xref:System.Windows.ContentElement.AllowDrop%2A> a `true`. Oltre a questa impostazione di base, il comportamento di trascinamento e rilascio è interamente specifiche sull'implementazione e non è definito da <xref:System.Windows.ContentElement> o qualsiasi altra classe di base dell'elemento. Alcuni controlli, ad esempio, <xref:System.Windows.Controls.RichTextBox>, è necessario un comportamento predefinito, ma non <xref:System.Windows.ContentElement> classi derivate hanno un comportamento di questo tipo. Per altre informazioni sul trascinamento della selezione, vedere [Drag and Drop Overview](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).  
  
 <xref:System.Windows.FrameworkContentElement> esegue l'override di metadati per questa proprietà di dipendenza nella propria implementazione. In particolare <xref:System.Windows.FrameworkContentElement> indica che questa proprietà consente l'ereditarietà del valore della proprietà (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> è `true` nei metadati). Ereditarietà del valore della proprietà in questo contesto significa che se sono presenti gli elementi figlio con nessun altro valore per <xref:System.Windows.ContentElement.AllowDrop%2A> assegnati tramite i valori locali o gli stili, il valore dell'elemento padre più vicino con questo valore viene assegnato (anche in questo caso, sia negli stili, per impostazione predefinita i valori o un valore locale), quindi il valore proveniente dall'elemento padre viene assegnato a tutti gli elementi figlio non assegnato dal sistema di proprietà. Ciò significa che è possibile specificare se consentire operazioni di trascinamento dell'elemento radice e quindi propaga il valore a tutte le <xref:System.Windows.FrameworkContentElement> gli elementi figlio che sono non è stato assegnato il modo specifico il valore `false`.  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.AllowDropProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 L'esempio seguente imposta <xref:System.Windows.ContentElement.AllowDrop%2A> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 [!code-xaml[ContentElementsSmorgasbord#AllowDrop](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#allowdrop)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AllowDropProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AllowDropProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.AllowDrop" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Applica un'animazione a una proprietà di dipendenza specificata nell'elemento.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit" Usage="contentElement.ApplyAnimationClock (dp, clock)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp">Identificatore della proprietà a cui applicare l'animazione.</param>
        <param name="clock">Orologio dell'animazione che controlla e dichiara l'animazione.</param>
        <summary>Applica un'animazione a una proprietà di dipendenza specificata nell'elemento. Le animazioni esistenti vengono interrotte e sostituite con la nuova animazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per rimuovere un'animazione da una proprietà, specificare l'identificatore per la proprietà come `dp` e specificare `clock` come `null`. Questa operazione rimuove l'animazione e la proprietà animata è impostata per il valore di base. Tuttavia, l'orologio dell'animazione originariamente associato non è stato arrestato. Tutte le animazioni assegnate a tale orologio continuerà a eseguire.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="contentElement.ApplyAnimationClock (dp, clock, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">Proprietà a cui applicare l'animazione.</param>
        <param name="clock">Orologio dell'animazione che controlla e dichiara l'animazione.</param>
        <param name="handoffBehavior">Valore dell'enumerazione. L'impostazione predefinita è <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, in base alla quale qualsiasi animazione esistente viene interrotta e sostituita con quella nuova.</param>
        <summary>Applica un'animazione a una proprietà di dipendenza specificata in questo elemento, con la possibilità di specificare che cosa succede se la proprietà ha già un'animazione in esecuzione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per rimuovere un'animazione da una proprietà, specificare l'identificatore per la proprietà come `dp` e specificare `clock` come `null`. Questa operazione rimuove l'animazione e la proprietà animata è impostata per il valore di base. Tuttavia, l'orologio dell'animazione originariamente associato non è stato arrestato. Tutte le animazioni assegnate a tale orologio continuerà a eseguire.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCaptured : bool" Usage="System.Windows.ContentElement.AreAnyTouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se almeno un dispositivo a tocco è acquisito nell'elemento.</summary>
        <value>
          <see langword="true" /> se almeno un tocco è acquisito in questo elemento; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AreAnyTouchesCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.AreAnyTouchesCaptured" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCapturedWithin : bool" Usage="System.Windows.ContentElement.AreAnyTouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se almeno un tocco è acquisito nell'elemento o nei relativi elementi figlio della struttura ad albero visuale.</summary>
        <value>
          <see langword="true" /> se almeno un dispositivo a tocco è acquisito in questo elemento o nei relativi elementi figlio nella struttura ad albero visuale; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesDirectlyOver : bool" Usage="System.Windows.ContentElement.AreAnyTouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se almeno un dispositivo a tocco viene premuto sull'elemento.</summary>
        <value>
          <see langword="true" /> se almeno un dispositivo a tocco viene premuto sull'elemento; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesOver : bool" Usage="System.Windows.ContentElement.AreAnyTouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se almeno un tocco viene premuto sull'elemento o sui relativi elementi figlio della struttura ad albero visuale.</summary>
        <value>
          <see langword="true" /> se almeno un dispositivo a tocco viene premuto su questo elemento o sui relativi elementi figlio nella struttura ad albero visuale; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AreAnyTouchesOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.AreAnyTouchesOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Avvia un'animazione per una proprietà animata specificata su questo elemento.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit" Usage="contentElement.BeginAnimation (dp, animation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp">Proprietà alla quale aggiungere un'animazione, specificata come identificatore della proprietà di dipendenza.</param>
        <param name="animation">Sequenza temporale dell'animazione da avviare.</param>
        <summary>Avvia un'animazione per una proprietà animata specificata su questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si controlla se una proprietà animata, si noti che l'animazione verrà avviata e considerata aggiungendo un'animazione quando viene eseguito il rendering del primo frame oltre il punto di partenza non-animati.  
  
 Se il <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> per `animation` è `null`, quindi vengono rimosse tutte le animazioni correnti e viene mantenuto il valore corrente della proprietà.  
  
 Se l'intera `animation` valore è `null`, tutte le animazioni vengono rimosse dalla proprietà e il valore della proprietà viene ripristinato il valore di base. Tuttavia, la sequenza temporale di animazione originariamente associato non è stata arrestata. Tutte le animazioni assegnate a tale sequenza temporale continuerà a eseguire.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="contentElement.BeginAnimation (dp, animation, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">Proprietà alla quale aggiungere un'animazione, specificata come identificatore della proprietà di dipendenza.</param>
        <param name="animation">Sequenza temporale dell'animazione da applicare.</param>
        <param name="handoffBehavior">Valore dell'enumerazione che specifica il modo in cui la nuova animazione interagisce con tutte le animazioni correnti (in esecuzione) che già influiscono sul valore della proprietà.</param>
        <summary>Avvia un'animazione particolare per una proprietà animata specificata su questo elemento, con la possibilità di indicare cosa succede se la proprietà dispone già di un'animazione in esecuzione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si controlla se una proprietà animata, si noti che l'animazione verrà avviata e considerata aggiungendo un'animazione quando viene eseguito il rendering del primo frame oltre il punto di partenza non-animati.  
  
 Se il <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> per `animation` è `null`, quindi vengono rimosse tutte le animazioni correnti e viene mantenuto il valore corrente della proprietà.  
  
 Se l'intera `animation` valore è `null`, tutte le animazioni vengono rimosse dalla proprietà e il valore della proprietà viene ripristinato il valore di base. Tuttavia, la sequenza temporale di animazione originariamente associato non è stata arrestata. Tutte le animazioni assegnate a tale sequenza temporale continuerà a eseguire.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberSignature Language="F#" Value="abstract member CaptureMouse : unit -&gt; bool&#xA;override this.CaptureMouse : unit -&gt; bool" Usage="contentElement.CaptureMouse " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tenta di forzare l’acquisizione del mouse in questo elemento.</summary>
        <returns>
          <see langword="true" /> se il mouse viene acquisito correttamente; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per l'acquisizione, è necessario abilitare un elemento. Controllare se <xref:System.Windows.ContentElement.IsEnabled%2A> viene `true` prima di chiamare <xref:System.Windows.ContentElement.CaptureMouse%2A>.  
  
 Se il chiamante <xref:System.Windows.ContentElement.CaptureMouse%2A> restituisce `true`, quindi <xref:System.Windows.ContentElement.IsMouseCaptured%2A> anche `true`.  
  
 Se il chiamante <xref:System.Windows.ContentElement.CaptureMouse%2A> restituisce `true`, il <xref:System.Windows.ContentElement.GotMouseCapture> e <xref:System.Windows.ContentElement.IsMouseCapturedChanged> gli eventi vengono generati, con <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> event i dati segnalati come elemento in cui il <xref:System.Windows.ContentElement.CaptureMouse%2A> viene chiamato il metodo. Se si forza l'acquisizione, potrebbe interferire con le acquisizioni esistente, in particolare con le acquisizioni relative al trascinamento e rilascio con il mouse.  
  
 Per cancellare il mouse capture da tutti gli elementi, chiamare <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> con il `element` fornita come parametro `null`.  
  
   
  
## Examples  
 L'esempio seguente acquisisce il mouse o rilascia acquisizione, basata sul fatto che il mouse è già stato acquisito dall'elemento. Si noti che questo esempio viene eseguito il cast l'elemento di destinazione potenziale di acquisizione per la <xref:System.Windows.IInputElement> dell'interfaccia e quindi viene chiamato inizialmente il <xref:System.Windows.IInputElement.CaptureMouse%2A?displayProperty=nameWithType> (metodo). Esegue il cast a <xref:System.Windows.IInputElement> è una tecnica che è utile se si è certi se l'elemento a cui si desidera acquisire il mouse è una <xref:System.Windows.UIElement> o un <xref:System.Windows.ContentElement>. Il cast di interfaccia e il metodo di interfaccia chiamare quindi chiama l'implementazione di CaptureMouse specifici del tipo appropriato internamente senza richiedere una versione di valutazione di eseguire il cast a uno <xref:System.Windows.UIElement> o <xref:System.Windows.ContentElement>. Questa stessa tecnica di casting funziona per gli altri membri che <xref:System.Windows.IInputElement> definisce, ad esempio molti degli eventi correlati all'input e gli altri metodi correlati all'input.  
  
 [!code-csharp[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#ismousecaptured)]
 [!code-vb[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberSignature Language="F#" Value="abstract member CaptureStylus : unit -&gt; bool&#xA;override this.CaptureStylus : unit -&gt; bool" Usage="contentElement.CaptureStylus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tenta di forzare l’acquisizione dello stilo in questo elemento.</summary>
        <returns>
          <see langword="true" /> se lo stilo viene acquisito correttamente, in caso contrario <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Restituisce l'implementazione predefinita basata sul dispositivo stilo sottostante predefinito sempre `true`. Tuttavia, se si intende estendere i dispositivi di input che forniscono l'implementazione di dispositivo per il sistema di input, è possibile creare un sistema con un'implementazione di dispositivo stilo alternative che potrebbe restituire risultati diversi.  
  
 Quando un elemento acquisisce lo stilo, riceve l'input dello stilo anche se lo stilo è di fuori dei limiti. Lo stilo viene rilevato in genere solo durante le operazioni di trascinamento e rilascio.  
  
 Chiamando questo metodo viene chiamato una sottostante statici <xref:System.Windows.Input.Stylus> metodo <xref:System.Windows.Input.Stylus.Capture%2A>. Il comportamento di acquisizione effettivi viene implementato dall'implementazione del dispositivo stilo attivo.  
  
 Per l'acquisizione, è necessario abilitare un elemento. Controllare se <xref:System.Windows.ContentElement.IsEnabled%2A> viene `true` prima di chiamare <xref:System.Windows.ContentElement.CaptureStylus%2A>.  
  
 Se il chiamante <xref:System.Windows.ContentElement.CaptureStylus%2A> restituisce `true`, <xref:System.Windows.ContentElement.IsStylusCaptured%2A> anche `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.CaptureTouch : System.Windows.Input.TouchDevice -&gt; bool" Usage="contentElement.CaptureTouch touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">Dispositivo da acquisire.</param>
        <summary>Tenta di forzare l'acquisizione di un tocco in questo elemento.</summary>
        <returns>
          <see langword="true" /> se il tocco specificato viene acquisto nell'elemento. In caso contrario <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.CaptureTouch%2A> restituirà `false` se il <xref:System.Windows.Input.TouchDevice> viene attualmente acquisito da un altro elemento.  
  
 Se <xref:System.Windows.ContentElement.CaptureTouch%2A> restituisce `true`, quindi il <xref:System.Windows.ContentElement.GotTouchCapture> viene generato l'evento.  
  
 Per rilasciare l'acquisizione di un singolo tocco da questo elemento, usare il <xref:System.Windows.ContentElement.ReleaseTouchCapture%2A> (metodo) e specificare il dispositivo a tocco per rilasciare. Per rilasciare tutti i tocchi da questo elemento, usare il <xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="touchDevice" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandBindings : System.Windows.Input.CommandBindingCollection" Usage="System.Windows.ContentElement.CommandBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un insieme di oggetti <see cref="T:System.Windows.Input.CommandBinding" /> associati all'elemento.</summary>
        <value>Insieme di tutti gli oggetti <see cref="T:System.Windows.Input.CommandBinding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Windows.Input.CommandBinding> consente la gestione dei comandi di un comando specifico per questo elemento e dichiara il collegamento tra un comando, gli eventi e i gestori associati da questo elemento.  
  
 Un altro modo comune per popolare la <xref:System.Windows.ContentElement.CommandBindings%2A> raccolta consiste nell'usare <xref:System.Windows.Input.CommandManager> metodi a livello di codice.  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a>Utilizzo della sintassi XAML per elementi proprietà  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *oneOrMoreCommandBindings*  
 Uno o più <xref:System.Windows.Input.CommandBinding> elementi. Ognuno di questi elementi deve avere una <xref:System.Windows.Input.CommandBinding.Command%2A> attributo è impostato su un comando noto e gli attributi impostati per il <xref:System.Windows.Input.CommandBinding.CanExecute> e <xref:System.Windows.Input.CommandBinding.Executed> le implementazioni di gestori. Per altre informazioni, vedere <xref:System.Windows.Input.CommandBinding>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberSignature Language="F#" Value="member this.DragEnter : System.Windows.DragEventHandler " Usage="member this.DragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di trascinamento sottostante per cui questo elemento rappresenta la destinazione del trascinamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.DragEnter?displayProperty=nameWithType> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.DragEnter> eventi sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.DragEnterEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.DragEventHandler>|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewDragEnter>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnDragEnter%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.DragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.DragEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : System.Windows.DragEventHandler " Usage="member this.DragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di trascinamento sottostante per cui l'elemento rappresenta l'origine del trascinamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> per questa classe di evento associato in modo che <xref:System.Windows.ContentElement.DragLeave?displayProperty=nameWithType> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.DragLeave> eventi sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.DragLeaveEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.DragEventHandler>|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.DragDrop.PreviewDragLeave>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnDragLeave%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragEnter" />
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
        <altmember cref="E:System.Windows.ContentElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.DragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.DragLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.DragEventHandler " Usage="member this.DragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di trascinamento sottostante per il quale l'elemento rappresenta la destinazione del rilascio potenziale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento si verifica anche se l'operazione di trascinamento origina i limiti dell'elemento. Se l'operazione di trascinamento viene avviato all'esterno dei limiti e quindi si sposta all'interno, questo evento viene generato anche, nonché <xref:System.Windows.ContentElement.DragEnter> e gli eventi di anteprima correlati.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> per questa classe di evento associato in modo che <xref:System.Windows.ContentElement.DragOver?displayProperty=nameWithType> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.DragOver> eventi sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.DragOverEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.DragEventHandler>|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.DragDrop.PreviewDragOver>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnDragOver%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragEnter" />
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
        <altmember cref="E:System.Windows.ContentElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.DragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.DragOver" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberSignature Language="F#" Value="member this.Drop : System.Windows.DragEventHandler " Usage="member this.Drop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di rilascio sottostante con questo elemento come destinazione del rilascio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> per questa classe di evento associato in modo che <xref:System.Windows.ContentElement.Drop?displayProperty=nameWithType> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.Drop> eventi sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.DropEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.DragEventHandler>|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewDrop>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnDrop%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
        <altmember cref="E:System.Windows.ContentElement.MouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DropEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.DropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.Drop" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberSignature Language="F#" Value="abstract member Focus : unit -&gt; bool&#xA;override this.Focus : unit -&gt; bool" Usage="contentElement.Focus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tenta di impostare lo stato attivo su questo elemento.</summary>
        <returns>
          <see langword="true" /> se lo stato attivo della tastiera può essere impostato su questo elemento, <see langword="false" /> se questa chiamata al metodo non forza lo stato attivo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per essere attivabile, <xref:System.Windows.ContentElement.Focusable%2A> e <xref:System.Windows.ContentElement.IsEnabled%2A> devono essere entrambi `true`. Si noti che quasi tutte le <xref:System.Windows.ContentElement> alle classi derivate non sono <xref:System.Windows.ContentElement.Focusable%2A> per impostazione predefinita.  
  
 Anche se un elemento è la gestione degli eventi con stato attivabile e abilitato, all'interno di una struttura ad albero specifico, (ad esempio per un controllo composito) potrebbe rispondere agli eventi dello stato attivo di anteprima, non consentendo lo stato attivo, pertanto questo metodo restituirà `false`.  
  
 In generale, lo stato attivo è disciplinato dalle due concetti distinti: della tastiera e lo stato attivo logico, che non sono sempre identici. Questo metodo imposta lo stato attivo logico. Non c'è alcun mezzo a livello di codice per impostare lo stato attivo della tastiera specificamente; lo stato attivo della tastiera è determinato dall'input dell'utente. Per altre informazioni, vedere [Panoramica di messa a fuoco](~/docs/framework/wpf/advanced/focus-overview.md) e [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
 Se il chiamante <xref:System.Windows.ContentElement.Focus%2A> restituisce `true`, <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> e <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> sono anche `true`.  
  
 Se le proprietà correlate non sono già `true`, quando si chiama <xref:System.Windows.ContentElement.Focus%2A>, uno o più dei seguenti eventi vengono generati nell'ordine seguente: <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>, <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> (l'origine è la nuova destinazione di messa a fuoco), <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged>, <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.ContentElement.LostKeyboardFocus>, <xref:System.Windows.ContentElement.GotKeyboardFocus> (l'origine è la nuova destinazione di messa a fuoco).  
  
   
  
## Examples  
 Nell'esempio seguente è un gestore di eventi di caricamento pagina che consente di trovare un determinato paragrafo nel documento denominato e imposta lo stato attivo a esso. I paragrafi non sono attivabili per impostazione predefinita. Questa particolare paragrafo è stato applicato uno stile (non mostrato) che utilizzato uno stile <xref:System.Windows.Setter> per renderla attivabile.  
  
 [!code-csharp[ContentElementsSmorgasbord#Focus](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#focus)]
 [!code-vb[ContentElementsSmorgasbord#Focus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#focus)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Focusable : bool with get, set" Usage="System.Windows.ContentElement.Focusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Recupera o imposta un valore che indica se l'elemento può ricevere lo stato attivo.</summary>
        <value>
          <see langword="true" /> se l'elemento è attivabile, in caso contrario <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo l'elemento con lo stato attivo riceve input da tastiera.  
  
 Alcune classi derivate possono sostituire i metadati per questa proprietà di dipendenza in modo che la classe derivata è attivabile per impostazione predefinita.  
  
 Quando viene ereditato da <xref:System.Windows.Documents.Hyperlink> o relative classi derivate <xref:System.Windows.Documents.Hyperlink> ignora i metadati per questa proprietà di dipendenza e consente di ridefinire il valore predefinito di questa proprietà sia `true`.  
  
<a name="dependencyPropertyInfo_Focusable"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.FocusableProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 L'esempio seguente crea uno stile che rende un <xref:System.Windows.Documents.Paragraph> attivabile per impostazione predefinita e gli assegna un comportamento visivo quando riceve lo stato attivo.  
  
 [!code-xaml[ContentElementsSmorgasbord#Focusable](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#focusable)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si deriva da <see cref="T:System.Windows.ContentElement" />, prendere in considerazione se si desidera che l'elemento per essere attivabile, poiché per impostazione predefinita non è attivabile. Se si vuole l'elemento attivabile, eseguire l'override di metadati per questa proprietà nel costruttore statico della classe derivata come indicato di seguito: 
[! codice-csharp[CorePseudocode #UIElementShortOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementshortoverride)] [! codice vb[CorePseudocode #UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)] 
in cui <paramref name="myElement" /> è il nome della classe del tipo che si esegue l'override dei metadati.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberSignature Language="F#" Value="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.ContentElement.Focusable" /> cambia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusableProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.FocusableProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.Focusable" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj&#xA;override this.GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj" Usage="contentElement.GetAnimationBaseValue dp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">Proprietà di dipendenza da controllare.</param>
        <summary>Restituisce il valore della proprietà di base per la proprietà specificata in questo elemento, indipendentemente da eventuali valori animati provenienti da un'animazione in esecuzione o interrotta.</summary>
        <returns>Valore della proprietà se alla proprietà di dipendenza specificata non sono associate animazioni.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se non sono associate animazioni a proprietà, il <xref:System.Windows.ContentElement.GetAnimationBaseValue%2A> è sempre identico al valore restituito di <xref:System.Windows.DependencyObject.GetValue%2A> valore restituito. Se sono presenti le animazioni collegate, quindi tutti i possibili valori di animazione derivati incluso l'avvio e arresto valori vengono ignorati e il valore della proprietà è determinato in base a tutti gli altri possibili input. Per altre informazioni, vedere [Precedenza del valore della proprietà di dipendenza](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal virtual System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="abstract member GetUIParentCore : unit -&gt; System.Windows.DependencyObject&#xA;override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="contentElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Se sottoposto a override in una classe derivata, restituisce un elemento padre alternativo dell'[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] per questo elemento se non esiste alcun elemento padre visuale.</summary>
        <returns>Oggetto, se l'implementazione di una classe derivata dispone di una connessione a un elemento padre alternativo da segnalare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'implementazione virtuale predefinita di questo metodo restituisce `null`. <xref:System.Windows.FrameworkContentElement> fornisce un'implementazione pratica.  
  
 Elementi padre alternativi vengono usati per il routing degli eventi, nei casi in cui un elemento crea una struttura elemento padre alternativo in modo che gli eventi vengano indirizzati in modo che differisce dal modello di routing di struttura ad albero visuale per l'elemento padre standard, standard o verso il basso di visualizzare l'anteprima di strategia di routing.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di trascinamento e rilascio sottostante che coinvolge l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.GiveFeedback> evento consente all'origine di un evento di trascinamento di modificare l'aspetto del puntatore del mouse per fornire l'utente indicazioni visive durante un'operazione di trascinamento e rilascio. Il feedback visivo rafforza che è un'operazione di trascinamento e rilascio nel processo.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> per questa classe di evento associato in modo che <xref:System.Windows.ContentElement.GiveFeedback> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.GiveFeedback> eventi sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.GiveFeedbackEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewGiveFeedback>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnGiveFeedback%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.GiveFeedback" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.RoutedEventHandler " Usage="member this.GotFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'elemento riceve lo stato attivo logico.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lo stato attivo logico differisce dallo stato attivo della tastiera se lo stato attivo viene forzato intenzionalmente utilizzando una chiamata al metodo ma lo stato attivo della tastiera precedente esiste in un ambito diverso. In questo scenario, lo stato attivo della tastiera rimane dove si trova e l'elemento in cui un <xref:System.Windows.ContentElement.Focus%2A> metodo viene chiamato comunque Ottiene lo stato attivo logico.  
  
 Un'interpretazione più precisa di questo evento è che viene generato quando il valore della <xref:System.Windows.ContentElement.IsFocused%2A> proprietà di un elemento nella route viene modificato da `false` a `true`.  
  
 Poiché questo evento viene utilizzato il routing di bubbling, l'elemento che riceve lo stato attivo potrebbe essere un elemento figlio invece dell'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo che ha acquisito lo stato attivo.  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.GotFocusEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.RoutedEventHandler>|  
  
-   Non vi è alcun evento di tunneling corrispondente.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnGotFocus%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.ContentElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.GotFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stato attivo della tastiera si trova sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> è un evento simile che tiene traccia delle modifiche di stato in una proprietà che mantiene lo stato attivo di un elemento. il <xref:System.Windows.ContentElement.GotKeyboardFocus> evento viene generato in molti casi stesso.  
  
 Poiché questo evento viene utilizzato il routing di bubbling, l'elemento con lo stato attivo potrebbe essere un elemento figlio invece dell'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo con lo stato attivo.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> per questa classe di evento associato in modo che <xref:System.Windows.ContentElement.GotKeyboardFocus> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.GotKeyboardFocus> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.GotKeyboardFocusEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.GotKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'elemento acquisisce lo stato mouse capture.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un elemento acquisisce il puntatore del mouse, anche se il puntatore del mouse non è compreso nei limiti riceve l'input del mouse. Il puntatore del mouse viene acquisito in genere solo durante le operazioni di trascinamento e rilascio e rimane acquisite fino a quando non si verifica l'azione di eliminazione dell'operazione di trascinamento e rilascio.  
  
 Poiché questo evento viene utilizzato il routing di bubbling, l'elemento con acquisizione potrebbe essere un elemento figlio invece dell'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nell'evento di acquisizione dei dati per determinare l'elemento effettivo con il mouse.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> per questa classe di evento associato in modo che <xref:System.Windows.ContentElement.GotMouseCapture> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.GotMouseCapture> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.GotMouseCaptureEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Non vi è alcun evento di tunneling corrispondente definito.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnGotMouseCapture%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.GotMouseCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'elemento rileva lo stilo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un elemento acquisisce lo stilo, riceve l'input dello stilo anche se il puntatore si trova di fuori dei limiti. Lo stilo viene acquisito in genere solo durante le operazioni di trascinamento e rilascio e conserva fino a quando non si verifica l'azione di eliminazione dell'operazione di trascinamento e rilascio.  
  
 Poiché questo evento viene utilizzato il routing di bubbling, l'elemento con acquisizione potrebbe essere un elemento figlio invece dell'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo con l'acquisizione.  
  
 Questo evento viene creato un alias per l'evento associato per questa classe in modo che <xref:System.Windows.ContentElement.GotStylusCapture> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.GotStylusCapture> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.GotStylusCaptureEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Non vi è alcun evento di tunneling corrispondente definito.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnGotStylusCapture%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.GotStylusCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.GotTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.GotTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un tocco viene acquisito in questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.GotTouchCaptureEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.GotTouchCapture" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasAnimatedProperties : bool" Usage="System.Windows.ContentElement.HasAnimatedProperties" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se questo elemento dispone di proprietà a cui è stata aggiunta un'animazione.</summary>
        <value>
          <see langword="true" /> se questo elemento dispone di animazioni associate ad alcune proprietà, in caso contrario <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà restituisce `true` per animazioni permanenti (sempre in esecuzione, senza clock) o per le animazioni con una sequenza temporale specifica.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputBindings : System.Windows.Input.InputBindingCollection" Usage="System.Windows.ContentElement.InputBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'insieme delle associazioni di input associate a questo elemento.</summary>
        <value>Insieme delle associazioni di input.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le associazioni di input supportano l'associazione di comandi ai dispositivi di input. Ad esempio, <xref:System.Windows.Input.MouseBinding> implementa associazioni di input che includono le proprietà specifiche dei mouse.  
  
 La raccolta di associazioni di input include associazioni di input relativi al tipo e anche le associazioni di input che vengono dichiarate nell'istanza.  
  
 Una proprietà correlata, <xref:System.Windows.ContentElement.CommandBindings%2A>, mantiene una raccolta di associazioni di comandi. Queste associazioni differiscono dalle associazioni di input che rappresentano il livello successivo verso il basso dell'elaborazione del comando - azioni che sono associati ai comandi noti e i gestori specifici di una classe per loro.  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a>Utilizzo della sintassi XAML per elementi proprietà  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *oneOrMoreInputBindings*  
 Uno o più <xref:System.Windows.Input.InputBinding> elementi (in genere il <xref:System.Windows.Input.KeyBinding> o <xref:System.Windows.Input.MouseBinding> classi derivate). Ognuno di questi deve disporre di un <xref:System.Windows.Input.InputBinding.Command%2A> e <xref:System.Windows.Input.InputBinding.Gesture%2A> set di attributi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.ContentElement.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se questo elemento è abilitato nell'[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</summary>
        <value>
          <see langword="true" /> se l'elemento è abilitato; in caso contrario <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.IsEnabledProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 L'esempio seguente crea uno stile che include un setter delle proprietà che fornisce un comportamento visivo alternativo quando un <xref:System.Windows.Documents.Hyperlink> è impostata su <xref:System.Windows.ContentElement.IsEnabled%2A> `false`.  
  
 [!code-xaml[ContentElementsSmorgasbord#IsEnabledIsMouseOver](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#isenabledismouseover)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberSignature Language="F#" Value="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.ContentElement.IsEnabled" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabledCore : bool" Usage="System.Windows.ContentElement.IsEnabledCore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che diventa il valore restituito di <see cref="P:System.Windows.ContentElement.IsEnabled" /> in classi derivate.</summary>
        <value>
          <see langword="true" /> se l'elemento è abilitato; in caso contrario <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>L'implementazione predefinita di questa proprietà memorizza nella cache il valore e calcola anche se l'elemento padre di questo elemento è abilitato. (Se l'elemento padre non è abilitata, l'elemento figlio non può essere abilitata in modo efficace in pratica [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].) Se si sceglie di eseguire l'override di questa implementazione, verificare che si chiama l'implementazione di base per mantenere questo comportamento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.IsEnabled" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFocused : bool" Usage="System.Windows.ContentElement.IsFocused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che determina se l'elemento ha lo stato attivo logico.</summary>
        <value>
          <see langword="true" /> se questo elemento detiene lo stato attivo logico; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se un'applicazione ha più divisioni lo stato attivo, ad esempio tra contenuto menu e il resto dell'applicazione, lo stato attivo logico potrebbero essere diversi dallo stato attivo della tastiera. In questo scenario, lo stato attivo della tastiera può essere solo su un elemento dell'interfaccia utente dell'applicazione, tuttavia, alcuni elementi in altre divisioni messa a fuoco potrebbero continuare a mantenere lo stato attivo logico. Per altre informazioni sullo stato attivo logico, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md) e [Cenni preliminari sulla messa a fuoco](~/docs/framework/wpf/advanced/focus-overview.md).  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.IsFocusedProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 L'esempio seguente crea uno stile che rende un <xref:System.Windows.Documents.Paragraph> attivabile per impostazione predefinita e gli assegna un comportamento visivo quando riceve lo stato attivo.  
  
 [!code-xaml[ContentElementsSmorgasbord#Focusable](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#focusable)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.IsFocused" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInputMethodEnabled : bool" Usage="System.Windows.ContentElement.IsInputMethodEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se un sistema del metodo di input, ad esempio un [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)], viene abilitato per l'elaborazione dell'input in questo elemento.</summary>
        <value>
          <see langword="true" /> se è attivo un metodo di input, in caso contrario <see langword="false" />. Il valore predefinito della proprietà associata sottostante è <see langword="true" />; tuttavia, questo valore è influenzato dallo stato dei metodi di input in fase di esecuzione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà restituisce il valore restituito dalla proprietà associata <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> per i metodi di input attualmente abilitati (da tastiera, riconoscimento vocale e altri dispositivi di input).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocused : bool" Usage="System.Windows.ContentElement.IsKeyboardFocused" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se l'elemento ha lo stato attivo della tastiera.</summary>
        <value>
          <see langword="true" /> se questo elemento ha la tastiera allo stato attivo; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.IsKeyboardFocusedProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotFocus" />
        <altmember cref="E:System.Windows.ContentElement.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsKeyboardFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.IsKeyboardFocused" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithin : bool" Usage="System.Windows.ContentElement.IsKeyboardFocusWithin" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se lo stato attivo della tastiera si trova in qualsiasi punto dell'elemento o degli elementi figlio.</summary>
        <value>
          <see langword="true" /> se lo stato attivo della tastiera è sull'elemento o sugli elementi figlio; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le modifiche al valore di questa proprietà generano in genere il <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> evento, a meno che non ha eseguito l'override di una classe derivata <xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A> per eliminare l'evento.  
  
 Non si imposta questa proprietà direttamente, ma è possibile impostare lo stato attivo all'elemento chiamando <xref:System.Windows.ContentElement.Focus%2A>, oppure effettuando una <xref:System.Windows.ContentElement.MoveFocus%2A> richiesta. Una di queste chiamate al metodo potrebbe modificare il valore della proprietà.  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.IsKeyboardFocusWithinProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsKeyboardFocusWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.IsKeyboardFocusWithin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptured : bool" Usage="System.Windows.ContentElement.IsMouseCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il mouse è acquisito da questo elemento.</summary>
        <value>
          <see langword="true" /> se l’elemento ha l’acquisizione del mouse, in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lo stato mouse capture è correlato a operazioni di trascinamento e rilascio in-process.  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.IsMouseCapturedProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 Nell'esempio seguente lo stato di acquisizione del mouse attiva o disattiva base indica se il mouse è già stato acquisito dall'elemento.  
  
 [!code-csharp[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#ismousecaptured)]
 [!code-vb[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.CaptureMouse" />
        <altmember cref="E:System.Windows.ContentElement.GotMouseCapture" />
        <altmember cref="E:System.Windows.ContentElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.ContentElement.IsMouseCaptured" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsMouseCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.IsMouseCaptured" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithin : bool" Usage="System.Windows.ContentElement.IsMouseCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che determina se l'elemento o gli elementi figlio nel relativo albero di elementi hanno lo stato mouse capture.</summary>
        <value>
          <see langword="true" /> se questo elemento o un elemento contenuto riceve l'input del mouse; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.IsMouseCaptureWithinProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseCaptured" />
        <altmember cref="M:System.Windows.ContentElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore di <see cref="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsMouseCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOver : bool" Usage="System.Windows.ContentElement.IsMouseDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se la posizione del puntatore del mouse corrisponde ai risultati dell'hit test, che prendono in considerazione la composizione dell'elemento.</summary>
        <value>
          <see langword="true" /> Se il puntatore del mouse è posizionato sull'elemento equivale a un hit test. in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A differenza <xref:System.Windows.ContentElement.IsMouseOver%2A>, questa proprietà è solo `true` se il puntatore del mouse è posizionato sull'elemento letterale, come nel caso di un hit test. Se il puntatore del mouse è invece su un elemento figlio, in particolare sugli elementi che fanno parte di un elemento modello più profondo e la composizione di questa proprietà sarà `false`. A meno che non si sa come un controllo composito (ad esempio, si utilizza questa proprietà in un modello di controllo personalizzato per un controllo che definisce), questa proprietà potrebbe restituire risultati imprevisti. Per la maggior parte degli scenari in cui non creano controlli, usare <xref:System.Windows.ContentElement.IsMouseOver%2A> invece.  
  
 Se il puntatore del mouse viene acquisito da questo elemento e questa proprietà è `true` al momento dell'acquisizione, questa proprietà continuerà a restituire `true` fino a quando non viene perso il mouse capture e il puntatore non è posizionato nei limiti.  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.IsMouseDirectlyOverProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseEnter" />
        <altmember cref="E:System.Windows.ContentElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsMouseDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseOver : bool" Usage="System.Windows.ContentElement.IsMouseOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il puntatore del mouse è posizionato su questo elemento (elementi figlio di visualizzazione o composizione del controllo inclusi).</summary>
        <value>
          <see langword="true" /> se il puntatore del mouse è sull'elemento o sui rispettivi elementi figlio, in caso contrario <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anche se non esiste un evento "IsMouseOverChanged" analogo, molti eventi simili si. Ad esempio, è possibile usare <xref:System.Windows.ContentElement.MouseEnter>, <xref:System.Windows.ContentElement.MouseMove>, e <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged>.  
  
 Se l'elemento acquisisce il puntatore del mouse, tale proprietà rimane `true` fino a quando il mouse capture andrà perso e il puntatore del mouse esce dai limiti dell'elemento.  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.IsMouseOverProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 L'esempio seguente crea uno stile che include un setter delle proprietà che fornisce un comportamento visivo alternativo quando un <xref:System.Windows.Documents.Hyperlink> reports <xref:System.Windows.ContentElement.IsMouseOver%2A> `true`.  
  
 [!code-xaml[ContentElementsSmorgasbord#IsEnabledIsMouseOver](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#isenabledismouseover)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsMouseOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.IsMouseOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptured : bool" Usage="System.Windows.ContentElement.IsStylusCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se lo stilo viene rilevato su questo elemento.</summary>
        <value>
          <see langword="true" /> se l’elemento ha l'acquisizione dello stilo, in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tocco, mouse e stilo input esiste in una determinata relazione. Per altre informazioni, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.IsStylusCapturedProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.CaptureStylus" />
        <altmember cref="E:System.Windows.ContentElement.GotStylusCapture" />
        <altmember cref="E:System.Windows.ContentElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.ContentElement.IsStylusCaptured" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsStylusCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.IsStylusCaptured" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithin : bool" Usage="System.Windows.ContentElement.IsStylusCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che determina se l'input dello stilo viene acquisito dall'elemento, elementi figlio e composizione del controllo inclusi.</summary>
        <value>
          <see langword="true" /> se l'input dello stilo viene acquisito all'interno di questo elemento, in caso contrario <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tocco, mouse e stilo input esiste in una determinata relazione. Per altre informazioni, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.IsStylusCaptureWithinProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsStylusCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOver : bool" Usage="System.Windows.ContentElement.IsStylusDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se la posizione dello stilo corrisponde a risultati dell'hit test, che prendono in considerazione la composizione dell'elemento.</summary>
        <value>
          <see langword="true" /> se lo stilo è sullo stesso elemento di un hit test, in caso contrario <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A differenza <xref:System.Windows.ContentElement.IsStylusOver%2A>, questa proprietà è solo `true` se lo stilo è posizionato sull'elemento. Se lo stilo è invece tramite un elemento figlio o di elementi che fanno parte della composizione di più approfondita di un elemento, questa proprietà sarà `false`.  
  
 A meno che non si sa come un controllo composito (ad esempio, si utilizza questa proprietà in un modello di controllo personalizzato per un controllo che definisce), questa proprietà potrebbe restituire risultati imprevisti. Per la maggior parte degli scenari in cui non creano controlli, usare <xref:System.Windows.ContentElement.IsStylusOver%2A> invece.  
  
 Se questo elemento di input dello stilo e questa proprietà è `true` al momento dell'acquisizione, tale proprietà rimane `true` fino a quando l'acquisizione dello stilo viene perso e lo stilo viene spostato nei limiti.  
  
 Tocco, mouse e stilo input esiste in una determinata relazione. Per altre informazioni, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.IsStylusDirectlyOverProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsStylusDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusOver : bool" Usage="System.Windows.ContentElement.IsStylusOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se lo stilo è posizionato su questo elemento (elementi figlio di visualizzazione inclusi).</summary>
        <value>
          <see langword="true" /> se lo stilo è sull'elemento o sugli elementi figlio, in caso contrario <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se questo elemento di input dello stilo, tale proprietà rimane `true` fino a quando l'acquisizione dello stilo viene persa e il puntatore non rientra nei limiti.  
  
 Tocco, mouse e stilo input esiste in una determinata relazione. Per altre informazioni, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.IsStylusOverProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsStylusOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.ContentElement.IsStylusOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberSignature Language="F#" Value="member this.KeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.KeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene premuto un tasto mentre lo stato attivo si trova sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestione delle chiavi interagisce con altre funzionalità di piattaforma come composizione di testo e l'esecuzione di comandi. Il <xref:System.Windows.ContentElement.KeyDown> evento è un evento di input di testo di basso livello che potrà non comportarsi come previsto su determinati controlli. Questo avviene perché alcuni controlli dispongono di composizione del controllo o la gestione della classe che fornisce una versione di livello superiore del testo, la gestione dell'input e gli eventi correlati.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> per questa classe di evento associato in modo che <xref:System.Windows.ContentElement.KeyDown> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.KeyDown> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.KeyDownEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewKeyDown>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnKeyDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.KeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.KeyDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberSignature Language="F#" Value="member this.KeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.KeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene rilasciato un tasto mentre lo stato attivo si trova sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> per questa classe di evento associato in modo che <xref:System.Windows.ContentElement.KeyUp> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.KeyUp> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.KeyUpEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewKeyUp>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnKeyUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.KeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.KeyUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.RoutedEventHandler " Usage="member this.LostFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'elemento perde lo stato attivo logico.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lo stato attivo logico differisce dallo stato attivo della tastiera se lo stato attivo viene forzato intenzionalmente utilizzando una chiamata al metodo ma lo stato attivo della tastiera precedente esiste in un ambito diverso. In questo scenario, viene spostata dello stato attivo della tastiera e l'elemento in cui un <xref:System.Windows.ContentElement.Focus%2A> metodo viene chiamato comunque Ottiene lo stato attivo logico.  
  
 Un'interpretazione più precisa di questo evento è che viene generato quando il valore della <xref:System.Windows.ContentElement.IsFocused%2A> proprietà di un elemento nella route viene cambiata da `true` a `false`.  
  
 Poiché questo evento viene utilizzato il routing di bubbling, l'elemento perde lo stato attivo potrebbe essere un elemento figlio invece dell'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo che ha acquisito lo stato attivo.  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.LostFocusEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.RoutedEventHandler>|  
  
-   Non vi è alcun evento di tunneling corrispondente.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnLostFocus%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.ContentElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.LostFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stato attivo della tastiera non si trova più sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poiché questo evento viene utilizzato il routing di bubbling, l'elemento che ha perso lo stato attivo potrebbe essere un elemento figlio invece dell'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo che perde lo stato attivo.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.LostKeyboardFocus> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.LostKeyboardFocus> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.LostKeyboardFocusEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.LostKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'elemento perde lo stato mouse capture.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un elemento acquisisce il puntatore del mouse, anche se il puntatore si trova di fuori dei limiti riceve l'input del mouse. In genere, il puntatore del mouse viene acquisito solo durante le operazioni di trascinamento e rilascio.  
  
 Poiché questo evento viene utilizzato il routing di bubbling, l'elemento perde lo stato capture potrebbe essere un elemento figlio invece dell'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo che perde l'acquisizione.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.LostMouseCapture> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.LostMouseCapture> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.LostMouseCaptureEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Non vi è alcun evento di tunneling corrispondente definito.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnLostMouseCapture%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.LostMouseCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'elemento non rileva più lo stilo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un elemento acquisisce lo stilo, riceve l'input dello stilo anche se il puntatore si trova di fuori dei limiti. Lo stilo viene rilevato in genere solo durante le operazioni di trascinamento e rilascio.  
  
 Poiché questo evento viene utilizzato il routing di bubbling, l'elemento perde lo stato attivo potrebbe essere un elemento figlio invece dell'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo che perde lo stato attivo.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.LostStylusCapture> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.LostStylusCapture> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.LostStylusCaptureEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Non vi è alcun evento di tunneling corrispondente definito.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnLostStylusCapture%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.LostStylusCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.LostTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.LostTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando questo elemento perde l’acquisizione di un tocco.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.LostTouchCaptureEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.LostTouchCapture" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica alla pressione di qualsiasi pulsante del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.MouseDown> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.MouseDown> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Il <xref:System.Windows.ContentElement.MouseDown> evento viene generato spesso insieme a uno <xref:System.Windows.ContentElement.MouseLeftButtonDown> o <xref:System.Windows.ContentElement.MouseRightButtonDown>, che corrispondono alla pressione di uno dei due pulsanti standard. <xref:System.Windows.ContentElement.MouseLeftButtonDown> e <xref:System.Windows.ContentElement.MouseRightButtonDown> sono anche gli eventi indirizzati, ma sono eventi indirizzati diretti e viene generato l'evento appropriato pulsante specifico quando la <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento raggiunge l'elemento lungo la route dell'evento. Vedere la sezione Osservazioni per <xref:System.Windows.ContentElement.MouseLeftButtonDown> o <xref:System.Windows.ContentElement.MouseRightButtonDown>.  
  
> [!IMPORTANT]
>  Alcuni <xref:System.Windows.ContentElement> le classi derivate che hanno un comportamento simile al controllo, ad esempio, <xref:System.Windows.Documents.Hyperlink>, potrebbe essere intrinseca gestione delle classi per gli eventi del pulsante del mouse. Il pulsante sinistro del mouse evento di selezione è l'evento più probabile per avere in un controllo di gestione delle classi. La classe gestisce spesso contrassegna sottostante <xref:System.Windows.Input.Mouse> classe di evento come gestito. Dopo l'evento è contrassegnato come gestito, altri gestori istanze collegati a tale elemento non vengono generati normalmente. Inoltre non in genere vengono generati tutti gli altri gestori di classe o istanza che sono collegati agli elementi nella direzione bubbling verso la radice dell'albero dell'interfaccia utente.  
  
 È possibile risolvere il problema descritto nella nota Importante precedente e continuare a ricevere <xref:System.Windows.ContentElement.MouseDown> gli eventi per gli eventi in una classe derivata che ha usando una di queste soluzioni di gestione delle classi di selezione del pulsante sinistro del mouse:  
  
-   Collegare i gestori per il <xref:System.Windows.ContentElement.PreviewMouseDown> evento, che non è contrassegnato come gestito dai controlli. Si noti che poiché si tratta di un evento di anteprima, la route inizia alla radice e giunge fino al controllo.  
  
-   Registrare un gestore del controllo a livello di routine chiamando <xref:System.Windows.ContentElement.AddHandler%2A> e scegliendo l'opzione di firma che consente ai gestori in ascolto di eventi, anche se sono già contrassegnati come gestito nei dati dell'evento indirizzato.  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.MouseDownEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewMouseDown>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnMouseDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.MouseDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberSignature Language="F#" Value="member this.MouseEnter : System.Windows.Input.MouseEventHandler " Usage="member this.MouseEnter : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il puntatore del mouse viene spostato all'interno dei limiti dell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.MouseEnter> è un [Cenni preliminari sugli eventi indirizzati](~/docs/framework/wpf/advanced/routed-events-overview.md) che usa la strategia di routing di gestione degli eventi diretto. Gli eventi indirizzati diretti non vengono generati una route; al contrario, vengono gestiti nello stesso elemento in cui vengono generati. Consentono, tuttavia, altri aspetti del comportamento dell'evento indirizzato, ad esempio i trigger di eventi negli stili.  
  
 Sebbene <xref:System.Windows.ContentElement.MouseEnter> rilevi quando il puntatore del mouse entra nell'area di un elemento, questo evento ulteriori letteralmente che i <xref:System.Windows.ContentElement.IsMouseOver%2A> valore della proprietà è stato modificato da `false` per `true` su questo elemento.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.MouseEnter> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.MouseEnter> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.MouseEnterEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnMouseEnter%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.MouseEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : System.Windows.Input.MouseEventHandler " Usage="member this.MouseLeave : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il puntatore del mouse viene spostato all'esterno dei limiti dell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.MouseLeave> è un [Cenni preliminari sugli eventi indirizzati](~/docs/framework/wpf/advanced/routed-events-overview.md) che usa la strategia di routing di gestione degli eventi diretto. Gli eventi indirizzati diretti non vengono generati una route; al contrario, vengono gestiti nello stesso elemento in cui vengono generati. Consentono, tuttavia, altri aspetti del comportamento dell'evento indirizzato, ad esempio i trigger di eventi negli stili.  
  
 Sebbene <xref:System.Windows.ContentElement.MouseLeave> rilevi quando il mouse esce da un elemento, questo evento più letteralmente che i <xref:System.Windows.ContentElement.IsMouseOver%2A> valore della proprietà è stato modificato da `true` per `false` su questo elemento.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.MouseLeave> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.MouseLeave> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.MouseLeaveEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnMouseLeave%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.MouseLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica alla pressione del pulsante sinistro del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anche se ciò [Cenni preliminari sugli eventi indirizzati](~/docs/framework/wpf/advanced/routed-events-overview.md) sembra seguono una route di bubbling attraverso un albero degli elementi, in realtà è un evento indirizzato diretto che viene generato e rigenerato l'albero degli elementi da ogni <xref:System.Windows.ContentElement>.  
  
 Questo evento è uno dei numerosi eventi correlati che indicano le specifiche del pulsante del mouse di un oggetto sottostante <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento, vale a dire un evento associato che viene elaborato da ogni elemento lungo la route di un evento.  
  
 Gli argomenti dell'evento espongono gli elementi dell'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento. Se tale evento è contrassegnato come gestito lungo la route dell'evento, vengono comunque generati eventi specifici del pulsante del mouse. Tuttavia, è necessario aggiungere i gestori di eventi specifici del pulsante del mouse in modo esplicito chiamando <xref:System.Windows.ContentElement.AddHandler%2A>, con l'opzione per gestire gli eventi che sono già contrassegnati come gestiti, in modo da essere listener per l'evento.  
  
 Pensare a livello concettuale, questo evento (e altri eventi del pulsante del mouse su <xref:System.Windows.ContentElement>) da un mouse "servizio" (con la definizione del servizio fornita dal <xref:System.Windows.Input.Mouse> classe). L'evento aggiunge la comodità di non dover controllare gli stati del pulsante del mouse (da sinistra a destra, giù) degli eventi del mouse originale nei dati dell'evento. Per scenari più avanzati, ad esempio la verifica degli stati dei pulsanti non standard, potrebbe essere necessario usare il [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] nella <xref:System.Windows.Input.Mouse> classe anziché quelli su <xref:System.Windows.ContentElement>.  
  
> [!IMPORTANT]
>  Alcuni <xref:System.Windows.ContentElement> le classi derivate che hanno un comportamento simile al controllo, ad esempio, <xref:System.Windows.Documents.Hyperlink>, potrebbe essere intrinseca gestione delle classi per gli eventi del pulsante del mouse. Il pulsante sinistro del mouse evento di selezione è l'evento più probabile per avere in un controllo di gestione delle classi. La classe gestisce spesso contrassegna sottostante <xref:System.Windows.Input.Mouse> classe di evento come gestito. Dopo l'evento è contrassegnato come gestito, altri gestori istanze collegati a tale elemento non vengono generati normalmente. Inoltre non in genere vengono generati tutti gli altri gestori di classe o istanza che sono collegati agli elementi nella direzione bubbling verso la radice dell'albero dell'interfaccia utente.  
  
 È possibile risolvere il problema descritto nella nota Importante precedente e continuare a ricevere <xref:System.Windows.ContentElement.MouseLeftButtonDown> gli eventi per gli eventi in una classe derivata che ha usando una di queste soluzioni di gestione delle classi di selezione del pulsante sinistro del mouse:  
  
-   Collegare i gestori per il <xref:System.Windows.ContentElement.PreviewMouseDown> evento, che non è contrassegnato come gestito dai controlli. Si noti che poiché si tratta di un evento di anteprima, la route inizia alla radice e giunge fino al controllo.  
  
-   Registrare un gestore del controllo a livello di routine chiamando <xref:System.Windows.ContentElement.AddHandler%2A> e scegliendo l'opzione di firma che consente ai gestori in ascolto di eventi, anche se sono già contrassegnati come gestito nei dati dell'evento indirizzato.  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.MouseLeftButtonDownEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al rilascio del pulsante sinistro del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anche se ciò [Cenni preliminari sugli eventi indirizzati](~/docs/framework/wpf/advanced/routed-events-overview.md) sembra seguono una route di bubbling attraverso un albero degli elementi, in realtà è un evento indirizzato diretto che viene generato e rigenerato l'albero degli elementi da ogni <xref:System.Windows.ContentElement>.  
  
 Questo evento è uno dei numerosi eventi correlati che indicano le specifiche del pulsante del mouse di un oggetto sottostante <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento, vale a dire un evento associato che viene elaborato da ogni elemento lungo la route di un evento.  
  
 Gli argomenti dell'evento espongono gli elementi dell'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento. Se tale evento è contrassegnato come gestito lungo la route dell'evento, vengono comunque generati eventi specifici del pulsante del mouse. Tuttavia, è necessario aggiungere i gestori di eventi specifici del pulsante del mouse in modo esplicito chiamando <xref:System.Windows.ContentElement.AddHandler%2A>, con l'opzione per gestire gli eventi che sono già contrassegnati come gestiti, in modo da essere listener per l'evento.  
  
 Pensare a livello concettuale, questo evento (e altri eventi del pulsante del mouse su <xref:System.Windows.ContentElement>) da un mouse "servizio" (con la definizione del servizio fornita dal <xref:System.Windows.Input.Mouse> classe). L'evento aggiunge la comodità di non dover controllare gli stati del pulsante del mouse (da sinistra a destra, giù) degli eventi del mouse originale nei dati dell'evento. Per scenari più avanzati, ad esempio la verifica degli stati dei pulsanti non standard, potrebbe essere necessario usare il [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] nella <xref:System.Windows.Input.Mouse> classe anziché quelli su <xref:System.Windows.ContentElement>.  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.MouseLeftButtonUpEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.MouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito allo spostamento del puntatore del mouse quando è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.MouseMove> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.MouseMove> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.MouseMoveEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewMouseMove>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnMouseMove%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseEnter" />
        <altmember cref="E:System.Windows.ContentElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.MouseMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica alla pressione del pulsante destro del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anche se ciò [Cenni preliminari sugli eventi indirizzati](~/docs/framework/wpf/advanced/routed-events-overview.md) sembra seguono una route di bubbling attraverso un albero degli elementi, in realtà è un evento indirizzato diretto che viene generato e rigenerato l'albero degli elementi da ogni <xref:System.Windows.ContentElement>.  
  
 Questo evento è uno dei numerosi eventi correlati che indicano le specifiche del pulsante del mouse di un oggetto sottostante <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento, vale a dire un evento associato che viene elaborato da ogni elemento lungo la route di un evento.  
  
 Gli argomenti dell'evento espongono gli elementi dell'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento. Se tale evento è contrassegnato come gestito lungo la route dell'evento, vengono comunque generati eventi specifici del pulsante del mouse. Tuttavia, è necessario aggiungere i gestori di eventi specifici del pulsante del mouse in modo esplicito chiamando <xref:System.Windows.ContentElement.AddHandler%2A>, con l'opzione per gestire gli eventi che sono già contrassegnati come gestiti, in modo da essere listener per l'evento.  
  
 Pensare a livello concettuale, questo evento (e altri eventi del pulsante del mouse su <xref:System.Windows.ContentElement>) da un mouse "servizio" (con la definizione del servizio fornita dal <xref:System.Windows.Input.Mouse> classe). L'evento aggiunge la comodità di non dover controllare gli stati del pulsante del mouse (da sinistra a destra, giù) degli eventi del mouse originale nei dati dell'evento. Per scenari più avanzati, ad esempio la verifica degli stati dei pulsanti non standard, potrebbe essere necessario usare il [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] nella <xref:System.Windows.Input.Mouse> classe anziché quelli su <xref:System.Windows.ContentElement>.  
  
 Gli eventi del mouse sul pulsante a destra hanno spesso la gestione nativa in scenari di applicazione. Ad esempio, un pulsante destro del mouse verso il basso potrebbe visualizzare un menu di scelta rapida. Visualizzare [preliminari sull'oggetto ContextMenu](~/docs/framework/wpf/controls/contextmenu-overview.md).  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.MouseRightButtonDownEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.MouseRightButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al rilascio del pulsante destro del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anche se ciò [Cenni preliminari sugli eventi indirizzati](~/docs/framework/wpf/advanced/routed-events-overview.md) sembra seguono una route di bubbling attraverso un albero degli elementi, in realtà è un evento indirizzato diretto che viene generato e rigenerato l'albero degli elementi da ogni <xref:System.Windows.ContentElement>.  
  
 Questo evento è uno dei numerosi eventi correlati che indicano le specifiche del pulsante del mouse di un oggetto sottostante <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento, vale a dire un evento associato che viene elaborato da ogni elemento lungo la route di un evento.  
  
 Gli argomenti dell'evento espongono gli elementi dell'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento. Se tale evento è contrassegnato come gestito lungo la route dell'evento, vengono comunque generati eventi specifici del pulsante del mouse. Tuttavia, è necessario aggiungere i gestori di eventi specifici del pulsante del mouse in modo esplicito chiamando <xref:System.Windows.ContentElement.AddHandler%2A>, con l'opzione per gestire gli eventi che sono già contrassegnati come gestiti, in modo da essere listener per l'evento.  
  
 Pensare a livello concettuale, questo evento (e altri eventi del pulsante del mouse su <xref:System.Windows.ContentElement>) da un mouse "servizio" (con la definizione del servizio fornita dal <xref:System.Windows.Input.Mouse> classe). L'evento aggiunge la comodità di non dover controllare gli stati del pulsante del mouse (da sinistra a destra, giù) degli eventi del mouse originale nei dati dell'evento. Per scenari più avanzati, ad esempio la verifica degli stati dei pulsanti non standard, potrebbe essere necessario usare il [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] nella <xref:System.Windows.Input.Mouse> classe anziché quelli su <xref:System.Windows.ContentElement>.  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.MouseRightButtonUpEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.MouseRightButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al rilascio di qualsiasi pulsante del mouse sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.MouseUp> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.MouseUp> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Il <xref:System.Windows.ContentElement.MouseUp> evento viene generato spesso insieme a uno <xref:System.Windows.ContentElement.MouseLeftButtonUp> o <xref:System.Windows.ContentElement.MouseRightButtonUp>, che corrispondono a una versione di uno dei due pulsanti standard. <xref:System.Windows.ContentElement.MouseLeftButtonUp> e <xref:System.Windows.ContentElement.MouseRightButtonUp> sono anche gli eventi indirizzati, ma sono eventi indirizzati diretti e viene generato l'evento appropriato pulsante specifico quando la <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento raggiunge l'elemento lungo la route dell'evento. Vedere la sezione Osservazioni per <xref:System.Windows.ContentElement.MouseLeftButtonUp> o <xref:System.Windows.ContentElement.MouseRightButtonUp>.  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.MouseUpEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewMouseUp>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnMouseUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.MouseUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberSignature Language="F#" Value="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito alla rotazione della rotellina del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lo stato attivo o passare il mouse capture hanno la precedenza su dove è il puntatore del mouse; Pertanto, se si riceve il <xref:System.Windows.ContentElement.MouseWheel> evento da un elemento con lo stato attivo o acquisito, il puntatore del mouse effettivamente potrebbe trovarsi su un altro elemento.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.MouseWheel> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.MouseWheel> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.MouseWheelEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewMouseWheel>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnMouseWheel%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.MouseWheel" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="abstract member MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool&#xA;override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="contentElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">Richiesta di attraversamento, contenente una proprietà che indica una modalità per passare avanti nell'ordine di tabulazione esistente o una direzione per spostarsi visivamente.</param>
        <summary>Tenta di spostare lo stato attivo da questo elemento a un altro elemento. La direzione di spostamento dello stato attivo è specificata da linee guida che vengono interpretate nell'organizzazione del padre visuale per questo elemento.</summary>
        <returns>
          <see langword="true" /> se viene eseguito l'attraversamento richiesto; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Accertarsi di controllare il valore restituito di questo metodo. Valore restituito di `false` potrebbe essere restituito se l'attraversamento viene eseguito in un punto di tabulazione definita dalla composizione di un controllo e la richiesta di attraversamento non è stato richiesto per eseguire il wrapping.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer&#xA;override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="contentElement.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce implementazioni di <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> specifiche della classe per l'infrastruttura di [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].</summary>
        <returns>Implementazione di <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> specifica del tipo.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>L'implementazione di questo metodo viene in genere per chiamare il costruttore di uno specifico <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementazione e lo restituisce come valore restituito.  
  
Tutti i <see cref="T:System.Windows.ContentElement" /> alle classi derivate devono implementare questo metodo per fornire le proprie specifiche <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementazioni per le [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastruttura. Per informazioni dettagliate sull'implementazione di questo modello, vedere <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.DragEnter" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.DragLeave" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.DragOver" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDrop : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.DragEnter" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="contentElement.OnGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.GiveFeedbackEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.GiveFeedback" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="contentElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.RoutedEventArgs" /> in cui sono contenuti i dati dell'evento. Questi dati dell'evento devono contenere l'identificatore dell'evento <see cref="E:System.Windows.ContentElement.GotFocus" />.</param>
        <summary>Genera l'evento indirizzato <see cref="E:System.Windows.ContentElement.GotFocus" /> usando i dati degli eventi forniti.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo, anche se virtuale, dispone di un'implementazione predefinita che genera l'evento.  
  
 Questa operazione, scegliere * implementazione del metodo deve generare l'evento e l'implementazione del metodo viene chiamata internamente per generare l'evento quando il <xref:System.Windows.ContentElement.IsFocused%2A> modifiche dei valori di proprietà. Il <xref:System.Windows.ContentElement.OnGotFocus%2A> implementazione è diversa da un altro [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] su * implementazioni, che forniscono solo un modo pratico per aggiungere la gestione per l'evento della classe.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>A meno che non si ha l'esigenza intenzionale e insolito per non generare gli eventi dello stato attivo, assicurarsi che l'implementazione chiama l'implementazione di base. In caso contrario, il <see cref="E:System.Windows.ContentElement.GotFocus" /> evento non viene generato durante le operazioni utente tipico che in genere impostano lo stato attivo su questo elemento. Se non si intende l'elemento per essere attivabile, è possibile impedire l'elemento attivabile e impostando <see cref="P:System.Windows.ContentElement.Focusable" /> a <see langword="false" />. Si noti che per impostazione predefinita un <see cref="P:System.Windows.ContentElement.Focusable" /> non è attivabile, pertanto l'impostazione <see cref="P:System.Windows.ContentElement.Focusable" /> deliberatamente potrebbe non essere necessaria.</para>
        </block>
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
        <altmember cref="E:System.Windows.ContentElement.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="contentElement.OnGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnGotMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnGotStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnGotTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato <see cref="E:System.Windows.ContentElement.GotTouchCapture" /> che si verifica quando un tocco viene acquisito nell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> metodo presenta alcuna implementazione predefinita. Eseguire l'override <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> in una classe derivata per gestire il <xref:System.Windows.ContentElement.GotTouchCapture> evento. Assicurarsi di chiamare la classe di base <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> metodo in modo che le classi base ricevere l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsKeyboardFocusedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato quando un evento <see cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" /> non gestito viene generato in questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo virtuale viene generato quando il valore della <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> le modifiche alle proprietà di dipendenza. Il metodo virtuale viene generato prima di tutto e può modificare i dati dell'evento in base alle esigenze. Il <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> evento viene generato con la stessa istanza di dati evento. Si noti che il <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> evento non è un evento indirizzato. È pertanto, non è possibile contrassegnarlo come gestito nel gestore della classe.  
  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsKeyboardFocusWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato immediatamente prima della generazione dell'evento <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /> da questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo virtuale viene generato quando il valore della <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> cambia il valore di proprietà di dipendenza. Il metodo virtuale viene generato prima di tutto e può modificare i dati dell'evento in base alle esigenze. Il <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> evento viene generato con la stessa istanza di dati evento. Si noti che il <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> evento non è un evento indirizzato. È pertanto, non è possibile contrassegnarlo come gestito nel gestore della classe.  
  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsMouseCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato quando un evento <see cref="E:System.Windows.ContentElement.IsMouseCapturedChanged" /> non gestito viene generato in questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo virtuale viene generato quando il valore della <xref:System.Windows.ContentElement.IsMouseCaptured%2A> cambia il valore di proprietà di dipendenza. Il metodo virtuale viene generato prima di tutto e può modificare i dati dell'evento in base alle esigenze. Il <xref:System.Windows.ContentElement.IsMouseCapturedChanged> evento viene generato con la stessa istanza di dati evento. Si noti che il <xref:System.Windows.ContentElement.IsMouseCapturedChanged> evento non è un evento indirizzato. È pertanto, non è possibile contrassegnarlo come gestito nel gestore della classe.  
  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsMouseCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato quando un evento <see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /> non gestito viene generato in questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Questo metodo virtuale viene generato quando il valore della <see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /> cambia il valore di proprietà di dipendenza. Il metodo virtuale viene generato prima di tutto e può modificare i dati dell'evento in base alle esigenze. Il <see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /> evento viene generato con la stessa istanza di dati evento. Si noti che l'evento non è un evento indirizzato. È pertanto, non è possibile contrassegnarlo come gestito nel gestore della classe.  
  
Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsMouseDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato quando un evento <see cref="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged" /> non gestito viene generato in questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo virtuale viene generato quando il valore della <xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A> cambia il valore di proprietà di dipendenza. Il metodo virtuale viene generato prima di tutto e può modificare i dati dell'evento in base alle esigenze. Il <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> evento viene generato con la stessa istanza di dati evento. Si noti che il <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> evento non è un evento indirizzato. È pertanto, non è possibile contrassegnarlo come gestito nel gestore della classe.  
  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsStylusCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato quando un evento <see cref="E:System.Windows.ContentElement.IsStylusCapturedChanged" /> non gestito viene generato in questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo virtuale viene generato quando il valore della <xref:System.Windows.ContentElement.IsStylusCaptured%2A> cambia il valore di proprietà di dipendenza. Il metodo virtuale viene generato prima di tutto e può modificare i dati dell'evento in base alle esigenze. Il <xref:System.Windows.ContentElement.IsStylusCapturedChanged> evento viene generato con la stessa istanza di dati evento. Si noti che l'evento non è un evento indirizzato. È pertanto, non è possibile contrassegnarlo come gestito nel gestore della classe.  
  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsStylusCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato quando un evento <see cref="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged" /> non gestito viene generato in questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo virtuale viene generato quando il valore della <xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A> cambia il valore di proprietà di dipendenza. Il metodo virtuale viene generato prima di tutto e può modificare i dati dell'evento in base alle esigenze. Il <xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged> evento viene generato con la stessa istanza di dati evento. Si noti che l'evento non è un evento indirizzato. È pertanto, non è possibile contrassegnarlo come gestito nel gestore della classe.  
  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsStylusDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato quando un evento <see cref="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged" /> non gestito viene generato in questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo virtuale viene generato quando il valore della <xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A> cambia il valore di proprietà di dipendenza. Il metodo virtuale viene generato prima di tutto e può modificare i dati dell'evento in base alle esigenze. Il <xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged> evento viene generato con la stessa istanza di dati evento. Si noti che l'evento non è un evento indirizzato. È pertanto non è possibile contrassegnarlo come gestito nel gestore della classe.  
  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="contentElement.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.KeyEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le sequenze di tasti vengono gestiti da un gestore di input dedicato. Altre funzionalità di programmazione che si basano su sequenze di tasti, ad esempio, le associazioni di input e di comando, può gestire la sequenza di tasti prima che sia esposta come una sequenza di tasti generale. Se queste funzionalità del sistema contrassegnano l'evento come gestito, quindi di input <xref:System.Windows.ContentElement.OnKeyDown%2A> non viene richiamato.  
  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="contentElement.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.KeyEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le sequenze di tasti vengono gestiti da un gestore di input dedicato. Altre funzionalità di programmazione che si basano su sequenze di tasti, ad esempio, le associazioni di input e di comando, può gestire la sequenza di tasti prima che sia esposta come una sequenza di tasti generale. Se queste funzionalità del sistema contrassegnano l'evento come gestito, quindi di input <xref:System.Windows.ContentElement.OnKeyUp%2A> non viene richiamato.  
  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="contentElement.OnLostFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.RoutedEventArgs" /> in cui sono contenuti i dati dell'evento. Questi dati dell'evento devono contenere l'identificatore dell'evento <see cref="E:System.Windows.ContentElement.LostFocus" />.</param>
        <summary>Genera l'evento indirizzato <see cref="E:System.Windows.ContentElement.LostFocus" /> usando i dati degli eventi forniti.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo, anche se virtuale, dispone di un'implementazione predefinita che genera l'evento.  
  
 Questa operazione, scegliere * implementazione del metodo deve generare l'evento e l'implementazione del metodo viene chiamata internamente per generare l'evento quando il <xref:System.Windows.ContentElement.IsFocused%2A> modifiche dei valori di proprietà. Questa implementazione è diversa da un altro [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] su * implementazioni, che forniscono solo un modo pratico per aggiungere la gestione per l'evento della classe.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>A meno che non si ha l'esigenza intenzionale e insolito per non generare gli eventi dello stato attivo, assicurarsi che l'implementazione chiama l'implementazione di base. In caso contrario, il <see cref="E:System.Windows.ContentElement.LostFocus" /> evento non viene generato durante le operazioni utente tipico che in genere impostano lo stato attivo su questo elemento. Se non si intende l'elemento per essere attivabile, è possibile impedire l'elemento attivabile e impostando <see cref="P:System.Windows.ContentElement.Focusable" /> a <see langword="false" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="contentElement.OnLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnLostMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnLostStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnLostTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato<see cref="E:System.Windows.ContentElement.LostTouchCapture" /> che si verifica quando l'elemento perde l'acquisizione di un tocco.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> metodo presenta alcuna implementazione predefinita. Eseguire l'override <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> in una classe derivata per gestire il <xref:System.Windows.ContentElement.LostTouchCapture> evento. Assicurarsi di chiamare la classe di base <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> metodo in modo che le classi base ricevere l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. Questi dati dell'evento contengono informazioni dettagliate sul pulsante del mouse che è stato premuto e sullo stato gestito.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.MouseDown" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Azioni dei pulsanti del mouse vengono gestite anche tramite un gestore di input dedicato. Altre funzionalità di programmazione che si basano su azioni dei pulsanti del mouse, ad esempio di input e di associazioni di comandi, può richiamare i gestori per l'azione prima che sia esposta come un'azione sul pulsante del mouse generale. Se questi input contrassegno di funzionalità del sistema di <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento come gestito, <xref:System.Windows.ContentElement.OnMouseDown%2A> non viene richiamato.  
  
 Se si usa questo gestore classi per contrassegnare l'evento come gestito, potrebbe influire sugli eventi seguenti: <xref:System.Windows.ContentElement.MouseLeftButtonDown> e <xref:System.Windows.ContentElement.MouseRightButtonDown>. Uno di questi eventi possono essere generato su elemento ricevente quando <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> viene ricevuto.  
  
 Se si contrassegna questo evento come gestito nella gestione delle classi, secondari vengono comunque generati; Tuttavia, passano lo stato gestito nei dati dell'evento. Se l'evento viene gestito nella gestione delle classi, a meno che non si scelga esplicitamente non vengono richiamati i gestori di istanze per gli eventi secondari <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> con `handledEventsToo` `true` per associare i gestori. I gestori classi non vengono richiamati anche a meno che non sono stati registrati i gestori di classi con il <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma con `handledEventsToo` `true`. Gestendo <xref:System.Windows.ContentElement.OnMouseDown%2A>, si intende che la gestione delle classi di tutti i possibili pulsanti del mouse verso il basso le azioni. Questo comportamento potrebbe risultare indesiderato; Pertanto, prestare attenzione quando si usa questo metodo virtuale per contrassegnare gli eventi come gestiti.  
  
 Ognuno degli eventi diretti di specifici pulsante dispone anche di una virtuale su *; (metodo) prendere in considerazione se si esegue l'override di questi gestori classi specifiche pulsante potrebbe essere più appropriato.  
  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Richiamato quando viene generato un evento associato <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> non gestito per questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato, con una strategia di routing diretto. Contrassegnare l'evento come gestito è ancora utile per impedire che i gestori istanze comuni (quelli che non specificano `handledEventsToo`) da cui viene richiamato.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Richiamato quando viene generato un evento associato <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> non gestito per questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato, con una strategia di routing diretto. Contrassegnare l'evento come gestito è ancora utile per impedire che i gestori istanze comuni (quelli che non specificano `handledEventsToo`) da cui viene richiamato.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che è stato premuto il pulsante sinistro del mouse.</param>
        <summary>Richiamato quando viene generato un evento indirizzato <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /> non gestito per questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.MouseLeftButtonDown> eventi apparentemente percorre una route di bubbling, in realtà viene trasferito in modo indiretto. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> è l'evento sottostante che viene indirizzata a bolle e ognuno <xref:System.Windows.ContentElement> lungo l'evento route utilizza la gestione identica per generare l'evento indirizzato diretta <xref:System.Windows.ContentElement.MouseLeftButtonDown>. Sebbene sia possibile contrassegnare il <xref:System.Windows.ContentElement.MouseLeftButtonDown> evento come gestito per scopi di questo elemento, lo stato gestito non viene trasmesso agli altri elementi lungo la route dell'evento. Tuttavia, è possibile contrassegnare l'evento come gestito per evitare che i gestori di istanze generali (quelli che non ha specificato `handledEventsToo`) da cui viene richiamato.  
  
 L'implementazione predefinita per la gestione degli eventi di mouse generali <xref:System.Windows.ContentElement> attende <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> e lo converte in un evento locale appropriato. Se si desidera eseguire l'override di questa logica, è necessario creare una classe derivata. Nel costruttore statico della classe derivata, registra un gestore classi alternativo per <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. Non è possibile modificare il comportamento di gestione del mouse <xref:System.Windows.ContentElement> eseguendo l'override <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>.  
  
 In alternativa, è possibile eseguire l'override di questo metodo per modificare una gestione degli eventi per uno stato specifico del mouse. Se si sceglie di chiamare l'implementazione di base varia a seconda dello scenario. Impossibilità di richiamare base disabilita la gestione dell'input predefinito per l'evento del mouse sulle classi predecessore che prevedono anche per richiamare <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>. Ad esempio, è possibile derivare da <xref:System.Windows.Controls.Button> ed eseguire l'override <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> nella classe derivata senza chiamare l'implementazione di base; tuttavia, questo esegue l'override disabilita il <xref:System.Windows.Controls.Primitives.ButtonBase.Click> evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che è stato rilasciato il pulsante sinistro del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.MouseLeftButtonUp> eventi apparentemente percorre una route di bubbling, in realtà viene trasferito in modo indiretto. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> è l'evento sottostante che viene indirizzata a bolle e ognuno <xref:System.Windows.ContentElement> lungo l'evento route utilizza la gestione identica per generare l'evento indirizzato diretta <xref:System.Windows.ContentElement.MouseLeftButtonUp>. Sebbene sia possibile contrassegnare il <xref:System.Windows.ContentElement.MouseLeftButtonUp> evento come gestito per scopi di questo elemento, lo stato gestito non viene trasmesso agli altri elementi lungo la route dell'evento. Tuttavia, è possibile contrassegnare l'evento come gestito per evitare che i gestori di istanze generali (quelli che non ha specificato `handledEventsToo`) da cui viene richiamato.  
  
 L'implementazione predefinita per la gestione degli eventi di mouse generali <xref:System.Windows.ContentElement> attende <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> e lo converte in un evento locale appropriato. Se si desidera eseguire l'override di questa logica, è necessario creare una classe derivata. Nel costruttore statico della classe derivata, registra un gestore classi alternativo per <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. Non è possibile modificare il comportamento di gestione del mouse <xref:System.Windows.ContentElement> eseguendo l'override <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.MouseMove" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che è stato premuto il pulsante destro del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato <see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.MouseRightButtonDown> eventi apparentemente percorre una route di bubbling, in realtà viene trasferito in modo indiretto. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> è l'evento sottostante che viene indirizzata a bolle e ognuno <xref:System.Windows.ContentElement> lungo l'evento route utilizza la gestione identica per generare l'evento indirizzato diretta <xref:System.Windows.ContentElement.MouseRightButtonDown>. Sebbene sia possibile contrassegnare il <xref:System.Windows.ContentElement.MouseRightButtonDown> evento come gestito per scopi di questo elemento, lo stato gestito non viene trasmesso agli altri elementi lungo la route dell'evento. Tuttavia, è possibile contrassegnare l'evento come gestito per evitare che i gestori di istanze generali (quelli che non ha specificato `handledEventsToo`) da cui viene richiamato.  
  
 L'implementazione predefinita per la gestione degli eventi di mouse generali <xref:System.Windows.ContentElement> attende <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> e lo converte in un evento locale appropriato. Se si desidera eseguire l'override di questa logica, è necessario creare una classe derivata. Nel costruttore statico della classe derivata, registra un gestore classi alternativo per <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. Non è possibile modificare il comportamento di gestione del mouse <xref:System.Windows.ContentElement> eseguendo l'override <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>.  
  
 In alternativa, è possibile eseguire l'override di questo metodo per modificare una gestione degli eventi per uno stato specifico del mouse. Se si sceglie di chiamare l'implementazione di base varia a seconda dello scenario. Impossibilità di richiamare base disabilita la gestione dell'input predefinito per l'evento del mouse sulle classi predecessore che prevedono anche per richiamare <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>. Ad esempio, è possibile derivare da <xref:System.Windows.Controls.Control> ed eseguire l'override <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> nella classe derivata senza base chiama; tuttavia, questo override disabilita i servizi di menu di scelta rapida del controllo, che fanno parte di <xref:System.Windows.Controls.Control> il comportamento predefinito.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che è stato rilasciato il pulsante destro del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato <see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.MouseRightButtonUp> eventi apparentemente percorre una route di bubbling, in realtà viene trasferito in modo indiretto. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> è l'evento sottostante che viene indirizzata a bolle e ognuno <xref:System.Windows.ContentElement> lungo l'evento route utilizza la gestione identica per generare l'evento indirizzato diretta <xref:System.Windows.ContentElement.MouseRightButtonUp>. Sebbene sia possibile contrassegnare il <xref:System.Windows.ContentElement.MouseRightButtonUp> evento come gestito per scopi di questo elemento, lo stato gestito non viene trasmesso agli altri elementi lungo la route dell'evento. Tuttavia, è possibile contrassegnare l'evento come gestito per evitare che i gestori di istanze generali (quelli che non ha specificato `handledEventsToo`) da cui viene richiamato.  
  
 L'implementazione predefinita per la gestione degli eventi di mouse generali <xref:System.Windows.ContentElement> attende <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> e lo converte in un evento locale appropriato. Se si desidera eseguire l'override di questa logica, è necessario creare una classe derivata. Nel costruttore statico della classe derivata, registra un gestore classi alternativo per <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. Non è possibile modificare il comportamento di gestione del mouse <xref:System.Windows.ContentElement> eseguendo l'override <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. Nei dati degli eventi è indicato che è stato rilasciato il pulsante del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato <see cref="E:System.Windows.Input.Mouse.MouseUp" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Azioni dei pulsanti del mouse vengono gestite anche tramite un gestore di input dedicato. Altre funzionalità di programmazione che si basano su azioni dei pulsanti del mouse, ad esempio di input e di associazioni di comandi, può richiamare i gestori per l'azione prima che sia esposta come un'azione sul pulsante del mouse generale. Se questi input contrassegno di funzionalità del sistema di <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento come gestito, <xref:System.Windows.ContentElement.OnMouseUp%2A> non viene richiamato.  
  
 Se si usa questo gestore classi per contrassegnare l'evento come gestito, potrebbe influire sugli eventi seguenti: <xref:System.Windows.ContentElement.MouseLeftButtonUp> e <xref:System.Windows.ContentElement.MouseRightButtonUp>. Uno di questi eventi potrebbero essere generato nell'elemento ricevente quando <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> viene ricevuto.  
  
 Se si contrassegna questo evento come gestito nella gestione delle classi, secondari vengono comunque generati; Tuttavia, passano lo stato gestito nei dati dell'evento. Se l'evento viene gestito nella gestione delle classi, a meno che non si scelga esplicitamente non vengono richiamati i gestori di istanze per gli eventi secondari <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> con `handledEventsToo` `true` per associare i gestori. I gestori classi non vengono richiamati anche a meno che non sono stati registrati i gestori di classi con il <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma con `handledEventsToo` `true`. Gestendo <xref:System.Windows.ContentElement.OnMouseUp%2A>, si intende che la gestione delle classi di tutti i pulsanti del mouse possibili azioni. Questo comportamento potrebbe risultare indesiderato; Pertanto, prestare attenzione quando si usa questo metodo virtuale per contrassegnare gli eventi come gestiti.  
  
 Ognuno degli eventi diretti di specifici pulsante dispone anche di una virtuale su *; (metodo) prendere in considerazione se si esegue l'override di questi gestori classi specifiche pulsante potrebbe essere più appropriato.  
  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="contentElement.OnMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnPreviewDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario che è specifico per gli eventi di anteprima è per contrassegnarli gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnPreviewDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario che è specifico per gli eventi di anteprima è per contrassegnarli gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnPreviewDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario che è specifico per gli eventi di anteprima è per contrassegnarli gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnPreviewDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.PreviewDrop" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario che è specifico per gli eventi di anteprima è per contrassegnarli gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="contentElement.OnPreviewGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.GiveFeedbackEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario che è specifico per gli eventi di anteprima è per contrassegnarli gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="contentElement.OnPreviewGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario che è specifico per gli eventi di anteprima è per contrassegnarli gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="contentElement.OnPreviewKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.KeyEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario che è specifico per gli eventi di anteprima è per contrassegnarli gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="contentElement.OnPreviewKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.KeyEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario che è specifico per gli eventi di anteprima è per contrassegnarli gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="contentElement.OnPreviewLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario che è specifico per gli eventi di anteprima è per contrassegnarli gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che sono stati premuti uno o più pulsanti del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato associato <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Azioni dei pulsanti del mouse vengono gestite anche tramite un gestore di input dedicato. Altre funzionalità di programmazione che si basano su azioni dei pulsanti del mouse, ad esempio di input e di associazioni di comandi, può richiamare i gestori per l'azione prima che sia esposta come un'azione sul pulsante del mouse generale. Se questi input contrassegno di funzionalità del sistema di <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento come gestito, <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> non viene richiamato.  
  
 Se si usa questo gestore classi per contrassegnare l'evento come gestito, potrebbe influire sugli eventi seguenti: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> e <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>. Uno di questi eventi possono essere generato su elemento ricevente quando <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> viene ricevuto.  
  
 Se si contrassegna questo evento come gestito nella gestione delle classi, secondari vengono comunque generati; Tuttavia, passano lo stato gestito nei dati dell'evento. Se l'evento viene gestito nella gestione delle classi, a meno che non si scelga esplicitamente non vengono richiamati i gestori di istanze per gli eventi secondari <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> con `handledEventsToo` `true` per associare i gestori. I gestori classi non vengono richiamati anche a meno che non sono stati registrati i gestori di classi con il <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma con `handledEventsToo` `true`. Gestendo <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A>, si intende che la gestione delle classi di tutti i possibili pulsanti del mouse verso il basso le azioni. Questo comportamento potrebbe risultare indesiderato; Pertanto, prestare attenzione quando si usa questo metodo virtuale per contrassegnare gli eventi come gestiti.  
  
 Ognuno degli eventi diretti di specifici pulsante dispone anche di una virtuale su *; (metodo) prendere in considerazione se si esegue l'override di questi gestori classi specifiche pulsante potrebbe essere più appropriato.  
  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario che è specifico per gli eventi di anteprima è per contrassegnarli gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che è stato premuto il pulsante sinistro del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> eventi apparentemente percorre una route di tunneling, in realtà viene trasferito in modo indiretto. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> è l'evento sottostante che viene indirizzato di tunneling e ognuno <xref:System.Windows.ContentElement> lungo l'evento route utilizza la gestione identica per generare l'evento indirizzato diretta <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>. Sebbene sia possibile contrassegnare il <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> evento come gestito per scopi di questo elemento, lo stato gestito non viene trasmesso agli altri elementi lungo la route dell'evento. Tuttavia, è possibile contrassegnare l'evento come gestito per evitare che i gestori di istanze generali (quelli che non ha specificato `handledEventsToo`) da cui viene richiamato.  
  
 L'implementazione predefinita per la gestione degli eventi di mouse generali <xref:System.Windows.ContentElement> attende <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> e lo converte in un evento locale appropriato. Se si desidera eseguire l'override di questa logica, è necessario creare una classe derivata. Nel costruttore statico della classe derivata, registra un gestore classi alternativo per <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. Non è possibile modificare il comportamento di gestione del mouse <xref:System.Windows.ContentElement> eseguendo l'override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>.  
  
 In alternativa, è possibile eseguire l'override di questo metodo per modificare una gestione degli eventi per uno stato specifico del mouse. Se si sceglie di chiamare l'implementazione di base varia a seconda dello scenario. Impossibilità di richiamare base disabilita la gestione dell'input predefinito per l'evento del mouse sulle classi predecessore che prevedono anche per richiamare <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>. Ad esempio, è possibile derivare da <xref:System.Windows.Controls.Button> ed eseguire l'override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> nella classe derivata senza chiamare l'implementazione di base; tuttavia, questo esegue l'override disabilita il <xref:System.Windows.Controls.Primitives.ButtonBase.Click> evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che è stato rilasciato il pulsante sinistro del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> eventi apparentemente percorre una route di tunneling, in realtà viene trasferito in modo indiretto. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> è l'evento sottostante che viene indirizzato di tunneling e ognuno <xref:System.Windows.ContentElement> lungo l'evento route utilizza la gestione identica per generare l'evento indirizzato diretta <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>. Sebbene sia possibile contrassegnare il <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> evento come gestito per scopi di questo elemento, lo stato gestito non viene trasmesso agli altri elementi lungo la route dell'evento. Tuttavia, è possibile contrassegnare l'evento come gestito per evitare che i gestori di istanze generali (quelli che non ha specificato `handledEventsToo`) da cui viene richiamato.  
  
 L'implementazione predefinita per la gestione degli eventi di mouse generali <xref:System.Windows.ContentElement> attende <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> e lo converte in un evento locale appropriato. Se si desidera eseguire l'override di questa logica, è necessario creare una classe derivata. Nel costruttore statico della classe derivata, registra un gestore classi alternativo per <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. Non è possibile modificare il comportamento di gestione del mouse <xref:System.Windows.ContentElement> eseguendo l'override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario che è specifico per gli eventi di anteprima è per contrassegnarli gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che è stato premuto il pulsante destro del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> eventi apparentemente percorre una route di tunneling, in realtà viene trasferito in modo indiretto. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> è l'evento sottostante che viene indirizzato di tunneling e ognuno <xref:System.Windows.ContentElement> lungo l'evento route utilizza la gestione identica per generare l'evento indirizzato diretta <xref:System.Windows.ContentElement.MouseRightButtonDown>. Sebbene sia possibile contrassegnare il <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> evento come gestito per scopi di questo elemento, lo stato gestito non viene trasmesso agli altri elementi lungo la route dell'evento. Tuttavia, è possibile contrassegnare l'evento come gestito per evitare che i gestori di istanze generali (quelli che non ha specificato `handledEventsToo`) da cui viene richiamato.  
  
 L'implementazione predefinita per la gestione degli eventi di mouse generali <xref:System.Windows.ContentElement> attende <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> e lo converte in un evento locale appropriato. Se si desidera eseguire l'override di questa logica, è necessario creare una classe derivata. Nel costruttore statico della classe derivata, registra un gestore classi alternativo per <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. Non è possibile modificare il comportamento di gestione del mouse <xref:System.Windows.ContentElement> eseguendo l'override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>.  
  
 In alternativa, è possibile eseguire l'override di questo metodo per modificare una gestione degli eventi per uno stato specifico del mouse. Se si sceglie di chiamare l'implementazione di base varia a seconda dello scenario. Impossibilità di richiamare base disabilita la gestione dell'input predefinito per l'evento del mouse sulle classi predecessore che prevedono anche per richiamare <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>. Ad esempio, è possibile derivare da <xref:System.Windows.Controls.Control> ed eseguire l'override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> nella classe derivata senza base chiama; tuttavia, questo override disabilita i servizi di menu di scelta rapida del controllo, che fanno parte di <xref:System.Windows.Controls.Control> il comportamento predefinito.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che è stato rilasciato il pulsante destro del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> eventi apparentemente percorre una route di tunneling, in realtà viene trasferito in modo indiretto. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> è l'evento sottostante che viene indirizzato di tunneling e ognuno <xref:System.Windows.ContentElement> lungo l'evento route utilizza la gestione identica per generare l'evento indirizzato diretta <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>. Sebbene sia possibile contrassegnare il <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> evento come gestito per scopi di questo elemento, lo stato gestito non viene trasmesso agli altri elementi lungo la route dell'evento. Tuttavia, è possibile contrassegnare l'evento come gestito per evitare che i gestori di istanze generali (quelli che non ha specificato `handledEventsToo`) da cui viene richiamato.  
  
 L'implementazione predefinita per la gestione degli eventi di mouse generali <xref:System.Windows.ContentElement> attende <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> e lo converte in un evento locale appropriato. Se si desidera eseguire l'override di questa logica, è necessario creare una classe derivata. Nel costruttore statico della classe derivata, registra un gestore classi alternativo per <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. Non è possibile modificare il comportamento di gestione del mouse <xref:System.Windows.ContentElement> eseguendo l'override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. Nei dati degli eventi è indicato che stato rilasciato uno o più pulsanti del mouse.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Azioni dei pulsanti del mouse vengono gestite anche tramite un gestore di input dedicato. Altre funzionalità di programmazione che si basano su azioni dei pulsanti del mouse, ad esempio di input e di associazioni di comandi, può richiamare i gestori per l'azione prima che sia esposta come un'azione sul pulsante del mouse generale. Se questi input contrassegno di funzionalità del sistema di <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento come gestito, <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> non viene richiamato.  
  
 Se si usa questo gestore classi per contrassegnare l'evento come gestito, potrebbe influire sugli eventi seguenti: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> e <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>. Uno di questi eventi potrebbero essere generato nell'elemento ricevente quando <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> viene ricevuto.  
  
 Se si contrassegna questo evento come gestito nella gestione delle classi, secondari vengono comunque generati; Tuttavia, passano lo stato gestito nei dati dell'evento. Se l'evento viene gestito nella gestione delle classi, a meno che non si scelga esplicitamente non vengono richiamati i gestori di istanze per gli eventi secondari <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> con `handledEventsToo` `true` per associare i gestori. I gestori classi non vengono richiamati anche a meno che non sono stati registrati i gestori di classi con il <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma con `handledEventsToo` `true`. Gestendo <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A>, si intende che la gestione delle classi di tutti i pulsanti del mouse possibili azioni. Questo comportamento potrebbe risultare indesiderato; Pertanto, prestare attenzione quando si usa questo metodo virtuale per contrassegnare gli eventi come gestiti.  
  
 Ognuno degli eventi diretti di specifici pulsante dispone anche di una virtuale su *; (metodo) prendere in considerazione se si esegue l'override di questi gestori classi specifiche pulsante potrebbe essere più appropriato.  
  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario che è specifico per gli eventi di anteprima è per contrassegnarli gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="contentElement.OnPreviewQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.QueryContinueDragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario che è specifico per gli eventi di anteprima è per contrassegnarli gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario che è specifico per gli eventi di anteprima è per contrassegnarli gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario che è specifico per gli eventi di anteprima è per contrassegnarli gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusDownEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario che è specifico per gli eventi di anteprima è per contrassegnarli gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario che è specifico per gli eventi di anteprima è per contrassegnarli gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario che è specifico per gli eventi di anteprima è per contrassegnarli gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario che è specifico per gli eventi di anteprima è per contrassegnarli gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario che è specifico per gli eventi di anteprima è per contrassegnarli gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario che è specifico per gli eventi di anteprima è per contrassegnarli gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario che è specifico per gli eventi di anteprima è per contrassegnarli gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="contentElement.OnPreviewTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario che è specifico per gli eventi di anteprima è per contrassegnarli gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.ContentElement.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnPreviewTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato<see cref="E:System.Windows.ContentElement.PreviewTouchDown" /> che si verifica quando un tocco preme l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> metodo presenta alcuna implementazione predefinita. Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> in una classe derivata per gestire il <xref:System.Windows.ContentElement.PreviewTouchDown> evento. Assicurarsi di chiamare la classe di base <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> metodo in modo che le classi base ricevere l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnPreviewTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewTouchMove" /> che viene generato quando un tocco si sposta all'interno di questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> metodo presenta alcuna implementazione predefinita. Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> in una classe derivata per gestire il <xref:System.Windows.ContentElement.PreviewTouchMove> evento. Assicurarsi di chiamare la classe di base <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> metodo in modo che le classi base ricevere l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnPreviewTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewTouchUp" /> che viene generato quando un tocco viene rilasciato all'interno di questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> metodo presenta alcuna implementazione predefinita. Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> in una classe derivata per gestire il <xref:System.Windows.ContentElement.PreviewTouchUp> evento. Assicurarsi di chiamare la classe di base <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> metodo in modo che le classi base ricevere l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected internal virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="contentElement.OnQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.QueryContinueDragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected internal virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit&#xA;override this.OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit" Usage="contentElement.OnQueryCursor e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="contentElement.OnStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="contentElement.OnStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="contentElement.OnStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusDownEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusDown" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Richiamato quando viene generato un evento associato <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> non gestito da questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 Lo scopo di questo metodo è simile a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Contrassegnare l'evento come gestito è ancora utile per impedire che i gestori di istanze tipiche (quelli che non specificano `handledEventsToo`) da cui viene richiamato.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Richiamato quando viene generato un evento associato <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> non gestito da questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 Lo scopo di questo metodo è simile a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Contrassegnare l'evento come gestito è ancora utile per impedire che i gestori di istanze tipiche (quelli che non specificano `handledEventsToo`) da cui viene richiamato.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusMove" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="contentElement.OnStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusUp" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="contentElement.OnTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo presenta alcuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrà implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate, stabilendo un gestore della classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati poiché un evento indirizzato può essere generato da un elemento figlio, che non corrisponde necessariamente all'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Consigliabile non rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.ContentElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato<see cref="E:System.Windows.ContentElement.TouchDown" /> che si verifica quando un tocco preme all'interno dell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.OnTouchDown%2A> metodo presenta alcuna implementazione predefinita. Eseguire l'override <xref:System.Windows.ContentElement.OnTouchDown%2A> in una classe derivata per gestire il <xref:System.Windows.ContentElement.TouchDown> evento. Assicurarsi di chiamare la classe di base <xref:System.Windows.ContentElement.OnTouchDown%2A> metodo in modo che le classi base ricevere l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato <see cref="E:System.Windows.ContentElement.TouchEnter" /> che si verifica quando un tocco si sposta dall'esterno all'interno dei limiti dell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.OnTouchEnter%2A> metodo presenta alcuna implementazione predefinita. Eseguire l'override <xref:System.Windows.ContentElement.OnTouchEnter%2A> in una classe derivata per gestire il <xref:System.Windows.ContentElement.TouchEnter> evento. Assicurarsi di chiamare la classe di base <xref:System.Windows.ContentElement.OnTouchEnter%2A> metodo in modo che le classi base ricevere l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato<see cref="E:System.Windows.ContentElement.TouchLeave" /> che si verifica quando un tocco si sposta dall'interno all'esterno dei limiti dell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.OnTouchLeave%2A> metodo presenta alcuna implementazione predefinita. Eseguire l'override <xref:System.Windows.ContentElement.OnTouchLeave%2A> in una classe derivata per gestire il <xref:System.Windows.ContentElement.TouchLeave> evento. Assicurarsi di chiamare la classe di base <xref:System.Windows.ContentElement.OnTouchLeave%2A> metodo in modo che le classi base ricevere l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato <see cref="E:System.Windows.ContentElement.TouchMove" /> che viene generato quando un tocco si sposta all'interno di questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.OnTouchMove%2A> metodo presenta alcuna implementazione predefinita. Eseguire l'override <xref:System.Windows.ContentElement.OnTouchMove%2A> in una classe derivata per gestire il <xref:System.Windows.ContentElement.TouchMove> evento. Assicurarsi di chiamare la classe di base <xref:System.Windows.ContentElement.OnTouchMove%2A> metodo in modo che le classi base ricevere l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato <see cref="E:System.Windows.ContentElement.TouchUp" /> che viene generato quando un tocco viene rilasciato all'interno di questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.OnTouchUp%2A> metodo presenta alcuna implementazione predefinita. Eseguire l'override <xref:System.Windows.ContentElement.OnTouchUp%2A> in una classe derivata per gestire il <xref:System.Windows.ContentElement.TouchUp> evento. Assicurarsi di chiamare la classe di base <xref:System.Windows.ContentElement.OnTouchUp%2A> metodo in modo che le classi base ricevere l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="abstract member PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject&#xA;override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="contentElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">Direzione dell'attraversamento dello stato attivo richiesto.</param>
        <summary>Se sottoposto a override in una classe derivata, restituisce l'elemento che riceverebbe lo stato attivo per una direzione di attraversamento dello stato attivo specificata, senza effettivamente spostare lo stato attivo su tale elemento.</summary>
        <returns>Elemento che avrebbe ricevuto lo stato attivo se <see cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> fosse stato effettivamente richiamato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'implementazione predefinita di questo metodo in questa classe è incompleto e restituisce sempre `null`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragEnter : System.Windows.DragEventHandler " Usage="member this.PreviewDragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di trascinamento sottostante per cui questo elemento rappresenta la destinazione del trascinamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewDragEnter> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.PreviewDragEnter> eventi sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewDragEnterEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.Windows.DragEventHandler>|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.DragEnter>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewDragEnter%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewDragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewDragEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragLeave : System.Windows.DragEventHandler " Usage="member this.PreviewDragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di trascinamento sottostante per cui l'elemento rappresenta l'origine del trascinamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewDragLeave> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.PreviewDragLeave> eventi sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewDragLeaveEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.Windows.DragEventHandler>|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.DragLeave>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewDragLeave%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewDragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewDragLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragOver : System.Windows.DragEventHandler " Usage="member this.PreviewDragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di trascinamento sottostante per il quale l'elemento rappresenta la destinazione del rilascio potenziale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewDragOver> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.PreviewDragOver> eventi sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewDragOverEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.Windows.DragEventHandler>|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.DragOver>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewDragOver%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewDragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewDragOver" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberSignature Language="F#" Value="member this.PreviewDrop : System.Windows.DragEventHandler " Usage="member this.PreviewDrop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di rilascio sottostante con questo elemento come destinazione del rilascio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewDrop> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.PreviewDrop> eventi sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewDropEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.Windows.DragEventHandler>|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.Drop>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewDrop%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDropEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewDropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewDrop" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando inizia un'operazione di trascinamento e rilascio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.PreviewGiveFeedback> evento consente all'origine dell'evento di trascinamento di modificare l'aspetto del puntatore del mouse, per fornire l'utente indicazioni visive durante un'operazione di trascinamento e rilascio.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewGiveFeedback> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.PreviewGiveFeedback> eventi sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewGiveFeedbackEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.GiveFeedback>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewGiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewGiveFeedback" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stato attivo della tastiera si trova sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poiché questo evento viene utilizzato il routing di tunneling, l'elemento con lo stato attivo potrebbe essere un elemento figlio invece dell'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo con lo stato attivo.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.GotKeyboardFocus>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewGotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica alla pressione di un tasto quando lo stato attivo della tastiera si trova sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestione delle chiavi interagisce con altre funzionalità di piattaforma come composizione di testo e l'esecuzione di comandi. Il <xref:System.Windows.ContentElement.KeyDown> evento è un evento di input di testo di basso livello che potrà non comportarsi come previsto su determinati controlli. Questo avviene perché alcuni controlli dispongono di composizione del controllo o la gestione della classe che fornisce una versione di livello superiore del testo, la gestione dell'input e gli eventi correlati.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewKeyDown> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.PreviewKeyDown> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewKeyDownEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.KeyDown>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewKeyDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewKeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewKeyDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al rilascio di un tasto quando lo stato attivo della tastiera si trova sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestione delle chiavi interagisce con altre funzionalità di piattaforma come composizione di testo e l'esecuzione di comandi. Il <xref:System.Windows.ContentElement.KeyUp> evento è un evento di input di testo di basso livello che potrà non comportarsi come previsto su determinati controlli. Questo avviene perché alcuni controlli dispongono di composizione del controllo o la gestione della classe che fornisce una versione di livello superiore del testo, la gestione dell'input e gli eventi correlati. Per informazioni dettagliate, vedere la documentazione per i singoli controlli.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewKeyUp> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.PreviewKeyUp> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewKeyUpEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.KeyUp>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewKeyUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewKeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewKeyUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stato attivo della tastiera non si trova più sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poiché questo evento viene utilizzato il routing di tunneling, l'elemento che ha perso lo stato attivo potrebbe essere un elemento figlio invece dell'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo che perde lo stato attivo.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.LostKeyboardFocus>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewLostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewLostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica alla pressione di qualsiasi pulsante del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewMouseDown> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.PreviewMouseDown> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Il <xref:System.Windows.ContentElement.PreviewMouseDown> evento viene generato spesso insieme a uno <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> o <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>, che corrispondono alla pressione di uno dei due pulsanti standard. <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> e <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> sono anche gli eventi indirizzati, ma sono eventi indirizzati diretti e viene generato l'evento appropriato pulsante specifico quando la <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento raggiunge l'elemento lungo la route dell'evento. Vedere la sezione Osservazioni per <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> o <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>.  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewMouseDownEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.MouseDown>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewMouseDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica alla pressione del pulsante sinistro del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anche se ciò [Cenni preliminari sugli eventi indirizzati](~/docs/framework/wpf/advanced/routed-events-overview.md) sembra seguono una route di tunneling attraverso un albero degli elementi, in realtà è un evento indirizzato diretto che viene generato e rigenerato l'albero degli elementi da ogni <xref:System.Windows.ContentElement>.  
  
 Questo evento è uno dei numerosi eventi correlati che indicano le specifiche del pulsante del mouse di un oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento, vale a dire un evento associato che viene elaborato da ogni elemento lungo la route di un evento.  
  
 Gli argomenti dell'evento espongono gli elementi dell'oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento. Se tale evento è contrassegnato come gestito lungo la route dell'evento, vengono comunque generati eventi specifici del pulsante del mouse. Tuttavia, è necessario aggiungere i gestori di eventi specifici del pulsante del mouse in modo esplicito chiamando <xref:System.Windows.ContentElement.AddHandler%2A>, con l'opzione per gestire gli eventi che sono già contrassegnati come gestiti, in modo da essere listener per l'evento.  
  
 Pensare a livello concettuale, questo evento (e altri eventi del pulsante del mouse su <xref:System.Windows.ContentElement>) da un mouse "servizio" (con la definizione del servizio fornita dal <xref:System.Windows.Input.Mouse> classe). L'evento aggiunge la comodità di non dover controllare gli stati del pulsante del mouse (da sinistra a destra, giù) degli eventi del mouse originale nei dati dell'evento. Per scenari più avanzati, ad esempio la verifica degli stati dei pulsanti non standard, potrebbe essere necessario usare il [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] nella <xref:System.Windows.Input.Mouse> classe anziché quelli su <xref:System.Windows.ContentElement>.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al rilascio del pulsante sinistro del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anche se ciò [Cenni preliminari sugli eventi indirizzati](~/docs/framework/wpf/advanced/routed-events-overview.md) sembra seguono una route di tunneling attraverso un albero degli elementi, in realtà è un evento indirizzato diretto che viene generato e rigenerato l'albero degli elementi da ogni <xref:System.Windows.ContentElement>.  
  
 Questo evento è uno dei numerosi eventi correlati che indicano le specifiche del pulsante del mouse di un oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento, vale a dire un evento associato che viene elaborato da ogni elemento lungo la route di un evento.  
  
 Gli argomenti dell'evento espongono gli elementi dell'oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento. Se tale evento è contrassegnato come gestito lungo la route dell'evento, vengono comunque generati eventi specifici del pulsante del mouse. Tuttavia, è necessario aggiungere i gestori di eventi specifici del pulsante del mouse in modo esplicito chiamando <xref:System.Windows.ContentElement.AddHandler%2A>, con l'opzione per gestire gli eventi che sono già contrassegnati come gestiti, in modo da essere listener per l'evento.  
  
 Pensare a livello concettuale, questo evento (e altri eventi del pulsante del mouse su <xref:System.Windows.ContentElement>) da un mouse "servizio" (con la definizione del servizio fornita dal <xref:System.Windows.Input.Mouse> classe). L'evento aggiunge la comodità di non dover controllare gli stati del pulsante del mouse (da sinistra a destra, giù) degli eventi del mouse originale nei dati dell'evento. Per scenari più avanzati, ad esempio la verifica degli stati dei pulsanti non standard, potrebbe essere necessario usare il [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] nella <xref:System.Windows.Input.Mouse> classe anziché quelli su <xref:System.Windows.ContentElement>.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito allo spostamento del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento si verifica quando il puntatore del mouse entra nei limiti dell'elemento, e anche quando il puntatore del mouse viene spostato pur rimanendo comunque entro i limiti dell'elemento.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewMouseMove> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.PreviewMouseMove> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewMouseMoveEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.MouseMove>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewMouseMove%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewMouseMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica alla pressione del pulsante destro del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anche se ciò [Cenni preliminari sugli eventi indirizzati](~/docs/framework/wpf/advanced/routed-events-overview.md) sembra seguono una route di tunneling attraverso un albero degli elementi, in realtà è un evento indirizzato diretto che viene generato e rigenerato l'albero degli elementi da ogni <xref:System.Windows.ContentElement>.  
  
 Questo evento è uno dei numerosi eventi correlati che indicano le specifiche del pulsante del mouse di un oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento, vale a dire un evento associato che viene elaborato da ogni elemento lungo la route di un evento.  
  
 Gli argomenti dell'evento espongono gli elementi dell'oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento. Se tale evento è contrassegnato come gestito lungo la route dell'evento, vengono comunque generati eventi specifici del pulsante del mouse. Tuttavia, è necessario aggiungere i gestori di eventi specifici del pulsante del mouse in modo esplicito chiamando <xref:System.Windows.ContentElement.AddHandler%2A>, con l'opzione per gestire gli eventi che sono già contrassegnati come gestiti, in modo da essere listener per l'evento.  
  
 Pensare a livello concettuale, questo evento (e altri eventi del pulsante del mouse su <xref:System.Windows.ContentElement>) da un mouse "servizio" (con la definizione del servizio fornita dal <xref:System.Windows.Input.Mouse> classe). L'evento aggiunge la comodità di non dover controllare gli stati del pulsante del mouse (da sinistra a destra, giù) degli eventi del mouse originale nei dati dell'evento. Per scenari più avanzati, ad esempio la verifica degli stati dei pulsanti non standard, potrebbe essere necessario usare il [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] nella <xref:System.Windows.Input.Mouse> classe anziché quelli su <xref:System.Windows.ContentElement>.  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al rilascio del pulsante destro del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anche se ciò [Cenni preliminari sugli eventi indirizzati](~/docs/framework/wpf/advanced/routed-events-overview.md) sembra seguono una route di tunneling attraverso un albero degli elementi, in realtà è un evento indirizzato diretto che viene generato e rigenerato l'albero degli elementi da ogni <xref:System.Windows.ContentElement>.  
  
 Questo evento è uno dei numerosi eventi correlati che indicano le specifiche del pulsante del mouse di un oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento, vale a dire un evento associato che viene elaborato da ogni elemento lungo la route di un evento.  
  
 Gli argomenti dell'evento espongono gli elementi dell'oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento. Se tale evento è contrassegnato come gestito lungo la route dell'evento, vengono comunque generati eventi specifici del pulsante del mouse. Tuttavia, è necessario aggiungere i gestori di eventi specifici del pulsante del mouse in modo esplicito chiamando <xref:System.Windows.ContentElement.AddHandler%2A>, con l'opzione per gestire gli eventi che sono già contrassegnati come gestiti, in modo da essere listener per l'evento.  
  
 Pensare a livello concettuale, questo evento (e altri eventi del pulsante del mouse su <xref:System.Windows.ContentElement>) da un mouse "servizio" (con la definizione del servizio fornita dal <xref:System.Windows.Input.Mouse> classe). L'evento aggiunge la comodità di non dover controllare gli stati del pulsante del mouse (da sinistra a destra, giù) degli eventi del mouse originale nei dati dell'evento. Per scenari più avanzati, ad esempio la verifica degli stati dei pulsanti non standard, potrebbe essere necessario usare il [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] nella <xref:System.Windows.Input.Mouse> classe anziché quelli su <xref:System.Windows.ContentElement>.  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al rilascio di qualsiasi pulsante del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewMouseUp> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.PreviewMouseUp> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Il <xref:System.Windows.ContentElement.PreviewMouseUp> evento viene generato spesso insieme a uno <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> o <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>, che corrispondono alla pressione di uno dei due pulsanti standard. <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> e <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> sono anche gli eventi indirizzati, ma sono eventi indirizzati diretti e viene generato l'evento appropriato pulsante specifico quando la <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento raggiunge l'elemento lungo la route dell'evento. Vedere la sezione Osservazioni per <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> o <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>.  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewMouseUpEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.MouseUp>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewMouseUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito alla rotazione della rotellina del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lo stato attivo o passare il mouse capture hanno la precedenza su dove è il puntatore del mouse; Pertanto, se si riceve questo evento da un elemento con lo stato attivo o acquisito, tramite un altro elemento potrebbe essere effettivamente il puntatore del mouse.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewMouseMove> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.PreviewMouseMove> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewMouseWheelEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.MouseWheel>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewMouseWheel" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito alla modifica dello stato della tastiera o del pulsante del mouse durante un'operazione di trascinamento e rilascio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> evento consente all'origine di trascinamento dichiarare se l'operazione di trascinamento e rilascio deve essere annullata.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> eventi sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewQueryContinueDragEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.QueryContinueDrag>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewQueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewQueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito alla pressione del pulsante dello stilo quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewStylusButtonDown> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.PreviewStylusButtonDown> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco, mouse e stilo input esiste in una determinata relazione. Per altre informazioni, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewStylusButtonDownEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.StylusButtonDown>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito al rilascio del pulsante dello stilo quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewStylusButtonUp> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.PreviewStylusButtonUp> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco, mouse e stilo input esiste in una determinata relazione. Per altre informazioni, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewStylusButtonUpEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.StylusButtonUp>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo tocca il digitalizzatore mentre è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewStylusDown> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.PreviewStylusDown> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco, mouse e stilo input esiste in una determinata relazione. Per altre informazioni, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewStylusDownEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.StylusDown>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewStylusDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewStylusDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo viene spostato su un elemento senza effettivamente toccare il digitalizzatore.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewStylusInAirMove> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.PreviewStylusInAirMove> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco, mouse e stilo input esiste in una determinata relazione. Per altre informazioni, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewStylusInAirMoveEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.StylusInAirMove>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo è sufficientemente vicino al digitalizzatore per poter essere rilevato, mentre è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewStylusInRange> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.PreviewStylusInRange> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco, mouse e stilo input esiste in una determinata relazione. Per altre informazioni, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewStylusInRangeEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.StylusInRange>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewStylusInRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo viene spostato mentre si trova sull'elemento. Lo stilo deve essere spostato mentre è rilevato dal digitalizzatore per generare questo evento. In caso contrario, viene generato l'evento <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewStylusMove> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.PreviewStylusMove> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco, mouse e stilo input esiste in una determinata relazione. Per altre informazioni, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewStylusMoveEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.StylusMove>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewStylusMove%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewStylusMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo è troppo lontano dal digitalizzatore per poter essere rilevato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco, mouse e stilo input esiste in una determinata relazione. Per altre informazioni, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.StylusOutOfRange>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un utente esegue uno dei vari movimenti con stilo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per informazioni sui movimenti dello stilo, vedere <xref:System.Windows.Input.SystemGesture>.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco, mouse e stilo input esiste in una determinata relazione. Per altre informazioni, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewStylusSystemGestureEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.StylusSystemGesture>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente solleva lo stilo dal digitalizzatore mentre lo stilo è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewStylusDown> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.PreviewStylusDown> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco, mouse e stilo input esiste in una determinata relazione. Per altre informazioni, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewStylusUpEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.StylusUp>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewStylusUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewStylusUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberSignature Language="F#" Value="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito all'input di testo per l'elemento in modo indipendente dalla periferica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.PreviewTextInput> evento consente a un componente o applicazione in ascolto dell'input di testo in modo indipendente dal dispositivo. La tastiera è il mezzo principale <xref:System.Windows.ContentElement.PreviewTextInput>; ma vocale, riconoscimento della grafia e altri dispositivi di input possono anche generare <xref:System.Windows.ContentElement.PreviewTextInput>.  
  
 A causa di combinazioni di tasti: predefiniti o tramite input method editor, ovvero più gli eventi principali possono generare solo un evento di input di testo.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.PreviewTextInput> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.PreviewTextInput> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewTextInputEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.TextInput>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewTextInput%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewTextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewTextInput" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un dito tocca lo schermo mentre si trova sopra l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, il <xref:System.Windows.ContentElement.PreviewTouchDown> e <xref:System.Windows.ContentElement.TouchDown> eventi non sono presenti fino a quando un dito tocca lo schermo e viene spostato. Premendo un dito sullo schermo e tenendo senza spostarlo causa premere e tenere premuto il comportamento di un <xref:System.Windows.Input.Stylus>. Il comportamento la pressione prolungata è equivalente al pulsante destro del mouse.  
  
 Per fare in modo il <xref:System.Windows.ContentElement.PreviewTouchDown> e <xref:System.Windows.ContentElement.TouchDown> eventi che devono verificarsi, non appena un dito tocca lo schermo, impostare il <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> proprietà associata `false` per questo elemento.  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewTouchDownEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.TouchDown>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewTouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewTouchDown" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene spostato un dito sullo schermo mentre si trova sopra l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewTouchMoveEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.TouchMove>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewTouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewTouchMove" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene sollevato un dito dallo schermo mentre si trova sopra l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.PreviewTouchUpEvent>|  
|Strategia di routing|Il tunneling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   L'evento di bubbling corrispondente è <xref:System.Windows.ContentElement.TouchUp>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewTouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.PreviewTouchUp" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito alla modifica dello stato della tastiera o del pulsante del mouse durante un'operazione di trascinamento e rilascio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.ContentElement.QueryContinueDrag> evento consente all'origine del trascinamento di determinare se l'operazione di trascinamento e rilascio deve essere annullata.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.QueryContinueDrag> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.QueryContinueDrag> eventi sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.QueryContinueDragEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewQueryContinueDrag>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnQueryContinueDrag%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.QueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.QueryContinueDrag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberSignature Language="F#" Value="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " Usage="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene richiesta la visualizzazione del cursore. L'evento viene generato per un elemento ogni volta che il puntatore del mouse viene spostato, perché ciò indica che l'oggetto cursore deve essere modificato in base alla nuova posizione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.QueryCursor> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.QueryCursor> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Il cursore di cui viene fatto riferimento a questo nome di evento non è necessariamente il cursore del testo (talvolta noto come punto di inserimento). Al contrario, il cursore in questo contesto è l'oggetto che dichiara la visualizzazione grafica sullo schermo correlata a diverse possibili dispositivi di input o i concetti di programmazione di Windows. Tale oggetto è rappresentato dal <xref:System.Windows.Input.Cursor> classe WPF. Il sistema di input di WPF consente di modificare il cursore quando si rappresenta la posizione sullo schermo del puntatore del mouse. È possibile usare i valori predefiniti di <xref:System.Windows.Input.Cursors> enumerazione oppure è possibile dichiarare un cursore personalizzato come file di immagine.  
  
 In attesa di <xref:System.Windows.ContentElement.QueryCursor> evento non è una tecnica efficace per la gestione del cursore. Al contrario, ogni elemento deve definire il proprio comportamento del cursore con <xref:System.Windows.FrameworkContentElement.Cursor%2A> e <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>. È consigliabile affidarsi solo <xref:System.Windows.ContentElement.QueryCursor> se non si usano elementi di base a livello di framework WPF o in circostanze straordinarie in cui la definizione del comportamento del cursore in base a ciascun elemento non soddisfa le proprie esigenze. Per altre informazioni sull'implementazione del comportamento del cursore in risposta a <xref:System.Windows.ContentElement.QueryCursor>, vedere <xref:System.Windows.Input.QueryCursorEventHandler>.  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.QueryCursorEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   Non vi è alcun evento di tunneling corrispondente definito.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnQueryCursor%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryCursorEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.QueryCursorEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.QueryCursor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit" Usage="contentElement.RaiseEvent e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.RoutedEventArgs" /> che contiene i dati degli eventi e identifica inoltre l'evento da generare.</param>
        <summary>Genera un evento indirizzato specifico. L'oggetto <see cref="T:System.Windows.RoutedEvent" /> da generare è identificato all'interno dell'istanza di <see cref="T:System.Windows.RoutedEventArgs" /> fornita (come proprietà <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> di tali dati degli eventi).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `e` parametro è tipizzato come il tipo di base comune per tutti i dati dell'evento indirizzato; tuttavia, i dati dell'evento devono essere forniti come il tipo di dati evento più specifico che è disponibile per l'evento generato, perché <xref:System.Windows.RoutedEventArgs> contengono le classi derivate di proprietà di dati specifico effettivi progettate per l'evento specifico quando viene generato.  
  
 <xref:System.Windows.RoutedEventArgs> non è solo le proprietà di stato per l'evento; vengono inoltre identificati che genera l'evento indirizzato. Questo modello di generazione degli eventi e i dati dell'evento indirizzato sono entrambi diversi da [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] classi di eventi e i dati, che in genere contengono solo le proprietà correlate all'evento.  
  
   
  
## Examples  
 Nell'esempio seguente crea i dati dell'evento, aggiunge l'identificatore dell'evento ai dati e quindi Usa l'istanza di dati di evento per generare un evento indirizzato personalizzato.  
  
 [!code-csharp[ContentElementsSmorgasbord#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#raiseevent)]
 [!code-vb[ContentElementsSmorgasbord#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#raiseevent)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberSignature Language="F#" Value="member this.ReleaseAllTouchCaptures : unit -&gt; unit" Usage="contentElement.ReleaseAllTouchCaptures " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia tutti i dispositivi a tocco acquisiti dall'elemento.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseMouseCapture : unit -&gt; unit&#xA;override this.ReleaseMouseCapture : unit -&gt; unit" Usage="contentElement.ReleaseMouseCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia l'input del mouse, se questo elemento l'ha acquisito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se questo elemento non conteneva l'acquisizione, chiamare questo metodo non ha alcun effetto. È consigliabile verificare il valore di <xref:System.Windows.ContentElement.IsMouseCaptured%2A> prima di chiamare questo metodo.  
  
   
  
## Examples  
 Il gestore seguente consente di acquisire o rilascia il mouse capture in base a stati del pulsante del mouse. Nell'esempio viene illustrato come utilizzare i movimenti del mouse acquisiti per scopi diversi rispetto a spostare il puntatore del mouse [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].  
  
 [!code-csharp[ContentElementsSmorgasbord#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[ContentElementsSmorgasbord#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseStylusCapture : unit -&gt; unit&#xA;override this.ReleaseStylusCapture : unit -&gt; unit" Usage="contentElement.ReleaseStylusCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia l'input dello stilo, se questo elemento lo ha acquisito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se questo elemento non conteneva l'acquisizione, chiamare questo metodo non ha alcun effetto. È consigliabile verificare il valore di <xref:System.Windows.ContentElement.IsStylusCaptured%2A> prima di chiamare questo metodo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.ReleaseTouchCapture : System.Windows.Input.TouchDevice -&gt; bool" Usage="contentElement.ReleaseTouchCapture touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">Dispositivo da rilasciare.</param>
        <summary>Tenta di rilasciare il dispositivo a tocco specificato dall'elemento.</summary>
        <returns>
          <see langword="true" /> se il dispositivo a tocco viene rilasciato; in caso contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="touchDevice" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="contentElement.RemoveHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identificatore dell'evento indirizzato al quale è associato il gestore.</param>
        <param name="handler">Implementazione del gestore specifico da rimuovere dalla raccolta di gestori eventi per questo elemento.</param>
        <summary>Rimuove il gestore dell'evento indirizzato specificato da questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lo scenario più comune per l'uso di questo [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] quando si implementa la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] evento "wrapper" che è associato a un evento indirizzato personalizzato, in particolare quando si implementa la logica "remove" per i gestori al [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] livello. Nell'esempio che segue questa sezione viene illustrato questo scenario la sezione Osservazioni.  
  
 Chiamare questo metodo non ha alcun effetto se si sono verificati senza gestori registrati con criteri che corrispondono ai parametri di input per la chiamata al metodo.  
  
 Se è associato più di un gestore che soddisfano i criteri, solo il primo gestore nel caso in cui viene rimosso l'archivio dei gestori eventi. Questo comportamento è coerente con [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] comportamento del `-=` operatore.  
  
 Né `routedEvent` né `handler` potrebbe essere `null`. Tentare di fornire uno dei due valori come `null` genererà un'eccezione.  
  
 Questo metodo ignora la `handledEventsToo` le informazioni sui parametri, è disponibile se il gestore di è stato inizialmente aggiunto con il <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma che consente la gestione di eventi già gestiti. Entrambi i tipi di gestore viene rimosso.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeCommandBindings : unit -&gt; bool" Usage="contentElement.ShouldSerializeCommandBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un valore che indica se i processi di serializzazione devono serializzare il contenuto della proprietà <see cref="P:System.Windows.ContentElement.CommandBindings" /> nelle istanze di questa classe.</summary>
        <returns>
          <see langword="true" /> se il valore della proprietà <see cref="P:System.Windows.ContentElement.CommandBindings" /> deve essere serializzato; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verrà restituito `true` se <xref:System.Windows.ContentElement.CommandBindings%2A> è impostato localmente.  
  
 Ciò `ShouldSerialize` metodo viene fornito perché il <xref:System.Windows.UIElement.CommandBindings%2A> proprietà non ha un valore predefinito semplice. Questo metodo indica se la proprietà è stato modificato rispetto al valore predefinito. È in genere richiamare questo metodo quando si sviluppa una finestra di progettazione oppure controllo personalizzato che includa un <xref:System.Windows.UIElement>.  
  
 Per altre informazioni, vedere [definizione di valori predefiniti con i metodi ShouldSerialize e Reset](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeInputBindings : unit -&gt; bool" Usage="contentElement.ShouldSerializeInputBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un valore che indica se i processi di serializzazione devono serializzare il contenuto della proprietà <see cref="P:System.Windows.ContentElement.InputBindings" /> nelle istanze di questa classe.</summary>
        <returns>
          <see langword="true" /> se il valore della proprietà <see cref="P:System.Windows.ContentElement.InputBindings" /> deve essere serializzato; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verrà restituito `true` se <xref:System.Windows.ContentElement.InputBindings%2A> è impostato localmente.  
  
 Ciò `ShouldSerialize` metodo viene fornito perché il <xref:System.Windows.UIElement.InputBindings%2A> proprietà non ha un valore predefinito semplice. Questo metodo indica se la proprietà è stato modificato rispetto al valore predefinito. È in genere richiamare questo metodo quando si sviluppa una finestra di progettazione oppure controllo personalizzato che includa un <xref:System.Windows.UIElement>.  
  
 Per altre informazioni, vedere [definizione di valori predefiniti con i metodi ShouldSerialize e Reset](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito alla pressione del pulsante dello stilo quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.StylusButtonDown> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.StylusButtonDown> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco, mouse e stilo input esiste in una determinata relazione. Per altre informazioni, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.StylusButtonDownEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewStylusButtonDown>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnStylusButtonDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.StylusButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito al rilascio del pulsante dello stilo quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.StylusButtonUp> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.StylusButtonUp> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco, mouse e stilo input esiste in una determinata relazione. Per altre informazioni, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.StylusButtonUpEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewStylusButtonUp>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnStylusButtonUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.StylusButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberSignature Language="F#" Value="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito al tocco del digitalizzatore con lo stilo quando lo stilo è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.StylusDown> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.StylusDown> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco, mouse e stilo input esiste in una determinata relazione. Per altre informazioni, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.StylusDownEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewStylusDown>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnStylusDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.StylusDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberSignature Language="F#" Value="member this.StylusEnter : System.Windows.Input.StylusEventHandler " Usage="member this.StylusEnter : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo viene spostato all'interno dei limiti dell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.StylusEnter> è un [Cenni preliminari sugli eventi indirizzati](~/docs/framework/wpf/advanced/routed-events-overview.md) che usa la strategia di routing di gestione degli eventi diretto. Gli eventi indirizzati diretti non vengono generati una route; al contrario, vengono gestiti nello stesso elemento in cui vengono generati. Consentono, tuttavia, altri aspetti del comportamento dell'evento indirizzato, ad esempio i trigger di eventi negli stili.  
  
 Sebbene <xref:System.Windows.ContentElement.StylusEnter> rilevi quando lo stilo entra nell'area di un elemento, questo evento ulteriori letteralmente che i <xref:System.Windows.ContentElement.IsStylusOver%2A> valore della proprietà è stato modificato da `false` a `true` su questo elemento.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.StylusEnter> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.StylusEnter> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco, mouse e stilo input esiste in una determinata relazione. Per altre informazioni, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.StylusEnterEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnStylusEnter%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.StylusEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo viene spostato su un elemento senza effettivamente toccare il digitalizzatore.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.StylusInAirMove> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.StylusInAirMove> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco, mouse e stilo input esiste in una determinata relazione. Per altre informazioni, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.StylusInAirMoveEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewStylusInAirMove>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnStylusInAirMove%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.StylusInAirMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberSignature Language="F#" Value="member this.StylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo è sufficientemente vicino al digitalizzatore per poter essere rilevato, mentre è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.StylusInRange> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.StylusInRange> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco, mouse e stilo input esiste in una determinata relazione. Per altre informazioni, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.StylusInRangeEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewStylusInRange>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnStylusInRange%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.StylusInRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberSignature Language="F#" Value="member this.StylusLeave : System.Windows.Input.StylusEventHandler " Usage="member this.StylusLeave : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo viene spostato all'esterno dei limiti dell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.StylusLeave> è un [Cenni preliminari sugli eventi indirizzati](~/docs/framework/wpf/advanced/routed-events-overview.md) che usa la strategia di routing di gestione degli eventi diretto. Gli eventi indirizzati diretti non vengono generati una route; al contrario, vengono gestiti nello stesso elemento in cui vengono generati. Consentono, tuttavia, altri aspetti del comportamento dell'evento indirizzato, ad esempio i trigger di eventi negli stili.  
  
 Sebbene <xref:System.Windows.ContentElement.StylusLeave> rilevi quando lo stilo esce dai limiti di un elemento, questo evento più letteralmente che i <xref:System.Windows.ContentElement.IsStylusOver%2A> valore della proprietà è stato modificato da `true` a `false` su questo elemento.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.StylusLeave> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.StylusLeave> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco, mouse e stilo input esiste in una determinata relazione. Per altre informazioni, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.StylusLeaveEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnStylusLeave%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.StylusLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberSignature Language="F#" Value="member this.StylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo viene spostato sull'elemento. Lo stilo deve essere spostato mentre è sul digitalizzatore per generare l'evento. altrimenti viene generato l'evento <see cref="E:System.Windows.ContentElement.StylusInAirMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.StylusMove> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.StylusMove> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco, mouse e stilo input esiste in una determinata relazione. Per altre informazioni, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.StylusMoveEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewStylusMove>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnStylusMove%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.StylusMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo è troppo lontano dal digitalizzatore per poter essere rilevato, mentre è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.StylusOutOfRange> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.StylusOutOfRange> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco, mouse e stilo input esiste in una determinata relazione. Per altre informazioni, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.StylusOutOfRangeEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewStylusOutOfRange>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnStylusOutOfRange%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.StylusOutOfRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un utente esegue uno dei vari movimenti con stilo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per altre informazioni sui movimenti dello stilo, vedere <xref:System.Windows.Input.SystemGesture>.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.StylusSystemGesture> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.StylusSystemGesture> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco, mouse e stilo input esiste in una determinata relazione. Per altre informazioni, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.StylusSystemGestureEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewStylusSystemGesture>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnStylusSystemGesture%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.StylusSystemGesture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberSignature Language="F#" Value="member this.StylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.StylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente solleva lo stilo dal digitalizzatore mentre è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.StylusUp> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.StylusUp> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco, mouse e stilo input esiste in una determinata relazione. Per altre informazioni, vedere [Cenni preliminari sull'Input](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.StylusUpEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewStylusUp>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnStylusUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.StylusUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberSignature Language="F#" Value="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito all'input di testo per l'elemento in modo indipendente dalla periferica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Questo evento potrebbe già essere contrassegnato come gestito dalle implementazioni interne di controlli compositi. Vedere la sezione Osservazioni riportata di seguito.  
  
 Il <xref:System.Windows.ContentElement.TextInput> evento potrebbe già essere contrassegnato come gestito dalle implementazioni interne di controlli compositi. Ad esempio, un <xref:System.Windows.Controls.TextBox> è un controllo composito in cui il <xref:System.Windows.ContentElement.TextInput> evento è già contrassegnato come gestito; entro la composizione. Controlli di eseguire questa operazione perché il controllo deve interpretare alcuni tipi di input, ad esempio i tasti di direzione, come se avessero un significato speciale per tale controllo. Se si usa <xref:System.Windows.ContentElement.PreviewTextInput> dell'evento in cui si collegano i gestori per input di testo, è possibile ottenere risultati migliori. Questa tecnica consente di evitare la maggior parte dei casi in cui la composizione del controllo è già contrassegnato questo evento come gestito e impedisce al gestore di ricezione dell'evento lungo la route dell'evento.  
  
 Il <xref:System.Windows.ContentElement.TextInput> evento consente a un componente o applicazione in ascolto dell'input di testo in modo indipendente dal dispositivo. La tastiera è il mezzo principale <xref:System.Windows.ContentElement.TextInput>, tuttavia, riconoscimento vocale, riconoscimento della grafia e altri dispositivi di input possono anche generare <xref:System.Windows.ContentElement.TextInput>.  
  
 A causa di combinazioni di tasti: predefiniti o tramite input method editor, ovvero più eventi chiave potrebbero generare un solo evento di input di testo.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.ContentElement.TextInput> fa parte della classe di elenco dei membri quando <xref:System.Windows.ContentElement> viene ereditato come elemento di base. Gestori eventi associati al <xref:System.Windows.ContentElement.TextInput> eventi sono associati all'oggetto sottostante <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.TextInputEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewTextInput>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnTextInput%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.TextInput" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberSignature Language="F#" Value="member this.TouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un dito tocca lo schermo mentre si trova sopra l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, il <xref:System.Windows.ContentElement.PreviewTouchDown> e <xref:System.Windows.ContentElement.TouchDown> eventi non sono presenti fino a quando un dito tocca lo schermo e viene spostato. Premendo un dito sullo schermo e tenendo senza spostarlo causa premere e tenere premuto il comportamento di un <xref:System.Windows.Input.Stylus>. Il comportamento la pressione prolungata è equivalente al pulsante destro del mouse.  
  
 Per fare in modo il <xref:System.Windows.ContentElement.PreviewTouchDown> e <xref:System.Windows.ContentElement.TouchDown> eventi che devono verificarsi, non appena un dito tocca lo schermo, impostare il <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> proprietà associata `false` per questo elemento.  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.TouchDownEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewTouchDown>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnTouchDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.TouchDown" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberSignature Language="F#" Value="member this.TouchEnter : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchEnter : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un tocco si sposta dall'esterno all'interno dei limiti di questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene generato sempre, se il dispositivo a tocco è acquisito nell'elemento dell'interfaccia utente.  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.TouchEnterEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnTouchEnter%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.TouchEnter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCaptured : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.ContentElement.TouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene tutti i dispositivi a tocco acquisiti in questo elemento.</summary>
        <value>Enumerazione di oggetti <see cref="T:System.Windows.Input.TouchDevice" /> che sono acquisiti in questo elemento.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCapturedWithin : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.ContentElement.TouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene tutti i dispositivi a tocco che sono acquisiti in questo elemento o nei relativi elementi figlio nella struttura ad albero visuale.</summary>
        <value>Enumerazione degli oggetti <see cref="T:System.Windows.Input.TouchDevice" /> che sono acquisiti in questo elemento o nei relativi elementi figlio nella struttura ad albero visuale.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesDirectlyOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.ContentElement.TouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene tutti i dispositivi a tocco che si trovano su questo elemento.</summary>
        <value>Enumerazione di oggetti <see cref="T:System.Windows.Input.TouchDevice" /> che si trovano su questo elemento.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.ContentElement.TouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene tutti i dispositivi a tocco che sono su questo elemento o nei relativi elementi figlio nella struttura ad albero visuale.</summary>
        <value>Enumerazione degli oggetti <see cref="T:System.Windows.Input.TouchDevice" /> che sono su questo elemento o nei relativi elementi figlio nella struttura ad albero visuale.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberSignature Language="F#" Value="member this.TouchLeave : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchLeave : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un tocco si sposta dall'interno all'esterno dei limiti di questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.TouchLeaveEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnTouchLeave%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.TouchLeave" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberSignature Language="F#" Value="member this.TouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene spostato un dito sullo schermo mentre si trova sopra l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.TouchMoveEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewTouchMove>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnTouchMove%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.TouchMove" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberSignature Language="F#" Value="member this.TouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene sollevato un dito dallo schermo mentre si trova sopra l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.ContentElement.TouchUpEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   L'evento di tunneling corrispondente è <xref:System.Windows.ContentElement.PreviewTouchUp>.  
  
-   Eseguire l'override <xref:System.Windows.ContentElement.OnTouchUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.ContentElement.TouchUp" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>