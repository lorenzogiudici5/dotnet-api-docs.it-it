<Type Name="EventManager" FullName="System.Windows.EventManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c07ba11c7438326eddb5331a443033c7ee73acb9" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39844483" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class EventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class EventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventManager abstract sealed" />
  <TypeSignature Language="F#" Value="type EventManager = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce metodi di utilità correlati agli eventi che registrano gli eventi indirizzati per i proprietari delle classi e aggiungono gestori di classi.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa classe viene in genere utilizzata per registrare un nuovo evento indirizzato, con <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.  
  
 Il secondo più comuni [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] utilizzo è <xref:System.Windows.EventManager.RegisterClassHandler%2A>. Utilizzare questo metodo per abilitare la gestione di classi di un evento indirizzato sulla classe o un evento associato. Per informazioni dettagliate, vedere [contrassegno degli eventi indirizzati come gestiti e gestione delle classi](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare questa classe per registrare un nuovo evento indirizzato come un membro di classe, con la tecnica del "wrapper" evento indirizzato di override Aggiungi e Rimuovi le implementazioni per un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento.  
  
 [!code-csharp[DPCustom#EventManagerClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#eventmanagerclass)]
 [!code-vb[DPCustom#EventManagerClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#eventmanagerclass)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRoutedEvents">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEvents" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEvents () As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEvents();" />
      <MemberSignature Language="F#" Value="static member GetRoutedEvents : unit -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce gli identificatori per eventi indirizzati registrati sul sistema dell'evento.</summary>
        <returns>Matrice di tipo <see cref="T:System.Windows.RoutedEvent" /> che contiene gli oggetti registrati.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Altre <xref:System.Windows.RoutedEvent> gli oggetti possono essere registrati in un secondo momento. Questo metodo ottiene uno snapshot e la raccolta degli eventi indirizzati è scrivibile tutta la durata di un'applicazione. La raccolta restituita potrebbe essere piuttosto grande. Anche solo il conteggio di eventi che fanno parte del [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], il numero di raccolte è più di cento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoutedEventsForOwner">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEventsForOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEventsForOwner (ownerType As Type) As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEventsForOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member GetRoutedEventsForOwner : Type -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEventsForOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">Il tipo da cui cominciare a cercare. Le classi di base sono incluse nella ricerca.</param>
        <summary>Trova tutti gli identificatori di eventi indirizzati per eventi registrati con il tipo fornito di proprietario.</summary>
        <returns>Una matrice di identificatori corrispondenti all’evento indirizzato se qualsiasi corrispondenza è trovata; in caso contrario, <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClassHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Iscrive un gestore della classe per un particolare evento indirizzato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="classType">Il tipo della classe che dichiara la gestione della classe.</param>
        <param name="routedEvent">L'identificatore dell'evento indirizzato dell'evento da gestire.</param>
        <param name="handler">Un riferimento all'implementazione del gestore di classe.</param>
        <summary>Iscrive un gestore della classe per un particolare evento indirizzato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La gestione di classi è una funzionalità disponibile per gli eventi indirizzati, inclusi gli eventi associati che vengono implementati con l'evento indirizzato di backup. Un gestore della classe è simile a un gestore statico esistente per tutte le istanze della classe. Poiché il gestore di è statico, non è possibile modificare le proprietà dell'istanza direttamente con un gestore di classi, ma è possibile accedere alle istanze tramite il `sender` parametri e/o i dati dell'evento.  
  
 I gestori classi vengono richiamati prima dei gestori di istanza. È possibile implementare un gestore della classe con il comportamento di contrassegnare l'evento come gestito. Di conseguenza, i gestori di istanze per un evento gestito dalla classe non vengono richiamati a meno che non registra i gestori di istanze in modo specifico per gli eventi gestiti.  
  
 Molte del [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] gli eventi di elementi di base forniscono metodi virtuali di gestione delle classi. Eseguendo l'override di questi metodi nelle classi che ereditano le classi di base, è possibile implementare la gestione senza chiamare il metodo della classe <xref:System.Windows.EventManager.RegisterClassHandler%2A> nei costruttori statici. Questi metodi di gestione delle classi in genere esistono per gli eventi di input e hanno nomi che iniziano con "On" e terminano con il nome dell'evento gestito da classi.  
  
 Per altre informazioni sulla gestione delle classi, vedere [contrassegno degli eventi indirizzati come gestiti e gestione delle classi](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 Usando questa firma, gestori di classi verranno registrati per richiamare solo in risposta a eventi non gestiti. È anche possibile registrare i gestori classi per richiamare anche se gli argomenti dell'evento sono contrassegnati come gestiti, usando il <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma, con `handledEventsToo` impostato su `true`.  
  
   
  
## Examples  
 L'esempio seguente aggiunge un gestore per <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>, la chiamata <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 [!code-csharp[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]
 [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#staticandregisterclasshandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="classType">Il tipo della classe che dichiara la gestione della classe.</param>
        <param name="routedEvent">L'identificatore dell'evento indirizzato dell'evento da gestire.</param>
        <param name="handler">Un riferimento all'implementazione del gestore di classe.</param>
        <param name="handledEventsToo">
          <see langword="true" /> per richiamare questo gestore della classe anche se gli argomenti dell'evento indirizzato sono stati contrassegnati come gestiti; <see langword="false" /> per mantenere il comportamento predefinito di non richiamare il gestore su qualsiasi evento contrassegnato come gestito.</param>
        <summary>Registra un gestore della classe per un particolare evento indirizzato, con l'opzione di gestire gli eventi in cui i dati degli eventi sono già contrassegnati come gestiti.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La gestione di classi è una funzionalità disponibile per gli eventi indirizzati, inclusi gli eventi associati che vengono implementati con l'evento indirizzato di backup. Un gestore della classe è simile a un gestore statico esistente per tutte le istanze della classe. Poiché il gestore di è statico, non è possibile modificare le proprietà dell'istanza direttamente con un gestore di classi, ma è possibile accedere alle istanze tramite il `sender` parametri e/o i dati dell'evento.  
  
 I gestori classi vengono richiamati prima dei gestori di istanza. È possibile implementare un gestore della classe con il comportamento di contrassegnare l'evento come gestito. Di conseguenza, i gestori di istanze per un evento gestito dalla classe non vengono richiamati a meno che non registra i gestori di istanze in modo specifico per gli eventi gestiti.  
  
 Molte del [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] gli eventi di elementi di base forniscono metodi virtuali di gestione delle classi. Eseguendo l'override di questi metodi nelle classi che ereditano le classi di base, è possibile implementare la gestione senza chiamare il metodo della classe <xref:System.Windows.EventManager.RegisterClassHandler%2A> nei costruttori statici. Questi metodi di gestione delle classi in genere esistono per gli eventi di input e hanno nomi che iniziano con "On" e terminano con il nome dell'evento gestito da classi.  
  
 Per altre informazioni sulla gestione delle classi, vedere [contrassegno degli eventi indirizzati come gestiti e gestione delle classi](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 Usando questa firma, i gestori classi possono essere richiamati per eventi gestiti, impostando `handledEventsToo` impostato su `true`. In generale, è necessario eseguire questa operazione solo se si verifica un problema noto di gestione che si sta tentando di risolvere, ad esempio la gestione degli eventi di mouse o tastiera sistema di input.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterRoutedEvent">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent RegisterRoutedEvent(string name, valuetype System.Windows.RoutingStrategy routingStrategy, class System.Type handlerType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::RoutedEvent ^ RegisterRoutedEvent(System::String ^ name, System::Windows::RoutingStrategy routingStrategy, Type ^ handlerType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterRoutedEvent : string * System.Windows.RoutingStrategy * Type * Type -&gt; System.Windows.RoutedEvent" Usage="System.Windows.EventManager.RegisterRoutedEvent (name, routingStrategy, handlerType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="routingStrategy" Type="System.Windows.RoutingStrategy" />
        <Parameter Name="handlerType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">Nome dell'evento indirizzato. Il nome deve essere univoco all'interno del tipo di proprietario e non può essere <see langword="null" /> o una stringa vuota.</param>
        <param name="routingStrategy">Strategia di routing dell'evento come valore dell'enumerazione.</param>
        <param name="handlerType">Tipo del gestore dell'evento. Deve trattarsi di un tipo delegato e non può essere <see langword="null" />.</param>
        <param name="ownerType">Tipo di classe proprietario dell'evento indirizzato. Non può essere <see langword="null" />.</param>
        <summary>Registra un nuovo evento indirizzato nel sistema di eventi [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].</summary>
        <returns>Identificatore dell'evento indirizzato appena registrato. Questo oggetto identificatore può ora essere archiviato come campo statico in una classe e poi usato come parametro per i metodi che associano i gestori all'evento. L'identificatore dell'evento indirizzato è utilizzato anche per un altro sistema dell’evento [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)].</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il valore restituito di questo metodo per creare la dichiarazione statica di un valore univoco <xref:System.Windows.RoutedEvent> campo dell'identificatore. Questo campo deve essere archiviato all'interno del tipo di proprietario.  
  
 Esistono un numero considerevole di convenzioni e consigliate associate a eventi indirizzati come devono essere denominate, registrate ed esposte in una classe. Per altre informazioni, vedere [Cenni preliminari sugli eventi indirizzati](~/docs/framework/wpf/advanced/routed-events-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>