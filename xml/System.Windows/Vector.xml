<Type Name="Vector" FullName="System.Windows.Vector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6ea8c7028b35322ad0681274986a837af15bca05" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37489379" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct Vector : IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Vector extends System.ValueType implements class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Vector" />
  <TypeSignature Language="VB.NET" Value="Public Structure Vector&#xA;Implements IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Vector : IFormattable" />
  <TypeSignature Language="F#" Value="type Vector = struct&#xA;    interface IFormattable" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.VectorConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.VectorValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1fdae-101">Represents a displacement in 2-D space.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1fdae-101">Represents a displacement in 2-D space.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fdae-102">Oggetto <xref:System.Windows.Point> rappresenta una posizione fissa, ma un <xref:System.Windows.Vector> rappresenta una direzione e una grandezza (ad esempio, la velocità o l'accelerazione).</span><span class="sxs-lookup"><span data-stu-id="1fdae-102">A <xref:System.Windows.Point> represents a fixed position, but a <xref:System.Windows.Vector> represents a direction and a magnitude (for example, velocity or acceleration).</span></span> <span data-ttu-id="1fdae-103">Di conseguenza, gli endpoint di un segmento di linea sono punti ma loro differenza è un oggetto vector, vale a dire, la direzione e la lunghezza di tale segmento della riga.</span><span class="sxs-lookup"><span data-stu-id="1fdae-103">Thus, the endpoints of a line segment are points but their difference is a vector; that is, the direction and length of that line segment.</span></span>  
  
 <span data-ttu-id="1fdae-104">In XAML, il delimitatore tra il <xref:System.Windows.Vector.X%2A> e <xref:System.Windows.Vector.Y%2A> i valori di un <xref:System.Windows.Vector> può essere una virgola o uno spazio.</span><span class="sxs-lookup"><span data-stu-id="1fdae-104">In XAML, the delimiter between the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> values of a <xref:System.Windows.Vector> can be either a comma or a space.</span></span>  
  
 <span data-ttu-id="1fdae-105">Alcune impostazioni cultura potrebbe usare la virgola come delimitatore decimale anziché il carattere punto.</span><span class="sxs-lookup"><span data-stu-id="1fdae-105">Some cultures might use the comma character as the decimal delimiter instead of the period character.</span></span> <span data-ttu-id="1fdae-106">XAML di elaborazione per impostazioni cultura invarianti en-US nella maggior parte delle implementazioni del processore XAML per impostazione predefinita e prevede che il periodo di delimitatore decimale.</span><span class="sxs-lookup"><span data-stu-id="1fdae-106">XAML processing for invariant culture defaults to en-US in most XAML processor implementations, and expects the period to be the decimal delimiter.</span></span> <span data-ttu-id="1fdae-107">Evitare di usare la virgola come delimitatore decimale Se si specifica un <xref:System.Windows.Vector> in XAML, per evitare conflitti con la conversione di tipo stringa di un <xref:System.Windows.Vector> nel valore dell'attributo le <xref:System.Windows.Vector.X%2A> e <xref:System.Windows.Vector.Y%2A> componenti.</span><span class="sxs-lookup"><span data-stu-id="1fdae-107">You should avoid using the comma character as the decimal delimiter if specifying a <xref:System.Windows.Vector> in XAML, because that will clash with the string type conversion of a <xref:System.Windows.Vector> attribute value into the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> components.</span></span>  
  
<a name="xamlAttributeUsage_Vector"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="1fdae-108">Uso della sintassi XAML per gli attributi</span><span class="sxs-lookup"><span data-stu-id="1fdae-108">XAML Attribute Usage</span></span>  
  
```  
<object property="x,y"/>  
-or-  
<object property="x y"/>  
```  
  
<a name="xamlValues_Vector"></a>   
## <a name="xaml-values"></a><span data-ttu-id="1fdae-109">Valori XAML</span><span class="sxs-lookup"><span data-stu-id="1fdae-109">XAML Values</span></span>  
 <span data-ttu-id="1fdae-110">*x*</span><span class="sxs-lookup"><span data-stu-id="1fdae-110">*x*</span></span>  
 <span data-ttu-id="1fdae-111">Il componente X del vettore.</span><span class="sxs-lookup"><span data-stu-id="1fdae-111">The vector's X component.</span></span> <span data-ttu-id="1fdae-112">Per altre informazioni, vedere la proprietà <xref:System.Windows.Vector.X%2A>.</span><span class="sxs-lookup"><span data-stu-id="1fdae-112">For more information, see the <xref:System.Windows.Vector.X%2A> property.</span></span>  
  
 <span data-ttu-id="1fdae-113">*y*</span><span class="sxs-lookup"><span data-stu-id="1fdae-113">*y*</span></span>  
 <span data-ttu-id="1fdae-114">Componente Y del vettore.</span><span class="sxs-lookup"><span data-stu-id="1fdae-114">The vector's Y component.</span></span> <span data-ttu-id="1fdae-115">Per altre informazioni, vedere la proprietà <xref:System.Windows.Vector.Y%2A>.</span><span class="sxs-lookup"><span data-stu-id="1fdae-115">For more information, see the <xref:System.Windows.Vector.Y%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1fdae-116">Nell'esempio seguente viene illustrato come aggiungere due <xref:System.Windows.Vector> strutture.</span><span class="sxs-lookup"><span data-stu-id="1fdae-116">The following example shows how to add two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorSample#10](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorSample/CSharp/Window1.xaml.cs#10)]
 [!code-vb[VectorSample#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorSample/visualbasic/window1.xaml.vb#10)]  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Windows.Vector.Add" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Vector (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.#ctor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (x As Double, y As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Vector(double x, double y);" />
      <MemberSignature Language="F#" Value="new System.Windows.Vector : double * double -&gt; System.Windows.Vector" Usage="new System.Windows.Vector (x, y)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="1fdae-117">The <see cref="P:System.Windows.Vector.X" />-offset of the new <see cref="T:System.Windows.Vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-117">The <see cref="P:System.Windows.Vector.X" />-offset of the new <see cref="T:System.Windows.Vector" />.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="1fdae-118">The <see cref="P:System.Windows.Vector.Y" />-offset of the new <see cref="T:System.Windows.Vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-118">The <see cref="P:System.Windows.Vector.Y" />-offset of the new <see cref="T:System.Windows.Vector" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-119">Initializes a new instance of the <see cref="T:System.Windows.Vector" /> structure.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-119">Initializes a new instance of the <see cref="T:System.Windows.Vector" /> structure.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-120">Nell'esempio seguente viene illustrato come creare due vettori e li sommiamo.</span><span class="sxs-lookup"><span data-stu-id="1fdae-120">The following example shows how to create two vectors and add them together.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AddTwoVectorsExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addtwovectorsexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1fdae-121">Adds a vector to a point or to another vector.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-121">Adds a vector to a point or to another vector.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Windows.Point Add (System.Windows.Vector vector, System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Point Add(valuetype System.Windows.Vector vector, valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point Add(System::Windows::Vector vector, System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="static member Add : System.Windows.Vector * System.Windows.Point -&gt; System.Windows.Point" Usage="System.Windows.Vector.Add (vector, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="1fdae-122">The amount to translate the specified point.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-122">The amount to translate the specified point.</span>
          </span>
        </param>
        <param name="point">
          <span data-ttu-id="1fdae-123">The point to translate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-123">The point to translate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-124">Translates the specified point by the specified vector and returns the resulting point.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-124">Translates the specified point by the specified vector and returns the resulting point.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-125">The result of translating <paramref name="point" /> by <paramref name="vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-125">The result of translating <paramref name="point" /> by <paramref name="vector" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-126">Nell'esempio seguente viene illustrato come utilizzare questo metodo per aggiungere un <xref:System.Windows.Point> struttura di un <xref:System.Windows.Vector> struttura.</span><span class="sxs-lookup"><span data-stu-id="1fdae-126">The following example shows how to use this method to add a <xref:System.Windows.Point> structure to a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AddPointAndVectorExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addpointandvectorexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Add (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Add(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Add(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Add : System.Windows.Vector * System.Windows.Vector -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Add (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="1fdae-127">The first vector to add.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-127">The first vector to add.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="1fdae-128">The second vector to add.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-128">The second vector to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-129">Adds two vectors and returns the result as a <see cref="T:System.Windows.Vector" /> structure.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-129">Adds two vectors and returns the result as a <see cref="T:System.Windows.Vector" /> structure.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-130">The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-130">The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-131">Nell'esempio seguente viene illustrato come utilizzare questo metodo per aggiungere due <xref:System.Windows.Vector> strutture.</span><span class="sxs-lookup"><span data-stu-id="1fdae-131">The following example shows how to use this method to add two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AddTwoVectorsExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addtwovectorsexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="AngleBetween">
      <MemberSignature Language="C#" Value="public static double AngleBetween (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 AngleBetween(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AngleBetween (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double AngleBetween(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member AngleBetween : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="System.Windows.Vector.AngleBetween (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="1fdae-132">The first vector to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-132">The first vector to evaluate.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="1fdae-133">The second vector to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-133">The second vector to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-134">Retrieves the angle, expressed in degrees, between the two specified vectors.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-134">Retrieves the angle, expressed in degrees, between the two specified vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-135">The angle, in degrees, between <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-135">The angle, in degrees, between <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-136">Nell'esempio seguente viene illustrato come utilizzare questo metodo per ottenere l'angolo tra due <xref:System.Windows.Vector> strutture.</span><span class="sxs-lookup"><span data-stu-id="1fdae-136">The following example shows how to use this method to get the angle between two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AngleBetweenExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#anglebetweenexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CrossProduct">
      <MemberSignature Language="C#" Value="public static double CrossProduct (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 CrossProduct(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CrossProduct (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double CrossProduct(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member CrossProduct : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="System.Windows.Vector.CrossProduct (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="1fdae-137">The first vector to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-137">The first vector to evaluate.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="1fdae-138">The second vector to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-138">The second vector to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-139">Calculates the cross product of two vectors.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-139">Calculates the cross product of two vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-140">The cross product of <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-140">The cross product of <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          </span>
          <span data-ttu-id="1fdae-141">The following formula is used to calculate the cross product:  <c>(Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)</c></span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-141">The following formula is used to calculate the cross product:  <c>(Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)</c></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-142">Nell'esempio seguente viene illustrato come utilizzare questo metodo per la quale calcolare il prodotto incrociato di due <xref:System.Windows.Vector> strutture.</span><span class="sxs-lookup"><span data-stu-id="1fdae-142">The following example shows how to use this method to calculate the cross product of two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#CrossProductExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#crossproductexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Determinant">
      <MemberSignature Language="C#" Value="public static double Determinant (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Determinant(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Determinant (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Determinant(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Determinant : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="System.Windows.Vector.Determinant (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="1fdae-143">The first vector to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-143">The first vector to evaluate.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="1fdae-144">The second vector to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-144">The second vector to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-145">Calculates the determinant of two vectors.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-145">Calculates the determinant of two vectors.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-146">The determinant of <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-146">The determinant of <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-147">Nell'esempio seguente viene mostrato come calcolare il determinante di due <xref:System.Windows.Vector> strutture.</span><span class="sxs-lookup"><span data-stu-id="1fdae-147">The following example shows how to calculate the determinant of two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#DeterminantExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#determinantexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Divide (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Divide(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Divide(System::Windows::Vector vector, double scalar);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Windows.Vector * double -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Divide (vector, scalar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="1fdae-148">The vector structure to divide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-148">The vector structure to divide.</span>
          </span>
        </param>
        <param name="scalar">
          <span data-ttu-id="1fdae-149">The amount by which <c>vector</c> is divided.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-149">The amount by which <c>vector</c> is divided.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-150">Divides the specified vector by the specified scalar and returns the result as a <see cref="T:System.Windows.Vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-150">Divides the specified vector by the specified scalar and returns the result as a <see cref="T:System.Windows.Vector" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-151">The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-151">The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-152">Nell'esempio seguente viene illustrato come utilizzare questo metodo per suddividere un <xref:System.Windows.Vector> per un valore scalare.</span><span class="sxs-lookup"><span data-stu-id="1fdae-152">The following example shows how to use this method to divide a <xref:System.Windows.Vector> by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#DivideExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#divideexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1fdae-153">Compares two vectors for equality.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-153">Compares two vectors for equality.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fdae-154">Un vettore <xref:System.Windows.Vector.X%2A> e <xref:System.Windows.Vector.Y%2A> sono descritte le proprietà usando <xref:System.Double> valori.</span><span class="sxs-lookup"><span data-stu-id="1fdae-154">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="1fdae-155">Poiché il valore di una <xref:System.Double> possibile perdita di precisione durante operazioni aritmetiche vengono eseguite su di esso, un confronto tra due <xref:System.Double> strutture logicamente equivalenti potrebbero non riuscire.</span><span class="sxs-lookup"><span data-stu-id="1fdae-155">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="vector.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="1fdae-156">The vector to compare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-156">The vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-157">Determines whether the specified <see cref="T:System.Object" /> is a <see cref="T:System.Windows.Vector" /> structure and, if it is, whether it has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-157">Determines whether the specified <see cref="T:System.Object" /> is a <see cref="T:System.Windows.Vector" /> structure and, if it is, whether it has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-158">
            <see langword="true" /> if <paramref name="o" /> is a <see cref="T:System.Windows.Vector" /> and has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-158">
              <see langword="true" /> if <paramref name="o" /> is a <see cref="T:System.Windows.Vector" /> and has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fdae-159">Un vettore <xref:System.Windows.Vector.X%2A> e <xref:System.Windows.Vector.Y%2A> sono descritte le proprietà usando <xref:System.Double> valori.</span><span class="sxs-lookup"><span data-stu-id="1fdae-159">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="1fdae-160">Poiché il valore di una <xref:System.Double> possibile perdita di precisione durante operazioni aritmetiche vengono eseguite su di esso, un confronto tra due <xref:System.Windows.Vector> strutture logicamente equivalenti potrebbero non riuscire.</span><span class="sxs-lookup"><span data-stu-id="1fdae-160">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1fdae-161">Nell'esempio seguente viene illustrato come utilizzare questo metodo per verificare se un <xref:System.Windows.Vector> e un <xref:System.Object> sono uguali.</span><span class="sxs-lookup"><span data-stu-id="1fdae-161">The following example shows how to use this method to check whether a <xref:System.Windows.Vector> and an <xref:System.Object> are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#EqualsExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.Vector value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Windows.Vector value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Equals(System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Windows::Vector value);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Windows.Vector -&gt; bool" Usage="vector.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="1fdae-162">The vector to compare with this vector.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-162">The vector to compare with this vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-163">Compares two vectors for equality.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-163">Compares two vectors for equality.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-164">
            <see langword="true" /> if <paramref name="value" /> has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-164">
              <see langword="true" /> if <paramref name="value" /> has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fdae-165">Un vettore <xref:System.Windows.Vector.X%2A> e <xref:System.Windows.Vector.Y%2A> sono descritte le proprietà usando <xref:System.Double> valori.</span><span class="sxs-lookup"><span data-stu-id="1fdae-165">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="1fdae-166">Poiché il valore di una <xref:System.Double> possibile perdita di precisione durante operazioni aritmetiche vengono eseguite su di esso, un confronto tra due <xref:System.Windows.Vector> strutture logicamente equivalenti potrebbero non riuscire.</span><span class="sxs-lookup"><span data-stu-id="1fdae-166">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1fdae-167">Nell'esempio seguente viene illustrato come utilizzare questo metodo per verificare se due <xref:System.Windows.Vector> strutture sono uguali.</span><span class="sxs-lookup"><span data-stu-id="1fdae-167">The following example shows how to use this method to check whether two <xref:System.Windows.Vector> structures are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#EqualsExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (vector1 As Vector, vector2 As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Equals : System.Windows.Vector * System.Windows.Vector -&gt; bool" Usage="System.Windows.Vector.Equals (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="1fdae-168">The first vector to compare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-168">The first vector to compare.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="1fdae-169">The second vector to compare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-169">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-170">Compares the two specified vectors for equality.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-170">Compares the two specified vectors for equality.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-171">
            <see langword="true" /> if t he <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-171">
              <see langword="true" /> if t he <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fdae-172">Un vettore <xref:System.Windows.Vector.X%2A> e <xref:System.Windows.Vector.Y%2A> sono descritte le proprietà usando <xref:System.Double> valori.</span><span class="sxs-lookup"><span data-stu-id="1fdae-172">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="1fdae-173">Poiché il valore di una <xref:System.Double> possibile perdita di precisione durante operazioni aritmetiche vengono eseguite su di esso, un confronto tra due <xref:System.Double> strutture logicamente equivalenti potrebbero non riuscire.</span><span class="sxs-lookup"><span data-stu-id="1fdae-173">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1fdae-174">Nell'esempio seguente viene illustrato come utilizzare questo metodo per verificare se due <xref:System.Windows.Vector> strutture sono uguali.</span><span class="sxs-lookup"><span data-stu-id="1fdae-174">The following example shows how to use this method to check whether two <xref:System.Windows.Vector> structures are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#EqualsExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="vector.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1fdae-175">Returns the hash code for this vector.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-175">Returns the hash code for this vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-176">The hash code for this instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-176">The hash code for this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-177">Nell'esempio seguente viene illustrato come ottenere il codice hash di un <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="1fdae-177">The following example shows how to get the hash code of a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#GetHashCodeExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#gethashcodeexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public double Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Length { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : double" Usage="System.Windows.Vector.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1fdae-178">Gets the length of this vector.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-178">Gets the length of this vector.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1fdae-179">La lunghezza di questo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-179">The length of this vector.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fdae-180">La lunghezza di un vettore a volte fa riferimento come la grandezza.</span><span class="sxs-lookup"><span data-stu-id="1fdae-180">The length of a vector is sometimes referred to as the magnitude.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1fdae-181">Nell'esempio seguente viene illustrato come utilizzano questa proprietà per ottenere la lunghezza di un vettore.</span><span class="sxs-lookup"><span data-stu-id="1fdae-181">The following example shows how use this property to get the length of a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#LengthExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#lengthexample)]
 [!code-vb[VectorExamples_snip#LengthExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#lengthexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LengthSquared">
      <MemberSignature Language="C#" Value="public double LengthSquared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 LengthSquared" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.LengthSquared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LengthSquared As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double LengthSquared { double get(); };" />
      <MemberSignature Language="F#" Value="member this.LengthSquared : double" Usage="System.Windows.Vector.LengthSquared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1fdae-182">Gets the square of the length of this vector.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-182">Gets the square of the length of this vector.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1fdae-183">Il quadrato del <see cref="P:System.Windows.Vector.Length" /> di questo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-183">The square of the <see cref="P:System.Windows.Vector.Length" /> of this vector.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fdae-184">La lunghezza di un vettore a volte fa riferimento la grandezza.</span><span class="sxs-lookup"><span data-stu-id="1fdae-184">The length of a vector is sometimes referred to as its magnitude.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1fdae-185">Nell'esempio seguente viene illustrato come utilizzare questa proprietà per ottenere il quadrato della lunghezza di un vettore.</span><span class="sxs-lookup"><span data-stu-id="1fdae-185">The following example shows how to use this property to get the square of the length of a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#LengthSquaredExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#lengthsquaredexample)]
 [!code-vb[VectorExamples_snip#LengthSquaredExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#lengthsquaredexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Multiply">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1fdae-186">Multiplies the specified vector by the specified <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" />, or <see cref="T:System.Windows.Vector" /> and returns the result as a <see cref="T:System.Windows.Vector" /> or <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-186">Multiplies the specified vector by the specified <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" />, or <see cref="T:System.Windows.Vector" /> and returns the result as a <see cref="T:System.Windows.Vector" /> or <see cref="T:System.Double" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Multiply (double scalar, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Multiply(float64 scalar, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Multiply(double scalar, System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member Multiply : double * System.Windows.Vector -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Multiply (scalar, vector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="System.Double" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="scalar">
          <span data-ttu-id="1fdae-187">The scalar to multiply.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-187">The scalar to multiply.</span>
          </span>
        </param>
        <param name="vector">
          <span data-ttu-id="1fdae-188">The vector to multiply.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-188">The vector to multiply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-189">Multiplies the specified scalar by the specified vector and returns the resulting <see cref="T:System.Windows.Vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-189">Multiplies the specified scalar by the specified vector and returns the resulting <see cref="T:System.Windows.Vector" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-190">The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-190">The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-191">Nell'esempio seguente viene illustrato come utilizzare questo metodo per un valore scalare da moltiplicare un <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="1fdae-191">The following example shows how to use this method to multiply a scalar by a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#MultiplyVectorByScalarExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbyscalarexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Multiply (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Multiply(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Multiply(System::Windows::Vector vector, double scalar);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Windows.Vector * double -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Multiply (vector, scalar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="1fdae-192">The vector to multiply.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-192">The vector to multiply.</span>
          </span>
        </param>
        <param name="scalar">
          <span data-ttu-id="1fdae-193">The scalar to multiply.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-193">The scalar to multiply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-194">Multiplies the specified vector by the specified scalar and returns the resulting <see cref="T:System.Windows.Vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-194">Multiplies the specified vector by the specified scalar and returns the resulting <see cref="T:System.Windows.Vector" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-195">The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-195">The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-196">Nell'esempio seguente viene illustrato come utilizzare questo metodo per cui moltiplicare un <xref:System.Windows.Vector> per un valore scalare.</span><span class="sxs-lookup"><span data-stu-id="1fdae-196">The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#MultiplyVectorByScalarExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbyscalarexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Multiply (System.Windows.Vector vector, System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Multiply(valuetype System.Windows.Vector vector, valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Multiply(System::Windows::Vector vector, System::Windows::Media::Matrix matrix);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Windows.Vector * System.Windows.Media.Matrix -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Multiply (vector, matrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="1fdae-197">The vector structure to transform.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-197">The vector structure to transform.</span>
          </span>
        </param>
        <param name="matrix">
          <span data-ttu-id="1fdae-198">The transformation to apply to <c>vector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-198">The transformation to apply to <c>vector</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-199">Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-199">Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-200">The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-200">The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-201">Nell'esempio seguente viene illustrato come utilizzare questo metodo per cui moltiplicare un <xref:System.Windows.Vector> da un <xref:System.Windows.Media.Matrix>.</span><span class="sxs-lookup"><span data-stu-id="1fdae-201">The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a <xref:System.Windows.Media.Matrix>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#MultiplyVectorByMatrixExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbymatrixexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static double Multiply (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Multiply(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Multiply(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="System.Windows.Vector.Multiply (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="1fdae-202">The first vector to multiply.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-202">The first vector to multiply.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="1fdae-203">The second vector structure to multiply.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-203">The second vector structure to multiply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-204">Calculates the dot product of the two specified vectors and returns the result as a <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-204">Calculates the dot product of the two specified vectors and returns the result as a <see cref="T:System.Double" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-205">A <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" /> and <paramref name="vector2" />, which is calculated using the following formula:  <c>(vector1.X * vector2.X) + (vector1.Y * vector2.Y)</c></span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-205">A <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" /> and <paramref name="vector2" />, which is calculated using the following formula:  <c>(vector1.X * vector2.X) + (vector1.Y * vector2.Y)</c></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-206">Nell'esempio seguente viene illustrato come utilizzare questo metodo per cui moltiplicare un <xref:System.Windows.Vector> da un <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="1fdae-206">The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#GetDotProductExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#getdotproductexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public void Negate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Negate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Negate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Negate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Negate();" />
      <MemberSignature Language="F#" Value="member this.Negate : unit -&gt; unit" Usage="vector.Negate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1fdae-207">Negates this vector.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-207">Negates this vector.</span>
          </span>
          <span data-ttu-id="1fdae-208">The vector has the same magnitude as before, but its direction is now opposite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-208">The vector has the same magnitude as before, but its direction is now opposite.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-209">Nell'esempio seguente viene illustrato come utilizzare questo metodo per negare un vettore.</span><span class="sxs-lookup"><span data-stu-id="1fdae-209">The following example shows how to use this method to negate a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#NegateExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#negateexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Normalize">
      <MemberSignature Language="C#" Value="public void Normalize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Normalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Normalize" />
      <MemberSignature Language="VB.NET" Value="Public Sub Normalize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Normalize();" />
      <MemberSignature Language="F#" Value="member this.Normalize : unit -&gt; unit" Usage="vector.Normalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1fdae-210">Normalizes this vector.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-210">Normalizes this vector.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fdae-211">Un vettore normalizzato mantiene la direzione ma la relativa <xref:System.Windows.Vector.Length%2A> diventa 1.</span><span class="sxs-lookup"><span data-stu-id="1fdae-211">A normalized vector maintains its direction but its <xref:System.Windows.Vector.Length%2A> becomes 1.</span></span> <span data-ttu-id="1fdae-212">Vettore risultante è spesso definito un vettore unitario.</span><span class="sxs-lookup"><span data-stu-id="1fdae-212">The resulting vector is often called a unit vector.</span></span> <span data-ttu-id="1fdae-213">Un vettore viene normalizzato, dividendo il vettore per la propria <xref:System.Windows.Vector.Length%2A>.</span><span class="sxs-lookup"><span data-stu-id="1fdae-213">A vector is normalized by dividing the vector by its own <xref:System.Windows.Vector.Length%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1fdae-214">Nell'esempio seguente viene illustrato come utilizzare questo metodo per la normalizzazione di un vettore.</span><span class="sxs-lookup"><span data-stu-id="1fdae-214">The following example shows how to use this method to normalize a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#NormalizeExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#normalizeexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Addition">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1fdae-215">Adds a vector to a point or to another vector.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-215">Adds a vector to a point or to another vector.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Windows.Point operator + (System.Windows.Vector vector, System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Point op_Addition(valuetype System.Windows.Vector vector, valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point operator +(System::Windows::Vector vector, System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Windows.Vector * System.Windows.Point -&gt; System.Windows.Point" Usage="vector + point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="1fdae-216">The vector used to translate <c>point</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-216">The vector used to translate <c>point</c>.</span>
          </span>
        </param>
        <param name="point">
          <span data-ttu-id="1fdae-217">The point to translate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-217">The point to translate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-218">Translates a point by the specified vector and returns the resulting point.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-218">Translates a point by the specified vector and returns the resulting point.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-219">The result of translating <paramref name="point" /> by <paramref name="vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-219">The result of translating <paramref name="point" /> by <paramref name="vector" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-220">Nell'esempio seguente viene illustrato come utilizzare questo operatore (+) per convertire un <xref:System.Windows.Point> struttura di un <xref:System.Windows.Vector> struttura.</span><span class="sxs-lookup"><span data-stu-id="1fdae-220">The following example shows how to use this operator (+) to translate a <xref:System.Windows.Point> structure to a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedAdditionOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedadditionoperatorexample2)]
 [!code-vb[VectorExamples_snip#OverloadedAdditionOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedadditionoperatorexample2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator + (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Addition(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator +(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Windows.Vector * System.Windows.Vector -&gt; System.Windows.Vector" Usage="vector1 + vector2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="1fdae-221">The first vector to add.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-221">The first vector to add.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="1fdae-222">The second vector to add.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-222">The second vector to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-223">Adds two vectors and returns the result as a vector.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-223">Adds two vectors and returns the result as a vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-224">The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-224">The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-225">Nell'esempio seguente viene illustrato come utilizzare questo operatore (+) per aggiungere due <xref:System.Windows.Vector> strutture e restituire un <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="1fdae-225">The following example shows how to use this operator (+) to add two <xref:System.Windows.Vector> structures and return a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedAdditionOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedadditionoperatorexample1)]
 [!code-vb[VectorExamples_snip#OverloadedAdditionOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedadditionoperatorexample1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator / (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Division(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator /(System::Windows::Vector vector, double scalar);" />
      <MemberSignature Language="F#" Value="static member ( / ) : System.Windows.Vector * double -&gt; System.Windows.Vector" Usage="vector / scalar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="1fdae-226">The vector to divide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-226">The vector to divide.</span>
          </span>
        </param>
        <param name="scalar">
          <span data-ttu-id="1fdae-227">The scalar by which <c>vector</c> will be divided.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-227">The scalar by which <c>vector</c> will be divided.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-228">Divides the specified vector by the specified scalar and returns the resulting vector.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-228">Divides the specified vector by the specified scalar and returns the resulting vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-229">The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-229">The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-230">Nell'esempio seguente viene illustrato come utilizzare questo operatore (/) per dividere un <xref:System.Windows.Vector> struttura per un valore scalare.</span><span class="sxs-lookup"><span data-stu-id="1fdae-230">The following example shows how to use this operator (/) to divide a <xref:System.Windows.Vector> structure by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedDivisionOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadeddivisionoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedDivisionOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadeddivisionoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (vector1 As Vector, vector2 As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Vector * System.Windows.Vector -&gt; bool" Usage="vector1 = vector2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="1fdae-231">The first vector to compare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-231">The first vector to compare.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="1fdae-232">The second vector to compare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-232">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-233">Compares two vectors for equality.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-233">Compares two vectors for equality.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-234">
            <see langword="true" /> if the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-234">
              <see langword="true" /> if the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fdae-235">Un vettore <xref:System.Windows.Vector.X%2A> e <xref:System.Windows.Vector.Y%2A> sono descritte le proprietà usando <xref:System.Double> valori.</span><span class="sxs-lookup"><span data-stu-id="1fdae-235">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="1fdae-236">Poiché il valore di una <xref:System.Double> possibile perdita di precisione durante operazioni aritmetiche vengono eseguite su di esso, un confronto tra due <xref:System.Windows.Vector> strutture logicamente equivalenti potrebbero non riuscire.</span><span class="sxs-lookup"><span data-stu-id="1fdae-236">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1fdae-237">Nell'esempio seguente viene illustrato come utilizzare questo operatore (= =) per verificare se due <xref:System.Windows.Vector> strutture sono uguali.</span><span class="sxs-lookup"><span data-stu-id="1fdae-237">The following example shows how to use this operator (==) to check whether two <xref:System.Windows.Vector> structures are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedEqualityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedequalityoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedEqualityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Equals" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Explicit">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1fdae-238">Converts a vector into a <see cref="T:System.Windows.Size" /> or a <see cref="T:System.Windows.Point" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-238">Converts a vector into a <see cref="T:System.Windows.Size" /> or a <see cref="T:System.Windows.Point" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Windows.Point (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Point op_Explicit(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Windows::Point(System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Windows.Vector -&gt; System.Windows.Point" Usage="System.Windows.Vector.op_Explicit vector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="1fdae-239">The vector to convert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-239">The vector to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-240">Creates a <see cref="T:System.Windows.Point" /> with the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this vector.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-240">Creates a <see cref="T:System.Windows.Point" /> with the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-241">A point with <see cref="P:System.Windows.Point.X" />- and <see cref="P:System.Windows.Point.Y" />-coordinate values equal to the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> offset values of <paramref name="vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-241">A point with <see cref="P:System.Windows.Point.X" />- and <see cref="P:System.Windows.Point.Y" />-coordinate values equal to the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> offset values of <paramref name="vector" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-242">Nell'esempio seguente viene illustrato come convertire un <xref:System.Windows.Vector> in un <xref:System.Windows.Point>.</span><span class="sxs-lookup"><span data-stu-id="1fdae-242">The following example shows how to convert a <xref:System.Windows.Vector> into a <xref:System.Windows.Point>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedExplicitOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedexplicitoperatorexample2)]
 [!code-vb[VectorExamples_snip#OverloadedExplicitOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedexplicitoperatorexample2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Windows.Size (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Size op_Explicit(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Windows::Size(System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Windows.Vector -&gt; System.Windows.Size" Usage="System.Windows.Vector.op_Explicit vector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="1fdae-243">The vector to convert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-243">The vector to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-244">Creates a <see cref="T:System.Windows.Size" /> from the offsets of this vector.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-244">Creates a <see cref="T:System.Windows.Size" /> from the offsets of this vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-245">A <see cref="T:System.Windows.Size" /> with a <see cref="P:System.Windows.Size.Width" /> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.X" /> property and a <see cref="P:System.Windows.Size.Height" /> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.Y" /> property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-245">A <see cref="T:System.Windows.Size" /> with a <see cref="P:System.Windows.Size.Width" /> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.X" /> property and a <see cref="P:System.Windows.Size.Height" /> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.Y" /> property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-246">Nell'esempio seguente viene illustrato come convertire in modo esplicito un <xref:System.Windows.Vector> in un <xref:System.Windows.Size>.</span><span class="sxs-lookup"><span data-stu-id="1fdae-246">The following example shows how to explicitly convert a <xref:System.Windows.Vector> into a <xref:System.Windows.Size>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedExplicitOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedexplicitoperatorexample1)]
 [!code-vb[VectorExamples_snip#OverloadedExplicitOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedexplicitoperatorexample1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (vector1 As Vector, vector2 As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Vector * System.Windows.Vector -&gt; bool" Usage="System.Windows.Vector.op_Inequality (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="1fdae-247">The first vector to compare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-247">The first vector to compare.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="1fdae-248">The second vector to compare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-248">The second vector to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-249">Compares two vectors for inequality.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-249">Compares two vectors for inequality.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-250">
            <see langword="true" /> if the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are different; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-250">
              <see langword="true" /> if the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are different; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fdae-251">Un vettore <xref:System.Windows.Vector.X%2A> e <xref:System.Windows.Vector.Y%2A> sono descritte le proprietà usando <xref:System.Double> valori.</span><span class="sxs-lookup"><span data-stu-id="1fdae-251">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="1fdae-252">Poiché il valore di una <xref:System.Double> possibile perdita di precisione durante operazioni aritmetiche vengono eseguite su di esso, un confronto tra due <xref:System.Windows.Vector> strutture logicamente equivalenti potrebbero non riuscire.</span><span class="sxs-lookup"><span data-stu-id="1fdae-252">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1fdae-253">Nell'esempio seguente viene illustrato come utilizzare questo operatore (! =) per verificare se due <xref:System.Windows.Vector> strutture non sono uguali.</span><span class="sxs-lookup"><span data-stu-id="1fdae-253">The following example shows how to use this operator (!=) to check whether two <xref:System.Windows.Vector> structures are not equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedInequalityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedinequalityoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedInequalityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedinequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Multiply">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1fdae-254">Multiplies the specified <see cref="T:System.Windows.Vector" /> by the specified <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" />, or <see cref="T:System.Windows.Vector" /> and returns the result.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-254">Multiplies the specified <see cref="T:System.Windows.Vector" /> by the specified <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" />, or <see cref="T:System.Windows.Vector" /> and returns the result.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator * (double scalar, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Multiply(float64 scalar, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator *(double scalar, System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member ( * ) : double * System.Windows.Vector -&gt; System.Windows.Vector" Usage="scalar * vector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="System.Double" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="scalar">
          <span data-ttu-id="1fdae-255">The scalar to multiply.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-255">The scalar to multiply.</span>
          </span>
        </param>
        <param name="vector">
          <span data-ttu-id="1fdae-256">The vector to multiply.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-256">The vector to multiply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-257">Multiplies the specified scalar by the specified vector and returns the resulting vector.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-257">Multiplies the specified scalar by the specified vector and returns the resulting vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-258">The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-258">The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-259">Nell'esempio seguente viene illustrato come utilizzare questo operatore (\*) come per moltiplicare un valore scalare da una <xref:System.Windows.Vector> struttura.</span><span class="sxs-lookup"><span data-stu-id="1fdae-259">The following example shows how to use this operator (\*) to multiply a scalar by a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedMultiplicationOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplicationoperatorexample2)]
 [!code-vb[VectorExamples_snip#OverloadedMultiplicationOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplicationoperatorexample2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator * (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Multiply(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator *(System::Windows::Vector vector, double scalar);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Windows.Vector * double -&gt; System.Windows.Vector" Usage="vector * scalar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="1fdae-260">The vector to multiply.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-260">The vector to multiply.</span>
          </span>
        </param>
        <param name="scalar">
          <span data-ttu-id="1fdae-261">The scalar to multiply.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-261">The scalar to multiply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-262">Multiplies the specified vector by the specified scalar and returns the resulting vector.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-262">Multiplies the specified vector by the specified scalar and returns the resulting vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-263">The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-263">The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-264">Nell'esempio seguente viene illustrato come utilizzare questo operatore (\*) come per moltiplicare un <xref:System.Windows.Vector> struttura per un valore scalare.</span><span class="sxs-lookup"><span data-stu-id="1fdae-264">The following example shows how to use this operator (\*) to multiply a <xref:System.Windows.Vector> structure by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedMultiplicationOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplicationoperatorexample1)]
 [!code-vb[VectorExamples_snip#OverloadedMultiplicationOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplicationoperatorexample1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator * (System.Windows.Vector vector, System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Multiply(valuetype System.Windows.Vector vector, valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator *(System::Windows::Vector vector, System::Windows::Media::Matrix matrix);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Windows.Vector * System.Windows.Media.Matrix -&gt; System.Windows.Vector" Usage="vector * matrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="1fdae-265">The vector to transform.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-265">The vector to transform.</span>
          </span>
        </param>
        <param name="matrix">
          <span data-ttu-id="1fdae-266">The transformation to apply to <c>vector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-266">The transformation to apply to <c>vector</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-267">Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-267">Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-268">The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-268">The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-269">Nell'esempio seguente viene illustrato come utilizzare questo operatore (\*) come per moltiplicare un <xref:System.Windows.Vector> struttura da una <xref:System.Windows.Media.Matrix> struttura.</span><span class="sxs-lookup"><span data-stu-id="1fdae-269">The following example shows how to use this operator (\*) to multiply a <xref:System.Windows.Vector> structure by a <xref:System.Windows.Media.Matrix> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedMultiplyVectorByMatrixOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplyvectorbymatrixoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedMultiplyVectorByMatrixOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplyvectorbymatrixoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static double operator * (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Multiply(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double operator *(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="vector1 * vector2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="1fdae-270">The first vector to multiply.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-270">The first vector to multiply.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="1fdae-271">The second vector to multiply.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-271">The second vector to multiply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-272">Calculates the dot product of the two specified vector structures and returns the result as a <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-272">Calculates the dot product of the two specified vector structures and returns the result as a <see cref="T:System.Double" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-273">Returns a <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" /> and <paramref name="vector2" />, which is calculated using the following formula:  <c>vector1.X * vector2.X + vector1.Y * vector2.Y</c></span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-273">Returns a <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" /> and <paramref name="vector2" />, which is calculated using the following formula:  <c>vector1.X * vector2.X + vector1.Y * vector2.Y</c></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-274">Nell'esempio seguente viene illustrato come utilizzare questo operatore (\*) come per moltiplicare un <xref:System.Windows.Vector> struttura da una <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="1fdae-274">The following example shows how to use this operator (\*) to multiply a <xref:System.Windows.Vector> structure by a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedOperatorGetDotProductExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedoperatorgetdotproductexample)]
 [!code-vb[VectorExamples_snip#OverloadedOperatorGetDotProductExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedoperatorgetdotproductexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator - (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Subtraction(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator -(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member ( - ) : System.Windows.Vector * System.Windows.Vector -&gt; System.Windows.Vector" Usage="vector1 - vector2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="1fdae-275">The vector from which <c>vector2</c> is subtracted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-275">The vector from which <c>vector2</c> is subtracted.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="1fdae-276">The vector to subtract from <c>vector1</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-276">The vector to subtract from <c>vector1</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-277">Subtracts one specified vector from another.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-277">Subtracts one specified vector from another.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-278">The difference between <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-278">The difference between <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-279">Nell'esempio seguente viene illustrato come utilizzare questo operatore (-) da cui sottrarre un <xref:System.Windows.Vector> struttura da una <xref:System.Windows.Vector> struttura.</span><span class="sxs-lookup"><span data-stu-id="1fdae-279">The following example shows how to use this operator (-) to subtract a <xref:System.Windows.Vector> structure from a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedSubtractionOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedsubtractionoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedSubtractionOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedsubtractionoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator - (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_UnaryNegation(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator -(System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member ( ~- ) : System.Windows.Vector -&gt; System.Windows.Vector" Usage="- vector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector">
          <span data-ttu-id="1fdae-280">The vector to negate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-280">The vector to negate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-281">Negates the specified vector.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-281">Negates the specified vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-282">A vector with <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values opposite of the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of <paramref name="vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-282">A vector with <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values opposite of the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of <paramref name="vector" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-283">Nell'esempio seguente viene illustrato come utilizzare questo operatore di negazione per negare un <xref:System.Windows.Vector> struttura.</span><span class="sxs-lookup"><span data-stu-id="1fdae-283">The following example shows how to use this negation operator to negate a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedNegationOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadednegationoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedNegationOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadednegationoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Negate" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Parse (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Parse(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (source As String) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Parse(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Parse source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="1fdae-284">The string representation of the vector.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-284">The string representation of the vector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-285">Converts a string representation of a vector into the equivalent <see cref="T:System.Windows.Vector" /> structure.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-285">Converts a string representation of a vector into the equivalent <see cref="T:System.Windows.Vector" /> structure.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-286">The equivalent <see cref="T:System.Windows.Vector" /> structure.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-286">The equivalent <see cref="T:System.Windows.Vector" /> structure.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-287">Nell'esempio seguente viene illustrato come utilizzare questo metodo per convertire una rappresentazione di stringa di un vettore in una <xref:System.Windows.Vector> struttura.</span><span class="sxs-lookup"><span data-stu-id="1fdae-287">The following example shows how to use this method to convert a string representation of a vector into a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#ParseExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#parseexample)]
 [!code-vb[VectorExamples_snip#ParseExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#parseexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Subtract (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Subtract(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Subtract(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Windows.Vector * System.Windows.Vector -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Subtract (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1">
          <span data-ttu-id="1fdae-288">The vector from which <c>vector2</c> is subtracted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-288">The vector from which <c>vector2</c> is subtracted.</span>
          </span>
        </param>
        <param name="vector2">
          <span data-ttu-id="1fdae-289">The vector to subtract from <c>vector1</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-289">The vector to subtract from <c>vector1</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-290">Subtracts the specified vector from another specified vector.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-290">Subtracts the specified vector from another specified vector.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-291">The difference between <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-291">The difference between <paramref name="vector1" /> and <paramref name="vector2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-292">Nell'esempio seguente viene illustrato come utilizzare questo metodo per sottrarre un <xref:System.Windows.Vector> struttura da una <xref:System.Windows.Vector> struttura.</span><span class="sxs-lookup"><span data-stu-id="1fdae-292">The following example shows how to use this method to subtract a <xref:System.Windows.Vector> structure from a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#SubtractExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#subtractexample)]
 [!code-vb[VectorExamples_snip#SubtractExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#subtractexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, provider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ format, IFormatProvider ^ provider) = IFormattable::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="1fdae-293">The string specifying the format to use.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-293">The string specifying the format to use.</span>
          </span>
          <span data-ttu-id="1fdae-294">-or-  <see langword="null" /> to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-294">-or-  <see langword="null" /> to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="1fdae-295">The <see langword="IFormatProvider" /> to use to format the value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-295">The <see langword="IFormatProvider" /> to use to format the value.</span>
          </span>
          <span data-ttu-id="1fdae-296">-or-  <see langword="null" /> to obtain the numeric format information from the current locale setting of the operating system.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-296">-or-  <see langword="null" /> to obtain the numeric format information from the current locale setting of the operating system.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-297">This member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-297">This member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</span>
          </span>
          <span data-ttu-id="1fdae-298">For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-298">For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-299">A string containing the value of the current instance in the specified format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-299">A string containing the value of the current instance in the specified format.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1fdae-300">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-300">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="vector.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1fdae-301">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-301">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-302">A string that represents the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this <see cref="T:System.Windows.Vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-302">A string that represents the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this <see cref="T:System.Windows.Vector" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-303">Nell'esempio seguente viene illustrato come utilizzare questo metodo per ottenere una rappresentazione di stringa di un <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="1fdae-303">The following example shows how to use this method to get a string representation of a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#ToStringExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#tostringexample)]
 [!code-vb[VectorExamples_snip#ToStringExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#tostringexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="vector.ToString provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="1fdae-304">The culture-specific formatting information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-304">The culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1fdae-305">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure with the specified formatting information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-305">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure with the specified formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1fdae-306">A string that represents the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this <see cref="T:System.Windows.Vector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-306">A string that represents the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this <see cref="T:System.Windows.Vector" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public double X { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.X" />
      <MemberSignature Language="VB.NET" Value="Public Property X As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double X { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.X : double with get, set" Usage="System.Windows.Vector.X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1fdae-307">Gets or sets the <see cref="P:System.Windows.Vector.X" /> component of this vector.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-307">Gets or sets the <see cref="P:System.Windows.Vector.X" /> component of this vector.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1fdae-308">Il <see cref="P:System.Windows.Vector.X" /> componente di questo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-308">The <see cref="P:System.Windows.Vector.X" /> component of this vector.</span>
          </span>
          <span data-ttu-id="1fdae-309">Il valore predefinito è 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-309">The default value is 0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-310">Nell'esempio seguente viene illustrato come controllare due <xref:System.Windows.Vector> strutture per verificarne l'uguaglianza.</span><span class="sxs-lookup"><span data-stu-id="1fdae-310">The following example shows how to check two <xref:System.Windows.Vector> structures for equality.</span></span>  
  
 [!code-csharp[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#vectorequalityexample)]
 [!code-vb[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#vectorequalityexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Vector.Y" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public double Y { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.Y" />
      <MemberSignature Language="VB.NET" Value="Public Property Y As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Y { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Y : double with get, set" Usage="System.Windows.Vector.Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1fdae-311">Gets or sets the <see cref="P:System.Windows.Vector.Y" /> component of this vector.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-311">Gets or sets the <see cref="P:System.Windows.Vector.Y" /> component of this vector.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1fdae-312">Il <see cref="P:System.Windows.Vector.Y" /> componente di questo vettore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-312">The <see cref="P:System.Windows.Vector.Y" /> component of this vector.</span>
          </span>
          <span data-ttu-id="1fdae-313">Il valore predefinito è 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1fdae-313">The default value is 0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1fdae-314">Nell'esempio seguente viene illustrato come controllare due <xref:System.Windows.Vector> strutture per verificarne l'uguaglianza.</span><span class="sxs-lookup"><span data-stu-id="1fdae-314">The following example shows how to check two <xref:System.Windows.Vector> structures for equality.</span></span>  
  
 [!code-csharp[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#vectorequalityexample)]
 [!code-vb[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#vectorequalityexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Vector.X" />
      </Docs>
    </Member>
  </Members>
</Type>