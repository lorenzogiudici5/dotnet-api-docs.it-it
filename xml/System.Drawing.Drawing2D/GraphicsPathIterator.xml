<Type Name="GraphicsPathIterator" FullName="System.Drawing.Drawing2D.GraphicsPathIterator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="075e9346f557efa3eb11f9807f6d880a1b4adc0b" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46591344" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class GraphicsPathIterator : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit GraphicsPathIterator extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Drawing2D.GraphicsPathIterator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class GraphicsPathIterator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class GraphicsPathIterator sealed : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type GraphicsPathIterator = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Consente di scorrere i sottopercorsi in una classe <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> ed eseguire il test dei tipi di forme contenuti in ogni sottopercorso. Questa classe non può essere ereditata.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GraphicsPathIterator (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.#ctor(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GraphicsPathIterator(System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Drawing2D.GraphicsPathIterator : System.Drawing.Drawing2D.GraphicsPath -&gt; System.Drawing.Drawing2D.GraphicsPathIterator" Usage="new System.Drawing.Drawing2D.GraphicsPathIterator path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">Oggetto <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> per il quale deve essere inizializzata questa classe di supporto.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> con l'oggetto <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> specificato.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyData">
      <MemberSignature Language="C#" Value="public int CopyData (ref System.Drawing.PointF[] points, ref byte[] types, int startIndex, int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CopyData(valuetype System.Drawing.PointF[]&amp; points, unsigned int8[]&amp; types, int32 startIndex, int32 endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyData (ByRef points As PointF(), ByRef types As Byte(), startIndex As Integer, endIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CopyData(cli::array &lt;System::Drawing::PointF&gt; ^ % points, cli::array &lt;System::Byte&gt; ^ % types, int startIndex, int endIndex);" />
      <MemberSignature Language="F#" Value="member this.CopyData :  *  * int * int -&gt; int" Usage="graphicsPathIterator.CopyData (points, types, startIndex, endIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]" RefType="ref" />
        <Parameter Name="types" Type="System.Byte[]" RefType="ref" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="endIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="points">Dopo la restituzione dei valori, contiene una matrice di strutture <see cref="T:System.Drawing.PointF" /> che rappresenta i punti del percorso.</param>
        <param name="types">Dopo la restituzione dei valori, contiene una matrice di byte che rappresenta i tipi di punti del percorso.</param>
        <param name="startIndex">Specifica l'indice di inizio delle matrici.</param>
        <param name="endIndex">Specifica l'indice di fine delle matrici.</param>
        <summary>Copia le matrici della proprietà <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> e della proprietà <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" /> della classe associata <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> nelle due matrici specificate.</summary>
        <returns>Numero di punti copiati.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la `startIndex` e `endIndex` parametri per copiare un intervallo di dati di percorso specificato.  
  
   
  
## Examples  
 Nell'esempio seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, un <xref:System.Windows.Forms.Form.OnPaint%2A> oggetto evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un percorso grafico.  
  
-   Lo popola con diverse primitive e alcuni indicatori.  
  
-   Elenca i dati del percorso sul lato sinistro della schermata.  
  
-   Crea un <xref:System.Drawing.Drawing2D.GraphicsPathIterator> e azzeramento.  
  
-   Incrementa l'indice dei dati del percorso per il secondo marcatore.  
  
-   Le chiamate di <xref:System.Drawing.Drawing2D.GraphicsPathIterator.CopyData%2A> metodo per copiare i dati del percorso è racchiuso tra l'inizio e fine indicizza per i punti e i tipi di matrici.  
  
-   Elenca i dati copiati sul lato destro dello schermo.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#1)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPathIterator.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Drawing.Drawing2D.GraphicsPathIterator.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il numero di punti nel percorso.</summary>
        <value>Numero di punti nel percorso.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="graphicsPathIterator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia tutte le risorse usate dall'oggetto <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chiamata `Dispose` le risorse utilizzate da questo <xref:System.Drawing.Drawing2D.GraphicsPathIterator> oggetto riallocazione per altri scopi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enumerate">
      <MemberSignature Language="C#" Value="public int Enumerate (ref System.Drawing.PointF[] points, ref byte[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Enumerate(valuetype System.Drawing.PointF[]&amp; points, unsigned int8[]&amp; types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(System.Drawing.PointF[]@,System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Enumerate (ByRef points As PointF(), ByRef types As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Enumerate(cli::array &lt;System::Drawing::PointF&gt; ^ % points, cli::array &lt;System::Byte&gt; ^ % types);" />
      <MemberSignature Language="F#" Value="member this.Enumerate :  *  -&gt; int" Usage="graphicsPathIterator.Enumerate (points, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]" RefType="ref" />
        <Parameter Name="types" Type="System.Byte[]" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="points">Dopo la restituzione dei valori, contiene una matrice di strutture <see cref="T:System.Drawing.PointF" /> che rappresenta i punti del percorso.</param>
        <param name="types">Dopo la restituzione dei valori, contiene una matrice di byte che rappresenta i tipi di punti del percorso.</param>
        <summary>Copia le matrici della proprietà <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> e della proprietà <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" /> della classe associata <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> nelle due matrici specificate.</summary>
        <returns>Numero di punti copiati.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, un <xref:System.Windows.Forms.Form.OnPaint%2A> oggetto evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un percorso grafico.  
  
-   Lo popola con diverse primitive e alcuni indicatori.  
  
-   Elenca i dati del percorso sul lato sinistro della schermata.  
  
-   Crea un <xref:System.Drawing.Drawing2D.GraphicsPathIterator> e azzeramento.  
  
-   Incrementa l'indice dei dati del percorso per il secondo marcatore.  
  
-   Chiama il <xref:System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate%2A> metodo per copiare i dati del percorso per il `points` e `types` matrici.  
  
-   Elenca i dati copiati sul lato destro dello schermo.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#2)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~GraphicsPathIterator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!GraphicsPathIterator ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="graphicsPathIterator.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Consente a un oggetto di effettuare un tentativo di liberare risorse ed eseguire altre operazioni di pulizia prima che venga recuperato da Garbage Collection.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasCurve">
      <MemberSignature Language="C#" Value="public bool HasCurve ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasCurve() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve" />
      <MemberSignature Language="VB.NET" Value="Public Function HasCurve () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasCurve();" />
      <MemberSignature Language="F#" Value="member this.HasCurve : unit -&gt; bool" Usage="graphicsPathIterator.HasCurve " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indica se il percorso associato a questa classe <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> contiene una curva.</summary>
        <returns>Questo metodo restituisce <see langword="true" /> se il sottopercorso corrente contiene una curva. In caso contrario, restituisce <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tutte le curve in un percorso vengono archiviate come una sequenza di spline di Bézier. Ad esempio, quando si aggiunge un'ellisse in un percorso, specificare l'angolo superiore sinistro, la larghezza e altezza del rettangolo di delimitazione dell'ellisse. Tali numeri (angolo superiore sinistro, larghezza e altezza) non vengono archiviati nel percorso. In alternativa; i puntini di sospensione viene convertito in una sequenza di spline di Bézier quattro. Il percorso vengono memorizzati gli endpoint e i punti di controllo di tali spline di Bézier.  
  
 Un percorso di archivia una matrice di punti dati, ognuno dei quali appartiene a una riga o di una spline di Bézier. Se alcuni punti nella matrice di appartenere a spline di Bézier, quindi <xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A> restituisce `true`. Se tutti i punti nella matrice appartengono a righe, quindi <xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A> restituisce `false`.  
  
 Alcuni metodi di rendere flat un percorso, il che significa che tutte le curve nel percorso vengono convertite in sequenze di righe. Dopo che è stati resi bidimensionali un percorso, <xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A> restituirà sempre `false`. Chiama il <xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%2A>, <xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A>, o <xref:System.Drawing.Drawing2D.GraphicsPath.Warp%2A> metodo del <xref:System.Drawing.Drawing2D.GraphicsPath> classe unirà un percorso.  
  
   
  
## Examples  
 Nell'esempio seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, un <xref:System.Windows.Forms.Form.OnPaint%2A> oggetto evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una <xref:System.Drawing.Drawing2D.GraphicsPath> oggetti, `myPath`.  
  
-   Aggiunge tre righe, un rettangolo e un'ellisse.  
  
-   Crea una <xref:System.Drawing.Drawing2D.GraphicsPathIterator> dell'oggetto per `myPath`.  
  
-   Verifica se il percorso corrente `myPath` contiene una curva.  
  
-   Mostra il risultato del test in una finestra di messaggio.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#3)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="NextMarker">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sposta l'iteratore sul marcatore successivo nel percorso.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NextMarker">
      <MemberSignature Language="C#" Value="public int NextMarker (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextMarker(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMarker (path As GraphicsPath) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextMarker(System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.NextMarker : System.Drawing.Drawing2D.GraphicsPath -&gt; int" Usage="graphicsPathIterator.NextMarker path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">Oggetto <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> in cui saranno copiati i punti.</param>
        <summary>A questo oggetto <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> è associato un oggetto <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />. Il metodo <see cref="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)" /> incrementa la classe associata <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> al marcatore successivo nel relativo percorso e copia tutti i punti contenuti tra il marcatore corrente e quello successivo, o la fine del percorso, in un secondo oggetto <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> passato al parametro.</summary>
        <returns>Numero di punti tra il marcatore corrente e quello successivo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> metodo per impostare i marcatori in un percorso. Gli indicatori consentono di creare gruppi di sottopercorsi. Uno o più percorsi secondari possono essere compreso tra due marcatori.  
  
   
  
## Examples  
 Nell'esempio seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, un <xref:System.Windows.Forms.Form.OnPaint%2A> oggetto evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un oggetto <xref:System.Drawing.Drawing2D.GraphicsPath>.  
  
-   Aggiunge tre righe, un rettangolo, un'ellisse e due i marcatori.  
  
-   Elenca i valori di tutti i punti del percorso sul lato sinistro della schermata.  
  
-   Crea un oggetto <xref:System.Drawing.Drawing2D.GraphicsPathIterator>.  
  
-   Crea una <xref:System.Drawing.Drawing2D.GraphicsPath> oggetti, `myPathSection`per ricevere i punti copiati.  
  
-   Chiama il <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> metodo, che esegue l'iterazione al primo marcatore e vi copia tutti i punti contenuti tra tale marcatore e il successivo al `myPathSection`.  
  
-   Restituisce il numero di punti copiati `markerPoints`.  
  
-   Elenca il numero di marcatori (il primo indicatore) e il numero di punti che contiene sul lato destro dello schermo.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#4)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMarker">
      <MemberSignature Language="C#" Value="public int NextMarker (out int startIndex, out int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextMarker([out] int32&amp; startIndex, [out] int32&amp; endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMarker (ByRef startIndex As Integer, ByRef endIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextMarker([Runtime::InteropServices::Out] int % startIndex, [Runtime::InteropServices::Out] int % endIndex);" />
      <MemberSignature Language="F#" Value="member this.NextMarker :  *  -&gt; int" Usage="graphicsPathIterator.NextMarker (startIndex, endIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="startIndex">[out] Il riferimento integer fornito a questo parametro riceve l'indice del punto di inizio di un sottopercorso.</param>
        <param name="endIndex">[out] Il riferimento integer fornito a questo parametro riceve l'indice del punto finale del sottopercorso indicato da <c>startIndex</c>.</param>
        <summary>Incrementa la classe <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> al marcatore successivo del percorso e restituisce gli indici di avvio e di interruzione tramite i parametri [out].</summary>
        <returns>Numero di punti tra il marcatore corrente e quello successivo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> metodo per impostare i marcatori in un percorso. Gli indicatori consentono di creare gruppi di sottopercorsi. Uno o più percorsi secondari possono essere compreso tra due marcatori.  
  
   
  
## Examples  
 Nell'esempio seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, un <xref:System.Windows.Forms.Form.OnPaint%2A> oggetto evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un oggetto <xref:System.Drawing.Drawing2D.GraphicsPath>.  
  
-   Aggiunge un'ellisse ¾ con marcatori tra ogni tre righe e un rettangolo.  
  
-   Disegna i valori per la matrice di punti alla schermata.  
  
-   Crea un oggetto <xref:System.Drawing.Drawing2D.GraphicsPathIterator>.  
  
-   Chiama il metodo <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A>.  
  
-   Usa i valori restituiti dalle chiamate a iterativo <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> per disegnare l'inizio e arrestare i punti per ogni marcatore sullo schermo.  
  
-   Disegna il valore per il numero totale di punti alla schermata.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#5)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextPathType">
      <MemberSignature Language="C#" Value="public int NextPathType (out byte pathType, out int startIndex, out int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextPathType([out] unsigned int8&amp; pathType, [out] int32&amp; startIndex, [out] int32&amp; endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(System.Byte@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextPathType (ByRef pathType As Byte, ByRef startIndex As Integer, ByRef endIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextPathType([Runtime::InteropServices::Out] System::Byte % pathType, [Runtime::InteropServices::Out] int % startIndex, [Runtime::InteropServices::Out] int % endIndex);" />
      <MemberSignature Language="F#" Value="member this.NextPathType :  *  *  -&gt; int" Usage="graphicsPathIterator.NextPathType (pathType, startIndex, endIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pathType" Type="System.Byte" RefType="out" />
        <Parameter Name="startIndex" Type="System.Int32" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pathType">[out] Riceve il tipo di punto condiviso da tutti i punti del gruppo. I tipi possibili possono essere recuperati dall'enumerazione <see cref="T:System.Drawing.Drawing2D.PathPointType" />.</param>
        <param name="startIndex">[out] Riceve l'indice iniziale del gruppo di punti.</param>
        <param name="endIndex">[out] Riceve l'indice finale del gruppo di punti.</param>
        <summary>Ottiene l'indice iniziale e quello finale del gruppo successivo di valori appartenenti allo stesso tipo.</summary>
        <returns>Questo metodo restituisce il numero di valori nel gruppo. Se nel percorso non sono presenti altri gruppi, restituisce 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, un <xref:System.Windows.Forms.Form.OnPaint%2A> oggetto evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un oggetto <xref:System.Drawing.Drawing2D.GraphicsPath>.  
  
-   Aggiunge tre righe, un rettangolo e un'ellisse.  
  
-   Elenca i valori di tutti i punti sul lato sinistro della schermata.  
  
-   Crea un <xref:System.Drawing.Drawing2D.GraphicsPathIterator> e azzeramento.  
  
-   In un `for` loop, esegue l'iterazione attraverso i punti utilizzando il <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> e <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> metodi.  
  
-   Usa i valori restituiti dalle chiamate iterative per elencare il numero percorso secondario, il numero di punti in esso e il tipo dei punti di percorso per il lato destro dello schermo.  
  
-   Visualizza il valore per il numero totale di punti alla schermata.  
  
 Si noti che `ListPathPoints` è una funzione helper che separa la maggior parte (non tutti) del codice visualizzato dal codice di percorso del grafico.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#6)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="NextSubpath">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sposta il sottopercorso nel sottopercorso successivo della classe <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> specificata.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NextSubpath">
      <MemberSignature Language="C#" Value="public int NextSubpath (System.Drawing.Drawing2D.GraphicsPath path, out bool isClosed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextSubpath(class System.Drawing.Drawing2D.GraphicsPath path, [out] bool&amp; isClosed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextSubpath (path As GraphicsPath, ByRef isClosed As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextSubpath(System::Drawing::Drawing2D::GraphicsPath ^ path, [Runtime::InteropServices::Out] bool % isClosed);" />
      <MemberSignature Language="F#" Value="member this.NextSubpath : System.Drawing.Drawing2D.GraphicsPath *  -&gt; int" Usage="graphicsPathIterator.NextSubpath (path, isClosed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="isClosed" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="path">Classe <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> i cui valori devono essere impostati in modo da corrispondere a quelli della figura recuperata (sottopercorso) per questo iteratore.</param>
        <param name="isClosed">[out] Indica se il sottopercorso corrente è chiuso. Restituisce <see langword="true" /> se la figura è chiusa e <see langword="false" /> in caso contrario.</param>
        <summary>Ottiene la figura successiva (sottopercorso) dal percorso associato di questa classe <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />.</summary>
        <returns>Numero di valori nella figura recuperata (sottopercorso). Se non sono presenti altre figure da recuperare, viene restituito 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, un <xref:System.Windows.Forms.Form.OnPaint%2A> oggetto evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un oggetto <xref:System.Drawing.Drawing2D.GraphicsPath>.  
  
-   Aggiunge tre righe, un rettangolo, un'ellisse e due i marcatori.  
  
-   Elenca i valori di tutti i punti del percorso sul lato sinistro della schermata.  
  
-   Crea un oggetto <xref:System.Drawing.Drawing2D.GraphicsPathIterator>.  
  
-   Crea una <xref:System.Drawing.Drawing2D.GraphicsPath> oggetti, `myPathSection`per ricevere i punti copiati.  
  
-   Chiama il <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> metodo, che esegue l'iterazione per il sottopercorso terza (figura) e copia tutti i punti contenuti in tale percorso secondario per il `myPathSection` percorso e restituice inoltre il numero di punti copiato `subpathPoints`.  
  
-   Elenca il numero del sottopercorso e il numero di punti che contiene sul lato destro dello schermo.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#7)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSubpath">
      <MemberSignature Language="C#" Value="public int NextSubpath (out int startIndex, out int endIndex, out bool isClosed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextSubpath([out] int32&amp; startIndex, [out] int32&amp; endIndex, [out] bool&amp; isClosed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Int32@,System.Int32@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextSubpath (ByRef startIndex As Integer, ByRef endIndex As Integer, ByRef isClosed As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextSubpath([Runtime::InteropServices::Out] int % startIndex, [Runtime::InteropServices::Out] int % endIndex, [Runtime::InteropServices::Out] bool % isClosed);" />
      <MemberSignature Language="F#" Value="member this.NextSubpath :  *  *  -&gt; int" Usage="graphicsPathIterator.NextSubpath (startIndex, endIndex, isClosed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32" RefType="out" />
        <Parameter Name="isClosed" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="startIndex">[out] Riceve l'indice iniziale del sottopercorso successivo.</param>
        <param name="endIndex">[out] Riceve l'indice finale del sottopercorso successivo.</param>
        <param name="isClosed">[out] Indica se il sottopercorso è chiuso.</param>
        <summary>Sposta la classe <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> nel sottopercorso successivo del percorso. Gli indici iniziale e finale del sottopercorso successivo sono contenuti nei parametri [out].</summary>
        <returns>Numero di sottopercorsi nell'oggetto <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, un <xref:System.Windows.Forms.Form.OnPaint%2A> oggetto evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un oggetto <xref:System.Drawing.Drawing2D.GraphicsPath>.  
  
-   Aggiunge tre righe, un rettangolo e un'ellisse.  
  
-   Disegna i valori per la matrice di punti alla schermata.  
  
-   Crea un oggetto <xref:System.Drawing.Drawing2D.GraphicsPathIterator>.  
  
-   Chiama il metodo <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A>.  
  
-   Usa i valori restituiti dalle chiamate a iterativo <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> per disegnare l'inizio e arrestare i valori per ogni sottopercorso sullo schermo.  
  
-   Disegna il valore per il numero totale di sottopercorsi sullo schermo.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#8)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rewind">
      <MemberSignature Language="C#" Value="public void Rewind ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rewind() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rewind ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rewind();" />
      <MemberSignature Language="F#" Value="member this.Rewind : unit -&gt; unit" Usage="graphicsPathIterator.Rewind " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Azzera questa classe <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> fino all'inizio del percorso associato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La prima volta che si chiama il <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> metodo di un iteratore, ottiene la prima figura (sottopercorso) di tale percorso associato di iteratore. La seconda volta, ottiene la seconda figura e così via. Quando si chiama il <xref:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind%2A> metodo, la sequenza inizia oltre, vale a dire, dopo aver chiamato <xref:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind%2A>, la chiamata successiva a <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> Ottiene la prima figura nel percorso. Il <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> e <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> metodi si comportano allo stesso modo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubpathCount">
      <MemberSignature Language="C#" Value="public int SubpathCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SubpathCount" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SubpathCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SubpathCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.SubpathCount : int" Usage="System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il numero di sottopercorsi del percorso.</summary>
        <value>Numero di sottopercorsi del percorso.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>