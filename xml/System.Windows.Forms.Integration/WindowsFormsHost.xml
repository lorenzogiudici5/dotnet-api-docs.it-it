<Type Name="WindowsFormsHost" FullName="System.Windows.Forms.Integration.WindowsFormsHost">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="08b5f0634772c4dbc3ad3b87fbaf950eb819c7d4" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
    <Meta Name="ms.locfileid" Value="32040395" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WindowsFormsHost : System.Windows.Interop.HwndHost" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi WindowsFormsHost extends System.Windows.Interop.HwndHost implements class System.Windows.Interop.IKeyboardInputSink" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Integration.WindowsFormsHost" />
  <TypeSignature Language="VB.NET" Value="Public Class WindowsFormsHost&#xA;Inherits HwndHost" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowsFormsHost : System::Windows::Interop::HwndHost" />
  <AssemblyInfo>
    <AssemblyName>WindowsFormsIntegration</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Interop.HwndHost</BaseTypeName>
  </Base>
  <Interfaces></Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("ChildChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignerCategory("code")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Child")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Elemento che consente di ospitare un controllo Windows Forms in una pagina WPF.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Windows.Forms.Integration.WindowsFormsHost> elemento per posizionare un controllo Windows Form all'interno dell'elemento WPF o pagina.  
  
 Per ospitare un elemento WPF in un controllo Windows Form o un modulo, usare il <xref:System.Windows.Forms.Integration.ElementHost> controllo.  
  
> [!NOTE]
>  WindowsFormsIntegration viene installato con il [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] assembly. Il percorso predefinito per l'assembly è %programfiles%\Reference Assemblies\Microsoft\Framework\v3.0\WindowsFormsIntegration.dll.  
  
 Per ospitare un controllo Windows Form in un elemento WPF, è necessario assegnare il controllo Windows Form per il <xref:System.Windows.Forms.Integration.WindowsFormsHost.Child%2A> proprietà.  
  
 Usare la <xref:System.Windows.Forms.Integration.WindowsFormsHost.PropertyMap%2A> proprietà a cui assegnare i mapping personalizzati tra un <xref:System.Windows.Forms.Integration.WindowsFormsHost> elemento e il controllo Windows Form ospitato. Per altre informazioni, vedere [Mapping di proprietà di Windows Form e WPF](~/docs/framework/wpf/advanced/windows-forms-and-wpf-property-mapping.md).  
  
<a name="xamlObjectElementUsage_WindowsFormsHost"></a>   
## <a name="xaml-object-element-usage"></a>Utilizzo della sintassi XAML per gli elementi oggetto  
  
```  
<WindowsFormsHost.../>  
```  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Windows.Forms.Integration.WindowsFormsHost> elemento per ospitare un <xref:System.Windows.Forms.MaskedTextBox?displayProperty=nameWithType> controllo. Per ulteriori informazioni, vedere [procedura dettagliata: Hosting di un controllo Windows Form in WPF utilizzando il codice XAML](~/docs/framework/wpf/advanced/walkthrough-hosting-a-windows-forms-control-in-wpf-by-using-xaml.md).  
  
 [!code-xaml[HostingWfInWpfWithXaml#1](~/samples/snippets/csharp/VS_Snippets_Wpf/HostingWfInWpfWithXaml/CSharp/HostingWfInWpf/Window1.xaml#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsFormsHost ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.WindowsFormsHost.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowsFormsHost();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" />.</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.Demand">per l'attendibilità totale per tutti i chiamanti nello stack di chiamate. Impossibile usare questo membro in codice parzialmente attendibile.</permission>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size ArrangeOverride (System.Windows.Size finalSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size finalSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.WindowsFormsHost.ArrangeOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ArrangeOverride (finalSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size ArrangeOverride(System::Windows::Size finalSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="finalSize">Area finale nel controllo padre che questo elemento deve usare per disporre se stesso e i relativi elementi figlio.</param>
        <summary>In caso di implementazione in una classe derivata, posiziona gli elementi figlio e determina una dimensione per la classe derivata <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <returns>Dimensioni effettive usate.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="Background">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush Background { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush Background" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.WindowsFormsHost.Background" />
      <MemberSignature Language="VB.NET" Value="Public Property Background As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Brush ^ Background { System::Windows::Media::Brush ^ get(); void set(System::Windows::Media::Brush ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta lo sfondo del controllo ospitato come proprietà di ambiente.</summary>
        <value>Oggetto <see cref="T:System.Windows.Media.Brush" /> impostato sul colore di sfondo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà di dipendenza è identificata dal <xref:System.Windows.Forms.Integration.WindowsFormsHost.BackgroundProperty> campo. Per impostazione predefinita, questa proprietà viene eseguito il mapping per aggiornare il <xref:System.Windows.Forms.Control.BackColor%2A?displayProperty=nameWithType> e <xref:System.Windows.Forms.Control.BackgroundImage%2A?displayProperty=nameWithType> le proprietà del controllo ospitato.  
  
 Per ulteriori informazioni sul mapping di <xref:System.Windows.Forms.Integration.WindowsFormsHost.Background%2A> proprietà, vedere [Windows Form e i Mapping di proprietà WPF](~/docs/framework/wpf/advanced/windows-forms-and-wpf-property-mapping.md).  
  
<a name="xamlAttributeUsage_Background"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object Background="Brush"/>  
```  
  
<a name="xamlValues_Background"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *Pennello*  
 Vedere <xref:System.Windows.Media.Brush> per la sintassi di attributo XAML.  
  
<a name="dependencyPropertyInfo_Background"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.Forms.Integration.WindowsFormsHost.BackgroundProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>, <xref:System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BackgroundProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BackgroundProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Integration.WindowsFormsHost.BackgroundProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BackgroundProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BackgroundProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Background" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="BuildWindowCore">
      <MemberSignature Language="C#" Value="protected override System.Runtime.InteropServices.HandleRef BuildWindowCore (System.Runtime.InteropServices.HandleRef hwndParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Runtime.InteropServices.HandleRef BuildWindowCore(valuetype System.Runtime.InteropServices.HandleRef hwndParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.WindowsFormsHost.BuildWindowCore(System.Runtime.InteropServices.HandleRef)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function BuildWindowCore (hwndParent As HandleRef) As HandleRef" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Runtime::InteropServices::HandleRef BuildWindowCore(System::Runtime::InteropServices::HandleRef hwndParent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.HandleRef</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwndParent" Type="System.Runtime.InteropServices.HandleRef" />
      </Parameters>
      <Docs>
        <param name="hwndParent">Handle (HWND) della finestra padre.</param>
        <summary>Esegue l'override dell'implementazione della classe di base dell'oggetto <see cref="M:System.Windows.Interop.HwndHost.BuildWindowCore(System.Runtime.InteropServices.HandleRef)" /> per compilare il controllo Windows Forms ospitato.</summary>
        <returns>Handle di finestra per questo oggetto.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Integration.WindowsFormsHost.DestroyWindowCore(System.Runtime.InteropServices.HandleRef)" />
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="Child">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control Child { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Child" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.WindowsFormsHost.Child" />
      <MemberSignature Language="VB.NET" Value="Public Property Child As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ Child { System::Windows::Forms::Control ^ get(); void set(System::Windows::Forms::Control ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il controllo figlio ospitato dall'elemento <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" />.</summary>
        <value>Il controllo Windows Form.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Può essere ospitato solo un controllo figlio, ma <xref:System.Windows.Forms.Integration.WindowsFormsHost.Child%2A> possono avere qualsiasi numero di elementi figlio.  
  
 Il controllo figlio non può essere un form di livello superiore.  
  
 Se <xref:System.Windows.Forms.Integration.WindowsFormsHost.Child%2A> è un <xref:System.Windows.Forms.Form>, il modulo <xref:System.Windows.Forms.Form.ControlBox%2A> è impostata su `false`.  
  
<a name="xamlTextUsage_Child"></a>   
## <a name="xaml-text-usage"></a>Utilizzo di testo XAML  
 `<` *Oggetto* `>`  
  
 `<` *hostedControl*  `.../>`  
  
 `</` *Oggetto* `>`  
  
<a name="xamlValues_Child"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *object*  
 Oggetto <xref:System.Windows.Forms.Integration.WindowsFormsHost> elemento (o una sottoclasse possibili).  
  
 *hostedControl*  
 Un elemento che specifica il controllo Windows Form. La specifica del controllo personalizzato in markup richiede generalmente il mapping xmlns [spazi dei nomi XAML e Mapping Namespace per XAML WPF](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Windows.Forms.Integration.WindowsFormsHost.Child%2A> proprietà per aggiungere il controllo ospitato il <xref:System.Windows.Forms.Integration.WindowsFormsHost> elemento. Per ulteriori informazioni, vedere [procedura dettagliata: inserimento di controlli ActiveX in WPF](~/docs/framework/wpf/advanced/walkthrough-hosting-an-activex-control-in-wpf.md).  
  
 [!code-csharp[HostingAxInWpf#11](~/samples/snippets/csharp/VS_Snippets_Wpf/HostingAxInWpf/CSharp/HostingAxInWpf/window1.xaml.cs#11)]
 [!code-vb[HostingAxInWpf#11](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HostingAxInWpf/VisualBasic/HostingAxInWpf/window1.xaml.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">È stato fatto un altro tentativo per assegnare un modulo di livello superiore come controllo di hosting.</exception>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="ChildChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Forms.Integration.ChildChangedEventArgs&gt; ChildChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Forms.Integration.ChildChangedEventArgs&gt; ChildChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Integration.WindowsFormsHost.ChildChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event ChildChanged As EventHandler(Of ChildChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Forms::Integration::ChildChangedEventArgs ^&gt; ^ ChildChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Forms.Integration.ChildChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene impostata la proprietà <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Child" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlAttributeUsage_ChildChanged"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object ChildChanged="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Child" />
      </Docs>
    </Member>
    <Member MemberName="DestroyWindowCore">
      <MemberSignature Language="C#" Value="protected override void DestroyWindowCore (System.Runtime.InteropServices.HandleRef hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void DestroyWindowCore(valuetype System.Runtime.InteropServices.HandleRef hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.WindowsFormsHost.DestroyWindowCore(System.Runtime.InteropServices.HandleRef)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub DestroyWindowCore (hwnd As HandleRef)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void DestroyWindowCore(System::Runtime::InteropServices::HandleRef hwnd);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.Runtime.InteropServices.HandleRef" />
      </Parameters>
      <Docs>
        <param name="hwnd">Handle di finestra. Questo parametro non viene usato.</param>
        <summary>Esegue l'override dell'oggetto <see cref="M:System.Windows.Interop.HwndHost.DestroyWindowCore(System.Runtime.InteropServices.HandleRef)" /> per eliminare la finestra che contiene questo oggetto.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Integration.WindowsFormsHost.BuildWindowCore(System.Runtime.InteropServices.HandleRef)" />
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.WindowsFormsHost.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
        <summary>Rilascia le risorse non gestite usate dall'oggetto <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> e, facoltativamente, le risorse gestite.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chiamata di <xref:System.Windows.Forms.Integration.WindowsFormsHost.Dispose%2A> metodo elimina la base <xref:System.Windows.Interop.HwndHost> e <xref:System.Windows.Forms.Integration.WindowsFormsHost.Child%2A> controllo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableWindowsFormsInterop">
      <MemberSignature Language="C#" Value="public static void EnableWindowsFormsInterop ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableWindowsFormsInterop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.WindowsFormsHost.EnableWindowsFormsInterop" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnableWindowsFormsInterop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EnableWindowsFormsInterop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Abilita un oggetto <see cref="T:System.Windows.Forms.Form" /> al corretto funzionamento quando viene aperto in maniera non modale da WPF.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare il <xref:System.Windows.Forms.Integration.WindowsFormsHost.EnableWindowsFormsInterop%2A> metodo per inoltrare tutti i messaggi di tastiera quando un <xref:System.Windows.Forms.Form?displayProperty=nameWithType> viene aperto in maniera non modale. Il <xref:System.Windows.Forms.Integration.WindowsFormsHost.EnableWindowsFormsInterop%2A> (metodo) viene installato un filtro messaggi che è necessario per i moduli non modale funzionare correttamente quando viene aperto da WPF. È necessario chiamare questo metodo solo una volta per un particolare <xref:System.Windows.Forms.Integration.WindowsFormsHost> istanza.  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.Demand">per l'attendibilità totale per tutti i chiamanti nello stack di chiamate. Impossibile usare questo membro in codice parzialmente attendibile.</permission>
        <altmember cref="M:System.Windows.Forms.Integration.ElementHost.EnableModelessKeyboardInterop(System.Windows.Window)" />
      </Docs>
    </Member>
    <Member MemberName="FontFamily">
      <MemberSignature Language="C#" Value="public System.Windows.Media.FontFamily FontFamily { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.FontFamily FontFamily" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.WindowsFormsHost.FontFamily" />
      <MemberSignature Language="VB.NET" Value="Public Property FontFamily As FontFamily" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::FontFamily ^ FontFamily { System::Windows::Media::FontFamily ^ get(); void set(System::Windows::Media::FontFamily ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.FontFamily</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la famiglia di caratteri del controllo ospitato.</summary>
        <value>Famiglia di caratteri usata nel controllo ospitato.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Impostazione di questa proprietà influisce solo i controlli il cui modello utilizza la proprietà come parametro. Non ha alcun effetto sugli altri controlli.  
  
 Questa proprietà di dipendenza è identificata dal <xref:System.Windows.Forms.Integration.WindowsFormsHost.FontFamilyProperty> campo. Per impostazione predefinita, questa proprietà viene eseguito il mapping per aggiornare il <xref:System.Windows.Forms.Control.Font%2A?displayProperty=nameWithType> proprietà del controllo ospitato. Per altre informazioni, vedere [Mapping di proprietà di Windows Form e WPF](~/docs/framework/wpf/advanced/windows-forms-and-wpf-property-mapping.md).  
  
<a name="xamlAttributeUsage_FontFamily"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object FontFamily="fontFamily"/>  
```  
  
<a name="xamlValues_FontFamily"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *fontFamily*  
 Vedere <xref:System.Windows.Media.FontFamily> per la sintassi di attributo XAML.  
  
<a name="dependencyPropertyInfo_FontFamily"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.Forms.Integration.WindowsFormsHost.FontFamilyProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.FontFamily" />
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="FontFamilyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FontFamilyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FontFamilyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Integration.WindowsFormsHost.FontFamilyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FontFamilyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FontFamilyProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.FontFamily" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Media.FontFamily" />
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="FontSize">
      <MemberSignature Language="C#" Value="public double FontSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 FontSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.WindowsFormsHost.FontSize" />
      <MemberSignature Language="VB.NET" Value="Public Property FontSize As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double FontSize { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la dimensione di carattere del controllo ospitato.</summary>
        <value>Dimensione di carattere usata nel controllo ospitato.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà di dipendenza è identificata dal <xref:System.Windows.Forms.Integration.WindowsFormsHost.FontSizeProperty> campo. Per impostazione predefinita, questa proprietà viene eseguito il mapping per aggiornare il <xref:System.Windows.Forms.Control.Font%2A?displayProperty=nameWithType> proprietà del controllo ospitato. Per altre informazioni, vedere [Mapping di proprietà di Windows Form e WPF](~/docs/framework/wpf/advanced/windows-forms-and-wpf-property-mapping.md).  
  
<a name="xamlAttributeUsage_FontSize"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object FontSize="double"/>  
```  
  
<a name="xamlValues_FontSize"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *double*  
 Rappresentazione di stringa di un <xref:System.Double> valore uguale o maggiore di 0,0, ma inferiore a <xref:System.Double.PositiveInfinity>. Ciò viene interpretato come un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] misura. Le stringhe non devono includere decimali in modo esplicito. Ad esempio un valore pari a 1 è accettabile.  
  
<a name="dependencyPropertyInfo_FontSize"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.Forms.Integration.WindowsFormsHost.FontSizeProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="FontSizeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FontSizeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FontSizeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Integration.WindowsFormsHost.FontSizeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FontSizeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FontSizeProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.FontSize" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="FontStyle">
      <MemberSignature Language="C#" Value="public System.Windows.FontStyle FontStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FontStyle FontStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.WindowsFormsHost.FontStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property FontStyle As FontStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::FontStyle FontStyle { System::Windows::FontStyle get(); void set(System::Windows::FontStyle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FontStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta lo stile di carattere del controllo ospitato.</summary>
        <value>Stile di carattere usato nel controllo ospitato.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà di dipendenza è identificata dal <xref:System.Windows.Forms.Integration.WindowsFormsHost.FontStyleProperty> campo. Per impostazione predefinita, questa proprietà viene eseguito il mapping per aggiornare il <xref:System.Windows.Forms.Control.Font%2A?displayProperty=nameWithType> proprietà del controllo ospitato. Per altre informazioni, vedere [Mapping di proprietà di Windows Form e WPF](~/docs/framework/wpf/advanced/windows-forms-and-wpf-property-mapping.md).  
  
<a name="xamlAttributeUsage_FontStyle"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object FontStyle="fontStyle"/>  
```  
  
<a name="xamlValues_FontStyle"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *fontStyle*  
 Vedere <xref:System.Windows.FontStyle> per la sintassi di attributo XAML.  
  
<a name="dependencyPropertyInfo_FontStyle"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.Forms.Integration.WindowsFormsHost.FontStyleProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FontStyle" />
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="FontStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FontStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FontStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Integration.WindowsFormsHost.FontStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FontStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FontStyleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.FontStyle" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="FontWeight">
      <MemberSignature Language="C#" Value="public System.Windows.FontWeight FontWeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FontWeight FontWeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.WindowsFormsHost.FontWeight" />
      <MemberSignature Language="VB.NET" Value="Public Property FontWeight As FontWeight" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::FontWeight FontWeight { System::Windows::FontWeight get(); void set(System::Windows::FontWeight value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FontWeight</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta lo spessore del carattere del controllo ospitato.</summary>
        <value>Spessore del carattere usato nel controllo ospitato.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà di dipendenza è identificata dal <xref:System.Windows.Forms.Integration.WindowsFormsHost.FontWeightProperty> campo. Per impostazione predefinita, questa proprietà viene eseguito il mapping per aggiornare il <xref:System.Windows.Forms.Control.Font%2A?displayProperty=nameWithType> proprietà del controllo ospitato. Per altre informazioni, vedere [Mapping di proprietà di Windows Form e WPF](~/docs/framework/wpf/advanced/windows-forms-and-wpf-property-mapping.md).  
  
<a name="xamlAttributeUsage_FontWeight"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object FontWeight="fontWeight"/>  
```  
  
<a name="xamlValues_FontWeight"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *fontWeight*  
 Vedere <xref:System.Windows.FontWeight> per la sintassi di attributo XAML.  
  
<a name="dependencyPropertyInfo_FontWeight"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.Forms.Integration.WindowsFormsHost.FontWeightProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FontWeight" />
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="FontWeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FontWeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FontWeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Integration.WindowsFormsHost.FontWeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FontWeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FontWeightProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.FontWeight" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="Foreground">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush Foreground { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush Foreground" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.WindowsFormsHost.Foreground" />
      <MemberSignature Language="VB.NET" Value="Public Property Foreground As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Brush ^ Foreground { System::Windows::Media::Brush ^ get(); void set(System::Windows::Media::Brush ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il colore primo piano del controllo ospitato.</summary>
        <value>
          <see cref="T:System.Windows.Media.Brush" /> utilizzato per impostare il colore di primo piano per il controllo di hosting.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà di dipendenza è identificata dal <xref:System.Windows.Forms.Integration.WindowsFormsHost.ForegroundProperty> campo. Per impostazione predefinita, questa proprietà viene eseguito il mapping per aggiornare il <xref:System.Windows.Forms.Control.ForeColor%2A?displayProperty=nameWithType> proprietà del controllo ospitato. Per ulteriori informazioni sul mapping di <xref:System.Windows.Forms.Integration.WindowsFormsHost.Foreground%2A> proprietà, vedere [Windows Form e i Mapping di proprietà WPF](~/docs/framework/wpf/advanced/windows-forms-and-wpf-property-mapping.md).  
  
<a name="xamlAttributeUsage_Foreground"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object Foreground="Brush"/>  
```  
  
<a name="xamlValues_Foreground"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *Pennello*  
 Vedere <xref:System.Windows.Media.Brush> per la sintassi di attributo XAML.  
  
<a name="dependencyPropertyInfo_Foreground"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.Forms.Integration.WindowsFormsHost.ForegroundProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>,<br /><br /> <xref:System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender%2A>,<br /><br /> <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Brush" />
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="ForegroundProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ForegroundProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ForegroundProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Integration.WindowsFormsHost.ForegroundProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ForegroundProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ForegroundProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Foreground" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="LayoutError">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Forms.Integration.LayoutExceptionEventArgs&gt; LayoutError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Forms.Integration.LayoutExceptionEventArgs&gt; LayoutError" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Integration.WindowsFormsHost.LayoutError" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LayoutError As EventHandler(Of LayoutExceptionEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Forms::Integration::LayoutExceptionEventArgs ^&gt; ^ LayoutError;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Forms.Integration.LayoutExceptionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene rilevato un errore di layout, come ad esempio un'inclinazione o una rotazione non supportata da <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlAttributeUsage_LayoutError"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object LayoutError="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Integration.LayoutExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size MeasureOverride (System.Windows.Size constraint);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size constraint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.WindowsFormsHost.MeasureOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function MeasureOverride (constraint As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size MeasureOverride(System::Windows::Size constraint);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constraint" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="constraint">Dimensione disponibile per l'oggetto <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" />.</param>
        <summary>Esegue l'override dell'implementazione della classe di base di <see cref="M:System.Windows.Interop.HwndHost.MeasureOverride(System.Windows.Size)" /> per misurare la dimensione dell'oggetto <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> e restituire le dimensioni corrette al motore del layout.</summary>
        <returns>Dimensione desiderata dell'oggetto <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vincoli relativi alle dimensioni nel layout WPF sono vincoli di disco rigidi. Se i vincoli vengono superati, l'host deve ritagliare il contenuto all'interno dell'area di hosting. L'implementazione di questo metodo consente di applicare questo comportamento.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.WindowsFormsHost.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una classe <see cref="T:System.Windows.Automation.Peers.WindowsFormsHostAutomationPeer" /> per l'elemento <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" />.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Automation.Peers.WindowsFormsHostAutomationPeer" /> per l'elemento <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected override void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.WindowsFormsHost.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Argomenti che identificano la proprietà modificata, a cui forniscono valori vecchi e nuovi.</param>
        <summary>Forza la traduzione di una proprietà su cui è stato eseguito il mapping.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chiamata di <xref:System.Windows.Forms.Integration.WindowsFormsHost.OnPropertyChanged%2A> metodo potrebbe essere necessario quando una proprietà di un elemento predecessore è stata modificata, ma il valore locale del <xref:System.Windows.Forms.Integration.WindowsFormsHost> elemento non è stato modificato. Per altre informazioni, vedere [Mapping di proprietà di Windows Form e WPF](~/docs/framework/wpf/advanced/windows-forms-and-wpf-property-mapping.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.WindowsFormsHost.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Thickness" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Thickness Padding { System::Windows::Thickness get(); void set(System::Windows::Thickness value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifica la dimensione della spaziatura interna desiderata per il controllo Windows Forms ospitato.</summary>
        <value>Oggetto <see cref="T:System.Windows.Thickness" /> controllare la struttura che rappresenta la spaziatura interna l'hosting di Windows Form.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlAttributeUsage_Padding"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object Padding="Thickness"/>  
```  
  
<a name="xamlValues_Padding"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *Spessore*  
 Vedere <xref:System.Windows.Thickness> per la sintassi di attributo XAML.  
  
<a name="dependencyPropertyInfo_Padding"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.Forms.Integration.WindowsFormsHost.PaddingProperty>|  
|Impostare le proprietà dei metadati `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Thickness" />
      </Docs>
    </Member>
    <Member MemberName="PaddingProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty PaddingProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty PaddingProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Integration.WindowsFormsHost.PaddingProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PaddingProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ PaddingProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Padding" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyMap">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Integration.PropertyMap PropertyMap { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Integration.PropertyMap PropertyMap" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.WindowsFormsHost.PropertyMap" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyMap As PropertyMap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Integration::PropertyMap ^ PropertyMap { System::Windows::Forms::Integration::PropertyMap ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Integration.PropertyMap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la mappa delle proprietà che determina come l'impostazione delle proprietà sull'elemento <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> influisce sul controllo Windows Forms ospitato.</summary>
        <value>Un <see cref="T:System.Windows.Forms.Integration.PropertyMap" /> che viene eseguito il mapping <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> proprietà alle proprietà del controllo Windows Form ospitato.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le tecnologie di Windows Form e WPF hanno due proprietà simili ma diversi modelli. *Mapping di proprietà* supporta l'interazione tra le due architetture. Per altre informazioni, vedere [Mapping di proprietà di Windows Form e WPF](~/docs/framework/wpf/advanced/windows-forms-and-wpf-property-mapping.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come aggiungere un mapping per il <xref:System.Windows.FrameworkElement.FlowDirection%2A> proprietà per un <xref:System.Windows.Forms.Integration.WindowsFormsHost> controllo.  
  
 [!code-csharp[PropertyMappingWithWfh#12](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMappingWithWfhSample/CSharp/PropertyMappingWithWfh/Window1.xaml.cs#12)] 
 [!code-vb[PropertyMappingWithWfh#12](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertyMappingWithWfhSample/VisualBasic/PropertyMappingWithWfh/Window1.xaml.vb#12)]   
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Integration.PropertyMap" />
      </Docs>
    </Member>
    <Member MemberName="ScaleChild">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Vector ScaleChild (System.Windows.Vector newScale);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Vector ScaleChild(valuetype System.Windows.Vector newScale) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.WindowsFormsHost.ScaleChild(System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ScaleChild (newScale As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Vector ScaleChild(System::Windows::Vector newScale);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newScale" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="newScale">Nuovo fattore di ridimensionamento.</param>
        <summary>Ridimensiona il controllo Windows Forms ospitato e tiene traccia del fattore di scala.</summary>
        <returns>Oggetto <see cref="T:System.Windows.Vector" /> che rappresenta il fattore di scala applicato al controllo Windows Forms ospitato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Controlli Windows Form non supportano il ridimensionamento nello stesso modo come elementi WPF. Ad esempio, ridimensionare un controllo Windows Form da un fattore pari a 1 a un fattore pari a 0,5 e tornare a un fattore pari a 1, non in generale, ripristinare le dimensioni originali del controllo. Per altre informazioni, vedere [Considerazioni sul layout per l'elemento WindowsFormsHost](~/docs/framework/wpf/advanced/layout-considerations-for-the-windowsformshost-element.md).  
  
 Eseguire l'override di <xref:System.Windows.Forms.Integration.WindowsFormsHost.ScaleChild%2A> metodo per fornire il comportamento di ridimensionamento personalizzato per il controllo Windows Form.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TabIndex">
      <MemberSignature Language="C#" Value="public int TabIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TabIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.WindowsFormsHost.TabIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property TabIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TabIndex { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'indice di tabulazione del controllo ospitato.</summary>
        <value>Indice di tabulazione per lo spostamento tramite tabulazione e lo stato attivo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà di dipendenza è identificata dal <xref:System.Windows.Forms.Integration.WindowsFormsHost.TabIndexProperty> campo.  
  
 Utilizzare questa proprietà per modificare l'ordine di spostamento tramite tabulazione tra i controlli in un form. Un controllo con un indice di tabulazione inferiore verrà visualizzato lo stato attivo prima di un controllo con un indice maggiore.  
  
<a name="xamlAttributeUsage_TabIndex"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object TabIndex="int"/>  
```  
  
<a name="dependencyPropertyInfo_TabIndex"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.Forms.Integration.WindowsFormsHost.TabIndexProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="TabIndexProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TabIndexProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TabIndexProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Integration.WindowsFormsHost.TabIndexProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TabIndexProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TabIndexProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.TabIndex" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="TabInto">
      <MemberSignature Language="C#" Value="public virtual bool TabInto (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TabInto(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.WindowsFormsHost.TabInto(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TabInto (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TabInto(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">Oggetto <see cref="T:System.Windows.Input.TraversalRequest" /> che specifica il comportamento dello stato attivo.</param>
        <summary>Inoltra lo stato attivo da WPF al controllo Windows Forms ospitato.</summary>
        <returns>
          <see langword="true" /> se il controllo è stato attivato; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un <xref:System.Windows.Forms.Integration.WindowsFormsHost> elemento riceve un comando TAB dal <xref:System.Windows.Interop.IKeyboardInputSink.TabInto%2A> metodo idonei per il primo controllo <xref:System.Windows.Forms.Integration.WindowsFormsHost.Child%2A> riceve lo stato attivo.  
  
 Il primo controllo è specificato per il `request` parametro. Quando `request` è <xref:System.Windows.Input.FocusNavigationDirection.Next>, il comportamento è simile alla pressione del tasto TAB. Quando `request` è <xref:System.Windows.Input.FocusNavigationDirection.Previous>, il comportamento è simile a premere MAIUSC + TAB.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override IntPtr WndProc (IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance native int WndProc(native int hwnd, int32 msg, native int wParam, native int lParam, bool&amp; handled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.WindowsFormsHost.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function WndProc (hwnd As IntPtr, msg As Integer, wParam As IntPtr, lParam As IntPtr, ByRef handled As Boolean) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, bool % handled);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
        <Parameter Name="msg" Type="System.Int32" />
        <Parameter Name="wParam" Type="System.IntPtr" />
        <Parameter Name="lParam" Type="System.IntPtr" />
        <Parameter Name="handled" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="hwnd">Gestore di finestra della finestra contenuta.</param>
        <param name="msg">Messaggio sul quale agire.</param>
        <param name="wParam">Informazioni che possono essere attinenti alla gestione del messaggio. Ciò viene di norma utilizzato per archiviare piccole quantità di informazioni, come i flag.</param>
        <param name="lParam">Informazioni che possono essere attinenti alla gestione del messaggio. Ciò viene di norma utilizzato per fare riferimento a un oggetto.</param>
        <param name="handled">Valore che indica se gli eventi risultanti devono essere contrassegnati come gestiti.</param>
        <summary>In caso di implementazione in una classe derivata, accede al processo di finestra della finestra figlio contenuta</summary>
        <returns>Handle della finestra figlio.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>