<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TextPatternRange.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86cf2bca08e8f852647a3300cad6b225fe70efd668c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f2bca08e8f852647a3300cad6b225fe70efd668c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Automation.Text.TextPatternRange">
          <source>Represents a span of continuous text in a <ph id="ph1">&lt;see cref="T:System.Windows.Automation.TextPattern" /&gt;</ph> container.</source>
          <target state="translated">Rappresenta un'estensione di testo continuo in un contenitore <ph id="ph1">&lt;see cref="T:System.Windows.Automation.TextPattern" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Automation.Text.TextPatternRange">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange&gt;</ph> can represent an insertion point, a subset, or all of the text in a <ph id="ph2">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> container.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange&gt;</ph> può rappresentare un punto di inserimento, un subset o tutto il testo in un <ph id="ph2">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> contenitore.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Automation.Text.TextPatternRange">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange&gt;</ph> will become invalid if one of the following occurs: the text in the <ph id="ph2">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> container changes because of some user activity, or the <ph id="ph3">&lt;xref:System.Windows.Automation.ValuePattern.SetValue%2A&gt;</ph> method of <ph id="ph4">&lt;xref:System.Windows.Automation.ValuePattern&gt;</ph> is used to programmatically change the value of the text in the <ph id="ph5">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> container.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange&gt;</ph> non saranno più validi se si verifica una delle operazioni seguenti: il testo nel <ph id="ph2">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> modifiche contenitore a causa di alcune attività dell'utente o il <ph id="ph3">&lt;xref:System.Windows.Automation.ValuePattern.SetValue%2A&gt;</ph> metodo <ph id="ph4">&lt;xref:System.Windows.Automation.ValuePattern&gt;</ph> consente di modificare a livello di codice il valore del testo di <ph id="ph5">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> contenitore.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection">
          <source>Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.</source>
          <target state="translated">Aggiunge elementi alla raccolta di testo evidenziato in un contenitore di testo che supporta selezioni multiple non contigue.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection">
          <source>The text insertion point moves to the area of the new selection.</source>
          <target state="translated">Consente di spostare il punto di inserimento nell'area della nuova selezione.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection">
          <source>Providing a degenerate text range moves the insertion point.</source>
          <target state="translated">Fornisce un intervallo di testo degenerato sposta il punto di inserimento.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection">
          <source>If text provider does not support multiple, disjoint selections (for example, <ph id="ph1">&lt;see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /&gt;</ph> must have a value of <ph id="ph2">&lt;see langword="Multiple" /&gt;</ph>).</source>
          <target state="translated">Se il provider di testo non supporta le selezioni multiple non contigue (ad esempio, <ph id="ph1">&lt;see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /&gt;</ph> deve avere un valore pari a <ph id="ph2">&lt;see langword="Multiple" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Clone">
          <source>Retrieves a new <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Text.TextPatternRange" /&gt;</ph> identical to the original <ph id="ph2">&lt;see cref="T:System.Windows.Automation.Text.TextPatternRange" /&gt;</ph> and inheriting all properties of the original.</source>
          <target state="translated">Recupera un nuovo oggetto <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Text.TextPatternRange" /&gt;</ph> identico all'oggetto <ph id="ph2">&lt;see cref="T:System.Windows.Automation.Text.TextPatternRange" /&gt;</ph> originale e che eredita tutte le proprietà dell'originale.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Clone">
          <source>The new text range.</source>
          <target state="translated">Nuovo intervallo di testo.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Clone">
          <source>A null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) is never returned.</source>
          <target state="translated">Un riferimento Null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) non viene mai restituito.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Clone">
          <source>Alternatively, create a new <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> from the <ph id="ph2">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> and move the two endpoints to correspond with the endpoints of the original text range.</source>
          <target state="translated">In alternativa, creare un nuovo <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> dal <ph id="ph2">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> e spostare i due endpoint in modo che corrispondano con gli endpoint dell'intervallo di testo originale.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Clone">
          <source>The new range can be manipulated independently from the original.</source>
          <target state="translated">Il nuovo intervallo può essere modificato in modo indipendente dall'originale.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Compare(System.Windows.Automation.Text.TextPatternRange)">
          <source>A text range to compare.</source>
          <target state="translated">Intervallo di testo da confrontare.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Compare(System.Windows.Automation.Text.TextPatternRange)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> value indicating whether the span (the <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> endpoint to the <ph id="ph3">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> endpoint) of a text range is the same as another text range.</source>
          <target state="translated">Restituisce un valore <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> che indica se l'estensione (dall'endpoint <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> all'endpoint <ph id="ph3">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph>) di un intervallo di testo corrisponde a un altro intervallo di testo.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Compare(System.Windows.Automation.Text.TextPatternRange)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the span of both text ranges is identical; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'ampiezza di entrambi gli intervalli di testo è identica; in caso contrario <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Compare(System.Windows.Automation.Text.TextPatternRange)">
          <source>If the range being compared does not come from the same text provider.</source>
          <target state="translated">Se l'intervallo confrontato non proviene dallo stesso provider di testo.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>The <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> endpoint of the caller.</source>
          <target state="translated">Endpoint <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> o <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> del chiamante.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>The target range for comparison.</source>
          <target state="translated">Intervallo di destinazione per il confronto.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>The <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> endpoint of the target.</source>
          <target state="translated">Endpoint <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> o <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> della destinazione.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> indicating whether two text ranges have identical endpoints.</source>
          <target state="translated">Restituisce un oggetto <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> che indica se due intervalli di testo presentano endpoint identici.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint.</source>
          <target state="translated">Restituisce un valore negativo se l'endpoint del chiamante si trova nel testo prima dell'endpoint di destinazione.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>Returns zero if the caller's endpoint is at the same location as the target endpoint.</source>
          <target state="translated">Restituisce zero se l'endpoint del chiamante è nella stessa posizione dell'endpoint di destinazione.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint.</source>
          <target state="translated">Restituisce un valore positivo se l'endpoint del chiamante si trova nel testo dopo l'endpoint di destinazione.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>By comparing the starting and ending endpoints of the same text range you can identify if a text range is degenerate or if the endpoints are in the order of logical text flow.</source>
          <target state="translated">Confrontando gli endpoint iniziale e finale dell'intervallo di testo stesso è possibile identificare se un intervallo di testo degenerato o se gli endpoint sono in ordine di flusso di testo logico.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>If range is a null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic).</source>
          <target state="translated">Se l'intervallo è un riferimento Null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic).</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>If range is from another container.</source>
          <target state="translated">Se l'intervallo proviene da un altro contenitore.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The textual unit.</source>
          <target state="translated">Unità testuale.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>Expands the text range to the specified <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Text.TextUnit" /&gt;</ph>.</source>
          <target state="translated">Espande l'intervallo di testo alla <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Text.TextUnit" /&gt;</ph> specificata.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>If the range is already an exact quantity of the specified units then it remains unchanged.</source>
          <target state="translated">Se l'intervallo è già una quantità esatta delle unità di misura specificata e rimane invariato.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>In order for the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A&gt;</ph> method to execute successfully, a sequence of actions is performed behind the scenes.</source>
          <target state="translated">Affinché il <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A&gt;</ph> metodo venga eseguito correttamente, viene eseguita una sequenza di azioni in background.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The text range is normalized; that is, the text range is collapsed to a degenerate range at the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> endpoint, making the <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint superfluous.</source>
          <target state="translated">L'intervallo di testo viene normalizzato; l'intervallo di testo viene compresso in un intervallo degenerato il <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> endpoint, rendendo il <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint superfluo.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>This step is necessary to remove ambiguity in situations where a text range spans <ph id="ph1">`unit`</ph> boundaries; for example, "{The U}RL <bpt id="p1">[</bpt><ph id="ph2">http://www.microsoft.com</ph><ept id="p1">](http://www.microsoft.com)</ept> is embedded in text" where "{" and "}" are the text range endpoints.</source>
          <target state="translated">Questo passaggio è necessario rimuovere l'ambiguità nei casi in cui un intervallo di testo si estenda <ph id="ph1">`unit`</ph> limiti, ad esempio "{l'U} RL <bpt id="p1">[</bpt> <ph id="ph2">http://www.microsoft.com</ph> <ept id="p1">](http://www.microsoft.com)</ept> è incorporato nel testo" dove "{" e "}" rappresentano il testo endpoint dell'intervallo.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The resulting range is moved backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> to the beginning of the requested <ph id="ph2">`unit`</ph> boundary.</source>
          <target state="translated">L'intervallo risultante viene spostato indietro in <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> all'inizio del limite <ph id="ph2">`unit`</ph> richiesto.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The range is moved forward or backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> by the requested number of <ph id="ph2">`unit`</ph> boundaries.</source>
          <target state="translated">L'intervallo viene spostato avanti o indietro in <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> per il numero richiesto di limiti <ph id="ph2">`unit`</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The range is then expanded from a degenerate range state by moving the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint by one requested <ph id="ph2">`unit`</ph> boundary.</source>
          <target state="translated">L'intervallo viene quindi espanso dallo stato di intervallo degenerato spostando l'endpoint <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> di un limite <ph id="ph2">`unit`</ph> richiesto.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source><bpt id="p1">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Regolazioni di intervallo mediante Move ed ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>regolazioni di intervallo mediante Move ed ExpandToEnclosingUnit<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</source>
          <target state="translated">Esempi di regolazione di un intervallo di testo per Move() ed ExpandToEnclosingUnit()</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position.</source>
          <target state="translated">Questi passaggi sono necessari poiché è comune per la lettura del contenuto lette una completa parola, frase o un paragrafo intero al punto di inserimento o da qualsiasi posizione del cursore virtuale.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A&gt;</ph> respects both hidden and visible text.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A&gt;</ph> rispetta il testo nascosto sia visibile.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The UI Automation client can check the <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> for text visibility.</source>
          <target state="translated">Il client di automazione interfaccia utente può controllare il <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> la visibilità del testo.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A&gt;</ph> defers to the next largest <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> supported if the given <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> is not supported by the control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit%2A&gt;</ph> rinvia al successivo più grande <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> supportato se il dato <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> non è supportata dal controllo.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The order, from smallest unit to largest, is listed below.</source>
          <target state="translated">L'ordine, da unità più piccolo al più grande, è elencato di seguito.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)">
          <source>The attribute to search for.</source>
          <target state="translated">Attributo da cercare.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)">
          <source>The attribute value to search for.</source>
          <target state="translated">Valore dell'attributo da cercare.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)">
          <source>This value must match the type specified for the attribute.</source>
          <target state="translated">Questo valore deve corrispondere al tipo specificato per l'attributo.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the last occurring text range should be returned instead of the first; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se deve essere restituito l'ultimo intervallo di testo invece del primo; in caso contrario <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)">
          <source>Returns a text range subset that has the specified attribute value.</source>
          <target state="translated">Restituisce un sottoinsieme di intervallo di testo che presenta il valore dell'attributo specificato.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)">
          <source>A text range having a matching attribute and attribute value; otherwise null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic).</source>
          <target state="translated">Intervallo di testo che presenta un attributo e un valore di attributo corrispondenti; in caso contrario, Null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic).</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)">
          <source>There is no differentiation between hidden and visible text.</source>
          <target state="translated">Non vi è alcuna differenza tra il testo nascosto e visibile.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)">
          <source>UI Automation clients can use <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> to check text visibility.</source>
          <target state="translated">I client di automazione interfaccia utente possono utilizzare <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> per controllare la visibilità del testo.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> to search the entire document.</source>
          <target state="translated">Utilizzare <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> per cercare l'intero documento.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)">
          <source>The text string to search for.</source>
          <target state="translated">Stringa di testo da cercare.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the last occurring text range should be returned instead of the first; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se deve essere restituito l'ultimo intervallo di testo invece del primo; in caso contrario <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if case should be ignored; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se è necessario ignorare la differenza tra maiuscole e minuscole; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)">
          <source>Returns a text range subset that contains the specified text.</source>
          <target state="translated">Restituisce un sottoinsieme di intervallo di testo contenente il testo specificato.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)">
          <source>A text range matching the specified text; otherwise null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic).</source>
          <target state="translated">Intervallo di testo corrispondente al testo specificato; in caso contrario, Null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic).</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)">
          <source>There is no differentiation between hidden and visible text.</source>
          <target state="translated">Non vi è alcuna differenza tra il testo nascosto e visibile.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)">
          <source>UI Automation clients can use <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> to check text visibility.</source>
          <target state="translated">I client di automazione interfaccia utente possono utilizzare <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> per controllare la visibilità del testo.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> to search the entire document.</source>
          <target state="translated">Utilizzare <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> per cercare l'intero documento.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)">
          <source>The text attribute.</source>
          <target state="translated">Attributo di testo.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)">
          <source>Returns the value of the specified attribute across the entire text range.</source>
          <target state="translated">Restituisce il valore dell'attributo specificato nell'intero intervallo di testo.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)">
          <source>Returns the value of the specified attribute.</source>
          <target state="translated">Restituisce il valore dell'attributo specificato.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)">
          <source>For example, GetAttributeValue(TextPattern.FontNameAttribute) would return a string that represents the font name, if unique, of the text range while GetAttributeValue(TextPattern.IsItalicAttribute) would return a boolean.</source>
          <target state="translated">Ad esempio, GetAttributeValue (TextPattern.FontNameAttribute) restituirebbe una stringa che rappresenta il nome del tipo di carattere, se univoco, dell'intervallo di testo, mentre GetAttributeValue (TextPattern.IsItalicAttribute) restituirebbe un valore booleano.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)">
          <source>Returns <ph id="ph1">&lt;see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /&gt;</ph> if the value of the specified attribute varies over the text range.</source>
          <target state="translated">Restituisce <ph id="ph1">&lt;see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /&gt;</ph> se il valore dell'attributo specificato varia nell'intervallo di testo.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)">
          <source>Returns <ph id="ph1">&lt;see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /&gt;</ph> if the specified attribute is not supported by the provider or the control.</source>
          <target state="translated">Restituisce <ph id="ph1">&lt;see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /&gt;</ph> se l'attributo specificato non è supportato dal provider o dal controllo.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)">
          <source>There is no differentiation between hidden and visible text.</source>
          <target state="translated">Non vi è alcuna differenza tra il testo nascosto e visibile.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)">
          <source>UI Automation clients can use <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> to check text visibility.</source>
          <target state="translated">I client di automazione interfaccia utente possono utilizzare <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> per controllare la visibilità del testo.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)">
          <source>If the specified attribute is not valid.</source>
          <target state="translated">Se l'attributo specificato non è valido.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles">
          <source>Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.</source>
          <target state="translated">Recupera una raccolta di rettangoli di delimitazione per ogni riga di testo completamente o parzialmente visibile in un intervallo di testo.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles">
          <source>An array of bounding rectangles for each full or partial line of text in a text range.</source>
          <target state="translated">Una matrice di rettangoli di delimitazione per ogni riga di testo completa o parziale in un intervallo di testo.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles">
          <source>An empty array for a degenerate text range.</source>
          <target state="translated">Matrice vuota per un intervallo di testo degenere.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles">
          <source>An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.</source>
          <target state="translated">Matrice vuota per un intervallo di testo che presenta coordinate di schermo che lo collocano completamente fuori dello schermo, al di fuori della visualizzazione o nascosto da una finestra sovrapposta.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetChildren">
          <source>Retrieves a collection of all embedded objects that fall within the text range.</source>
          <target state="translated">Recupera una raccolta di tutti gli oggetti incorporati che rientrano nell'intervallo di testo.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetChildren">
          <source>A collection of all child objects that fall within the range.</source>
          <target state="translated">Raccolta di tutti gli oggetti figlio che rientrano nell'intervallo.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetChildren">
          <source>Children that overlap with the range but are not entirely enclosed by it will also be included in the collection.</source>
          <target state="translated">Nella raccolta verranno inclusi anche gli oggetti figlio che si sovrappongono all'intervallo ma non vi sono racchiusi completamente.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetChildren">
          <source>Returns an empty collection if there are no child objects.</source>
          <target state="translated">Restituisce una raccolta vuota se non sono presenti oggetti figlio.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement">
          <source>Returns the innermost <ph id="ph1">&lt;see cref="T:System.Windows.Automation.AutomationElement" /&gt;</ph> that encloses the text range.</source>
          <target state="translated">Restituisce l'oggetto <ph id="ph1">&lt;see cref="T:System.Windows.Automation.AutomationElement" /&gt;</ph> più interno che racchiude l'intervallo di testo.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement">
          <source>The innermost element enclosing the caller.</source>
          <target state="translated">L'elemento più interno che racchiude il chiamante.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement">
          <source>The enclosing <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement&gt;</ph>, typically the text provider that supplies the text range.</source>
          <target state="translated">Il tipo di inclusione <ph id="ph1">&lt;xref:System.Windows.Automation.AutomationElement&gt;</ph>, in genere il provider di testo che fornisce l'intervallo di testo.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement">
          <source>However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider.</source>
          <target state="translated">Se tuttavia il provider di testo supporta elementi figlio, quali tabelle o collegamenti ipertestuali, l'elemento contenitore potrebbe essere un discendente del provider di testo.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)">
          <source>The maximum length of the string to return.</source>
          <target state="translated">Lunghezza massima della stringa da restituire.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)">
          <source>Use <bpt id="p1">&lt;c&gt;</bpt>-1<ept id="p1">&lt;/c&gt;</ept> if no limit is required.</source>
          <target state="translated">Usare <bpt id="p1">&lt;c&gt;</bpt>-1<ept id="p1">&lt;/c&gt;</ept> se non è richiesto alcun limite.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)">
          <source>Returns the plain text of the text range.</source>
          <target state="translated">Restituisce il testo normale dell'intervallo di testo.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)">
          <source>The plain text of the text range, possibly truncated at the specified <ph id="ph1">&lt;paramref name="maxLength" /&gt;</ph>.</source>
          <target state="translated">Testo normale dell'intervallo di testo, probabilmente troncato all'oggetto <ph id="ph1">&lt;paramref name="maxLength" /&gt;</ph> specificato.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A&gt;</ph> respects both hidden and visible text.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A&gt;</ph> rispetta il testo nascosto sia visibile.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)">
          <source>The UI Automation client can check the <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> for text visibility.</source>
          <target state="translated">Il client di automazione interfaccia utente può controllare il <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> la visibilità del testo.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)">
          <source>If <ph id="ph1">`maxLength`</ph> is greater than the length of the text span of the caller, the string returned will be the plain text of the text range.</source>
          <target state="translated">Se <ph id="ph1">`maxLength`</ph> è maggiore della lunghezza dell'intervallo di testo del chiamante, la stringa restituita sarà il testo normale dell'intervallo di testo.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A&gt;</ph> will not be affected by the order of endpoints in the text flow; it will always return the text between the Start and End endpoints of the text range in the logical text flow order.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.GetText%2A&gt;</ph> non verranno influenzati dall'ordine degli endpoint nel flusso di testo. Restituisce sempre il testo tra gli endpoint di inizio e di fine dell'intervallo di testo nell'ordine di flusso di testo logico.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)">
          <source>If <ph id="ph1">&lt;paramref name="maxLength" /&gt;</ph> is less than -1.</source>
          <target state="translated">Se <ph id="ph1">&lt;paramref name="maxLength" /&gt;</ph> è minore di -1.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The text unit boundary.</source>
          <target state="translated">Limite di unità di testo.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The number of text units to move.</source>
          <target state="translated">Numero di unità di testo da spostare.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.</source>
          <target state="translated">Un valore positivo consente di spostare l'intervallo di testo in avanti, un valore negativo consente di spostare l'intervallo di testo indietro e 0 non ha effetto.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>Moves the text range the specified number of text units.</source>
          <target state="translated">Sposta l'intervallo di testo di un numero specificato di unità di testo.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The number of units actually moved.</source>
          <target state="translated">Numero di unità effettivamente spostate.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>This can be less than the number requested if either of the new text range endpoints is greater than or less than the <ph id="ph1">&lt;see cref="P:System.Windows.Automation.TextPattern.DocumentRange" /&gt;</ph> endpoints.</source>
          <target state="translated">Può essere inferiore al numero richiesto se uno dei nuovi endpoint di intervallo di testo è maggiore o minore degli endpoint di <ph id="ph1">&lt;see cref="P:System.Windows.Automation.TextPattern.DocumentRange" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.Move%2A&gt;</ph> method to execute successfully.</source>
          <target state="translated">Quando è necessario scorrere il contenuto di un intervallo di testo, per garantire una corretta esecuzione del metodo <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.Move%2A&gt;</ph> è prevista una serie di passaggi dietro le quinte.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The text range is normalized; that is, the text range is collapsed to a degenerate range at the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> endpoint, which makes the <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint superfluous.</source>
          <target state="translated">L'intervallo di testo viene normalizzato, ovvero viene compresso in un intervallo degenerato all'endpoint <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> . Ciò rende superfluo l'endpoint <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> .</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>This step is necessary to remove ambiguity in situations where a text range spans <ph id="ph1">`unit`</ph> boundaries; for example, "{The U}RL <bpt id="p1">[</bpt><ph id="ph2">http://www.microsoft.com</ph><ept id="p1">](http://www.microsoft.com)</ept> is embedded in text" where "{" and "}" are the text range endpoints.</source>
          <target state="translated">Questo passaggio è necessario rimuovere l'ambiguità nei casi in cui un intervallo di testo si estenda <ph id="ph1">`unit`</ph> limiti, ad esempio "{l'U} RL <bpt id="p1">[</bpt> <ph id="ph2">http://www.microsoft.com</ph> <ept id="p1">](http://www.microsoft.com)</ept> è incorporato nel testo" dove "{" e "}" rappresentano il testo endpoint dell'intervallo.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The resulting range is moved backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> to the beginning of the requested <ph id="ph2">`unit`</ph> boundary.</source>
          <target state="translated">L'intervallo risultante viene spostato indietro in <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> all'inizio del limite <ph id="ph2">`unit`</ph> richiesto.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The range is moved forward or backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> by the requested number of <ph id="ph2">`unit`</ph> boundaries.</source>
          <target state="translated">L'intervallo viene spostato avanti o indietro in <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> per il numero richiesto di limiti <ph id="ph2">`unit`</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The range is then expanded from a degenerate range state by moving the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint by one requested <ph id="ph2">`unit`</ph> boundary.</source>
          <target state="translated">L'intervallo viene quindi espanso dallo stato di intervallo degenerato spostando l'endpoint <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> di un limite <ph id="ph2">`unit`</ph> richiesto.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><bpt id="p1">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Regolazioni di intervallo mediante Move ed ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>regolazioni di intervallo mediante Move ed ExpandToEnclosingUnit<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</source>
          <target state="translated">Esempi di regolazione di un intervallo di testo per Move() ed ExpandToEnclosingUnit()</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> tree; object boundaries are ignored.</source>
          <target state="translated">Il contenuto testuale (o testo interno) di un contenitore di testo o di un oggetto incorporato, ad esempio una cella di tabella o un collegamento ipertestuale, viene esposto come un flusso di testo continuo sia nella vista di controllo che nella visualizzazione del contenuto dell'albero di <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph>. I limiti dell'oggetto vengono ignorati.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects.</source>
          <target state="translated">Se un client di automazione interfaccia utente sta recuperando il testo a scopo di esposizione, interpretazione o analisi, è necessario verificare l'eventuale presenza di casi speciali nell'intervallo di testo, ad esempio una tabella con contenuto testuale o altri oggetti incorporati.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>This can be accomplished by calling <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A&gt;</ph> to obtain an <ph id="ph2">&lt;xref:System.Windows.Automation.AutomationElement&gt;</ph> for each embedded object and then calling <ph id="ph3">&lt;xref:System.Windows.Automation.TextPattern.RangeFromChild%2A&gt;</ph> to obtain a text range for each element; this is done recursively until all textual content has been retrieved.</source>
          <target state="translated">Questa operazione può essere eseguita chiamando <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A&gt;</ph> per ottenere un <ph id="ph2">&lt;xref:System.Windows.Automation.AutomationElement&gt;</ph> per ogni oggetto incorporato e chiamando quindi <ph id="ph3">&lt;xref:System.Windows.Automation.TextPattern.RangeFromChild%2A&gt;</ph> per ottenere un intervallo di testo per ogni elemento; questa operazione viene eseguita in modo ricorsivo fino a quando non è stato recuperato l'intero contenuto testuale.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><bpt id="p1">![</bpt>Text ranges spanned by embedded objects.<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-embeddedobjecttextranges.png "</bpt>Text ranges spanned by embedded objects.<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Intervalli di testo estesi da oggetti incorporati. <ept id="p1">]</ept> <bpt id="p2">(~/add/media/uia-textpattern-embeddedobjecttextranges.png "</bpt>Gli intervalli di testo estesi da oggetti incorporati.<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>Example of a text stream with embedded objects and their range spans</source>
          <target state="translated">Esempio di un flusso di testo con oggetti incorporati e le estensioni degli intervalli corrispondenti</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.Move%2A&gt;</ph> respects both hidden and visible text.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.Move%2A&gt;</ph> rispetta il testo nascosto sia visibile.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The UI Automation client can check the <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> for text visibility.</source>
          <target state="translated">Il client di automazione interfaccia utente può controllare il <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> la visibilità del testo.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.Move%2A&gt;</ph> defers to the next largest <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> supported if the given <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> is not supported by the control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.Move%2A&gt;</ph> rinvia al successivo più grande <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> supportato se il dato <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> non è supportata dal controllo.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The order, from smallest unit to largest, is listed below.</source>
          <target state="translated">L'ordine, da unità più piccolo al più grande, è elencato di seguito.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The text is not altered in any way as the text range just spans a different part of the text.</source>
          <target state="translated">Il testo non viene modificato in alcun modo l'intervallo di testo occupa solo una parte diversa del testo.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>The endpoint to move.</source>
          <target state="translated">Endpoint da spostare.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>Another range from the same text provider.</source>
          <target state="translated">Altro intervallo dallo stesso provider di testo.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>An endpoint on the other range.</source>
          <target state="translated">Un endpoint nell'altro intervallo.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>Moves one endpoint of a text range to the specified endpoint of a second text range.</source>
          <target state="translated">Sposta un endpoint di un intervallo di testo all'endpoint specificato di un secondo intervallo di testo.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> is always less than or equal to <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph>).</source>
          <target state="translated">Se l'endpoint spostato interseca l'altro endpoint dell'intervallo di testo stesso, l'altro endpoint viene spostato, inoltre, risultante in un intervallo degenerato e assicurando l'ordinamento corretto degli endpoint (vale a dire <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> è sempre minore o uguale a <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The endpoint to move.</source>
          <target state="translated">Endpoint da spostare.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The textual unit for moving.</source>
          <target state="translated">Unità testuale per lo spostamento.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The number of units to move.</source>
          <target state="translated">Numero di unità da spostare.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>A positive count moves the endpoint forward.</source>
          <target state="translated">Un numero positivo comporta lo spostamento in avanti dell'endpoint.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>A negative count moves backward.</source>
          <target state="translated">Un numero negativo comporta lo spostamento indietro.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>A count of 0 has no effect.</source>
          <target state="translated">Un numero pari a 0 non ha effetto.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>Moves one endpoint of the text range the specified number of <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Text.TextUnit" /&gt;</ph>s within the document range.</source>
          <target state="translated">Sposta un endpoint dell'intervallo di testo del numero specificato di <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Text.TextUnit" /&gt;</ph> nell'intervallo del documento.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.</source>
          <target state="translated">Numero di unità effettivamente spostate, che può essere inferiore al numero richiesto se con lo spostamento degli endpoint si raggiunge l'inizio o la fine del documento.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.Move%2A&gt;</ph> method to execute successfully.</source>
          <target state="translated">Quando è necessario scorrere il contenuto di un intervallo di testo, per garantire una corretta esecuzione del metodo <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.Move%2A&gt;</ph> è prevista una serie di passaggi dietro le quinte.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The text range is normalized; that is, the text range is collapsed to a degenerate range at the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> endpoint, which makes the <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint superfluous.</source>
          <target state="translated">L'intervallo di testo viene normalizzato, ovvero viene compresso in un intervallo degenerato all'endpoint <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> . Ciò rende superfluo l'endpoint <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> .</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>This step is necessary to remove ambiguity in situations where a text range spans <ph id="ph1">`unit`</ph> boundaries; for example, "{The U}RL <bpt id="p1">[</bpt><ph id="ph2">http://www.microsoft.com</ph><ept id="p1">](http://www.microsoft.com)</ept> is embedded in text" where "{" and "}" are the text range endpoints.</source>
          <target state="translated">Questo passaggio è necessario rimuovere l'ambiguità nei casi in cui un intervallo di testo si estenda <ph id="ph1">`unit`</ph> limiti, ad esempio "{l'U} RL <bpt id="p1">[</bpt> <ph id="ph2">http://www.microsoft.com</ph> <ept id="p1">](http://www.microsoft.com)</ept> è incorporato nel testo" dove "{" e "}" rappresentano il testo endpoint dell'intervallo.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The resulting range is moved backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> to the beginning of the requested <ph id="ph2">`unit`</ph> boundary.</source>
          <target state="translated">L'intervallo risultante viene spostato indietro in <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.DocumentRange%2A&gt;</ph> all'inizio del limite <ph id="ph2">`unit`</ph> richiesto.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The range is then expanded from a degenerate range state by moving the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint by one requested <ph id="ph2">`unit`</ph> boundary.</source>
          <target state="translated">L'intervallo viene quindi espanso dallo stato di intervallo degenerato spostando l'endpoint <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> di un limite <ph id="ph2">`unit`</ph> richiesto.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><bpt id="p1">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Regolazioni di intervallo mediante Move ed ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>regolazioni di intervallo mediante Move ed ExpandToEnclosingUnit<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</source>
          <target state="translated">Esempi di regolazione di un intervallo di testo per Move() ed ExpandToEnclosingUnit()</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> tree; object boundaries are ignored.</source>
          <target state="translated">Il contenuto testuale (o testo interno) di un contenitore di testo o di un oggetto incorporato, ad esempio una cella di tabella o un collegamento ipertestuale, viene esposto come un flusso di testo continuo sia nella vista di controllo che nella visualizzazione del contenuto dell'albero di <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph>. I limiti dell'oggetto vengono ignorati.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>If a UI Automation client is retrieving the text for the purpose of reciting, interpreting, or analyzing in some manner, the text range should be checked for special cases, such as a table with textual content or other embedded objects.</source>
          <target state="translated">Se un client di automazione interfaccia utente sta recuperando il testo a scopo di esposizione, interpretazione o analisi, è necessario verificare l'eventuale presenza di casi speciali nell'intervallo di testo, ad esempio una tabella con contenuto testuale o altri oggetti incorporati.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>This can be accomplished by calling <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A&gt;</ph> to obtain an <ph id="ph2">&lt;xref:System.Windows.Automation.AutomationElement&gt;</ph> for each embedded object and then calling <ph id="ph3">&lt;xref:System.Windows.Automation.TextPattern.RangeFromChild%2A&gt;</ph> to obtain a text range for each element; this is done recursively until all textual content has been retrieved.</source>
          <target state="translated">Questa operazione può essere eseguita chiamando <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A&gt;</ph> per ottenere un <ph id="ph2">&lt;xref:System.Windows.Automation.AutomationElement&gt;</ph> per ogni oggetto incorporato e chiamando quindi <ph id="ph3">&lt;xref:System.Windows.Automation.TextPattern.RangeFromChild%2A&gt;</ph> per ottenere un intervallo di testo per ogni elemento; questa operazione viene eseguita in modo ricorsivo fino a quando non è stato recuperato l'intero contenuto testuale.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><bpt id="p1">![</bpt>Text ranges spanned by embedded objects.<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-embeddedobjecttextranges.png "</bpt>Text ranges spanned by embedded objects.<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Intervalli di testo estesi da oggetti incorporati. <ept id="p1">]</ept> <bpt id="p2">(~/add/media/uia-textpattern-embeddedobjecttextranges.png "</bpt>Gli intervalli di testo estesi da oggetti incorporati.<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>Example of a text stream with embedded objects and their range spans</source>
          <target state="translated">Esempio di un flusso di testo con oggetti incorporati e le estensioni degli intervalli corrispondenti</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit%2A&gt;</ph> defers to the next largest <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> supported if the given <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> is not supported by the control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit%2A&gt;</ph> rinvia al successivo più grande <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> supportato se il dato <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> non è supportata dal controllo.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The order, from smallest unit to largest, is listed below.</source>
          <target state="translated">L'ordine, da unità più piccolo al più grande, è elencato di seguito.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection">
          <source>Removes a highlighted section of text, corresponding to the calling text range <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> and <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> endpoints, from an existing collection of highlighted text in a text container that supports multiple, disjoint selections.</source>
          <target state="translated">Rimuove una sezione evidenziata del testo, corrispondente agli endpoint <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> e <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> dell'intervallo di testo chiamante, da una raccolta esistente di testo evidenziato in un contenitore di testo che supporta selezioni multiple non contigue.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection">
          <source>The text insertion point will move to the area of the removed highlight.</source>
          <target state="translated">Il punto di inserimento passerà all'area dell'evidenziazione rimossa.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection">
          <source>Providing a degenerate text range will move the insertion point.</source>
          <target state="translated">Fornisce un intervallo di testo degenerato sposterà il punto di inserimento.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection">
          <source>If text provider does not support multiple, disjoint selections (for example, <ph id="ph1">&lt;see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /&gt;</ph> must have a value of <ph id="ph2">&lt;see langword="Multiple" /&gt;</ph>).</source>
          <target state="translated">Se il provider di testo non supporta le selezioni multiple non contigue (ad esempio, <ph id="ph1">&lt;see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /&gt;</ph> deve avere un valore pari a <ph id="ph2">&lt;see langword="Multiple" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the text control should be scrolled so the text range is flush with the top of the viewport; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if it should be flush with the bottom of the viewport.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se il controllo di testo deve essere spostato in modo che l'intervallo di testo sia allineato al margine superiore del riquadro di visualizzazione; <ph id="ph2">&lt;see langword="false" /&gt;</ph> se deve essere allineato al margine inferiore del riquadro di visualizzazione.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)">
          <source>Causes the text control to scroll vertically until the text range is visible in the viewport.</source>
          <target state="translated">Determina lo scorrimento verticale del controllo di testo fino a quando l'intervallo di testo non è visibile nel riquadro di visualizzazione.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView%2A&gt;</ph> respects both hidden and visible text.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView%2A&gt;</ph> rispetta il testo nascosto sia visibile.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)">
          <source>The UI Automation client can check the <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> for text visibility.</source>
          <target state="translated">Il client di automazione interfaccia utente può controllare il <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern.IsHiddenAttribute&gt;</ph> la visibilità del testo.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)">
          <source>If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport.</source>
          <target state="translated">Se l'intervallo di testo è nascosta, il controllo testo scorre solo se il testo nascosto presenta un ancoraggio nel riquadro di visualizzazione.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)">
          <source>If scrolling is not supported by the control.</source>
          <target state="translated">Se lo scorrimento non è supportato dal controllo.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Select">
          <source>Highlights text in the text control corresponding to the text range <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> and <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> endpoints.</source>
          <target state="translated">Evidenzia il testo nel controllo di testo corrispondente agli endpoint <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> e <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> dell'intervallo di testo.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Text.TextPatternRange.Select">
          <source>If a degenerate text range is provided, the text insertion point will move to the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> endpoint of the text range.</source>
          <target state="translated">Se viene specificato un intervallo di testo degenerato, il punto di inserimento passerà al <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> endpoint dell'intervallo di testo.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Text.TextPatternRange.Select">
          <source>Occurs when text selection is not supported by the text control.</source>
          <target state="translated">Si verifica quando la selezione del testo non è supportata dal controllo del testo.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="P:System.Windows.Automation.Text.TextPatternRange.TextPattern">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Windows.Automation.TextPattern" /&gt;</ph> associated with the text range.</source>
          <target state="translated">Ottiene l'oggetto <ph id="ph1">&lt;see cref="T:System.Windows.Automation.TextPattern" /&gt;</ph> associato all'intervallo di testo.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Automation.Text.TextPatternRange.TextPattern">
          <source>The text provider.</source>
          <target state="translated">Provider di testo.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>