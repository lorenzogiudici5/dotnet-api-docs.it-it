<Type Name="DbBinaryExpression" FullName="System.Data.Common.CommandTrees.DbBinaryExpression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b5db9b564ebcf541af48bc61bcdf24c8a7f147f3" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37685429" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class DbBinaryExpression : System.Data.Common.CommandTrees.DbExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbBinaryExpression extends System.Data.Common.CommandTrees.DbExpression" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.CommandTrees.DbBinaryExpression" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbBinaryExpression&#xA;Inherits DbExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class DbBinaryExpression abstract : System::Data::Common::CommandTrees::DbExpression" />
  <TypeSignature Language="F#" Value="type DbBinaryExpression = class&#xA;    inherit DbExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.CommandTrees.DbExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Implements the basic functionality required by expressions that accept two expression operands.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public System.Data.Common.CommandTrees.DbExpression Left { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.CommandTrees.DbExpression Left" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.CommandTrees.DbBinaryExpression.Left" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Left As DbExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::CommandTrees::DbExpression ^ Left { System::Data::Common::CommandTrees::DbExpression ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Left : System.Data.Common.CommandTrees.DbExpression" Usage="System.Data.Common.CommandTrees.DbBinaryExpression.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the left argument.</summary>
        <value>Oggetto <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> che definisce l'argomento a sinistra.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I tipi di espressione derivati possono consentire controlli dei tipi più precisi se si imposta la proprietà <xref:System.Data.Common.CommandTrees.DbBinaryExpression.Left%2A>. <xref:System.Data.Common.CommandTrees.DbUnionAllExpression>, ad esempio, richiede che la relativa espressione a sinistra abbia un tipo di risultato raccolta, mentre <xref:System.Data.Common.CommandTrees.DbAndExpression> richiede un tipo di risultato Boolean. I tipi di espressione derivati, in genere, non consentono l'impostazione di <xref:System.Data.Common.CommandTrees.DbBinaryExpression.Left%2A> su un'espressione con un tipo di risultato che non sia uguale o promuovibile al tipo di risultato del valore corrente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The expression is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbBinaryExpression" />,  or its result type is not equal or promotable to the required type for the left argument.</exception>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public System.Data.Common.CommandTrees.DbExpression Right { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.CommandTrees.DbExpression Right" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.CommandTrees.DbBinaryExpression.Right" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Right As DbExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::CommandTrees::DbExpression ^ Right { System::Data::Common::CommandTrees::DbExpression ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Right : System.Data.Common.CommandTrees.DbExpression" Usage="System.Data.Common.CommandTrees.DbBinaryExpression.Right" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the right argument.</summary>
        <value>Oggetto <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> che definisce l'argomento a destra.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I tipi di espressione derivati possono consentire controlli dei tipi più precisi se si imposta la proprietà <xref:System.Data.Common.CommandTrees.DbBinaryExpression.Right%2A>. <xref:System.Data.Common.CommandTrees.DbUnionAllExpression>, ad esempio, richiede che la relativa espressione a destra abbia un tipo di risultato raccolta, mentre <xref:System.Data.Common.CommandTrees.DbAndExpression> richiede un tipo di risultato Boolean. I tipi di espressione derivati, in genere, non consentono l'impostazione di <xref:System.Data.Common.CommandTrees.DbBinaryExpression.Right%2A> su un'espressione con un tipo di risultato che non sia uguale o promuovibile al tipo di risultato del valore corrente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The expression is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbBinaryExpression" />,  or its result type is not equal or promotable to the required type for the right argument.</exception>
      </Docs>
    </Member>
  </Members>
</Type>