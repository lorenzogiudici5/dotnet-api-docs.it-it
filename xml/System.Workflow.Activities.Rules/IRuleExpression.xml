<Type Name="IRuleExpression" FullName="System.Workflow.Activities.Rules.IRuleExpression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6cec9b65d756dfa91881e21e8c3397c14afc8891" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36455416" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IRuleExpression" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRuleExpression" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Activities.Rules.IRuleExpression" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRuleExpression" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRuleExpression" />
  <TypeSignature Language="F#" Value="type IRuleExpression = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Rappresenta la classe di base da cui i writer dell'espressione personalizzati devono derivare per poter scrivere espressioni personalizzate.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 Il codice seguente crea un'espressione che può essere utilizzata in condizioni e set di regole dichiarativi. L'espressione è denominata `TwoOfThree` e usa 3 parametri che devono tutti restituire valori booleani. L'espressione restituisce `true` se 2 delle 3 espressioni restituiscono `true`.  
  
 Per utilizzare questo codice, aggiungerlo a un progetto Libreria di classi e fare riferimento alla libreria dal progetto flusso di lavoro.  
  
```csharp  
using System.CodeDom;  
using System.Text;  
using System.Workflow.Activities.Rules;  
using System.Workflow.ComponentModel.Compiler;  
  
namespace TwoOfThreeRuleExpression  
{  
    public class TwoOfThree : CodeExpression, IRuleExpression  
    {  
        CodeExpression expression1, expression2, expression3;  
  
        public CodeExpression First  
        {  
            get { return expression1; }  
            set { expression1 = value; }  
        }  
  
        public CodeExpression Second  
        {  
            get { return expression2; }  
            set { expression2 = value; }  
        }  
  
        public CodeExpression Third  
        {  
            get { return expression3; }  
            set { expression3 = value; }  
        }  
  
        public TwoOfThree()  
        {  
            // constructor required for deserialization  
        }  
  
        public TwoOfThree(CodeExpression first, CodeExpression second, CodeExpression third)  
        {  
            // constructor required by parser  
            expression1 = first;  
            expression2 = second;  
            expression3 = third;  
        }  
  
        public void AnalyzeUsage(RuleAnalysis analysis, bool isRead, bool isWritten, RulePathQualifier qualifier)  
        {  
            // check what the 3 expressions use  
            RuleExpressionWalker.AnalyzeUsage(analysis, expression1, true, false, null);  
            RuleExpressionWalker.AnalyzeUsage(analysis, expression2, true, false, null);  
            RuleExpressionWalker.AnalyzeUsage(analysis, expression3, true, false, null);  
        }  
  
        public CodeExpression Clone()  
        {  
            TwoOfThree result = new TwoOfThree();  
            result.expression1 = RuleExpressionWalker.Clone(expression1);  
            result.expression2 = RuleExpressionWalker.Clone(expression2);  
            result.expression3 = RuleExpressionWalker.Clone(expression3);  
            return result;  
        }  
  
        public void Decompile(StringBuilder stringBuilder, CodeExpression parentExpression)  
        {  
            // what should be displayed by the parser  
            stringBuilder.Append("TwoOfThree(");  
            RuleExpressionWalker.Decompile(stringBuilder, expression1, this);  
            stringBuilder.Append(", ");  
            RuleExpressionWalker.Decompile(stringBuilder, expression2, this);  
            stringBuilder.Append(", ");  
            RuleExpressionWalker.Decompile(stringBuilder, expression3, this);  
            stringBuilder.Append(")");  
        }  
  
        static RuleLiteralResult resultTrue = new RuleLiteralResult(true);  
        static RuleLiteralResult resultFalse = new RuleLiteralResult(false);  
  
        public RuleExpressionResult Evaluate(RuleExecution execution)  
        {  
            // start by doing the first 2 expressions  
            RuleExpressionResult r1 = RuleExpressionWalker.Evaluate(execution, expression1);  
            RuleExpressionResult r2 = RuleExpressionWalker.Evaluate(execution, expression2);  
            bool b1 = (bool)r1.Value;  
            bool b2 = (bool)r2.Value;  
            if (b1 && b2)  
            {  
                // both are true, so result is true  
                return resultTrue;  
            }  
            else if (b1 || b2)  
            {  
                // only one of the first 2 is true, evaluate the third to determine result  
                return RuleExpressionWalker.Evaluate(execution, expression3);  
            }  
            else  
                // both e1 and e2 are false, so skip e3 and return false;  
                return resultFalse;  
        }  
  
        public bool Match(CodeExpression expression)  
        {  
            TwoOfThree other = expression as TwoOfThree;  
            return (other != null) &&  
                RuleExpressionWalker.Match(expression1, other.expression1) &&  
                RuleExpressionWalker.Match(expression2, other.expression2) &&  
                RuleExpressionWalker.Match(expression3, other.expression3);  
        }  
  
        public RuleExpressionInfo Validate(RuleValidation validation, bool isWritten)  
        {  
            ValidateExpression(validation, expression1, "First");  
            ValidateExpression(validation, expression2, "Second");  
            ValidateExpression(validation, expression3, "Third");  
            return new RuleExpressionInfo(typeof(bool));  
        }  
  
        private void ValidateExpression(RuleValidation validation, CodeExpression expression, string propertyName)  
        {  
            ValidationError error;  
            if (expression == null)  
            {  
                error = new ValidationError(propertyName + " cannot be null", 123);  
                validation.Errors.Add(error);  
            }  
            else  
            {  
                RuleExpressionInfo result = RuleExpressionWalker.Validate(validation, expression, false);  
                if ((result == null) || (result.ExpressionType != typeof(bool)))  
                {  
                    error = new ValidationError(propertyName + " must return boolean result", 123);  
                    validation.Errors.Add(error);  
                }  
            }  
        }  
    }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AnalyzeUsage">
      <MemberSignature Language="C#" Value="public void AnalyzeUsage (System.Workflow.Activities.Rules.RuleAnalysis analysis, bool isRead, bool isWritten, System.Workflow.Activities.Rules.RulePathQualifier qualifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AnalyzeUsage(class System.Workflow.Activities.Rules.RuleAnalysis analysis, bool isRead, bool isWritten, class System.Workflow.Activities.Rules.RulePathQualifier qualifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.Rules.IRuleExpression.AnalyzeUsage(System.Workflow.Activities.Rules.RuleAnalysis,System.Boolean,System.Boolean,System.Workflow.Activities.Rules.RulePathQualifier)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AnalyzeUsage (analysis As RuleAnalysis, isRead As Boolean, isWritten As Boolean, qualifier As RulePathQualifier)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AnalyzeUsage(System::Workflow::Activities::Rules::RuleAnalysis ^ analysis, bool isRead, bool isWritten, System::Workflow::Activities::Rules::RulePathQualifier ^ qualifier);" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeUsage : System.Workflow.Activities.Rules.RuleAnalysis * bool * bool * System.Workflow.Activities.Rules.RulePathQualifier -&gt; unit" Usage="iRuleExpression.AnalyzeUsage (analysis, isRead, isWritten, qualifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="analysis" Type="System.Workflow.Activities.Rules.RuleAnalysis" />
        <Parameter Name="isRead" Type="System.Boolean" />
        <Parameter Name="isWritten" Type="System.Boolean" />
        <Parameter Name="qualifier" Type="System.Workflow.Activities.Rules.RulePathQualifier" />
      </Parameters>
      <Docs>
        <param name="analysis">Metodo <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" /> per archiviare campi e proprietà letti da una condizione o da un'azione.</param>
        <param name="isRead">
          <see langword="true" /> se l'espressione viene letta; <see langword="false" /> se l'espressione non viene letta.</param>
        <param name="isWritten">
          <see langword="true" /> se l'espressione sta essendo scritta; <see langword="false" /> se l'espressione non sta essendo scritta.</param>
        <param name="qualifier">Percorso di un campo o di una proprietà.</param>
        <summary>Quando viene sottoposto a override in una classe derivata, segnala la modalità con cui l'oggetto utilizza campi e proprietà nel tipo di contesto.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpression Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeExpression Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.Rules.IRuleExpression.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeExpression ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; System.CodeDom.CodeExpression" Usage="iRuleExpression.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando se ne esegue l'override in una classe derivata, viene creata una copia completa della classe <see cref="T:System.CodeDom.CodeExpression" />corrente.</summary>
        <returns>Copia completa della classe <see cref="T:System.CodeDom.CodeExpression" />corrente.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decompile">
      <MemberSignature Language="C#" Value="public void Decompile (System.Text.StringBuilder stringBuilder, System.CodeDom.CodeExpression parentExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Decompile(class System.Text.StringBuilder stringBuilder, class System.CodeDom.CodeExpression parentExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.Rules.IRuleExpression.Decompile(System.Text.StringBuilder,System.CodeDom.CodeExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Decompile(System::Text::StringBuilder ^ stringBuilder, System::CodeDom::CodeExpression ^ parentExpression);" />
      <MemberSignature Language="F#" Value="abstract member Decompile : System.Text.StringBuilder * System.CodeDom.CodeExpression -&gt; unit" Usage="iRuleExpression.Decompile (stringBuilder, parentExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720:AvoidTypeNamesInParameters", MessageId="0#")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringBuilder" Type="System.Text.StringBuilder" />
        <Parameter Name="parentExpression" Type="System.CodeDom.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="stringBuilder">Stringa mutevole per l'espressione decompilata. Questo metodo aggiunge la sintassi decompilata per la sottoespressione.</param>
        <param name="parentExpression">Espressione di codice padre. Può essere utilizzata per determinare la precedenza dell'operatore e se la sottoespressione ha bisogno di essere messa tra parentesi.</param>
        <summary>Quando se ne esegue l'override in una classe derivata, decompila l'espressione personalizzata in forma di stringa.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public System.Workflow.Activities.Rules.RuleExpressionResult Evaluate (System.Workflow.Activities.Rules.RuleExecution execution);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Workflow.Activities.Rules.RuleExpressionResult Evaluate(class System.Workflow.Activities.Rules.RuleExecution execution) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.Rules.IRuleExpression.Evaluate(System.Workflow.Activities.Rules.RuleExecution)" />
      <MemberSignature Language="VB.NET" Value="Public Function Evaluate (execution As RuleExecution) As RuleExpressionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Activities::Rules::RuleExpressionResult ^ Evaluate(System::Workflow::Activities::Rules::RuleExecution ^ execution);" />
      <MemberSignature Language="F#" Value="abstract member Evaluate : System.Workflow.Activities.Rules.RuleExecution -&gt; System.Workflow.Activities.Rules.RuleExpressionResult" Usage="iRuleExpression.Evaluate execution" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Activities.Rules.RuleExpressionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="execution" Type="System.Workflow.Activities.Rules.RuleExecution" />
      </Parameters>
      <Docs>
        <param name="execution">Classe <see cref="T:System.Workflow.Activities.Rules.RuleExecution" /> per l'esecuzione dell'espressione.</param>
        <summary>Quando sottoposto a override in una classe derivata, valuta l'espressione personalizzata.</summary>
        <returns>Classe <see cref="T:System.Workflow.Activities.Rules.RuleExpressionResult" /> che indica il risultato dell'esecuzione della regola.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public bool Match (System.CodeDom.CodeExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Match(class System.CodeDom.CodeExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.Rules.IRuleExpression.Match(System.CodeDom.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (expression As CodeExpression) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Match(System::CodeDom::CodeExpression ^ expression);" />
      <MemberSignature Language="F#" Value="abstract member Match : System.CodeDom.CodeExpression -&gt; bool" Usage="iRuleExpression.Match expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="expression">Espressione da confrontare all'espressione corrente.</param>
        <summary>Confronta l'espressione corrente a un'altra espressione per determinare se sono uguali.</summary>
        <returns>
          <see langword="true" /> per indicare che le espressioni sono uguali. In caso contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public System.Workflow.Activities.Rules.RuleExpressionInfo Validate (System.Workflow.Activities.Rules.RuleValidation validation, bool isWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Workflow.Activities.Rules.RuleExpressionInfo Validate(class System.Workflow.Activities.Rules.RuleValidation validation, bool isWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.Rules.IRuleExpression.Validate(System.Workflow.Activities.Rules.RuleValidation,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Validate (validation As RuleValidation, isWritten As Boolean) As RuleExpressionInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Activities::Rules::RuleExpressionInfo ^ Validate(System::Workflow::Activities::Rules::RuleValidation ^ validation, bool isWritten);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.Workflow.Activities.Rules.RuleValidation * bool -&gt; System.Workflow.Activities.Rules.RuleExpressionInfo" Usage="iRuleExpression.Validate (validation, isWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Activities.Rules.RuleExpressionInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="validation" Type="System.Workflow.Activities.Rules.RuleValidation" />
        <Parameter Name="isWritten" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="validation">Classe <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> per la gestione del processo di convalida.</param>
        <param name="isWritten">
          <see langword="true" /> se l'espressione sta essendo scritta; <see langword="false" /> se l'espressione non sta essendo scritta.</param>
        <summary>Quando sottoposto a override in una classe derivata, verifica che l'espressione sia configurata correttamente e non presenti errori.</summary>
        <returns>Classe <see cref="T:System.Workflow.Activities.Rules.RuleExpressionInfo" /> per l'espressione.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>