<Type Name="DataColumn" FullName="System.Data.DataColumn">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c319d3c600dc2e2da64f51a76ba9219295794b79" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30400175" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataColumn : System.ComponentModel.MarshalByValueComponent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataColumn extends System.ComponentModel.MarshalByValueComponent" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataColumn" />
  <TypeSignature Language="VB.NET" Value="Public Class DataColumn&#xA;Inherits MarshalByValueComponent" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataColumn : System::ComponentModel::MarshalByValueComponent" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.MarshalByValueComponent</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ColumnName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignTimeVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DataColumnEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta lo schema di una colonna di una <see cref="T:System.Data.DataTable" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.DataColumn> è il blocco predefinito fondamentale per la creazione dello schema di un <xref:System.Data.DataTable>. Lo schema viene compilato mediante l'aggiunta di uno o più <xref:System.Data.DataColumn> oggetti per il <xref:System.Data.DataColumnCollection>. Per ulteriori informazioni, vedere [aggiunta di colonne a un oggetto DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/adding-columns-to-a-datatable.md).  
  
 Ogni <xref:System.Data.DataColumn> ha un <xref:System.Data.DataColumn.DataType%2A> proprietà che determina il tipo di dati di <xref:System.Data.DataColumn> contiene. Ad esempio, è possibile limitare il tipo di dati per valori integer, stringhe o numeri decimali. Poiché i dati contenuti dal <xref:System.Data.DataTable> viene in genere unita all'origine dati originale, è necessario far corrispondere i tipi di dati a quelli nell'origine dati. Per ulteriori informazioni, vedere [mapping dei tipi di dati in ADO.NET](~/docs/framework/data/adonet/data-type-mappings-in-ado-net.md).  
  
 Proprietà, ad esempio <xref:System.Data.DataColumn.AllowDBNull%2A>, <xref:System.Data.DataColumn.Unique%2A>, e <xref:System.Data.DataColumn.ReadOnly%2A> imporre restrizioni la voce e all'aggiornamento dei dati, consentendo in tal modo per garantire l'integrità dei dati. È inoltre possibile utilizzare il <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, e <xref:System.Data.DataColumn.AutoIncrementStep%2A> proprietà per controllare la generazione automatica dei dati. Per ulteriori informazioni su <xref:System.Data.DataColumn.AutoIncrement%2A> colonne, vedere [la creazione di colonne AutoIncrement](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-autoincrement-columns.md). Per ulteriori informazioni, vedere [la definizione di chiavi primarie](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
 È anche possibile assicurarsi che i valori un <xref:System.Data.DataColumn> sono univoci per la creazione di un <xref:System.Data.UniqueConstraint> e aggiungendolo al <xref:System.Data.ConstraintCollection> del <xref:System.Data.DataTable> a cui il <xref:System.Data.DataColumn> appartiene. Per ulteriori informazioni, vedere [vincoli DataTable](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md).  
  
 Per creare una relazione tra <xref:System.Data.DataColumn> oggetti, creare un <xref:System.Data.DataRelation> dell'oggetto e aggiungerlo al <xref:System.Data.DataRelationCollection> di un <xref:System.Data.DataSet>.  
  
 È possibile utilizzare il <xref:System.Data.DataColumn.Expression%2A> proprietà del <xref:System.Data.DataColumn> per calcolare i valori in una colonna dell'oggetto o creare una colonna aggregata. Per ulteriori informazioni, vedere [la creazione di colonne espressioni](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-expression-columns.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un <xref:System.Data.DataTable> con molti <xref:System.Data.DataColumn> oggetti.  
  
 [!code-csharp[Classic WebData DataColumn Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Questo tipo è sicuro per le operazioni di lettura con multithreading. È necessario sincronizzare le operazioni di scrittura.</threadsafe>
    <altmember cref="M:System.Data.DataColumnCollection.Add(System.Data.DataColumn)" />
    <altmember cref="T:System.Data.DataColumnCollection" />
    <altmember cref="P:System.Data.DataTable.Constraints" />
    <altmember cref="T:System.Data.ConstraintCollection" />
    <altmember cref="T:System.Windows.Forms.DataGrid" />
    <altmember cref="T:System.Data.DataRow" />
    <altmember cref="T:System.Data.DataTable" />
    <altmember cref="T:System.Data.DataSet" />
    <altmember cref="M:System.Data.DataTable.NewRow" />
    <altmember cref="T:System.Data.DataRowCollection" />
    <altmember cref="T:System.Data.UniqueConstraint" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Data.DataColumn" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza di una classe <see cref="T:System.Data.DataColumn" /> come tipo string.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Creazione, un <xref:System.Data.DataColumn> oggetto non dispone di alcun valore predefinito <xref:System.Data.DataColumn.ColumnName%2A> o <xref:System.Data.DataColumn.Caption%2A>. Quando si aggiunge a un <xref:System.Data.DataColumnCollection>, verrà generato un nome predefinito ("Column1", "Column2" e così via) se non è stato assegnato un nome per il <xref:System.Data.DataColumn.ColumnName%2A>.  
  
   
  
## Examples  
 L'esempio seguente crea un nuovo <xref:System.Data.DataColumn>, imposta le varie proprietà e lo aggiunge a un <xref:System.Data.DataColumnCollection> per il <xref:System.Data.DataTable> oggetto.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (columnName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="columnName">Stringa che rappresenta il nome della colonna da creare. Se impostato su <see langword="null" /> o su una stringa vuota (""), verrà assegnato un nome predefinito nel momento in cui viene aggiunto all'insieme delle colonne.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Data.DataColumn" />, come tipo string, utilizzando il nome di colonna specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, il nome specifico a una colonna diventa il <xref:System.Data.DataColumn.Caption%2A> valore della proprietà.  
  
   
  
## Examples  
 L'esempio seguente crea un nuovo <xref:System.Data.DataColumn> con un oggetto specificato <xref:System.Data.DataColumn.ColumnName%2A>.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName, Type dataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName, class System.Type dataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (columnName As String, dataType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName, Type ^ dataType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="dataType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="columnName">Stringa che rappresenta il nome della colonna da creare. Se impostato su <see langword="null" /> o su una stringa vuota (""), verrà assegnato un nome predefinito nel momento in cui viene aggiunto all'insieme delle colonne.</param>
        <param name="dataType">Proprietà <see cref="P:System.Data.DataColumn.DataType" /> supportata.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Data.DataColumn" /> utilizzando il nome di colonna e il tipo di dati specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio seguente crea un nuovo <xref:System.Data.DataColumn> con un oggetto specificato <xref:System.Data.DataColumn.ColumnName%2A> e <xref:System.Data.DataColumn.DataType%2A>.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Non è stato specificato alcun parametro <paramref name="dataType" />.</exception>
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName, Type dataType, string expr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName, class System.Type dataType, string expr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (columnName As String, dataType As Type, expr As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName, Type ^ dataType, System::String ^ expr);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="dataType" Type="System.Type" />
        <Parameter Name="expr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="columnName">Stringa che rappresenta il nome della colonna da creare. Se impostato su <see langword="null" /> o su una stringa vuota (""), verrà assegnato un nome predefinito nel momento in cui viene aggiunto all'insieme delle colonne.</param>
        <param name="dataType">Proprietà <see cref="P:System.Data.DataColumn.DataType" /> supportata.</param>
        <param name="expr">Espressione utilizzata per creare questa colonna. Per altre informazioni, vedere la proprietà <see cref="P:System.Data.DataColumn.Expression" />.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Data.DataColumn" /> con il nome, il tipo di dati e l'espressione specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene creata una colonna calcolata.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Non è stato specificato alcun parametro <paramref name="dataType" />.</exception>
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName, Type dataType, string expr, System.Data.MappingType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName, class System.Type dataType, string expr, valuetype System.Data.MappingType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName, Type ^ dataType, System::String ^ expr, System::Data::MappingType type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="dataType" Type="System.Type" />
        <Parameter Name="expr" Type="System.String" />
        <Parameter Name="type" Type="System.Data.MappingType" />
      </Parameters>
      <Docs>
        <param name="columnName">Stringa che rappresenta il nome della colonna da creare. Se impostato su <see langword="null" /> o su una stringa vuota (""), verrà assegnato un nome predefinito nel momento in cui viene aggiunto all'insieme delle colonne.</param>
        <param name="dataType">Proprietà <see cref="P:System.Data.DataColumn.DataType" /> supportata.</param>
        <param name="expr">Espressione utilizzata per creare questa colonna. Per altre informazioni, vedere la proprietà <see cref="P:System.Data.DataColumn.Expression" />.</param>
        <param name="type">Uno dei valori di <see cref="T:System.Data.MappingType" />.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Data.DataColumn" /> con il nome, il tipo di dati, l'espressione e il valore che determina se la colonna è un attributo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `type` argomento set di <xref:System.Data.DataColumn.ColumnMapping%2A> proprietà. Specifica la proprietà come un <xref:System.Data.DataColumn> viene mappato quando un <xref:System.Data.DataSet> viene trasformato in un documento XML. Ad esempio, se la colonna è denominata "fName" e contiene il valore è "Bob", e `type` è impostato su `MappingType.Attribute`, l'elemento XML sarà come segue:  
  
 \<Name fName = 'Bob'/>  
  
 Per ulteriori informazioni sulle modalità di mapping delle colonne per elementi o attributi, vedere il <xref:System.Data.DataColumn.ColumnMapping%2A> proprietà.  
  
   
  
## Examples  
 Nell'esempio seguente viene creata una colonna calcolata.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn4 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn4 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Non è stato specificato alcun parametro <paramref name="dataType" />.</exception>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.ColumnMapping" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName="AllowDBNull">
      <MemberSignature Language="C#" Value="public bool AllowDBNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDBNull" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AllowDBNull" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDBNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDBNull { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se i valori null sono consentiti in questa colonna per le righe che appartengono alla tabella.</summary>
        <value>
          <see langword="true" /> se sono consentiti valori null; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio seguente crea un nuovo <xref:System.Data.DataColumn> e imposta il relativo <xref:System.Data.DataColumn.AllowDBNull%2A> proprietà `true`.  
  
 [!code-csharp[Classic WebData DataColumn.AllowDBNull Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AllowDBNull Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AllowDBNull Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AllowDBNull Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.Unique" />
      </Docs>
    </Member>
    <Member MemberName="AutoIncrement">
      <MemberSignature Language="C#" Value="public bool AutoIncrement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoIncrement" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AutoIncrement" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoIncrement As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoIncrement { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se nella colonna viene incrementato automaticamente il valore della colonna per le nuove righe aggiunte alla tabella.</summary>
        <value>
          <see langword="true" /> se il valore della colonna viene incrementato automaticamente; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il tipo di questa colonna non è Int16, Int32 o Int64 quando questa proprietà è impostata, il <xref:System.Data.DataColumn.DataType%2A> proprietà è impostata forzatamente su Int32. Se si tratta di una colonna calcolata, viene generata un'eccezione. Il <xref:System.Data.DataColumn.Expression%2A> proprietà è impostata. Il valore incrementato viene utilizzato solo se il valore della riga per questa colonna, quando aggiunto all'insieme di colonne, è uguale al valore predefinito.  
  
 È possibile creare una nuova riga utilizzando il <xref:System.Data.DataRow.ItemArray%2A> proprietà la <xref:System.Data.DataRow> classe e passando una matrice di valori. Si tratta di un potenziale problema per una colonna con il relativo <xref:System.Data.DataColumn.AutoIncrement%2A> impostato su `true`, perché il relativo valore viene generato automaticamente. Utilizzare il <xref:System.Data.DataRow.ItemArray%2A> proprietà, posto `null` nella posizione della colonna nella matrice. Per ulteriori informazioni, vedere il <xref:System.Data.DataRow.ItemArray%2A> proprietà la <xref:System.Data.DataRow> classe.  
  
 Se il tipo della colonna è <xref:System.Data.SqlTypes.SqlInt16> o <xref:System.Data.SqlTypes.SqlInt32>, <xref:System.Data.DataColumn.AutoIncrement%2A> non funzionerà. Utilizzare invece Int16 o Int32.  
  
 Se il tipo della colonna è <xref:System.Data.SqlTypes.SqlInt64> o <xref:System.Data.SqlTypes.SqlDecimal>, <xref:System.Data.DataColumn.AutoIncrement%2A> funzionerà solo parzialmente. Utilizzare invece Int64 o decimale.  
  
 Quando il <xref:System.Data.DataColumn.AutoIncrementStep%2A> valore viene aggiunto al valore corrente, viene eliminato il controllo dell'overflow.  
  
   
  
## Examples  
 L'esempio seguente imposta il <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, e <xref:System.Data.DataColumn.AutoIncrementStep%2A> proprietà.  
  
 [!code-csharp[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La colonna è una colonna calcolata.</exception>
        <altmember cref="P:System.Data.DataColumn.AutoIncrementSeed" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrementStep" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
        <altmember cref="M:System.Data.DataTable.NewRow" />
      </Docs>
    </Member>
    <Member MemberName="AutoIncrementSeed">
      <MemberSignature Language="C#" Value="public long AutoIncrementSeed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 AutoIncrementSeed" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AutoIncrementSeed" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoIncrementSeed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long AutoIncrementSeed { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il valore iniziale di una colonna la cui proprietà <see cref="P:System.Data.DataColumn.AutoIncrement" /> è impostata su <see langword="true" />. Il valore predefinito è 0.</summary>
        <value>Valore iniziale della funzione <see cref="P:System.Data.DataColumn.AutoIncrement" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio seguente imposta il <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, e <xref:System.Data.DataColumn.AutoIncrementStep%2A> proprietà.  
  
 [!code-csharp[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrementStep" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
      </Docs>
    </Member>
    <Member MemberName="AutoIncrementStep">
      <MemberSignature Language="C#" Value="public long AutoIncrementStep { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 AutoIncrementStep" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AutoIncrementStep" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoIncrementStep As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long AutoIncrementStep { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'incremento utilizzato da una colonna con la relativa proprietà <see cref="P:System.Data.DataColumn.AutoIncrement" /> impostata su <see langword="true" />.</summary>
        <value>Numero in base al quale il valore della colonna viene incrementato automaticamente. Il valore predefinito è 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio seguente imposta il <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, e <xref:System.Data.DataColumn.AutoIncrementStep%2A> proprietà.  
  
 [!code-csharp[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il valore impostato è zero.</exception>
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrementSeed" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
      </Docs>
    </Member>
    <Member MemberName="Caption">
      <MemberSignature Language="C#" Value="public string Caption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Caption" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Caption" />
      <MemberSignature Language="VB.NET" Value="Public Property Caption As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Caption { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la didascalia per la colonna.</summary>
        <value>Didascalia della colonna. Se non impostata, restituisce il valore <see cref="P:System.Data.DataColumn.ColumnName" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare il <xref:System.Data.DataColumn.Caption%2A> proprietà per visualizzare un nome descrittivo per un <xref:System.Data.DataColumn>.  
  
   
  
## Examples  
 L'esempio seguente crea un nuovo <xref:System.Data.DataTable>. Quindi, aggiungere tre <xref:System.Data.DataColumn> oggetti in un <xref:System.Data.DataColumnCollection> e imposta il <xref:System.Data.DataColumn.Caption%2A> proprietà per ogni <xref:System.Data.DataColumn>.  
  
 [!code-csharp[Classic WebData DataColumn.Caption Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Caption Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Caption Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Caption Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
      </Docs>
    </Member>
    <Member MemberName="CheckNotAllowNull">
      <MemberSignature Language="C#" Value="protected internal void CheckNotAllowNull ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void CheckNotAllowNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.CheckNotAllowNull" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub CheckNotAllowNull ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void CheckNotAllowNull();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Questo membro supporta l'infrastruttura .NET Framework e non è possibile usarlo direttamente dal codice.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckUnique">
      <MemberSignature Language="C#" Value="protected void CheckUnique ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CheckUnique() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.CheckUnique" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CheckUnique ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void CheckUnique();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Questo membro supporta l'infrastruttura .NET Framework e non è possibile usarlo direttamente dal codice.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnMapping">
      <MemberSignature Language="C#" Value="public virtual System.Data.MappingType ColumnMapping { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MappingType ColumnMapping" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ColumnMapping" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ColumnMapping As MappingType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::MappingType ColumnMapping { System::Data::MappingType get(); void set(System::Data::MappingType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.MappingType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'oggetto <see cref="T:System.Data.MappingType" /> della colonna.</summary>
        <value>Uno dei valori di <see cref="T:System.Data.MappingType" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.DataColumn.ColumnMapping%2A> proprietà determina come un <xref:System.Data.DataColumn> viene mappato quando un <xref:System.Data.DataSet> viene salvato come un documento XML usando il <xref:System.Data.DataSet.WriteXml%2A> metodo.  
  
 Ad esempio, se un <xref:System.Data.DataColumn> viene denominato "customerID" e il relativo <xref:System.Data.DataColumn.ColumnMapping%2A> è impostata su `MappingType.Element`, il valore della colonna produrrà il seguente codice XML:  
  
```  
<Customers>  
 <customerID>ALFKI</customerID>  
......  
 </Customers>  
 <Orders>  
 <OrderID>12345</OrderID>  
 <customerID>ALFKI</customerID>  
......  
 </Orders>  
```  
  
 Tuttavia, se la stessa colonna è mappata a `MappingType.Attribute`, viene generato il codice XML seguente:  
  
```  
<Customers customerID="ALFKI"........more attributes.....>  
 <Order orderID="1234"....more attributes..../>  
 <Order orderID="1234"....more attributes..../>  
...... More orders for this customer  
 </Customers>  
```  
  
 Utilizzare il <xref:System.Data.DataColumn.%23ctor%2A> costruttore contenente il `type` argomento per specificare come il <xref:System.Data.DataColumn> viene mappato quando relativo <xref:System.Data.DataSet> viene trasformato in un documento XML.  
  
 Il <xref:System.Data.DataColumn.ColumnMapping%2A> proprietà corrisponde all'argomento del costruttore `type`.  
  
   
  
## Examples  
 L'esempio seguente imposta il <xref:System.Data.DataColumn.ColumnMapping%2A> proprietà del tipo della nuova <xref:System.Data.DataColumn>.  
  
 [!code-csharp[Classic WebData DataColumn.ColumnMapping Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnMapping Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ColumnMapping Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnMapping Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnName">
      <MemberSignature Language="C#" Value="public string ColumnName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ColumnName" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ColumnName" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ColumnName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome della colonna nell'insieme <see cref="T:System.Data.DataColumnCollection" />.</summary>
        <value>Nome della colonna.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un <xref:System.Data.DataColumn> viene creato, non ha alcun <xref:System.Data.DataColumn.ColumnName%2A> valore. Tuttavia, quando il <xref:System.Data.DataColumn> viene aggiunto a un <xref:System.Data.DataColumnCollection> per un <xref:System.Data.DataTable> dell'oggetto, gli viene assegnato un nome predefinito ("Column1", "Column2" e così via).  
  
 Per impostazione predefinita, il <xref:System.Data.DataColumn.Caption%2A> valore viene impostato il <xref:System.Data.DataColumn.ColumnName%2A> valore.  
  
   
  
## Examples  
 L'esempio seguente viene ottenuta la <xref:System.Data.DataColumn.ColumnName%2A> per ogni colonna in ogni tabella in un <xref:System.Data.DataSet>. Nell'esempio viene inoltre illustrato come creare un <xref:System.Data.DataColumn> con un nuovo <xref:System.Data.DataColumn.ColumnName%2A>.  
  
 [!code-csharp[Classic WebData DataColumn.ColumnName Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ColumnName Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La proprietà è impostata su <see langword="null" /> o su una stringa vuota e la colonna appartiene a un insieme.</exception>
        <exception cref="T:System.Data.DuplicateNameException">Nell'insieme è già presente una colonna con lo stesso nome. Nel confronto tra nomi non viene applicata la distinzione tra maiuscole e minuscole.</exception>
        <altmember cref="P:System.Data.DataColumn.Caption" />
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public Type DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DataType" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ DataType { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Data.ColumnTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il tipo di dati memorizzato nella colonna.</summary>
        <value>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di dati della colonna.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'impostazione di <xref:System.Data.DataColumn.DataType%2A> è molto importante per garantire la corretta creazione e aggiornamento dei dati in un'origine dati.  
  
 Il <xref:System.Data.DataColumn.DataType%2A> proprietà supporta i tipi di dati di base .NET Framework seguenti:  
  
-   <xref:System.Boolean>  
  
-   <xref:System.Byte>  
  
-   <xref:System.Char>  
  
-   <xref:System.DateTime>  
  
-   <xref:System.Decimal>  
  
-   <xref:System.Double>  
  
-   <xref:System.Guid>  
  
-   <xref:System.Int16>  
  
-   <xref:System.Int32>  
  
-   <xref:System.Int64>  
  
-   <xref:System.SByte>  
  
-   <xref:System.Single>  
  
-   <xref:System.String>  
  
-   <xref:System.TimeSpan>  
  
-   <xref:System.UInt16>  
  
-   <xref:System.UInt32>  
  
-   <xref:System.UInt64>  
  
 nonché il tipo di matrice seguenti:  
  
-   `Byte[]`  
  
 Quando si modifica questa proprietà dopo la colonna è iniziata l'archiviazione dei dati, viene generata un'eccezione.  
  
 Se <xref:System.Data.DataColumn.AutoIncrement%2A> è impostato su `true` prima di impostare il <xref:System.Data.DataColumn.DataType%2A> proprietà e si tenta di impostare il tipo su un valore diverso da un tipo integer, viene generata un'eccezione.  
  
> [!NOTE]
>  Una colonna di tipo di dati `Byte[]` richiede un trattamento speciale in alcuni casi poiché, a differenza dei tipi di dati .NET Framework di base, è un tipo di dati di riferimento. Se una colonna di tipo di dati `Byte[]` viene utilizzato come un <xref:System.Data.DataTable.PrimaryKey%2A>, o come un <xref:System.Data.DataView.Sort%2A> o <xref:System.Data.DataView.RowFilter%2A> chiave per un <xref:System.Data.DataView>, qualsiasi modifica al valore della colonna deve implicare l'assegnazione di `Byte[]` valore della colonna per un istanziatoseparatamente`Byte[]` oggetto. Questa assegnazione è necessario attivare l'aggiornamento degli indici interni utilizzata da operazioni di ordinamento, filtro e operazioni relative alla chiave primarie. Questo comportamento è illustrato nell'esempio seguente:  
  
```  
byte[] columnValue = (byte[])myDataTable.Rows[0][0];  
byte[] newValue = (byte[])columnValue.Clone();  
newValue[1] = 2;  
myDataTable.Rows[0][0] = newValue;  
```  
  
> [!NOTE]
>  Sebbene sia possibile definire una colonna con tipo di dati diverso da tipi di dati .NET Framework di base e `Byte[]`, tale colonna verrà considerata come un tipo definito dall'utente, soggetto alle seguenti limitazioni di utilizzo. (Per ulteriori informazioni sui tipi definiti dall'utente, vedere [Creating and User-Defined Type](http://msdn.microsoft.com/library/ec0266d2-7e5b-47e4-938a-85ac9d04fa40).)  
  
-   La colonna non può essere parte di un <xref:System.Data.DataView.RowFilter%2A> o <xref:System.Data.DataTable.Select%2A> espressione.  
  
-   Se la colonna viene utilizzata come un <xref:System.Data.DataTable.PrimaryKey%2A>, o come un <xref:System.Data.DataView.Sort%2A> o per un <xref:System.Data.DataView>, deve essere considerata come un campo non modificabile; i dati della colonna non devono essere modificati dopo che è stato aggiunto alla tabella.  
  
-   Il relativo <xref:System.Data.DataColumn.ColumnMapping%2A> può essere impostato solo su `MappingType.Element`.  
  
-   La classe che implementa il tipo di dati della colonna deve essere contrassegnati con il <xref:System.SerializableAttribute>, e se necessario, implementare il <xref:System.Runtime.Serialization.ISerializable> o <xref:System.Xml.Serialization.IXmlSerializable> interfaccia.  
  
-   Supporto per il rilevamento delle modifiche è limitato. Utilizzare il <xref:System.Data.DataTable> meccanismo di rilevamento modifiche della classe, la classe che implementa il tipo di dati della colonna deve implementare il <xref:System.ComponentModel.IChangeTracking> interfaccia o assumere la responsabilità per informare il <xref:System.Data.DataRow> quando il valore di colonna è stato stato modificato, chiamando <xref:System.Data.DataRow.SetModified%2A> sulla riga o l'assegnazione dell'oggetto di valore di colonna a un oggetto valore colonna separatamente istanziato.  
  
   
  
## Examples  
 Nell'esempio seguente vengono aggiunte colonne di diversi tipi di dati da un <xref:System.Data.DataTable>e viene aggiunta una riga alla tabella.  
  
 [!code-csharp[Classic WebData DataColumn.DataType Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataType Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataType Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nella colonna sono già memorizzati i dati.</exception>
        <altmember cref="T:System.Type" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <Member MemberName="DateTimeMode">
      <MemberSignature Language="C#" Value="public System.Data.DataSetDateTime DateTimeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.DataSetDateTime DateTimeMode" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.DateTimeMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DateTimeMode As DataSetDateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataSetDateTime DateTimeMode { System::Data::DataSetDateTime get(); void set(System::Data::DataSetDateTime value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataSetDateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta <see langword="DateTimeMode" /> per la colonna.</summary>
        <value>Enumerazione <see cref="T:System.Data.DataSetDateTime" /> per la colonna specificata.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.DataColumn.DateTimeMode%2A> non può essere modificato dopo l'aggiungono di righe per un <xref:System.Data.DataColumn>, ad eccezione di modifica da <xref:System.Data.DataSetDateTime.Unspecified> e <xref:System.Data.DataSetDateTime.UnspecifiedLocal> o viceversa. La modifica da `UnspecifiedLocal` a `Unspecified` e viceversa è consentita in quanto la differenza tra queste due opzioni solo durante la serializzazione e non influisce sull'archiviazione.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultValue">
      <MemberSignature Language="C#" Value="public object DefaultValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.DefaultValue" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DefaultValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Data.DefaultValueTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il valore predefinito della colonna durante la creazione di nuove righe.</summary>
        <value>Valore appropriato alla proprietà <see cref="P:System.Data.DataColumn.DataType" /> della colonna.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un valore predefinito è il valore assegnato alla colonna automaticamente quando un <xref:System.Data.DataRow> viene creato (ad esempio, la data e l'ora di <xref:System.Data.DataRow> è stato creato.  
  
 Quando <xref:System.Data.DataColumn.AutoIncrement%2A> è impostata su true, non può esistere alcun valore predefinito.  
  
 È possibile creare una nuova riga utilizzando il <xref:System.Data.DataRow.ItemArray%2A> proprietà la <xref:System.Data.DataRow> classe e passando il metodo di una matrice di valori. Si tratta di un potenziale problema per una colonna con un valore predefinito perché il relativo valore viene generato automaticamente. Utilizzare il <xref:System.Data.DataRow.ItemArray%2A> proprietà con una colonna, posizionare `null` nella posizione della colonna nella matrice. Per altre informazioni, vedere la proprietà <xref:System.Data.DataRow.ItemArray%2A>.  
  
   
  
## Examples  
 L'esempio seguente crea diverse <xref:System.Data.DataColumn> valori a ogni colonna predefiniti di oggetti che presentano tipi di dati diversi e imposta appropriato.  
  
 [!code-vb[Classic WebData DataColumn.DefaultValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DefaultValue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Quando si aggiunge una riga, il valore predefinito non è un'istanza del tipo di dati della colonna.</exception>
        <altmember cref="P:System.Data.DataColumn.DataType" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
        <altmember cref="T:System.Data.UniqueConstraint" />
      </Docs>
    </Member>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public string Expression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Expression" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Expression" />
      <MemberSignature Language="VB.NET" Value="Public Property Expression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Expression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'espressione utilizzata per filtrare righe, calcolare i valori di una colonna o creare una colonna aggregata.</summary>
        <value>Espressione per calcolare il valore di una colonna o creare una colonna aggregata. Il tipo restituito di un'espressione è determinato dalla proprietà <see cref="P:System.Data.DataColumn.DataType" /> della colonna.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uno degli utilizzi di <xref:System.Data.DataColumn.Expression%2A> proprietà consiste nel creare colonne calcolate. Ad esempio, per calcolare un valore di imposta, il prezzo unitario viene moltiplicato per un'aliquota di un'area specifica. Poiché aliquote variare in base al paese, sarebbe Impossibile inserire una singola aliquota di imposta in una colonna. al contrario, il valore viene calcolato usando la <xref:System.Data.DataColumn.Expression%2A> proprietà, come illustrato nel codice Visual Basic nella sezione seguente:  
  
 DataSet1.Tables("Products").Columns("tax").Expression = "UnitPrice * 0.086"  
  
 Un altro utilizzo consiste nel creare un'aggregazione di colonne. Simile a un valore calcolato, un aggregato esegue un'operazione in base al set completo di righe nel <xref:System.Data.DataTable>. Un semplice esempio è per contare il numero di righe restituite nel set. Si tratta del metodo che consente di contare il numero di transazioni completate da un agente specifico, come mostrato nel codice Visual Basic:  
  
```  
DataSet1.Tables("Orders").Columns("OrderCount").Expression = "Count(OrderID)"  
```  
  
## <a name="expression-syntax"></a>Sintassi delle espressioni  
 Quando si crea un'espressione, utilizzare il <xref:System.Data.DataColumn.ColumnName%2A> proprietà per fare riferimento alle colonne. Ad esempio, se il <xref:System.Data.DataColumn.ColumnName%2A> per una colonna è "UnitPrice" e "Quantity" un altro, l'espressione potrebbe essere come segue:  
  
 "UnitPrice * Quantity"  
  
> [!NOTE]
>  Se una colonna viene utilizzata in un'espressione, l'espressione viene definita la presenza di una dipendenza in tale colonna. Se una colonna dipendente viene rinominata o rimosso, viene generata alcuna eccezione. Quando si accede alla colonna dell'espressione di ora risulta interrotta, verrà generata un'eccezione.  
  
 Quando si crea un'espressione di filtro, racchiudere le stringhe tra virgolette singole:  
  
 "LastName = 'Jones'"  
  
 Se un nome di colonna contiene caratteri non alfanumerici o inizia con una cifra o (soggetti) corrisponde a una delle seguenti parole riservate, richiede una gestione speciale, come descritto nei paragrafi seguenti.  
  
 E  
  
 Tra  
  
 Figlio  
  
 False  
  
 In  
  
 È  
  
 Like  
  
 Not  
  
 Null  
  
 Or  
  
 Padre  
  
 True  
  
 Se un nome di colonna soddisfa una delle condizioni precedenti, deve essere inclusa nelle parentesi quadre o "'" virgolette (accento grave). Ad esempio, per utilizzare una colonna denominata "Column #" in un'espressione, si scriverebbe entrambi "[Column #]":  
  
 Totale * [Column #]  
  
 o "\`colonna #'":  
  
 Totale * \`colonna #'  
  
 Se il nome della colonna è racchiuso tra parentesi quadre, qualsiasi ']' e '\\' caratteri (ma non altri caratteri) in essa devono essere precedute da essi con la barra rovesciata ("\\") caratteri. Se il nome della colonna è racchiuso tra accenti gravi non deve contenere alcun carattere di accento grave in essa contenuti. Ad esempio, una colonna denominata "Column []\\" verrebbe scritto:  
  
 Totale * [colonna [\\]\\\\]  
  
 oppure  
  
 Totale * \`Column]\\`  
  
## <a name="user-defined-values"></a>Valori definiti dall'utente  
 I valori definiti dall'utente possono essere utilizzati in espressioni da confrontare con i valori di colonna. I valori stringa devono essere racchiusi tra virgolette singole (e ogni carattere di virgoletta singola in un valore stringa con caratteri di escape da un'altra virgoletta singola). I valori di data devono essere racchiusi tra segni di cancelletto (#) o virgolette singole (') in base al provider di dati. Numeri decimali e la notazione scientifica sono consentite per i valori numerici. Ad esempio:  
  
 "FirstName = 'John'"  
  
 "Price < = 50,00"  
  
 "Data di nascita < # #1/31/82"  
  
 Per le colonne che contengono valori di enumerazione, il cast del valore a un tipo di dati integer. Ad esempio:  
  
 "EnumColumn = 5"  
  
## <a name="parsing-literal-expressions"></a>Analisi di espressioni letterali  
 Tutte le espressioni letterali devono essere espressi nelle impostazioni locali delle impostazioni cultura invarianti. Quando `DataSet` analizza e converte le espressioni letterali, utilizza sempre le impostazioni cultura invarianti, non le impostazioni cultura correnti.  
  
 Valori letterali stringa vengono identificati quando sono presenti virgolette che racchiudono il valore. Ad esempio:  
  
 'John'  
  
 `Boolean` valori letterali sono true e false. essi non sono racchiusi tra virgolette nelle espressioni.  
  
 `Integer` valori letterali [+-]? [0-9] + vengono considerati come `System.Int32`, `System.Int64` o `System.Double`. `System.Double` possibile perdita di precisione in base è il numero di dimensioni. Ad esempio, se il numero nel valore letterale è 2147483650, `DataSet` tenterà innanzitutto di analizzare il numero come un `Int32`. Ciò non avrà esito positivo perché il numero è troppo grande. In questo caso `DataSet` analizzerà il numero come un `Int64`, che avrà esito positivo. Se il valore letterale è un numero maggiore del valore massimo di un oggetto Int64, `DataSet` analizza il valore letterale con `Double`.  
  
 I valori letterali reali utilizzando la notazione scientifica, ad esempio 4.42372 e-30, vengono esaminati mediante `System.Double`.  
  
 Vengono considerati valori letterali reali senza la notazione scientifica, ma con un separatore decimale, `System.Decimal`. Se il numero supera i valori massimi o minimi supportati da `System.Decimal`, viene analizzato come un `System.Double`. Ad esempio:  
  
 142526.144524 verrà convertito in un `Decimal`.  
  
 345262.78036719560925667 verrà considerato un `Double`.  
  
## <a name="operators"></a>Operatori  
 È consentita la concatenazione utilizzando booleani AND, OR, operatori e NOT. È possibile utilizzare le parentesi per raggruppare le clausole e forzare la precedenza. L'operatore AND ha la precedenza sugli altri operatori. Ad esempio:  
  
 (LastName = 'Smith' OR LastName = 'Jones') Nome e cognome = 'John'  
  
 Quando si creano espressioni di confronto, sono consentiti gli operatori seguenti:  
  
 \<  
  
 >  
  
 \<=  
  
 >=  
  
 <>  
  
 =  
  
 IN  
  
 LIKE  
  
 Nelle espressioni sono inoltre supportati gli operatori aritmetici seguenti:  
  
 \+ (aggiunta)  
  
 \- (sottrazione)  
  
 \* (moltiplicazione)  
  
 / (divisione)  
  
 % (modulo)  
  
## <a name="string-operators"></a>Operatori di stringa  
 Per concatenare una stringa, utilizzare il carattere +. Il valore di <xref:System.Data.DataSet.CaseSensitive%2A> proprietà del <xref:System.Data.DataSet> classe determina se i confronti di stringhe tra maiuscole e minuscole. Tuttavia, è possibile eseguire l'override di tale valore con il <xref:System.Data.DataTable.CaseSensitive%2A> proprietà del <xref:System.Data.DataTable> classe.  
  
## <a name="wildcard-characters"></a>Caratteri jolly  
 Sia il * e % possono essere utilizzate indifferentemente per i caratteri jolly in un confronto LIKE. Se la stringa in una clausola LIKE contiene un * o %, tali caratteri devono essere racchiuso tra parentesi quadre ([]). Se una parentesi quadra nella clausola, ogni carattere di parentesi quadra deve essere racchiuso tra parentesi (ad esempio [] o []]). Un carattere jolly è consentito all'inizio e alla fine di un criterio, o alla fine di un modello o all'inizio di un modello. Ad esempio:  
  
 "ItemName come ' * prodotto\*'"  
  
 "ItemName come ' * prodotto '"  
  
 "ItemName come 'prodotto *'"  
  
 Caratteri jolly non sono consentiti all'interno di una stringa. Ad esempio, ' te * xt' non è consentito.  
  
## <a name="parentchild-relation-referencing"></a>Riferimenti a relazioni padre/figlio  
 In un'espressione è possibile fare riferimento a una tabella padre anteponendo al nome della colonna con `Parent`. Ad esempio, il `Parent.Price` fa riferimento alla colonna della tabella padre denominata `Price`.  
  
 Quando un elemento figlio ha più di una riga padre, utilizzare Parent (RelationName). Nome di colonna. Ad esempio, il Parent (RelationName). Prezzo fa riferimento a colonna della tabella padre denominata Price tramite la relazione.  
  
 In un'espressione è possibile fare riferimento a una colonna in una tabella figlio anteponendo al nome della colonna con `Child`. Tuttavia, poiché le relazioni figlio possono restituire più righe, è necessario includere il riferimento alla colonna figlio in una funzione di aggregazione. Ad esempio, `Sum(Child.Price)` restituisce la somma della colonna denominata `Price` nella tabella figlio.  
  
 Se una tabella dispone di più elementi figlio, la sintassi è: `Child(RelationName)`. Ad esempio, se una tabella dispone di due tabelle figlio denominate `Customers` e `Orders`e <xref:System.Data.DataRelation> oggetto è denominato `Customers2Orders`, il riferimento potrebbe essere come segue:  
  
 Avg(Child(Customers2Orders).Quantity)  
  
## <a name="aggregates"></a>Aggregati  
 Sono supportati i tipi di aggregazione seguenti:  
  
 SUM (somma)  
  
 Media (Media)  
  
 Min (minimo)  
  
 Max (massimo)  
  
 Count (conteggio)  
  
 StDev (deviazione statistica standard)  
  
 Var (varianza statistica).  
  
 Le aggregazioni vengono in genere eseguite insieme alle relazioni. Creare un'espressione di aggregazione utilizzando una delle funzioni elencate in precedenza e una colonna della tabella figlio come descritto in dettaglio nella riferimenti relazione padre/figlio illustrato in precedenza. Ad esempio:  
  
 Avg(Child.Price)  
  
 Avg(Child(Orders2Details).Price)  
  
 Una funzione di aggregazione possono essere eseguite anche in una singola tabella. Ad esempio, per creare un riepilogo delle figure in una colonna denominata "Price":  
  
 Sum(Price)  
  
> [!NOTE]
>  Se si utilizza una singola tabella per creare un'aggregazione, non vi sarà alcuna funzionalità di raggruppamento. Al contrario, tutte le righe Visualizza lo stesso valore nella colonna.  
  
 Se una tabella non contiene righe, le funzioni di aggregazione restituirà `null`.  
  
 Tipi di dati possono sempre essere determinati esaminando il <xref:System.Data.DataColumn.DataType%2A> proprietà di una colonna. È anche possibile convertire i tipi di dati tramite la funzione Convert, illustrata nella sezione seguente.  
  
 Un'aggregazione può essere applicata solo a una singola colonna e non altre espressioni possono essere utilizzate all'interno dell'aggregazione.  
  
## <a name="functions"></a>Funzioni  
 Sono supportate anche le funzioni seguenti:  
  
 `CONVERT`  
  
|||  
|-|-|  
|Descrizione|Converte una particolare espressione in un tipo .NET Framework specificata.|  
|Sintassi|Convertire (`expression`, `type`)|  
|Argomenti|`expression` : Espressione da convertire.<br /><br /> `type` -Il tipo di .NET Framework a cui verrà convertito il valore.|  
  
 Example: myDataColumn.Expression="Convert(total, 'System.Int32')"  
  
 Tutte le conversioni sono valide con le eccezioni seguenti: `Boolean` può essere assegnato a e da `Byte`, `SByte`, `Int16`, `Int32`, `Int64`, `UInt16`, `UInt32`, `UInt64`, `String` e se stesso. `Char` può essere assegnato a e da `Int32`, `UInt32`, `String`e se stesso. `DateTime` può essere assegnato a e da `String` e se stesso. `TimeSpan` può essere assegnato a e da `String` e se stesso.  
  
 `LEN`  
  
|||  
|-|-|  
|Descrizione|Ottiene la lunghezza di una stringa|  
|Sintassi|LEN(`expression`)|  
|Argomenti|`expression` -La stringa da valutare.|  
  
 Example: myDataColumn.Expression="Len(ItemName)"  
  
 `ISNULL`  
  
|||  
|-|-|  
|Descrizione|Controlla un'espressione e restituisce l'espressione controllata o un valore di sostituzione.|  
|Sintassi|ISNULL(`expression`, `replacementvalue`)|  
|Argomenti|`expression` -Espressione da controllare.<br /><br /> `replacementvalue` : Se l'espressione è `null`, `replacementvalue` viene restituito.|  
  
 Esempio: myDataColumn.Expression="IsNull (prezzo, -1)"  
  
 `IIF`  
  
|||  
|-|-|  
|Descrizione|Ottiene uno dei due valori a seconda del risultato di un'espressione logica.|  
|Sintassi|IIF(`expr`, `truepart`, `falsepart`)|  
|Argomenti|`expr` -Espressione da valutare.<br /><br /> `truepart` -- Il valore da restituire se l'espressione è true.<br /><br /> `falsepart` -- Il valore da restituire se l'espressione è false.|  
  
 Esempio: myDataColumn.Expression = "IIF (totale > 1000 'costoso', 'Gentile')  
  
 `TRIM`  
  
|||  
|-|-|  
|Descrizione|Rimuove tutte iniziali e finali vuoto caratteri, ad esempio \r, \n, \t, ' '|  
|Sintassi|TRIM (`expression`)|  
|Argomenti|`expression` -Espressione da eliminare.|  
  
 `SUBSTRING`  
  
|||  
|-|-|  
|Descrizione|Ottiene una sottostringa di lunghezza specificata, partendo da un punto specificato nella stringa.|  
|Sintassi|SUBSTRING (`expression`, `start`, `length`)|  
|Argomenti|`expression` : Stringa di origine per la sottostringa.<br /><br /> `start` : Integer che specifica in cui inizia la sottostringa.<br /><br /> `length` : Integer che specifica la lunghezza della sottostringa.|  
  
 Esempio: myDataColumn.Expression = "SUBSTRING (telefono, 7, 8)"  
  
> [!NOTE]
>  È possibile reimpostare la <xref:System.Data.DataColumn.Expression%2A> proprietà mediante l'assegnazione di un valore null o una stringa vuota. Se un valore predefinito è impostato sulla colonna dell'espressione, tutte le righe riempite in precedenza vengono assegnate il valore di predefinito dopo il <xref:System.Data.DataColumn.Expression%2A> viene reimpostata.  
  
   
  
## Examples  
 L'esempio seguente crea tre colonne in un <xref:System.Data.DataTable>. Il secondo e la terza colonna contiene espressioni. il secondo calcola l'IVA utilizzando un'aliquota di imposta variabile e il terzo il risultato del calcolo viene aggiunto al valore della prima colonna. La tabella risultante viene visualizzata un <xref:System.Windows.Forms.DataGrid> controllo.  
  
 [!code-csharp[Classic WebData DataColumn.Expression Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Expression Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Expression Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Expression Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La proprietà <see cref="P:System.Data.DataColumn.AutoIncrement" /> o la proprietà <see cref="P:System.Data.DataColumn.Unique" /> è impostata su <see langword="true" />.</exception>
        <exception cref="T:System.FormatException">Quando si utilizza la funzione CONVERT, l'espressione viene valutata in una stringa, ma la stringa non contiene alcuna rappresentazione convertibile nel parametro del tipo.</exception>
        <exception cref="T:System.InvalidCastException">Quando si utilizza la funzione CONVERT, non è possibile eseguire il cast richiesto. Per informazioni dettagliate sui cast possibili, vedere la funzione Conversion nella sezione seguente.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Quando si utilizza la funzione SUBSTRING, l'argomento start non rientra nell'intervallo.  
  
 oppure  
  
 Quando si utilizza la funzione SUBSTRING, l'argomento length non rientra nell'intervallo.</exception>
        <exception cref="T:System.Exception">Quando si utilizza la funzione LEN o TRIM, l'espressione non viene valutata in una stringa. Sono incluse le espressioni che vengono valutate in <see cref="T:System.Char" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProperties">
      <MemberSignature Language="C#" Value="public System.Data.PropertyCollection ExtendedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.PropertyCollection ExtendedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ExtendedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExtendedProperties As PropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::PropertyCollection ^ ExtendedProperties { System::Data::PropertyCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.PropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'insieme di informazioni utente personalizzate associate a un oggetto <see cref="T:System.Data.DataColumn" />.</summary>
        <value>Insieme <see cref="T:System.Data.PropertyCollection" /> di informazioni personalizzate.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.DataColumn.ExtendedProperties%2A> proprietà consente di archiviare informazioni personalizzate con l'oggetto. Ad esempio, è possibile archiviare un tempo quando i dati devono essere aggiornati.  
  
 Proprietà estese devono essere di tipo <xref:System.String>. Le proprietà che non sono di tipo <xref:System.String> non vengono mantenuti quando il <xref:System.Data.DataColumn> è scritto in formato XML.  
  
   
  
## Examples  
 L'esempio seguente aggiunge una proprietà personalizzata per il <xref:System.Data.PropertyCollection> restituito dal <xref:System.Data.DataColumn.ExtendedProperties%2A> proprietà. Nel secondo esempio viene recuperata la proprietà personalizzata.  
  
 [!code-csharp[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.PropertyCollection" />
      </Docs>
    </Member>
    <Member MemberName="MaxLength">
      <MemberSignature Language="C#" Value="public int MaxLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLength" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.MaxLength" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxLength { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la lunghezza massima di una colonna di testo.</summary>
        <value>Lunghezza massima della colonna in caratteri. Se per la colonna non viene impostata una lunghezza massima, il valore sarà –1 (impostazione predefinita).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.DataColumn.MaxLength%2A> proprietà viene ignorata per le colonne non di testo. Oggetto <xref:System.ArgumentException> eccezione viene generata se si assegna <xref:System.Data.DataColumn.MaxLength%2A> a una colonna non di tipo stringa.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta lo spazio dei nomi della classe <see cref="T:System.Data.DataColumn" />.</summary>
        <value>Spazio dei nomi di <see cref="T:System.Data.DataColumn" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.DataColumn.Namespace%2A> proprietà viene utilizzata durante la lettura e scrittura di un XML documento in un <xref:System.Data.DataTable> nel <xref:System.Data.DataSet> utilizzando il <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, o <xref:System.Data.DataSet.WriteXmlSchema%2A> metodi.  
  
 Lo spazio dei nomi di un documento XML viene utilizzato per definire l'ambito di attributi XML e gli elementi durante la lettura in un <xref:System.Data.DataSet>. Ad esempio, un <xref:System.Data.DataSet> contiene uno schema letto da un documento con lo spazio dei nomi "myCompany" e viene effettuato un tentativo di leggere i dati (con il <xref:System.Data.DataSet.ReadXml%2A> metodo) da un documento con lo spazio dei nomi "theirCompany". Tutti i dati che non corrispondano allo schema esistente verranno ignorati.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nello spazio dei nomi sono già disponibili dati.</exception>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanging(class System.ComponentModel.PropertyChangedEventArgs pcevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanging (pcevent As PropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanging(System::ComponentModel::PropertyChangedEventArgs ^ pcevent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcevent" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="pcevent">Riferimento del parametro.</param>
        <summary>Questo membro supporta l'infrastruttura .NET Framework e non è possibile usarlo direttamente dal codice.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ordinal">
      <MemberSignature Language="C#" Value="public int Ordinal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Ordinal" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Ordinal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ordinal As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Ordinal { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la posizione in base zero della colonna nella raccolta <see cref="T:System.Data.DataColumnCollection" />.</summary>
        <value>Posizione della colonna. Ottiene -1 se la colonna non è un membro di un insieme.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente restituisce il tipo di dati, nome e numero ordinale di colonna di una colonna.  
  
 [!code-csharp[Classic WebData DataColumn.Ordinal Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Ordinal Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Ordinal Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Ordinal Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public string Prefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Prefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un prefisso XML che rappresenta l'alias dello spazio dei nomi della classe <see cref="T:System.Data.DataTable" />.</summary>
        <value>Prefisso XML per lo spazio dei nomi della classe <see cref="T:System.Data.DataTable" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.DataTable.Prefix%2A> è utilizzata in un documento XML per identificare gli elementi che appartengono allo spazio dei nomi per un <xref:System.Data.DataSet> oggetto (secondo l'impostazione di <xref:System.Data.DataSet.Namespace%2A> proprietà).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePropertyChanging">
      <MemberSignature Language="C#" Value="protected internal void RaisePropertyChanging (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RaisePropertyChanging(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.RaisePropertyChanging(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RaisePropertyChanging (name As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RaisePropertyChanging(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Riferimento del parametro.</param>
        <summary>Questo membro supporta l'infrastruttura .NET Framework e non è possibile usarlo direttamente dal codice.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se la colonna consente modifiche una volta che la riga è stata aggiunta alla tabella.</summary>
        <value>
          <see langword="true" /> se la colonna è in sola lettura. In caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene creato un <xref:System.Data.DataColumn> e imposta il relativo <xref:System.Data.DataColumn.ReadOnly%2A> proprietà `true`.  
  
 [!code-csharp[Classic WebData DataColumn.ReadOnly Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ReadOnly Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ReadOnly Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ReadOnly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La proprietà viene impostata su <see langword="false" /> in una colonna calcolata.</exception>
        <altmember cref="P:System.Data.DataColumn.Unique" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
      </Docs>
    </Member>
    <Member MemberName="SetOrdinal">
      <MemberSignature Language="C#" Value="public void SetOrdinal (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOrdinal(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.SetOrdinal(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOrdinal (ordinal As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOrdinal(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Ordinale specificato.</param>
        <summary>Modifica l'ordinale o la posizione della classe <see cref="T:System.Data.DataColumn" /> nell'ordinale o nella posizione specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Modifica l'ordinale o la posizione della classe <xref:System.Data.DataColumn> nell'ordinale o nella posizione specificati. Se l'ordinale è minore di 0 o maggiore del numero di colonne, ovvero 1 (oltre il numero ordinale dell'ultima colonna) esistenti quindi un oggetto non valido <xref:System.ArgumentException> viene generata un'eccezione.  
  
 Quando si modifica l'ordinale di una colonna, la colonna viene spostata nella nuova posizione nella raccolta di colonne. Tutte le colonne tra il numero ordinale precedente e nuovo verranno rinumerate per regolare numero ordinale di una colonna nuova.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="public System.Data.DataTable Table { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataTable Table" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Table" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Table As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataTable ^ Table { System::Data::DataTable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Data.DataTable" /> a cui appartiene la colonna.</summary>
        <value>Oggetto <see cref="T:System.Data.DataTable" /> a cui appartiene l'oggetto <see cref="T:System.Data.DataColumn" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene restituita la tabella padre di un <xref:System.Data.DataColumn> tramite il relativo <xref:System.Data.DataColumn.Table%2A> proprietà.  
  
 [!code-csharp[Classic WebData DataColumn.Table Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Table Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Table Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Table Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataTable" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ottiene la proprietà <see cref="P:System.Data.DataColumn.Expression" /> della colonna, se disponibile.</summary>
        <returns>Valore della proprietà <see cref="P:System.Data.DataColumn.Expression" />, se la proprietà è impostata; in caso contrario, proprietà <see cref="P:System.Data.DataColumn.ColumnName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio seguente usa il <xref:System.Data.DataColumn.ToString%2A> proprietà per restituire la stringa predefinita di ogni membro di una raccolta di <xref:System.Data.DataColumn> oggetti.  
  
 [!code-csharp[Classic WebData DataColumn.ToString Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ToString Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ToString Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ToString Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
      </Docs>
    </Member>
    <Member MemberName="Unique">
      <MemberSignature Language="C#" Value="public bool Unique { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Unique" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Unique" />
      <MemberSignature Language="VB.NET" Value="Public Property Unique As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Unique { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se i valori di ciascuna riga della colonna devono essere univoci.</summary>
        <value>
          <see langword="true" /> se il valore deve essere univoco; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Non appena questa proprietà viene modificata da false a true, verrà creato un vincolo univoco in questa colonna per assicurarsi che i valori siano univoci.  
  
   
  
## Examples  
 Nell'esempio seguente crea nuovi <xref:System.Data.DataColumn>, imposta le proprietà e lo aggiunge alla raccolta di colonne di una tabella.  
  
 [!code-csharp[Classic WebData DataColumn.Unique Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Unique Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Unique Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Unique Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La colonna è una colonna calcolata.</exception>
        <altmember cref="P:System.Data.DataColumn.AllowDBNull" />
        <altmember cref="T:System.Data.UniqueConstraint" />
        <altmember cref="P:System.Data.DataTable.Constraints" />
      </Docs>
    </Member>
  </Members>
</Type>