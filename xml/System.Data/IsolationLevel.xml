<Type Name="IsolationLevel" FullName="System.Data.IsolationLevel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fcf9de84f8217ebb2ca027402a2cd2578d3bcafc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum IsolationLevel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed IsolationLevel extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Data.IsolationLevel" />
  <TypeSignature Language="VB.NET" Value="Public Enum IsolationLevel" />
  <TypeSignature Language="C++ CLI" Value="public enum class IsolationLevel" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
      <span data-ttu-id="51e4c-101">Specifica il comportamento di blocco della transazione per la connessione.</span>
      <span class="sxs-lookup">
        <span data-stu-id="51e4c-101">Specifies the transaction locking behavior for the connection.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="51e4c-102">Il <xref:System.Data.IsolationLevel> valori vengono utilizzati da un provider di dati .NET Framework durante l'esecuzione di una transazione.</span><span class="sxs-lookup"><span data-stu-id="51e4c-102">The <xref:System.Data.IsolationLevel> values are used by a .NET Framework data provider when performing a transaction.</span></span>  
  
 <span data-ttu-id="51e4c-103">Il <xref:System.Data.IsolationLevel> rimane attiva finché non viene esplicitamente modificato, ma può essere modificata in qualsiasi momento.</span><span class="sxs-lookup"><span data-stu-id="51e4c-103">The <xref:System.Data.IsolationLevel> remains in effect until explicitly changed, but it can be changed at any time.</span></span> <span data-ttu-id="51e4c-104">Il nuovo valore viene utilizzato in fase di esecuzione, non in fase di analisi.</span><span class="sxs-lookup"><span data-stu-id="51e4c-104">The new value is used at execution time, not parse time.</span></span> <span data-ttu-id="51e4c-105">Se è stata modificata durante una transazione, il comportamento previsto del server consiste nell'applicare il nuovo livello di blocco a tutte le istruzioni rimanenti.</span><span class="sxs-lookup"><span data-stu-id="51e4c-105">If changed during a transaction, the expected behavior of the server is to apply the new locking level to all statements remaining.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="51e4c-106">Questa applicazione viene illustrato come utilizzare <xref:System.Data.IsolationLevel> in <xref:System.Data.Common.DbTransaction>.</span><span class="sxs-lookup"><span data-stu-id="51e4c-106">This application demonstrates how to use <xref:System.Data.IsolationLevel> in <xref:System.Data.Common.DbTransaction>.</span></span> <span data-ttu-id="51e4c-107">L'esempio verrà illustrato che dei comportamenti seguenti sono consentite in diversi livelli di isolamento:</span><span class="sxs-lookup"><span data-stu-id="51e4c-107">The sample will demonstrate which of the following behaviors are allowed in the different isolation levels:</span></span>  
  
-   <span data-ttu-id="51e4c-108">Letture dirty.</span><span class="sxs-lookup"><span data-stu-id="51e4c-108">Dirty reads.</span></span>  
  
-   <span data-ttu-id="51e4c-109">Letture non ripetibili.</span><span class="sxs-lookup"><span data-stu-id="51e4c-109">Non-repeatable reads.</span></span>  
  
-   <span data-ttu-id="51e4c-110">Righe fantasma.</span><span class="sxs-lookup"><span data-stu-id="51e4c-110">Phantoms.</span></span>  
  
 <span data-ttu-id="51e4c-111">Questa applicazione verrà eseguita in livelli di isolamento seguenti:</span><span class="sxs-lookup"><span data-stu-id="51e4c-111">This application will execute in the following isolation levels:</span></span>  
  
-   <span data-ttu-id="51e4c-112">ReadUncommitted</span><span class="sxs-lookup"><span data-stu-id="51e4c-112">ReadUncommitted</span></span>  
  
-   <span data-ttu-id="51e4c-113">ReadCommitted</span><span class="sxs-lookup"><span data-stu-id="51e4c-113">ReadCommitted</span></span>  
  
-   <span data-ttu-id="51e4c-114">RepeatableRead</span><span class="sxs-lookup"><span data-stu-id="51e4c-114">RepeatableRead</span></span>  
  
-   <span data-ttu-id="51e4c-115">Serializzabile</span><span class="sxs-lookup"><span data-stu-id="51e4c-115">Serializable</span></span>  
  
-   <span data-ttu-id="51e4c-116">Snapshot</span><span class="sxs-lookup"><span data-stu-id="51e4c-116">Snapshot</span></span>  
  
 <span data-ttu-id="51e4c-117">La classe PhantomReadThreads illustra se la transazione specifica consente il comportamento di lettura fantasma.</span><span class="sxs-lookup"><span data-stu-id="51e4c-117">The PhantomReadThreads class demonstrates if the specific transaction allows the Phantom Read behavior.</span></span> <span data-ttu-id="51e4c-118">Se la transazione consente il comportamento, i thread funzionerà nell'ordine seguente:</span><span class="sxs-lookup"><span data-stu-id="51e4c-118">If the transaction allows the behavior, the threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="51e4c-119">Nel primo thread, selezionare il products(All).</span><span class="sxs-lookup"><span data-stu-id="51e4c-119">In first thread, select the products(All).</span></span>  
  
-   <span data-ttu-id="51e4c-120">Nel secondo thread, inserire un nuovo prodotto.</span><span class="sxs-lookup"><span data-stu-id="51e4c-120">In the second thread, insert a new product.</span></span>  
  
-   <span data-ttu-id="51e4c-121">Eseguire il commit della transazione nel secondo thread.</span><span class="sxs-lookup"><span data-stu-id="51e4c-121">Commit the transaction in second thread.</span></span>  
  
-   <span data-ttu-id="51e4c-122">Selezionare i prodotti di nuovo.</span><span class="sxs-lookup"><span data-stu-id="51e4c-122">Select the products again.</span></span>  
  
-   <span data-ttu-id="51e4c-123">Eseguire il commit della transazione nel primo thread.</span><span class="sxs-lookup"><span data-stu-id="51e4c-123">Commit the transaction in first thread.</span></span>  
  
 <span data-ttu-id="51e4c-124">Se la transazione consente il comportamento, le due operazioni Select otterranno i risultati diversi.</span><span class="sxs-lookup"><span data-stu-id="51e4c-124">If the transaction allows the behavior, the two Select operations will get the different results.</span></span>  
  
 <span data-ttu-id="51e4c-125">La classe NonrepeatableReadThreads illustra se la transazione specifica consente il comportamento di lettura non ripetibile.</span><span class="sxs-lookup"><span data-stu-id="51e4c-125">The NonrepeatableReadThreads class demonstrates if the specific transaction allows the Nonrepeatable Read behavior.</span></span> <span data-ttu-id="51e4c-126">Se la transazione consente il comportamento, i thread funzionerà nell'ordine seguente:</span><span class="sxs-lookup"><span data-stu-id="51e4c-126">If the transaction allows the behavior, the threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="51e4c-127">Nel primo thread, selezionare il product(ProductId=1).</span><span class="sxs-lookup"><span data-stu-id="51e4c-127">In first thread, select the product(ProductId=1).</span></span>  
  
-   <span data-ttu-id="51e4c-128">Nel secondo thread, aggiornare la quantità value(ProductId=1).</span><span class="sxs-lookup"><span data-stu-id="51e4c-128">In the second thread, update the Quantity value(ProductId=1).</span></span>  
  
-   <span data-ttu-id="51e4c-129">Eseguire il commit della transazione nel secondo thread.</span><span class="sxs-lookup"><span data-stu-id="51e4c-129">Commit the transaction in second thread.</span></span>  
  
-   <span data-ttu-id="51e4c-130">Selezionare di nuovo il prodotto.</span><span class="sxs-lookup"><span data-stu-id="51e4c-130">Select the product again.</span></span>  
  
-   <span data-ttu-id="51e4c-131">Eseguire il commit della transazione nel primo thread.</span><span class="sxs-lookup"><span data-stu-id="51e4c-131">Commit the transaction in first thread.</span></span>  
  
 <span data-ttu-id="51e4c-132">Se la transazione consente il comportamento, le due operazioni Select otterranno i risultati diversi.</span><span class="sxs-lookup"><span data-stu-id="51e4c-132">If the transaction allows the behavior, the two Select operations will get the different results.</span></span>  
  
 <span data-ttu-id="51e4c-133">La classe ExchangeValuesThreads viene illustrata la differenza tra la transazione Serializable e Snapshot.</span><span class="sxs-lookup"><span data-stu-id="51e4c-133">The ExchangeValuesThreads class demonstrates the difference between the Serializable and Snapshot transaction.</span></span> <span data-ttu-id="51e4c-134">Per la transazione serializzabile, thread funzionerà nell'ordine seguente:</span><span class="sxs-lookup"><span data-stu-id="51e4c-134">For the Serializable transaction, threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="51e4c-135">Nel primo thread, ottenere il prezzo di product(ProductId=2) e archivio nella variabile.</span><span class="sxs-lookup"><span data-stu-id="51e4c-135">In first thread, get the Price of product(ProductId=2) and store in the variable.</span></span>  
  
-   <span data-ttu-id="51e4c-136">Nel primo thread, aggiornare il prezzo di product(ProductId=1) con il prezzo di product(ProductId=2).</span><span class="sxs-lookup"><span data-stu-id="51e4c-136">In first thread, update the Price of product(ProductId=1) with the price of product(ProductId=2).</span></span>  
  
-   <span data-ttu-id="51e4c-137">Eseguire il commit della transazione nel primo thread.</span><span class="sxs-lookup"><span data-stu-id="51e4c-137">Commit the transaction in first thread.</span></span>  
  
-   <span data-ttu-id="51e4c-138">Nel secondo thread, ottenere il prezzo di product(ProductId=1) e archivio nella variabile.</span><span class="sxs-lookup"><span data-stu-id="51e4c-138">In second thread, get the Price of product(ProductId=1) and store in the variable.</span></span>  
  
-   <span data-ttu-id="51e4c-139">Nel secondo thread, aggiornare il prezzo di product(ProductId=2) con il prezzo di product(ProductId=1).</span><span class="sxs-lookup"><span data-stu-id="51e4c-139">In second thread, update the Price of product(ProductId=2) with the price of product(ProductId=1).</span></span>  
  
-   <span data-ttu-id="51e4c-140">Eseguire il commit della transazione nel secondo thread.</span><span class="sxs-lookup"><span data-stu-id="51e4c-140">Commit the transaction in second thread.</span></span>  
  
 <span data-ttu-id="51e4c-141">Ora i valori del prezzo (ProductId = 1 e ProductId = 2) sono nello stesso come il prezzo di Product(ProductId=2) originale.</span><span class="sxs-lookup"><span data-stu-id="51e4c-141">Now the values of the Price(ProductId=1 and ProductId=2) are as same as the original Price of Product(ProductId=2).</span></span>  
  
 <span data-ttu-id="51e4c-142">Per la transazione Snapshot, thread funzionerà nell'ordine seguente:</span><span class="sxs-lookup"><span data-stu-id="51e4c-142">For the Snapshot transaction, threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="51e4c-143">Nel primo thread, ottenere il prezzo di product(ProductId=2) e archivio nella variabile;</span><span class="sxs-lookup"><span data-stu-id="51e4c-143">In first thread, get the Price of product(ProductId=2) and store in the variable;</span></span>  
  
-   <span data-ttu-id="51e4c-144">Nel primo thread, aggiornare il prezzo di product(ProductId=1) con il prezzo di product(ProductId=2).</span><span class="sxs-lookup"><span data-stu-id="51e4c-144">In first thread, update the Price of product(ProductId=1) with the price of product(ProductId=2).</span></span>  
  
-   <span data-ttu-id="51e4c-145">Nel secondo thread, ottenere il prezzo di product(ProductId=1) dallo snapshot e archiviare nella variabile.</span><span class="sxs-lookup"><span data-stu-id="51e4c-145">In second thread, get the Price of product(ProductId=1) from the snapshot and store in the variable.</span></span>  
  
-   <span data-ttu-id="51e4c-146">Nel secondo thread, aggiornare il prezzo di product(ProductId=2) con il prezzo di product(ProductId=1).</span><span class="sxs-lookup"><span data-stu-id="51e4c-146">In second thread, update the Price of product(ProductId=2) with the price of product(ProductId=1).</span></span>  
  
-   <span data-ttu-id="51e4c-147">Eseguire il commit della transazione nel secondo thread.</span><span class="sxs-lookup"><span data-stu-id="51e4c-147">Commit the transaction in second thread.</span></span>  
  
-   <span data-ttu-id="51e4c-148">Eseguire il commit della transazione nel primo thread.</span><span class="sxs-lookup"><span data-stu-id="51e4c-148">Commit the transaction in first thread.</span></span>  
  
 <span data-ttu-id="51e4c-149">I prezzi dei prodotti di exchange ora (ProductId = 1 e ProductId = 2).</span><span class="sxs-lookup"><span data-stu-id="51e4c-149">Now exchange the Price of products(ProductId=1 and ProductId=2).</span></span>  
  
 <span data-ttu-id="51e4c-150">La classe DirtyReadThreads illustra se la transazione specifica consente il comportamento di lettura Dirty.</span><span class="sxs-lookup"><span data-stu-id="51e4c-150">The DirtyReadThreads class demonstrates if the specific transaction allows the Dirty Read behavior.</span></span> <span data-ttu-id="51e4c-151">Se la transazione consente il comportamento, i thread funzionerà nell'ordine seguente:</span><span class="sxs-lookup"><span data-stu-id="51e4c-151">If the transaction allows the behavior, the threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="51e4c-152">Nel primo thread, iniziare una transazione e aggiungere il value(ProductId=1) quantità.</span><span class="sxs-lookup"><span data-stu-id="51e4c-152">In first thread, begin a transaction and add the Quantity value(ProductId=1).</span></span>  
  
-   <span data-ttu-id="51e4c-153">Nel secondo thread, leggere il valore della quantità e aggiungere di nuovo il valore.</span><span class="sxs-lookup"><span data-stu-id="51e4c-153">In the second thread, read the Quantity value and add the value again.</span></span>  
  
-   <span data-ttu-id="51e4c-154">Eseguire il commit della transazione nel secondo thread.</span><span class="sxs-lookup"><span data-stu-id="51e4c-154">Commit the transaction in second thread.</span></span>  
  
-   <span data-ttu-id="51e4c-155">Il rollback della transazione nel primo thread.</span><span class="sxs-lookup"><span data-stu-id="51e4c-155">Roll back the transaction in first thread.</span></span>  
  
 <span data-ttu-id="51e4c-156">Se la transazione consente il comportamento, il valore della quantità verrà aggiunto due volte.</span><span class="sxs-lookup"><span data-stu-id="51e4c-156">If the transaction allows the behavior, the Quantity value will be added twice.</span></span>  
  
 <span data-ttu-id="51e4c-157">Progetti c# e Visual Basic con questo esempio di codice sono reperibile in [esempi di codice per sviluppatori](http://code.msdn.microsoft.com/site/search?query=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Value=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Type=SearchText&ac=4).</span><span class="sxs-lookup"><span data-stu-id="51e4c-157">C# and Visual Basic projects with this code sample can be found on [Developer Code Samples](http://code.msdn.microsoft.com/site/search?query=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Value=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Type=SearchText&ac=4).</span></span>  
  
 [!code-csharp[system_data_IsolationLevel#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/system_data_isolationlevel/cs/source.cs#1)]
 [!code-vb[system_data_IsolationLevel#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/system_data_isolationlevel/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Chaos">
      <MemberSignature Language="C#" Value="Chaos" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Chaos = int32(16)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Chaos" />
      <MemberSignature Language="VB.NET" Value="Chaos" />
      <MemberSignature Language="C++ CLI" Value="Chaos" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="51e4c-158">Le modifiche in sospeso dalle transazioni più isolate non possono essere sovrascritte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="51e4c-158">The pending changes from more highly isolated transactions cannot be overwritten.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ReadCommitted">
      <MemberSignature Language="C#" Value="ReadCommitted" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel ReadCommitted = int32(4096)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.ReadCommitted" />
      <MemberSignature Language="VB.NET" Value="ReadCommitted" />
      <MemberSignature Language="C++ CLI" Value="ReadCommitted" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>4096</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="51e4c-159">La condivisione dei blocchi viene mantenuta durante la lettura dei dati per evitare letture dirty, anche se è possibile modificare i dati prima del termine della transazione, con conseguente produzione di letture non ripetibili o dati fantasma.</span>
          <span class="sxs-lookup">
            <span data-stu-id="51e4c-159">Shared locks are held while the data is being read to avoid dirty reads, but the data can be changed before the end of the transaction, resulting in non-repeatable reads or phantom data.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ReadUncommitted">
      <MemberSignature Language="C#" Value="ReadUncommitted" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel ReadUncommitted = int32(256)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.ReadUncommitted" />
      <MemberSignature Language="VB.NET" Value="ReadUncommitted" />
      <MemberSignature Language="C++ CLI" Value="ReadUncommitted" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>256</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="51e4c-160">È possibile una lettura dirty, ovvero non verrà emesso alcun blocco condiviso, né verrà rispettato alcun blocco esclusivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="51e4c-160">A dirty read is possible, meaning that no shared locks are issued and no exclusive locks are honored.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="RepeatableRead">
      <MemberSignature Language="C#" Value="RepeatableRead" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel RepeatableRead = int32(65536)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.RepeatableRead" />
      <MemberSignature Language="VB.NET" Value="RepeatableRead" />
      <MemberSignature Language="C++ CLI" Value="RepeatableRead" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>65536</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="51e4c-161">I blocchi sono posizionati su tutti i dati utilizzati in una query, impedendo l'aggiornamento dei dati da parte di altri utenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="51e4c-161">Locks are placed on all data that is used in a query, preventing other users from updating the data.</span>
          </span>
          <span data-ttu-id="51e4c-162">Vengono impedite le letture non ripetibili, ma possono essere presenti righe fantasma.</span>
          <span class="sxs-lookup">
            <span data-stu-id="51e4c-162">Prevents non-repeatable reads but phantom rows are still possible.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Serializable">
      <MemberSignature Language="C#" Value="Serializable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Serializable = int32(1048576)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Serializable" />
      <MemberSignature Language="VB.NET" Value="Serializable" />
      <MemberSignature Language="C++ CLI" Value="Serializable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>1048576</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="51e4c-163">Viene posizionato un blocco di intervallo sull'oggetto <see cref="T:System.Data.DataSet" />, per impedire ad altri utenti di aggiornare o immettere righe nel dataset fino al termine della transazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="51e4c-163">A range lock is placed on the <see cref="T:System.Data.DataSet" />, preventing other users from updating or inserting rows into the dataset until the transaction is complete.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Snapshot">
      <MemberSignature Language="C#" Value="Snapshot" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Snapshot = int32(16777216)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Snapshot" />
      <MemberSignature Language="VB.NET" Value="Snapshot" />
      <MemberSignature Language="C++ CLI" Value="Snapshot" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>16777216</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="51e4c-164">Riduce il blocco archiviando una versione dei dati che può essere letta da un'applicazione mentre gli stessi dati vengono modificati da un'altra applicazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="51e4c-164">Reduces blocking by storing a version of data that one application can read while another is modifying the same data.</span>
          </span>
          <span data-ttu-id="51e4c-165">Indica che da una transazione non è possibile vedere le modifiche apportate in altre transazioni, anche se viene ripetuta la query.</span>
          <span class="sxs-lookup">
            <span data-stu-id="51e4c-165">Indicates that from one transaction you cannot see changes made in other transactions, even if you requery.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Unspecified">
      <MemberSignature Language="C#" Value="Unspecified" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Unspecified = int32(-1)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Unspecified" />
      <MemberSignature Language="VB.NET" Value="Unspecified" />
      <MemberSignature Language="C++ CLI" Value="Unspecified" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="51e4c-166">Verrà utilizzato un livello di isolamento diverso da quello specificato, ma il livello non potrà essere determinato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="51e4c-166">A different isolation level than the one specified is being used, but the level cannot be determined.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="51e4c-167">Quando si utilizza <xref:System.Data.Odbc.OdbcTransaction>, se non si imposta <xref:System.Data.IsolationLevel> o si impostano <xref:System.Data.IsolationLevel> a `Unspecified`, la transazione viene eseguita in base al livello di isolamento che è determinato dal driver in uso.</span><span class="sxs-lookup"><span data-stu-id="51e4c-167">When using <xref:System.Data.Odbc.OdbcTransaction>, if you do not set <xref:System.Data.IsolationLevel> or you set <xref:System.Data.IsolationLevel> to `Unspecified`, the transaction executes according to the isolation level that is determined by the driver that is being used.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>