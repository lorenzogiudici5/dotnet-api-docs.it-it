<Type Name="DataTableExtensions" FullName="System.Data.DataTableExtensions">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c379d60a4885e86c9f4b5402912c49f4801096e8" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37669445" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class DataTableExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DataTableExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataTableExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module DataTableExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTableExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type DataTableExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definisce i metodi di estensione per la classe <see cref="T:System.Data.DataTable" />. <see cref="T:System.Data.DataTableExtensions" /> è una classe statica.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsDataView">
      <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView (this System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsDataView (table As DataTable) As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataView ^ AsDataView(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="static member AsDataView : System.Data.DataTable -&gt; System.Data.DataView" Usage="System.Data.DataTableExtensions.AsDataView table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="table">Oggetto <see cref="T:System.Data.DataTable" /> di origine dal quale viene creato l'oggetto <see cref="T:System.Data.DataView" /> con supporto LINQ.</param>
        <summary>Crea e restituisce un oggetto <see cref="T:System.Data.DataView" /> che supporta LINQ.</summary>
        <returns>Oggetto <see cref="T:System.Data.DataView" /> con supporto LINQ.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataView> Abilita scenari con associazione a dati [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] e possono essere creati da un oggetto tipizzato o <xref:System.Data.DataTable>, fornendo una visualizzazione predefinita di tale tabella. Dopo la creazione dell'oggetto <xref:System.Data.DataView> da <xref:System.Data.DataTable>, è possibile specificare le impostazioni di filtro e ordinamento. Il <xref:System.Data.DataView> viene quindi associato a un controllo dell'interfaccia utente, ad esempio un <xref:System.Windows.Forms.DataGrid> o un <xref:System.Windows.Forms.DataGridView>, che fornisce un modello di associazione di dati semplici.  
  
 Per altre informazioni ed esempi, vedere [creazione di un oggetto DataView](~/docs/framework/data/adonet/creating-a-dataview-object-linq-to-dataset.md).  
  
   
  
## Examples  
 L'esempio seguente crea una <xref:System.Data.DataView> dalla tabella SalesOrderDetail e lo imposta come origine dati di un <xref:System.Windows.Forms.BindingSource> oggetto, che funge da proxy per un <xref:System.Windows.Forms.DataGridView> controllo:  
  
 [!code-csharp[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromtable)]
 [!code-vb[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromtable)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsDataView&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView&lt;T&gt; (this System.Data.EnumerableRowCollection&lt;T&gt; source) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView&lt;(class System.Data.DataRow) T&gt;(class System.Data.EnumerableRowCollection`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsDataView(Of T As DataRow) (source As EnumerableRowCollection(Of T)) As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataView ^ AsDataView(System::Data::EnumerableRowCollection&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsDataView : System.Data.EnumerableRowCollection&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; -&gt; System.Data.DataView (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.AsDataView source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Data.EnumerableRowCollection&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">Tipo di oggetti nella sequenza di origine, in genere <see cref="T:System.Data.DataRow" />.</typeparam>
        <param name="source">Query [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] di origine dalla quale viene creato l'oggetto <see cref="T:System.Data.DataView" /> con supporto LINQ.</param>
        <summary>Crea e restituisce un oggetto <see cref="T:System.Data.DataView" /> con supporto LINQ che rappresenta la query [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)].</summary>
        <returns>Oggetto <see cref="T:System.Data.DataView" /> con supporto LINQ.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataView> consente scenari di data binding per [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] e possono essere creati da un [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] query. Il <xref:System.Data.DataView> rappresenta la query stessa e non è una visualizzazione sopra la query. L'oggetto appena creato <xref:System.Data.DataView> deduce il tipo di filtro e ordinamento dalla query di cui è stato creato. Il <xref:System.Data.DataView> viene quindi associato a un controllo dell'interfaccia utente, ad esempio un <xref:System.Windows.Forms.DataGrid> o un <xref:System.Windows.Forms.DataGridView>, che fornisce un modello di data binding semplice.  
  
 Il parametro `T` del parametro di input `source` può essere solo di tipo <xref:System.Data.DataRow> o un tipo derivato da <xref:System.Data.DataRow>.  
  
 Solo gli operatori di query seguenti sono supportati in una query usata per creare <xref:System.Data.DataView>:  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Cast%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderBy%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderByDescending%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Select%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenBy%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenByDescending%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Where%2A>  
  
 Per altre informazioni ed esempi, vedere [creazione di un oggetto DataView](~/docs/framework/data/adonet/creating-a-dataview-object-linq-to-dataset.md).  
  
   
  
## Examples  
 L'esempio seguente crea un <xref:System.Data.DataView> di ordini online ordinati in base al totale dovuto:  
  
 [!code-csharp[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromquery1)]
 [!code-vb[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromquery1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsEnumerable">
      <MemberSignature Language="C#" Value="public static System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt; AsEnumerable (this System.Data.DataTable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.EnumerableRowCollection`1&lt;class System.Data.DataRow&gt; AsEnumerable(class System.Data.DataTable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsEnumerable (source As DataTable) As EnumerableRowCollection(Of DataRow)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::EnumerableRowCollection&lt;System::Data::DataRow ^&gt; ^ AsEnumerable(System::Data::DataTable ^ source);" />
      <MemberSignature Language="F#" Value="static member AsEnumerable : System.Data.DataTable -&gt; System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt;" Usage="System.Data.DataTableExtensions.AsEnumerable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.DataTable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">Oggetto <see cref="T:System.Data.DataTable" /> di origine da rendere enumerabile.</param>
        <summary>Restituisce un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" />, in cui il parametro generico <paramref name="T" /> è <see cref="T:System.Data.DataRow" />. Questo oggetto può essere usato in un'espressione [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] o in una query basata su metodo.</summary>
        <returns>Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" />, in cui il parametro generico <paramref name="T" /> è <see cref="T:System.Data.DataRow" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)] le query funzionano sulle origini dati che implementano il <xref:System.Collections.Generic.IEnumerable%601> interfaccia o <xref:System.Linq.IQueryable> interfaccia.  Il <xref:System.Data.DataTable> classe non implementa entrambe le interfacce, è necessario chiamare il <xref:System.Data.DataTableExtensions.AsEnumerable%2A> metodo da utilizzare il <xref:System.Data.DataTable> come origine nel `From` clausola di un [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query. È anche possibile ottenere gli operatori personalizzati specifici del dominio, ad esempio <xref:System.Data.DataTableExtensions.CopyToDataTable%2A>, restituendo un <xref:System.Collections.Generic.IEnumerable%601> oggetto.  
  
 Gli oggetti enumerabili restituiti dai <xref:System.Data.DataTableExtensions.AsEnumerable%2A> metodo associato in modo permanente per il <xref:System.Data.DataTable> che lo ha prodotto. Più chiamate per il <xref:System.Data.DataTableExtensions.AsEnumerable%2A> metodo verrà più restituito, sottoponibili a query oggetti indipendenti sono associati all'origine <xref:System.Data.DataTable>.  
  
   
  
## Examples  
 Nell'esempio seguente, il `DisplayProducts` metodo riceve un oggetto DataTable che contiene una colonna di dati denominato `ProductName`, estrae il `ProductName` valori e quindi stampa i valori.  
  
 [!code-csharp[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/cs/source.cs#1)]
 [!code-vb[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">L'oggetto <see cref="T:System.Data.DataTable" /> di origine è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyToDataTable&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce un oggetto <see cref="T:System.Data.DataTable" /> che contiene copie degli oggetti <see cref="T:System.Data.DataRow" />, dato un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> di input.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.DataTable CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataTable CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T)) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataTable ^ CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; -&gt; System.Data.DataTable (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">Tipo di oggetti nella sequenza di origine, in genere <see cref="T:System.Data.DataRow" />.</typeparam>
        <param name="source">Sequenza <see cref="T:System.Collections.Generic.IEnumerable`1" /> di origine.</param>
        <summary>Restituisce un oggetto <see cref="T:System.Data.DataTable" /> che contiene copie degli oggetti <see cref="T:System.Data.DataRow" />, dato un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> di input dove il parametro generico <see cref="T:System.Data.DataRow" /> è <paramref name="T" />.</summary>
        <returns>Oggetto <see cref="T:System.Data.DataTable" /> che contiene la sequenza di input come tipo di oggetti <see cref="T:System.Data.DataRow" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il parametro `T` del parametro di input `source` può essere solo di tipo <xref:System.Data.DataRow> o un tipo derivato da <xref:System.Data.DataRow>.  
  
 La sequenza di input può essere qualsiasi <xref:System.Collections.Generic.IEnumerable%601> di origine, non solo una query o una query su un <xref:System.Data.DataTable>. Si noti che se la sequenza di origine è una query, chiamata di questo operatore forzerà l'esecuzione immediata. L'enumerazione la sequenza di origine può provocare la generazione di eccezioni.  
  
 Lo schema della tabella di destinazione è basato sullo schema del primo <xref:System.Data.DataRow> riga nella sequenza di origine. I metadati della tabella vengano estratto il <xref:System.Data.DataRow> i valori di metadati e la tabella da valori di colonna del <xref:System.Data.DataRow>. Per un oggetto tipizzato <xref:System.Data.DataTable>, tipi non vengono mantenuti. I dati e schema vengono trasferite, ma le righe della tabella di output risultante non sarà dell'oggetto tipizzato <xref:System.Data.DataRow> tipo. Il <xref:System.Data.DataRow.RowState%2A> e <xref:System.Data.DataRow.RowError%2A> non vengono mantenute durante la copia dall'origine <xref:System.Data.DataRow> sull'oggetto restituito <xref:System.Data.DataTable>.  
  
 Quando un **null** riferimento o nullable con il valore **null** si trova in un'origine <xref:System.Data.DataRow>, questo metodo sostituisce il valore di destinazione <xref:System.Data.DataTable> con il valore <xref:System.DBNull.Value>.  
  
 La tabella generata restituita dal metodo ha il nome di tabella predefinito. Se si desidera assegnare un nome di <xref:System.Data.DataTable>, collegarlo a una <xref:System.Data.DataSet>, o eseguire qualsiasi altra <xref:System.Data.DataTable> operazione specifica, è necessario farlo dopo la tabella viene creata e restituita.  
  
 Per altre informazioni, vedere [creazione di un oggetto DataTable da una Query](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md).  
  
   
  
## Examples  
 Nell'esempio seguente esegue una query sulla tabella SalesOrderHeader per gli ordini dopo l'8 agosto 2001 e Usa il <xref:System.Data.DataTableExtensions.CopyToDataTable%2A> metodo per creare un <xref:System.Data.DataTable> dalla query. <xref:System.Data.DataTable> viene quindi associato a <xref:System.Windows.Forms.BindingSource>, che funge da proxy per <xref:System.Windows.Forms.DataGridView>.  
  
 [!code-csharp[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/CS/Program.cs#copytodatatable1)]
 [!code-vb[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/VB/Module1.vb#copytodatatable1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La sequenza <see cref="T:System.Collections.Generic.IEnumerable`1" /> di origine è <see langword="null" /> e non è possibile creare una nuova tabella.</exception>
        <exception cref="T:System.InvalidOperationException">Un oggetto <see cref="T:System.Data.DataRow" /> nella sequenza di origine ha lo stato impostato su <see cref="F:System.Data.DataRowState.Deleted" />.  
  
La sequenza di origine non contiene alcun oggetto <see cref="T:System.Data.DataRow" />.  
  
Un oggetto <see cref="T:System.Data.DataRow" /> nella sequenza di origine è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T), table As DataTable, options As LoadOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static void CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Data::DataTable ^ table, System::Data::LoadOption options);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; * System.Data.DataTable * System.Data.LoadOption -&gt; unit (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable (source, table, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="options" Type="System.Data.LoadOption" />
      </Parameters>
      <Docs>
        <typeparam name="T">Tipo di oggetti nella sequenza di origine, in genere <see cref="T:System.Data.DataRow" />.</typeparam>
        <param name="source">Sequenza <see cref="T:System.Collections.Generic.IEnumerable`1" /> di origine.</param>
        <param name="table">Il <see cref="T:System.Data.DataTable" /> di destinazione.</param>
        <param name="options">Enumerazione <see cref="T:System.Data.LoadOption" /> che specifica le opzioni di caricamento di <see cref="T:System.Data.DataTable" />.</param>
        <summary>Copia gli oggetti <see cref="T:System.Data.DataRow" /> nell'oggetto <see cref="T:System.Data.DataTable" /> specificato, dato un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> di input dove il parametro generico <paramref name="T" /> è <see cref="T:System.Data.DataRow" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il parametro `T` del parametro di input `source` può essere solo di tipo <xref:System.Data.DataRow>, o un tipo derivato da <xref:System.Data.DataRow>.  
  
 La sequenza di input può essere qualsiasi <xref:System.Collections.Generic.IEnumerable%601> di origine, non solo una query su un <xref:System.Data.DataTable>. Si noti che se la sequenza di origine è una query, chiamata di questo operatore forzerà l'esecuzione immediata. L'enumerazione la sequenza di origine può provocare la generazione di eccezioni.  
  
 Lo schema della tabella di destinazione è basato sullo schema del primo <xref:System.Data.DataRow> riga nella sequenza di origine. I metadati della tabella vengano estratto il <xref:System.Data.DataRow> i valori di metadati e la tabella da valori di colonna del <xref:System.Data.DataRow>. Per un oggetto tipizzato <xref:System.Data.DataTable>, tipi non vengono mantenuti. I dati e schema vengono trasferite, ma le righe della tabella di output risultante non sarà dell'oggetto tipizzato <xref:System.Data.DataRow> tipo. Il <xref:System.Data.DataRow.RowState%2A> e <xref:System.Data.DataRow.RowError%2A> non vengono mantenute durante la copia dall'origine <xref:System.Data.DataRow> sull'oggetto restituito <xref:System.Data.DataTable>.  
  
 Quando un **null** riferimento o nullable con il valore **null** si trova in un'origine <xref:System.Data.DataRow>, questo metodo sostituisce il valore di destinazione <xref:System.Data.DataTable> con il valore <xref:System.DBNull.Value>.  
  
 La tabella generata restituita dal metodo ha il nome di tabella predefinito. Se si desidera assegnare un nome di <xref:System.Data.DataTable>, collegarlo a una <xref:System.Data.DataSet>, o eseguire qualsiasi altra <xref:System.Data.DataTable> operazione specifica, è necessario farlo dopo la tabella viene creata e restituita.  
  
 Per altre informazioni, vedere [creazione di un oggetto DataTable da una Query](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Gli oggetti <see cref="T:System.Data.DataRow" /> copiati non si adattano allo schema dell'oggetto <see cref="T:System.Data.DataTable" /> di destinazione.</exception>
        <exception cref="T:System.ArgumentNullException">La sequenza <see cref="T:System.Collections.Generic.IEnumerable`1" /> di origine è <see langword="null" /> o l'oggetto <see cref="T:System.Data.DataTable" /> di destinazione è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Un oggetto <see cref="T:System.Data.DataRow" /> nella sequenza di origine ha lo stato impostato su <see cref="F:System.Data.DataRowState.Deleted" />.  
  
La sequenza di origine non contiene alcun oggetto <see cref="T:System.Data.DataRow" />.  
  
Un oggetto <see cref="T:System.Data.DataRow" /> nella sequenza di origine è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options, System.Data.FillErrorEventHandler errorHandler) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options, class System.Data.FillErrorEventHandler errorHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T), table As DataTable, options As LoadOption, errorHandler As FillErrorEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static void CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Data::DataTable ^ table, System::Data::LoadOption options, System::Data::FillErrorEventHandler ^ errorHandler);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; * System.Data.DataTable * System.Data.LoadOption * System.Data.FillErrorEventHandler -&gt; unit (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable (source, table, options, errorHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="options" Type="System.Data.LoadOption" />
        <Parameter Name="errorHandler" Type="System.Data.FillErrorEventHandler" />
      </Parameters>
      <Docs>
        <typeparam name="T">Tipo di oggetti nella sequenza di origine, in genere <see cref="T:System.Data.DataRow" />.</typeparam>
        <param name="source">Sequenza <see cref="T:System.Collections.Generic.IEnumerable`1" /> di origine.</param>
        <param name="table">Il <see cref="T:System.Data.DataTable" /> di destinazione.</param>
        <param name="options">Enumerazione <see cref="T:System.Data.LoadOption" /> che specifica le opzioni di caricamento di <see cref="T:System.Data.DataTable" />.</param>
        <param name="errorHandler">Delegato <see cref="T:System.Data.FillErrorEventHandler" /> che rappresenta il metodo che gestirà un errore.</param>
        <summary>Copia gli oggetti <see cref="T:System.Data.DataRow" /> nell'oggetto <see cref="T:System.Data.DataTable" /> specificato, dato un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> di input dove il parametro generico <paramref name="T" /> è <see cref="T:System.Data.DataRow" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il parametro `T` del parametro di input `source` può essere solo di tipo <xref:System.Data.DataRow>, o un tipo derivato da <xref:System.Data.DataRow>.  
  
 La sequenza di input può essere qualsiasi <xref:System.Collections.Generic.IEnumerable%601> di origine, non solo una query su un <xref:System.Data.DataTable>. Si noti che se la sequenza di origine è una query, chiamata di questo operatore forzerà l'esecuzione immediata. L'enumerazione la sequenza di origine può provocare la generazione di eccezioni.  
  
 Lo schema della tabella di destinazione è basato sullo schema del primo <xref:System.Data.DataRow> riga nella sequenza di origine. I metadati della tabella vengano estratto il <xref:System.Data.DataRow> i valori di metadati e la tabella da valori di colonna del <xref:System.Data.DataRow>. Per un oggetto tipizzato <xref:System.Data.DataTable>, tipi non vengono mantenuti. I dati e schema vengono trasferite, ma le righe della tabella di output risultante non sarà dell'oggetto tipizzato <xref:System.Data.DataRow> tipo. Il <xref:System.Data.DataRow.RowState%2A> e <xref:System.Data.DataRow.RowError%2A> non vengono mantenute durante la copia dall'origine <xref:System.Data.DataRow> sull'oggetto restituito <xref:System.Data.DataTable>.  
  
 Quando un **null** riferimento o nullable con il valore **null** si trova in un'origine <xref:System.Data.DataRow>, questo metodo sostituisce il valore di destinazione <xref:System.Data.DataTable> con il valore <xref:System.DBNull.Value>.  
  
 La tabella generata restituita dal metodo ha il nome di tabella predefinito. Se si desidera assegnare un nome di <xref:System.Data.DataTable>, collegarlo a una <xref:System.Data.DataSet>, o eseguire qualsiasi altra <xref:System.Data.DataTable> operazione specifica, è necessario farlo dopo la tabella viene creata e restituita.  
  
 Se viene generata un'eccezione durante la copia di una riga di dati nella tabella di destinazione, ad esempio un'eccezione di vincolo, il `errorHandler` delegato viene chiamato. Oggetto <xref:System.Data.FillErrorEventArgs> viene passato per il `errorHandler` delegare con i valori seguenti:  
  
-   Il <xref:System.Data.FillErrorEventArgs.Values%2A> è impostata su una copia dei dati di origine.  
  
-   Il <xref:System.Data.FillErrorEventArgs.DataTable%2A> viene impostata alla destinazione <xref:System.Data.DataTable>.  
  
-   Il <xref:System.Data.FillErrorEventArgs.Errors%2A> viene impostata per l'eccezione rilevata.  
  
 Il <xref:System.Data.FillErrorEventArgs.Continue%2A> proprietà è di lettura al termine della chiamata del delegato. Se il <xref:System.Data.FillErrorEventArgs.Continue%2A> è di proprietà `true`, la sequenza di origine continua a essere enumerati e caricati nella tabella di dati. Se il <xref:System.Data.FillErrorEventArgs.Continue%2A> proprietà viene `false`, viene generata l'eccezione originale dal <xref:System.Data.DataTableExtensions.CopyToDataTable%2A> (metodo).  
  
 Per altre informazioni, vedere [creazione di un oggetto DataTable da una Query](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Gli oggetti <see cref="T:System.Data.DataRow" /> copiati non si adattano allo schema dell'oggetto <see cref="T:System.Data.DataTable" /> di destinazione.</exception>
        <exception cref="T:System.ArgumentNullException">La sequenza <see cref="T:System.Collections.Generic.IEnumerable`1" /> di origine è <see langword="null" /> o l'oggetto <see cref="T:System.Data.DataTable" /> di destinazione è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Un oggetto <see cref="T:System.Data.DataRow" /> nella sequenza di origine ha lo stato impostato su <see cref="F:System.Data.DataRowState.Deleted" />.  
  
oppure 
La sequenza di origine non contiene alcun oggetto <see cref="T:System.Data.DataRow" />.  
  
oppure 
Un oggetto <see cref="T:System.Data.DataRow" /> nella sequenza di origine è <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>