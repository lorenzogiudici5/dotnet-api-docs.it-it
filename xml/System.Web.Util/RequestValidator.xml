<Type Name="RequestValidator" FullName="System.Web.Util.RequestValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8b4c79fe59673d5d8a6ab4176cc578a2c36aec23" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30609485" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RequestValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RequestValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.RequestValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class RequestValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class RequestValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definisce i metodi base per la convalida delle richieste personalizzata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, ASP.NET non convalida le richieste finché non codice richiede in modo esplicito un valore dalla richiesta. Ad esempio, ASP.NET non convalida i valori di stringa di query fino a quando il codice accede il <xref:System.Web.HttpRequest.QueryString%2A> insieme. Per impostazione predefinita, ASP.NET non convalida alcuni tipi di dati della richiesta, ad esempio i valori del form, i cookie, i nomi dei file che sono stati caricati mediante HTTP e il valore di <xref:System.Web.HttpRequest.RawUrl%2A> proprietà.  
  
 La <xref:System.Web.Util.RequestValidator> classe è una classe di base che è possibile implementare per fornire la convalida delle richieste personalizzata. Implementando questa classe, è possibile determinare quando la convalida viene eseguita e il tipo di dati della richiesta per eseguire la convalida.  
  
 Per impostazione predefinita, ASP.NET fornisce controlli cross-site scripting (XSS). Tuttavia, è possibile integrare o sostituire la logica di convalida richiesta che viene fornita in ASP.NET tramite la creazione di un'implementazione personalizzata di XSS. Ad esempio, è possibile scrivere un'implementazione di convalida richiesta personalizzata che esegue l'analisi per gli attacchi SQL injection oltre a controllare per attacchi XSS.  
  
 Per creare la convalida delle richieste personalizzata, scrivere una classe personalizzata che deriva dalla <xref:System.Web.Util.RequestValidator> classe di base. È quindi possibile configurare ASP.NET per utilizzare il validator personalizzato richiesta nel file Web. config a livello di applicazione. È possibile inserire la classe personalizzata nella cartella App_Code, in una libreria di classi compilata nella cartella Bin, o in una libreria di classi compilata nella GAC.  
  
> [!NOTE]
>  Un solo tipo di convalida personalizzata richiesta configurabili per un'applicazione. Non è possibile configurare un tipo di convalida richiesta diverse per singoli percorsi virtuali o le pagine.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come creare un validator personalizzato di richiesta che consente solo una stringa specifica da utilizzare per i valori di stringa di query.  
  
 [!code-csharp[System.Web.Util.RequestValidator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.util.requestvalidator/cs/requestvalidator.cs#1)]
 [!code-vb[System.Web.Util.RequestValidator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.util.requestvalidator/vb/requestvalidator.vb#1)]  
  
 Nell'esempio seguente viene illustrato come configurare ASP.NET per utilizzare il validator personalizzato nel file Web. config per un'applicazione.  
  
```  
<system.web>  
  <httpRuntime requestValidationType="CustomRequestValidation" />  
</system.web>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Util.RequestValidationSource" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RequestValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RequestValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.Util.RequestValidator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Web.Util.RequestValidator> classe ha un costruttore predefinito. Quando viene inizializzata una nuova istanza della classe, un metodo interno recupera i dettagli di convalida personalizzati dalle informazioni di configurazione dell'applicazione. Cui sono contenuti i dettagli di configurazione di <xref:System.Web.Configuration.HttpRuntimeSection> sezione. Per ulteriori informazioni, vedere [elemento httpRuntime (Schema delle impostazioni ASP.NET)](http://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369) e <xref:System.Web.Configuration.HttpRuntimeSection.RequestValidationType%2A> attributo.  
  
 Durante l'inizializzazione, una singola istanza del <xref:System.Web.Util.RequestValidator> classe viene creata e viene mantenuto un riferimento all'istanza di <xref:System.Web.Util.RequestValidator.Current%2A> proprietà. ASP.NET non crea una nuova istanza di convalida richiesta per ogni richiesta. Pertanto, le implementazioni personalizzate della <xref:System.Web.Util.RequestValidator> classe deve essere thread-safe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.RequestValidator Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.RequestValidator Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.RequestValidator.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As RequestValidator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::RequestValidator ^ Current { System::Web::Util::RequestValidator ^ get(); void set(System::Web::Util::RequestValidator ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un riferimento all'istanza <see cref="T:System.Web.Util.RequestValidator" /> corrente che verrà utilizzato in un'applicazione.</summary>
        <value>Istanza della classe <see cref="T:System.Web.Util.RequestValidator" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Util.RequestValidator.Current%2A> proprietà mantiene un riferimento a una sola istanza consentito della <xref:System.Web.Util.RequestValidator> classe. Se non esiste alcuna istanza, viene creato uno nuovo. Se esiste già un'istanza, viene restituita l'istanza corrente.  
  
 Durante l'inizializzazione, una singola istanza del <xref:System.Web.Util.RequestValidator> classe viene creata e diventa disponibile in un riferimento all'istanza di <xref:System.Web.Util.RequestValidator.Current%2A> proprietà. ASP.NET non crea una nuova istanza di convalida richiesta per ogni richiesta. Pertanto, le implementazioni personalizzate della <xref:System.Web.Util.RequestValidator> classe deve essere thread-safe.  
  
> [!NOTE]
>  Il <xref:System.Web.Util.RequestValidator.Current%2A> proprietà non è thread-safe, mentre un riferimento all'oggetto corrente è l'impostazione della proprietà <xref:System.Web.Util.RequestValidator> classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La proprietà è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeIsValidRequestString">
      <MemberSignature Language="C#" Value="public bool InvokeIsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InvokeIsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool InvokeIsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">Contesto HTTP della richiesta.</param>
        <param name="value">Dati della richiesta HTTP da convalidare.</param>
        <param name="requestValidationSource">Enumerazione che rappresenta l'origine dei dati della richiesta che vengono sottoposti a convalida. Di seguito sono indicati i valori possibili per l'enumerazione:  
  
-   <see langword="QueryString" />  
  
-   <see langword="Form" />  
  
-   <see langword="Cookies" />  
  
-   <see langword="Files" />  
  
-   <see langword="Path" />  
  
-   <see langword="PathInfo" />  
  
-   <see langword="Headers" /></param>
        <param name="collectionKey">(Facoltativo) Chiave nella raccolta di richieste dell'elemento da convalidare. Questo parametro viene usato se i dati da convalidare sono ottenuti da una raccolta. In caso contrario, il parametro può essere <see langword="null" />.</param>
        <param name="validationFailureIndex">Quando restituisce il controllo, questo metodo indica il punto iniziale in base zero del testo problematico o non valido nella raccolta di richieste. Questo parametro viene passato non inizializzato.</param>
        <summary>Fornisce un metodo pubblico che chiama il metodo <see cref="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" /> protetto per convalidare i dati della richiesta HTTP.</summary>
        <returns>
          <see langword="true" /> se la stringa da convalidare non contiene caratteri non codificati che potrebbero essere usati in un attacco di scripting dannoso; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Util.RequestValidator.InvokeIsValidRequestString%2A> metodo fornisce l'accesso pubblico alle protetto <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metodo. Ciò consente di creare una classe wrapper personalizzata per il <xref:System.Web.Util.RequestValidator> classe e chiamare il <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metodo senza dover ereditare la <xref:System.Web.Util.RequestValidator> classe.  
  
 Per informazioni sulla convalida della richiesta, vedere <xref:System.Web.UnvalidatedRequestValues>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidRequestString">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool IsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool IsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">Contesto della richiesta corrente.</param>
        <param name="value">Dati della richiesta HTTP da convalidare.</param>
        <param name="requestValidationSource">Enumerazione che rappresenta l'origine dei dati della richiesta che vengono sottoposti a convalida. Di seguito sono indicati i valori possibili per l'enumerazione:  
  
- <see langword="QueryString" />
- <see langword="Form " />
- <see langword="Cookies" />
- <see langword="Files" />
- <see langword="RawUrl" />
- <see langword="Path" />
- <see langword="PathInfo" />
- <see langword="Headers" /></param>
        <param name="collectionKey">Chiave nella raccolta di richieste dell'elemento da convalidare. Questo parametro è facoltativo. Questo parametro viene usato se i dati da convalidare sono ottenuti da una raccolta. Se i dati da convalidare non provengono da una raccolta, <c>collectionKey</c> può essere <see langword="null" />.</param>
        <param name="validationFailureIndex">Quando restituisce il controllo, questo metodo indica il punto iniziale in base zero del testo problematico o non valido nella raccolta di richieste. Questo parametro viene passato non inizializzato.</param>
        <summary>Convalida una stringa che contiene i dati della richiesta HTTP.</summary>
        <returns>
          <see langword="true" /> se la stringa da convalidare è valida. In caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare questo metodo per eseguire una convalida personalizzata dei dati di richiesta. Il comportamento di base di <xref:System.Web.Util.RequestValidator.IsValidRequestString%28System.Web.HttpContext%2CSystem.String%2CSystem.Web.Util.RequestValidationSource%2CSystem.String%2CSystem.Int32%40%29> metodo è simile a quello che ASP.NET implementa internamente per controllare le stringhe pericolose nella convalida di script tra siti. Per ulteriori informazioni, vedere [procedura: impedire Cross-Site Scripting in ASP.NET](http://go.microsoft.com/fwlink/?LinkID=178708).  
  
 Se la logica di convalida personalizzata rileva un errore, questo metodo deve restituire `false` e specificare un valore in `validationFailureIndex` per indicare il punto iniziale del testo che ha causato l'errore. Il valore in `validationFailureIndex` deve essere 0 o un numero intero positivo.  
  
 La logica di un controllo di convalida richiesta procede nel modo seguente:  
  
-   La <xref:System.Web.HttpRequest> classe esegue un controllo di rimozione di caratteri null ai dati in arrivo.  
  
-   Il <xref:System.Web.HttpRequest> classe vengono richiamati i metodi di <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metodo (l'implementazione predefinita del metodo di base) o chiama una versione derivata del metodo.  
  
-   Se <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> restituisce `false` per indicare un errore di convalida, ASP.NET costruisce una stringa di errore (se necessario) e genera un <xref:System.Web.HttpRequestValidationException> eccezione.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>