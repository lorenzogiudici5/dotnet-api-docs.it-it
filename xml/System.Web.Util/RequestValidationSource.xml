<Type Name="RequestValidationSource" FullName="System.Web.Util.RequestValidationSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dd387d232e3dbf90bfb6d6510852f5386bbe84cd" />
    <Meta Name="ms.sourcegitcommit" Value="d0bb31ec8354fa58c62c2a646057eec11d3e2150" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/17/2018" />
    <Meta Name="ms.locfileid" Value="36375256" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum RequestValidationSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed RequestValidationSource extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.RequestValidationSource" />
  <TypeSignature Language="VB.NET" Value="Public Enum RequestValidationSource" />
  <TypeSignature Language="C++ CLI" Value="public enum class RequestValidationSource" />
  <TypeSignature Language="F#" Value="type RequestValidationSource = " />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Specifica il tipo di dati di richiesta HTTP da convalidare.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile creare un tipo di convalida richiesta personalizzata implementando il <xref:System.Web.Util.RequestValidator> tipo. Quando ASP.NET richiama il <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metodo per convalidare una richiesta, ASP.NET passa un `requestValidationSource` parametro per specificare l'origine dei dati da convalidare. Il <xref:System.Web.Util.RequestValidationSource> enumerazione viene utilizzata per specificare l'origine o un tipo di dati della richiesta in fase di convalida. L'enumerazione indica il tipo di input HTTP che viene passato il `value` parametro del <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> (metodo). È possibile utilizzare l'enumerazione che consente di eseguire il fallback per l'implementazione di convalida di base richiesta per gli input HTTP se si preferisce non eseguire la convalida tramite la logica personalizzata.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come creare una classe validator personalizzata richiesta che consente solo una stringa specifica per i valori di stringa di query.  
  
```vb  
Imports System  
Imports System.Web  
Imports System.Web.Util  
  
Public Class CustomRequestValidation  
    Inherits RequestValidator  
  
Public Sub New()  
End Sub  
  
Protected Overloads Overrides Function IsValidRequestString( _  
        ByVal context As HttpContext, _  
        ByVal value As String, _  
        ByVal requestValidationSource__1 As RequestValidationSource, _  
        ByVal collectionKey As String, _  
        ByRef validationFailureIndex As Integer) As Boolean  
    validationFailureIndex = -1  
    ' Set a default value for the out parameter.  
    ' This application does not use RawUrl directly, so you can   
    ' ignore the check for RequestValidationSource.RawUrl.  
    If requestValidationSource = RequestValidationSource.RawUrl Then  
        Return True  
    End If  
  
    ' Allow the query-string key "data" to have an XML-like value.  
    If (requestValidationSource = _  
            (RequestValidationSource.QueryString) AndAlso _  
            (collectionKey = "data") Then  
        ' The querystring value "<example>1234</example>" is allowed.  
        If value = "<example>1234</example>" Then  
            validationFailureIndex = -1  
            Return True  
        Else  
            ' Leave any further checks to ASP.NET.  
            Return MyBase.IsValidRequestString(context, value, _  
                requestValidationSource__1, collectionKey, _  
                validationFailureIndex)  
        End If  
    Else  
        ' All other HTTP input checks fall back to   
        ' the base ASP.NET implementation.  
        Return MyBase.IsValidRequestString(context, value, _  
            requestValidationSource__1, collectionKey, _  
            validationFailureIndex)  
    End If  
End Function  
End Class  
```  
  
```csharp  
using System;  
using System.Web;  
using System.Web.Util;  
  
public class CustomRequestValidation : RequestValidator  
{  
    public CustomRequestValidation() {}  
  
    protected override bool IsValidRequestString(  
        HttpContext context, string value,   
        RequestValidationSource requestValidationSource, string collectionKey,   
        out int validationFailureIndex)  
    {  
        //Set a default value for the out parameter.  
        validationFailureIndex = -1;  
  
        // This application does not use RawUrl directly,   
        // so you can ignore the check for RequestValidationSource.RawUrl.  
        if (requestValidationSource == RequestValidationSource.RawUrl)  
            return true;  
  
        // Allow the query-string key "data" to have an XML-like value.  
        if (  
            (requestValidationSource == RequestValidationSource.QueryString) &&  
            (collectionKey == "data")  
           )  
        {  
            // The querystring value "<example>1234</example>" is allowed.  
            if (value == "<example>1234</example>")  
            {  
                validationFailureIndex = -1;  
                return true;  
            }  
            else  
           // Leave any further checks to ASP.NET.  
                return base.IsValidRequestString(context, value,   
                requestValidationSource, collectionKey, out   
                validationFailureIndex);  
        }  
        // All other HTTP input checks fall back to   
        // the base ASP.NET implementation.  
        else  
        {  
            return base.IsValidRequestString(context, value,   
                requestValidationSource, collectionKey,   
                out validationFailureIndex);  
        }  
    }  
}  
```  
  
 Nell'esempio seguente viene illustrato come configurare ASP.NET per utilizzare il validator personalizzato.  
  
```  
<httpRuntime requestValidationType="CustomRequestValidation" />  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Util.RequestValidator" />
  </Docs>
  <Members>
    <Member MemberName="Cookies">
      <MemberSignature Language="C#" Value="Cookies" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Web.Util.RequestValidationSource Cookies = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Web.Util.RequestValidationSource.Cookies" />
      <MemberSignature Language="VB.NET" Value="Cookies" />
      <MemberSignature Language="C++ CLI" Value="Cookies" />
      <MemberSignature Language="F#" Value="Cookies = 2" Usage="System.Web.Util.RequestValidationSource.Cookies" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidationSource</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Cookie della richiesta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `collectionKey` parametro il <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metodo viene impostato sul nome del cookie della raccolta.  
  
 Il `value` parametro il <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metodo viene impostato sul valore nella raccolta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Files">
      <MemberSignature Language="C#" Value="Files" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Web.Util.RequestValidationSource Files = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.Web.Util.RequestValidationSource.Files" />
      <MemberSignature Language="VB.NET" Value="Files" />
      <MemberSignature Language="C++ CLI" Value="Files" />
      <MemberSignature Language="F#" Value="Files = 3" Usage="System.Web.Util.RequestValidationSource.Files" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidationSource</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>File caricato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `collectionKey` parametro il <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metodo viene impostato sul nome del file caricato nell'insieme.  
  
 Il `value` parametro il <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metodo viene impostato sul valore del file caricato nell'insieme.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Form">
      <MemberSignature Language="C#" Value="Form" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Web.Util.RequestValidationSource Form = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Web.Util.RequestValidationSource.Form" />
      <MemberSignature Language="VB.NET" Value="Form" />
      <MemberSignature Language="C++ CLI" Value="Form" />
      <MemberSignature Language="F#" Value="Form = 1" Usage="System.Web.Util.RequestValidationSource.Form" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidationSource</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Valori del form.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `collectionKey` parametro il <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metodo è impostato sul nome del parametro per il form nella raccolta.  
  
 Il `value` parametro il <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metodo è impostato sul valore del parametro per il form nella raccolta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Headers">
      <MemberSignature Language="C#" Value="Headers" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Web.Util.RequestValidationSource Headers = int32(7)" />
      <MemberSignature Language="DocId" Value="F:System.Web.Util.RequestValidationSource.Headers" />
      <MemberSignature Language="VB.NET" Value="Headers" />
      <MemberSignature Language="C++ CLI" Value="Headers" />
      <MemberSignature Language="F#" Value="Headers = 7" Usage="System.Web.Util.RequestValidationSource.Headers" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidationSource</ReturnType>
      </ReturnValue>
      <MemberValue>7</MemberValue>
      <Docs>
        <summary>Intestazioni delle richieste.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `collectionKey` parametro il <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metodo viene impostato sul nome di un'intestazione HTTP nella raccolta.  
  
 Il `value` parametro il <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metodo viene impostato sul valore dell'intestazione HTTP nella raccolta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="Path" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Web.Util.RequestValidationSource Path = int32(5)" />
      <MemberSignature Language="DocId" Value="F:System.Web.Util.RequestValidationSource.Path" />
      <MemberSignature Language="VB.NET" Value="Path" />
      <MemberSignature Language="C++ CLI" Value="Path" />
      <MemberSignature Language="F#" Value="Path = 5" Usage="System.Web.Util.RequestValidationSource.Path" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidationSource</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>Percorso virtuale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `collectionKey` parametro del <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metodo è impostato su `null` (`Path` non è una raccolta di valori).  
  
 Il `value` parametro il <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metodo viene impostato sul valore del campo percorso.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PathInfo">
      <MemberSignature Language="C#" Value="PathInfo" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Web.Util.RequestValidationSource PathInfo = int32(6)" />
      <MemberSignature Language="DocId" Value="F:System.Web.Util.RequestValidationSource.PathInfo" />
      <MemberSignature Language="VB.NET" Value="PathInfo" />
      <MemberSignature Language="C++ CLI" Value="PathInfo" />
      <MemberSignature Language="F#" Value="PathInfo = 6" Usage="System.Web.Util.RequestValidationSource.PathInfo" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidationSource</ReturnType>
      </ReturnValue>
      <MemberValue>6</MemberValue>
      <Docs>
        <summary>Stringa <see cref="P:System.Web.HttpRequest.PathInfo" /> HTTP, vale a dire un'estensione di un percorso URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `collectionKey` parametro del <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metodo è impostato su `null` (`PathInfo` non è una raccolta di valori).  
  
 Il `value` parametro il <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metodo viene impostato sul valore del campo PathInfo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryString">
      <MemberSignature Language="C#" Value="QueryString" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Web.Util.RequestValidationSource QueryString = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Web.Util.RequestValidationSource.QueryString" />
      <MemberSignature Language="VB.NET" Value="QueryString" />
      <MemberSignature Language="C++ CLI" Value="QueryString" />
      <MemberSignature Language="F#" Value="QueryString = 0" Usage="System.Web.Util.RequestValidationSource.QueryString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidationSource</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Stringa di query.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `collectionKey` parametro il <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metodo viene impostato sul nome del parametro della stringa di query nella raccolta.  
  
 Il `value` parametro il <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metodo viene impostato sul valore del parametro della stringa di query nella raccolta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RawUrl">
      <MemberSignature Language="C#" Value="RawUrl" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Web.Util.RequestValidationSource RawUrl = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Web.Util.RequestValidationSource.RawUrl" />
      <MemberSignature Language="VB.NET" Value="RawUrl" />
      <MemberSignature Language="C++ CLI" Value="RawUrl" />
      <MemberSignature Language="F#" Value="RawUrl = 4" Usage="System.Web.Util.RequestValidationSource.RawUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidationSource</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>URL non elaborato, ovvero la parte di un URL che segue il dominio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `collectionKey` parametro il <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metodo è impostato su `null`. (`RawUrl` non è una raccolta di valori.)  
  
 Il `value` parametro il <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> metodo viene impostato sul valore del campo RawUrl.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>