<Type Name="PersistenceParticipant" FullName="System.Activities.Persistence.PersistenceParticipant">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fd64108278420055f98c79b4bb0141b06ca83b1c" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39981032" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class PersistenceParticipant" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PersistenceParticipant extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Persistence.PersistenceParticipant" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PersistenceParticipant" />
  <TypeSignature Language="C++ CLI" Value="public ref class PersistenceParticipant abstract" />
  <TypeSignature Language="F#" Value="type PersistenceParticipant = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Questa classe consente sia a <see cref="T:System.Activities.WorkflowApplication" /> che a <see cref="T:System.ServiceModel.WorkflowServiceHost" /> di partecipare al processo di persistenza. Un partecipante di persistenza deriva dalla classe <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> o dalla classe <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> (classe derivata della classe <see cref="T:System.Activities.Persistence.PersistenceParticipant" />), implementa i metodi astratti, quindi aggiunge un'istanza della classe come estensione all'istanza del flusso di lavoro. <see cref="T:System.Activities.WorkflowApplication" /> e <see cref="T:System.ServiceModel.WorkflowServiceHost" /> cercano tali estensioni quando si rende persistente un'istanza e si richiamano i metodi appropriati in momenti appropriati.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un host esegue i passaggi (o fasi) seguenti durante l'impostazione della persistenza di un'istanza:  
  
1.  Raccoglie i valori da rendere persistenti.  
  
2.  Esegue il mapping di campi di valori strutturati monolitici a singoli valori.  
  
3.  Rilascia <xref:System.Activities.DurableInstancing.SaveWorkflowCommand> per il provider di persistenza.  
  
4.  Esegue I/O nella transazione di persistenza.  
  
 Un host completa una fase prima di iniziare quella successiva. Durante l'impostazione della persistenza, ad esempio, l'host raccoglie valori da tutti i partecipanti di persistenza prima di passare alla seconda fase. Nella seconda fase, l'host fornisce tutti i valori raccolti nella prima fase a tutti i partecipanti di persistenza nella seconda fase per il mapping. Nella terza fase, l'host fornisce tutti i valori raccolti nella prima e nella seconda fase al provider di persistenza nella seconda quando si richiama <xref:System.Activities.DurableInstancing.SaveWorkflowCommand>. Nella quarta fase, l'host fornisce quindi tutti i valori raccolti a tutti i partecipanti di I/O di persistenza nella transazione di persistenza.  
  
 Un host esegue i passaggi seguenti durante il caricamento di un'istanza di persistenza:  
  
1.  Rilascia <xref:System.Activities.DurableInstancing.LoadWorkflowCommand> e <xref:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand> per il provider di persistenza.  
  
2.  Esegue I/O nella transazione di persistenza.  
  
3.  Pubblica i valori caricati.  
  
 Al livello pi√π elevato, le estensioni dell'istanza del flusso di lavoro che derivano dalla classe <xref:System.Activities.Persistence.PersistenceParticipant> possono partecipare alla prima (raccolta) e alla seconda (mapping) fase del processo di impostazione della persistenza e alla terza fase (pubblicazione) del processo di caricamento.  Le estensioni dell'istanza del flusso di lavoro derivanti dalla classe PersistenceIOParticipant possono partecipare inoltre alla quarta fase del processo di impostazione della persistenza e alla seconda fase del processo di caricamento (I/O).  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene mostrata la creazione di una classe derivata dall'oggetto <xref:System.Activities.Persistence.PersistenceParticipant>. Questo esempio si trova il [processo di assunzione](~/docs/framework/windows-workflow-foundation/samples/hiring-process.md) esempio.  
  
 [!code-csharp[wfs_HiringRequestProcess#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_hiringrequestprocess/cs/hiringrequestpersistenceparticipant.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PersistenceParticipant ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PersistenceParticipant();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inizializza un'istanza della classe <see cref="T:System.Activities.Persistence.PersistenceParticipant" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio di codice seguente viene mostrata la creazione di una classe derivata dall'oggetto <xref:System.Activities.Persistence.PersistenceParticipant>. Questo esempio si trova il [processo di assunzione](~/docs/framework/windows-workflow-foundation/samples/hiring-process.md) esempio.  
  
 [!code-csharp[wfs_HiringRequestProcess#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_hiringrequestprocess/cs/hiringrequestpersistenceparticipant.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectValues">
      <MemberSignature Language="C#" Value="protected virtual void CollectValues (out System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues, out System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; writeOnlyValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CollectValues([out] class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt;&amp; readWriteValues, [out] class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt;&amp; writeOnlyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub CollectValues (ByRef readWriteValues As IDictionary(Of XName, Object), ByRef writeOnlyValues As IDictionary(Of XName, Object))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void CollectValues([Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ % readWriteValues, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ % writeOnlyValues);" />
      <MemberSignature Language="F#" Value="abstract member CollectValues :  *  -&gt; unit&#xA;override this.CollectValues :  *  -&gt; unit" Usage="persistenceParticipant.CollectValues (readWriteValues, writeOnlyValues)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.IPersistencePipelineModule.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" RefType="out" />
        <Parameter Name="writeOnlyValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="readWriteValues">Valori di lettura e scrittura da rendere persistenti.</param>
        <param name="writeOnlyValues">Valori di sola scrittura da rendere persistenti.</param>
        <summary>Un host richiama questo metodo su un partecipante di persistenza personalizzato per raccogliere valori di lettura e scrittura e valori di sola scrittura, per l'impostazione della persistenza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'host comprime i valori di lettura e scrittura nel primo dizionario come oggetti <xref:System.Runtime.DurableInstancing.InstanceValue> di una raccolta di <xref:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceData*> e comprime i valori di sola scrittura nel secondo dizionario come oggetti <xref:System.Runtime.DurableInstancing.InstanceValue> con i flag <xref:System.Runtime.DurableInstancing.InstanceValueOptions.Optional> e <xref:System.Runtime.DurableInstancing.InstanceValueOptions.WriteOnly> impostati. Per ulteriori informazioni, vedere <xref:System.Runtime.DurableInstancing.InstanceValueOptions>.  
  
> [!IMPORTANT]
>  Il nome XName di ogni valore fornito dalle implementazioni di <xref:System.Activities.Persistence.PersistenceParticipant.CollectValues%2A> in tutti i partecipanti di persistenza all'interno di un episodio di persistenza deve essere univoco.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene mostrato l'utilizzo di CollectValues in una classe derivata dall'oggetto <xref:System.Activities.Persistence.PersistenceParticipant>. Questo esempio si trova il [partecipanti di persistenza](~/docs/framework/windows-workflow-foundation/persistence-participants.md) esempio.  
  
 [!code-csharp[wfs_PersistenceParticipants#2](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_persistenceparticipants/cs/stepcountextension.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapValues">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; MapValues (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues, System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; writeOnlyValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; MapValues(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; readWriteValues, class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; writeOnlyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.MapValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MapValues (readWriteValues As IDictionary(Of XName, Object), writeOnlyValues As IDictionary(Of XName, Object)) As IDictionary(Of XName, Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ MapValues(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ readWriteValues, System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ writeOnlyValues);" />
      <MemberSignature Language="F#" Value="abstract member MapValues : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; * System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt;&#xA;override this.MapValues : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; * System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt;" Usage="persistenceParticipant.MapValues (readWriteValues, writeOnlyValues)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.IPersistencePipelineModule.MapValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
        <Parameter Name="writeOnlyValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="readWriteValues">Valori di lettura e scrittura da rendere persistenti.</param>
        <param name="writeOnlyValues">Valori di sola scrittura da rendere persistenti.</param>
        <summary>Un host richiama questo metodo dopo avere raccolto i valori nella prima fase. L'host inoltra due dizionari di sola lettura di valori raccolti da tutti i partecipanti di persistenza durante la prima fase (fase CollectValues) a questo metodo per il mapping. L'host aggiunge i valori nel dizionario restituito da questo metodo alla raccolta di valori di sola scrittura.</summary>
        <returns>Dizionario che contiene valori di sola scrittura aggiuntivi da rendere persistenti.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome XName di ogni valore fornito dalle implementazioni di tutti i metodi <xref:System.Activities.Persistence.PersistenceParticipant.MapValues%2A> in tutti i partecipanti di persistenza inclusi tutti i valori raccolti nella prima fase (fase CollectValues) deve essere univoco.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene mostrato l'utilizzo di MapValues in una classe derivata dall'oggetto <xref:System.Activities.Persistence.PersistenceParticipant>. Questo esempio si trova il [processo di acquisto aziendale](~/docs/framework/windows-workflow-foundation/samples/corporate-purchase-process.md) esempio.  
  
 [!code-csharp[wfs_PurchaseProcess#2](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_purchaseprocess/cs/xmlpersistenceparticipant.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PublishValues">
      <MemberSignature Language="C#" Value="protected virtual void PublishValues (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void PublishValues(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; readWriteValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub PublishValues (readWriteValues As IDictionary(Of XName, Object))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void PublishValues(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ readWriteValues);" />
      <MemberSignature Language="F#" Value="abstract member PublishValues : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; -&gt; unit&#xA;override this.PublishValues : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; -&gt; unit" Usage="persistenceParticipant.PublishValues readWriteValues" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.IPersistencePipelineModule.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="readWriteValues">Valori di lettura e scrittura caricati dall'archivio di persistenza. Il dizionario corrisponde al dizionario di valori di lettura e scrittura persistenti nell'episodio di persistenza pi√π recente.</param>
        <summary>L'host richiama questo metodo e passa tutti i valori caricati nella raccolta <see cref="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceData" /> (compilata da <see cref="T:System.Activities.DurableInstancing.LoadWorkflowCommand" /> o <see cref="T:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand" />) come parametro di dizionario.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio di codice seguente viene mostrato l'utilizzo di PublishValues in una classe derivata dall'oggetto <xref:System.Activities.Persistence.PersistenceParticipant>. Questo esempio si trova il [partecipanti di persistenza](~/docs/framework/windows-workflow-foundation/persistence-participants.md) esempio.  
  
 [!code-csharp[wfs_PersistenceParticipants#2](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_persistenceparticipants/cs/stepcountextension.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>