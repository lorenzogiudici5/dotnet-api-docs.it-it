<Type Name="Catch&lt;TException&gt;" FullName="System.Activities.Statements.Catch&lt;TException&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ec2629b62993ab69bf188359612f59bb201e018f" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39835598" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Catch&lt;TException&gt; : System.Activities.Statements.Catch where TException : Exception" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Catch`1&lt;(class System.Exception) TException&gt; extends System.Activities.Statements.Catch" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Statements.Catch`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Catch(Of TException)&#xA;Inherits Catch" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TException&gt;&#xA; where TException : Exceptionpublic ref class Catch sealed : System::Activities::Statements::Catch" />
  <TypeSignature Language="F#" Value="type Catch&lt;'Exception (requires 'Exception :&gt; Exception)&gt; = class&#xA;    inherit Catch" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TException">
      <Constraints>
        <BaseTypeName>System.Exception</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Activities.Statements.Catch</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Windows.Markup.ContentProperty("Action")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TException">Il tipo di eccezione gestita dal blocco <see cref="T:System.Activities.Statements.Catch`1" />.</typeparam>
    <summary>Contiene le azioni da eseguire dopo che un'eccezione viene generata nel blocco Try corrispondente di un'attività <see cref="T:System.Activities.Statements.TryCatch.Finally" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una volta inserita nella finestra di progettazione, <xref:System.Activities.Statements.Catch> non è possibile riordinare le attività nella finestra di progettazione.  Per riordinare la raccolta di <xref:System.Activities.Statements.Catch> attività, eliminare e aggiungerli nuovamente nell'ordine corretto o usare la visualizzazione xaml (codice) per il flusso di lavoro.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito viene illustrata la creazione di un'attività <xref:System.Activities.Statements.Catch%601>. Questo esempio si trova il [la gestione degli errori in un diagramma di flusso attività usando TryCatch](~/docs/framework/windows-workflow-foundation/samples/fault-handling-in-a-flowchart-activity-using-trycatch.md) esempio.  
  
 [!code-csharp[wfs_FlowChartWithFaultHandling#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_flowchartwithfaulthandling/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Catch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Statements.Catch`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Catch();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Crea una nuova istanza della classe <see cref="T:System.Activities.Statements.Catch`1" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio di codice riportato di seguito viene illustrata la creazione di un'attività <xref:System.Activities.Statements.Catch%601>. Questo esempio si trova il [la gestione degli errori in un diagramma di flusso attività usando TryCatch](~/docs/framework/windows-workflow-foundation/samples/fault-handling-in-a-flowchart-activity-using-trycatch.md) esempio.  
  
 [!code-csharp[wfs_FlowChartWithFaultHandling#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_flowchartwithfaulthandling/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public System.Activities.ActivityAction&lt;TException&gt; Action { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.ActivityAction`1&lt;!TException&gt; Action" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Statements.Catch`1.Action" />
      <MemberSignature Language="VB.NET" Value="Public Property Action As ActivityAction(Of TException)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::ActivityAction&lt;TException&gt; ^ Action { System::Activities::ActivityAction&lt;TException&gt; ^ get(); void set(System::Activities::ActivityAction&lt;TException&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Action : System.Activities.ActivityAction&lt;'Exception (requires 'Exception :&gt; Exception)&gt; with get, set" Usage="System.Activities.Statements.Catch&lt;'Exception (requires 'Exception :&gt; System.Exception)&gt;.Action" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Activities.ActivityAction&lt;TException&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Il gestore per l'eccezione rilevata.</summary>
        <value>Azione di attività.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il gestore dell'eccezione è rappresentato da un oggetto <xref:System.Activities.ActivityAction%601>.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito viene illustrata l'assegnazione della proprietà Action di un'attività <xref:System.Activities.Statements.Catch%601>. Questo esempio si trova il [la gestione degli errori in un diagramma di flusso attività usando TryCatch](~/docs/framework/windows-workflow-foundation/samples/fault-handling-in-a-flowchart-activity-using-trycatch.md) esempio.  
  
 [!code-csharp[wfs_FlowChartWithFaultHandling#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_flowchartwithfaulthandling/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionType">
      <MemberSignature Language="C#" Value="public override Type ExceptionType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ExceptionType" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Statements.Catch`1.ExceptionType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ExceptionType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ExceptionType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionType : Type" Usage="System.Activities.Statements.Catch&lt;'Exception (requires 'Exception :&gt; System.Exception)&gt;.ExceptionType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Il tipo di eccezione gestita dal blocco <see cref="T:System.Activities.Statements.Catch" />.</summary>
        <value>Tipo di eccezione.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>