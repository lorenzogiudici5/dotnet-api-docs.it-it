<Type Name="CompensationExtension" FullName="System.Activities.Statements.CompensationExtension">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="23292d9ee9e7af7548f234fcb13c2544cf673656" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30355765" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CompensationExtension : System.Activities.Persistence.PersistenceParticipant, System.Activities.Hosting.IWorkflowInstanceExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CompensationExtension extends System.Activities.Persistence.PersistenceParticipant implements class System.Activities.Hosting.IWorkflowInstanceExtension" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Statements.CompensationExtension" />
  <TypeSignature Language="VB.NET" Value="Public Class CompensationExtension&#xA;Inherits PersistenceParticipant&#xA;Implements IWorkflowInstanceExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompensationExtension : System::Activities::Persistence::PersistenceParticipant, System::Activities::Hosting::IWorkflowInstanceExtension" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Activities.Persistence.PersistenceParticipant</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Activities.Hosting.IWorkflowInstanceExtension</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="3dc96-101">Rappresenta un'estensione che si associa alle attività di compensazione e rende persistente lo stato dell'istanza correlata alla compensazione.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3dc96-101">Represents an extension that hooks up with compensation activities and persists compensation-related instance state.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompensationExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Statements.CompensationExtension.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompensationExtension();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3dc96-102">Inizializza una nuova istanza della classe <see cref="T:System.Activities.Statements.CompensationExtension" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc96-102">Initializes a new instance of the <see cref="T:System.Activities.Statements.CompensationExtension" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectValues">
      <MemberSignature Language="C#" Value="protected override void CollectValues (out System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues, out System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; writeOnlyValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CollectValues([out] class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt;&amp; readWriteValues, [out] class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt;&amp; writeOnlyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Statements.CompensationExtension.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CollectValues (ByRef readWriteValues As IDictionary(Of XName, Object), ByRef writeOnlyValues As IDictionary(Of XName, Object))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CollectValues([Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ % readWriteValues, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ % writeOnlyValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;&amp;" RefType="out" />
        <Parameter Name="writeOnlyValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="readWriteValues">
          <span data-ttu-id="3dc96-103">Valori di lettura e scrittura da rendere persistenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc96-103">The read-write values to be persisted.</span>
          </span>
        </param>
        <param name="writeOnlyValues">
          <span data-ttu-id="3dc96-104">Valori di sola scrittura da rendere persistenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc96-104">The write-only values to be persisted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3dc96-105">Chiamato dall'host per raccogliere i valori di lettura e scrittura e i valori di sola scrittura correlati alla compensazione da rendere persistente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc96-105">Called by the host to collect read-write values and write-only values related to compensation to be persisted.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PublishValues">
      <MemberSignature Language="C#" Value="protected override void PublishValues (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void PublishValues(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; readWriteValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Statements.CompensationExtension.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub PublishValues (readWriteValues As IDictionary(Of XName, Object))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void PublishValues(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ readWriteValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="readWriteValues">
          <span data-ttu-id="3dc96-106">Valori di lettura e scrittura caricati dall'archivio di persistenza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc96-106">The read-write values that were loaded from the persistence store.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3dc96-107">Chiamato dall'host per passare tutti i valori caricati correlati alla compensazione che fa parte del più recente episodio di persistenza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc96-107">Called by the host to pass all of the loaded values related to compensation that were part of the most recent persistence episode.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;object&gt; IWorkflowInstanceExtension.GetAdditionalExtensions ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;object&gt; System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#GetAdditionalExtensions" />
      <MemberSignature Language="VB.NET" Value="Function GetAdditionalExtensions () As IEnumerable(Of Object) Implements IWorkflowInstanceExtension.GetAdditionalExtensions" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerable&lt;System::Object ^&gt; ^ System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions() = System::Activities::Hosting::IWorkflowInstanceExtension::GetAdditionalExtensions;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3dc96-108">Restituisce eventuali estensioni aggiuntive alle attività di compensazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc96-108">Returns any additional extensions to compensation activities.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3dc96-109">Raccolta di estensioni del flusso di lavoro aggiuntive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc96-109">A collection of additional workflow extensions.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance">
      <MemberSignature Language="C#" Value="void IWorkflowInstanceExtension.SetInstance (System.Activities.Hosting.WorkflowInstanceProxy instance);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance(class System.Activities.Hosting.WorkflowInstanceProxy instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#SetInstance(System.Activities.Hosting.WorkflowInstanceProxy)" />
      <MemberSignature Language="VB.NET" Value="Sub SetInstance (instance As WorkflowInstanceProxy) Implements IWorkflowInstanceExtension.SetInstance" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance(System::Activities::Hosting::WorkflowInstanceProxy ^ instance) = System::Activities::Hosting::IWorkflowInstanceExtension::SetInstance;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance(System.Activities.Hosting.WorkflowInstanceProxy)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Activities.Hosting.WorkflowInstanceProxy" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="3dc96-110">Istanza del flusso di lavoro di destinazione da impostare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc96-110">The target workflow instance to set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3dc96-111">Imposta eventuali estensioni aggiuntive alle attività di compensazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3dc96-111">Sets any additional extensions to compensation activities.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>