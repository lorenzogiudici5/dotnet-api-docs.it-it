<Type Name="ClaimsAuthorizationManager" FullName="System.Security.Claims.ClaimsAuthorizationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fe203cb2b223a3ac68111978dbba00b7d0fb80ef" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30489895" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ClaimsAuthorizationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthorizationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthorizationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthorizationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthorizationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Definisce l'implementazione di base per una gestione dell'autorizzazione delle attestazioni.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Security.Claims.ClaimsAuthorizationManager> classe fornisce l'implementazione di base per un gestore di autorizzazione delle attestazioni. Un gestore di autorizzazione delle attestazioni è utilizzabile nei due scenari seguenti:  
  
-   In servizi e applicazioni basate sul web, è possibile aggiungere un manager di autorizzazione delle attestazioni alla pipeline di elaborazione per fornire un punto di estensibilità da cui è possibile autorizzare l'accesso a una risorsa in base al valore di attestazioni in ingresso prima il codice dell'applicazione che in realtà implementa la risorsa richiesta è chiamata.  
  
-   Quando si utilizza il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> classe o <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> classe per eseguire l'accesso dichiarativo o imperativo basata sulle attestazioni verifica nel codice, la gestione di autorizzazione delle attestazioni che è configurata per l'applicazione viene chiamata dal sistema per eseguire il controllo. Controlli di accesso basato sulle attestazioni possono essere eseguiti applicazioni desktop e applicazioni basate sul web.  
  
 L'implementazione predefinita fornita dal <xref:System.Security.Claims.ClaimsAuthorizationManager> classe autorizza l'accesso per ogni attestazione presentati; tuttavia, è possibile derivare da questa classe ed eseguire l'override di <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> metodo per fornire la propria logica di autorizzazione.  
  
 L'utilizzo di un gestore di autorizzazione delle attestazioni è facoltativo. È possibile configurare l'applicazione per utilizzare un gestore autorizzazioni attestazioni a livello di codice tramite l'utilizzo di <xref:System.IdentityModel.Configuration.IdentityConfiguration> di classe o in modo dichiarativo, specificando il [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)elemento che è un elemento figlio del [ &lt;identityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) elemento nel file di configurazione dell'applicazione. Se l'applicazione è un sito web o un'applicazione web ospitata in Internet Information Services (IIS), è necessario aggiungere anche il <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> nella raccolta di moduli HTTP ASP.NET.  
  
> [!IMPORTANT]
>  Quando si utilizza il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> classe o <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> (classe), la gestione di autorizzazione delle attestazioni che viene utilizzata per eseguire il controllo di accesso è quello specificato nella configurazione di identità nel <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> proprietà. In un file di configurazione, è il `<identityConfiguration>` sezione in cui viene fatto riferimento dal valore predefinito `<federationConfiguration>` elemento. Questo vale anche per i servizi Windows Communication Foundation (WCF) e applicazioni desktop.  
  
 Il <xref:System.Security.Claims.ClaimsAuthorizationManager> classe di base non accetta ulteriori attività di configurazione; tuttavia, è possibile eseguire l'override di <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> nelle classi derivate per fornire l'inizializzazione della gestione da elementi figlio di autorizzazione delle attestazioni di `<claimsAuthorizationElement>`. Lo scenario tipico consiste nell'utilizzare questi elementi figlio per specificare i criteri di autorizzazione che determinano i tipi di attestazione e i valori sono necessarie per accedere a quali risorse. Questo non è un requisito di disco rigido, sebbene sia possibile definire le informazioni sull'utilizzo e la sintassi ha senso per l'implementazione.  
  
   
  
## Examples  
 Gli esempi di codice che vengono utilizzati nel <xref:System.Security.Claims.ClaimsAuthorizationManager> argomenti vengono prelevati i `Claims Based Authorization` esempio. In questo esempio fornisce un gestore autorizzazioni di attestazioni personalizzate che può autorizzare gli argomenti in base a un criterio specificato nella configurazione. Gestore autorizzazioni personalizzato attestazioni è costituito da tre componenti di base: una classe derivata da <xref:System.Security.Claims.ClaimsAuthorizationManager> che implementa la gestione di `ResourceAction` classe che le coppie di una risorsa e un'azione e un lettore di criteri che legge e compila i criteri di specificato nel file di configurazione. Questo compilati criteri può essere quindi utilizzato dal gestore di autorizzazione delle attestazioni per valutare un'entità per autorizzare l'accesso alle risorse. Non tutti gli elementi vengono visualizzati per ragioni di brevità. Per informazioni su questo esempio e altri esempi disponibili per WIF e sulla posizione in cui eseguirne il download, vedere [indice degli esempi di codice WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 Il codice seguente viene illustrata l'implementazione del gestore di autorizzazione di attestazioni personalizzate. Il <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> metodo legge e compila il criterio di configurazione utilizzando la classe helper del lettore criteri (non illustrata) e <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> metodo concede o nega l'accesso in base a questo criterio.  
  
 [!code-csharp[WifClaimsBasedAuthorization#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#2)]  
  
 Il codice seguente illustra la `ResourceAction` classe usato per la gestione di attestazioni personalizzate.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 Il codice XML seguente viene illustrato come configurare le attestazioni Gestione autorizzazioni illustrato in precedenza per un'applicazione web ospitata in IIS 7.5. Vengono visualizzati solo gli elementi specifici per la configurazione della gestione di autorizzazione delle attestazioni. Si noti che un riferimento di <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> classe deve essere aggiunto alla pipeline nel `<system.Webserver>` elemento. Per i siti e le applicazioni ospitate nelle versioni di IIS prima di IIS 7 è possono aggiungere i moduli alla pipeline nel `<system.Web>` elemento. Questa configurazione è illustrata ma impostate come commento.  
  
 I criteri utilizzati per la gestione di autorizzazione delle attestazioni sono specificato da personalizzato `<policy>` elementi sotto il [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) elemento. Nel primo criterio, l'entità deve disporre di una delle attestazioni specificate per eseguire l'azione specificata nella risorsa specificata. Nel secondo criterio, è necessario che l'entità disponga di entrambe le attestazioni per essere in grado di eseguire l'azione specificata nella risorsa specificata. In tutti gli altri, l'entità viene concesso automaticamente l'accesso indipendentemente dalle attestazioni che possiede.  
  
```  
<configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
        <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
          <or>  
            <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          </or>  
        </policy>  
        <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
          <and>  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
            <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
          </and>  
        </policy>  
        <policy resource="http://localhost:28491/Default.aspx" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
        </policy>  
      </claimsAuthorizationManager>  
  
      ...  
  
    </identityConfiguration>  
  </system.identityModel>  
  ...  
  
</configuration><configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="MyClaimsAuthorizationManager.SimpleClaimsAuthoirzationManager, MyClaimsAuthorizationManager" />  
      ...  
  
  </system.identityModel>  
  ...  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthorizationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthorizationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.Security.Claims.AuthorizationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.Security.Claims.AuthorizationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess(System.Security.Claims.AuthorizationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckAccess (context As AuthorizationContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::Security::Claims::AuthorizationContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Security.Claims.AuthorizationContext" />
      </Parameters>
      <Docs>
        <param name="context">Il contesto di autorizzazione che contiene l'oggetto, la risorsa e l'azione per cui deve essere controllata l'autorizzazione.</param>
        <summary>Una volta eseguita l'implementazione in una classe derivata, controlla l'autorizzazione per il soggetto nel contesto specificato per eseguire l'azione specificata nella risorsa specificata.</summary>
        <returns>
          <see langword="true" /> se il soggetto è autorizzato a eseguire l'azione specificata nella risorsa specificata; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Restituisce sempre l'implementazione di base `true`, che autorizza l'accesso. È possibile eseguire l'override di questo metodo in una classe derivata per autorizzare l'accesso in base ai requisiti dell'applicazione relying Party. Se questo metodo restituisce `false`, Windows Identity Foundation (WIF) viene restituito un errore non autorizzato al chiamante; in caso contrario, l'esecuzione è passata all'applicazione relying Party.  
  
   
  
## Examples  
 Gli esempi di codice che vengono utilizzati nel <xref:System.Security.Claims.ClaimsAuthorizationManager> argomenti vengono prelevati i `Claims Based Authorization` esempio. In questo esempio fornisce un gestore autorizzazioni di attestazioni personalizzate che può autorizzare gli argomenti in base a un criterio specificato nella configurazione. Gestore autorizzazioni personalizzato attestazioni è costituito da tre componenti di base: una classe derivata da <xref:System.Security.Claims.ClaimsAuthorizationManager> che implementa la gestione di `ResourceAction` classe che le coppie di una risorsa e un'azione e un lettore di criteri che legge e compila i criteri di specificato nel file di configurazione. Questo compilati criteri può essere quindi utilizzato dal gestore di autorizzazione delle attestazioni per valutare un'entità per autorizzare l'accesso alle risorse. Non tutti gli elementi vengono visualizzati per ragioni di brevità. Per informazioni su questo esempio e altri esempi disponibili per WIF e sulla posizione in cui eseguirne il download, vedere [indice degli esempi di codice WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 Il codice seguente viene illustrato l'override del <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> metodo. Questo metodo consente o nega l'accesso in base ai criteri di lettura e compilati dal file di configurazione.  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#5)]  
  
 Il codice seguente illustra la `ResourceAction` classe usato per la gestione di attestazioni personalizzate.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 I criteri utilizzati per la gestione di autorizzazione delle attestazioni sono specificato da personalizzato `<policy>` elementi sotto il [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) elemento. Questo criterio viene letta e compilato il <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> metodo. Nel primo criterio, l'entità deve disporre di una delle attestazioni specificate per eseguire l'azione specificata nella risorsa specificata. Nel secondo criterio, è necessario che l'entità disponga di entrambe le attestazioni per essere in grado di eseguire l'azione specificata nella risorsa specificata. In tutti gli altri, l'entità viene concesso automaticamente l'accesso indipendentemente dalle attestazioni che possiede.  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">Elementi di configurazione personalizzati. Ogni nodo nell'elenco è del tipo <see cref="T:System.Xml.XmlElement" />.</param>
        <summary>Quando sottoposto a override in una classe derivata, carica la configurazione personalizzata dall'XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> viene chiamato dall'infrastruttura di configurazione. Quando questo metodo viene chiamato, il `nodelist` conterrà gli elementi figlio di livello superiore del [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) elemento dal file di configurazione. Ognuno di questi elementi potrà contenere a sua volta, attributi o elementi figlio a seconda dello schema di configurazione che definisce per la classe derivata. Se viene visualizzato alcun elemento figlio sotto il `<claimsAuthorizationManager>` elemento nel file di configurazione, questo metodo non viene chiamato.  
  
 L'implementazione predefinita genera un <xref:System.NotImplementedException>. Eseguire l'override di questo metodo nella classe derivata per abilitare l'inizializzazione del gestore di autorizzazione delle attestazioni da un file di configurazione. In genere, gli elementi di configurazione consentono di esprimere un criterio di autorizzazione; Tuttavia, è possibile definire gli elementi e utilizzarle in modo significativo in base ai requisiti dell'applicazione.  
  
   
  
## Examples  
 Gli esempi di codice che vengono utilizzati nel <xref:System.Security.Claims.ClaimsAuthorizationManager> argomenti vengono prelevati i `Claims Based Authorization` esempio. In questo esempio fornisce un gestore autorizzazioni di attestazioni personalizzate che può autorizzare gli argomenti in base a un criterio specificato nella configurazione. Gestore autorizzazioni personalizzato attestazioni è costituito da tre componenti di base: una classe derivata da <xref:System.Security.Claims.ClaimsAuthorizationManager> che implementa la gestione di `ResourceAction` classe che le coppie di una risorsa e un'azione e un lettore di criteri che legge e compila i criteri di specificato nel file di configurazione. Questo compilati criteri può essere quindi utilizzato dal gestore di autorizzazione delle attestazioni per valutare un'entità per autorizzare l'accesso alle risorse. Non tutti gli elementi vengono visualizzati per ragioni di brevità. Per informazioni su questo esempio e altri esempi disponibili per WIF e sulla posizione in cui eseguirne il download, vedere [indice degli esempi di codice WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 Il codice seguente viene illustrato l'override del <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> metodo. Questo metodo utilizza una classe reader criteri di supporto (non illustrata) per leggere e compilare i criteri di autorizzazione specificati nel file di configurazione. I criteri vengono aggiunti a un dizionario e sono accessibili da un `ResourceAction` oggetto chiave creata dalla risorsa e l'azione per cui sono destinati.  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#4)]  
  
 Il codice seguente illustra la `ResourceAction` classe usato per la gestione di attestazioni personalizzate.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 I criteri utilizzati per la gestione di autorizzazione delle attestazioni sono specificato da personalizzato `<policy>` elementi sotto il [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) elemento. Questo criterio viene letta e compilato il <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> metodo. Nel primo criterio, l'entità deve disporre di una delle attestazioni specificate per eseguire l'azione specificata nella risorsa specificata. Nel secondo criterio, è necessario che l'entità disponga di entrambe le attestazioni per essere in grado di eseguire l'azione specificata nella risorsa specificata. In tutti gli altri, l'entità viene concesso automaticamente l'accesso indipendentemente dalle attestazioni che possiede.  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>