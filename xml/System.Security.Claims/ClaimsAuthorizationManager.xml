<Type Name="ClaimsAuthorizationManager" FullName="System.Security.Claims.ClaimsAuthorizationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fa77fc99c06460c962f41c33b11554f448051d19" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="36531910" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ClaimsAuthorizationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthorizationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthorizationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthorizationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthorizationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type ClaimsAuthorizationManager = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Definisce l'implementazione di base per una gestione dell'autorizzazione delle attestazioni.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Security.Claims.ClaimsAuthorizationManager> classe fornisce l'implementazione di base per un gestore di autorizzazione delle attestazioni. Un gestore di autorizzazione delle attestazioni è utilizzabile in due scenari seguenti:  
  
-   In servizi e applicazioni basate su web, è possibile aggiungere un gestore di autorizzazione delle attestazioni per la pipeline di elaborazione per fornire un punto di estensibilità da cui è possibile autorizzare l'accesso a una risorsa in base al valore delle attestazioni in ingresso prima il codice dell'applicazione che effettivamente implementa la risorsa richiesta viene chiamata.  
  
-   Quando si usa la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> classe o il <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> classe per eseguire l'accesso dichiarativo o imperativo basato sulle attestazioni verifica del codice, il gestore di autorizzazione delle attestazioni che è configurato per l'applicazione viene chiamato dal sistema per eseguire il controllo. Controllo di accesso basato sulle attestazioni può essere eseguito in entrambe le applicazioni web e applicazioni desktop.  
  
 L'implementazione predefinita fornita dal <xref:System.Security.Claims.ClaimsAuthorizationManager> classe autorizza l'accesso per ogni attestazione presentati; tuttavia, è possibile derivare da questa classe ed eseguire l'override di <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> metodo per fornire la propria logica di autorizzazione.  
  
 L'uso di un gestore di autorizzazione delle attestazioni è facoltativo. È possibile configurare l'applicazione per usare un gestore di autorizzazione delle attestazioni a livello di codice usando il <xref:System.IdentityModel.Configuration.IdentityConfiguration> classe o in modo dichiarativo, specificando le [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)elemento, che è un elemento figlio del [ &lt;identityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) elemento nel file di configurazione dell'applicazione. Se l'applicazione è un sito web o un'applicazione web ospitata in Internet Information Services (IIS), è necessario aggiungere anche il <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> nella raccolta di moduli HTTP ASP.NET.  
  
> [!IMPORTANT]
>  Quando si usa la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> classe o il <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> (classe), il gestore di autorizzazione delle attestazioni che consente di eseguire il controllo di accesso è quello specificato nella configurazione di identità nel <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> proprietà. In un file di configurazione è il `<identityConfiguration>` sezione in cui viene fatto riferimento dal valore predefinito `<federationConfiguration>` elemento. Questo vale anche per i servizi Windows Communication Foundation (WCF) e applicazioni desktop.  
  
 Il <xref:System.Security.Claims.ClaimsAuthorizationManager> classe di base non effettua alcuna configurazione aggiuntiva; tuttavia, è possibile eseguire l'override di <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> nelle classi derivate per fornire l'inizializzazione della gestione autorizzazione delle attestazioni da elementi figlio del `<claimsAuthorizationElement>`. Lo scenario tipico consiste nell'usare tali elementi figlio per specificare i criteri di autorizzazione che determinano quali tipi di attestazione e i valori sono necessari per ottenere l'accesso a quali risorse. Ciò non è un requisito fondamentale, anche se si possono definire qualsiasi utilizzo e la sintassi ha senso per l'implementazione.  
  
   
  
## Examples  
 Gli esempi di codice usati nel <xref:System.Security.Claims.ClaimsAuthorizationManager> argomenti vengono forniti dalla `Claims Based Authorization` esempio. Questo esempio fornisce un gestore autorizzazioni personalizzato attestazioni che può autorizzare gli oggetti in un criterio specificato nella configurazione di base. Il gestore autorizzazioni personalizzato delle attestazioni è costituito da tre componenti di base: una classe derivata da <xref:System.Security.Claims.ClaimsAuthorizationManager> che implementa la gestione di `ResourceAction` classe che abbina un'azione e una risorsa e un lettore di criteri che legge e consente di compilare criteri che è specificato nel file di configurazione. Questo compilato criterio può quindi essere utilizzato dal gestore di autorizzazione delle attestazioni per valutare un'entità per autorizzare l'accesso alle risorse. Non tutti gli elementi vengono visualizzati per brevità. Per informazioni su questo esempio e altri esempi disponibili per Windows Identity Foundation e su come eseguirne il download, vedere [indice degli esempi di codice di WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 Il codice seguente illustra l'implementazione del gestore di autorizzazione delle attestazioni personalizzate. Il <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> metodo legge e compila i criteri di configurazione usando la classe di helper di lettore di criteri (non mostrata) e il <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> metodo concede o nega l'accesso in base a questo criterio.  
  
 [!code-csharp[WifClaimsBasedAuthorization#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#2)]  
  
 Il codice seguente illustra il `ResourceAction` classe utilizzata dal gestore di attestazioni personalizzate.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 Il codice XML seguente viene illustrato come configurare le attestazioni Gestione autorizzazioni mostrato in precedenza per un'applicazione web ospitata in IIS 7.5. Vengono visualizzati solo gli elementi specifici per la configurazione del gestore di autorizzazione delle attestazioni. Si noti che un riferimento per la <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> classe deve essere aggiunto alla pipeline nel `<system.Webserver>` elemento. Per i siti e le applicazioni ospitate nelle versioni di IIS precedente a IIS 7 i moduli possono essere aggiunti alla pipeline nel `<system.Web>` elemento. Questa configurazione viene visualizzata ma impostata come commento.  
  
 I criteri usati dal gestore di autorizzazione delle attestazioni sono specificato da custom `<policy>` elementi sotto la [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) elemento. Nel primo criterio, l'entità deve disporre di una delle attestazioni specificate per eseguire l'azione specificata nella risorsa specificata. Nel secondo criterio, l'entità deve disporre di entrambe le attestazioni per essere in grado di eseguire l'azione specificata nella risorsa specificata. In tutti gli altri, l'entità viene concesso automaticamente all'accesso indipendentemente dalle attestazioni che e possiede.  
  
```  
<configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
        <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
          <or>  
            <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          </or>  
        </policy>  
        <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
          <and>  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
            <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
          </and>  
        </policy>  
        <policy resource="http://localhost:28491/Default.aspx" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
        </policy>  
      </claimsAuthorizationManager>  
  
      ...  
  
    </identityConfiguration>  
  </system.identityModel>  
  ...  
  
</configuration><configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="MyClaimsAuthorizationManager.SimpleClaimsAuthoirzationManager, MyClaimsAuthorizationManager" />  
      ...  
  
  </system.identityModel>  
  ...  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthorizationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthorizationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.Security.Claims.AuthorizationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.Security.Claims.AuthorizationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess(System.Security.Claims.AuthorizationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckAccess (context As AuthorizationContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::Security::Claims::AuthorizationContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool&#xA;override this.CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool" Usage="claimsAuthorizationManager.CheckAccess context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Security.Claims.AuthorizationContext" />
      </Parameters>
      <Docs>
        <param name="context">Il contesto di autorizzazione che contiene l'oggetto, la risorsa e l'azione per cui deve essere controllata l'autorizzazione.</param>
        <summary>Una volta eseguita l'implementazione in una classe derivata, controlla l'autorizzazione per il soggetto nel contesto specificato per eseguire l'azione specificata nella risorsa specificata.</summary>
        <returns>
          <see langword="true" /> se il soggetto è autorizzato a eseguire l'azione specificata nella risorsa specificata; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Restituisce sempre l'implementazione di base `true`, che autorizza l'accesso. È possibile eseguire l'override di questo metodo in una classe derivata per autorizzare l'accesso in base ai requisiti dell'applicazione relying Party. Se questo metodo restituisce `false`, Windows Identity Foundation (WIF) viene restituito un errore non autorizzato al chiamante; in caso contrario, l'esecuzione viene passata all'applicazione relying Party.  
  
   
  
## Examples  
 Gli esempi di codice usati nel <xref:System.Security.Claims.ClaimsAuthorizationManager> argomenti vengono forniti dalla `Claims Based Authorization` esempio. Questo esempio fornisce un gestore autorizzazioni personalizzato attestazioni che può autorizzare gli oggetti in un criterio specificato nella configurazione di base. Il gestore autorizzazioni personalizzato delle attestazioni è costituito da tre componenti di base: una classe derivata da <xref:System.Security.Claims.ClaimsAuthorizationManager> che implementa la gestione di `ResourceAction` classe che abbina un'azione e una risorsa e un lettore di criteri che legge e consente di compilare criteri che è specificato nel file di configurazione. Questo compilato criterio può quindi essere utilizzato dal gestore di autorizzazione delle attestazioni per valutare un'entità per autorizzare l'accesso alle risorse. Non tutti gli elementi vengono visualizzati per brevità. Per informazioni su questo esempio e altri esempi disponibili per Windows Identity Foundation e su come eseguirne il download, vedere [indice degli esempi di codice di WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 Il codice seguente illustra l'override del <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> (metodo). Questo metodo concede o nega l'accesso basato su un criterio letti e compilati dal file di configurazione.  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#5)]  
  
 Il codice seguente illustra il `ResourceAction` classe utilizzata dal gestore di attestazioni personalizzate.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 I criteri usati dal gestore di autorizzazione delle attestazioni sono specificato da custom `<policy>` elementi sotto la [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) elemento. Questo criterio viene letta e compilato il <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> (metodo). Nel primo criterio, l'entità deve disporre di una delle attestazioni specificate per eseguire l'azione specificata nella risorsa specificata. Nel secondo criterio, l'entità deve disporre di entrambe le attestazioni per essere in grado di eseguire l'azione specificata nella risorsa specificata. In tutti gli altri, l'entità viene concesso automaticamente all'accesso indipendentemente dalle attestazioni che e possiede.  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="claimsAuthorizationManager.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">Elementi di configurazione personalizzati. Ogni nodo nell'elenco è del tipo <see cref="T:System.Xml.XmlElement" />.</param>
        <summary>Quando sottoposto a override in una classe derivata, carica la configurazione personalizzata dall'XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> viene chiamato dall'infrastruttura di configurazione. Quando questo metodo viene chiamato, il `nodelist` conterrà gli elementi figlio di primo livello del [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) elemento dal file di configurazione. Ognuno di questi elementi può, a sua volta, contengono attributi o elementi figlio a seconda dello schema di configurazione che definisce per la classe derivata. Se nessun elemento figlio viene visualizzato sotto il `<claimsAuthorizationManager>` elemento nel file di configurazione, questo metodo non viene chiamato.  
  
 L'implementazione predefinita genera un <xref:System.NotImplementedException>. Eseguire l'override di questo metodo nella classe derivata per abilitare l'inizializzazione della gestione autorizzazione delle attestazioni da un file di configurazione. In genere, gli elementi di configurazione vengono utilizzati per esprimere un criterio di autorizzazione; Tuttavia, è possibile definire gli elementi e usarle in qualsiasi modo adatto in base ai requisiti dell'applicazione.  
  
   
  
## Examples  
 Gli esempi di codice usati nel <xref:System.Security.Claims.ClaimsAuthorizationManager> argomenti vengono forniti dalla `Claims Based Authorization` esempio. Questo esempio fornisce un gestore autorizzazioni personalizzato attestazioni che può autorizzare gli oggetti in un criterio specificato nella configurazione di base. Il gestore autorizzazioni personalizzato delle attestazioni è costituito da tre componenti di base: una classe derivata da <xref:System.Security.Claims.ClaimsAuthorizationManager> che implementa la gestione di `ResourceAction` classe che abbina un'azione e una risorsa e un lettore di criteri che legge e consente di compilare criteri che è specificato nel file di configurazione. Questo compilato criterio può quindi essere utilizzato dal gestore di autorizzazione delle attestazioni per valutare un'entità per autorizzare l'accesso alle risorse. Non tutti gli elementi vengono visualizzati per brevità. Per informazioni su questo esempio e altri esempi disponibili per Windows Identity Foundation e su come eseguirne il download, vedere [indice degli esempi di codice di WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 Il codice seguente illustra l'override del <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> (metodo). Questo metodo Usa una classe di lettore di criteri di supporto (non mostrata) per leggere e compilare i criteri di autorizzazione specificati nel file di configurazione. I criteri vengono aggiunti a un dizionario e sono accessibili da un `ResourceAction` oggetto chiave di cui viene creato dalla risorsa e l'azione per cui sono destinati.  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#4)]  
  
 Il codice seguente illustra il `ResourceAction` classe utilizzata dal gestore di attestazioni personalizzate.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 I criteri usati dal gestore di autorizzazione delle attestazioni sono specificato da custom `<policy>` elementi sotto la [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) elemento. Questo criterio viene letta e compilato il <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> (metodo). Nel primo criterio, l'entità deve disporre di una delle attestazioni specificate per eseguire l'azione specificata nella risorsa specificata. Nel secondo criterio, l'entità deve disporre di entrambe le attestazioni per essere in grado di eseguire l'azione specificata nella risorsa specificata. In tutti gli altri, l'entità viene concesso automaticamente all'accesso indipendentemente dalle attestazioni che e possiede.  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>