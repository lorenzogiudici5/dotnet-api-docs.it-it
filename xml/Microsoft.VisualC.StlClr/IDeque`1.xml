<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IDeque`1.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac515a9eccabe0eb808d09c01231621eb986f2b2d3b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">15a9eccabe0eb808d09c01231621eb986f2b2d3b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualC.StlClr.IDeque`1">
          <source>The type that is contained.</source>
          <target state="translated">Tipo contenuto.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.IDeque`1">
          <source>Defines the interface of an STL/CLR <bpt id="p1">&lt;c&gt;</bpt>deque<ept id="p1">&lt;/c&gt;</ept> object.</source>
          <target state="translated">Definisce l'interfaccia di un oggetto <bpt id="p1">&lt;c&gt;</bpt>deque<ept id="p1">&lt;/c&gt;</ept> STL/CLR.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualC.StlClr.IDeque`1">
          <source>For more information, see <bpt id="p1">[</bpt>deque (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.IDeque`1">
          <source>Replaces all elements of the container with the given elements.</source>
          <target state="translated">Sostituisce tutti gli elementi del contenitore con gli elementi indicati.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualC.StlClr.IDeque`1">
          <source>For more information, see <bpt id="p1">[</bpt>deque::assign (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-assign-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: Assign (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-assign-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Collections.IEnumerable)">
          <source>The enumeration to insert into the container.</source>
          <target state="translated">Enumerazione da inserire nel contenitore.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Collections.IEnumerable)">
          <source>Replaces all elements of the container with the elements in the given <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> object.</source>
          <target state="translated">Sostituisce tutti gli elementi del contenitore con gli elementi dell'oggetto <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> fornito.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Collections.IEnumerable)">
          <source>For more information, see <bpt id="p1">[</bpt>deque::assign (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-assign-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: Assign (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-assign-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>The starting position of the range to insert into the container.</source>
          <target state="translated">La posizione iniziale dell'intervallo da inserire nel contenitore.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>The first position beyond the end of the range to insert into the container.</source>
          <target state="translated">La prima posizione oltre la fine dell'intervallo di elementi da inserire nel contenitore.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>Replaces all elements of the container with the elements specified by the given <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> objects.</source>
          <target state="translated">Sostituisce tutti gli elementi del contenitore con gli elementi specificati dagli oggetti <ph id="ph1">&lt;see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /&gt;</ph> forniti.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>For more information, see <bpt id="p1">[</bpt>deque::assign (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-assign-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: Assign (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-assign-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Int32,`0)">
          <source>The number of elements to insert into the container.</source>
          <target state="translated">Numero di elementi da inserire nel contenitore.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Int32,`0)">
          <source>The value of the element to insert into the container.</source>
          <target state="translated">Valore dell'elemento da inserire nel contenitore.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Int32,`0)">
          <source>Replaces all elements of the container with the given number of specified elements.</source>
          <target state="translated">Sostituisce tutti gli elementi del contenitore con il numero indicato di elementi specificati.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Int32,`0)">
          <source>For more information, see <bpt id="p1">[</bpt>deque::assign (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-assign-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: Assign (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-assign-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.at(System.Int32)">
          <source>Position of element to access.</source>
          <target state="translated">Posizione dell'elemento a cui accedere.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.at(System.Int32)">
          <source>Accesses an element at a specified position in the container.</source>
          <target state="translated">Accede a un elemento in una posizione specificata nel contenitore.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.at(System.Int32)">
          <source>The element of the controlled sequence at position <ph id="ph1">&lt;paramref name="pos" /&gt;</ph>.</source>
          <target state="translated">Elemento della sequenza controllata in corrispondenza della posizione <ph id="ph1">&lt;paramref name="pos" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.at(System.Int32)">
          <source>For more information, see <bpt id="p1">[</bpt>deque::at (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-at-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: AT (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-at-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.back">
          <source>Accesses the last element of the container.</source>
          <target state="translated">Accede all'ultimo elemento del contenitore.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.back">
          <source>The last element of the controlled sequence, which must be non-empty.</source>
          <target state="translated">L'ultimo elemento della sequenza controllata, che non deve essere vuota.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.back">
          <source>For more information, see <bpt id="p1">[</bpt>deque::back (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-back-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: back (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-back-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualC.StlClr.IDeque`1.back_item">
          <source>Accesses the last element of a non-empty <bpt id="p1">&lt;c&gt;</bpt>deque<ept id="p1">&lt;/c&gt;</ept> collection.</source>
          <target state="translated">Accede all'ultimo elemento di una raccolta <bpt id="p1">&lt;c&gt;</bpt>deque<ept id="p1">&lt;/c&gt;</ept> non vuota.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualC.StlClr.IDeque`1.back_item">
          <source>The last element of the controlled sequence.</source>
          <target state="translated">L'ultimo elemento della sequenza controllata.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualC.StlClr.IDeque`1.back_item">
          <source>For more information, see <bpt id="p1">[</bpt>deque::back_item (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-back-item-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: back_item (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-back-item-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
          <source>Designates the beginning of the controlled sequence.</source>
          <target state="translated">Indica l'inizio della sequenza controllata.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
          <source>An iterator.</source>
          <target state="translated">Iteratore.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
          <source>For more information, see <bpt id="p1">[</bpt>deque::begin (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-begin-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: Begin (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-begin-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.begin_bias">
          <source>Gets the bias of the beginning of the current sequence.</source>
          <target state="translated">Ottiene la deviazione dell'inizio della sequenza corrente.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.begin_bias">
          <source>The bias is the offset of the current element zero.</source>
          <target state="translated">La deviazione è l'offset dell'elemento zero corrente.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.begin_bias">
          <source>The bias of the beginning of the current sequence.</source>
          <target state="translated">Deviazione dell'inizio della sequenza corrente.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.clear">
          <source>Removes all elements in the container.</source>
          <target state="translated">Rimuove tutti gli elementi nel contenitore.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.clear">
          <source>For more information, see <bpt id="p1">[</bpt>deque::clear (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-clear-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: Clear (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-clear-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.empty">
          <source>Tests whether the container holds no elements.</source>
          <target state="translated">Verifica se il contenitore non contiene alcun elemento.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.empty">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the container is empty; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se il contenitore è vuoto; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.empty">
          <source>For more information, see <bpt id="p1">[</bpt>deque::empty (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-empty-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: Empty (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-empty-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
          <source>Designates the end of the controlled sequence.</source>
          <target state="translated">Designa la fine della sequenza controllata.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
          <source>An iterator.</source>
          <target state="translated">Iteratore.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
          <source>For more information, see <bpt id="p1">[</bpt>deque::end (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-end-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: end (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-end-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.end_bias">
          <source>Gets the bias of the end of the current sequence.</source>
          <target state="translated">Ottiene la deviazione della fine della sequenza corrente.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.end_bias">
          <source>The bias is the offset of the current element zero.</source>
          <target state="translated">La deviazione è l'offset dell'elemento zero corrente.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.end_bias">
          <source>The bias of the end of the current sequence.</source>
          <target state="translated">Deviazione della fine della sequenza corrente.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.IDeque`1">
          <source>Removes elements at specified positions.</source>
          <target state="translated">Rimuove gli elementi in corrispondenza delle posizioni specificate.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualC.StlClr.IDeque`1">
          <source>For more information, see <bpt id="p1">[</bpt>deque::erase (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-erase-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: Erase (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-erase-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
          <source>The element to erase.</source>
          <target state="translated">Elemento da cancellare.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
          <source>Removes the element at the specified position.</source>
          <target state="translated">Rimuove l'elemento in corrispondenza della posizione specificata.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
          <source>An iterator.</source>
          <target state="translated">Iteratore.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
          <source>For more information, see <bpt id="p1">[</bpt>deque::erase (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-erase-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: Erase (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-erase-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
          <source>The beginning position of the range to erase.</source>
          <target state="translated">La posizione iniziale dell'intervallo da cancellare.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
          <source>The position one beyond the last element of the range to erase.</source>
          <target state="translated">La prima posizione oltre l'ultimo elemento dell'intervallo da cancellare.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
          <source>Removes the elements between the specified iterators.</source>
          <target state="translated">Rimuove gli elementi compresi tra gli iteratori specificati.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
          <source>An iterator.</source>
          <target state="translated">Iteratore.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
          <source>For more information, see <bpt id="p1">[</bpt>deque::erase (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-erase-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: Erase (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-erase-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.front">
          <source>Accesses the first element of the container.</source>
          <target state="translated">Accede al primo elemento del contenitore.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.front">
          <source>The first element of the controlled sequence, which must be non-empty.</source>
          <target state="translated">Primo elemento della sequenza controllata, che non deve essere vuota.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.front">
          <source>For more information, see <bpt id="p1">[</bpt>deque::front (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-front-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: front (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-front-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualC.StlClr.IDeque`1.front_item">
          <source>Accesses the first element of a non-empty <bpt id="p1">&lt;c&gt;</bpt>deque<ept id="p1">&lt;/c&gt;</ept> collection.</source>
          <target state="translated">Accede al primo elemento di una raccolta <bpt id="p1">&lt;c&gt;</bpt>deque<ept id="p1">&lt;/c&gt;</ept> non vuota.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualC.StlClr.IDeque`1.front_item">
          <source>The first element of the controlled sequence.</source>
          <target state="translated">Primo elemento della sequenza controllata.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualC.StlClr.IDeque`1.front_item">
          <source>For more information, see <bpt id="p1">[</bpt>deque::front_item (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-front-item-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: front_item (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-front-item-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.IDeque`1">
          <source>Adds elements at a specified position in the container.</source>
          <target state="translated">Aggiunge elementi nel contenitore alla posizione specificata.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualC.StlClr.IDeque`1">
          <source>For more information, see <bpt id="p1">[</bpt>deque::insert (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-insert-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: Insert (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-insert-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)">
          <source>The location in the container in front of which to insert.</source>
          <target state="translated">Posizione nel contenitore precedente a quella nella quale inserire.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)">
          <source>The enumeration of elements to insert into the container.</source>
          <target state="translated">Enumerazione degli elementi da inserire nel contenitore.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)">
          <source>Adds elements at a specified position in the container.</source>
          <target state="translated">Aggiunge elementi nel contenitore alla posizione specificata.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)">
          <source>For more information, see <bpt id="p1">[</bpt>deque::insert (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-insert-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: Insert (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-insert-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>The location in the container in front of which to insert.</source>
          <target state="translated">Posizione nel contenitore precedente a quella nella quale inserire.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>The beginning of the range to insert into the container.</source>
          <target state="translated">La posizione iniziale dell'intervallo da inserire nel contenitore.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>The first position beyond the end of the range to insert into the container.</source>
          <target state="translated">La prima posizione oltre la fine dell'intervallo di elementi da inserire nel contenitore.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>Adds elements at a specified position in the container.</source>
          <target state="translated">Aggiunge elementi nel contenitore alla posizione specificata.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
          <source>For more information, see <bpt id="p1">[</bpt>deque::insert (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-insert-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: Insert (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-insert-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)">
          <source>The location in the container in front of which to insert.</source>
          <target state="translated">Posizione nel contenitore precedente a quella nella quale inserire.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)">
          <source>The number of elements to insert into the container.</source>
          <target state="translated">Numero di elementi da inserire nel contenitore.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)">
          <source>The value of the elements to be inserted into the container.</source>
          <target state="translated">Valore degli elementi da inserire nel contenitore.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)">
          <source>Adds the given number of elements at a specified position in the container.</source>
          <target state="translated">Aggiunge il numero indicato di elementi alla posizione specificata nel contenitore.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)">
          <source>For more information, see <bpt id="p1">[</bpt>deque::insert (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-insert-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: Insert (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-insert-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)">
          <source>The location in the container in front of which to insert.</source>
          <target state="translated">Posizione nel contenitore precedente a quella nella quale inserire.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)">
          <source>The element to be inserted into the container.</source>
          <target state="translated">Elemento da inserire nel contenitore.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)">
          <source>Adds an element at a specified position in the container.</source>
          <target state="translated">Aggiunge un elemento nel contenitore alla posizione specificata.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)">
          <source>An iterator.</source>
          <target state="translated">Iteratore.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)">
          <source>For more information, see <bpt id="p1">[</bpt>deque::insert (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-insert-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: Insert (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-insert-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualC.StlClr.IDeque`1.Item(System.Int32)">
          <source>The position of the element to get or set.</source>
          <target state="translated">Posizione dell'elemento da ottenere o impostare.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualC.StlClr.IDeque`1.Item(System.Int32)">
          <source>Gets or sets the element at the indicated position in the container.</source>
          <target state="translated">Ottiene o imposta l'elemento che indica la posizione nel contenitore.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualC.StlClr.IDeque`1.Item(System.Int32)">
          <source>The element at the indicated position.</source>
          <target state="translated">Elemento alla posizione indicata.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualC.StlClr.IDeque`1.Item(System.Int32)">
          <source>For more information, see <bpt id="p1">[</bpt>deque::operator(STL/CLR)<ept id="p1">](/cpp/dotnet/deque-operator-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque::operator(STL/CLR)<ept id="p1">](/cpp/dotnet/deque-operator-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.pop_back">
          <source>Removes the last element of a non-empty container.</source>
          <target state="translated">Rimuove l'ultimo elemento da un contenitore non vuoto.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.pop_back">
          <source>For more information, see <bpt id="p1">[</bpt>deque::pop_back (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-pop-back-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: pop_back (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-pop-back-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.pop_front">
          <source>Removes the first element of a non-empty container.</source>
          <target state="translated">Rimuove il primo elemento da un contenitore non vuoto.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.pop_front">
          <source>For more information, see <bpt id="p1">[</bpt>deque::pop_front (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-pop-front-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: pop_front (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-pop-front-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.push_back(`0)">
          <source>The element to append to the end of the container.</source>
          <target state="translated">Elemento da aggiungere alla fine del contenitore.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.push_back(`0)">
          <source>Adds an element to the end of a container.</source>
          <target state="translated">Aggiunge un elemento alla fine del contenitore.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.push_back(`0)">
          <source>For more information, see <bpt id="p1">[</bpt>deque::push_back (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-push-back-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: push_back (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-push-back-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.push_front(`0)">
          <source>The element to add to the beginning of the container.</source>
          <target state="translated">Elemento da aggiungere all'inizio del contenitore.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.push_front(`0)">
          <source>Adds an element to the beginning of a container.</source>
          <target state="translated">Aggiunge un elemento all'inizio di un contenitore.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.push_front(`0)">
          <source>For more information, see <bpt id="p1">[</bpt>deque::push_front (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-push-front-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: push_front (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-push-front-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
          <source>Designates the beginning of the reversed controlled sequence.</source>
          <target state="translated">Indica l'inizio della sequenza controllata inversa.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
          <source>An iterator.</source>
          <target state="translated">Iteratore.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
          <source>For more information, see <bpt id="p1">[</bpt>deque::rbegin (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-rbegin-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: rbegin (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-rbegin-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
          <source>Designates the end of the reversed controlled sequence.</source>
          <target state="translated">Indica la fine della sequenza controllata inversa.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
          <source>An iterator.</source>
          <target state="translated">Iteratore.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
          <source>For more information, see <bpt id="p1">[</bpt>deque::rend (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-rend-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: rend (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-rend-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualC.StlClr.IDeque`1">
          <source>Changes the number of elements.</source>
          <target state="translated">Modifica il numero di elementi.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualC.StlClr.IDeque`1">
          <source>For more information, see <bpt id="p1">[</bpt>deque::resize (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-resize-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: resize (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-resize-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32)">
          <source>The new size of the controlled sequence.</source>
          <target state="translated">La nuova dimensione della sequenza controllata.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32)">
          <source>Changes the number of elements.</source>
          <target state="translated">Modifica il numero di elementi.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32)">
          <source>For more information, see <bpt id="p1">[</bpt>deque::resize (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-resize-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: resize (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-resize-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32,`0)">
          <source>The new size of the controlled sequence.</source>
          <target state="translated">La nuova dimensione della sequenza controllata.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32,`0)">
          <source>The value of the padding element.</source>
          <target state="translated">Valore dell'elemento di spaziatura.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32,`0)">
          <source>Changes the number of elements.</source>
          <target state="translated">Modifica il numero di elementi.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32,`0)">
          <source>For more information, see <bpt id="p1">[</bpt>deque::resize (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-resize-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: resize (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-resize-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.size">
          <source>Counts the number of elements.</source>
          <target state="translated">Conta il numero di elementi.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.size">
          <source>The length of the controlled sequence.</source>
          <target state="translated">Lunghezza della sequenza controllata.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.size">
          <source>For more information, see <bpt id="p1">[</bpt>deque::size (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-size-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: Size (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-size-stl-clr)</ept>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.swap(Microsoft.VisualC.StlClr.IDeque{`0})">
          <source>Container to swap contents with.</source>
          <target state="translated">Contenitore con cui scambiare il contenuto.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualC.StlClr.IDeque`1.swap(Microsoft.VisualC.StlClr.IDeque{`0})">
          <source>Swaps the contents of two containers.</source>
          <target state="translated">Scambia il contenuto di due contenitori.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualC.StlClr.IDeque`1.swap(Microsoft.VisualC.StlClr.IDeque{`0})">
          <source>For more information, see <bpt id="p1">[</bpt>deque::swap (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-swap-stl-clr)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>deque:: swap (STL/CLR)<ept id="p1">](/cpp/dotnet/deque-swap-stl-clr)</ept>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>