<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TransactionScope.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5867d154cb09fe9a3f2d65475772ad0363add7e98.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">867d154cb09fe9a3f2d65475772ad0363add7e98</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Transactions.TransactionScope">
          <source>Makes a code block transactional.</source>
          <target state="translated">Rende transazionale un blocco di codice.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Transactions.TransactionScope">
          <source>This class cannot be inherited.</source>
          <target state="translated">Questa classe non può essere ereditata.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>The <ph id="ph1">&lt;xref:System.Transactions&gt;</ph> infrastructure provides both an explicit programming model based on the <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph> class, as well as an implicit programming model using the <ph id="ph3">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class, in which transactions are automatically managed by the infrastructure.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Transactions&gt;</ph> infrastruttura offre un modello di programmazione esplicito basato sul <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph> classe, nonché un modello di programmazione implicito mediante la <ph id="ph3">&lt;xref:System.Transactions.TransactionScope&gt;</ph> (classe), in cui le transazioni vengono gestite automaticamente dall'infrastruttura.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>We recommend that you create implicit transactions using the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class, so that the ambient transaction context is automatically managed for you.</source>
          <target state="translated">È consigliabile creare transazioni implicite utilizzando la <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> classe, in modo che il contesto di transazione di ambiente viene gestito automaticamente.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>You should also use the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> and <ph id="ph2">&lt;xref:System.Transactions.DependentTransaction&gt;</ph> class for applications that require the use of the same transaction across multiple function calls or multiple thread calls.</source>
          <target state="translated">È inoltre possibile utilizzare il <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> e <ph id="ph2">&lt;xref:System.Transactions.DependentTransaction&gt;</ph> classe per le applicazioni che richiedono l'utilizzo della stessa transazione tra più chiamate di funzione o chiamate di più thread.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>For more information on this model, see the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> topic.</source>
          <target state="translated">Per ulteriori informazioni su questo modello, vedere il <bpt id="p1">[</bpt>implementazione un implicita delle transazioni con ambito di transazione<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> argomento.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>For more information on writing a transactional application, see <bpt id="p1">[</bpt>Writing A Transactional Application<ept id="p1">](~/docs/framework/data/transactions/writing-a-transactional-application.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sulla scrittura di un'applicazione transazionale, vedere <bpt id="p1">[</bpt>la scrittura di applicazioni transazionali A<ept id="p1">](~/docs/framework/data/transactions/writing-a-transactional-application.md)</ept>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>Upon instantiating a <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> by the <ph id="ph2">`new`</ph> statement, the transaction manager determines which transaction to participate in.</source>
          <target state="translated">Al momento di creare un'istanza di un <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> dal <ph id="ph2">`new`</ph> istruzione, il gestore delle transazioni determina la transazione a partecipare.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>Once determined, the scope always participates in that transaction.</source>
          <target state="translated">Una volta deciso, l'ambito partecipa sempre a quella transazione.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>The decision is based on two factors: whether an ambient transaction is present and the value of the <ph id="ph1">`TransactionScopeOption`</ph> parameter in the constructor.</source>
          <target state="translated">La decisione si basa su due fattori: la presenza di una transazione di ambiente e il valore del parametro <ph id="ph1">`TransactionScopeOption`</ph> del costruttore.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>The ambient transaction is the transaction your code executes in.</source>
          <target state="translated">La transazione di ambiente è la transazione eseguita dal codice.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>You can obtain a reference to the ambient transaction by calling the static <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A?displayProperty=nameWithType&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph> class.</source>
          <target state="translated">Per ottenere un riferimento a questa transazione è possibile chiamare la proprietà <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A?displayProperty=nameWithType&gt;</ph> statica della classe <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>For more information on how this parameter is used, see the "Transaction Flow Management" section of the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> topic.</source>
          <target state="translated">Per ulteriori informazioni sull'utilizzo di questo parametro, vedere la sezione "Gestione del flusso delle transazioni" del <bpt id="p1">[</bpt>implementazione un implicita delle transazioni con ambito di transazione<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> argomento.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>If no exception occurs within the transaction scope (that is, between the initialization of the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object and the calling of its <ph id="ph2">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph> method), then the transaction in which the scope participates is allowed to proceed.</source>
          <target state="translated">Se si verifica alcuna eccezione nell'ambito della transazione (vale a dire tra l'inizializzazione del <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> oggetto e la chiamata al relativo <ph id="ph2">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph> (metodo)), quindi la transazione di cui fa parte l'ambito può continuare.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>If an exception does occur within the transaction scope, the transaction in which it participates will be rolled back.</source>
          <target state="translated">Se si verifica un'eccezione nell'ambito della transazione, verrà eseguito il rollback della transazione di cui fa parte.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>When your application completes all work it wants to perform in a transaction, you should call the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Complete%2A&gt;</ph> method only once to inform that transaction manager that it is acceptable to commit the transaction.</source>
          <target state="translated">Quando l'applicazione ha completato tutte le operazioni che si desidera eseguire in una transazione, è necessario chiamare il <ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Complete%2A&gt;</ph> metodo solo una volta per informare un gestore delle transazioni che può essere eseguito il commit della transazione.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>Failing to call this method aborts the transaction.</source>
          <target state="translated">Impossibile chiamare questo metodo interrompe la transazione.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>A call to the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph> method marks the end of the transaction scope.</source>
          <target state="translated">Una chiamata al <ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph> metodo contrassegna la fine dell'ambito della transazione.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>Exceptions that occur after calling this method may not affect the transaction.</source>
          <target state="translated">Le eccezioni che si verificano dopo la chiamata a questo metodo potrebbero non avere alcun effetto sulla transazione.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>If you modify the value of <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph> inside a scope, an exception is thrown when <ph id="ph2">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph> is called.</source>
          <target state="translated">Se si modifica il valore di <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph> all'interno di un ambito, viene generata un'eccezione quando <ph id="ph2">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph> viene chiamato.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>However, at the end of the scope, the previous value is restored.</source>
          <target state="translated">Tuttavia, al termine dell'ambito, viene ripristinato il valore precedente.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>In addition, if you call <ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph> on <ph id="ph2">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph> inside a transaction scope that created the transaction, the transaction aborts at the end of the scope.</source>
          <target state="translated">Inoltre, se si chiama <ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph> su <ph id="ph2">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph> all'interno di un ambito di transazione che ha creato la transazione, la transazione si interrompe alla fine dell'ambito.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class to define a block of code to participate in a transaction.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come utilizzare la <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> classe per definire un blocco di codice da inserire in una transazione.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.TransactionScope">
          <source>This type is thread safe.</source>
          <target state="translated">Questo tipo è thread-safe.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="T:System.Transactions.TransactionScope">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.#ctor">
          <source>This constructor creates a new transaction scope with the transaction scope option equal to <ph id="ph1">&lt;xref:System.Transactions.TransactionScopeOption.Required&gt;</ph>.</source>
          <target state="translated">Questo costruttore crea un nuovo ambito della transazione con l'opzione di ambito di transazione uguale a <ph id="ph1">&lt;xref:System.Transactions.TransactionScopeOption.Required&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.#ctor">
          <source>This means that a transaction is required by the new scope and the ambient transaction is used if one already exists.</source>
          <target state="translated">Ciò significa che il nuovo ambito è necessaria una transazione e viene utilizzata la transazione di ambiente, se ne esiste già.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.#ctor">
          <source>Otherwise, it creates a new transaction before entering the scope.</source>
          <target state="translated">In caso contrario, prima di accedere all'ambito viene creata una nuova transazione.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> e imposta la transazione specificata come transazione di ambiente, in modo che venga utilizzata dalle operazioni transazionali effettuate all'interno dell'ambito.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated">Transazione da impostare come transazione di ambiente, in modo che venga utilizzata dalle operazioni transazionali effettuate all'interno dell'ambito.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>An instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /&gt;</ph> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</source>
          <target state="translated">Un'istanza dell'enumerazione <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /&gt;</ph> che descrive se la transazione di ambiente associata all'ambito della transazione passerà attraverso le continuazioni di thread quando si utilizzano i modelli di programmazione asincrona di .NET Task o async/await.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>[Supported in the .NET Framework 4.5.1 and later versions]</source>
          <target state="translated">[Supportato in .NET Framework 4.5.1 e versioni successive]</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> e imposta la transazione specificata come transazione di ambiente, in modo che venga utilizzata dalle operazioni transazionali effettuate all'interno dell'ambito.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>[Supported in the .NET Framework 4.5.1 and later versions]</source>
          <target state="translated">[Supportato in .NET Framework 4.5.1 e versioni successive]</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class with the specified asynchronous flow option.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> con l'opzione del flusso asincrono specificato.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class with the specified requirements.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> con i requisiti specificati.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated">Transazione da impostare come transazione di ambiente, in modo che venga utilizzata dalle operazioni transazionali effettuate all'interno dell'ambito.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> after which the transaction scope times out and aborts the transaction.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> dopo cui si verifica il timeout dell'ambito della transazione e l'interruzione della transazione.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>An instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /&gt;</ph> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</source>
          <target state="translated">Un'istanza dell'enumerazione <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /&gt;</ph> che descrive se la transazione di ambiente associata all'ambito della transazione passerà attraverso le continuazioni di thread quando si utilizzano i modelli di programmazione asincrona di .NET Task o async/await.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>[Supported in the .NET Framework 4.5.1 and later versions]</source>
          <target state="translated">[Supportato in .NET Framework 4.5.1 e versioni successive]</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class with the specified timeout value, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> con il valore di timeout specificato e imposta la transazione specificata come transazione di ambiente, in modo che venga utilizzata dalle operazioni transazionali effettuate all'interno dell'ambito.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>An instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeOption" /&gt;</ph> enumeration that describes the transaction requirements associated with this transaction scope.</source>
          <target state="translated">Istanza dell'enumerazione <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeOption" /&gt;</ph> che descrive i requisiti della transazione associati al relativo ambito.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionOptions" /&gt;</ph> structure that describes the transaction options to use if a new transaction is created.</source>
          <target state="translated">Struttura <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionOptions" /&gt;</ph> in cui sono descritte le opzioni di transazione da utilizzare se si crea una nuova transazione.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>If an existing transaction is used, the timeout value in this parameter applies to the transaction scope.</source>
          <target state="translated">Se si utilizza una transazione esistente, il valore di timeout in questo parametro si applica all'ambito della transazione.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>If that time expires before the scope is disposed, the transaction is aborted.</source>
          <target state="translated">Se il tempo scade prima dell'eliminazione dell'ambito, la transazione viene interrotta.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>An instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /&gt;</ph> enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.</source>
          <target state="translated">Un'istanza dell'enumerazione <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /&gt;</ph> che descrive se la transazione di ambiente associata all'ambito della transazione passerà attraverso le continuazioni di thread quando si utilizzano i modelli di programmazione asincrona di .NET Task o async/await.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>[Supported in the .NET Framework 4.5.1 and later versions]</source>
          <target state="translated">[Supportato in .NET Framework 4.5.1 e versioni successive]</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class with the specified requirements and asynchronous flow option.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> con i requisiti e le opzioni del flusso asincrono specificati.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)">
          <source>An instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeOption" /&gt;</ph> enumeration that describes the transaction requirements associated with this transaction scope.</source>
          <target state="translated">Istanza dell'enumerazione <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScopeOption" /&gt;</ph> che descrive i requisiti della transazione associati al relativo ambito.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> class with the specified requirements.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionScope" /&gt;</ph> con i requisiti specificati.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)">
          <source>When you use the <ph id="ph1">`transactionOptions`</ph> parameter to specify an <ph id="ph2">&lt;xref:System.Transactions.IsolationLevel&gt;</ph>, and the scope creates a transaction later, the new transaction is associated with the specified isolation level.</source>
          <target state="translated">Quando si utilizza il <ph id="ph1">`transactionOptions`</ph> parametro per specificare un <ph id="ph2">&lt;xref:System.Transactions.IsolationLevel&gt;</ph>e nell'ambito viene creata una transazione in un secondo momento, la nuova transazione viene associata al livello di isolamento specificato.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)">
          <source>If an isolation level is passed in together with a transaction, the transaction must have an identical isolation level, or an exception is thrown.</source>
          <target state="translated">Se viene passato un livello di isolamento con una transazione, la transazione deve disporre di un livello di isolamento identici o viene generata un'eccezione.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.Complete">
          <source>Indicates that all operations within the scope are completed successfully.</source>
          <target state="translated">Indica che sono state completate tutte le operazioni all'interno dell'ambito.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>When you are satisfied that all operations within the scope are completed successfully, you should call this method only once to inform that transaction manager that the state across all resources is consistent, and the transaction can be committed.</source>
          <target state="translated">Quando si è soddisfatti che tutte le operazioni all'interno dell'ambito completate correttamente, è necessario chiamare questo metodo solo una volta per informare la gestione transazioni che lo stato di tutte le risorse sia coerente e la transazione può essere eseguito il commit.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>It is very good practice to put the call as the last statement in the <ph id="ph1">`using`</ph> block.</source>
          <target state="translated">È consigliabile inserire la chiamata come ultima istruzione nel <ph id="ph1">`using`</ph> blocco.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>For more information on how this method is used, see the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> topic.</source>
          <target state="translated">Per ulteriori informazioni sull'utilizzo di questo metodo, vedere il <bpt id="p1">[</bpt>implementazione un implicita delle transazioni con ambito di transazione<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> argomento.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>Failing to call this method aborts the transaction, because the transaction manager interprets this as a system failure, or exceptions thrown within the scope of transaction.</source>
          <target state="translated">Impossibile chiamare questo metodo interrompe la transazione, poiché il gestore delle transazioni viene interpretato come un errore di sistema o le eccezioni generate all'interno dell'ambito della transazione.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>However, you should also note that calling this method does not guarantee a commit of the transaction.</source>
          <target state="translated">Tuttavia, è necessario notare che questo metodo non garantisce l'esecuzione del commit della transazione.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>It is merely a way of informing the transaction manager of your status.</source>
          <target state="translated">Si tratta semplicemente di un modo per passare alla gestione transazioni le informazioni sullo stato.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>After calling this method, you can no longer access the ambient transaction via the <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph> property, and trying to do so results in an exception being thrown.</source>
          <target state="translated">Dopo aver chiamato questo metodo, è non possibile accedere non è più la transazione di ambiente tramite il <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph> , proprietà e si tenta di eseguire i risultati in tal caso, viene generata un'eccezione.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>The actual work of commit between the resources manager happens at the <ph id="ph1">`End Using`</ph> statement if the <ph id="ph2">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object created the transaction.</source>
          <target state="translated">Si verifica l'effettiva operazione di commit tra le risorse di <ph id="ph1">`End Using`</ph> istruzione se il <ph id="ph2">&lt;xref:System.Transactions.TransactionScope&gt;</ph> oggetto creato la transazione.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>If it did not create the transaction, the commit occurs whenever <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> is called by the owner of the <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> object.</source>
          <target state="translated">In caso contrario, il commit viene eseguito ogni volta che il metodo <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> viene chiamato dal proprietario dell'oggetto <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>At that point the Transaction Manager calls the resource managers and informs them to either commit or rollback, based on whether this method was called on the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object.</source>
          <target state="translated">A questo punto il gestore delle transazioni chiama la risorsa Gestioni e fornire le istruzioni per eseguire il commit o rollback, in base a se questo metodo è stato chiamato sul <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Complete">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class to define a block of code to participate in a transaction.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come utilizzare la <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> classe per definire un blocco di codice da inserire in una transazione.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.Complete">
          <source>This method has already been called once.</source>
          <target state="translated">Questo metodo è stato già chiamato una volta.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>Ends the transaction scope.</source>
          <target state="translated">Termina l'ambito della transazione.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>Calling this method marks the end of the transaction scope.</source>
          <target state="translated">Chiamare questo metodo contrassegna la fine dell'ambito della transazione.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>If the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object created the transaction and <ph id="ph2">&lt;xref:System.Transactions.TransactionScope.Complete%2A&gt;</ph> was called on the scope, the <ph id="ph3">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object attempts to commit the transaction when this method is called.</source>
          <target state="translated">Se il <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> oggetto creato la transazione e <ph id="ph2">&lt;xref:System.Transactions.TransactionScope.Complete%2A&gt;</ph> nell'ambito, è stato chiamato il <ph id="ph3">&lt;xref:System.Transactions.TransactionScope&gt;</ph> oggetto tenta di eseguire il commit della transazione quando questo metodo viene chiamato.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>The use of the C# <ph id="ph1">`using`</ph> construction ensures that this method is called even if an exception occurs.</source>
          <target state="translated">L'utilizzo del linguaggio c# <ph id="ph1">`using`</ph> costruzione assicura che questo metodo viene chiamato anche se si verifica un'eccezione.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>Exceptions that occur after calling this method may not affect the transaction.</source>
          <target state="translated">Le eccezioni che si verificano dopo la chiamata a questo metodo potrebbero non avere alcun effetto sulla transazione.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>This method also restores the ambient transaction to it original state.</source>
          <target state="translated">Questo metodo anche Ripristina la transazione di ambiente e lo stato originale.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>A <ph id="ph1">&lt;xref:System.Transactions.TransactionAbortedException&gt;</ph> is thrown if the transaction is not actually committed.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;xref:System.Transactions.TransactionAbortedException&gt;</ph> viene generata se non viene effettivamente eseguito il commit della transazione.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>This method is synchronous and blocks until the transaction has been committed or aborted.</source>
          <target state="translated">Questo metodo è sincrono e blocca fino a quando la transazione è stato eseguito il commit o interrotta.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>Because of this, you should be extremely careful when using this method in a Windows Form (WinForm) application, or a deadlock can occur.</source>
          <target state="translated">Per questo motivo, è necessario estremamente importante quando si utilizza questo metodo in un'applicazione Windows Form (WinForm) oppure può verificarsi un deadlock.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>If you call this method inside one WinForm Control event (for example, clicking a button), and use the synchronous <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method to direct the control to perform some UI tasks (for example, changing colors) in the middle of processing the transaction, a deadlock will happen.</source>
          <target state="translated">Se si chiama questo metodo all'interno di un evento di controllo Windows Form (ad esempio, facendo clic su un pulsante) e utilizzare sincroni <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> metodo per indicare al controllo per eseguire alcune attività dell'interfaccia utente (ad esempio, la modifica dei colori) durante l'elaborazione della transazione, un si verifica un deadlock.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>This is because the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method is synchronous and blocks the worker thread until the UI thread finishes its job.</source>
          <target state="translated">In questo modo il <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> metodo è sincrono e blocca il thread di lavoro finché il thread dell'interfaccia utente non termina il processo.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>However, in our scenario, the UI thread is also waiting for the worker thread to commit the transaction.</source>
          <target state="translated">Tuttavia, in questo scenario, il thread dell'interfaccia utente è inoltre in attesa per il thread di lavoro eseguire il commit della transazione.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>The result is that none is able to proceed and the scope waits indefinitely for the Commit to finish.</source>
          <target state="translated">Il risultato è che nessuno è in grado di procedere e l'ambito per un periodo illimitato attende il completamento del Commit.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>You should use <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> rather than <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> wherever possible, because it is asynchronous and thus less prone to deadlock.</source>
          <target state="translated">È consigliabile utilizzare <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> anziché <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> laddove possibile, perché è asincrona e pertanto meno soggetto a deadlock.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>For more information on how this method is used, see the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> topic.</source>
          <target state="translated">Per ulteriori informazioni sull'utilizzo di questo metodo, vedere il <bpt id="p1">[</bpt>implementazione un implicita delle transazioni con ambito di transazione<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> argomento.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.TransactionScope.Dispose">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class to define a block of code to participate in a transaction.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come utilizzare la <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> classe per definire un blocco di codice da inserire in una transazione.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>