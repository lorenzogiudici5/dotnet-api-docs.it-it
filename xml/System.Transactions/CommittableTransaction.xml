<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CommittableTransaction.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e29b4ca4f99af2e899c40f7e2588bbeb984e5e4a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e29b4ca4f99af2e899c40f7e2588bbeb984e5e4a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Transactions.CommittableTransaction">
          <source>Describes a committable transaction.</source>
          <target state="translated">Descrive una transazione di cui è possibile eseguire il commit.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>The <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> class provides an explicit way for applications to use a transaction, as opposed to using the <ph id="ph2">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class implicitly.</source>
          <target state="translated">A differenza della classe <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph>, che consente di utilizzare le transazioni in modo implicito, la classe <ph id="ph2">&lt;xref:System.Transactions.TransactionScope&gt;</ph> consente di utilizzare le transazioni in modo esplicito.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class, the application writer needs to specifically call the <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Transactions.Transaction.Rollback%2A&gt;</ph> methods in order to commit or abort the transaction.</source>
          <target state="translated">A differenza della classe <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph>, il writer di applicazione deve chiamare in modo specifico i metodi <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> e <ph id="ph3">&lt;xref:System.Transactions.Transaction.Rollback%2A&gt;</ph>, rispettivamente per interrompere la transazione o per eseguirne il commit.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>However, only the creator of a transaction can commit the transaction.</source>
          <target state="translated">Tuttavia, solo il creatore di una transazione può il commit della transazione.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>Therefore, copies of a committable transaction, obtained through the <ph id="ph1">&lt;xref:System.Transactions.Transaction.Clone%2A&gt;</ph> method are not committable.</source>
          <target state="translated">Pertanto, le copie di una transazione di eseguire il commit, ottenuto tramite il <ph id="ph1">&lt;xref:System.Transactions.Transaction.Clone%2A&gt;</ph> (metodo) non è possibile eseguire il commit.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>We recommend that you create implicit transactions using the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class, so that the ambient transaction context is automatically managed for you.</source>
          <target state="translated">È consigliabile creare transazioni implicite utilizzando la <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> classe, in modo che il contesto di transazione di ambiente viene gestito automaticamente.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>You should also use the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> and <ph id="ph2">&lt;xref:System.Transactions.DependentTransaction&gt;</ph> class for applications that require the use of the same transaction across multiple function calls or multiple thread calls.</source>
          <target state="translated">È inoltre possibile utilizzare il <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> e <ph id="ph2">&lt;xref:System.Transactions.DependentTransaction&gt;</ph> classe per le applicazioni che richiedono l'utilizzo della stessa transazione tra più chiamate di funzione o chiamate di più thread.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>For more information on this model, see the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> topic.</source>
          <target state="translated">Per ulteriori informazioni su questo modello, vedere il <bpt id="p1">[</bpt>implementazione un implicita delle transazioni con ambito di transazione<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> argomento.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>Creating a <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> does not automatically set the ambient transaction, which is the transaction your code executes in.</source>
          <target state="translated">Creazione di un <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> non viene impostata automaticamente la transazione di ambiente, la transazione eseguita dal codice.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>You can get or set the ambient transaction by calling the static <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A?displayProperty=nameWithType&gt;</ph> property of the global <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph> object.</source>
          <target state="translated">È possibile ottenere o impostare la transazione di ambiente chiamando il metodo statico <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A?displayProperty=nameWithType&gt;</ph> proprietà dell'oggetto globale <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>For more information on ambient transactions, see the " Managing Transaction Flow using TransactionScopeOption" section of the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> topic.</source>
          <target state="translated">Per ulteriori informazioni sulle transazioni di ambiente, vedere la sezione "Gestione delle transazioni del flusso mediante TransactionScopeOption" del <bpt id="p1">[</bpt>implementazione un implicita delle transazioni con ambito di transazione<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> argomento.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>If the ambient transaction is not set, any operation on a resource manager is not part of that transaction.</source>
          <target state="translated">Se la transazione di ambiente non è impostata, qualsiasi operazione su un gestore di risorse non è parte di tale transazione.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>You need to explicitly set and reset the ambient transaction to ensure that resource managers operate under the right transaction context.</source>
          <target state="translated">È necessario impostare e reimpostare la transazione di ambiente per assicurarsi che i gestori di risorse funzionino nel contesto di transazione destro in modo esplicito.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>Until a <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> has been committed, all the resources involved with the transaction are still locked.</source>
          <target state="translated">Fino a quando un <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> è stato eseguito il commit, tutte le risorse interessate dalla transazione sono ancora bloccate.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>A <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> object cannot be reused.</source>
          <target state="translated">Gli oggetti <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> non possono essere riutilizzati.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>Once it has been committed or rolled back, it cannot be used again in a transaction or set as the current ambient transaction context.</source>
          <target state="translated">Una volta che è stato eseguito il commit o rollback, non può essere riutilizzato in una transazione o impostata come contesto di transazione di ambiente corrente.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>The following sample creates two new instances of <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph>, commits and rolls back them respectively.</source>
          <target state="translated">L'esempio seguente crea due nuove istanze di <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph>, viene eseguito il commit e il rollback ne rispettivamente.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>This type is thread safe.</source>
          <target state="translated">Questo tipo è thread-safe.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="T:System.Transactions.CommittableTransaction">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph> class.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph> class.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.#ctor">
          <source>The following sample creates a new instance of <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> and commits it.</source>
          <target state="translated">L'esempio seguente crea una nuova istanza della <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> e salvati.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor">
          <source>An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.</source>
          <target state="translated">Tentativo di creare una transazione in Windows 98, Windows 98 Second Edition o Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)">
          <source>The maximum amount of time the transaction can exist, before it is aborted.</source>
          <target state="translated">Tempo massimo di esistenza della transazione prima della sua interruzione.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph> class with the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> value.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph> con il valore <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> specificato.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)">
          <source>An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.</source>
          <target state="translated">Tentativo di creare una transazione in Windows 98, Windows 98 Second Edition o Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionOptions" /&gt;</ph> structure that describes the transaction options to use for the new transaction.</source>
          <target state="translated">Struttura <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionOptions" /&gt;</ph> che descrive le opzioni di transazione da utilizzare per la nuova transazione.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph> class with the specified transaction options.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph> con le opzioni di transazione specificate.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
          <source>The following sample creates a new instance of <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> with options, and aborts it.</source>
          <target state="translated">L'esempio seguente crea una nuova istanza della <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> con le opzioni e viene interrotta.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
          <source>An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.</source>
          <target state="translated">Tentativo di creare una transazione in Windows 98, Windows 98 Second Edition o Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
          <source><ph id="ph1">&lt;paramref name="options" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="options" /&gt;</ph> non è valido.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
          <source>Begins an attempt to commit the transaction asynchronously.</source>
          <target state="translated">Avvia un tentativo di eseguire il commit della transazione in modo asincrono.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> interface that can be used by the caller to check the status of the asynchronous operation, or to wait for the operation to complete.</source>
          <target state="translated">Interfaccia <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> che può essere utilizzata dal chiamante per controllare lo stato dell'operazione asincrona o per attendere il completamento dell'operazione.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
          <source>This method returns immediately, before the transaction has been completed.</source>
          <target state="translated">Questo metodo restituisce immediatamente, prima che la transazione è stata completata.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
          <source>The transaction then commits on a different thread, and the <ph id="ph1">`asyncCallback`</ph> delegate is invoked when it has completed.</source>
          <target state="translated">Il commit in un thread differente, quindi la transazione e <ph id="ph1">`asyncCallback`</ph> delegato viene richiamato quando è stata completata.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
          <source>After this method is called, you do not receive the outcome of the transaction until you call <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph>.</source>
          <target state="translated">Dopo la chiamata di questo metodo, viene visualizzato il risultato della transazione non finché non si chiama <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
          <source>The commit process may complete synchronously inside this method call.</source>
          <target state="translated">Il processo di commit potrebbe essere completata in modo sincrono all'interno di questa chiamata al metodo.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>Attempts to commit the transaction.</source>
          <target state="translated">Tenta di eseguire il commit della transazione.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>When this method is called, all objects that have registered to participate in the transaction are polled and can independently indicate their vote to either commit or roll back the transaction.</source>
          <target state="translated">Quando viene chiamato questo metodo, tutti gli oggetti registrati per partecipare alla transazione vengano eseguito il polling e possono indicare in modo indipendente la possibilità di eseguire il commit o il rollback della transazione.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>If any participant votes to roll back the transaction, it is rolled back and this method throws a <ph id="ph1">&lt;xref:System.Transactions.TransactionException&gt;</ph> exception.</source>
          <target state="translated">Se un partecipante vota per eseguire il rollback della transazione, viene eseguito il rollback e questo metodo genera un <ph id="ph1">&lt;xref:System.Transactions.TransactionException&gt;</ph> eccezione.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>This is a normal occurrence for a transaction and your code should catch and process such exceptions.</source>
          <target state="translated">Si tratta di un'occorrenza normale per una transazione e il codice deve rilevare ed elaborare tali eccezioni.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source><ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph> block until the first phase of transaction processing is complete.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph> blocco fino al completamento della prima fase dell'elaborazione delle transazioni.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the <ph id="ph1">&lt;xref:System.Transactions.TransactionManager&gt;</ph> has durably decided to commit or abort the transaction.</source>
          <target state="translated">La prima fase termina dopo che tutti i gestori di risorse e gli elenchi nella transazione hanno scelto il risultato della transazione e <ph id="ph1">&lt;xref:System.Transactions.TransactionManager&gt;</ph> in modo durevole ha deciso di eseguire il commit o interrompere la transazione.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>The second phase of processing is always asynchronous.</source>
          <target state="translated">La seconda fase di elaborazione è sempre asincrona.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>Therefore, there is no guarantee that data just committed from within a given transaction will be immediately available afterwards when not using another transaction to view this data.</source>
          <target state="translated">Pertanto, non è garantito che i dati appena stato eseguito il commit da una determinata transazione sarà immediatamente disponibili in un secondo momento quando non si utilizza un'altra transazione per visualizzare i dati.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>Because this method blocks until the first phase of transaction processing is complete, you should be extremely careful when using this method in a Windows Form (WinForm) application, or a deadlock can occur.</source>
          <target state="translated">Poiché questo metodo si blocca fino a quando la prima fase dell'elaborazione delle transazioni è stata completata, è necessario prestare molta attenzione quando si utilizza questo metodo in un'applicazione Windows Form (WinForm) o un deadlock può verificarsi.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>If you call this method inside one WinForm Control event (for example, clicking a button), and use the synchronous <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method to direct the control to perform some UI tasks (for example, changing colors) in the middle of processing the transaction, a deadlock will happen.</source>
          <target state="translated">Se si chiama questo metodo all'interno di un evento di controllo Windows Form (ad esempio, facendo clic su un pulsante) e utilizzare sincroni <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> metodo per indicare al controllo per eseguire alcune attività dell'interfaccia utente (ad esempio, la modifica dei colori) durante l'elaborazione della transazione, un si verifica un deadlock.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>This is because the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method is synchronous and blocks the worker thread until the UI thread finishes its job.</source>
          <target state="translated">In questo modo il <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> metodo è sincrono e blocca il thread di lavoro finché il thread dell'interfaccia utente non termina il processo.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>However, in our scenario, the UI thread is also waiting for the worker thread to commit the transaction.</source>
          <target state="translated">Tuttavia, in questo scenario, il thread dell'interfaccia utente è inoltre in attesa per il thread di lavoro eseguire il commit della transazione.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>The result is that none is able to proceed and the scope waits indefinitely for the Commit to finish.</source>
          <target state="translated">Il risultato è che nessuno è in grado di procedere e l'ambito per un periodo illimitato attende il completamento del Commit.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>You should use <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> rather than <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> wherever possible, because it is asynchronous and thus less prone to deadlock.</source>
          <target state="translated">È consigliabile utilizzare <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> anziché <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> laddove possibile, perché è asincrona e pertanto meno soggetto a deadlock.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source><ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.Commit" /&gt;</ph> is called on a transaction and the transaction becomes <ph id="ph2">&lt;see cref="F:System.Transactions.TransactionStatus.InDoubt" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.Commit" /&gt;</ph> viene chiamato in una transazione, che diventa <ph id="ph2">&lt;see cref="F:System.Transactions.TransactionStatus.InDoubt" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source><ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.Commit" /&gt;</ph> is called and the transaction rolls back for the first time.</source>
          <target state="translated">Viene chiamato <ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.Commit" /&gt;</ph> e viene eseguito il rollback della transazione per la prima volta.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>Ends an attempt to commit the transaction asynchronously.</source>
          <target state="translated">Termina un tentativo di eseguire il commit della transazione in modo asincrono.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>You should call this method in the callback delegate specified as a parameter to the <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.BeginCommit%2A&gt;</ph> method, when you have finished any cleanup work associated with the asynchronous commitment.</source>
          <target state="translated">È necessario chiamare questo metodo nel delegato di callback specificato come parametro per il <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.BeginCommit%2A&gt;</ph> metodo, al termine delle operazioni di pulizia associate al commit asincrono.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>You can also call this method early without waiting for the delegate.</source>
          <target state="translated">È anche possibile chiamare questo metodo prima senza attendere che il delegato.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>If, by the time you call this method, the transaction has not completed, this method waits for its completion.</source>
          <target state="translated">Se, quando che si chiama questo metodo, la transazione è stata completata, questo metodo attende il completamento.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;xref:System.IAsyncResult.CompletedSynchronously%2A&gt;</ph> property returned by <ph id="ph2">`asyncResult`</ph> is always <ph id="ph3">`false`</ph>, even if the operation completed synchronously.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.IAsyncResult.CompletedSynchronously%2A&gt;</ph> restituito dalla proprietà <ph id="ph2">`asyncResult`</ph> è sempre <ph id="ph3">`false`</ph>, anche se l'operazione è stata completata in modo sincrono.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph> block until the first phase of transaction processing is complete.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph> blocco fino al completamento della prima fase dell'elaborazione delle transazioni.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the <ph id="ph1">&lt;xref:System.Transactions.TransactionManager&gt;</ph> has durably decided to commit or abort the transaction.</source>
          <target state="translated">La prima fase termina dopo che tutti i gestori di risorse e gli elenchi nella transazione hanno scelto il risultato della transazione e <ph id="ph1">&lt;xref:System.Transactions.TransactionManager&gt;</ph> in modo durevole ha deciso di eseguire il commit o interrompere la transazione.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>The second phase of processing is always asynchronous.</source>
          <target state="translated">La seconda fase di elaborazione è sempre asincrona.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>Therefore, there is no guarantee that data just committed from within a given transaction will be immediately available afterwards when not using another transaction to view this data.</source>
          <target state="translated">Pertanto, non è garantito che i dati appena stato eseguito il commit da una determinata transazione sarà immediatamente disponibili in un secondo momento quando non si utilizza un'altra transazione per visualizzare i dati.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source><ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /&gt;</ph> is called and the transaction rolls back for the first time.</source>
          <target state="translated">Viene chiamato <ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /&gt;</ph> e viene eseguito il rollback della transazione per la prima volta.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState">
          <source>Gets the object provided as the last parameter of the <ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /&gt;</ph> method call.</source>
          <target state="translated">Ottiene l'oggetto fornito come ultimo parametro della chiamata del metodo <ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState">
          <source>The object provided as the last parameter of the <ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /&gt;</ph> method call.</source>
          <target state="translated">Oggetto fornito come ultimo parametro della chiamata del metodo <ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that is used to wait for an asynchronous operation to complete.</source>
          <target state="translated">Ottiene un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, utilizzato per attendere il completamento di un'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that is used to wait for an asynchronous operation to complete.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> utilizzato per attendere il completamento di un'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously">
          <source>Gets an indication of whether the asynchronous commit operation completed synchronously.</source>
          <target state="translated">Ottiene un'indicazione sull'eventuale completamento in modo sincrono di un'operazione di commit asincrona.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the asynchronous commit operation completed synchronously; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'operazione di commit asincrona è stata completata in modo sincrono, in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously">
          <source>This property always returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> even if the operation completed synchronously.</source>
          <target state="translated">Questa proprietà restituisce sempre <ph id="ph1">&lt;see langword="false" /&gt;</ph> anche se l'operazione viene completata in modo sincrono.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted">
          <source>Gets an indication whether the asynchronous commit operation has completed.</source>
          <target state="translated">Ottiene un'indicazione del completamento dell'operazione di commit asincrono.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is complete; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'operazione viene completata, in caso contrario <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>