<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="SpinLock.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52e23183129f62f63c4589bc805d4ebc7b8b87041.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2e23183129f62f63c4589bc805d4ebc7b8b87041</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.SpinLock">
          <source>Provides a mutual exclusion lock primitive where a thread trying to acquire the lock waits in a loop repeatedly checking until the lock becomes available.</source>
          <target state="translated">Fornisce una primitiva di blocco a esclusione reciproca in cui un thread che tenta di acquisire il blocco rimane in attesa in un ciclo eseguendo controlli ripetuti finché il blocco non diventa disponibile.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>For an example of how to use a Spin Lock, see <bpt id="p1">[</bpt>How to: Use SpinLock for Low-Level Synchronization<ept id="p1">](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md)</ept>.</source>
          <target state="translated">Per un esempio di come utilizzare spinlock, vedere <bpt id="p1">[</bpt>procedura: utilizzare SpinLock per la sincronizzazione di basso livello<ept id="p1">](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md)</ept>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>Spin locks can be used for leaf-level locks where the object allocation implied by using a <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph>, in size or due to garbage collection pressure, is overly expensive.</source>
          <target state="translated">SpinLock utilizzabile per i blocchi a livello foglia in cui è inclusa l'allocazione dell'oggetto utilizzando un <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph>, dimensioni o a causa di condizioni di pressione della garbage collection è troppo costoso.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>A spin lock can be useful in to avoid blocking; however, if you expect a significant amount of blocking, you should probably not use spin locks due to excessive spinning.</source>
          <target state="translated">Un blocco di selezione può essere utile per evitare blocchi. Tuttavia, se si prevede una quantità significativa di blocco, probabilmente non utilizzare spinlock a causa della rotazione eccessiva.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>Spinning can be beneficial when locks are fine-grained and large in number (for example, a lock per node in a linked list) and also when lock hold-times are always extremely short.</source>
          <target state="translated">La rotazione può essere utile quando i blocchi sono numerosi (ad esempio, un blocco per nodo in un elenco collegato) e con granularità fine e anche quando tempi di attesa di blocco sono sempre molto brevi.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>In general, while holding a spin lock, one should avoid any of these actions:</source>
          <target state="translated">In generale, quando un blocco di selezione, uno evitare le seguenti azioni:</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>blocking,</source>
          <target state="translated">il blocco,</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>calling anything that itself may block,</source>
          <target state="translated">la chiamata a qualsiasi elemento che possa bloccare,</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>holding more than one spin lock at once,</source>
          <target state="translated">che contiene più di un blocco di selezione in una sola volta,</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>making dynamically dispatched calls (interface and virtuals),</source>
          <target state="translated">effettuando chiamate (interfaccia e virtuali), inviate dinamicamente</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>making statically dispatched calls into any code one doesn't own, or</source>
          <target state="translated">in modo statico effettuando chiamate in qualsiasi codice che non si possiede, inviate o</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>allocating memory.</source>
          <target state="translated">allocazione di memoria.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source><ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> should only be used after you have been determined that doing so will improve an application's performance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> deve essere utilizzato solo dopo aver determinato che in tal modo migliorano le prestazioni di un'applicazione.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>It is also important to note that <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> is a value type, for performance reasons.</source>
          <target state="translated">È inoltre importante notare che <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> è un tipo di valore, per motivi di prestazioni.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>For this reason, you must be very careful not to accidentally copy a <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> instance, as the two instances (the original and the copy) would then be completely independent of one another, which would likely lead to erroneous behavior of the application.</source>
          <target state="translated">Per questo motivo, è necessario prestare attenzione a non copiare accidentalmente un <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> dell'istanza, come le due istanze (originale e la copia) quindi sarebbe completamente indipendenti una da altra, che probabilmente potrebbe causare un comportamento errato dell'applicazione.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>If a <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> instance must be passed around, it should be passed by reference rather than by value.</source>
          <target state="translated">Se un <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> istanza debba essere passata, devono essere passato per riferimento e non per valore.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>Do not store <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> instances in readonly fields.</source>
          <target state="translated">Non archiviare <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> istanze in campi di sola lettura.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph>:</source>
          <target state="translated">Nell'esempio seguente viene illustrato come utilizzare un <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.SpinLock">
          <source>All members of <ph id="ph1">&lt;see cref="T:System.Threading.SpinLock" /&gt;</ph> are thread-safe and may be used from multiple threads concurrently.</source>
          <target state="translated">Tutti i membri di <ph id="ph1">&lt;see cref="T:System.Threading.SpinLock" /&gt;</ph> sono thread-safe e possono essere utilizzati da più thread contemporaneamente.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.#ctor(System.Boolean)">
          <source>Whether to capture and use thread IDs for debugging purposes.</source>
          <target state="translated">Valore che indica se acquisire e utilizzare gli ID dei thread per scopi di debug.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.#ctor(System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.SpinLock" /&gt;</ph> structure with the option to track thread IDs to improve debugging.</source>
          <target state="translated">Inizializza una nuova istanza della struttura <ph id="ph1">&lt;see cref="T:System.Threading.SpinLock" /&gt;</ph> con l'opzione di rilevamento degli ID dei thread per migliorare il debug.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.#ctor(System.Boolean)">
          <source>The default constructor for <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> tracks thread ownership.</source>
          <target state="translated">Il costruttore predefinito per <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> tiene traccia delle proprietà del thread.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.#ctor(System.Boolean)">
          <source>The following example demonstrates how a SpinLock may be used.</source>
          <target state="translated">Nell'esempio riportato di seguito viene illustrato come può utilizzare uno SpinLock.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source>True if the lock is acquired; otherwise, false.</source>
          <target state="translated">True se il blocco è stato acquisito. In caso contrario, False.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source><bpt id="p1">&lt;c&gt;</bpt>lockTaken<ept id="p1">&lt;/c&gt;</ept> must be initialized to false prior to calling this method.</source>
          <target state="translated">Prima di chiamare questo metodo, è necessario inizializzare <bpt id="p1">&lt;c&gt;</bpt>lockTaken<ept id="p1">&lt;/c&gt;</ept> su False.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source>Acquires the lock in a reliable manner, such that even if an exception occurs within the method call, <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> can be examined reliably to determine whether the lock was acquired.</source>
          <target state="translated">Acquisisce il blocco in modo affidabile, in modo tale che anche se si verifica un'eccezione all'interno della chiamata al metodo, è possibile esaminare l'oggetto <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> in maniera affidabile per determinare se il blocco è stato acquisito.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source><ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> is a non-reentrant lock, meaning that if a thread holds the lock, it is not allowed to enter the lock again.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph> è un blocco non rientrante, il che significa che se un thread è responsabile del blocco, non è consentito immettere di nuovo il blocco.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source>If thread ownership tracking is enabled (whether it's enabled is available through <ph id="ph1">&lt;xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A&gt;</ph>), an exception will be thrown when a thread tries to re-enter a lock it already holds.</source>
          <target state="translated">Se è abilitata il rilevamento della proprietà dei thread (se è abilitata è disponibile tramite <ph id="ph1">&lt;xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A&gt;</ph>), verrà generata un'eccezione durante il tentativo di immettere nuovamente un blocco che contiene già di un thread.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source>However, if thread ownership tracking is disabled, attempting to enter a lock already held will result in deadlock.</source>
          <target state="translated">Tuttavia, se il rilevamento della proprietà dei thread è disabilitata, il tentativo di immettere un blocco già contenuto comporterà deadlock.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source>If you call <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> without having first called <ph id="ph2">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph> the internal state of the <ph id="ph3">&lt;xref:System.Threading.SpinLock&gt;</ph> can become corrupted.</source>
          <target state="translated">Se si chiama <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> senza prima aver chiamato <ph id="ph2">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph> lo stato interno del <ph id="ph3">&lt;xref:System.Threading.SpinLock&gt;</ph> possono risultare danneggiati.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source>The <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> argument must be initialized to false prior to calling Enter.</source>
          <target state="translated">È necessario inizializzare l'argomento <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> su False prima della chiamata a Enter.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Enter(System.Boolean@)">
          <source>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</source>
          <target state="translated">Il rilevamento della proprietà dei thread è abilitato e il thread corrente ha già acquisito questo blocco.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="T:System.Threading.SpinLock">
          <source>Releases the lock.</source>
          <target state="translated">Rilascia il blocco.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Exit">
          <source>Releases the lock.</source>
          <target state="translated">Rilascia il blocco.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Exit">
          <source>The default overload of <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> provides the same behavior as if calling <ph id="ph2">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> using true as the argument.</source>
          <target state="translated">L'overload predefinito di <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> fornisce lo stesso comportamento come se la chiamata <ph id="ph2">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> utilizzando true come argomento.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Exit">
          <source>If you call <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> without having first called <ph id="ph2">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph> the internal state of the <ph id="ph3">&lt;xref:System.Threading.SpinLock&gt;</ph> can become corrupted.</source>
          <target state="translated">Se si chiama <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> senza prima aver chiamato <ph id="ph2">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph> lo stato interno del <ph id="ph3">&lt;xref:System.Threading.SpinLock&gt;</ph> possono risultare danneggiati.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Exit">
          <source>Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</source>
          <target state="translated">Il rilevamento della proprietà dei thread è abilitato e il thread corrente non è il proprietario di questo blocco.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Exit(System.Boolean)">
          <source>A Boolean value that indicates whether a memory fence should be issued in order to immediately publish the exit operation to other threads.</source>
          <target state="translated">Valore booleano che indica se generare un limite di memoria per pubblicare immediatamente l'operazione di uscita agli altri thread.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Exit(System.Boolean)">
          <source>Releases the lock.</source>
          <target state="translated">Rilascia il blocco.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Exit(System.Boolean)">
          <source>Calling <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> with the <ph id="ph2">`useMemoryBarrier`</ph> argument set to true will improve the fairness of the lock at the expense of some performance.</source>
          <target state="translated">La chiamata <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> con il <ph id="ph2">`useMemoryBarrier`</ph> argomento impostato su true consente di migliorare la chiarezza del blocco a discapito delle prestazioni.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Exit(System.Boolean)">
          <source>The default <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> overload behaves as if specifying true for <ph id="ph2">`useMemoryBarrier`</ph>.</source>
          <target state="translated">Il valore predefinito <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> overload si comporta come se si specifica true per <ph id="ph2">`useMemoryBarrier`</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.Exit(System.Boolean)">
          <source>If you call <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> without having first called <ph id="ph2">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph> the internal state of the <ph id="ph3">&lt;xref:System.Threading.SpinLock&gt;</ph> can become corrupted.</source>
          <target state="translated">Se si chiama <ph id="ph1">&lt;xref:System.Threading.SpinLock.Exit%2A&gt;</ph> senza prima aver chiamato <ph id="ph2">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph> lo stato interno del <ph id="ph3">&lt;xref:System.Threading.SpinLock&gt;</ph> possono risultare danneggiati.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.Exit(System.Boolean)">
          <source>Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</source>
          <target state="translated">Il rilevamento della proprietà dei thread è abilitato e il thread corrente non è il proprietario di questo blocco.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.Threading.SpinLock.IsHeld">
          <source>Gets whether the lock is currently held by any thread.</source>
          <target state="translated">Ottiene un valore che indica se attualmente il blocco è mantenuto da un thread.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SpinLock.IsHeld">
          <source>true if the lock is currently held by any thread; otherwise false.</source>
          <target state="translated">true se attualmente il blocco è mantenuto da un thread; in caso contrario, false.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="P:System.Threading.SpinLock.IsHeldByCurrentThread">
          <source>Gets whether the lock is held by the current thread.</source>
          <target state="translated">Ottiene un valore che indica se il blocco è mantenuto dal thread corrente.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SpinLock.IsHeldByCurrentThread">
          <source>true if the lock is held by the current thread; otherwise false.</source>
          <target state="translated">true se il blocco è mantenuto dal thread corrente; in caso contrario, false.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SpinLock.IsHeldByCurrentThread">
          <source>If the lock was initialized to track owner threads, this will return whether the lock is acquired by the current thread.</source>
          <target state="translated">Se il blocco è stato inizializzato per tenere traccia dei thread del proprietario, verrà restituito se il blocco viene acquisito dal thread corrente.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SpinLock.IsHeldByCurrentThread">
          <source>It is invalid to use this property when the lock was initialized to not track thread ownership.</source>
          <target state="translated">Non è possibile utilizzare questa proprietà quando il blocco è stato inizializzato non tenere traccia della proprietà dei thread.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="P:System.Threading.SpinLock.IsHeldByCurrentThread">
          <source>Thread ownership tracking is disabled.</source>
          <target state="translated">Il rilevamento della proprietà dei thread è disabilitato.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled">
          <source>Gets whether thread ownership tracking is enabled for this instance.</source>
          <target state="translated">Ottiene un valore che indica se per questa istanza è abilitato il rilevamento della proprietà dei thread.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled">
          <source>true if thread ownership tracking is enabled for this instance; otherwise false.</source>
          <target state="translated">true se per questa istanza è abilitato il rilevamento della proprietà dei thread; in caso contrario, false.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="T:System.Threading.SpinLock">
          <source>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> can be examined reliably to determine whether the lock was acquired.</source>
          <target state="translated">Tenta di acquisire il blocco in modo affidabile, in modo tale che anche se si verifica un'eccezione all'interno della chiamata al metodo, è possibile esaminare l'oggetto <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> in maniera affidabile per determinare se il blocco è stato acquisito.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
          <source>True if the lock is acquired; otherwise, false.</source>
          <target state="translated">True se il blocco è stato acquisito. In caso contrario, False.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
          <source><bpt id="p1">&lt;c&gt;</bpt>lockTaken<ept id="p1">&lt;/c&gt;</ept> must be initialized to false prior to calling this method.</source>
          <target state="translated">Prima di chiamare questo metodo, è necessario inizializzare <bpt id="p1">&lt;c&gt;</bpt>lockTaken<ept id="p1">&lt;/c&gt;</ept> su False.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
          <source>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> can be examined reliably to determine whether the lock was acquired.</source>
          <target state="translated">Tenta di acquisire il blocco in modo affidabile, in modo tale che anche se si verifica un'eccezione all'interno della chiamata al metodo, è possibile esaminare l'oggetto <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> in maniera affidabile per determinare se il blocco è stato acquisito.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
          <source>Unlike <ph id="ph1">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph>, TryEnter will not block waiting for the lock to be available.</source>
          <target state="translated">A differenza di <ph id="ph1">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph>, TryEnter non verrà bloccata in attesa del blocco sia disponibile.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
          <source>If the lock is not available when TryEnter is called, it will return immediately without any further spinning.</source>
          <target state="translated">Se il blocco non è disponibile quando viene chiamato TryEnter, verrà restituito immediatamente senza ulteriori rotazioni.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
          <source>The <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> argument must be initialized to false prior to calling TryEnter.</source>
          <target state="translated">È necessario inizializzare l'argomento <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> su False prima della chiamata a TryEnter.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
          <source>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</source>
          <target state="translated">Il rilevamento della proprietà dei thread è abilitato e il thread corrente ha già acquisito questo blocco.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) to wait indefinitely.</source>
          <target state="translated">Numero di millisecondi di attesa oppure <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) per un'attesa indefinita.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source>True if the lock is acquired; otherwise, false.</source>
          <target state="translated">True se il blocco è stato acquisito. In caso contrario, False.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source><bpt id="p1">&lt;c&gt;</bpt>lockTaken<ept id="p1">&lt;/c&gt;</ept> must be initialized to false prior to calling this method.</source>
          <target state="translated">Prima di chiamare questo metodo, è necessario inizializzare <bpt id="p1">&lt;c&gt;</bpt>lockTaken<ept id="p1">&lt;/c&gt;</ept> su False.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> can be examined reliably to determine whether the lock was acquired.</source>
          <target state="translated">Tenta di acquisire il blocco in modo affidabile, in modo tale che anche se si verifica un'eccezione all'interno della chiamata al metodo, è possibile esaminare l'oggetto <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> in maniera affidabile per determinare se il blocco è stato acquisito.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source>Unlike <ph id="ph1">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph>, TryEnter will not block indefinitely waiting for the lock to be available.</source>
          <target state="translated">A differenza di <ph id="ph1">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph>, non verrà bloccata TryEnter indefinitamente in attesa del blocco sia disponibile.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source>It will block until either the lock is available or until the <ph id="ph1">`millisecondsTimeout`</ph> has expired.</source>
          <target state="translated">Verrà bloccata finché il blocco non è disponibile o fino a quando il <ph id="ph1">`millisecondsTimeout`</ph> è scaduto.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> è un numero negativo diverso da -1, che rappresenta un timeout infinito.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source>The <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> argument must be initialized to false prior to calling TryEnter.</source>
          <target state="translated">È necessario inizializzare l'argomento <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> su False prima della chiamata a TryEnter.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
          <source>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</source>
          <target state="translated">Il rilevamento della proprietà dei thread è abilitato e il thread corrente ha già acquisito questo blocco.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> che rappresenta il numero di millisecondi di attesa oppure <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> che rappresenta -1 millisecondi per un'attesa indefinita.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source>True if the lock is acquired; otherwise, false.</source>
          <target state="translated">True se il blocco è stato acquisito. In caso contrario, False.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source><bpt id="p1">&lt;c&gt;</bpt>lockTaken<ept id="p1">&lt;/c&gt;</ept> must be initialized to false prior to calling this method.</source>
          <target state="translated">Prima di chiamare questo metodo, è necessario inizializzare <bpt id="p1">&lt;c&gt;</bpt>lockTaken<ept id="p1">&lt;/c&gt;</ept> su False.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> can be examined reliably to determine whether the lock was acquired.</source>
          <target state="translated">Tenta di acquisire il blocco in modo affidabile, in modo tale che anche se si verifica un'eccezione all'interno della chiamata al metodo, è possibile esaminare l'oggetto <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> in maniera affidabile per determinare se il blocco è stato acquisito.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source>Unlike <ph id="ph1">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph>, TryEnter will not block indefinitely waiting for the lock to be available.</source>
          <target state="translated">A differenza di <ph id="ph1">&lt;xref:System.Threading.SpinLock.Enter%2A&gt;</ph>, non verrà bloccata TryEnter indefinitamente in attesa del blocco sia disponibile.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source>It will block until either the lock is available or until the <ph id="ph1">`timeout`</ph> has expired.</source>
          <target state="translated">Verrà bloccata finché il blocco non è disponibile o fino a quando il <ph id="ph1">`timeout`</ph> è scaduto.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> è un numero negativo diverso da -1 millisecondi che rappresenta un timeout infinito o il timeout è più grande di <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> millisecondi.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source>The <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> argument must be initialized to false prior to calling TryEnter.</source>
          <target state="translated">È necessario inizializzare l'argomento <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> su False prima della chiamata a TryEnter.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
          <source>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</source>
          <target state="translated">Il rilevamento della proprietà dei thread è abilitato e il thread corrente ha già acquisito questo blocco.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>