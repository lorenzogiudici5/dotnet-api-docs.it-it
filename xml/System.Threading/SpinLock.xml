<Type Name="SpinLock" FullName="System.Threading.SpinLock">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="10f26e6ab91a3ed621e096451edb0d7cae5bcc16" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48595446" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct SpinLock" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SpinLock extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SpinLock" />
  <TypeSignature Language="VB.NET" Value="Public Structure SpinLock" />
  <TypeSignature Language="C++ CLI" Value="public value class SpinLock" />
  <TypeSignature Language="F#" Value="type SpinLock = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsHeld = {IsHeld}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.SpinLock/SystemThreading_SpinLockDebugView))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="22fb9-101">Fornisce una primitiva di blocco a esclusione reciproca in cui un thread che tenta di acquisire il blocco rimane in attesa in un ciclo eseguendo controlli ripetuti finché il blocco non diventa disponibile.</span>
      <span class="sxs-lookup">
        <span data-stu-id="22fb9-101">Provides a mutual exclusion lock primitive where a thread trying to acquire the lock waits in a loop repeatedly checking until the lock becomes available.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22fb9-102">Per un esempio di come usare uno spinlock, vedere [procedura: usare SpinLock per la sincronizzazione di basso livello](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md).</span><span class="sxs-lookup"><span data-stu-id="22fb9-102">For an example of how to use a Spin Lock, see [How to: Use SpinLock for Low-Level Synchronization](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md).</span></span>  
  
 <span data-ttu-id="22fb9-103">SpinLock è utilizzabile per i blocchi a livello foglia in cui l'allocazione dell'oggetto di cui è inclusa con una <xref:System.Threading.Monitor>, dimensioni o a causa di un utilizzo elevato di garbage collection, è eccessivamente costoso.</span><span class="sxs-lookup"><span data-stu-id="22fb9-103">Spin locks can be used for leaf-level locks where the object allocation implied by using a <xref:System.Threading.Monitor>, in size or due to garbage collection pressure, is overly expensive.</span></span> <span data-ttu-id="22fb9-104">Può essere utile per evitare il blocco; uno spinlock Tuttavia, se si prevede una quantità significativa di blocco, è probabilmente non deve usare spinlock a causa della rotazione eccessiva.</span><span class="sxs-lookup"><span data-stu-id="22fb9-104">A spin lock can be useful to avoid blocking; however, if you expect a significant amount of blocking, you should probably not use spin locks due to excessive spinning.</span></span> <span data-ttu-id="22fb9-105">Rotazione con stato può essere utile quando i blocchi sono grandi in numero (ad esempio, un blocco per ogni nodo in un elenco collegato) e con granularità fine e anche quando i tempi di mantenimento del blocco sono sempre molto brevi.</span><span class="sxs-lookup"><span data-stu-id="22fb9-105">Spinning can be beneficial when locks are fine-grained and large in number (for example, a lock per node in a linked list) and also when lock hold-times are always extremely short.</span></span> <span data-ttu-id="22fb9-106">In generale, mentre vengono premuti uno spinlock, uno necessario evitare qualsiasi di queste azioni:</span><span class="sxs-lookup"><span data-stu-id="22fb9-106">In general, while holding a spin lock, one should avoid any of these actions:</span></span>  
  
-   <span data-ttu-id="22fb9-107">il blocco,</span><span class="sxs-lookup"><span data-stu-id="22fb9-107">blocking,</span></span>  
  
-   <span data-ttu-id="22fb9-108">la chiamata a qualsiasi elemento che a sua volta può bloccare,</span><span class="sxs-lookup"><span data-stu-id="22fb9-108">calling anything that itself may block,</span></span>  
  
-   <span data-ttu-id="22fb9-109">blocco viene mantenuto attivo più di una selezione in una sola volta,</span><span class="sxs-lookup"><span data-stu-id="22fb9-109">holding more than one spin lock at once,</span></span>  
  
-   <span data-ttu-id="22fb9-110">effettuando chiamate (interfaccia e metodi virtuali), inviate dinamicamente</span><span class="sxs-lookup"><span data-stu-id="22fb9-110">making dynamically dispatched calls (interface and virtuals),</span></span>  
  
-   <span data-ttu-id="22fb9-111">effettuando in modo statico inviate chiamate a qualsiasi codice che non si possiede, o</span><span class="sxs-lookup"><span data-stu-id="22fb9-111">making statically dispatched calls into any code one doesn't own, or</span></span>  
  
-   <span data-ttu-id="22fb9-112">allocazione di memoria.</span><span class="sxs-lookup"><span data-stu-id="22fb9-112">allocating memory.</span></span>  
  
 <span data-ttu-id="22fb9-113"><xref:System.Threading.SpinLock> deve essere utilizzato solo dopo aver determinato che questo modo migliorano le prestazioni di un'applicazione.</span><span class="sxs-lookup"><span data-stu-id="22fb9-113"><xref:System.Threading.SpinLock> should only be used after you have been determined that doing so will improve an application's performance.</span></span> <span data-ttu-id="22fb9-114">È anche importante notare che <xref:System.Threading.SpinLock> è un tipo di valore, per motivi di prestazioni.</span><span class="sxs-lookup"><span data-stu-id="22fb9-114">It is also important to note that <xref:System.Threading.SpinLock> is a value type, for performance reasons.</span></span> <span data-ttu-id="22fb9-115">Per questo motivo, è necessario prestare attenzione a non copiare accidentalmente un <xref:System.Threading.SpinLock> istanze, come le due istanze (originale e la copia) sarebbe completamente indipendenti una da altra, che probabilmente potrebbe causare un comportamento errato dell'applicazione.</span><span class="sxs-lookup"><span data-stu-id="22fb9-115">For this reason, you must be very careful not to accidentally copy a <xref:System.Threading.SpinLock> instance, as the two instances (the original and the copy) would then be completely independent of one another, which would likely lead to erroneous behavior of the application.</span></span> <span data-ttu-id="22fb9-116">Se un <xref:System.Threading.SpinLock> istanza debba essere passata, deve essere passato per riferimento e non per valore.</span><span class="sxs-lookup"><span data-stu-id="22fb9-116">If a <xref:System.Threading.SpinLock> instance must be passed around, it should be passed by reference rather than by value.</span></span>  
  
 <span data-ttu-id="22fb9-117">Non archiviare <xref:System.Threading.SpinLock> istanze in campi di sola lettura.</span><span class="sxs-lookup"><span data-stu-id="22fb9-117">Do not store <xref:System.Threading.SpinLock> instances in readonly fields.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="22fb9-118">Nell'esempio seguente viene illustrato come utilizzare un <xref:System.Threading.SpinLock>:</span><span class="sxs-lookup"><span data-stu-id="22fb9-118">The following example shows how to use a <xref:System.Threading.SpinLock>:</span></span>  
  
 [!code-csharp[System.Threading.SpinLock#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.spinlock/cs/spinlock.cs#01)]
 [!code-vb[System.Threading.SpinLock#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.spinlock/vb/spinlock.vb#01)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="22fb9-119">Tutti i membri di <see cref="T:System.Threading.SpinLock" /> sono thread-safe e possono essere utilizzati da più thread contemporaneamente.</span>
      <span class="sxs-lookup">
        <span data-stu-id="22fb9-119">All members of <see cref="T:System.Threading.SpinLock" /> are thread-safe and may be used from multiple threads concurrently.</span>
      </span>
    </threadsafe>
    <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
      <span data-ttu-id="22fb9-120">SpinLock</span>
      <span class="sxs-lookup">
        <span data-stu-id="22fb9-120">SpinLock</span>
      </span>
    </related>
    <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
      <span data-ttu-id="22fb9-121">Procedura: usare SpinWait e SpinLock</span>
      <span class="sxs-lookup">
        <span data-stu-id="22fb9-121">How to: Use SpinWait and SpinLock</span>
      </span>
    </related>
    <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
      <span data-ttu-id="22fb9-122">Procedura: abilitare la modalità di rilevamento thread in SpinLock</span>
      <span class="sxs-lookup">
        <span data-stu-id="22fb9-122">How to: Enable Thread-Tracking Mode in SpinLock</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpinLock (bool enableThreadOwnerTracking);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enableThreadOwnerTracking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enableThreadOwnerTracking As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpinLock(bool enableThreadOwnerTracking);" />
      <MemberSignature Language="F#" Value="new System.Threading.SpinLock : bool -&gt; System.Threading.SpinLock" Usage="new System.Threading.SpinLock enableThreadOwnerTracking" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enableThreadOwnerTracking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enableThreadOwnerTracking">
          <span data-ttu-id="22fb9-123">Valore che indica se acquisire e utilizzare gli ID dei thread per scopi di debug.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-123">Whether to capture and use thread IDs for debugging purposes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="22fb9-124">Inizializza una nuova istanza della struttura <see cref="T:System.Threading.SpinLock" /> con l'opzione di rilevamento degli ID dei thread per migliorare il debug.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-124">Initializes a new instance of the <see cref="T:System.Threading.SpinLock" /> structure with the option to track thread IDs to improve debugging.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22fb9-125">Il costruttore predefinito per <xref:System.Threading.SpinLock> tiene traccia della proprietà del thread.</span><span class="sxs-lookup"><span data-stu-id="22fb9-125">The default constructor for <xref:System.Threading.SpinLock> tracks thread ownership.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="22fb9-126">Nell'esempio seguente viene illustrato come può essere usato venga liberato uno SpinLock.</span><span class="sxs-lookup"><span data-stu-id="22fb9-126">The following example demonstrates how a SpinLock may be used.</span></span>  
  
```csharp  
// C#  
public class MyType  
{  
    private SpinLock _spinLock = new SpinLock();  
  
    public void DoWork()  
    {  
        bool lockTaken = false;   
        try  
        {  
           _spinLock.Enter(ref lockTaken);  
           // do work here protected by the lock  
        }  
        finally  
        {  
            if (lockTaken) _spinLock.Exit();  
        }  
    }  
}  
```  
  
```vb  
' Visual Basic  
  
Class MyType  
   Private _spinLock As New SpinLock()  
  
   Public Sub DoWork()  
      Dim lockTaken As Boolean = False  
      Try  
         _spinLock.Enter(lockTaken)  
         ' do work here protected by the lock  
      Finally  
         If lockTaken Then _spinLock.Exit()  
      End Try  
   End Sub  
End Class  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="22fb9-127">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-127">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="22fb9-128">Procedura: utilizzare SpinLock per la sincronizzazione di basso livello</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-128">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="22fb9-129">Procedura: abilitare la modalità di rilevamento thread in SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-129">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public void Enter (ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Enter(bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Enter(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Enter (ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Enter(bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.Enter :  -&gt; unit" Usage="spinLock.Enter lockTaken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockTaken">
          <span data-ttu-id="22fb9-130">True se il blocco è stato acquisito. In caso contrario, False.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-130">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="22fb9-131">Prima di chiamare questo metodo, è necessario inizializzare <c>lockTaken</c> su False.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-131">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="22fb9-132">Acquisisce il blocco in modo affidabile, in modo tale che anche se si verifica un'eccezione all'interno della chiamata al metodo, è possibile esaminare l'oggetto <paramref name="lockTaken" /> in maniera affidabile per determinare se il blocco è stato acquisito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-132">Acquires the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22fb9-133"><xref:System.Threading.SpinLock> è un blocco di non rientrante, vale a dire che se un thread è responsabile del blocco, non è consentito immettere nuovamente il blocco.</span><span class="sxs-lookup"><span data-stu-id="22fb9-133"><xref:System.Threading.SpinLock> is a non-reentrant lock, meaning that if a thread holds the lock, it is not allowed to enter the lock again.</span></span> <span data-ttu-id="22fb9-134">Se è abilitata il rilevamento della proprietà dei thread (se è abilitata è disponibile tramite <xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A>), verrà generata un'eccezione quando un thread tenta di immettere nuovamente un blocco che contiene già.</span><span class="sxs-lookup"><span data-stu-id="22fb9-134">If thread ownership tracking is enabled (whether it's enabled is available through <xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A>), an exception will be thrown when a thread tries to re-enter a lock it already holds.</span></span> <span data-ttu-id="22fb9-135">Tuttavia, se è disabilitata il rilevamento della proprietà dei thread, si prova ad attivare un blocco già attivo comporterà deadlock.</span><span class="sxs-lookup"><span data-stu-id="22fb9-135">However, if thread ownership tracking is disabled, attempting to enter a lock already held will result in deadlock.</span></span>  
  
 <span data-ttu-id="22fb9-136">Se si chiama <xref:System.Threading.SpinLock.Exit%2A> senza prima aver chiamato <xref:System.Threading.SpinLock.Enter%2A> lo stato interno del <xref:System.Threading.SpinLock> possono risultare danneggiati.</span><span class="sxs-lookup"><span data-stu-id="22fb9-136">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="22fb9-137">È necessario inizializzare l'argomento <paramref name="lockTaken" /> su False prima della chiamata a Enter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-137">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling Enter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="22fb9-138">Il rilevamento della proprietà dei thread è abilitato e il thread corrente ha già acquisito questo blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-138">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="22fb9-139">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-139">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="22fb9-140">Procedura: utilizzare SpinLock per la sincronizzazione di basso livello</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-140">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="22fb9-141">Procedura: abilitare la modalità di rilevamento thread in SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-141">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Exit">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="22fb9-142">Rilascia il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-142">Releases the lock.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public void Exit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Exit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Exit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Exit();" />
      <MemberSignature Language="F#" Value="member this.Exit : unit -&gt; unit" Usage="spinLock.Exit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="22fb9-143">Rilascia il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-143">Releases the lock.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22fb9-144">L'overload predefinito del <xref:System.Threading.SpinLock.Exit%2A> fornisce lo stesso comportamento come se la chiamata a <xref:System.Threading.SpinLock.Exit%2A> usando true come argomento.</span><span class="sxs-lookup"><span data-stu-id="22fb9-144">The default overload of <xref:System.Threading.SpinLock.Exit%2A> provides the same behavior as if calling <xref:System.Threading.SpinLock.Exit%2A> using true as the argument.</span></span>  
  
 <span data-ttu-id="22fb9-145">Se si chiama <xref:System.Threading.SpinLock.Exit%2A> senza prima aver chiamato <xref:System.Threading.SpinLock.Enter%2A> lo stato interno del <xref:System.Threading.SpinLock> possono risultare danneggiati.</span><span class="sxs-lookup"><span data-stu-id="22fb9-145">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="22fb9-146">Il rilevamento della proprietà dei thread è abilitato e il thread corrente non è il proprietario di questo blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-146">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</span>
          </span>
        </exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="22fb9-147">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-147">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="22fb9-148">Procedura: utilizzare SpinLock per la sincronizzazione di basso livello</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-148">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="22fb9-149">Procedura: abilitare la modalità di rilevamento thread in SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-149">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public void Exit (bool useMemoryBarrier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exit(bool useMemoryBarrier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Exit(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Exit (useMemoryBarrier As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Exit(bool useMemoryBarrier);" />
      <MemberSignature Language="F#" Value="member this.Exit : bool -&gt; unit" Usage="spinLock.Exit useMemoryBarrier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useMemoryBarrier" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useMemoryBarrier">
          <span data-ttu-id="22fb9-150">Valore booleano che indica se generare un limite di memoria per pubblicare immediatamente l'operazione di uscita agli altri thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-150">A Boolean value that indicates whether a memory fence should be issued in order to immediately publish the exit operation to other threads.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="22fb9-151">Rilascia il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-151">Releases the lock.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22fb9-152">La chiamata <xref:System.Threading.SpinLock.Exit%2A> con il `useMemoryBarrier` argomento impostato su true sarà possibile migliorare la chiarezza del blocco a discapito delle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="22fb9-152">Calling <xref:System.Threading.SpinLock.Exit%2A> with the `useMemoryBarrier` argument set to true will improve the fairness of the lock at the expense of some performance.</span></span> <span data-ttu-id="22fb9-153">Il valore predefinito <xref:System.Threading.SpinLock.Exit%2A> overload si comporta come se si specifica true per `useMemoryBarrier`.</span><span class="sxs-lookup"><span data-stu-id="22fb9-153">The default <xref:System.Threading.SpinLock.Exit%2A> overload behaves as if specifying true for `useMemoryBarrier`.</span></span>  
  
 <span data-ttu-id="22fb9-154">Se si chiama <xref:System.Threading.SpinLock.Exit%2A> senza prima aver chiamato <xref:System.Threading.SpinLock.Enter%2A> lo stato interno del <xref:System.Threading.SpinLock> possono risultare danneggiati.</span><span class="sxs-lookup"><span data-stu-id="22fb9-154">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="22fb9-155">Il rilevamento della proprietà dei thread è abilitato e il thread corrente non è il proprietario di questo blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-155">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</span>
          </span>
        </exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="22fb9-156">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-156">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="22fb9-157">Procedura: utilizzare SpinLock per la sincronizzazione di basso livello</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-157">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="22fb9-158">Procedura: abilitare la modalità di rilevamento thread in SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-158">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsHeld">
      <MemberSignature Language="C#" Value="public bool IsHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHeld : bool" Usage="System.Threading.SpinLock.IsHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="22fb9-159">Ottiene un valore che indica se attualmente il blocco è mantenuto da un thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-159">Gets whether the lock is currently held by any thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="22fb9-160">true se attualmente il blocco è mantenuto da un thread; in caso contrario, false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-160">true if the lock is currently held by any thread; otherwise false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="22fb9-161">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-161">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="22fb9-162">Procedura: utilizzare SpinLock per la sincronizzazione di basso livello</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-162">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="22fb9-163">Procedura: abilitare la modalità di rilevamento thread in SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-163">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsHeldByCurrentThread">
      <MemberSignature Language="C#" Value="public bool IsHeldByCurrentThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeldByCurrentThread" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsHeldByCurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHeldByCurrentThread As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHeldByCurrentThread { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHeldByCurrentThread : bool" Usage="System.Threading.SpinLock.IsHeldByCurrentThread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="22fb9-164">Ottiene un valore che indica se il blocco è mantenuto dal thread corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-164">Gets whether the lock is held by the current thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="22fb9-165">true se il blocco è mantenuto dal thread corrente; in caso contrario, false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-165">true if the lock is held by the current thread; otherwise false.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22fb9-166">Se il blocco è stato inizializzato per tenere traccia dei thread proprietario, verrà restituito se il blocco viene acquisito dal thread corrente.</span><span class="sxs-lookup"><span data-stu-id="22fb9-166">If the lock was initialized to track owner threads, this will return whether the lock is acquired by the current thread.</span></span> <span data-ttu-id="22fb9-167">Non è consentito utilizzare questa proprietà quando il blocco è stato inizializzato per non tenere traccia della proprietà dei thread.</span><span class="sxs-lookup"><span data-stu-id="22fb9-167">It is invalid to use this property when the lock was initialized to not track thread ownership.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="22fb9-168">Il rilevamento della proprietà dei thread è disabilitato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-168">Thread ownership tracking is disabled.</span>
          </span>
        </exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="22fb9-169">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-169">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="22fb9-170">Procedura: utilizzare SpinLock per la sincronizzazione di basso livello</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-170">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="22fb9-171">Procedura: abilitare la modalità di rilevamento thread in SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-171">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsThreadOwnerTrackingEnabled">
      <MemberSignature Language="C#" Value="public bool IsThreadOwnerTrackingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsThreadOwnerTrackingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsThreadOwnerTrackingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsThreadOwnerTrackingEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsThreadOwnerTrackingEnabled : bool" Usage="System.Threading.SpinLock.IsThreadOwnerTrackingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="22fb9-172">Ottiene un valore che indica se per questa istanza è abilitato il rilevamento della proprietà dei thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-172">Gets whether thread ownership tracking is enabled for this instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="22fb9-173">true se per questa istanza è abilitato il rilevamento della proprietà dei thread; in caso contrario, false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-173">true if thread ownership tracking is enabled for this instance; otherwise false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="22fb9-174">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-174">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="22fb9-175">Procedura: utilizzare SpinLock per la sincronizzazione di basso livello</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-175">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="22fb9-176">Procedura: abilitare la modalità di rilevamento thread in SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-176">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="22fb9-177">Tenta di acquisire il blocco in modo affidabile, in modo tale che anche se si verifica un'eccezione all'interno della chiamata al metodo, è possibile esaminare l'oggetto <paramref name="lockTaken" /> in maniera affidabile per determinare se il blocco è stato acquisito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-177">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="22fb9-178">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-178">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="22fb9-179">Procedura: utilizzare SpinLock per la sincronizzazione di basso livello</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-179">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="22fb9-180">Procedura: abilitare la modalità di rilevamento thread in SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-180">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter :  -&gt; unit" Usage="spinLock.TryEnter lockTaken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockTaken">
          <span data-ttu-id="22fb9-181">True se il blocco è stato acquisito. In caso contrario, False.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-181">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="22fb9-182">Prima di chiamare questo metodo, è necessario inizializzare <c>lockTaken</c> su False.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-182">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="22fb9-183">Tenta di acquisire il blocco in modo affidabile, in modo tale che anche se si verifica un'eccezione all'interno della chiamata al metodo, è possibile esaminare l'oggetto <paramref name="lockTaken" /> in maniera affidabile per determinare se il blocco è stato acquisito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-183">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22fb9-184">A differenza di <xref:System.Threading.SpinLock.Enter%2A>, TryEnter non bloccherà in attesa per il blocco sia disponibile.</span><span class="sxs-lookup"><span data-stu-id="22fb9-184">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block waiting for the lock to be available.</span></span> <span data-ttu-id="22fb9-185">Se il blocco non è disponibile quando viene chiamato TryEnter, verrà restituito immediatamente senza ulteriori rotazioni.</span><span class="sxs-lookup"><span data-stu-id="22fb9-185">If the lock is not available when TryEnter is called, it will return immediately without any further spinning.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="22fb9-186">È necessario inizializzare l'argomento <paramref name="lockTaken" /> su False prima della chiamata a TryEnter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-186">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="22fb9-187">Il rilevamento della proprietà dei thread è abilitato e il thread corrente ha già acquisito questo blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-187">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="22fb9-188">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-188">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="22fb9-189">Procedura: utilizzare SpinLock per la sincronizzazione di basso livello</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-189">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="22fb9-190">Procedura: abilitare la modalità di rilevamento thread in SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-190">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(int millisecondsTimeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter : int *  -&gt; unit" Usage="spinLock.TryEnter (millisecondsTimeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="22fb9-191">Numero di millisecondi di attesa oppure <see cref="F:System.Threading.Timeout.Infinite" /> (-1) per un'attesa indefinita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-191">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="22fb9-192">True se il blocco è stato acquisito. In caso contrario, False.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-192">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="22fb9-193">Prima di chiamare questo metodo, è necessario inizializzare <c>lockTaken</c> su False.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-193">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="22fb9-194">Tenta di acquisire il blocco in modo affidabile, in modo tale che anche se si verifica un'eccezione all'interno della chiamata al metodo, è possibile esaminare l'oggetto <paramref name="lockTaken" /> in maniera affidabile per determinare se il blocco è stato acquisito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-194">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22fb9-195">A differenza di <xref:System.Threading.SpinLock.Enter%2A>, TryEnter non bloccherà indefinitamente in attesa per il blocco sia disponibile.</span><span class="sxs-lookup"><span data-stu-id="22fb9-195">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block indefinitely waiting for the lock to be available.</span></span> <span data-ttu-id="22fb9-196">Verrà bloccata finché il blocco non è disponibile o finché il `millisecondsTimeout` è scaduto.</span><span class="sxs-lookup"><span data-stu-id="22fb9-196">It will block until either the lock is available or until the `millisecondsTimeout` has expired.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="22fb9-197">
            <paramref name="millisecondsTimeout" /> è un numero negativo diverso da -1, che rappresenta un timeout infinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-197">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="22fb9-198">È necessario inizializzare l'argomento <paramref name="lockTaken" /> su False prima della chiamata a TryEnter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-198">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="22fb9-199">Il rilevamento della proprietà dei thread è abilitato e il thread corrente ha già acquisito questo blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-199">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="22fb9-200">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-200">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="22fb9-201">Procedura: utilizzare SpinLock per la sincronizzazione di basso livello</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-201">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="22fb9-202">Procedura: abilitare la modalità di rilevamento thread in SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-202">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(TimeSpan timeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter : TimeSpan *  -&gt; unit" Usage="spinLock.TryEnter (timeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="22fb9-203">Oggetto <see cref="T:System.TimeSpan" /> che rappresenta il numero di millisecondi di attesa oppure <see cref="T:System.TimeSpan" /> che rappresenta -1 millisecondi per un'attesa indefinita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-203">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="22fb9-204">True se il blocco è stato acquisito. In caso contrario, False.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-204">True if the lock is acquired; otherwise, false.</span>
          </span>
          <span data-ttu-id="22fb9-205">Prima di chiamare questo metodo, è necessario inizializzare <c>lockTaken</c> su False.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-205">
              <c>lockTaken</c> must be initialized to false prior to calling this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="22fb9-206">Tenta di acquisire il blocco in modo affidabile, in modo tale che anche se si verifica un'eccezione all'interno della chiamata al metodo, è possibile esaminare l'oggetto <paramref name="lockTaken" /> in maniera affidabile per determinare se il blocco è stato acquisito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-206">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22fb9-207">A differenza di <xref:System.Threading.SpinLock.Enter%2A>, TryEnter non bloccherà indefinitamente in attesa per il blocco sia disponibile.</span><span class="sxs-lookup"><span data-stu-id="22fb9-207">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block indefinitely waiting for the lock to be available.</span></span> <span data-ttu-id="22fb9-208">Verrà bloccata finché il blocco non è disponibile o finché il `timeout` è scaduto.</span><span class="sxs-lookup"><span data-stu-id="22fb9-208">It will block until either the lock is available or until the `timeout` has expired.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="22fb9-209">
            <paramref name="timeout" /> è un numero negativo diverso da -1 millisecondi che rappresenta un timeout infinito o il timeout è più grande di <see cref="F:System.Int32.MaxValue" /> millisecondi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-209">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="22fb9-210">È necessario inizializzare l'argomento <paramref name="lockTaken" /> su False prima della chiamata a TryEnter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-210">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="22fb9-211">Il rilevamento della proprietà dei thread è abilitato e il thread corrente ha già acquisito questo blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-211">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span>
          </span>
        </exception>
        <related type="Article" href="http://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958">
          <span data-ttu-id="22fb9-212">SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-212">SpinLock</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19">
          <span data-ttu-id="22fb9-213">Procedura: utilizzare SpinLock per la sincronizzazione di basso livello</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-213">How to: Use SpinLock for Low-Level Synchronization</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01">
          <span data-ttu-id="22fb9-214">Procedura: abilitare la modalità di rilevamento thread in SpinLock</span>
          <span class="sxs-lookup">
            <span data-stu-id="22fb9-214">How to: Enable Thread-Tracking Mode in SpinLock</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>