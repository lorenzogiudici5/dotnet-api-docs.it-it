<Type Name="Monitor" FullName="System.Threading.Monitor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cfafcfe91d4ef6eba6ebbbbe6d7101119c93823a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Monitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Monitor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Monitor" />
  <TypeSignature Language="VB.NET" Value="Public Class Monitor" />
  <TypeSignature Language="C++ CLI" Value="public ref class Monitor abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="f913e-101">Fornisce un meccanismo che sincronizza l'accesso agli oggetti.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f913e-101">Provides a mechanism that synchronizes access to objects.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f913e-102">Il <xref:System.Threading.Monitor> classe consente di sincronizzare l'accesso a un'area di codice accettando e rilasciando un blocco su un determinato oggetto chiamando il <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, e <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> metodi.</span><span class="sxs-lookup"><span data-stu-id="f913e-102">The <xref:System.Threading.Monitor> class allows you to synchronize access to a region of code by taking and releasing a lock on a particular object by calling the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="f913e-103">I blocchi di oggetti consentono di limitare l'accesso a un blocco di codice, comunemente denominato sezione critica.</span><span class="sxs-lookup"><span data-stu-id="f913e-103">Object locks provide the ability to restrict access to a block of code, commonly called a critical section.</span></span> <span data-ttu-id="f913e-104">Mentre un thread proprietario del blocco per un oggetto, nessun altro thread può acquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-104">While a thread owns the lock for an object, no other thread can acquire that lock.</span></span> <span data-ttu-id="f913e-105">È inoltre possibile utilizzare il <xref:System.Threading.Monitor> codice della classe per garantire che nessun altro thread possa accedere a una sezione dell'applicazione viene eseguita dal proprietario del blocco, a meno che l'altro thread è in esecuzione il codice utilizzando un diverso oggetto bloccato.</span><span class="sxs-lookup"><span data-stu-id="f913e-105">You can also use the <xref:System.Threading.Monitor> class to ensure that no other thread is allowed to access a section of application code being executed by the lock owner, unless the other thread is executing the code using a different locked object.</span></span>  
  
 <span data-ttu-id="f913e-106">Contenuto dell'articolo:</span><span class="sxs-lookup"><span data-stu-id="f913e-106">In this article:</span></span>  
  
 <span data-ttu-id="f913e-107">[La classe di monitoraggio: Panoramica](#Overview) </span><span class="sxs-lookup"><span data-stu-id="f913e-107">[The Monitor class: An overview](#Overview) </span></span>  
 <span data-ttu-id="f913e-108">[Oggetto di blocco](#Lock) </span><span class="sxs-lookup"><span data-stu-id="f913e-108">[The lock object](#Lock) </span></span>  
 <span data-ttu-id="f913e-109">[La sezione critica](#CriticalSection) </span><span class="sxs-lookup"><span data-stu-id="f913e-109">[The critical section](#CriticalSection) </span></span>  
 <span data-ttu-id="f913e-110">[Attesa Pulse e PulseAll](#Pulse) </span><span class="sxs-lookup"><span data-stu-id="f913e-110">[Pulse, PulseAll, and Wait](#Pulse) </span></span>  
 [<span data-ttu-id="f913e-111">Monitoraggi e gli handle di attesa</span><span class="sxs-lookup"><span data-stu-id="f913e-111">Monitors and wait handles</span></span>](#WaitHandles)  
  
<a name="Overview"></a>   
## <a name="the-monitor-class-an-overview"></a><span data-ttu-id="f913e-112">La classe di monitoraggio: Panoramica</span><span class="sxs-lookup"><span data-stu-id="f913e-112">The Monitor class: An overview</span></span>  
 <span data-ttu-id="f913e-113"><xref:System.Threading.Monitor> presenta le seguenti funzionalità:</span><span class="sxs-lookup"><span data-stu-id="f913e-113"><xref:System.Threading.Monitor> has the following features:</span></span>  
  
-   <span data-ttu-id="f913e-114">È associata a un oggetto su richiesta.</span><span class="sxs-lookup"><span data-stu-id="f913e-114">It is associated with an object on demand.</span></span>  
  
-   <span data-ttu-id="f913e-115">È non associato, vale a dire che può essere chiamato direttamente da qualsiasi contesto.</span><span class="sxs-lookup"><span data-stu-id="f913e-115">It is unbound, which means it can be called directly from any context.</span></span>  
  
-   <span data-ttu-id="f913e-116">Un'istanza di <xref:System.Threading.Monitor> classe non può essere creata; i metodi del <xref:System.Threading.Monitor> classe sono tutti statici.</span><span class="sxs-lookup"><span data-stu-id="f913e-116">An instance of the <xref:System.Threading.Monitor> class cannot be created; the methods of the <xref:System.Threading.Monitor> class are all static.</span></span> <span data-ttu-id="f913e-117">Ogni metodo viene passato l'oggetto sincronizzato che controlla l'accesso alla sezione critica.</span><span class="sxs-lookup"><span data-stu-id="f913e-117">Each method is passed the synchronized object that controls access to the critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f913e-118">Utilizzare il <xref:System.Threading.Monitor> classe per bloccare gli oggetti diversi da stringhe (ovvero, tipi di riferimento diverso da <xref:System.String>), i tipi di valore non.</span><span class="sxs-lookup"><span data-stu-id="f913e-118">Use the <xref:System.Threading.Monitor> class to lock objects other than strings (that is, reference types other than <xref:System.String>), not value types.</span></span> <span data-ttu-id="f913e-119">Per informazioni dettagliate, vedere gli overload di <xref:System.Threading.Monitor.Enter%2A> (metodo) e [dell'oggetto di blocco](#Lock) sezione più avanti in questo articolo.</span><span class="sxs-lookup"><span data-stu-id="f913e-119">For details, see the overloads of the <xref:System.Threading.Monitor.Enter%2A> method and [The lock object](#Lock) section later in this article.</span></span>  
  
 <span data-ttu-id="f913e-120">Nella tabella seguente descrive le azioni che possono essere eseguite dal thread che accedono a oggetti sincronizzati:</span><span class="sxs-lookup"><span data-stu-id="f913e-120">The following table describes the actions that can be taken by threads that access synchronized objects:</span></span>  
  
|<span data-ttu-id="f913e-121">Operazione</span><span class="sxs-lookup"><span data-stu-id="f913e-121">Action</span></span>|<span data-ttu-id="f913e-122">Descrizione</span><span class="sxs-lookup"><span data-stu-id="f913e-122">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="f913e-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span><span class="sxs-lookup"><span data-stu-id="f913e-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span></span>|<span data-ttu-id="f913e-124">Acquisisce un blocco per un oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-124">Acquires a lock for an object.</span></span> <span data-ttu-id="f913e-125">Inoltre, questa azione contrassegna l'inizio di una sezione critica.</span><span class="sxs-lookup"><span data-stu-id="f913e-125">This action also marks the beginning of a critical section.</span></span> <span data-ttu-id="f913e-126">Nessun altro thread può accedere alla sezione critica, a meno che non è in esecuzione le istruzioni nella sezione critica utilizzando un diverso oggetto bloccato.</span><span class="sxs-lookup"><span data-stu-id="f913e-126">No other thread can enter the critical section unless it is executing the instructions in the critical section using a different locked object.</span></span>|  
|<xref:System.Threading.Monitor.Wait%2A>|<span data-ttu-id="f913e-127">Rilascia il blocco su un oggetto per consentire ad altri thread per bloccare e accedere all'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-127">Releases the lock on an object in order to permit other threads to lock and access the object.</span></span> <span data-ttu-id="f913e-128">Il thread chiamante attende l'oggetto accede a un altro thread.</span><span class="sxs-lookup"><span data-stu-id="f913e-128">The calling thread waits while another thread accesses the object.</span></span> <span data-ttu-id="f913e-129">Segnali Pulse vengono utilizzati per notificare il thread in attesa sulle modifiche apportate allo stato di un oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-129">Pulse signals are used to notify waiting threads about changes to an object's state.</span></span>|  
|<span data-ttu-id="f913e-130"><xref:System.Threading.Monitor.Pulse%2A> (signal), <xref:System.Threading.Monitor.PulseAll%2A></span><span class="sxs-lookup"><span data-stu-id="f913e-130"><xref:System.Threading.Monitor.Pulse%2A> (signal), <xref:System.Threading.Monitor.PulseAll%2A></span></span>|<span data-ttu-id="f913e-131">Invia un segnale a uno o più thread in attesa.</span><span class="sxs-lookup"><span data-stu-id="f913e-131">Sends a signal to one or more waiting threads.</span></span> <span data-ttu-id="f913e-132">Il segnale di notifica a un thread in attesa che lo stato dell'oggetto bloccato è cambiato e il proprietario del blocco è pronto per rilasciare il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-132">The signal notifies a waiting thread that the state of the locked object has changed, and the owner of the lock is ready to release the lock.</span></span> <span data-ttu-id="f913e-133">Il thread in attesa viene inserito nella coda di pronto dell'oggetto in modo che possa infine ricevere il blocco per l'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-133">The waiting thread is placed in the object's ready queue so that it might eventually receive the lock for the object.</span></span> <span data-ttu-id="f913e-134">Una volta che il thread ha il blocco, è possibile verificare il nuovo stato dell'oggetto per vedere se è stato raggiunto lo stato obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f913e-134">Once the thread has the lock, it can check the new state of the object to see if the required state has been reached.</span></span>|  
|<xref:System.Threading.Monitor.Exit%2A>|<span data-ttu-id="f913e-135">Rilascia il blocco su un oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-135">Releases the lock on an object.</span></span> <span data-ttu-id="f913e-136">Inoltre, questa azione contrassegna la fine di una sezione critica protetta dall'oggetto bloccato.</span><span class="sxs-lookup"><span data-stu-id="f913e-136">This action also marks the end of a critical section protected by the locked object.</span></span>|  
  
 <span data-ttu-id="f913e-137">A partire dal [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], sono disponibili due set di overload per il <xref:System.Threading.Monitor.Enter%2A> e <xref:System.Threading.Monitor.TryEnter%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="f913e-137">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], there are two sets of overloads for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.TryEnter%2A> methods.</span></span> <span data-ttu-id="f913e-138">Un set di overload è un `ref` (in c#) o `ByRef` (in Visual Basic) <xref:System.Boolean> parametro che è impostato in modo atomico `true` se viene acquisito il blocco, anche se viene generata un'eccezione durante l'acquisizione del blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-138">One set of overloads has a `ref` (in C#) or `ByRef` (in Visual Basic) <xref:System.Boolean> parameter that is atomically set to `true` if the lock is acquired, even if an exception is thrown when acquiring the lock.</span></span> <span data-ttu-id="f913e-139">Usare questi overload se è fondamentale per rilasciare il blocco in tutti i casi, anche quando le risorse che di blocco per la protezione potrebbero non essere in uno stato coerente.</span><span class="sxs-lookup"><span data-stu-id="f913e-139">Use these overloads if it is critical to release the lock in all cases, even when the resources the lock is protecting might not be in a consistent state.</span></span>  
  
<a name="Lock"></a>   
## <a name="the-lock-object"></a><span data-ttu-id="f913e-140">Oggetto di blocco</span><span class="sxs-lookup"><span data-stu-id="f913e-140">The lock object</span></span>  
 <span data-ttu-id="f913e-141">La classe di monitoraggio è costituita `static` (in c#) o `Shared` (in Visual Basic) metodi che operano su un oggetto che controlla l'accesso alla sezione critica.</span><span class="sxs-lookup"><span data-stu-id="f913e-141">The Monitor class consists of `static` (in C#) or  `Shared` (in Visual Basic) methods that operate on an object that controls access to the critical section.</span></span>  <span data-ttu-id="f913e-142">Per ogni oggetto sincronizzato, vengono gestite le informazioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="f913e-142">The following information is maintained for each synchronized object:</span></span>  
  
-   <span data-ttu-id="f913e-143">Un riferimento al thread che attualmente contiene il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-143">A reference to the thread that currently holds the lock.</span></span>  
  
-   <span data-ttu-id="f913e-144">Un riferimento a una coda pronto, che contiene i thread pronti ottenere il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-144">A reference to a ready queue, which contains the threads that are ready to obtain the lock.</span></span>  
  
-   <span data-ttu-id="f913e-145">Un riferimento a una coda di attesa, che contiene i thread in attesa per la notifica di una modifica nello stato dell'oggetto bloccato.</span><span class="sxs-lookup"><span data-stu-id="f913e-145">A reference to a waiting queue, which contains the threads that are waiting for notification of a change in the state of the locked object.</span></span>  
  
 <span data-ttu-id="f913e-146"><xref:System.Threading.Monitor> blocca gli oggetti, ovvero i tipi di riferimento, non i tipi di valore.</span><span class="sxs-lookup"><span data-stu-id="f913e-146"><xref:System.Threading.Monitor> locks objects (that is, reference types), not value types.</span></span> <span data-ttu-id="f913e-147">Anche se è possibile passare un tipo di valore a <xref:System.Threading.Monitor.Enter%2A> e <xref:System.Threading.Monitor.Exit%2A>, ogni valore viene sottoposto a boxing separatamente per ogni chiamata.</span><span class="sxs-lookup"><span data-stu-id="f913e-147">While you can pass a value type to <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, it is boxed separately for each call.</span></span> <span data-ttu-id="f913e-148">Poiché ogni chiamata crea un oggetto separato, <xref:System.Threading.Monitor.Enter%2A> non si blocca mai e non sincronizza realmente il codice che dovrebbe proteggere.</span><span class="sxs-lookup"><span data-stu-id="f913e-148">Since each call creates a separate object, <xref:System.Threading.Monitor.Enter%2A> never blocks, and the code it is supposedly protecting is not really synchronized.</span></span> <span data-ttu-id="f913e-149">L'oggetto passato a <xref:System.Threading.Monitor.Exit%2A>, inoltre, è diverso dall'oggetto passato a <xref:System.Threading.Monitor.Enter%2A>, quindi <xref:System.Threading.Monitor> genera un'eccezione <xref:System.Threading.SynchronizationLockException> con il messaggio "Il metodo di sincronizzazione dell'oggetto è stato chiamato da un blocco di codice non sincronizzato".</span><span class="sxs-lookup"><span data-stu-id="f913e-149">In addition, the object passed to <xref:System.Threading.Monitor.Exit%2A> is different from the object passed to <xref:System.Threading.Monitor.Enter%2A>, so <xref:System.Threading.Monitor> throws <xref:System.Threading.SynchronizationLockException> exception with the message "Object synchronization method was called from an unsynchronized block of code."</span></span>  
  
 <span data-ttu-id="f913e-150">L'esempio seguente illustra questo problema.</span><span class="sxs-lookup"><span data-stu-id="f913e-150">The following example illustrates this problem.</span></span> <span data-ttu-id="f913e-151">Avvia dieci attività, ognuna delle quali rimane semplicemente inattiva per 250 millisecondi.</span><span class="sxs-lookup"><span data-stu-id="f913e-151">It launches ten tasks, each of which just sleeps for 250 milliseconds.</span></span> <span data-ttu-id="f913e-152">Ogni attività aggiorna quindi una variabile del contatore, `nTasks`, in modo da contare il numero di attività effettivamente avviate ed eseguite.</span><span class="sxs-lookup"><span data-stu-id="f913e-152">Each task then updates a counter variable, `nTasks`, which is intended to count the number of tasks that actually launched and executed.</span></span> <span data-ttu-id="f913e-153">Poiché `nTasks` è una variabile globale che può essere aggiornata da più attività contemporaneamente, viene usato un oggetto monitor per proteggerla dalla modifica simultanea da parte di più attività.</span><span class="sxs-lookup"><span data-stu-id="f913e-153">Because `nTasks` is a global variable that can be updated by multiple tasks simultaneously, a monitor is used to protect it from simultaneous modification by multiple tasks.</span></span> <span data-ttu-id="f913e-154">Tuttavia, come illustrato dall'output dell'esempio, ogni attività genera un'eccezione <xref:System.Threading.SynchronizationLockException>.</span><span class="sxs-lookup"><span data-stu-id="f913e-154">However, as the output from the example shows, each of the tasks throws a <xref:System.Threading.SynchronizationLockException> exception.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#2](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badlock1.cs#2)]
 [!code-vb[Conceptual.Monitors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badlock1.vb#2)]  
  
 <span data-ttu-id="f913e-155">Ogni attività genera un'eccezione <xref:System.Threading.SynchronizationLockException>, poiché la variabile `nTasks` viene sottoposta a boxing prima della chiamata al metodo <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> in ogni attività.</span><span class="sxs-lookup"><span data-stu-id="f913e-155">Each task throws a <xref:System.Threading.SynchronizationLockException> exception because the `nTasks` variable is boxed before the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method in each task.</span></span> <span data-ttu-id="f913e-156">In altri termini, una variabile separata, indipendente dalle altre, viene passata a ogni chiamata al metodo.</span><span class="sxs-lookup"><span data-stu-id="f913e-156">In other words, each method call is passed a separate variable that is independent of the others.</span></span> <span data-ttu-id="f913e-157">`nTasks` viene sottoposto di nuovo a boxing nella chiamata al metodo <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="f913e-157">`nTasks` is boxed again in the call to the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="f913e-158">Ancora una volta, ciò crea dieci nuove variabili di tipo boxed, indipendenti le une dalle altre, `nTasks` e le dieci variabili di tipo boxed create nella chiamata al metodo <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="f913e-158">Once again, this creates ten new boxed variables, which are independent of each other, `nTasks`, and the ten boxed variables created in the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="f913e-159">L'eccezione viene generata, quindi, poiché il codice sta tentando di rilasciare un blocco su una variabile appena creata non bloccata in precedenza.</span><span class="sxs-lookup"><span data-stu-id="f913e-159">The exception is thrown, then, because our code is attempting to release a lock on a newly created variable that was not previously locked.</span></span>  
  
 <span data-ttu-id="f913e-160">Anche se è possibile sottoporre a boxing una variabile di tipo valore prima di chiamare <xref:System.Threading.Monitor.Enter%2A> e <xref:System.Threading.Monitor.Exit%2A>, come illustrato nell'esempio seguente, e passare lo stesso oggetto di tipo boxed a entrambi i metodi, ciò non presenta alcun vantaggio.</span><span class="sxs-lookup"><span data-stu-id="f913e-160">Although you can box a value type variable before calling <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, as shown in the following example, and pass the same boxed object to both methods, there is no advantage to doing this.</span></span> <span data-ttu-id="f913e-161">Le modifiche alla variabile di tipo unboxed non sono riflesse nella copia di tipo boxed e non è possibile modificare il valore della copia di tipo boxed.</span><span class="sxs-lookup"><span data-stu-id="f913e-161">Changes to the unboxed variable are not reflected in the boxed copy, and there is no way to change the value of the boxed copy.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badbox1.cs#3)]
 [!code-vb[Conceptual.Monitors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badbox1.vb#3)]  
  
 <span data-ttu-id="f913e-162">Quando si seleziona un oggetto su cui eseguire la sincronizzazione, è necessario bloccare solo per gli oggetti interni o privati.</span><span class="sxs-lookup"><span data-stu-id="f913e-162">When selecting an object on which to synchronize, you should lock only on private or internal objects.</span></span> <span data-ttu-id="f913e-163">Il blocco degli oggetti esterni potrebbe causare deadlock, perché il codice correlato può scegliere gli stessi oggetti di blocco per scopi diversi.</span><span class="sxs-lookup"><span data-stu-id="f913e-163">Locking on external objects might result in deadlocks, because unrelated code could choose the same objects to lock on for different purposes.</span></span>  
  
 <span data-ttu-id="f913e-164">Si noti che è possibile sincronizzare su un oggetto in più domini applicazione se l'oggetto utilizzato per il blocco deriva da <xref:System.MarshalByRefObject>.</span><span class="sxs-lookup"><span data-stu-id="f913e-164">Note that you can synchronize on an object in multiple application domains if the object used for the lock derives from <xref:System.MarshalByRefObject>.</span></span>  
  
<a name="CriticalSection"></a>   
## <a name="the-critical-section"></a><span data-ttu-id="f913e-165">La sezione critica</span><span class="sxs-lookup"><span data-stu-id="f913e-165">The critical section</span></span>  
 <span data-ttu-id="f913e-166">Utilizzare il <xref:System.Threading.Monitor.Enter%2A> e <xref:System.Threading.Monitor.Exit%2A> metodi per contrassegnare l'inizio e alla fine di una sezione critica.</span><span class="sxs-lookup"><span data-stu-id="f913e-166">Use the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods to mark the beginning and end of a critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f913e-167">La funzionalità fornita dal <xref:System.Threading.Monitor.Enter%2A> e <xref:System.Threading.Monitor.Exit%2A> metodi è identico a quello fornito dal [blocco](~/docs/csharp/language-reference/keywords/lock-statement.md) istruzione in c# e [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) istruzione in Visual Basic, con la differenza che il a capo automatico di costrutti di linguaggio di <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> overload del metodo e <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> metodo in un `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="f913e-167">The functionality provided by the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods is identical to that provided by the [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement in C# and the [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement in Visual Basic, except that the language constructs wrap the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> method overload and the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method in a `try`…`finally`</span></span> <span data-ttu-id="f913e-168">blocco per garantire che il monitoraggio venga rilasciato.</span><span class="sxs-lookup"><span data-stu-id="f913e-168">block to ensure that the monitor is released.</span></span>  
  
 <span data-ttu-id="f913e-169">Se la sezione critica è un set di istruzioni contigue, quindi il blocco acquisito dal <xref:System.Threading.Monitor.Enter%2A> metodo garantisce che solo un singolo thread possa eseguire il codice incluso nell'oggetto bloccato.</span><span class="sxs-lookup"><span data-stu-id="f913e-169">If the critical section is a set of contiguous instructions, then the lock acquired by the <xref:System.Threading.Monitor.Enter%2A> method guarantees that only a single thread can execute the enclosed code with the locked object.</span></span> <span data-ttu-id="f913e-170">In questo caso, si consiglia di posizionare che il codice che un `try` bloccare e inserire la chiamata al <xref:System.Threading.Monitor.Exit%2A> metodo in un `finally` blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-170">In this case, we recommend that you place that code in a `try` block and place the call to the <xref:System.Threading.Monitor.Exit%2A> method in a `finally` block.</span></span> <span data-ttu-id="f913e-171">Ciò assicura che il blocco venga rilasciato anche se si verifica un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f913e-171">This ensures that the lock is released even if an exception occurs.</span></span> <span data-ttu-id="f913e-172">Frammento di codice seguente viene illustrato questo modello.</span><span class="sxs-lookup"><span data-stu-id="f913e-172">The following code fragment illustrates this pattern.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#2)]
 [!code-vb[System.Threading.Monitor.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#2)]  
  
 <span data-ttu-id="f913e-173">Questa funzionalità viene in genere utilizzata per sincronizzare l'accesso a un valore statico o il metodo di istanza di una classe.</span><span class="sxs-lookup"><span data-stu-id="f913e-173">This facility is typically used to synchronize access to a static or instance method of a class.</span></span>  
  
 <span data-ttu-id="f913e-174">Se una sezione critica occupa un intero metodo, è possano utilizzare le funzionalità di blocco inserendo il <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> sul metodo, specificando il <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> valore nel costruttore della <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="f913e-174">If a critical section spans an entire method, the locking facility can be achieved by placing the <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> on the method, and specifying the <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> value in the constructor of <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>.</span></span> <span data-ttu-id="f913e-175">Quando si usa questo attributo, il <xref:System.Threading.Monitor.Enter%2A> e <xref:System.Threading.Monitor.Exit%2A> chiamate al metodo non sono necessari.</span><span class="sxs-lookup"><span data-stu-id="f913e-175">When you use this attribute, the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> method calls are not needed.</span></span> <span data-ttu-id="f913e-176">Frammento di codice seguente viene illustrato questo modello:</span><span class="sxs-lookup"><span data-stu-id="f913e-176">The following code fragment illustrates this pattern:</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#3)]
 [!code-vb[System.Threading.Monitor.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#3)]  
  
 <span data-ttu-id="f913e-177">Si noti che l'attributo, il thread corrente contenere il blocco finché il metodo restituisce; Se il blocco può essere rilasciato prima, utilizzare il <xref:System.Threading.Monitor> classe c# [blocco](~/docs/csharp/language-reference/keywords/lock-statement.md) istruzione o Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) istruzione all'interno del metodo anziché l'attributo.</span><span class="sxs-lookup"><span data-stu-id="f913e-177">Note that the attribute causes the current thread to hold the lock until the method returns; if the lock can be released sooner, use the <xref:System.Threading.Monitor> class, the C# [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement, or the Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement inside of the method instead of the attribute.</span></span>  
  
 <span data-ttu-id="f913e-178">Sebbene sia possibile per il <xref:System.Threading.Monitor.Enter%2A> e <xref:System.Threading.Monitor.Exit%2A> le istruzioni che bloccare e rilasciare un determinato oggetto superino membro o i limiti di classe, questa procedura non consigliata.</span><span class="sxs-lookup"><span data-stu-id="f913e-178">While it is possible for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> statements that lock and release a given object to cross member or class boundaries or both, this practice is not recommended.</span></span>  
  
<a name="Pulse"></a>   
## <a name="pulse-pulseall-and-wait"></a><span data-ttu-id="f913e-179">Attesa Pulse e PulseAll</span><span class="sxs-lookup"><span data-stu-id="f913e-179">Pulse, PulseAll, and Wait</span></span>  
 <span data-ttu-id="f913e-180">Una volta che un thread proprietario del blocco e ha attivato la sezione critica che protegge il blocco, è possibile chiamare il <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, e <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> metodi.</span><span class="sxs-lookup"><span data-stu-id="f913e-180">Once a thread owns the lock and has entered the critical section that the lock protects, it can call the <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="f913e-181"><xref:System.Threading.Monitor.Wait%2A> rilascia il blocco viene mantenuto, consente a un thread in attesa o thread per ottenere il blocco e accedere alla sezione critica e attende la notifica da una chiamata al <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> o <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="f913e-181"><xref:System.Threading.Monitor.Wait%2A> releases the lock if it is held, allows a waiting thread or threads to obtain the lock and enter the critical section,   and waits to be notified by a call to the <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> or <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="f913e-182">Quando <xref:System.Threading.Monitor.Wait%2A> riceve la notifica, restituisce e ottiene di nuovo il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-182">When <xref:System.Threading.Monitor.Wait%2A> is notified, it returns and obtains the lock again.</span></span>  
  
 <span data-ttu-id="f913e-183">Sia <xref:System.Threading.Monitor.Pulse%2A> che <xref:System.Threading.Monitor.PulseAll%2A> segnalano al thread successivo della coda di attesa di continuare.</span><span class="sxs-lookup"><span data-stu-id="f913e-183">Both <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.PulseAll%2A> signal for the next thread in the wait queue to proceed.</span></span>  
  
<a name="WaitHandles"></a>   
## <a name="monitors-and-wait-handles"></a><span data-ttu-id="f913e-184">Monitoraggi e gli handle di attesa</span><span class="sxs-lookup"><span data-stu-id="f913e-184">Monitors and wait handles</span></span>  
 <span data-ttu-id="f913e-185">È importante notare la distinzione tra l'utilizzo del <xref:System.Threading.Monitor> classe e <xref:System.Threading.WaitHandle> oggetti.</span><span class="sxs-lookup"><span data-stu-id="f913e-185">It is important to note the distinction between the use of the <xref:System.Threading.Monitor> class and <xref:System.Threading.WaitHandle> objects.</span></span>  
  
-   <span data-ttu-id="f913e-186">La <xref:System.Threading.Monitor> classe è semplicemente gestiti e completamente portabili e potrebbero essere più efficiente in termini di requisiti di risorse del sistema operativo.</span><span class="sxs-lookup"><span data-stu-id="f913e-186">The <xref:System.Threading.Monitor> class is purely managed, fully portable, and might be more efficient in terms of operating-system resource requirements.</span></span>  
  
-   <span data-ttu-id="f913e-187">Gli oggetti <xref:System.Threading.WaitHandle> rappresentano oggetti awaitable del sistema operativo, sono utili per la sincronizzazione tra codice gestito e non gestito ed espongono alcune funzionalità avanzate del sistema operativo, ad esempio la capacità di rimanere in attesa di più oggetti contemporaneamente.</span><span class="sxs-lookup"><span data-stu-id="f913e-187"><xref:System.Threading.WaitHandle> objects represent operating-system waitable objects, are useful for synchronizing between managed and unmanaged code, and expose some advanced operating-system features like the ability to wait on many objects at once.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f913e-188">L'esempio seguente usa il <xref:System.Threading.Monitor> classe per sincronizzare l'accesso a una singola istanza di un generatore di numeri casuali rappresentato dalla <xref:System.Random> classe.</span><span class="sxs-lookup"><span data-stu-id="f913e-188">The following example uses the <xref:System.Threading.Monitor> class to synchronize access to a single instance of a random number generator represented by the <xref:System.Random> class.</span></span> <span data-ttu-id="f913e-189">L'esempio crea dieci attività, ognuno dei quali esegue in modo asincrono in un pool di thread.</span><span class="sxs-lookup"><span data-stu-id="f913e-189">The example creates ten tasks, each of which executes asynchronously on a thread pool thread.</span></span> <span data-ttu-id="f913e-190">Ogni attività genera numeri casuali 10.000, viene calcolata la media e aggiorna due variabili a livello di stored procedure che gestiscono un totale parziale del numero di numeri casuali generati e la somma.</span><span class="sxs-lookup"><span data-stu-id="f913e-190">Each task generates 10,000 random numbers, calculates their average, and updates two procedure-level variables that maintain a running total of the number of random numbers generated and their sum.</span></span> <span data-ttu-id="f913e-191">Dopo avranno eseguito tutte le attività, questi due valori vengono quindi utilizzati per calcolare la media globale.</span><span class="sxs-lookup"><span data-stu-id="f913e-191">After all tasks have executed, these two values are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Monitor.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/example1.vb#1)]  
  
 <span data-ttu-id="f913e-192">Poiché è possibile accedervi da qualsiasi attività in esecuzione in un pool di thread, accedere alle variabili `total` e `n` devono anche essere sincronizzati.</span><span class="sxs-lookup"><span data-stu-id="f913e-192">Because they can be accessed from any task running on a thread pool thread, access to the variables `total` and `n` must also be synchronized.</span></span> <span data-ttu-id="f913e-193">Il <xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> metodo viene utilizzato per questo scopo.</span><span class="sxs-lookup"><span data-stu-id="f913e-193">The <xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> method is used for this purpose.</span></span>  
  
 <span data-ttu-id="f913e-194">Nell'esempio seguente illustra l'uso combinato del <xref:System.Threading.Monitor> classe (implementata con il `lock` o `SyncLock` costrutto di linguaggio), il <xref:System.Threading.Interlocked> (classe) e <xref:System.Threading.AutoResetEvent> classe.</span><span class="sxs-lookup"><span data-stu-id="f913e-194">The following example demonstrates the combined use of the <xref:System.Threading.Monitor> class (implemented with the `lock` or `SyncLock` language construct), the <xref:System.Threading.Interlocked> class, and the <xref:System.Threading.AutoResetEvent> class.</span></span> <span data-ttu-id="f913e-195">Definisce due `internal` (in c#) o `Friend` (in Visual Basic), classi `SyncResource` e `UnSyncResource`, che forniscono rispettivamente l'accesso sincronizzato e non sincronizzato a una risorsa.</span><span class="sxs-lookup"><span data-stu-id="f913e-195">It defines two `internal` (in C#) or `Friend` (in Visual Basic) classes, `SyncResource` and `UnSyncResource`, that respectively provide synchronized and unsynchronized access to a resource.</span></span> <span data-ttu-id="f913e-196">Per assicurarsi che nell'esempio viene illustrata la differenza tra l'accesso sincronizzato e non sincronizzato (che può essere il caso se ogni chiamata al metodo viene completata rapidamente), il metodo include un ritardo casuale: per i thread la cui <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> proprietà è pari, il chiamate al metodo <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> per introdurre un ritardo di 2000 millisecondi.</span><span class="sxs-lookup"><span data-stu-id="f913e-196">To ensure that the example illustrates the difference between the synchronized and unsynchronized access (which could be the case if each method call completes rapidly), the method includes a random delay: for threads whose <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> property is even, the method calls <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> to introduce a delay of 2,000 milliseconds.</span></span> <span data-ttu-id="f913e-197">Si noti che, in quanto la `SyncResource` classe non è pubblica, nessuna parte del codice client acquisisce un blocco sulla risorsa sincronizzata: la classe interna ad acquisisce il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-197">Note that, because the `SyncResource` class is not public, none of the client code takes a lock on the synchronized resource; the internal class itself takes the lock.</span></span> <span data-ttu-id="f913e-198">Ciò impedisce l'acquisizione di un blocco su un oggetto pubblico da parte di codice dannoso.</span><span class="sxs-lookup"><span data-stu-id="f913e-198">This prevents malicious code from taking a lock on a public object.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/source.cs#1)]
 [!code-vb[Conceptual.Monitors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/source.vb#1)]  
  
 <span data-ttu-id="f913e-199">Nell'esempio viene definita una variabile, `numOps`, che definisce il numero di thread che tenta di accedere alla risorsa.</span><span class="sxs-lookup"><span data-stu-id="f913e-199">The example defines a variable, `numOps`, that defines the number of threads that will attempt to access the resource.</span></span> <span data-ttu-id="f913e-200">Il thread dell'applicazione chiama il <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> metodo per sincronizzato e non sincronizzato l'accesso cinque volte ciascun.</span><span class="sxs-lookup"><span data-stu-id="f913e-200">The application thread calls the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method for synchronized and unsynchronized access five times each.</span></span> <span data-ttu-id="f913e-201">Il <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> metodo ha un solo parametro, un delegato che non accetta parametri e non restituisce alcun valore.</span><span class="sxs-lookup"><span data-stu-id="f913e-201">The <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method has a single parameter, a delegate that accepts no parameters and returns no value.</span></span> <span data-ttu-id="f913e-202">Per l'accesso sincronizzato, richiama il `SyncUpdateResource` metodo; per l'accesso non sincronizzato, richiama il `UnSyncUpdateResource` metodo.</span><span class="sxs-lookup"><span data-stu-id="f913e-202">For synchronized access, it invokes the `SyncUpdateResource` method; for unsynchronized access, it invokes the `UnSyncUpdateResource` method.</span></span> <span data-ttu-id="f913e-203">Dopo ogni set di chiamate al metodo, il thread dell'applicazione chiama il [AutoResetEvent. WaitOne](xref:System.Threading.WaitHandle.WaitOne*) metodo in modo che si blocchi finché la <xref:System.Threading.AutoResetEvent> istanza viene segnalata.</span><span class="sxs-lookup"><span data-stu-id="f913e-203">After each set of method calls, the application thread calls the [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) method so that it blocks until the <xref:System.Threading.AutoResetEvent> instance is signaled.</span></span>  
  
 <span data-ttu-id="f913e-204">Ogni chiamata al `SyncUpdateResource` metodo chiama interno `SyncResource.Access` (metodo) e quindi chiama il <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> metodo per decrementare il `numOps` contatore.</span><span class="sxs-lookup"><span data-stu-id="f913e-204">Each call to the `SyncUpdateResource` method calls the internal `SyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="f913e-205">Il <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> metodo viene utilizzato per decrementare il contatore, perché in caso contrario è possibile essere certi che un secondo thread acceda al valore prima che un primo thread decrementato valore sia stato archiviato nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f913e-205">The <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter, because otherwise you cannot be certain that a second thread will access the value before a first thread's decremented value has been stored in the variable.</span></span> <span data-ttu-id="f913e-206">Quando l'ultimo lavoro thread sincronizzato decrementa il contatore a zero, indicando che tutti i thread sincronizzati hanno completato l'accesso alla risorsa, il `SyncUpdateResource` chiamate al metodo di <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> metodo, che segnala al thread principale di continuare esecuzione.</span><span class="sxs-lookup"><span data-stu-id="f913e-206">When the last synchronized worker thread decrements the counter to zero, indicating that all synchronized threads have completed accessing the resource, the `SyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="f913e-207">Ogni chiamata al `UnSyncUpdateResource` metodo chiama interno `UnSyncResource.Access` (metodo) e quindi chiama il <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> metodo per decrementare il `numOps` contatore.</span><span class="sxs-lookup"><span data-stu-id="f913e-207">Each call to the `UnSyncUpdateResource` method calls the internal `UnSyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="f913e-208">In questo caso, il <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> metodo viene utilizzato per decrementare il contatore per garantire che un secondo thread acceda al valore prima valore decrementato di un primo thread sia stato assegnato alla variabile.</span><span class="sxs-lookup"><span data-stu-id="f913e-208">Once again, the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter to ensure that a second thread does not access the value before a first thread's decremented value has been assigned to the variable.</span></span> <span data-ttu-id="f913e-209">Quando l'ultimo non sincronizzato decrementa di thread di lavoro il contatore a zero, che indica che non consentono più thread non sincronizzati necessario accedere alla risorsa, il `UnSyncUpdateResource` chiamate al metodo di <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> metodo, che segnala al thread principale di continuare l'esecuzione .</span><span class="sxs-lookup"><span data-stu-id="f913e-209">When the last unsynchronized worker thread decrements the counter to zero, indicating that no more unsynchronized threads need to access the resource, the `UnSyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="f913e-210">Come mostra il risultato dell'esempio, l'accesso sincronizzato garantisce che il thread di chiamata esca dalla risorsa protetta prima che un altro thread possa accedervi; ogni thread attende il suo predecessore.</span><span class="sxs-lookup"><span data-stu-id="f913e-210">As the output from  the example shows, synchronized access ensures that the calling thread exits the protected resource before another thread can access it; each thread waits on its predecessor.</span></span> <span data-ttu-id="f913e-211">D'altra parte, senza il blocco, il `UnSyncResource.Access` metodo viene chiamato nell'ordine in cui i thread lo raggiungono.</span><span class="sxs-lookup"><span data-stu-id="f913e-211">On the other hand, without the lock, the `UnSyncResource.Access` method is called in the order in which threads reach it.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="f913e-212">Questo tipo è thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f913e-212">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.Thread" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Enter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f913e-213">Acquisisce un blocco esclusivo su un oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-213">Acquires an exclusive lock on a specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="f913e-214">Oggetto sui cui acquisire il blocco del monitoraggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-214">The object on which to acquire the monitor lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f913e-215">Acquisisce un blocco esclusivo sull'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-215">Acquires an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f913e-216">Utilizzare `Enter` di acquisire il <xref:System.Threading.Monitor> per l'oggetto passato come parametro.</span><span class="sxs-lookup"><span data-stu-id="f913e-216">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the parameter.</span></span> <span data-ttu-id="f913e-217">Se un altro thread ha eseguito un `Enter` sull'oggetto, ma non è ancora eseguita corrispondente <xref:System.Threading.Monitor.Exit%2A>, il thread corrente verrà bloccata finché l'altro thread rilascia l'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-217">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="f913e-218">È consentito per lo stesso thread richiamare `Enter` più volte senza causarne; tuttavia, un numero uguale di `Exit` chiamate devono essere richiamate prima di altri thread in attesa per l'oggetto Sblocca.</span><span class="sxs-lookup"><span data-stu-id="f913e-218">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="f913e-219">Utilizzare <xref:System.Threading.Monitor> per bloccare gli oggetti (ovvero, i tipi di riferimento), non i tipi di valore.</span><span class="sxs-lookup"><span data-stu-id="f913e-219">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="f913e-220">Quando si passa una variabile di tipo di valore a `Enter`, viene sottoposto a boxing come oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-220">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="f913e-221">Se si passa la stessa variabile a `Enter` , viene sottoposto a boxing come oggetto separato e non blocca il thread.</span><span class="sxs-lookup"><span data-stu-id="f913e-221">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="f913e-222">In questo caso, il codice che `Monitor` è in realtà non è protetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-222">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="f913e-223">Inoltre, quando si passa la variabile `Exit`, viene creato anche un altro oggetto distinto.</span><span class="sxs-lookup"><span data-stu-id="f913e-223">Furthermore, when you pass the variable to `Exit`, still another separate object is created.</span></span> <span data-ttu-id="f913e-224">Poiché l'oggetto passato a `Exit` è diverso dall'oggetto passato a `Enter`, `Monitor` genera <xref:System.Threading.SynchronizationLockException>.</span><span class="sxs-lookup"><span data-stu-id="f913e-224">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="f913e-225">Per ulteriori informazioni, vedere l'argomento concettuale [monitoraggi](xref:System.Threading.Monitor).</span><span class="sxs-lookup"><span data-stu-id="f913e-225">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="f913e-226"><xref:System.Threading.Thread.Interrupt%2A> può interrompere thread in attesa di acquisire un `Monitor` su un oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-226"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="f913e-227">Oggetto <xref:System.Threading.ThreadInterruptedException> verrà generata.</span><span class="sxs-lookup"><span data-stu-id="f913e-227">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
 <span data-ttu-id="f913e-228">Usare c# `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="f913e-228">Use a C# `try`…`finally`</span></span> <span data-ttu-id="f913e-229">blocco (`Try`...`Finally`</span><span class="sxs-lookup"><span data-stu-id="f913e-229">block (`Try`…`Finally`</span></span> <span data-ttu-id="f913e-230">in Visual Basic) per garantire il rilascio del monitor oppure utilizzare il linguaggio c# `lock` istruzione (`SyncLock` istruzione in Visual Basic), che esegue il wrapping di <xref:System.Threading.Monitor.Enter%2A> e <xref:System.Threading.Monitor.Exit%2A> metodi in un `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="f913e-230">in Visual Basic) to ensure that you release the monitor, or use the C# `lock` statement (`SyncLock` statement in Visual Basic), which wraps the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods in a `try`…`finally`</span></span> <span data-ttu-id="f913e-231">blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-231">block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f913e-232">Nell'esempio seguente viene illustrato l'utilizzo del metodo `Enter`.</span><span class="sxs-lookup"><span data-stu-id="f913e-232">The following example demonstrates how to use the `Enter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f913e-233">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-233">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj, bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="f913e-234">Oggetto per il quale attendere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-234">The object on which to wait.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="f913e-235">Risultato del tentativo di acquisizione del blocco passato dal riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-235">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="f913e-236">L'input deve essere <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-236">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f913e-237">L'output è <see langword="true" /> se il blocco viene acquisito; in caso contrario, l'output è <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-237">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f913e-238">L'output viene impostato anche se si verifica un'eccezione durante il tentativo di acquisire il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-238">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
          <span data-ttu-id="f913e-239">Nota   Se non si verifica alcuna eccezione, l'output di questo metodo è sempre <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-239">Note   If no exception occurs, the output of this method is always <see langword="true" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f913e-240">Acquisisce un blocco esclusivo sull'oggetto specificato e imposta atomicamente un valore che indica se il blocco è stato ottenuto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-240">Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f913e-241">Utilizzare `Enter` di acquisire il <xref:System.Threading.Monitor> per l'oggetto passato come il `obj` parametro.</span><span class="sxs-lookup"><span data-stu-id="f913e-241">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the `obj` parameter.</span></span> <span data-ttu-id="f913e-242">Se un altro thread ha eseguito un `Enter` sull'oggetto, ma non è ancora eseguita corrispondente <xref:System.Threading.Monitor.Exit%2A>, il thread corrente verrà bloccata finché l'altro thread rilascia l'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-242">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="f913e-243">È consentito per lo stesso thread richiamare `Enter` più volte senza causarne; tuttavia, un numero uguale di `Exit` chiamate devono essere richiamate prima di altri thread in attesa per l'oggetto Sblocca.</span><span class="sxs-lookup"><span data-stu-id="f913e-243">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="f913e-244">Se il blocco non è stato creato perché è stata generata un'eccezione, la variabile specificata per il `lockTaken` parametro `false` dopo che questo metodo termina.</span><span class="sxs-lookup"><span data-stu-id="f913e-244">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="f913e-245">In questo modo il programma determinare, in tutti i casi, se è necessario rilasciare il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-245">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span> <span data-ttu-id="f913e-246">Se questo metodo viene restituito senza generare un'eccezione, la variabile specificata per il `lockTaken` parametro è sempre `true`, e non è necessario eseguirne il test.</span><span class="sxs-lookup"><span data-stu-id="f913e-246">If this method returns without throwing an exception, the variable specified for the `lockTaken` parameter is always `true`, and there is no need to test it.</span></span>  
  
 <span data-ttu-id="f913e-247">Utilizzare <xref:System.Threading.Monitor> per bloccare gli oggetti (ovvero, i tipi di riferimento), non i tipi di valore.</span><span class="sxs-lookup"><span data-stu-id="f913e-247">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="f913e-248">Quando si passa una variabile di tipo di valore a `Enter`, viene sottoposto a boxing come oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-248">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="f913e-249">Se si passa la stessa variabile a `Enter` , viene sottoposto a boxing come oggetto separato e non blocca il thread.</span><span class="sxs-lookup"><span data-stu-id="f913e-249">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="f913e-250">In questo caso, il codice che `Monitor` è in realtà non è protetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-250">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="f913e-251">Inoltre, quando si passa la variabile `Exit`, viene creato un altro oggetto distinto.</span><span class="sxs-lookup"><span data-stu-id="f913e-251">Furthermore, when you pass the variable to `Exit`, another separate object is created.</span></span> <span data-ttu-id="f913e-252">Poiché l'oggetto passato a `Exit` è diverso dall'oggetto passato a `Enter`, `Monitor` genera <xref:System.Threading.SynchronizationLockException>.</span><span class="sxs-lookup"><span data-stu-id="f913e-252">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="f913e-253">Per ulteriori informazioni, vedere l'argomento concettuale [monitoraggi](xref:System.Threading.Monitor).</span><span class="sxs-lookup"><span data-stu-id="f913e-253">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="f913e-254"><xref:System.Threading.Thread.Interrupt%2A> può interrompere thread in attesa di acquisire un `Monitor` su un oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-254"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="f913e-255">Oggetto <xref:System.Threading.ThreadInterruptedException> verrà generata.</span><span class="sxs-lookup"><span data-stu-id="f913e-255">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f913e-256">Nel codice seguente viene illustrato il modello di base per l'utilizzo di <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> overload del metodo.</span><span class="sxs-lookup"><span data-stu-id="f913e-256">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="f913e-257">Questo overload imposta sempre il valore della variabile che viene passato per il `ref` parametro (`ByRef` in Visual Basic) `lockTaken`, anche se il metodo genera un'eccezione, pertanto il valore della variabile è un modo affidabile per verificare se il blocco deve essere rilasciato.</span><span class="sxs-lookup"><span data-stu-id="f913e-257">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#2)]
 [!code-vb[System.Threading.Monitor.Enter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f913e-258">L'input per <paramref name="lockTaken" /> è <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-258">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f913e-259">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-259">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Exit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="f913e-260">Oggetto sul quale rilasciare il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-260">The object on which to release the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f913e-261">Viene rilasciato un blocco esclusivo sull'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-261">Releases an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f913e-262">Il thread chiamante deve proprietario del blocco di `obj` parametro.</span><span class="sxs-lookup"><span data-stu-id="f913e-262">The calling thread must own the lock on the `obj` parameter.</span></span> <span data-ttu-id="f913e-263">Se il thread chiamante possiede il blocco sull'oggetto specificato e ha un numero uguale di `Exit` e <xref:System.Threading.Monitor.Enter%2A> chiama il metodo per l'oggetto, il blocco viene rilasciato.</span><span class="sxs-lookup"><span data-stu-id="f913e-263">If the calling thread owns the lock on the specified object, and has made an equal number of `Exit` and <xref:System.Threading.Monitor.Enter%2A> calls for the object, then the lock is released.</span></span> <span data-ttu-id="f913e-264">Se il thread chiamante non ha richiamato `Exit` tante volte quanti `Enter`, il blocco non viene rilasciato.</span><span class="sxs-lookup"><span data-stu-id="f913e-264">If the calling thread has not invoked `Exit` as many times as `Enter`, the lock is not released.</span></span>  
  
 <span data-ttu-id="f913e-265">Se il blocco viene rilasciato e altri thread presenti nella coda pronta per l'oggetto, uno dei thread acquisisce il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-265">If the lock is released and other threads are in the ready queue for the object, one of the threads acquires the lock.</span></span> <span data-ttu-id="f913e-266">Se altri thread è in coda in attesa di acquisire il blocco, non vengono automaticamente spostati nella coda pronti quando il proprietario del blocco chiama `Exit`.</span><span class="sxs-lookup"><span data-stu-id="f913e-266">If other threads are in the waiting queue waiting to acquire the lock, they are not automatically moved to the ready queue when the owner of the lock calls `Exit`.</span></span> <span data-ttu-id="f913e-267">Per spostare uno o più thread in attesa nella coda degli elementi pronti, chiamare <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A> prima di richiamare `Exit`.</span><span class="sxs-lookup"><span data-stu-id="f913e-267">To move one or more waiting threads into the ready queue, call <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> before invoking `Exit`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f913e-268">Nell'esempio seguente viene illustrato l'utilizzo del metodo `Exit`.</span><span class="sxs-lookup"><span data-stu-id="f913e-268">The following example demonstrates how to use the `Exit` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f913e-269">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-269">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="f913e-270">Il blocco per l'oggetto specificato non è di proprietà del thread corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-270">The current thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="IsEntered">
      <MemberSignature Language="C#" Value="public static bool IsEntered (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEntered(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.IsEntered(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsEntered (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEntered(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="f913e-271">Oggetto da testare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-271">The object to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f913e-272">Determina se il thread corrente specificato contiene il blocco sull'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-272">Determines whether the current thread holds the lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f913e-273">
            <see langword="true" /> se il thread corrente è responsabile del blocco su <paramref name="obj" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-273">
              <see langword="true" /> if the current thread holds the lock on <paramref name="obj" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f913e-274">Questo metodo funziona solo per i blocchi acquisiti utilizzando i metodi del <xref:System.Threading.Monitor> , classe o l'uso di c# `lock` istruzione o Visual Basic `SyncLock` istruzione in cui vengono implementate con <xref:System.Threading.Monitor>.</span><span class="sxs-lookup"><span data-stu-id="f913e-274">This method works only for locks that are acquired by using the methods of the <xref:System.Threading.Monitor> class, or by using the C# `lock` statement or the Visual Basic `SyncLock` statement, which are implemented with <xref:System.Threading.Monitor>.</span></span>  
  
 <span data-ttu-id="f913e-275">Utilizzare questo metodo con strumenti di diagnostica, ad esempio il <xref:System.Diagnostics.Debug.Assert%2A> (metodo) e <xref:System.Diagnostics.Contracts.Contract> (classe), eseguire il debug di problemi di blocco che comportano la <xref:System.Threading.Monitor> classe.</span><span class="sxs-lookup"><span data-stu-id="f913e-275">Use this method with diagnostic tools, such as the <xref:System.Diagnostics.Debug.Assert%2A> method and the <xref:System.Diagnostics.Contracts.Contract> class, to debug locking issues that involve the <xref:System.Threading.Monitor> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f913e-276">
            <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-276">
              <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Pulse">
      <MemberSignature Language="C#" Value="public static void Pulse (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Pulse(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Pulse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Pulse (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Pulse(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="f913e-277">Oggetto atteso da un thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-277">The object a thread is waiting for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f913e-278">Notifica a un thread della coda di attesa che lo stato dell'oggetto bloccato è stato modificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-278">Notifies a thread in the waiting queue of a change in the locked object's state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f913e-279">Solo il proprietario corrente del blocco può segnalare un oggetto in attesa utilizzando `Pulse`.</span><span class="sxs-lookup"><span data-stu-id="f913e-279">Only the current owner of the lock can signal a waiting object using `Pulse`.</span></span>  
  
 <span data-ttu-id="f913e-280">Questo metodo per segnalare al thread successivo della riga per il blocco viene richiamato dal thread che attualmente possiede il blocco sull'oggetto specificato.</span><span class="sxs-lookup"><span data-stu-id="f913e-280">The thread that currently owns the lock on the specified object invokes this method to signal the next thread in line for the lock.</span></span> <span data-ttu-id="f913e-281">Dopo aver ricevuto l'impulso, viene spostato il thread in attesa nella coda pronti.</span><span class="sxs-lookup"><span data-stu-id="f913e-281">Upon receiving the pulse, the waiting thread is moved to the ready queue.</span></span> <span data-ttu-id="f913e-282">Quando il thread che ha richiamato `Pulse` rilascia il blocco, il thread successivo nella coda degli elementi pronti (che non è necessariamente il thread che ha ricevuto l'impulso) acquisisce il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-282">When the thread that invoked `Pulse` releases the lock, the next thread in the ready queue (which is not necessarily the thread that was pulsed) acquires the lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f913e-283">Il <xref:System.Threading.Monitor> classe mantiene lo stato che indica che il <xref:System.Threading.Monitor.Pulse%2A> metodo è stato chiamato.</span><span class="sxs-lookup"><span data-stu-id="f913e-283">The <xref:System.Threading.Monitor> class does not maintain state indicating that the <xref:System.Threading.Monitor.Pulse%2A> method has been called.</span></span> <span data-ttu-id="f913e-284">Pertanto, se si chiama <xref:System.Threading.Monitor.Pulse%2A> quando non sono thread in attesa, il successivo thread che chiama <xref:System.Threading.Monitor.Wait%2A> blocchi come se <xref:System.Threading.Monitor.Pulse%2A> non fosse mai stato chiamato.</span><span class="sxs-lookup"><span data-stu-id="f913e-284">Thus, if you call <xref:System.Threading.Monitor.Pulse%2A> when no threads are waiting, the next thread that calls <xref:System.Threading.Monitor.Wait%2A> blocks as if <xref:System.Threading.Monitor.Pulse%2A> had never been called.</span></span> <span data-ttu-id="f913e-285">Se due thread utilizzano <xref:System.Threading.Monitor.Pulse%2A> e <xref:System.Threading.Monitor.Wait%2A> per interagire, ciò potrebbe causare un deadlock.</span><span class="sxs-lookup"><span data-stu-id="f913e-285">If two threads are using <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.Wait%2A> to interact, this could result in a deadlock.</span></span> <span data-ttu-id="f913e-286">Si differenzia dal comportamento del <xref:System.Threading.AutoResetEvent> classe: se indicano un <xref:System.Threading.AutoResetEvent> chiamando il relativo <xref:System.Threading.EventWaitHandle.Set%2A> (metodo) e non sono presenti thread in attesa, il <xref:System.Threading.AutoResetEvent> rimane in stato segnalato fino a quando un thread chiama <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, o <xref:System.Threading.WaitHandle.WaitAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="f913e-286">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class: If you signal an <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, and there are no threads waiting, the <xref:System.Threading.AutoResetEvent> remains in a signaled state until a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A>.</span></span> <span data-ttu-id="f913e-287">Il <xref:System.Threading.AutoResetEvent> rilascia il thread e torna allo stato segnalato.</span><span class="sxs-lookup"><span data-stu-id="f913e-287">The <xref:System.Threading.AutoResetEvent> releases that thread and returns to the unsignaled state.</span></span>  
  
 <span data-ttu-id="f913e-288">Si noti che un oggetto sincronizzato contiene diversi riferimenti, un riferimento al thread che attualmente contiene il blocco, un riferimento alla coda degli elementi pronti, che contiene i thread pronti ottenere il blocco, e un riferimento alla coda di attesa, tra cui contiene i thread in attesa per la notifica di modifica dello stato dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-288">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="f913e-289">Il `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, e <xref:System.Threading.Monitor.Wait%2A> metodi devono essere richiamati dall'interno di un blocco sincronizzato di codice.</span><span class="sxs-lookup"><span data-stu-id="f913e-289">The `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="f913e-290">Per segnalare più thread, utilizzare il <xref:System.Threading.Monitor.PulseAll%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="f913e-290">To signal multiple threads, use the <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f913e-291">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-291">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="f913e-292">Il thread chiamante non è il proprietario del blocco per l'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-292">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="PulseAll">
      <MemberSignature Language="C#" Value="public static void PulseAll (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PulseAll(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.PulseAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PulseAll (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PulseAll(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="f913e-293">Oggetto che invia l'impulso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-293">The object that sends the pulse.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f913e-294">Notifica a tutti i thread in attesa che lo stato dell'oggetto è stato modificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-294">Notifies all waiting threads of a change in the object's state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f913e-295">Questo metodo per segnalare tutti i thread in attesa di acquisire il blocco sull'oggetto viene richiamato dal thread che attualmente possiede il blocco sull'oggetto specificato.</span><span class="sxs-lookup"><span data-stu-id="f913e-295">The thread that currently owns the lock on the specified object invokes this method to signal all threads waiting to acquire the lock on the object.</span></span> <span data-ttu-id="f913e-296">Una volta inviato il segnale, vengono spostati i thread in attesa nella coda pronti.</span><span class="sxs-lookup"><span data-stu-id="f913e-296">After the signal is sent, the waiting threads are moved to the ready queue.</span></span> <span data-ttu-id="f913e-297">Quando il thread che ha richiamato `PulseAll` rilascia il blocco, il thread successivo nella coda degli elementi pronti acquisisce il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-297">When the thread that invoked `PulseAll` releases the lock, the next thread in the ready queue acquires the lock.</span></span>  
  
 <span data-ttu-id="f913e-298">Si noti che un oggetto sincronizzato contiene diversi riferimenti, un riferimento al thread che attualmente contiene il blocco, un riferimento alla coda degli elementi pronti, che contiene i thread pronti ottenere il blocco, e un riferimento alla coda di attesa, tra cui contiene i thread in attesa per la notifica di modifica dello stato dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-298">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="f913e-299">Il <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, e <xref:System.Threading.Monitor.Wait%2A> metodi devono essere richiamati dall'interno di un blocco sincronizzato di codice.</span><span class="sxs-lookup"><span data-stu-id="f913e-299">The <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="f913e-300">La sezione Osservazioni per il <xref:System.Threading.Monitor.Pulse%2A> metodo spiegare cosa accade se <xref:System.Threading.Monitor.Pulse%2A> viene chiamato quando è in attesa alcun thread.</span><span class="sxs-lookup"><span data-stu-id="f913e-300">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 <span data-ttu-id="f913e-301">Per segnalare un thread singolo, utilizzare il `Pulse` metodo.</span><span class="sxs-lookup"><span data-stu-id="f913e-301">To signal a single thread, use the `Pulse` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f913e-302">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-302">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="f913e-303">Il thread chiamante non è il proprietario del blocco per l'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-303">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f913e-304">Prova ad acquisire un blocco esclusivo sull'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-304">Attempts to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="f913e-305">Oggetto sul quale acquisire il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-305">The object on which to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f913e-306">Prova ad acquisire un blocco esclusivo sull'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-306">Attempts to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f913e-307">
            <see langword="true" /> se il thread corrente acquisisce il blocco; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-307">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f913e-308">Se ha esito positivo, questo metodo acquisisce un blocco esclusivo sul `obj` parametro.</span><span class="sxs-lookup"><span data-stu-id="f913e-308">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="f913e-309">Questo metodo restituisce immediatamente, il blocco è disponibile o meno.</span><span class="sxs-lookup"><span data-stu-id="f913e-309">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="f913e-310">Questo metodo è simile a <xref:System.Threading.Monitor.Enter%2A>, ma non viene mai interrotto il thread corrente.</span><span class="sxs-lookup"><span data-stu-id="f913e-310">This method is similar to <xref:System.Threading.Monitor.Enter%2A>, but it will never block the current thread.</span></span> <span data-ttu-id="f913e-311">Se il thread non è possibile immettere senza blocco, il metodo restituisce `false,`.</span><span class="sxs-lookup"><span data-stu-id="f913e-311">If the thread cannot enter without blocking, the method returns `false,`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f913e-312">Utilizzare <xref:System.Threading.Monitor> per bloccare gli oggetti (ovvero, i tipi di riferimento), non i tipi di valore.</span><span class="sxs-lookup"><span data-stu-id="f913e-312">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="f913e-313">Per informazioni dettagliate, vedere il <xref:System.Threading.Monitor> articolo.</span><span class="sxs-lookup"><span data-stu-id="f913e-313">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="f913e-314">Per garantire che il thread non immette la sezione critica, è necessario esaminare il valore restituito del metodo ed eseguire codice nella sezione critica solo se il valore restituito è `true`.</span><span class="sxs-lookup"><span data-stu-id="f913e-314">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="f913e-315">Frammento di codice seguente viene illustrato il motivo usato per chiamare questo metodo.</span><span class="sxs-lookup"><span data-stu-id="f913e-315">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="f913e-316">Si noti che è necessario chiamare <xref:System.Threading.Monitor.Exit%2A> in un `finally` blocco per garantire che il thread chiamante rilascia il blocco su una sezione critica se si verifica un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f913e-316">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#1)]
 [!code-vb[System.Threading.Monitor.TryEnter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="f913e-317">Nell'esempio di codice riportato di seguito viene illustrato come utilizzare il metodo `TryEnter`.</span><span class="sxs-lookup"><span data-stu-id="f913e-317">The following code example demonstrates how to use the `TryEnter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f913e-318">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-318">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="f913e-319">Oggetto sul quale acquisire il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-319">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="f913e-320">Risultato del tentativo di acquisizione del blocco passato dal riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-320">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="f913e-321">L'input deve essere <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-321">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f913e-322">L'output è <see langword="true" /> se il blocco viene acquisito; in caso contrario, l'output è <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-322">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f913e-323">L'output viene impostato anche se si verifica un'eccezione durante il tentativo di acquisire il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-323">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f913e-324">Prova ad acquisire un blocco esclusivo sull'oggetto specificato e imposta atomicamente un valore che indica se il blocco è stato ottenuto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-324">Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f913e-325">Se ha esito positivo, questo metodo acquisisce un blocco esclusivo sul `obj` parametro.</span><span class="sxs-lookup"><span data-stu-id="f913e-325">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="f913e-326">Questo metodo restituisce immediatamente, il blocco è disponibile o meno.</span><span class="sxs-lookup"><span data-stu-id="f913e-326">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="f913e-327">Se il blocco non è stato creato perché è stata generata un'eccezione, la variabile specificata per il `lockTaken` parametro `false` dopo che questo metodo termina.</span><span class="sxs-lookup"><span data-stu-id="f913e-327">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="f913e-328">In questo modo il programma determinare, in tutti i casi, se è necessario rilasciare il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-328">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
 <span data-ttu-id="f913e-329">Questo metodo è simile a <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, ma non viene mai interrotto il thread corrente.</span><span class="sxs-lookup"><span data-stu-id="f913e-329">This method is similar to <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, but it will never block the current thread.</span></span> <span data-ttu-id="f913e-330">Se il thread non è possibile immettere senza blocco, il `lockTaken` argomento è impostato su `false` quando il metodo restituisce.</span><span class="sxs-lookup"><span data-stu-id="f913e-330">If the thread cannot enter without blocking, the `lockTaken` argument is set to `false` when the method returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f913e-331">Utilizzare <xref:System.Threading.Monitor> per bloccare gli oggetti (ovvero, i tipi di riferimento), non i tipi di valore.</span><span class="sxs-lookup"><span data-stu-id="f913e-331">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="f913e-332">Per ulteriori informazioni, vedere l'articolo <xref:System.Threading.Monitor>.</span><span class="sxs-lookup"><span data-stu-id="f913e-332">For more information, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="f913e-333">Per garantire che il thread non di accedere alla sezione critica, è necessario esaminare il valore di `lockTaken` ed eseguire il codice nella sezione critica solo se il valore è `true`.</span><span class="sxs-lookup"><span data-stu-id="f913e-333">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="f913e-334">Frammento di codice seguente viene illustrato il motivo usato per chiamare questo metodo.</span><span class="sxs-lookup"><span data-stu-id="f913e-334">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="f913e-335">Si noti che è necessario chiamare <xref:System.Threading.Monitor.Exit%2A> in un `finally` blocco per garantire che il thread chiamante rilascia il blocco su una sezione critica se si verifica un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f913e-335">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#2)]
 [!code-vb[System.Threading.Monitor.TryEnter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="f913e-336">Nel codice seguente viene illustrato il modello di base per l'utilizzo di <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> overload del metodo.</span><span class="sxs-lookup"><span data-stu-id="f913e-336">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="f913e-337">Questo overload imposta sempre il valore della variabile che viene passato per il `ref` parametro (`ByRef` in Visual Basic) `lockTaken`, anche se il metodo genera un'eccezione, pertanto il valore della variabile è un modo affidabile per verificare se il blocco deve essere rilasciato.</span><span class="sxs-lookup"><span data-stu-id="f913e-337">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#3)]
 [!code-vb[System.Threading.Monitor.Enter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f913e-338">L'input per <paramref name="lockTaken" /> è <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-338">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f913e-339">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-339">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="f913e-340">Oggetto sul quale acquisire il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-340">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="f913e-341">Tempo di attesa espresso in millisecondi prima che si verifichi il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-341">The number of milliseconds to wait for the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f913e-342">Viene eseguito, per un numero specificato di millisecondi, il tentativo di acquisire un blocco esclusivo sull'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-342">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f913e-343">
            <see langword="true" /> se il thread corrente acquisisce il blocco; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-343">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f913e-344">Se il `millisecondsTimeout` parametro è uguale a <xref:System.Threading.Timeout.Infinite>, questo metodo equivale a <xref:System.Threading.Monitor.Enter%2A>.</span><span class="sxs-lookup"><span data-stu-id="f913e-344">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="f913e-345">Se `millisecondsTimeout` è uguale a 0, questo metodo equivale a <xref:System.Threading.Monitor.TryEnter%2A>.</span><span class="sxs-lookup"><span data-stu-id="f913e-345">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f913e-346">Utilizzare <xref:System.Threading.Monitor> per bloccare gli oggetti (ovvero, i tipi di riferimento), non i tipi di valore.</span><span class="sxs-lookup"><span data-stu-id="f913e-346">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="f913e-347">Per informazioni dettagliate, vedere il <xref:System.Threading.Monitor> articolo.</span><span class="sxs-lookup"><span data-stu-id="f913e-347">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="f913e-348">Per garantire che il thread non immette la sezione critica, è necessario esaminare il valore restituito del metodo ed eseguire codice nella sezione critica solo se il valore restituito è `true`.</span><span class="sxs-lookup"><span data-stu-id="f913e-348">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="f913e-349">Frammento di codice seguente viene illustrato il motivo usato per chiamare questo metodo.</span><span class="sxs-lookup"><span data-stu-id="f913e-349">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="f913e-350">Si noti che è necessario chiamare <xref:System.Threading.Monitor.Exit%2A> in un `finally` blocco per garantire che il thread chiamante rilascia il blocco su una sezione critica se si verifica un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f913e-350">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#3)]
 [!code-vb[System.Threading.Monitor.TryEnter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f913e-351">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-351">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="f913e-352">
            <paramref name="millisecondsTimeout" /> è negativo e diverso da <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-352">
              <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="f913e-353">Oggetto sul quale acquisire il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-353">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="f913e-354">Oggetto <see cref="T:System.TimeSpan" /> che rappresenta la durata di attesa del blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-354">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait for the lock.</span>
          </span>
          <span data-ttu-id="f913e-355">Un valore di –1 millisecondo specifica un'attesa infinita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-355">A value of –1 millisecond specifies an infinite wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f913e-356">Viene eseguito, per una quantità di tempo specificata, il tentativo di acquisire un blocco esclusivo sull'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-356">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f913e-357">
            <see langword="true" /> se il thread corrente acquisisce il blocco; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-357">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f913e-358">Se il valore di `timeout` parametro convertito in millisecondi è uguale a -1, questo metodo equivale a <xref:System.Threading.Monitor.Enter%2A>.</span><span class="sxs-lookup"><span data-stu-id="f913e-358">If the value of the `timeout` parameter converted to milliseconds equals –1, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="f913e-359">Se il valore di `timeout` è uguale a 0, questo metodo equivale a <xref:System.Threading.Monitor.TryEnter%2A>.</span><span class="sxs-lookup"><span data-stu-id="f913e-359">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f913e-360">Utilizzare <xref:System.Threading.Monitor> per bloccare gli oggetti (ovvero, i tipi di riferimento), non i tipi di valore.</span><span class="sxs-lookup"><span data-stu-id="f913e-360">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="f913e-361">Per informazioni dettagliate, vedere il <xref:System.Threading.Monitor> argomento relativo alla classe.</span><span class="sxs-lookup"><span data-stu-id="f913e-361">For details, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="f913e-362">Per garantire che il thread non immette la sezione critica, è necessario esaminare il valore restituito del metodo ed eseguire codice nella sezione critica solo se il valore restituito è `true`.</span><span class="sxs-lookup"><span data-stu-id="f913e-362">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="f913e-363">Frammento di codice seguente viene illustrato il motivo usato per chiamare questo metodo.</span><span class="sxs-lookup"><span data-stu-id="f913e-363">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="f913e-364">Si noti che è necessario chiamare <xref:System.Threading.Monitor.Exit%2A> in un `finally` blocco per garantire che il thread chiamante rilascia il blocco su una sezione critica se si verifica un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f913e-364">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#5)]
 [!code-vb[System.Threading.Monitor.TryEnter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f913e-365">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-365">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="f913e-366">Il valore di <paramref name="timeout" /> in millisecondi è negativo e non è uguale a <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecondo) oppure è maggiore di <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-366">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, int millisecondsTimeout, bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="f913e-367">Oggetto sul quale acquisire il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-367">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="f913e-368">Tempo di attesa espresso in millisecondi prima che si verifichi il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-368">The number of milliseconds to wait for the lock.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="f913e-369">Risultato del tentativo di acquisizione del blocco passato dal riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-369">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="f913e-370">L'input deve essere <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-370">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f913e-371">L'output è <see langword="true" /> se il blocco viene acquisito; in caso contrario, l'output è <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-371">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f913e-372">L'output viene impostato anche se si verifica un'eccezione durante il tentativo di acquisire il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-372">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f913e-373">Prova ad acquisire, per il numero di millisecondi specificato, un blocco esclusivo sull'oggetto specificato e imposta atomicamente un valore che indica se il blocco è stato ottenuto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-373">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f913e-374">Se il `millisecondsTimeout` parametro è uguale a <xref:System.Threading.Timeout.Infinite>, questo metodo equivale a <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="f913e-374">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="f913e-375">Se `millisecondsTimeout` è uguale a 0, questo metodo equivale a <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="f913e-375">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="f913e-376">Se il blocco non è stato creato perché è stata generata un'eccezione, la variabile specificata per il `lockTaken` parametro `false` dopo che questo metodo termina.</span><span class="sxs-lookup"><span data-stu-id="f913e-376">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="f913e-377">In questo modo il programma determinare, in tutti i casi, se è necessario rilasciare il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-377">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f913e-378">Utilizzare <xref:System.Threading.Monitor> per bloccare gli oggetti (ovvero, i tipi di riferimento), non i tipi di valore.</span><span class="sxs-lookup"><span data-stu-id="f913e-378">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="f913e-379">Per ulteriori informazioni, vedere il <xref:System.Threading.Monitor> argomento relativo alla classe.</span><span class="sxs-lookup"><span data-stu-id="f913e-379">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="f913e-380">Per garantire che il thread non di accedere alla sezione critica, è necessario esaminare il valore di `lockTaken` ed eseguire il codice nella sezione critica solo se il valore è `true`.</span><span class="sxs-lookup"><span data-stu-id="f913e-380">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="f913e-381">Frammento di codice seguente viene illustrato il motivo usato per chiamare questo metodo.</span><span class="sxs-lookup"><span data-stu-id="f913e-381">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="f913e-382">Si noti che è necessario chiamare <xref:System.Threading.Monitor.Exit%2A> in un `finally` blocco per garantire che il thread chiamante rilascia il blocco su una sezione critica se si verifica un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f913e-382">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#4)]
 [!code-vb[System.Threading.Monitor.TryEnter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="f913e-383">Nel codice seguente viene illustrato il modello di base per l'utilizzo di <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> overload del metodo.</span><span class="sxs-lookup"><span data-stu-id="f913e-383">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="f913e-384">Questo overload imposta sempre il valore della variabile che viene passato per il `ref` parametro (`ByRef` in Visual Basic) `lockTaken`, anche se il metodo genera un'eccezione, pertanto il valore della variabile è un modo affidabile per verificare se il blocco deve essere rilasciato.</span><span class="sxs-lookup"><span data-stu-id="f913e-384">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#4)]
 [!code-vb[System.Threading.Monitor.Enter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f913e-385">L'input per <paramref name="lockTaken" /> è <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-385">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f913e-386">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-386">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="f913e-387">
            <paramref name="millisecondsTimeout" /> è negativo e diverso da <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-387">
              <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, TimeSpan timeout, bool % lockTaken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="f913e-388">Oggetto sul quale acquisire il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-388">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="f913e-389">Quantità di tempo che rappresenta la durata di attesa del blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-389">The amount of time to wait for the lock.</span>
          </span>
          <span data-ttu-id="f913e-390">Un valore di –1 millisecondo specifica un'attesa infinita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-390">A value of –1 millisecond specifies an infinite wait.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="f913e-391">Risultato del tentativo di acquisizione del blocco passato dal riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-391">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="f913e-392">L'input deve essere <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-392">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f913e-393">L'output è <see langword="true" /> se il blocco viene acquisito; in caso contrario, l'output è <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-393">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f913e-394">L'output viene impostato anche se si verifica un'eccezione durante il tentativo di acquisire il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-394">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f913e-395">Prova ad acquisire, per la quantità di tempo specificata, un blocco esclusivo sull'oggetto specificato e imposta atomicamente un valore che indica se il blocco è stato ottenuto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-395">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f913e-396">Se il valore di `timeout` parametro convertito in millisecondi è uguale a -1, questo metodo equivale a <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="f913e-396">If the value of the `timeout` parameter converted to milliseconds equals –1, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="f913e-397">Se il valore di `timeout` è uguale a 0, questo metodo equivale a <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="f913e-397">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="f913e-398">Se il blocco non è stato creato perché è stata generata un'eccezione, la variabile specificata per il `lockTaken` parametro `false` dopo che questo metodo termina.</span><span class="sxs-lookup"><span data-stu-id="f913e-398">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="f913e-399">In questo modo il programma determinare, in tutti i casi, se è necessario rilasciare il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-399">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f913e-400">Utilizzare <xref:System.Threading.Monitor> per bloccare gli oggetti (ovvero, i tipi di riferimento), non i tipi di valore.</span><span class="sxs-lookup"><span data-stu-id="f913e-400">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="f913e-401">Per ulteriori informazioni, vedere il <xref:System.Threading.Monitor> argomento relativo alla classe.</span><span class="sxs-lookup"><span data-stu-id="f913e-401">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="f913e-402">Per garantire che il thread non di accedere alla sezione critica, è necessario esaminare il valore di `lockTaken` ed eseguire il codice nella sezione critica solo se il valore è `true`.</span><span class="sxs-lookup"><span data-stu-id="f913e-402">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="f913e-403">Frammento di codice seguente viene illustrato il motivo usato per chiamare questo metodo.</span><span class="sxs-lookup"><span data-stu-id="f913e-403">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="f913e-404">Si noti che è necessario chiamare <xref:System.Threading.Monitor.Exit%2A> in un `finally` blocco per garantire che il thread chiamante rilascia il blocco su una sezione critica se si verifica un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f913e-404">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#6)]
 [!code-vb[System.Threading.Monitor.TryEnter#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f913e-405">L'input per <paramref name="lockTaken" /> è <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-405">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f913e-406">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-406">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="f913e-407">Il valore di <paramref name="timeout" /> in millisecondi è negativo e non è uguale a <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecondo) oppure è maggiore di <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-407">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f913e-408">Rilascia il blocco su un oggetto e interrompe il thread corrente finché riacquisisce il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-408">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="f913e-409">Oggetto per il quale attendere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-409">The object on which to wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f913e-410">Rilascia il blocco su un oggetto e interrompe il thread corrente finché riacquisisce il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-410">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f913e-411">Viene restituito <see langword="true" /> se la chiamata è stata restituita perché il chiamante ha riacquisito il blocco per l'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-411">
              <see langword="true" /> if the call returned because the caller reacquired the lock for the specified object.</span>
          </span>
          <span data-ttu-id="f913e-412">Non viene restituito alcun valore se il blocco non viene riacquisito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-412">This method does not return if the lock is not reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f913e-413">Questo metodo viene richiamato dal thread che attualmente possiede il blocco sull'oggetto specificato per il rilascio dell'oggetto in modo che un altro thread possa accedervi.</span><span class="sxs-lookup"><span data-stu-id="f913e-413">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="f913e-414">Il chiamante è bloccato durante l'attesa per riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-414">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="f913e-415">Questo metodo viene chiamato quando il chiamante deve attendere una modifica dello stato che si verificherà in seguito a operazioni di un altro thread.</span><span class="sxs-lookup"><span data-stu-id="f913e-415">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="f913e-416">Quando un thread chiama `Wait`, rilascia il blocco sull'oggetto e inserito nella coda in attesa dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-416">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="f913e-417">Il thread successivo nella coda di pronto dell'oggetto (se presente) acquisisce il blocco e ha l'utilizzo esclusivo dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-417">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="f913e-418">Tutti i thread che chiamano `Wait` rimangono nella coda di attesa finché ricevono un segnale da <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A>, inviato dal proprietario del blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-418">All threads that call `Wait` remain in the waiting queue until they receive a signal from <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>, sent by the owner of the lock.</span></span> <span data-ttu-id="f913e-419">Se `Pulse` viene inviato solo il thread all'inizio della coda di attesa è interessato.</span><span class="sxs-lookup"><span data-stu-id="f913e-419">If `Pulse` is sent, only the thread at the head of the waiting queue is affected.</span></span> <span data-ttu-id="f913e-420">Se `PulseAll` viene inviato, sono interessati tutti i thread in attesa per l'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-420">If `PulseAll` is sent, all threads that are waiting for the object are affected.</span></span> <span data-ttu-id="f913e-421">Quando viene ricevuto il segnale, uno o più thread lascia la coda di attesa e inseriti nella coda pronta.</span><span class="sxs-lookup"><span data-stu-id="f913e-421">When the signal is received, one or more threads leave the waiting queue and enter the ready queue.</span></span> <span data-ttu-id="f913e-422">Un thread nella coda degli elementi pronti può riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-422">A thread in the ready queue is permitted to reacquire the lock.</span></span>  
  
 <span data-ttu-id="f913e-423">Questo metodo restituisce quando il thread chiamante riacquisisce il blocco sull'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-423">This method returns when the calling thread reacquires the lock on the object.</span></span> <span data-ttu-id="f913e-424">Si noti che questo metodo in modo indefinito se il proprietario del blocco non chiama `Pulse` o `PulseAll`.</span><span class="sxs-lookup"><span data-stu-id="f913e-424">Note that this method blocks indefinitely if the holder of the lock does not call `Pulse` or `PulseAll`.</span></span>  
  
 <span data-ttu-id="f913e-425">Il chiamante esegue `Wait` una volta, indipendentemente dal numero di volte in cui <xref:System.Threading.Monitor.Enter%2A> è stato richiamato per l'oggetto specificato.</span><span class="sxs-lookup"><span data-stu-id="f913e-425">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="f913e-426">Concettualmente, la `Wait` metodo archivia il numero di chiamate `Enter` sull'oggetto e richiama `Exit` come numero di volte necessario per ottenere il rilascio dell'oggetto bloccato.</span><span class="sxs-lookup"><span data-stu-id="f913e-426">Conceptually, the `Wait` method stores the number of times the caller invoked `Enter` on the object and invokes `Exit` as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="f913e-427">Il chiamante viene bloccato durante l'attesa di riacquisizione dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-427">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="f913e-428">Quando il chiamante riacquisisce il blocco, il sistema chiama `Enter` il numero di volte in base alle esigenze salvato `Enter` conteggio per il chiamante.</span><span class="sxs-lookup"><span data-stu-id="f913e-428">When the caller reacquires the lock, the system calls `Enter` as many times as necessary to restore the saved `Enter` count for the caller.</span></span> <span data-ttu-id="f913e-429">La chiamata `Wait` rilascia il blocco per l'oggetto specificato solo se il chiamante è il proprietario di blocchi su altri oggetti, tali blocchi non vengono rilasciati.</span><span class="sxs-lookup"><span data-stu-id="f913e-429">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
 <span data-ttu-id="f913e-430">Si noti che un oggetto sincronizzato contiene diversi riferimenti, un riferimento al thread che attualmente contiene il blocco, un riferimento alla coda degli elementi pronti, che contiene i thread pronti ottenere il blocco, e un riferimento alla coda di attesa, tra cui contiene i thread in attesa per la notifica di modifica dello stato dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-430">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="f913e-431">Il <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, e `Wait` metodi devono essere richiamati dall'interno di un blocco sincronizzato di codice.</span><span class="sxs-lookup"><span data-stu-id="f913e-431">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="f913e-432">La sezione Osservazioni per il <xref:System.Threading.Monitor.Pulse%2A> metodo spiegare cosa accade se <xref:System.Threading.Monitor.Pulse%2A> viene chiamato quando è in attesa alcun thread.</span><span class="sxs-lookup"><span data-stu-id="f913e-432">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f913e-433">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-433">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="f913e-434">Il thread chiamante non è il proprietario del blocco per l'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-434">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="f913e-435">Il thread da cui è stato richiamato <see langword="Wait" /> viene interrotto in seguito dallo stato di attesa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-435">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="f913e-436">L'interruzione si verifica quando il metodo <see cref="M:System.Threading.Thread.Interrupt" /> di questo thread viene chiamato da un altro thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-436">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="f913e-437">Oggetto per il quale attendere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-437">The object on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="f913e-438">Numero di millisecondi da attendere prima che il thread venga inserito nella coda di thread pronti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-438">The number of milliseconds to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f913e-439">Rilascia il blocco su un oggetto e interrompe il thread corrente finché riacquisisce il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-439">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="f913e-440">Allo scadere dell'intervallo di timeout specificato, il thread viene inserito nella coda di thread pronti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-440">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f913e-441">
            <see langword="true" /> se il blocco è stato riacquisito prima che sia trascorso il tempo specificato; <see langword="false" /> se il blocco è stato riacquisito dopo che è trascorso il tempo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-441">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="f913e-442">Il metodo non restituisce alcun valore finché il blocco non viene riacquisito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-442">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f913e-443">Questo metodo non restituisce finché riacquisisce il blocco esclusivo sul `obj` parametro.</span><span class="sxs-lookup"><span data-stu-id="f913e-443">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="f913e-444">Questo metodo viene richiamato dal thread che attualmente possiede il blocco sull'oggetto specificato per il rilascio dell'oggetto in modo che un altro thread possa accedervi.</span><span class="sxs-lookup"><span data-stu-id="f913e-444">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="f913e-445">Il chiamante è bloccato durante l'attesa per riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-445">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="f913e-446">Questo metodo viene chiamato quando il chiamante deve attendere una modifica dello stato che si verificherà in seguito a operazioni di un altro thread.</span><span class="sxs-lookup"><span data-stu-id="f913e-446">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="f913e-447">Il timeout assicura che il thread corrente non bloccarsi in modo indefinito se un altro thread rilascia il blocco senza chiamare prima il <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="f913e-447">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="f913e-448">Inoltre, si sposta il thread nella coda pronti, ignorando gli altri thread prima la coda di attesa, in modo che è possibile riacquisire il blocco prima.</span><span class="sxs-lookup"><span data-stu-id="f913e-448">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="f913e-449">Il thread può verificare il valore restituito di <xref:System.Threading.Monitor.Wait%2A> metodo per determinare se ha riacquisito il blocco prima del timeout. Il thread è possibile valutare le condizioni che hanno causato lo stato di attesa, se necessario, chiamare il <xref:System.Threading.Monitor.Wait%2A> nuovo metodo.</span><span class="sxs-lookup"><span data-stu-id="f913e-449">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="f913e-450">Quando un thread chiama `Wait`, rilascia il blocco sull'oggetto e inserito nella coda in attesa dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-450">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="f913e-451">Il thread successivo nella coda di pronto dell'oggetto (se presente) acquisisce il blocco e ha l'utilizzo esclusivo dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-451">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="f913e-452">Il thread che ha richiamato `Wait` richiama un thread che contiene il blocco rimane nella coda di attesa fino a quando non <xref:System.Threading.Monitor.PulseAll%2A>, o è il successivo nella coda e un thread che è responsabile del blocco richiama <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="f913e-452">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="f913e-453">Tuttavia, se `millisecondsTimeout` deve trascorrere prima che un altro thread richiama l'oggetto <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A> (metodo), il thread originale viene spostato nella coda degli elementi pronti per riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-453">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f913e-454">Se <xref:System.Threading.Timeout.Infinite> specificato per il `millisecondsTimeout` parametro, questo metodo in modo indefinito, a meno che il proprietario del blocco chiama <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="f913e-454">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="f913e-455">Se `millisecondsTimeout` è uguale a 0, il thread che chiama `Wait` rilascia il blocco e viene inserito immediatamente nella coda degli elementi pronti per riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-455">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="f913e-456">Il chiamante esegue `Wait` una volta, indipendentemente dal numero di volte in cui <xref:System.Threading.Monitor.Enter%2A> è stato richiamato per l'oggetto specificato.</span><span class="sxs-lookup"><span data-stu-id="f913e-456">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="f913e-457">Concettualmente, la `Wait` metodo archivia il numero di chiamate <xref:System.Threading.Monitor.Enter%2A> sull'oggetto e richiama <xref:System.Threading.Monitor.Exit%2A> come numero di volte necessario per ottenere il rilascio dell'oggetto bloccato.</span><span class="sxs-lookup"><span data-stu-id="f913e-457">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="f913e-458">Il chiamante viene bloccato durante l'attesa di riacquisizione dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-458">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="f913e-459">Quando il chiamante riacquisisce il blocco, il sistema chiama <xref:System.Threading.Monitor.Enter%2A> il numero di volte in base alle esigenze salvato <xref:System.Threading.Monitor.Enter%2A> conteggio per il chiamante.</span><span class="sxs-lookup"><span data-stu-id="f913e-459">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="f913e-460">La chiamata `Wait` rilascia il blocco per l'oggetto specificato solo se il chiamante è il proprietario di blocchi su altri oggetti, tali blocchi non vengono rilasciati.</span><span class="sxs-lookup"><span data-stu-id="f913e-460">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f913e-461">Un oggetto sincronizzato contiene diversi riferimenti, incluso un riferimento al thread che attualmente contiene il blocco, un riferimento alla coda degli elementi pronti, che contiene i thread pronti ottenere il blocco, e un riferimento alla coda di attesa, che contiene il thread in attesa per la notifica di modifica dello stato dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-461">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="f913e-462">Il <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, e `Wait` metodi devono essere richiamati dall'interno di un blocco sincronizzato di codice.</span><span class="sxs-lookup"><span data-stu-id="f913e-462">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="f913e-463">La sezione Osservazioni per il <xref:System.Threading.Monitor.Pulse%2A> metodo spiegare cosa accade se <xref:System.Threading.Monitor.Pulse%2A> viene chiamato quando è in attesa alcun thread.</span><span class="sxs-lookup"><span data-stu-id="f913e-463">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f913e-464">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-464">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="f913e-465">Il thread chiamante non è il proprietario del blocco per l'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-465">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="f913e-466">Il thread da cui è stato richiamato <see langword="Wait" /> viene interrotto in seguito dallo stato di attesa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-466">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="f913e-467">L'interruzione si verifica quando il metodo <see cref="M:System.Threading.Thread.Interrupt" /> di questo thread viene chiamato da un altro thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-467">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="f913e-468">Il valore del parametro <paramref name="millisecondsTimeout" /> è negativo e non è uguale a <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-468">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="f913e-469">Oggetto per il quale attendere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-469">The object on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="f913e-470">Oggetto <see cref="T:System.TimeSpan" /> che rappresenta il tempo di attesa prima che il thread venga inserito nella coda di thread pronti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-470">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f913e-471">Rilascia il blocco su un oggetto e interrompe il thread corrente finché riacquisisce il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-471">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="f913e-472">Allo scadere dell'intervallo di timeout specificato, il thread viene inserito nella coda di thread pronti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-472">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f913e-473">
            <see langword="true" /> se il blocco è stato riacquisito prima che sia trascorso il tempo specificato; <see langword="false" /> se il blocco è stato riacquisito dopo che è trascorso il tempo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-473">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="f913e-474">Il metodo non restituisce alcun valore finché il blocco non viene riacquisito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-474">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f913e-475">Questo metodo non restituisce finché riacquisisce il blocco esclusivo sul `obj` parametro.</span><span class="sxs-lookup"><span data-stu-id="f913e-475">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="f913e-476">Questo metodo viene richiamato dal thread che attualmente possiede il blocco sull'oggetto specificato per il rilascio dell'oggetto in modo che un altro thread possa accedervi.</span><span class="sxs-lookup"><span data-stu-id="f913e-476">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="f913e-477">Il chiamante è bloccato durante l'attesa per riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-477">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="f913e-478">Questo metodo viene chiamato quando il chiamante deve attendere una modifica dello stato che si verificherà in seguito a operazioni di un altro thread.</span><span class="sxs-lookup"><span data-stu-id="f913e-478">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="f913e-479">Il timeout assicura che il thread corrente non bloccarsi in modo indefinito se un altro thread rilascia il blocco senza chiamare prima il <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="f913e-479">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="f913e-480">Inoltre, si sposta il thread nella coda pronti, ignorando gli altri thread prima la coda di attesa, in modo che è possibile riacquisire il blocco prima.</span><span class="sxs-lookup"><span data-stu-id="f913e-480">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="f913e-481">Il thread può verificare il valore restituito di <xref:System.Threading.Monitor.Wait%2A> metodo per determinare se ha riacquisito il blocco prima del timeout. Il thread è possibile valutare le condizioni che hanno causato lo stato di attesa, se necessario, chiamare il <xref:System.Threading.Monitor.Wait%2A> nuovo metodo.</span><span class="sxs-lookup"><span data-stu-id="f913e-481">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="f913e-482">Quando un thread chiama `Wait`, rilascia il blocco sull'oggetto e inserito nella coda in attesa dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-482">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="f913e-483">Il thread successivo nella coda di pronto dell'oggetto (se presente) acquisisce il blocco e ha l'utilizzo esclusivo dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-483">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="f913e-484">Il thread che ha richiamato `Wait` richiama un thread che contiene il blocco rimane nella coda di attesa fino a quando non <xref:System.Threading.Monitor.PulseAll%2A>, o è il successivo nella coda e un thread che è responsabile del blocco richiama <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="f913e-484">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="f913e-485">Tuttavia, se `timeout` deve trascorrere prima che un altro thread richiama l'oggetto <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A> (metodo), il thread originale viene spostato nella coda degli elementi pronti per riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-485">However, if `timeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f913e-486">Se un <xref:System.TimeSpan> – 1 millisecondo specificato per il `timeout` parametro, questo metodo in modo indefinito, a meno che il proprietario del blocco chiama <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="f913e-486">If a <xref:System.TimeSpan> representing –1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="f913e-487">Se `timeout` è pari a 0 millisecondi, il thread che chiama `Wait` rilascia il blocco e viene inserito immediatamente nella coda degli elementi pronti per riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-487">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="f913e-488">Il chiamante esegue `Wait` una volta, indipendentemente dal numero di volte in cui <xref:System.Threading.Monitor.Enter%2A> è stato richiamato per l'oggetto specificato.</span><span class="sxs-lookup"><span data-stu-id="f913e-488">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="f913e-489">Concettualmente, la `Wait` metodo archivia il numero di chiamate <xref:System.Threading.Monitor.Enter%2A> sull'oggetto e richiama <xref:System.Threading.Monitor.Exit%2A> come numero di volte necessario per ottenere il rilascio dell'oggetto bloccato.</span><span class="sxs-lookup"><span data-stu-id="f913e-489">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="f913e-490">Il chiamante viene bloccato durante l'attesa di riacquisizione dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-490">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="f913e-491">Quando il chiamante riacquisisce il blocco, il sistema chiama <xref:System.Threading.Monitor.Enter%2A> il numero di volte in base alle esigenze salvato <xref:System.Threading.Monitor.Enter%2A> conteggio per il chiamante.</span><span class="sxs-lookup"><span data-stu-id="f913e-491">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="f913e-492">La chiamata `Wait` rilascia il blocco per l'oggetto specificato solo se il chiamante è il proprietario di blocchi su altri oggetti, tali blocchi non vengono rilasciati.</span><span class="sxs-lookup"><span data-stu-id="f913e-492">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f913e-493">Un oggetto sincronizzato contiene diversi riferimenti, incluso un riferimento al thread che attualmente contiene il blocco, un riferimento alla coda degli elementi pronti, che contiene i thread pronti ottenere il blocco, e un riferimento alla coda di attesa, che contiene il thread in attesa per la notifica di modifica dello stato dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-493">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="f913e-494">Il <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, e `Wait` metodi devono essere richiamati dall'interno di un blocco sincronizzato di codice.</span><span class="sxs-lookup"><span data-stu-id="f913e-494">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="f913e-495">La sezione Osservazioni per il <xref:System.Threading.Monitor.Pulse%2A> metodo spiegare cosa accade se <xref:System.Threading.Monitor.Pulse%2A> viene chiamato quando è in attesa alcun thread.</span><span class="sxs-lookup"><span data-stu-id="f913e-495">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f913e-496">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-496">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="f913e-497">Il thread chiamante non è il proprietario del blocco per l'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-497">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="f913e-498">Il thread da cui è stato richiamato <see langword="Wait" /> viene interrotto in seguito dallo stato di attesa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-498">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="f913e-499">L'interruzione si verifica quando il metodo <see cref="M:System.Threading.Thread.Interrupt" /> di questo thread viene chiamato da un altro thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-499">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="f913e-500">Il valore del parametro <paramref name="timeout" /> in millisecondi è negativo e non rappresenta <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecondo) oppure è maggiore di <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-500">The value of the <paramref name="timeout" /> parameter in milliseconds is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="f913e-501">Oggetto per il quale attendere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-501">The object on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="f913e-502">Numero di millisecondi da attendere prima che il thread venga inserito nella coda di thread pronti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-502">The number of milliseconds to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="f913e-503">
            <see langword="true" /> per uscire e riacquisire il dominio di sincronizzazione per il contesto, se si trova in un contesto sincronizzato, prima dell'attesa; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-503">
              <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f913e-504">Rilascia il blocco su un oggetto e interrompe il thread corrente finché riacquisisce il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-504">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="f913e-505">Allo scadere dell'intervallo di timeout specificato, il thread viene inserito nella coda di thread pronti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-505">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
          <span data-ttu-id="f913e-506">Questo metodo consente anche di specificare se il dominio di sincronizzazione per il contesto, qualora si trovi in un contesto di sincronizzazione, viene terminato prima dell'attesa e riacquisito in un secondo momento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-506">This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired afterward.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f913e-507">
            <see langword="true" /> se il blocco è stato riacquisito prima che sia trascorso il tempo specificato; <see langword="false" /> se il blocco è stato riacquisito dopo che è trascorso il tempo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-507">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="f913e-508">Il metodo non restituisce alcun valore finché il blocco non viene riacquisito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-508">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f913e-509">Questo metodo non restituisce finché riacquisisce il blocco esclusivo sul `obj` parametro.</span><span class="sxs-lookup"><span data-stu-id="f913e-509">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="f913e-510">Questo metodo viene richiamato dal thread che attualmente possiede il blocco sull'oggetto specificato per il rilascio dell'oggetto in modo che un altro thread possa accedervi.</span><span class="sxs-lookup"><span data-stu-id="f913e-510">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="f913e-511">Il chiamante è bloccato durante l'attesa per riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-511">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="f913e-512">Questo metodo viene chiamato quando il chiamante deve attendere una modifica dello stato che si verificherà in seguito a operazioni di un altro thread.</span><span class="sxs-lookup"><span data-stu-id="f913e-512">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="f913e-513">Il timeout assicura che il thread corrente non bloccarsi in modo indefinito se un altro thread rilascia il blocco senza chiamare prima il <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="f913e-513">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="f913e-514">Inoltre, si sposta il thread nella coda pronti, ignorando gli altri thread prima la coda di attesa, in modo che è possibile riacquisire il blocco prima.</span><span class="sxs-lookup"><span data-stu-id="f913e-514">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="f913e-515">Il thread può verificare il valore restituito di <xref:System.Threading.Monitor.Wait%2A> metodo per determinare se ha riacquisito il blocco prima del timeout. Il thread è possibile valutare le condizioni che hanno causato lo stato di attesa, se necessario, chiamare il <xref:System.Threading.Monitor.Wait%2A> nuovo metodo.</span><span class="sxs-lookup"><span data-stu-id="f913e-515">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="f913e-516">Quando un thread chiama `Wait`, rilascia il blocco e viene inserito nella coda di attesa.</span><span class="sxs-lookup"><span data-stu-id="f913e-516">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="f913e-517">A questo punto, il thread successivo nella coda degli elementi pronti (se presente) è consentito di assumere il controllo del blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-517">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="f913e-518">Il thread che ha richiamato `Wait` richiama un thread che contiene il blocco rimane nella coda di attesa fino a quando non <xref:System.Threading.Monitor.PulseAll%2A>, o è il successivo nella coda e un thread che è responsabile del blocco richiama <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="f913e-518">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="f913e-519">Tuttavia, se `millisecondsTimeout` deve trascorrere prima che un altro thread richiama l'oggetto <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A> (metodo), il thread originale viene spostato nella coda degli elementi pronti per riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-519">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f913e-520">Se <xref:System.Threading.Timeout.Infinite> specificato per il `millisecondsTimeout` parametro, questo metodo in modo indefinito, a meno che il proprietario del blocco chiama <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="f913e-520">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="f913e-521">Se `millisecondsTimeout` è uguale a 0, il thread che chiama `Wait` rilascia il blocco e viene inserito immediatamente nella coda degli elementi pronti per riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-521">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="f913e-522">Il chiamante esegue `Wait` una volta, indipendentemente dal numero di volte in cui <xref:System.Threading.Monitor.Enter%2A> è stato richiamato per l'oggetto specificato.</span><span class="sxs-lookup"><span data-stu-id="f913e-522">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="f913e-523">Concettualmente, la `Wait` metodo archivia il numero di chiamate <xref:System.Threading.Monitor.Enter%2A> sull'oggetto e richiama <xref:System.Threading.Monitor.Exit%2A> come numero di volte necessario per ottenere il rilascio dell'oggetto bloccato.</span><span class="sxs-lookup"><span data-stu-id="f913e-523">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="f913e-524">Il chiamante viene bloccato durante l'attesa di riacquisizione dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-524">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="f913e-525">Quando il chiamante riacquisisce il blocco, il sistema chiama <xref:System.Threading.Monitor.Enter%2A> il numero di volte in base alle esigenze salvato <xref:System.Threading.Monitor.Enter%2A> conteggio per il chiamante.</span><span class="sxs-lookup"><span data-stu-id="f913e-525">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="f913e-526">La chiamata `Wait` rilascia il blocco per l'oggetto specificato solo se il chiamante è il proprietario di blocchi su altri oggetti, tali blocchi non vengono rilasciati.</span><span class="sxs-lookup"><span data-stu-id="f913e-526">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f913e-527">Un oggetto sincronizzato contiene diversi riferimenti, incluso un riferimento al thread che attualmente contiene il blocco, un riferimento alla coda degli elementi pronti, che contiene i thread pronti ottenere il blocco, e un riferimento alla coda di attesa, che contiene il thread in attesa per la notifica di modifica dello stato dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-527">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="f913e-528">Il <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, e `Wait` metodi devono essere richiamati dall'interno di un blocco sincronizzato di codice.</span><span class="sxs-lookup"><span data-stu-id="f913e-528">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="f913e-529">La sezione Osservazioni per il <xref:System.Threading.Monitor.Pulse%2A> metodo spiegare cosa accade se <xref:System.Threading.Monitor.Pulse%2A> viene chiamato quando è in attesa alcun thread.</span><span class="sxs-lookup"><span data-stu-id="f913e-529">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="f913e-530">Note sull'uscita dal contesto</span><span class="sxs-lookup"><span data-stu-id="f913e-530">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="f913e-531">Il`exitContext` parametro ha effetto solo se il <xref:System.Threading.Monitor.Wait%2A> metodo chiamato dall'interno di un contesto gestito.</span><span class="sxs-lookup"><span data-stu-id="f913e-531">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="f913e-532">Questa situazione può verificarsi se il thread è all'interno di una chiamata a un'istanza di una classe derivata da <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="f913e-532">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="f913e-533">Anche se attualmente un metodo in una classe che non è derivata da <xref:System.ContextBoundObject>, ad esempio <xref:System.String>, è possibile trovarsi in un contesto non predefinito se un <xref:System.ContextBoundObject> nello stack nel dominio applicazione corrente.</span><span class="sxs-lookup"><span data-stu-id="f913e-533">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="f913e-534">Quando il codice è in esecuzione in un contesto non predefinito, specificare `true` per `exitContext` fa sì che il thread esce dal contesto gestito (vale a dire transizione per il contesto predefinito) prima di eseguire il <xref:System.Threading.Monitor.Wait%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="f913e-534">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="f913e-535">Restituisce il contesto non predefinito originale dopo la chiamata al <xref:System.Threading.Monitor.Wait%2A> metodo viene completato.</span><span class="sxs-lookup"><span data-stu-id="f913e-535">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="f913e-536">Può essere utile quando la classe associata al contesto non dispone di <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attributo applicato.</span><span class="sxs-lookup"><span data-stu-id="f913e-536">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="f913e-537">In tal caso, tutte le chiamate ai membri della classe sono automaticamente sincronizzate e il dominio di sincronizzazione è l'intero corpo del codice per la classe.</span><span class="sxs-lookup"><span data-stu-id="f913e-537">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="f913e-538">Se viene chiamato codice nello stack di chiamate di un membro di <xref:System.Threading.Monitor.Wait%2A> (metodo) e specifica `true` per `exitContext`, la chiusura del thread nel dominio di sincronizzazione, consentendo a un thread bloccato in una chiamata a qualsiasi membro dell'oggetto per continuare.</span><span class="sxs-lookup"><span data-stu-id="f913e-538">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="f913e-539">Quando il <xref:System.Threading.Monitor.Wait%2A> metodo viene restituito, il thread che ha effettuato la chiamata deve attendere per immettere nuovamente il dominio di sincronizzazione.</span><span class="sxs-lookup"><span data-stu-id="f913e-539">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f913e-540">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-540">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="f913e-541">
            <see langword="Wait" /> non viene richiamato dall'interno di un blocco di codice sincronizzato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-541">
              <see langword="Wait" /> is not invoked from within a synchronized block of code.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="f913e-542">Il thread da cui è stato richiamato <see langword="Wait" /> viene interrotto in seguito dallo stato di attesa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-542">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="f913e-543">L'interruzione si verifica quando il metodo <see cref="M:System.Threading.Thread.Interrupt" /> di questo thread viene chiamato da un altro thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-543">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="f913e-544">Il valore del parametro <paramref name="millisecondsTimeout" /> è negativo e non è uguale a <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-544">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout, bool exitContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="f913e-545">Oggetto per il quale attendere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-545">The object on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="f913e-546">Oggetto <see cref="T:System.TimeSpan" /> che rappresenta il tempo di attesa prima che il thread venga inserito nella coda di thread pronti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-546">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="f913e-547">
            <see langword="true" /> per uscire e riacquisire il dominio di sincronizzazione per il contesto, se si trova in un contesto sincronizzato, prima dell'attesa; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-547">
              <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f913e-548">Rilascia il blocco su un oggetto e interrompe il thread corrente finché riacquisisce il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-548">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="f913e-549">Allo scadere dell'intervallo di timeout specificato, il thread viene inserito nella coda di thread pronti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-549">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
          <span data-ttu-id="f913e-550">Esce eventualmente dal dominio di sincronizzazione per il contesto di sincronizzazione prima dell'attesa e riacquisisce il dominio in un secondo momento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-550">Optionally exits the synchronization domain for the synchronized context before the wait and reacquires the domain afterward.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f913e-551">
            <see langword="true" /> se il blocco è stato riacquisito prima che sia trascorso il tempo specificato; <see langword="false" /> se il blocco è stato riacquisito dopo che è trascorso il tempo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-551">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="f913e-552">Il metodo non restituisce alcun valore finché il blocco non viene riacquisito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-552">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f913e-553">Questo metodo non restituisce finché riacquisisce il blocco esclusivo sul `obj` parametro.</span><span class="sxs-lookup"><span data-stu-id="f913e-553">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="f913e-554">Questo metodo viene richiamato dal thread che attualmente possiede il blocco sull'oggetto specificato per il rilascio dell'oggetto in modo che un altro thread possa accedervi.</span><span class="sxs-lookup"><span data-stu-id="f913e-554">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="f913e-555">Il chiamante è bloccato durante l'attesa per riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-555">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="f913e-556">Questo metodo viene chiamato quando il chiamante deve attendere una modifica dello stato che si verificherà in seguito a operazioni di un altro thread.</span><span class="sxs-lookup"><span data-stu-id="f913e-556">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="f913e-557">Il timeout assicura che il thread corrente non bloccarsi in modo indefinito se un altro thread rilascia il blocco senza chiamare prima il <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="f913e-557">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="f913e-558">Inoltre, si sposta il thread nella coda pronti, ignorando gli altri thread prima la coda di attesa, in modo che è possibile riacquisire il blocco prima.</span><span class="sxs-lookup"><span data-stu-id="f913e-558">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="f913e-559">Il thread può verificare il valore restituito di <xref:System.Threading.Monitor.Wait%2A> metodo per determinare se ha riacquisito il blocco prima del timeout. Il thread è possibile valutare le condizioni che hanno causato lo stato di attesa, se necessario, chiamare il <xref:System.Threading.Monitor.Wait%2A> nuovo metodo.</span><span class="sxs-lookup"><span data-stu-id="f913e-559">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="f913e-560">Quando un thread chiama `Wait`, rilascia il blocco e viene inserito nella coda di attesa.</span><span class="sxs-lookup"><span data-stu-id="f913e-560">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="f913e-561">A questo punto, il thread successivo nella coda degli elementi pronti (se presente) è consentito di assumere il controllo del blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-561">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="f913e-562">Il thread che ha richiamato `Wait` richiama un thread che contiene il blocco rimane nella coda di attesa fino a quando non <xref:System.Threading.Monitor.PulseAll%2A>, o è il successivo nella coda e un thread che è responsabile del blocco richiama <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="f913e-562">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="f913e-563">Tuttavia, se `timeout` trascorre prima che un altro thread richiama l'oggetto <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A> (metodo), il thread originale viene spostato nella coda degli elementi pronti per riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-563">However, if `timeout` milliseconds elapse before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f913e-564">Se un <xref:System.TimeSpan> specificato che rappresenta-1 millisecondi per il `timeout` parametro, questo metodo in modo indefinito, a meno che il proprietario del blocco chiama <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="f913e-564">If a <xref:System.TimeSpan> representing -1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="f913e-565">Se `timeout` è pari a 0 millisecondi, il thread che chiama `Wait` rilascia il blocco e viene inserito immediatamente nella coda degli elementi pronti per riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="f913e-565">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="f913e-566">Il chiamante esegue `Wait` una volta, indipendentemente dal numero di volte in cui <xref:System.Threading.Monitor.Enter%2A> è stato richiamato per l'oggetto specificato.</span><span class="sxs-lookup"><span data-stu-id="f913e-566">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="f913e-567">Concettualmente, la `Wait` metodo archivia il numero di chiamate <xref:System.Threading.Monitor.Enter%2A> sull'oggetto e richiama <xref:System.Threading.Monitor.Exit%2A> come numero di volte necessario per ottenere il rilascio dell'oggetto bloccato.</span><span class="sxs-lookup"><span data-stu-id="f913e-567">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="f913e-568">Il chiamante viene bloccato durante l'attesa di riacquisizione dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-568">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="f913e-569">Quando il chiamante riacquisisce il blocco, il sistema chiama <xref:System.Threading.Monitor.Enter%2A> il numero di volte in base alle esigenze salvato <xref:System.Threading.Monitor.Enter%2A> conteggio per il chiamante.</span><span class="sxs-lookup"><span data-stu-id="f913e-569">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="f913e-570">La chiamata `Wait` rilascia il blocco per l'oggetto specificato solo se il chiamante è il proprietario di blocchi su altri oggetti, tali blocchi non vengono rilasciati.</span><span class="sxs-lookup"><span data-stu-id="f913e-570">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f913e-571">Un oggetto sincronizzato contiene diversi riferimenti, incluso un riferimento al thread che attualmente contiene il blocco, un riferimento alla coda degli elementi pronti, che contiene i thread pronti ottenere il blocco, e un riferimento alla coda di attesa, che contiene il thread in attesa per la notifica di modifica dello stato dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f913e-571">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="f913e-572">Il <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, e `Wait` metodi devono essere richiamati dall'interno di un blocco sincronizzato di codice.</span><span class="sxs-lookup"><span data-stu-id="f913e-572">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="f913e-573">La sezione Osservazioni per il <xref:System.Threading.Monitor.Pulse%2A> metodo spiegare cosa accade se <xref:System.Threading.Monitor.Pulse%2A> viene chiamato quando è in attesa alcun thread.</span><span class="sxs-lookup"><span data-stu-id="f913e-573">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="f913e-574">Note sull'uscita dal contesto</span><span class="sxs-lookup"><span data-stu-id="f913e-574">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="f913e-575">Il`exitContext` parametro ha effetto solo se il <xref:System.Threading.Monitor.Wait%2A> metodo chiamato dall'interno di un contesto gestito.</span><span class="sxs-lookup"><span data-stu-id="f913e-575">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="f913e-576">Questa situazione può verificarsi se il thread è all'interno di una chiamata a un'istanza di una classe derivata da <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="f913e-576">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="f913e-577">Anche se attualmente un metodo in una classe che non è derivata da <xref:System.ContextBoundObject>, ad esempio <xref:System.String>, è possibile trovarsi in un contesto non predefinito se un <xref:System.ContextBoundObject> nello stack nel dominio applicazione corrente.</span><span class="sxs-lookup"><span data-stu-id="f913e-577">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="f913e-578">Quando il codice è in esecuzione in un contesto non predefinito, specificare `true` per `exitContext` fa sì che il thread esce dal contesto gestito (vale a dire transizione per il contesto predefinito) prima di eseguire il <xref:System.Threading.Monitor.Wait%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="f913e-578">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="f913e-579">Restituisce il contesto non predefinito originale dopo la chiamata al <xref:System.Threading.Monitor.Wait%2A> metodo viene completato.</span><span class="sxs-lookup"><span data-stu-id="f913e-579">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="f913e-580">Può essere utile quando la classe associata al contesto non dispone di <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attributo applicato.</span><span class="sxs-lookup"><span data-stu-id="f913e-580">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="f913e-581">In tal caso, tutte le chiamate ai membri della classe sono automaticamente sincronizzate e il dominio di sincronizzazione è l'intero corpo del codice per la classe.</span><span class="sxs-lookup"><span data-stu-id="f913e-581">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="f913e-582">Se viene chiamato codice nello stack di chiamate di un membro di <xref:System.Threading.Monitor.Wait%2A> (metodo) e specifica `true` per `exitContext`, la chiusura del thread nel dominio di sincronizzazione, consentendo a un thread bloccato in una chiamata a qualsiasi membro dell'oggetto per continuare.</span><span class="sxs-lookup"><span data-stu-id="f913e-582">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="f913e-583">Quando il <xref:System.Threading.Monitor.Wait%2A> metodo viene restituito, il thread che ha effettuato la chiamata deve attendere per immettere nuovamente il dominio di sincronizzazione.</span><span class="sxs-lookup"><span data-stu-id="f913e-583">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f913e-584">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-584">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="f913e-585">
            <see langword="Wait" /> non viene richiamato dall'interno di un blocco di codice sincronizzato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-585">
              <see langword="Wait" /> is not invoked from within a synchronized block of code.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="f913e-586">Il thread da cui è stato richiamato Wait viene interrotto più tardi dallo stato di attesa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-586">The thread that invokes Wait is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="f913e-587">L'interruzione si verifica quando il metodo <see cref="M:System.Threading.Thread.Interrupt" /> di questo thread viene chiamato da un altro thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-587">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="f913e-588">Il parametro <paramref name="timeout" /> è negativo e non rappresenta <see cref="F:System.Threading.Timeout.Infinite" /> (– 1 millisecondo) oppure è maggiore di <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f913e-588">The <paramref name="timeout" /> parameter is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
  </Members>
</Type>