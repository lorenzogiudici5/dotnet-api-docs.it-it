<Type Name="Monitor" FullName="System.Threading.Monitor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="df70f7cc62e1ef013835d69cf0220d9e8b42bc5a" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48729800" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Monitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Monitor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Monitor" />
  <TypeSignature Language="VB.NET" Value="Public Class Monitor" />
  <TypeSignature Language="C++ CLI" Value="public ref class Monitor abstract sealed" />
  <TypeSignature Language="F#" Value="type Monitor = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ce991-101">Fornisce un meccanismo che sincronizza l'accesso agli oggetti.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ce991-101">Provides a mechanism that synchronizes access to objects.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce991-102">Il <xref:System.Threading.Monitor> classe consente di sincronizzare l'accesso a un'area di codice accettando e rilasciando un blocco su un determinato oggetto chiamando il <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, e <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> metodi.</span><span class="sxs-lookup"><span data-stu-id="ce991-102">The <xref:System.Threading.Monitor> class allows you to synchronize access to a region of code by taking and releasing a lock on a particular object by calling the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="ce991-103">I blocchi di oggetti consentono di limitare l'accesso a un blocco di codice, più comunemente, una sezione critica.</span><span class="sxs-lookup"><span data-stu-id="ce991-103">Object locks provide the ability to restrict access to a block of code, commonly called a critical section.</span></span> <span data-ttu-id="ce991-104">Mentre un thread è proprietario del blocco per un oggetto, nessun altro thread può acquisire tale blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-104">While a thread owns the lock for an object, no other thread can acquire that lock.</span></span> <span data-ttu-id="ce991-105">È anche possibile usare il <xref:System.Threading.Monitor> classe per assicurarsi che nessun altro thread è consentito accedere a una sezione dell'applicazione del codice eseguita dal proprietario del blocco, a meno che l'altro thread è in esecuzione il codice che usa un diverso oggetto bloccato.</span><span class="sxs-lookup"><span data-stu-id="ce991-105">You can also use the <xref:System.Threading.Monitor> class to ensure that no other thread is allowed to access a section of application code being executed by the lock owner, unless the other thread is executing the code using a different locked object.</span></span>  
  
 <span data-ttu-id="ce991-106">Contenuto dell'articolo:</span><span class="sxs-lookup"><span data-stu-id="ce991-106">In this article:</span></span>  
  
 <span data-ttu-id="ce991-107">[La classe di monitoraggio: una panoramica](#Overview) </span><span class="sxs-lookup"><span data-stu-id="ce991-107">[The Monitor class: An overview](#Overview) </span></span>  
 <span data-ttu-id="ce991-108">[L'oggetto di blocco](#Lock) </span><span class="sxs-lookup"><span data-stu-id="ce991-108">[The lock object](#Lock) </span></span>  
 <span data-ttu-id="ce991-109">[La sezione critica](#CriticalSection) </span><span class="sxs-lookup"><span data-stu-id="ce991-109">[The critical section](#CriticalSection) </span></span>  
 <span data-ttu-id="ce991-110">[Wait, Pulse e PulseAll](#Pulse) </span><span class="sxs-lookup"><span data-stu-id="ce991-110">[Pulse, PulseAll, and Wait](#Pulse) </span></span>  
 [<span data-ttu-id="ce991-111">Monitoraggi e gli handle di attesa</span><span class="sxs-lookup"><span data-stu-id="ce991-111">Monitors and wait handles</span></span>](#WaitHandles)  
  
<a name="Overview"></a>   
## <a name="the-monitor-class-an-overview"></a><span data-ttu-id="ce991-112">La classe di monitoraggio: una panoramica</span><span class="sxs-lookup"><span data-stu-id="ce991-112">The Monitor class: An overview</span></span>  
 <span data-ttu-id="ce991-113"><xref:System.Threading.Monitor> presenta le funzionalità seguenti:</span><span class="sxs-lookup"><span data-stu-id="ce991-113"><xref:System.Threading.Monitor> has the following features:</span></span>  
  
-   <span data-ttu-id="ce991-114">È associato a un oggetto su richiesta.</span><span class="sxs-lookup"><span data-stu-id="ce991-114">It is associated with an object on demand.</span></span>  
  
-   <span data-ttu-id="ce991-115">È non associato, vale a dire che può essere chiamato direttamente da qualsiasi contesto.</span><span class="sxs-lookup"><span data-stu-id="ce991-115">It is unbound, which means it can be called directly from any context.</span></span>  
  
-   <span data-ttu-id="ce991-116">Un'istanza del <xref:System.Threading.Monitor> classe non può essere creata; i metodi del <xref:System.Threading.Monitor> classe sono tutti statici.</span><span class="sxs-lookup"><span data-stu-id="ce991-116">An instance of the <xref:System.Threading.Monitor> class cannot be created; the methods of the <xref:System.Threading.Monitor> class are all static.</span></span> <span data-ttu-id="ce991-117">Ogni metodo viene passato l'oggetto sincronizzato che controlla l'accesso alla sezione critica.</span><span class="sxs-lookup"><span data-stu-id="ce991-117">Each method is passed the synchronized object that controls access to the critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ce991-118">Usare la <xref:System.Threading.Monitor> classe per bloccare gli oggetti diversi da stringhe (vale a dire, fare riferimento a tipi diversi da <xref:System.String>), i tipi di valore non.</span><span class="sxs-lookup"><span data-stu-id="ce991-118">Use the <xref:System.Threading.Monitor> class to lock objects other than strings (that is, reference types other than <xref:System.String>), not value types.</span></span> <span data-ttu-id="ce991-119">Per informazioni dettagliate, vedere gli overload del <xref:System.Threading.Monitor.Enter%2A> (metodo) e [l'oggetto blocco](#Lock) sezione più avanti in questo articolo.</span><span class="sxs-lookup"><span data-stu-id="ce991-119">For details, see the overloads of the <xref:System.Threading.Monitor.Enter%2A> method and [The lock object](#Lock) section later in this article.</span></span>  
  
 <span data-ttu-id="ce991-120">La tabella seguente descrive le azioni che possono essere eseguite dai thread che accedono a oggetti sincronizzati:</span><span class="sxs-lookup"><span data-stu-id="ce991-120">The following table describes the actions that can be taken by threads that access synchronized objects:</span></span>  
  
|<span data-ttu-id="ce991-121">Operazione</span><span class="sxs-lookup"><span data-stu-id="ce991-121">Action</span></span>|<span data-ttu-id="ce991-122">Descrizione</span><span class="sxs-lookup"><span data-stu-id="ce991-122">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="ce991-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span><span class="sxs-lookup"><span data-stu-id="ce991-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span></span>|<span data-ttu-id="ce991-124">Acquisisce un blocco per un oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-124">Acquires a lock for an object.</span></span> <span data-ttu-id="ce991-125">Inoltre, questa azione contrassegna l'inizio di una sezione critica.</span><span class="sxs-lookup"><span data-stu-id="ce991-125">This action also marks the beginning of a critical section.</span></span> <span data-ttu-id="ce991-126">Nessun altro thread può entrare nella sezione critica a meno che non è in esecuzione le istruzioni nella sezione critica utilizzando un diverso oggetto bloccato.</span><span class="sxs-lookup"><span data-stu-id="ce991-126">No other thread can enter the critical section unless it is executing the instructions in the critical section using a different locked object.</span></span>|  
|<xref:System.Threading.Monitor.Wait%2A>|<span data-ttu-id="ce991-127">Rilascia il blocco su un oggetto per permettere ad altri thread per bloccare e accedere all'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-127">Releases the lock on an object in order to permit other threads to lock and access the object.</span></span> <span data-ttu-id="ce991-128">Il thread chiamante è in attesa mentre un altro thread accede all'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-128">The calling thread waits while another thread accesses the object.</span></span> <span data-ttu-id="ce991-129">Segnali di Pulse vengono usati per notificare il thread in attesa sulle modifiche apportate allo stato di un oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-129">Pulse signals are used to notify waiting threads about changes to an object's state.</span></span>|  
|<span data-ttu-id="ce991-130"><xref:System.Threading.Monitor.Pulse%2A> (signal), <xref:System.Threading.Monitor.PulseAll%2A></span><span class="sxs-lookup"><span data-stu-id="ce991-130"><xref:System.Threading.Monitor.Pulse%2A> (signal), <xref:System.Threading.Monitor.PulseAll%2A></span></span>|<span data-ttu-id="ce991-131">Invia un segnale per uno o più thread in attesa.</span><span class="sxs-lookup"><span data-stu-id="ce991-131">Sends a signal to one or more waiting threads.</span></span> <span data-ttu-id="ce991-132">Il segnale di notifica a un thread in attesa che lo stato dell'oggetto bloccato è cambiato e il proprietario del blocco è pronto per rilasciare il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-132">The signal notifies a waiting thread that the state of the locked object has changed, and the owner of the lock is ready to release the lock.</span></span> <span data-ttu-id="ce991-133">Il thread in attesa viene inserito nella coda di pronto dell'oggetto in modo che è possibile che venga visualizzato alla fine del blocco per l'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-133">The waiting thread is placed in the object's ready queue so that it might eventually receive the lock for the object.</span></span> <span data-ttu-id="ce991-134">Dopo che il thread ha il blocco, è possibile verificare il nuovo stato dell'oggetto per vedere se è stato raggiunto lo stato necessario.</span><span class="sxs-lookup"><span data-stu-id="ce991-134">Once the thread has the lock, it can check the new state of the object to see if the required state has been reached.</span></span>|  
|<xref:System.Threading.Monitor.Exit%2A>|<span data-ttu-id="ce991-135">Rilascia il blocco su un oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-135">Releases the lock on an object.</span></span> <span data-ttu-id="ce991-136">Inoltre, questa azione contrassegna la fine di una sezione critica protetta da oggetto bloccato.</span><span class="sxs-lookup"><span data-stu-id="ce991-136">This action also marks the end of a critical section protected by the locked object.</span></span>|  
  
 <span data-ttu-id="ce991-137">Inizia con la [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], sono disponibili due set di overload per il <xref:System.Threading.Monitor.Enter%2A> e <xref:System.Threading.Monitor.TryEnter%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="ce991-137">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], there are two sets of overloads for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.TryEnter%2A> methods.</span></span> <span data-ttu-id="ce991-138">Un set di overload è un `ref` (in c#) o `ByRef` (in Visual Basic) <xref:System.Boolean> parametro che viene impostato in modo atomico `true` se viene acquisito il blocco, anche se viene generata un'eccezione durante l'acquisizione del blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-138">One set of overloads has a `ref` (in C#) or `ByRef` (in Visual Basic) <xref:System.Boolean> parameter that is atomically set to `true` if the lock is acquired, even if an exception is thrown when acquiring the lock.</span></span> <span data-ttu-id="ce991-139">Usare questi overload se è critico per rilasciare il blocco in tutti i casi, anche quando le risorse che è la protezione di blocco potrebbero non essere in uno stato coerente.</span><span class="sxs-lookup"><span data-stu-id="ce991-139">Use these overloads if it is critical to release the lock in all cases, even when the resources the lock is protecting might not be in a consistent state.</span></span>  
  
<a name="Lock"></a>   
## <a name="the-lock-object"></a><span data-ttu-id="ce991-140">L'oggetto di blocco</span><span class="sxs-lookup"><span data-stu-id="ce991-140">The lock object</span></span>  
 <span data-ttu-id="ce991-141">La classe di monitoraggio costituito `static` (in c#) o `Shared` (in Visual Basic) metodi che operano su un oggetto che controlla l'accesso alla sezione critica.</span><span class="sxs-lookup"><span data-stu-id="ce991-141">The Monitor class consists of `static` (in C#) or  `Shared` (in Visual Basic) methods that operate on an object that controls access to the critical section.</span></span>  <span data-ttu-id="ce991-142">Per ogni oggetto sincronizzato, vengono mantenute le informazioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="ce991-142">The following information is maintained for each synchronized object:</span></span>  
  
-   <span data-ttu-id="ce991-143">Un riferimento al thread che attualmente contiene il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-143">A reference to the thread that currently holds the lock.</span></span>  
  
-   <span data-ttu-id="ce991-144">Un riferimento a una coda pronto, che contiene i thread pronti ottenere il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-144">A reference to a ready queue, which contains the threads that are ready to obtain the lock.</span></span>  
  
-   <span data-ttu-id="ce991-145">Un riferimento a una coda in attesa, che contiene i thread in attesa per la notifica di una modifica nello stato dell'oggetto bloccato.</span><span class="sxs-lookup"><span data-stu-id="ce991-145">A reference to a waiting queue, which contains the threads that are waiting for notification of a change in the state of the locked object.</span></span>  
  
 <span data-ttu-id="ce991-146"><xref:System.Threading.Monitor> blocca gli oggetti, ovvero i tipi di riferimento, non i tipi di valore.</span><span class="sxs-lookup"><span data-stu-id="ce991-146"><xref:System.Threading.Monitor> locks objects (that is, reference types), not value types.</span></span> <span data-ttu-id="ce991-147">Anche se è possibile passare un tipo di valore a <xref:System.Threading.Monitor.Enter%2A> e <xref:System.Threading.Monitor.Exit%2A>, ogni valore viene sottoposto a boxing separatamente per ogni chiamata.</span><span class="sxs-lookup"><span data-stu-id="ce991-147">While you can pass a value type to <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, it is boxed separately for each call.</span></span> <span data-ttu-id="ce991-148">Poiché ogni chiamata crea un oggetto separato, <xref:System.Threading.Monitor.Enter%2A> non si blocca mai e non sincronizza realmente il codice che dovrebbe proteggere.</span><span class="sxs-lookup"><span data-stu-id="ce991-148">Since each call creates a separate object, <xref:System.Threading.Monitor.Enter%2A> never blocks, and the code it is supposedly protecting is not really synchronized.</span></span> <span data-ttu-id="ce991-149">L'oggetto passato a <xref:System.Threading.Monitor.Exit%2A>, inoltre, è diverso dall'oggetto passato a <xref:System.Threading.Monitor.Enter%2A>, quindi <xref:System.Threading.Monitor> genera un'eccezione <xref:System.Threading.SynchronizationLockException> con il messaggio "Il metodo di sincronizzazione dell'oggetto è stato chiamato da un blocco di codice non sincronizzato".</span><span class="sxs-lookup"><span data-stu-id="ce991-149">In addition, the object passed to <xref:System.Threading.Monitor.Exit%2A> is different from the object passed to <xref:System.Threading.Monitor.Enter%2A>, so <xref:System.Threading.Monitor> throws <xref:System.Threading.SynchronizationLockException> exception with the message "Object synchronization method was called from an unsynchronized block of code."</span></span>  
  
 <span data-ttu-id="ce991-150">L'esempio seguente illustra questo problema.</span><span class="sxs-lookup"><span data-stu-id="ce991-150">The following example illustrates this problem.</span></span> <span data-ttu-id="ce991-151">Avvia dieci attività, ognuna delle quali rimane semplicemente inattiva per 250 millisecondi.</span><span class="sxs-lookup"><span data-stu-id="ce991-151">It launches ten tasks, each of which just sleeps for 250 milliseconds.</span></span> <span data-ttu-id="ce991-152">Ogni attività aggiorna quindi una variabile del contatore, `nTasks`, in modo da contare il numero di attività effettivamente avviate ed eseguite.</span><span class="sxs-lookup"><span data-stu-id="ce991-152">Each task then updates a counter variable, `nTasks`, which is intended to count the number of tasks that actually launched and executed.</span></span> <span data-ttu-id="ce991-153">Poiché `nTasks` è una variabile globale che può essere aggiornata da più attività contemporaneamente, viene usato un oggetto monitor per proteggerla dalla modifica simultanea da parte di più attività.</span><span class="sxs-lookup"><span data-stu-id="ce991-153">Because `nTasks` is a global variable that can be updated by multiple tasks simultaneously, a monitor is used to protect it from simultaneous modification by multiple tasks.</span></span> <span data-ttu-id="ce991-154">Tuttavia, come illustrato dall'output dell'esempio, ogni attività genera un'eccezione <xref:System.Threading.SynchronizationLockException>.</span><span class="sxs-lookup"><span data-stu-id="ce991-154">However, as the output from the example shows, each of the tasks throws a <xref:System.Threading.SynchronizationLockException> exception.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#2](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badlock1.cs#2)]
 [!code-vb[Conceptual.Monitors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badlock1.vb#2)]  
  
 <span data-ttu-id="ce991-155">Ogni attività genera un'eccezione <xref:System.Threading.SynchronizationLockException>, poiché la variabile `nTasks` viene sottoposta a boxing prima della chiamata al metodo <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> in ogni attività.</span><span class="sxs-lookup"><span data-stu-id="ce991-155">Each task throws a <xref:System.Threading.SynchronizationLockException> exception because the `nTasks` variable is boxed before the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method in each task.</span></span> <span data-ttu-id="ce991-156">In altri termini, una variabile separata, indipendente dalle altre, viene passata a ogni chiamata al metodo.</span><span class="sxs-lookup"><span data-stu-id="ce991-156">In other words, each method call is passed a separate variable that is independent of the others.</span></span> <span data-ttu-id="ce991-157">`nTasks` viene sottoposto di nuovo a boxing nella chiamata al metodo <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="ce991-157">`nTasks` is boxed again in the call to the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="ce991-158">Ancora una volta, ciò crea dieci nuove variabili di tipo boxed, indipendenti le une dalle altre, `nTasks` e le dieci variabili di tipo boxed create nella chiamata al metodo <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="ce991-158">Once again, this creates ten new boxed variables, which are independent of each other, `nTasks`, and the ten boxed variables created in the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="ce991-159">L'eccezione viene generata, quindi, poiché il codice sta tentando di rilasciare un blocco su una variabile appena creata non bloccata in precedenza.</span><span class="sxs-lookup"><span data-stu-id="ce991-159">The exception is thrown, then, because our code is attempting to release a lock on a newly created variable that was not previously locked.</span></span>  
  
 <span data-ttu-id="ce991-160">Anche se è possibile sottoporre a boxing una variabile di tipo valore prima di chiamare <xref:System.Threading.Monitor.Enter%2A> e <xref:System.Threading.Monitor.Exit%2A>, come illustrato nell'esempio seguente, e passare lo stesso oggetto di tipo boxed a entrambi i metodi, ciò non presenta alcun vantaggio.</span><span class="sxs-lookup"><span data-stu-id="ce991-160">Although you can box a value type variable before calling <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, as shown in the following example, and pass the same boxed object to both methods, there is no advantage to doing this.</span></span> <span data-ttu-id="ce991-161">Le modifiche alla variabile di tipo unboxed non sono riflesse nella copia di tipo boxed e non è possibile modificare il valore della copia di tipo boxed.</span><span class="sxs-lookup"><span data-stu-id="ce991-161">Changes to the unboxed variable are not reflected in the boxed copy, and there is no way to change the value of the boxed copy.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badbox1.cs#3)]
 [!code-vb[Conceptual.Monitors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badbox1.vb#3)]  
  
 <span data-ttu-id="ce991-162">Quando si seleziona un oggetto su cui eseguire la sincronizzazione, è necessario bloccare solo sugli oggetti privati o interni.</span><span class="sxs-lookup"><span data-stu-id="ce991-162">When selecting an object on which to synchronize, you should lock only on private or internal objects.</span></span> <span data-ttu-id="ce991-163">Il blocco degli oggetti esterni può provocare deadlock, in quanto codice correlato può scegliere gli stessi oggetti al blocco per scopi diversi.</span><span class="sxs-lookup"><span data-stu-id="ce991-163">Locking on external objects might result in deadlocks, because unrelated code could choose the same objects to lock on for different purposes.</span></span>  
  
 <span data-ttu-id="ce991-164">Si noti che è possibile sincronizzare in un oggetto in più domini applicazione se l'oggetto usato per il blocco deriva da <xref:System.MarshalByRefObject>.</span><span class="sxs-lookup"><span data-stu-id="ce991-164">Note that you can synchronize on an object in multiple application domains if the object used for the lock derives from <xref:System.MarshalByRefObject>.</span></span>  
  
<a name="CriticalSection"></a>   
## <a name="the-critical-section"></a><span data-ttu-id="ce991-165">La sezione critica</span><span class="sxs-lookup"><span data-stu-id="ce991-165">The critical section</span></span>  
 <span data-ttu-id="ce991-166">Usare la <xref:System.Threading.Monitor.Enter%2A> e <xref:System.Threading.Monitor.Exit%2A> metodi per contrassegnare l'inizio e alla fine di una sezione critica.</span><span class="sxs-lookup"><span data-stu-id="ce991-166">Use the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods to mark the beginning and end of a critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ce991-167">La funzionalità fornita dal <xref:System.Threading.Monitor.Enter%2A> e <xref:System.Threading.Monitor.Exit%2A> metodi è identico a quello fornito dal [blocco](~/docs/csharp/language-reference/keywords/lock-statement.md) istruzione in c# e il [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) istruzione in Visual Basic, con la differenza che la a capo automatico di costrutti di linguaggio il <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> overload del metodo e il <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> metodo in un `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="ce991-167">The functionality provided by the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods is identical to that provided by the [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement in C# and the [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement in Visual Basic, except that the language constructs wrap the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> method overload and the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method in a `try`…`finally`</span></span> <span data-ttu-id="ce991-168">blocco da verificare che il monitoraggio venga rilasciato.</span><span class="sxs-lookup"><span data-stu-id="ce991-168">block to ensure that the monitor is released.</span></span>  
  
 <span data-ttu-id="ce991-169">Se la sezione critica è un set di istruzioni contigue, quindi il blocco acquisito dal <xref:System.Threading.Monitor.Enter%2A> metodo garantisce che solo un singolo thread possa eseguire il codice incluso nell'oggetto bloccato.</span><span class="sxs-lookup"><span data-stu-id="ce991-169">If the critical section is a set of contiguous instructions, then the lock acquired by the <xref:System.Threading.Monitor.Enter%2A> method guarantees that only a single thread can execute the enclosed code with the locked object.</span></span> <span data-ttu-id="ce991-170">In questo caso, è consigliabile inserire il codice in un `try` bloccare e posizionare la chiamata ai <xref:System.Threading.Monitor.Exit%2A> metodo in un `finally` blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-170">In this case, we recommend that you place that code in a `try` block and place the call to the <xref:System.Threading.Monitor.Exit%2A> method in a `finally` block.</span></span> <span data-ttu-id="ce991-171">Ciò assicura che il blocco venga rilasciato anche se si verifica un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="ce991-171">This ensures that the lock is released even if an exception occurs.</span></span> <span data-ttu-id="ce991-172">Il frammento di codice seguente illustra il modello.</span><span class="sxs-lookup"><span data-stu-id="ce991-172">The following code fragment illustrates this pattern.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#2)]
 [!code-vb[System.Threading.Monitor.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#2)]  
  
 <span data-ttu-id="ce991-173">Questa funzionalità viene in genere utilizzata per sincronizzare l'accesso a un valore statico o un metodo di istanza di una classe.</span><span class="sxs-lookup"><span data-stu-id="ce991-173">This facility is typically used to synchronize access to a static or instance method of a class.</span></span>  
  
 <span data-ttu-id="ce991-174">Se una sezione critica si estende in un intero metodo, è possano utilizzare le funzionalità di blocco inserendo il <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> sul metodo e specificare il <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> valore nel costruttore della <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="ce991-174">If a critical section spans an entire method, the locking facility can be achieved by placing the <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> on the method, and specifying the <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> value in the constructor of <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ce991-175">Quando si usa questo attributo, il <xref:System.Threading.Monitor.Enter%2A> e <xref:System.Threading.Monitor.Exit%2A> chiamate al metodo non sono necessari.</span><span class="sxs-lookup"><span data-stu-id="ce991-175">When you use this attribute, the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> method calls are not needed.</span></span> <span data-ttu-id="ce991-176">Il frammento di codice seguente illustra questo modello:</span><span class="sxs-lookup"><span data-stu-id="ce991-176">The following code fragment illustrates this pattern:</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#3)]
 [!code-vb[System.Threading.Monitor.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#3)]  
  
 <span data-ttu-id="ce991-177">Si noti che l'attributo fa sì che il thread corrente contenere il blocco fino a quando il metodo restituisca il controllo. Se il blocco può essere rilasciato prima, usare il <xref:System.Threading.Monitor> classe c# [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) istruzione o Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) istruzione all'interno del metodo invece l'attributo.</span><span class="sxs-lookup"><span data-stu-id="ce991-177">Note that the attribute causes the current thread to hold the lock until the method returns; if the lock can be released sooner, use the <xref:System.Threading.Monitor> class, the C# [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement, or the Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement inside of the method instead of the attribute.</span></span>  
  
 <span data-ttu-id="ce991-178">Sebbene sia possibile per il <xref:System.Threading.Monitor.Enter%2A> e <xref:System.Threading.Monitor.Exit%2A> istruzioni di blocco e rilasciare un determinato oggetto oltrepassi membro e/o limiti di classe, questa pratica non è consigliata.</span><span class="sxs-lookup"><span data-stu-id="ce991-178">While it is possible for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> statements that lock and release a given object to cross member or class boundaries or both, this practice is not recommended.</span></span>  
  
<a name="Pulse"></a>   
## <a name="pulse-pulseall-and-wait"></a><span data-ttu-id="ce991-179">Wait, Pulse e PulseAll</span><span class="sxs-lookup"><span data-stu-id="ce991-179">Pulse, PulseAll, and Wait</span></span>  
 <span data-ttu-id="ce991-180">Dopo che un thread è proprietario del blocco e ha immesso nella sezione critica che protegge il blocco, è possibile chiamare il <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, e <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> metodi.</span><span class="sxs-lookup"><span data-stu-id="ce991-180">Once a thread owns the lock and has entered the critical section that the lock protects, it can call the <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="ce991-181">Quando il thread che contiene le chiamate di blocco <xref:System.Threading.Monitor.Wait%2A>, il blocco viene rilasciato e il thread viene aggiunto alla coda di attesa dell'oggetto sincronizzato.</span><span class="sxs-lookup"><span data-stu-id="ce991-181">When the thread that holds the lock calls <xref:System.Threading.Monitor.Wait%2A>, the lock is released and the thread is added to the waiting queue of the synchronized object.</span></span> <span data-ttu-id="ce991-182">Il primo thread nella coda degli elementi pronti, se presente, acquisisce il blocco ed entra nella sezione critica.</span><span class="sxs-lookup"><span data-stu-id="ce991-182">The first thread in the ready queue, if any, acquires the lock and enters the critical section.</span></span> <span data-ttu-id="ce991-183">Il thread viene spostato dalla coda in attesa nella coda pronta quando entrambi i <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> (per essere spostato, il thread deve essere all'inizio della coda di attesa) o il <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> viene chiamato dal thread che contiene il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-183">The thread is moved from the waiting queue to the ready queue when either the <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> (to be moved, the thread must be at the head of the waiting queue) or the <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> method is called by the thread that holds the lock.</span></span> <span data-ttu-id="ce991-184">Il <xref:System.Threading.Monitor.Wait%2A> metodo viene restituito quando il thread chiamante riacquisisce il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-184">The <xref:System.Threading.Monitor.Wait%2A> method returns when the calling thread reacquires the lock.</span></span>  
  
 <span data-ttu-id="ce991-185">Quando il thread che contiene le chiamate di blocco <xref:System.Threading.Monitor.Pulse%2A>, il thread all'inizio della coda di attesa viene spostato nella coda degli elementi pronti.</span><span class="sxs-lookup"><span data-stu-id="ce991-185">When the thread that holds the lock calls <xref:System.Threading.Monitor.Pulse%2A>, the thread at the head of the waiting queue is moved to the ready queue.</span></span> <span data-ttu-id="ce991-186">La chiamata al <xref:System.Threading.Monitor.PulseAll%2A> metodo sposta tutti i thread dalla coda in attesa nella coda pronta.</span><span class="sxs-lookup"><span data-stu-id="ce991-186">The call to the <xref:System.Threading.Monitor.PulseAll%2A> method moves all the threads from the waiting queue to the ready queue.</span></span>  
  
<a name="WaitHandles"></a>   
## <a name="monitors-and-wait-handles"></a><span data-ttu-id="ce991-187">Monitoraggi e gli handle di attesa</span><span class="sxs-lookup"><span data-stu-id="ce991-187">Monitors and wait handles</span></span>  
 <span data-ttu-id="ce991-188">È importante notare la distinzione tra l'utilizzo dei <xref:System.Threading.Monitor> classi e <xref:System.Threading.WaitHandle> oggetti.</span><span class="sxs-lookup"><span data-stu-id="ce991-188">It is important to note the distinction between the use of the <xref:System.Threading.Monitor> class and <xref:System.Threading.WaitHandle> objects.</span></span>  
  
-   <span data-ttu-id="ce991-189">Il <xref:System.Threading.Monitor> classe è semplicemente gestiti e completamente portabili e potrebbe essere più efficiente in termini di requisiti di risorse del sistema operativo.</span><span class="sxs-lookup"><span data-stu-id="ce991-189">The <xref:System.Threading.Monitor> class is purely managed, fully portable, and might be more efficient in terms of operating-system resource requirements.</span></span>  
  
-   <span data-ttu-id="ce991-190">Gli oggetti <xref:System.Threading.WaitHandle> rappresentano oggetti awaitable del sistema operativo, sono utili per la sincronizzazione tra codice gestito e non gestito ed espongono alcune funzionalità avanzate del sistema operativo, ad esempio la capacità di rimanere in attesa di più oggetti contemporaneamente.</span><span class="sxs-lookup"><span data-stu-id="ce991-190"><xref:System.Threading.WaitHandle> objects represent operating-system waitable objects, are useful for synchronizing between managed and unmanaged code, and expose some advanced operating-system features like the ability to wait on many objects at once.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ce991-191">L'esempio seguente usa il <xref:System.Threading.Monitor> classe per sincronizzare l'accesso a una singola istanza di un generatore di numeri casuali rappresentato dal <xref:System.Random> classe.</span><span class="sxs-lookup"><span data-stu-id="ce991-191">The following example uses the <xref:System.Threading.Monitor> class to synchronize access to a single instance of a random number generator represented by the <xref:System.Random> class.</span></span> <span data-ttu-id="ce991-192">L'esempio crea dieci attività, ognuno dei quali esegue in modo asincrono in un pool di thread.</span><span class="sxs-lookup"><span data-stu-id="ce991-192">The example creates ten tasks, each of which executes asynchronously on a thread pool thread.</span></span> <span data-ttu-id="ce991-193">Ogni attività genera numeri casuali 10.000, viene calcolata la media e aggiorna due variabili a livello di routine che gestiscono un totale parziale del numero di numeri casuali generati e la somma.</span><span class="sxs-lookup"><span data-stu-id="ce991-193">Each task generates 10,000 random numbers, calculates their average, and updates two procedure-level variables that maintain a running total of the number of random numbers generated and their sum.</span></span> <span data-ttu-id="ce991-194">Dopo aver eseguito tutte le attività, questi due valori vengono quindi utilizzati per calcolare la media complessiva.</span><span class="sxs-lookup"><span data-stu-id="ce991-194">After all tasks have executed, these two values are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Monitor.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/example1.vb#1)]  
  
 <span data-ttu-id="ce991-195">Poiché è possibile accedervi da qualsiasi attività in esecuzione in un pool di thread, accedere alle variabili `total` e `n` devono anche essere sincronizzati.</span><span class="sxs-lookup"><span data-stu-id="ce991-195">Because they can be accessed from any task running on a thread pool thread, access to the variables `total` and `n` must also be synchronized.</span></span> <span data-ttu-id="ce991-196">Il <xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> metodo viene utilizzato per questo scopo.</span><span class="sxs-lookup"><span data-stu-id="ce991-196">The <xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> method is used for this purpose.</span></span>  
  
 <span data-ttu-id="ce991-197">L'esempio seguente illustra l'uso combinato del <xref:System.Threading.Monitor> classe (implementata con il `lock` o `SyncLock` costrutto di linguaggio), il <xref:System.Threading.Interlocked> (classe) e il <xref:System.Threading.AutoResetEvent> classe.</span><span class="sxs-lookup"><span data-stu-id="ce991-197">The following example demonstrates the combined use of the <xref:System.Threading.Monitor> class (implemented with the `lock` or `SyncLock` language construct), the <xref:System.Threading.Interlocked> class, and the <xref:System.Threading.AutoResetEvent> class.</span></span> <span data-ttu-id="ce991-198">Definisce due `internal` (in c#) o `Friend` (in Visual Basic), classi `SyncResource` e `UnSyncResource`, che forniscono rispettivamente l'accesso sincronizzato e a una risorsa.</span><span class="sxs-lookup"><span data-stu-id="ce991-198">It defines two `internal` (in C#) or `Friend` (in Visual Basic) classes, `SyncResource` and `UnSyncResource`, that respectively provide synchronized and unsynchronized access to a resource.</span></span> <span data-ttu-id="ce991-199">Per assicurarsi che nell'esempio viene illustrata la differenza tra l'accesso sincronizzato e (che può essere il caso se ogni chiamata al metodo viene completata rapidamente), il metodo include un ritardo casuale: per i thread la cui <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> proprietà è pari, il chiamate al metodo <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> per introdurre un ritardo di 2000 millisecondi.</span><span class="sxs-lookup"><span data-stu-id="ce991-199">To ensure that the example illustrates the difference between the synchronized and unsynchronized access (which could be the case if each method call completes rapidly), the method includes a random delay: for threads whose <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> property is even, the method calls <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> to introduce a delay of 2,000 milliseconds.</span></span> <span data-ttu-id="ce991-200">Si noti che, in quanto il `SyncResource` classe non è pubblica, nessuna parte del codice client acquisisce un blocco sulla risorsa sincronizzata, la classe interna che richiede il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-200">Note that, because the `SyncResource` class is not public, none of the client code takes a lock on the synchronized resource; the internal class itself takes the lock.</span></span> <span data-ttu-id="ce991-201">Ciò impedisce l'acquisizione di un blocco su un oggetto pubblico da parte di codice dannoso.</span><span class="sxs-lookup"><span data-stu-id="ce991-201">This prevents malicious code from taking a lock on a public object.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/source.cs#1)]
 [!code-vb[Conceptual.Monitors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/source.vb#1)]  
  
 <span data-ttu-id="ce991-202">L'esempio definisce una variabile, `numOps`, che definisce il numero di thread che proverà ad accedere alla risorsa.</span><span class="sxs-lookup"><span data-stu-id="ce991-202">The example defines a variable, `numOps`, that defines the number of threads that will attempt to access the resource.</span></span> <span data-ttu-id="ce991-203">Il thread dell'applicazione chiama il <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> metodo per sincronizzato e non sincronizzato accedere a cinque volte ognuna.</span><span class="sxs-lookup"><span data-stu-id="ce991-203">The application thread calls the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method for synchronized and unsynchronized access five times each.</span></span> <span data-ttu-id="ce991-204">Il <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> metodo ha un solo parametro, un delegato che non accetta parametri e non restituisce alcun valore.</span><span class="sxs-lookup"><span data-stu-id="ce991-204">The <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method has a single parameter, a delegate that accepts no parameters and returns no value.</span></span> <span data-ttu-id="ce991-205">Per l'accesso sincronizzato, richiama il `SyncUpdateResource` metodo; per l'accesso non sincronizzato, richiama il `UnSyncUpdateResource` (metodo).</span><span class="sxs-lookup"><span data-stu-id="ce991-205">For synchronized access, it invokes the `SyncUpdateResource` method; for unsynchronized access, it invokes the `UnSyncUpdateResource` method.</span></span> <span data-ttu-id="ce991-206">Dopo ogni set di chiamate al metodo, il thread dell'applicazione chiama il [AutoResetEvent. WaitOne](xref:System.Threading.WaitHandle.WaitOne*) metodo in modo che si blocca fino a quando il <xref:System.Threading.AutoResetEvent> istanza viene segnalata.</span><span class="sxs-lookup"><span data-stu-id="ce991-206">After each set of method calls, the application thread calls the [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) method so that it blocks until the <xref:System.Threading.AutoResetEvent> instance is signaled.</span></span>  
  
 <span data-ttu-id="ce991-207">Ogni chiamata ai `SyncUpdateResource` metodo chiama l'oggetto interno `SyncResource.Access` (metodo) e quindi chiama il <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> metodo per decrementare il `numOps` contatore.</span><span class="sxs-lookup"><span data-stu-id="ce991-207">Each call to the `SyncUpdateResource` method calls the internal `SyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="ce991-208">Il <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> metodo viene utilizzato da decrementare il contatore, perché in caso contrario, è possibile essere certi che un secondo thread acceda al valore prima un primo thread decrementato valore è stato archiviato nella variabile.</span><span class="sxs-lookup"><span data-stu-id="ce991-208">The <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter, because otherwise you cannot be certain that a second thread will access the value before a first thread's decremented value has been stored in the variable.</span></span> <span data-ttu-id="ce991-209">Quando l'ultimo sincronizzato decrementa di thread di lavoro il contatore a zero, che indica che tutti i thread sincronizzati hanno completato l'accesso alla risorsa, il `SyncUpdateResource` chiamate al metodo il <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> metodo, che segnala al thread principale di continuare esecuzione.</span><span class="sxs-lookup"><span data-stu-id="ce991-209">When the last synchronized worker thread decrements the counter to zero, indicating that all synchronized threads have completed accessing the resource, the `SyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="ce991-210">Ogni chiamata ai `UnSyncUpdateResource` metodo chiama l'oggetto interno `UnSyncResource.Access` (metodo) e quindi chiama il <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> metodo per decrementare il `numOps` contatore.</span><span class="sxs-lookup"><span data-stu-id="ce991-210">Each call to the `UnSyncUpdateResource` method calls the internal `UnSyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="ce991-211">Ancora una volta, il <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> metodo viene utilizzato da decrementare il contatore per garantire che un secondo thread acceda al valore prima valore decrementato di un primo thread sia stato assegnato alla variabile.</span><span class="sxs-lookup"><span data-stu-id="ce991-211">Once again, the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter to ensure that a second thread does not access the value before a first thread's decremented value has been assigned to the variable.</span></span> <span data-ttu-id="ce991-212">Quando l'ultimo non sincronizzato decrementa di thread di lavoro il contatore a zero, che indica che non più thread non sincronizzati dovranno accedere alla risorsa, il `UnSyncUpdateResource` chiamate al metodo il <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> metodo, che segnala al thread principale di continuare l'esecuzione .</span><span class="sxs-lookup"><span data-stu-id="ce991-212">When the last unsynchronized worker thread decrements the counter to zero, indicating that no more unsynchronized threads need to access the resource, the `UnSyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="ce991-213">Come mostra il risultato dell'esempio, l'accesso sincronizzato garantisce che il thread di chiamata esca dalla risorsa protetta prima che un altro thread possa accedervi; ogni thread attende il suo predecessore.</span><span class="sxs-lookup"><span data-stu-id="ce991-213">As the output from  the example shows, synchronized access ensures that the calling thread exits the protected resource before another thread can access it; each thread waits on its predecessor.</span></span> <span data-ttu-id="ce991-214">D'altra parte, senza il blocco, il `UnSyncResource.Access` viene chiamato nell'ordine in cui i thread lo raggiungono.</span><span class="sxs-lookup"><span data-stu-id="ce991-214">On the other hand, without the lock, the `UnSyncResource.Access` method is called in the order in which threads reach it.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="ce991-215">Questo tipo è thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ce991-215">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.Thread" />
    <related type="Article" href="~/docs/standard/threading/index.md">
      <span data-ttu-id="ce991-216">Threading gestito</span>
      <span class="sxs-lookup">
        <span data-stu-id="ce991-216">Managed Threading</span>
      </span>
    </related>
    <related type="Article" href="~/docs/standard/threading/threading-objects-and-features.md">
      <span data-ttu-id="ce991-217">Oggetti e funzionalità del threading</span>
      <span class="sxs-lookup">
        <span data-stu-id="ce991-217">Threading Objects and Features</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Enter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ce991-218">Acquisisce un blocco esclusivo su un oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-218">Acquires an exclusive lock on a specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Enter : obj -&gt; unit" Usage="System.Threading.Monitor.Enter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="ce991-219">Oggetto sui cui acquisire il blocco del monitoraggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-219">The object on which to acquire the monitor lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ce991-220">Acquisisce un blocco esclusivo sull'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-220">Acquires an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce991-221">Uso `Enter` per acquisire il <xref:System.Threading.Monitor> nell'oggetto passato come parametro.</span><span class="sxs-lookup"><span data-stu-id="ce991-221">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the parameter.</span></span> <span data-ttu-id="ce991-222">Se un altro thread ha eseguito un' `Enter` sull'oggetto, ma non è ancora eseguita la corrispondente <xref:System.Threading.Monitor.Exit%2A>, bloccherà il thread corrente finché l'altro thread rilascia l'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-222">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="ce991-223">È consentito per il thread stesso richiamare `Enter` più volte senza causarne; tuttavia, un numero uguale di `Exit` chiamate devono essere richiamate prima che sblocca altri thread in attesa sull'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-223">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="ce991-224">Usare <xref:System.Threading.Monitor> per bloccare gli oggetti (ovvero i tipi di riferimento), non i tipi di valore.</span><span class="sxs-lookup"><span data-stu-id="ce991-224">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="ce991-225">Quando si passa una variabile di tipo valore a `Enter`, è di tipo boxed come oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-225">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="ce991-226">Se si passa la stessa variabile `Enter` anche in questo caso è di tipo boxed come oggetto separato e non blocca il thread.</span><span class="sxs-lookup"><span data-stu-id="ce991-226">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="ce991-227">In questo caso, il codice che `Monitor` è in realtà non è protetta.</span><span class="sxs-lookup"><span data-stu-id="ce991-227">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="ce991-228">Inoltre, quando si passa la variabile `Exit`, viene creato anche un altro oggetto separato.</span><span class="sxs-lookup"><span data-stu-id="ce991-228">Furthermore, when you pass the variable to `Exit`, still another separate object is created.</span></span> <span data-ttu-id="ce991-229">Poiché l'oggetto passato a `Exit` è diverso dall'oggetto passato a `Enter`, `Monitor` genera un'eccezione <xref:System.Threading.SynchronizationLockException>.</span><span class="sxs-lookup"><span data-stu-id="ce991-229">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="ce991-230">Per altre informazioni, vedere l'argomento concettuale [monitoraggi](xref:System.Threading.Monitor).</span><span class="sxs-lookup"><span data-stu-id="ce991-230">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="ce991-231"><xref:System.Threading.Thread.Interrupt%2A> grado di interrompere i thread in attesa di immettere un `Monitor` su un oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-231"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="ce991-232">Oggetto <xref:System.Threading.ThreadInterruptedException> verrà generata.</span><span class="sxs-lookup"><span data-stu-id="ce991-232">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
 <span data-ttu-id="ce991-233">Utilizzare il linguaggio c# `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="ce991-233">Use a C# `try`…`finally`</span></span> <span data-ttu-id="ce991-234">blocco (`Try`...`Finally`</span><span class="sxs-lookup"><span data-stu-id="ce991-234">block (`Try`…`Finally`</span></span> <span data-ttu-id="ce991-235">in Visual Basic) per assicurarsi di rilasciare il monitor oppure utilizzare il linguaggio c# `lock` istruzione (`SyncLock` istruzione in Visual Basic), che esegue il wrapping il <xref:System.Threading.Monitor.Enter%2A> e <xref:System.Threading.Monitor.Exit%2A> metodi in un `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="ce991-235">in Visual Basic) to ensure that you release the monitor, or use the C# `lock` statement (`SyncLock` statement in Visual Basic), which wraps the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods in a `try`…`finally`</span></span> <span data-ttu-id="ce991-236">blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-236">block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ce991-237">Nell'esempio seguente viene illustrato l'utilizzo del metodo `Enter`.</span><span class="sxs-lookup"><span data-stu-id="ce991-237">The following example demonstrates how to use the `Enter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ce991-238">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-238">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="ce991-239">Threading gestito</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-239">Managed Threading</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member Enter : obj *  -&gt; unit" Usage="System.Threading.Monitor.Enter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="ce991-240">Oggetto per il quale attendere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-240">The object on which to wait.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="ce991-241">Risultato del tentativo di acquisizione del blocco passato dal riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-241">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="ce991-242">L'input deve essere <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-242">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ce991-243">L'output è <see langword="true" /> se il blocco viene acquisito; in caso contrario, l'output è <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-243">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ce991-244">L'output viene impostato anche se si verifica un'eccezione durante il tentativo di acquisire il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-244">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
          <span data-ttu-id="ce991-245">Nota   Se non si verifica alcuna eccezione, l'output di questo metodo è sempre <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-245">Note   If no exception occurs, the output of this method is always <see langword="true" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ce991-246">Acquisisce un blocco esclusivo sull'oggetto specificato e imposta atomicamente un valore che indica se il blocco è stato ottenuto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-246">Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce991-247">Uso `Enter` per acquisire le <xref:System.Threading.Monitor> nell'oggetto passato come il `obj` parametro.</span><span class="sxs-lookup"><span data-stu-id="ce991-247">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the `obj` parameter.</span></span> <span data-ttu-id="ce991-248">Se un altro thread ha eseguito un' `Enter` sull'oggetto, ma non è ancora eseguita la corrispondente <xref:System.Threading.Monitor.Exit%2A>, bloccherà il thread corrente finché l'altro thread rilascia l'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-248">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="ce991-249">È consentito per il thread stesso richiamare `Enter` più volte senza causarne; tuttavia, un numero uguale di `Exit` chiamate devono essere richiamate prima che sblocca altri thread in attesa sull'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-249">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="ce991-250">Se il blocco non è stato applicato perché è stata generata un'eccezione, la variabile specificata per il `lockTaken` parametro è `false` dopo che questo metodo termina.</span><span class="sxs-lookup"><span data-stu-id="ce991-250">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="ce991-251">In questo modo il programma determinare, in tutti i casi, se è necessario rilasciare il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-251">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span> <span data-ttu-id="ce991-252">Se questo metodo termina senza generare un'eccezione, la variabile specificata per il `lockTaken` parametro è sempre `true`, e non è necessario per eseguire il test.</span><span class="sxs-lookup"><span data-stu-id="ce991-252">If this method returns without throwing an exception, the variable specified for the `lockTaken` parameter is always `true`, and there is no need to test it.</span></span>  
  
 <span data-ttu-id="ce991-253">Usare <xref:System.Threading.Monitor> per bloccare gli oggetti (ovvero i tipi di riferimento), non i tipi di valore.</span><span class="sxs-lookup"><span data-stu-id="ce991-253">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="ce991-254">Quando si passa una variabile di tipo valore a `Enter`, è di tipo boxed come oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-254">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="ce991-255">Se si passa la stessa variabile `Enter` anche in questo caso è di tipo boxed come oggetto separato e non blocca il thread.</span><span class="sxs-lookup"><span data-stu-id="ce991-255">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="ce991-256">In questo caso, il codice che `Monitor` è in realtà non è protetta.</span><span class="sxs-lookup"><span data-stu-id="ce991-256">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="ce991-257">Inoltre, quando si passa la variabile `Exit`, viene creato un altro oggetto separato.</span><span class="sxs-lookup"><span data-stu-id="ce991-257">Furthermore, when you pass the variable to `Exit`, another separate object is created.</span></span> <span data-ttu-id="ce991-258">Poiché l'oggetto passato a `Exit` è diverso dall'oggetto passato a `Enter`, `Monitor` genera un'eccezione <xref:System.Threading.SynchronizationLockException>.</span><span class="sxs-lookup"><span data-stu-id="ce991-258">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="ce991-259">Per altre informazioni, vedere l'argomento concettuale [monitoraggi](xref:System.Threading.Monitor).</span><span class="sxs-lookup"><span data-stu-id="ce991-259">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="ce991-260"><xref:System.Threading.Thread.Interrupt%2A> grado di interrompere i thread in attesa di immettere un `Monitor` su un oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-260"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="ce991-261">Oggetto <xref:System.Threading.ThreadInterruptedException> verrà generata.</span><span class="sxs-lookup"><span data-stu-id="ce991-261">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ce991-262">Il codice seguente illustra il modello di base per l'uso di <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> overload del metodo.</span><span class="sxs-lookup"><span data-stu-id="ce991-262">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="ce991-263">Questo overload imposta sempre il valore della variabile che viene passato per il `ref` parametro (`ByRef` in Visual Basic) `lockTaken`, anche se il metodo genera un'eccezione, pertanto il valore della variabile è un metodo efficace per verificare se il blocco deve essere rilasciato.</span><span class="sxs-lookup"><span data-stu-id="ce991-263">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#2)]
 [!code-vb[System.Threading.Monitor.Enter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ce991-264">L'input per <paramref name="lockTaken" /> è <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-264">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ce991-265">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-265">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Exit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Exit : obj -&gt; unit" Usage="System.Threading.Monitor.Exit obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="ce991-266">Oggetto sul quale rilasciare il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-266">The object on which to release the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ce991-267">Viene rilasciato un blocco esclusivo sull'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-267">Releases an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce991-268">Il thread chiamante deve essere proprietaria del blocco nel `obj` parametro.</span><span class="sxs-lookup"><span data-stu-id="ce991-268">The calling thread must own the lock on the `obj` parameter.</span></span> <span data-ttu-id="ce991-269">Se il thread chiamante possiede il blocco sull'oggetto specificato e ha apportato un numero uguale di `Exit` e <xref:System.Threading.Monitor.Enter%2A> chiama il metodo per l'oggetto, il blocco viene rilasciato.</span><span class="sxs-lookup"><span data-stu-id="ce991-269">If the calling thread owns the lock on the specified object, and has made an equal number of `Exit` and <xref:System.Threading.Monitor.Enter%2A> calls for the object, then the lock is released.</span></span> <span data-ttu-id="ce991-270">Se il thread chiamante non ha richiamato `Exit` tante volte quante `Enter`, il blocco non viene rilasciato.</span><span class="sxs-lookup"><span data-stu-id="ce991-270">If the calling thread has not invoked `Exit` as many times as `Enter`, the lock is not released.</span></span>  
  
 <span data-ttu-id="ce991-271">Se il blocco viene rilasciato e di altri thread è nella coda degli elementi pronti per l'oggetto, uno dei thread acquisisce il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-271">If the lock is released and other threads are in the ready queue for the object, one of the threads acquires the lock.</span></span> <span data-ttu-id="ce991-272">Se altri thread è in coda in attesa di acquisire il blocco, non vengono automaticamente spostati nella coda pronti quando chiama il proprietario del blocco `Exit`.</span><span class="sxs-lookup"><span data-stu-id="ce991-272">If other threads are in the waiting queue waiting to acquire the lock, they are not automatically moved to the ready queue when the owner of the lock calls `Exit`.</span></span> <span data-ttu-id="ce991-273">Per spostare uno o più thread in attesa nella coda degli elementi pronti, chiamare <xref:System.Threading.Monitor.Pulse%2A> oppure <xref:System.Threading.Monitor.PulseAll%2A> prima di richiamare `Exit`.</span><span class="sxs-lookup"><span data-stu-id="ce991-273">To move one or more waiting threads into the ready queue, call <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> before invoking `Exit`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ce991-274">Nell'esempio seguente viene illustrato l'utilizzo del metodo `Exit`.</span><span class="sxs-lookup"><span data-stu-id="ce991-274">The following example demonstrates how to use the `Exit` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ce991-275">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-275">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="ce991-276">Il blocco per l'oggetto specificato non è di proprietà del thread corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-276">The current thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="ce991-277">Threading gestito</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-277">Managed Threading</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsEntered">
      <MemberSignature Language="C#" Value="public static bool IsEntered (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEntered(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.IsEntered(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsEntered (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEntered(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member IsEntered : obj -&gt; bool" Usage="System.Threading.Monitor.IsEntered obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="ce991-278">Oggetto da testare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-278">The object to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ce991-279">Determina se il thread corrente specificato contiene il blocco sull'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-279">Determines whether the current thread holds the lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ce991-280">
            <see langword="true" /> se il thread corrente è responsabile del blocco su <paramref name="obj" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-280">
              <see langword="true" /> if the current thread holds the lock on <paramref name="obj" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce991-281">Questo metodo funziona solo per i blocchi acquisiti usando i metodi del <xref:System.Threading.Monitor> classe oppure usando il codice c# `lock` istruzione o Visual Basic `SyncLock` istruzione in cui vengono implementate con <xref:System.Threading.Monitor>.</span><span class="sxs-lookup"><span data-stu-id="ce991-281">This method works only for locks that are acquired by using the methods of the <xref:System.Threading.Monitor> class, or by using the C# `lock` statement or the Visual Basic `SyncLock` statement, which are implemented with <xref:System.Threading.Monitor>.</span></span>  
  
 <span data-ttu-id="ce991-282">Usare questo metodo con strumenti di diagnostica, ad esempio la <xref:System.Diagnostics.Debug.Assert%2A> metodo e il <xref:System.Diagnostics.Contracts.Contract> (classe), eseguire il debug di problemi di blocco che coinvolgono il <xref:System.Threading.Monitor> classe.</span><span class="sxs-lookup"><span data-stu-id="ce991-282">Use this method with diagnostic tools, such as the <xref:System.Diagnostics.Debug.Assert%2A> method and the <xref:System.Diagnostics.Contracts.Contract> class, to debug locking issues that involve the <xref:System.Threading.Monitor> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ce991-283">
            <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-283">
              <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Pulse">
      <MemberSignature Language="C#" Value="public static void Pulse (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Pulse(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Pulse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Pulse (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Pulse(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Pulse : obj -&gt; unit" Usage="System.Threading.Monitor.Pulse obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="ce991-284">Oggetto atteso da un thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-284">The object a thread is waiting for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ce991-285">Notifica a un thread della coda di attesa che lo stato dell'oggetto bloccato è stato modificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-285">Notifies a thread in the waiting queue of a change in the locked object's state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce991-286">Solo il proprietario corrente del blocco può segnalare un oggetto di attesa usando `Pulse`.</span><span class="sxs-lookup"><span data-stu-id="ce991-286">Only the current owner of the lock can signal a waiting object using `Pulse`.</span></span>  
  
 <span data-ttu-id="ce991-287">Questo metodo per segnalare al thread successivo nella riga per il blocco viene richiamato dal thread che possiede attualmente il blocco sull'oggetto specificato.</span><span class="sxs-lookup"><span data-stu-id="ce991-287">The thread that currently owns the lock on the specified object invokes this method to signal the next thread in line for the lock.</span></span> <span data-ttu-id="ce991-288">Dopo aver ricevuto l'impulso, il thread in attesa viene spostato nella coda pronti.</span><span class="sxs-lookup"><span data-stu-id="ce991-288">Upon receiving the pulse, the waiting thread is moved to the ready queue.</span></span> <span data-ttu-id="ce991-289">Quando il thread che ha richiamato `Pulse` rilascia il blocco, il thread successivo nella coda degli elementi pronti (che non è necessariamente il thread che ha ricevuto l'impulso) acquisisce il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-289">When the thread that invoked `Pulse` releases the lock, the next thread in the ready queue (which is not necessarily the thread that was pulsed) acquires the lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ce991-290">Il <xref:System.Threading.Monitor> classe non mantiene lo stato che indica che il <xref:System.Threading.Monitor.Pulse%2A> chiamata al metodo.</span><span class="sxs-lookup"><span data-stu-id="ce991-290">The <xref:System.Threading.Monitor> class does not maintain state indicating that the <xref:System.Threading.Monitor.Pulse%2A> method has been called.</span></span> <span data-ttu-id="ce991-291">Di conseguenza, se si chiama <xref:System.Threading.Monitor.Pulse%2A> quando nessun thread in attesa, il primo thread che chiama <xref:System.Threading.Monitor.Wait%2A> blocchi come se <xref:System.Threading.Monitor.Pulse%2A> non fosse mai stato chiamato.</span><span class="sxs-lookup"><span data-stu-id="ce991-291">Thus, if you call <xref:System.Threading.Monitor.Pulse%2A> when no threads are waiting, the next thread that calls <xref:System.Threading.Monitor.Wait%2A> blocks as if <xref:System.Threading.Monitor.Pulse%2A> had never been called.</span></span> <span data-ttu-id="ce991-292">Se utilizza due thread <xref:System.Threading.Monitor.Pulse%2A> e <xref:System.Threading.Monitor.Wait%2A> per interagire, ciò potrebbe causare un deadlock.</span><span class="sxs-lookup"><span data-stu-id="ce991-292">If two threads are using <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.Wait%2A> to interact, this could result in a deadlock.</span></span> <span data-ttu-id="ce991-293">Ciò si differenzia il comportamento del <xref:System.Threading.AutoResetEvent> classe: se indicano un' <xref:System.Threading.AutoResetEvent> chiamando relativo <xref:System.Threading.EventWaitHandle.Set%2A> metodo e non sono presenti thread in attesa, il <xref:System.Threading.AutoResetEvent> rimane in uno stato segnalato finché un thread chiama <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, o <xref:System.Threading.WaitHandle.WaitAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="ce991-293">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class: If you signal an <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, and there are no threads waiting, the <xref:System.Threading.AutoResetEvent> remains in a signaled state until a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A>.</span></span> <span data-ttu-id="ce991-294">Il <xref:System.Threading.AutoResetEvent> rilascia il thread e restituisce lo stato non segnalato.</span><span class="sxs-lookup"><span data-stu-id="ce991-294">The <xref:System.Threading.AutoResetEvent> releases that thread and returns to the unsignaled state.</span></span>  
  
 <span data-ttu-id="ce991-295">Si noti che un oggetto sincronizzato contiene riferimenti a diversi, tra cui un riferimento al thread che attualmente detiene il blocco, un riferimento alla coda degli elementi pronti, che contiene i thread pronti ottenere il blocco, e un riferimento alla coda di attesa, che contiene i thread in attesa per la notifica di modifica dello stato dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-295">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="ce991-296">Il `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, e <xref:System.Threading.Monitor.Wait%2A> metodi devono essere richiamati all'interno di un blocco di codice sincronizzato.</span><span class="sxs-lookup"><span data-stu-id="ce991-296">The `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="ce991-297">Per segnalare più thread, usare il <xref:System.Threading.Monitor.PulseAll%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="ce991-297">To signal multiple threads, use the <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ce991-298">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-298">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="ce991-299">Il thread chiamante non è il proprietario del blocco per l'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-299">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="ce991-300">Threading gestito</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-300">Managed Threading</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="PulseAll">
      <MemberSignature Language="C#" Value="public static void PulseAll (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PulseAll(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.PulseAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PulseAll (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PulseAll(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member PulseAll : obj -&gt; unit" Usage="System.Threading.Monitor.PulseAll obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="ce991-301">Oggetto che invia l'impulso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-301">The object that sends the pulse.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ce991-302">Notifica a tutti i thread in attesa che lo stato dell'oggetto è stato modificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-302">Notifies all waiting threads of a change in the object's state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce991-303">Questo metodo per segnalare tutti i thread in attesa di acquisire il blocco sull'oggetto viene richiamato dal thread che possiede attualmente il blocco sull'oggetto specificato.</span><span class="sxs-lookup"><span data-stu-id="ce991-303">The thread that currently owns the lock on the specified object invokes this method to signal all threads waiting to acquire the lock on the object.</span></span> <span data-ttu-id="ce991-304">Una volta inviato il segnale, il thread in attesa vengono spostati nella coda pronti.</span><span class="sxs-lookup"><span data-stu-id="ce991-304">After the signal is sent, the waiting threads are moved to the ready queue.</span></span> <span data-ttu-id="ce991-305">Quando il thread che ha richiamato `PulseAll` rilascia il blocco, il thread successivo nella coda degli elementi pronti acquisisce il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-305">When the thread that invoked `PulseAll` releases the lock, the next thread in the ready queue acquires the lock.</span></span>  
  
 <span data-ttu-id="ce991-306">Si noti che un oggetto sincronizzato contiene riferimenti a diversi, tra cui un riferimento al thread che attualmente detiene il blocco, un riferimento alla coda degli elementi pronti, che contiene i thread pronti ottenere il blocco, e un riferimento alla coda di attesa, che contiene i thread in attesa per la notifica di modifica dello stato dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-306">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="ce991-307">Il <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, e <xref:System.Threading.Monitor.Wait%2A> metodi devono essere richiamati all'interno di un blocco di codice sincronizzato.</span><span class="sxs-lookup"><span data-stu-id="ce991-307">The <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="ce991-308">La sezione Osservazioni per il <xref:System.Threading.Monitor.Pulse%2A> metodo spiegano che cosa accade se <xref:System.Threading.Monitor.Pulse%2A> viene chiamato quando nessun thread in attesa.</span><span class="sxs-lookup"><span data-stu-id="ce991-308">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 <span data-ttu-id="ce991-309">Per segnalare un singolo thread, utilizzare il `Pulse` (metodo).</span><span class="sxs-lookup"><span data-stu-id="ce991-309">To signal a single thread, use the `Pulse` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ce991-310">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-310">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="ce991-311">Il thread chiamante non è il proprietario del blocco per l'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-311">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="ce991-312">Threading gestito</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-312">Managed Threading</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ce991-313">Prova ad acquisire un blocco esclusivo sull'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-313">Attempts to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj -&gt; bool" Usage="System.Threading.Monitor.TryEnter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="ce991-314">Oggetto sul quale acquisire il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-314">The object on which to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ce991-315">Prova ad acquisire un blocco esclusivo sull'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-315">Attempts to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ce991-316">
            <see langword="true" /> se il thread corrente acquisisce il blocco; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-316">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce991-317">Se ha esito positivo, questo metodo acquisisce un blocco esclusivo su di `obj` parametro.</span><span class="sxs-lookup"><span data-stu-id="ce991-317">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="ce991-318">Questo metodo restituisce immediatamente, se il blocco è disponibile o meno.</span><span class="sxs-lookup"><span data-stu-id="ce991-318">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="ce991-319">Questo metodo è simile a <xref:System.Threading.Monitor.Enter%2A>, ma non bloccherà mai il thread corrente.</span><span class="sxs-lookup"><span data-stu-id="ce991-319">This method is similar to <xref:System.Threading.Monitor.Enter%2A>, but it will never block the current thread.</span></span> <span data-ttu-id="ce991-320">Se non è possibile immettere il thread senza blocco, il metodo restituisce `false,`.</span><span class="sxs-lookup"><span data-stu-id="ce991-320">If the thread cannot enter without blocking, the method returns `false,`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ce991-321">Usare <xref:System.Threading.Monitor> per bloccare gli oggetti (ovvero i tipi di riferimento), non i tipi di valore.</span><span class="sxs-lookup"><span data-stu-id="ce991-321">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="ce991-322">Per informazioni dettagliate, vedere il <xref:System.Threading.Monitor> articolo.</span><span class="sxs-lookup"><span data-stu-id="ce991-322">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="ce991-323">Per assicurarsi che il thread non immette la sezione critica, è consigliabile esaminare il valore restituito del metodo ed eseguire codice nella sezione critica solo se il valore restituito è `true`.</span><span class="sxs-lookup"><span data-stu-id="ce991-323">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="ce991-324">Il frammento di codice seguente viene illustrato il modello usato per chiamare questo metodo.</span><span class="sxs-lookup"><span data-stu-id="ce991-324">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="ce991-325">Si noti che è necessario chiamare <xref:System.Threading.Monitor.Exit%2A> in un `finally` blocco per garantire che il thread chiamante rilascia il blocco sulla sezione critica se si verifica un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="ce991-325">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#1)]
 [!code-vb[System.Threading.Monitor.TryEnter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="ce991-326">Nell'esempio di codice riportato di seguito viene illustrato come utilizzare il metodo `TryEnter`.</span><span class="sxs-lookup"><span data-stu-id="ce991-326">The following code example demonstrates how to use the `TryEnter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ce991-327">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-327">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="ce991-328">Threading gestito</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-328">Managed Threading</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="ce991-329">Oggetto sul quale acquisire il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-329">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="ce991-330">Risultato del tentativo di acquisizione del blocco passato dal riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-330">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="ce991-331">L'input deve essere <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-331">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ce991-332">L'output è <see langword="true" /> se il blocco viene acquisito; in caso contrario, l'output è <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-332">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ce991-333">L'output viene impostato anche se si verifica un'eccezione durante il tentativo di acquisire il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-333">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ce991-334">Prova ad acquisire un blocco esclusivo sull'oggetto specificato e imposta atomicamente un valore che indica se il blocco è stato ottenuto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-334">Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce991-335">Se ha esito positivo, questo metodo acquisisce un blocco esclusivo su di `obj` parametro.</span><span class="sxs-lookup"><span data-stu-id="ce991-335">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="ce991-336">Questo metodo restituisce immediatamente, se il blocco è disponibile o meno.</span><span class="sxs-lookup"><span data-stu-id="ce991-336">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="ce991-337">Se il blocco non è stato applicato perché è stata generata un'eccezione, la variabile specificata per il `lockTaken` parametro è `false` dopo che questo metodo termina.</span><span class="sxs-lookup"><span data-stu-id="ce991-337">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="ce991-338">In questo modo il programma determinare, in tutti i casi, se è necessario rilasciare il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-338">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
 <span data-ttu-id="ce991-339">Questo metodo è simile a <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, ma non bloccherà mai il thread corrente.</span><span class="sxs-lookup"><span data-stu-id="ce991-339">This method is similar to <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, but it will never block the current thread.</span></span> <span data-ttu-id="ce991-340">Se non è possibile immettere il thread senza blocco, il `lockTaken` argomento è impostato su `false` quando restituito dal metodo.</span><span class="sxs-lookup"><span data-stu-id="ce991-340">If the thread cannot enter without blocking, the `lockTaken` argument is set to `false` when the method returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ce991-341">Usare <xref:System.Threading.Monitor> per bloccare gli oggetti (ovvero i tipi di riferimento), non i tipi di valore.</span><span class="sxs-lookup"><span data-stu-id="ce991-341">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="ce991-342">Per ulteriori informazioni, vedere l'articolo <xref:System.Threading.Monitor>.</span><span class="sxs-lookup"><span data-stu-id="ce991-342">For more information, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="ce991-343">Per assicurarsi che il thread di entrare nella sezione critica, è necessario esaminare il valore di `lockTaken` ed eseguire il codice nella sezione critica solo se il valore è `true`.</span><span class="sxs-lookup"><span data-stu-id="ce991-343">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="ce991-344">Il frammento di codice seguente viene illustrato il modello usato per chiamare questo metodo.</span><span class="sxs-lookup"><span data-stu-id="ce991-344">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="ce991-345">Si noti che è necessario chiamare <xref:System.Threading.Monitor.Exit%2A> in un `finally` blocco per garantire che il thread chiamante rilascia il blocco sulla sezione critica se si verifica un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="ce991-345">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#2)]
 [!code-vb[System.Threading.Monitor.TryEnter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="ce991-346">Il codice seguente illustra il modello di base per l'uso di <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> overload del metodo.</span><span class="sxs-lookup"><span data-stu-id="ce991-346">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="ce991-347">Questo overload imposta sempre il valore della variabile che viene passato per il `ref` parametro (`ByRef` in Visual Basic) `lockTaken`, anche se il metodo genera un'eccezione, pertanto il valore della variabile è un metodo efficace per verificare se il blocco deve essere rilasciato.</span><span class="sxs-lookup"><span data-stu-id="ce991-347">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#3)]
 [!code-vb[System.Threading.Monitor.Enter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ce991-348">L'input per <paramref name="lockTaken" /> è <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-348">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ce991-349">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-349">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="ce991-350">Oggetto sul quale acquisire il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-350">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="ce991-351">Tempo di attesa espresso in millisecondi prima che si verifichi il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-351">The number of milliseconds to wait for the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ce991-352">Viene eseguito, per un numero specificato di millisecondi, il tentativo di acquisire un blocco esclusivo sull'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-352">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ce991-353">
            <see langword="true" /> se il thread corrente acquisisce il blocco; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-353">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce991-354">Se il `millisecondsTimeout` parametro è uguale a <xref:System.Threading.Timeout.Infinite>, questo metodo equivale a <xref:System.Threading.Monitor.Enter%2A>.</span><span class="sxs-lookup"><span data-stu-id="ce991-354">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="ce991-355">Se `millisecondsTimeout` è uguale a 0, questo metodo equivale a <xref:System.Threading.Monitor.TryEnter%2A>.</span><span class="sxs-lookup"><span data-stu-id="ce991-355">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ce991-356">Usare <xref:System.Threading.Monitor> per bloccare gli oggetti (ovvero i tipi di riferimento), non i tipi di valore.</span><span class="sxs-lookup"><span data-stu-id="ce991-356">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="ce991-357">Per informazioni dettagliate, vedere il <xref:System.Threading.Monitor> articolo.</span><span class="sxs-lookup"><span data-stu-id="ce991-357">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="ce991-358">Per assicurarsi che il thread non immette la sezione critica, è consigliabile esaminare il valore restituito del metodo ed eseguire codice nella sezione critica solo se il valore restituito è `true`.</span><span class="sxs-lookup"><span data-stu-id="ce991-358">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="ce991-359">Il frammento di codice seguente viene illustrato il modello usato per chiamare questo metodo.</span><span class="sxs-lookup"><span data-stu-id="ce991-359">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="ce991-360">Si noti che è necessario chiamare <xref:System.Threading.Monitor.Exit%2A> in un `finally` blocco per garantire che il thread chiamante rilascia il blocco sulla sezione critica se si verifica un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="ce991-360">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#3)]
 [!code-vb[System.Threading.Monitor.TryEnter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ce991-361">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-361">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ce991-362">
            <paramref name="millisecondsTimeout" /> è negativo e diverso da <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-362">
              <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="ce991-363">Threading gestito</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-363">Managed Threading</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="ce991-364">Oggetto sul quale acquisire il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-364">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="ce991-365">Oggetto <see cref="T:System.TimeSpan" /> che rappresenta la durata di attesa del blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-365">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait for the lock.</span>
          </span>
          <span data-ttu-id="ce991-366">Un valore di –1 millisecondo specifica un'attesa infinita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-366">A value of –1 millisecond specifies an infinite wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ce991-367">Viene eseguito, per una quantità di tempo specificata, il tentativo di acquisire un blocco esclusivo sull'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-367">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ce991-368">
            <see langword="true" /> se il thread corrente acquisisce il blocco; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-368">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce991-369">Se il valore della `timeout` parametro convertita in millisecondi è uguale a -1, questo metodo equivale a <xref:System.Threading.Monitor.Enter%2A>.</span><span class="sxs-lookup"><span data-stu-id="ce991-369">If the value of the `timeout` parameter converted to milliseconds equals –1, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="ce991-370">Se il valore di `timeout` è uguale a 0, questo metodo equivale a <xref:System.Threading.Monitor.TryEnter%2A>.</span><span class="sxs-lookup"><span data-stu-id="ce991-370">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ce991-371">Usare <xref:System.Threading.Monitor> per bloccare gli oggetti (ovvero i tipi di riferimento), non i tipi di valore.</span><span class="sxs-lookup"><span data-stu-id="ce991-371">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="ce991-372">Per informazioni dettagliate, vedere il <xref:System.Threading.Monitor> argomento relativo alla classe.</span><span class="sxs-lookup"><span data-stu-id="ce991-372">For details, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="ce991-373">Per assicurarsi che il thread non immette la sezione critica, è consigliabile esaminare il valore restituito del metodo ed eseguire codice nella sezione critica solo se il valore restituito è `true`.</span><span class="sxs-lookup"><span data-stu-id="ce991-373">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="ce991-374">Il frammento di codice seguente viene illustrato il modello usato per chiamare questo metodo.</span><span class="sxs-lookup"><span data-stu-id="ce991-374">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="ce991-375">Si noti che è necessario chiamare <xref:System.Threading.Monitor.Exit%2A> in un `finally` blocco per garantire che il thread chiamante rilascia il blocco sulla sezione critica se si verifica un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="ce991-375">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#5)]
 [!code-vb[System.Threading.Monitor.TryEnter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ce991-376">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-376">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ce991-377">Il valore di <paramref name="timeout" /> in millisecondi è negativo e non è uguale a <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecondo) oppure è maggiore di <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-377">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="ce991-378">Threading gestito</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-378">Managed Threading</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, int millisecondsTimeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="ce991-379">Oggetto sul quale acquisire il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-379">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="ce991-380">Tempo di attesa espresso in millisecondi prima che si verifichi il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-380">The number of milliseconds to wait for the lock.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="ce991-381">Risultato del tentativo di acquisizione del blocco passato dal riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-381">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="ce991-382">L'input deve essere <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-382">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ce991-383">L'output è <see langword="true" /> se il blocco viene acquisito; in caso contrario, l'output è <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-383">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ce991-384">L'output viene impostato anche se si verifica un'eccezione durante il tentativo di acquisire il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-384">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ce991-385">Prova ad acquisire, per il numero di millisecondi specificato, un blocco esclusivo sull'oggetto specificato e imposta atomicamente un valore che indica se il blocco è stato ottenuto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-385">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce991-386">Se il `millisecondsTimeout` parametro è uguale a <xref:System.Threading.Timeout.Infinite>, questo metodo equivale a <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="ce991-386">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="ce991-387">Se `millisecondsTimeout` è uguale a 0, questo metodo equivale a <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="ce991-387">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="ce991-388">Se il blocco non è stato applicato perché è stata generata un'eccezione, la variabile specificata per il `lockTaken` parametro è `false` dopo che questo metodo termina.</span><span class="sxs-lookup"><span data-stu-id="ce991-388">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="ce991-389">In questo modo il programma determinare, in tutti i casi, se è necessario rilasciare il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-389">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ce991-390">Usare <xref:System.Threading.Monitor> per bloccare gli oggetti (ovvero i tipi di riferimento), non i tipi di valore.</span><span class="sxs-lookup"><span data-stu-id="ce991-390">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="ce991-391">Per altre informazioni, vedere il <xref:System.Threading.Monitor> argomento relativo alla classe.</span><span class="sxs-lookup"><span data-stu-id="ce991-391">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="ce991-392">Per assicurarsi che il thread di entrare nella sezione critica, è necessario esaminare il valore di `lockTaken` ed eseguire il codice nella sezione critica solo se il valore è `true`.</span><span class="sxs-lookup"><span data-stu-id="ce991-392">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="ce991-393">Il frammento di codice seguente viene illustrato il modello usato per chiamare questo metodo.</span><span class="sxs-lookup"><span data-stu-id="ce991-393">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="ce991-394">Si noti che è necessario chiamare <xref:System.Threading.Monitor.Exit%2A> in un `finally` blocco per garantire che il thread chiamante rilascia il blocco sulla sezione critica se si verifica un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="ce991-394">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#4)]
 [!code-vb[System.Threading.Monitor.TryEnter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="ce991-395">Il codice seguente illustra il modello di base per l'uso di <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> overload del metodo.</span><span class="sxs-lookup"><span data-stu-id="ce991-395">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="ce991-396">Questo overload imposta sempre il valore della variabile che viene passato per il `ref` parametro (`ByRef` in Visual Basic) `lockTaken`, anche se il metodo genera un'eccezione, pertanto il valore della variabile è un metodo efficace per verificare se il blocco deve essere rilasciato.</span><span class="sxs-lookup"><span data-stu-id="ce991-396">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#4)]
 [!code-vb[System.Threading.Monitor.Enter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ce991-397">L'input per <paramref name="lockTaken" /> è <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-397">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ce991-398">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-398">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ce991-399">
            <paramref name="millisecondsTimeout" /> è negativo e diverso da <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-399">
              <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, TimeSpan timeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, timeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="ce991-400">Oggetto sul quale acquisire il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-400">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="ce991-401">Quantità di tempo che rappresenta la durata di attesa del blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-401">The amount of time to wait for the lock.</span>
          </span>
          <span data-ttu-id="ce991-402">Un valore di –1 millisecondo specifica un'attesa infinita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-402">A value of –1 millisecond specifies an infinite wait.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="ce991-403">Risultato del tentativo di acquisizione del blocco passato dal riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-403">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="ce991-404">L'input deve essere <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-404">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ce991-405">L'output è <see langword="true" /> se il blocco viene acquisito; in caso contrario, l'output è <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-405">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ce991-406">L'output viene impostato anche se si verifica un'eccezione durante il tentativo di acquisire il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-406">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ce991-407">Prova ad acquisire, per la quantità di tempo specificata, un blocco esclusivo sull'oggetto specificato e imposta atomicamente un valore che indica se il blocco è stato ottenuto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-407">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce991-408">Se il valore della `timeout` parametro convertita in millisecondi è uguale a -1, questo metodo equivale a <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="ce991-408">If the value of the `timeout` parameter converted to milliseconds equals –1, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="ce991-409">Se il valore di `timeout` è uguale a 0, questo metodo equivale a <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="ce991-409">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="ce991-410">Se il blocco non è stato applicato perché è stata generata un'eccezione, la variabile specificata per il `lockTaken` parametro è `false` dopo che questo metodo termina.</span><span class="sxs-lookup"><span data-stu-id="ce991-410">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="ce991-411">In questo modo il programma determinare, in tutti i casi, se è necessario rilasciare il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-411">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ce991-412">Usare <xref:System.Threading.Monitor> per bloccare gli oggetti (ovvero i tipi di riferimento), non i tipi di valore.</span><span class="sxs-lookup"><span data-stu-id="ce991-412">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="ce991-413">Per altre informazioni, vedere il <xref:System.Threading.Monitor> argomento relativo alla classe.</span><span class="sxs-lookup"><span data-stu-id="ce991-413">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="ce991-414">Per assicurarsi che il thread di entrare nella sezione critica, è necessario esaminare il valore di `lockTaken` ed eseguire il codice nella sezione critica solo se il valore è `true`.</span><span class="sxs-lookup"><span data-stu-id="ce991-414">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="ce991-415">Il frammento di codice seguente viene illustrato il modello usato per chiamare questo metodo.</span><span class="sxs-lookup"><span data-stu-id="ce991-415">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="ce991-416">Si noti che è necessario chiamare <xref:System.Threading.Monitor.Exit%2A> in un `finally` blocco per garantire che il thread chiamante rilascia il blocco sulla sezione critica se si verifica un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="ce991-416">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#6)]
 [!code-vb[System.Threading.Monitor.TryEnter#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ce991-417">L'input per <paramref name="lockTaken" /> è <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-417">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ce991-418">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-418">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ce991-419">Il valore di <paramref name="timeout" /> in millisecondi è negativo e non è uguale a <see cref="F:System.Threading.Timeout.Infinite" /> (-1 millisecondo) oppure è maggiore di <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-419">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="ce991-420">Threading gestito</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-420">Managed Threading</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ce991-421">Rilascia il blocco su un oggetto e interrompe il thread corrente finché riacquisisce il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-421">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Wait : obj -&gt; bool" Usage="System.Threading.Monitor.Wait obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="ce991-422">Oggetto per il quale attendere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-422">The object on which to wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ce991-423">Rilascia il blocco su un oggetto e interrompe il thread corrente finché riacquisisce il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-423">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ce991-424">Viene restituito <see langword="true" /> se la chiamata è stata restituita perché il chiamante ha riacquisito il blocco per l'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-424">
              <see langword="true" /> if the call returned because the caller reacquired the lock for the specified object.</span>
          </span>
          <span data-ttu-id="ce991-425">Non viene restituito alcun valore se il blocco non viene riacquisito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-425">This method does not return if the lock is not reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce991-426">Questo metodo viene richiamato dal thread che possiede attualmente il blocco sull'oggetto specificato per rilasciare l'oggetto in modo che un altro thread possa accedervi.</span><span class="sxs-lookup"><span data-stu-id="ce991-426">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="ce991-427">Il chiamante è bloccato mentre attende di riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-427">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="ce991-428">Questo metodo viene chiamato quando il chiamante deve attendere un cambiamento di stato che si verifica in seguito a operazioni di un altro thread.</span><span class="sxs-lookup"><span data-stu-id="ce991-428">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="ce991-429">Quando un thread chiama `Wait`, rilascia il blocco sull'oggetto e inserito nella coda in attesa dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-429">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="ce991-430">Il thread successivo nella coda di pronto dell'oggetto (se presente) acquisisce il blocco e ha l'uso esclusivo dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-430">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="ce991-431">Tutti i thread che chiamano `Wait` rimangono nella coda in attesa finché non ricevono un segnale da <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A>, inviato dal proprietario del blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-431">All threads that call `Wait` remain in the waiting queue until they receive a signal from <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>, sent by the owner of the lock.</span></span> <span data-ttu-id="ce991-432">Se `Pulse` viene inviato, viene interessato solo il primo thread all'inizio della coda di attesa.</span><span class="sxs-lookup"><span data-stu-id="ce991-432">If `Pulse` is sent, only the thread at the head of the waiting queue is affected.</span></span> <span data-ttu-id="ce991-433">Se `PulseAll` vengono inviati, tutti i thread in attesa per l'oggetto sono interessati.</span><span class="sxs-lookup"><span data-stu-id="ce991-433">If `PulseAll` is sent, all threads that are waiting for the object are affected.</span></span> <span data-ttu-id="ce991-434">Quando si riceve un segnale, uno o più thread lasciato nella coda di attesa e inseriti nella coda pronta.</span><span class="sxs-lookup"><span data-stu-id="ce991-434">When the signal is received, one or more threads leave the waiting queue and enter the ready queue.</span></span> <span data-ttu-id="ce991-435">Dovrà quindi riacquisire il blocco è consentito un thread nella coda degli elementi pronti.</span><span class="sxs-lookup"><span data-stu-id="ce991-435">A thread in the ready queue is permitted to reacquire the lock.</span></span>  
  
 <span data-ttu-id="ce991-436">Questo metodo restituisce quando il thread chiamante riacquisisce il blocco sull'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-436">This method returns when the calling thread reacquires the lock on the object.</span></span> <span data-ttu-id="ce991-437">Si noti che questo metodo si blocca per un periodo illimitato se il proprietario del blocco non chiama `Pulse` o `PulseAll`.</span><span class="sxs-lookup"><span data-stu-id="ce991-437">Note that this method blocks indefinitely if the holder of the lock does not call `Pulse` or `PulseAll`.</span></span>  
  
 <span data-ttu-id="ce991-438">Il chiamante esegue `Wait` una volta, indipendentemente dal numero di volte in cui <xref:System.Threading.Monitor.Enter%2A> è stato richiamato per l'oggetto specificato.</span><span class="sxs-lookup"><span data-stu-id="ce991-438">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="ce991-439">Concettualmente, la `Wait` metodo memorizza il numero di volte in cui viene richiamato il chiamante `Enter` sull'oggetto e richiama `Exit` tutte le volte necessarie per ottenere il rilascio dell'oggetto bloccato.</span><span class="sxs-lookup"><span data-stu-id="ce991-439">Conceptually, the `Wait` method stores the number of times the caller invoked `Enter` on the object and invokes `Exit` as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="ce991-440">Il chiamante si bloccherà durante l'attesa dovrà quindi riacquisire l'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-440">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="ce991-441">Quando il chiamante riacquisisce il blocco, il sistema chiama `Enter` tutte le volte necessarie per ripristinare il salvato `Enter` conteggio per il chiamante.</span><span class="sxs-lookup"><span data-stu-id="ce991-441">When the caller reacquires the lock, the system calls `Enter` as many times as necessary to restore the saved `Enter` count for the caller.</span></span> <span data-ttu-id="ce991-442">La chiamata a `Wait` rilascia il blocco per l'oggetto specificato solo se il chiamante è il proprietario di blocchi su altri oggetti, tali blocchi non vengono rilasciati.</span><span class="sxs-lookup"><span data-stu-id="ce991-442">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
 <span data-ttu-id="ce991-443">Si noti che un oggetto sincronizzato contiene riferimenti a diversi, tra cui un riferimento al thread che attualmente detiene il blocco, un riferimento alla coda degli elementi pronti, che contiene i thread pronti ottenere il blocco, e un riferimento alla coda di attesa, che contiene i thread in attesa per la notifica di modifica dello stato dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-443">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="ce991-444">Il <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, e `Wait` metodi devono essere richiamati all'interno di un blocco di codice sincronizzato.</span><span class="sxs-lookup"><span data-stu-id="ce991-444">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="ce991-445">La sezione Osservazioni per il <xref:System.Threading.Monitor.Pulse%2A> metodo spiegano che cosa accade se <xref:System.Threading.Monitor.Pulse%2A> viene chiamato quando nessun thread in attesa.</span><span class="sxs-lookup"><span data-stu-id="ce991-445">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ce991-446">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-446">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="ce991-447">Il thread chiamante non è il proprietario del blocco per l'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-447">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="ce991-448">Il thread da cui è stato richiamato <see langword="Wait" /> viene interrotto in seguito dallo stato di attesa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-448">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="ce991-449">L'interruzione si verifica quando il metodo <see cref="M:System.Threading.Thread.Interrupt" /> di questo thread viene chiamato da un altro thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-449">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="ce991-450">Threading gestito</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-450">Managed Threading</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="ce991-451">Oggetto per il quale attendere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-451">The object on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="ce991-452">Numero di millisecondi da attendere prima che il thread venga inserito nella coda di thread pronti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-452">The number of milliseconds to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ce991-453">Rilascia il blocco su un oggetto e interrompe il thread corrente finché riacquisisce il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-453">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="ce991-454">Allo scadere dell'intervallo di timeout specificato, il thread viene inserito nella coda di thread pronti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-454">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ce991-455">
            <see langword="true" /> se il blocco è stato riacquisito prima che sia trascorso il tempo specificato; <see langword="false" /> se il blocco è stato riacquisito dopo che è trascorso il tempo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-455">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="ce991-456">Il metodo non restituisce alcun valore finché il blocco non viene riacquisito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-456">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce991-457">Questo metodo non restituisce finché riacquisisce il blocco esclusivo su di `obj` parametro.</span><span class="sxs-lookup"><span data-stu-id="ce991-457">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="ce991-458">Questo metodo viene richiamato dal thread che possiede attualmente il blocco sull'oggetto specificato per rilasciare l'oggetto in modo che un altro thread possa accedervi.</span><span class="sxs-lookup"><span data-stu-id="ce991-458">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="ce991-459">Il chiamante è bloccato mentre attende di riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-459">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="ce991-460">Questo metodo viene chiamato quando il chiamante deve attendere un cambiamento di stato che si verifica in seguito a operazioni di un altro thread.</span><span class="sxs-lookup"><span data-stu-id="ce991-460">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="ce991-461">Il timeout garantisce che il thread corrente non blocca all'infinito se un altro thread rilascia il blocco senza chiamare prima il <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="ce991-461">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="ce991-462">Sposta inoltre i thread nella coda pronti, ignorando gli altri thread precederlo nella coda di attesa, in modo che possibile riacquisire il blocco prima.</span><span class="sxs-lookup"><span data-stu-id="ce991-462">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="ce991-463">Il thread può verificare il valore restituito del <xref:System.Threading.Monitor.Wait%2A> metodo per determinare se ha riacquisito il blocco prima del timeout. Il thread può valutare le condizioni che hanno causato lo stato di attesa, e, se necessario, chiamare il <xref:System.Threading.Monitor.Wait%2A> metodo nuovamente.</span><span class="sxs-lookup"><span data-stu-id="ce991-463">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="ce991-464">Quando un thread chiama `Wait`, rilascia il blocco sull'oggetto e inserito nella coda in attesa dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-464">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="ce991-465">Il thread successivo nella coda di pronto dell'oggetto (se presente) acquisisce il blocco e ha l'uso esclusivo dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-465">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="ce991-466">Il thread che ha richiamato `Wait` richiama un thread che contiene il blocco rimane nella coda di attesa fino al completamento <xref:System.Threading.Monitor.PulseAll%2A>, o è il successivo nella coda e un thread che contiene il blocco richiama <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="ce991-466">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="ce991-467">Tuttavia, se `millisecondsTimeout` scade prima che un altro thread richiama questo oggetto <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A> metodo, il thread originale viene spostato nella coda degli elementi pronti per riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-467">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ce991-468">Se <xref:System.Threading.Timeout.Infinite> viene specificato per il `millisecondsTimeout` parametro, questo metodo si blocca per un periodo illimitato, a meno che il proprietario del blocco chiama <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="ce991-468">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="ce991-469">Se `millisecondsTimeout` è uguale a 0, il thread che chiama `Wait` rilascia il blocco e viene inserito immediatamente nella coda degli elementi pronti per riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-469">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="ce991-470">Il chiamante esegue `Wait` una volta, indipendentemente dal numero di volte in cui <xref:System.Threading.Monitor.Enter%2A> è stato richiamato per l'oggetto specificato.</span><span class="sxs-lookup"><span data-stu-id="ce991-470">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="ce991-471">Concettualmente, la `Wait` metodo memorizza il numero di volte in cui viene richiamato il chiamante <xref:System.Threading.Monitor.Enter%2A> sull'oggetto e richiama <xref:System.Threading.Monitor.Exit%2A> tutte le volte necessarie per ottenere il rilascio dell'oggetto bloccato.</span><span class="sxs-lookup"><span data-stu-id="ce991-471">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="ce991-472">Il chiamante si bloccherà durante l'attesa dovrà quindi riacquisire l'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-472">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="ce991-473">Quando il chiamante riacquisisce il blocco, il sistema chiama <xref:System.Threading.Monitor.Enter%2A> tutte le volte necessarie per ripristinare il salvato <xref:System.Threading.Monitor.Enter%2A> conteggio per il chiamante.</span><span class="sxs-lookup"><span data-stu-id="ce991-473">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="ce991-474">La chiamata a `Wait` rilascia il blocco per l'oggetto specificato solo se il chiamante è il proprietario di blocchi su altri oggetti, tali blocchi non vengono rilasciati.</span><span class="sxs-lookup"><span data-stu-id="ce991-474">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ce991-475">Un oggetto sincronizzato contiene riferimenti a diversi, tra cui un riferimento al thread che attualmente detiene il blocco, un riferimento alla coda degli elementi pronti, che contiene i thread pronti ottenere il blocco, e un riferimento alla coda di attesa, che contiene il thread in attesa per la notifica di modifica dello stato dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-475">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="ce991-476">Il <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, e `Wait` metodi devono essere richiamati all'interno di un blocco di codice sincronizzato.</span><span class="sxs-lookup"><span data-stu-id="ce991-476">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="ce991-477">La sezione Osservazioni per il <xref:System.Threading.Monitor.Pulse%2A> metodo spiegano che cosa accade se <xref:System.Threading.Monitor.Pulse%2A> viene chiamato quando nessun thread in attesa.</span><span class="sxs-lookup"><span data-stu-id="ce991-477">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ce991-478">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-478">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="ce991-479">Il thread chiamante non è il proprietario del blocco per l'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-479">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="ce991-480">Il thread da cui è stato richiamato <see langword="Wait" /> viene interrotto in seguito dallo stato di attesa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-480">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="ce991-481">L'interruzione si verifica quando il metodo <see cref="M:System.Threading.Thread.Interrupt" /> di questo thread viene chiamato da un altro thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-481">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ce991-482">Il valore del parametro <paramref name="millisecondsTimeout" /> è negativo e non è uguale a <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-482">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="ce991-483">Threading gestito</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-483">Managed Threading</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="ce991-484">Oggetto per il quale attendere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-484">The object on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="ce991-485">Oggetto <see cref="T:System.TimeSpan" /> che rappresenta il tempo di attesa prima che il thread venga inserito nella coda di thread pronti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-485">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ce991-486">Rilascia il blocco su un oggetto e interrompe il thread corrente finché riacquisisce il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-486">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="ce991-487">Allo scadere dell'intervallo di timeout specificato, il thread viene inserito nella coda di thread pronti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-487">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ce991-488">
            <see langword="true" /> se il blocco è stato riacquisito prima che sia trascorso il tempo specificato; <see langword="false" /> se il blocco è stato riacquisito dopo che è trascorso il tempo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-488">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="ce991-489">Il metodo non restituisce alcun valore finché il blocco non viene riacquisito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-489">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce991-490">Questo metodo non restituisce finché riacquisisce il blocco esclusivo su di `obj` parametro.</span><span class="sxs-lookup"><span data-stu-id="ce991-490">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="ce991-491">Questo metodo viene richiamato dal thread che possiede attualmente il blocco sull'oggetto specificato per rilasciare l'oggetto in modo che un altro thread possa accedervi.</span><span class="sxs-lookup"><span data-stu-id="ce991-491">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="ce991-492">Il chiamante è bloccato mentre attende di riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-492">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="ce991-493">Questo metodo viene chiamato quando il chiamante deve attendere un cambiamento di stato che si verifica in seguito a operazioni di un altro thread.</span><span class="sxs-lookup"><span data-stu-id="ce991-493">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="ce991-494">Il timeout garantisce che il thread corrente non blocca all'infinito se un altro thread rilascia il blocco senza chiamare prima il <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="ce991-494">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="ce991-495">Sposta inoltre i thread nella coda pronti, ignorando gli altri thread precederlo nella coda di attesa, in modo che possibile riacquisire il blocco prima.</span><span class="sxs-lookup"><span data-stu-id="ce991-495">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="ce991-496">Il thread può verificare il valore restituito del <xref:System.Threading.Monitor.Wait%2A> metodo per determinare se ha riacquisito il blocco prima del timeout. Il thread può valutare le condizioni che hanno causato lo stato di attesa, e, se necessario, chiamare il <xref:System.Threading.Monitor.Wait%2A> metodo nuovamente.</span><span class="sxs-lookup"><span data-stu-id="ce991-496">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="ce991-497">Quando un thread chiama `Wait`, rilascia il blocco sull'oggetto e inserito nella coda in attesa dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-497">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="ce991-498">Il thread successivo nella coda di pronto dell'oggetto (se presente) acquisisce il blocco e ha l'uso esclusivo dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-498">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="ce991-499">Il thread che ha richiamato `Wait` richiama un thread che contiene il blocco rimane nella coda di attesa fino al completamento <xref:System.Threading.Monitor.PulseAll%2A>, o è il successivo nella coda e un thread che contiene il blocco richiama <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="ce991-499">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="ce991-500">Tuttavia, se `timeout` scade prima che un altro thread richiama questo oggetto <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A> metodo, il thread originale viene spostato nella coda degli elementi pronti per riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-500">However, if `timeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ce991-501">Se un <xref:System.TimeSpan> che rappresenta-1 millisecondo specificato per il `timeout` parametro, questo metodo si blocca per un periodo illimitato, a meno che il proprietario del blocco chiama <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="ce991-501">If a <xref:System.TimeSpan> representing –1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="ce991-502">Se `timeout` è pari a 0 millisecondi, il thread che chiama `Wait` rilascia il blocco e viene inserito immediatamente nella coda degli elementi pronti per riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-502">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="ce991-503">Il chiamante esegue `Wait` una volta, indipendentemente dal numero di volte in cui <xref:System.Threading.Monitor.Enter%2A> è stato richiamato per l'oggetto specificato.</span><span class="sxs-lookup"><span data-stu-id="ce991-503">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="ce991-504">Concettualmente, la `Wait` metodo memorizza il numero di volte in cui viene richiamato il chiamante <xref:System.Threading.Monitor.Enter%2A> sull'oggetto e richiama <xref:System.Threading.Monitor.Exit%2A> tutte le volte necessarie per ottenere il rilascio dell'oggetto bloccato.</span><span class="sxs-lookup"><span data-stu-id="ce991-504">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="ce991-505">Il chiamante si bloccherà durante l'attesa dovrà quindi riacquisire l'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-505">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="ce991-506">Quando il chiamante riacquisisce il blocco, il sistema chiama <xref:System.Threading.Monitor.Enter%2A> tutte le volte necessarie per ripristinare il salvato <xref:System.Threading.Monitor.Enter%2A> conteggio per il chiamante.</span><span class="sxs-lookup"><span data-stu-id="ce991-506">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="ce991-507">La chiamata a `Wait` rilascia il blocco per l'oggetto specificato solo se il chiamante è il proprietario di blocchi su altri oggetti, tali blocchi non vengono rilasciati.</span><span class="sxs-lookup"><span data-stu-id="ce991-507">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ce991-508">Un oggetto sincronizzato contiene riferimenti a diversi, tra cui un riferimento al thread che attualmente detiene il blocco, un riferimento alla coda degli elementi pronti, che contiene i thread pronti ottenere il blocco, e un riferimento alla coda di attesa, che contiene il thread in attesa per la notifica di modifica dello stato dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-508">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="ce991-509">Il <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, e `Wait` metodi devono essere richiamati all'interno di un blocco di codice sincronizzato.</span><span class="sxs-lookup"><span data-stu-id="ce991-509">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="ce991-510">La sezione Osservazioni per il <xref:System.Threading.Monitor.Pulse%2A> metodo spiegano che cosa accade se <xref:System.Threading.Monitor.Pulse%2A> viene chiamato quando nessun thread in attesa.</span><span class="sxs-lookup"><span data-stu-id="ce991-510">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ce991-511">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-511">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="ce991-512">Il thread chiamante non è il proprietario del blocco per l'oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-512">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="ce991-513">Il thread da cui è stato richiamato <see langword="Wait" /> viene interrotto in seguito dallo stato di attesa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-513">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="ce991-514">L'interruzione si verifica quando il metodo <see cref="M:System.Threading.Thread.Interrupt" /> di questo thread viene chiamato da un altro thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-514">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ce991-515">Il valore del parametro <paramref name="timeout" /> in millisecondi è negativo e non rappresenta <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecondo) oppure è maggiore di <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-515">The value of the <paramref name="timeout" /> parameter in milliseconds is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="ce991-516">Threading gestito</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-516">Managed Threading</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="ce991-517">Oggetto per il quale attendere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-517">The object on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="ce991-518">Numero di millisecondi da attendere prima che il thread venga inserito nella coda di thread pronti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-518">The number of milliseconds to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="ce991-519">
            <see langword="true" /> per uscire e riacquisire il dominio di sincronizzazione per il contesto, se si trova in un contesto sincronizzato, prima dell'attesa; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-519">
              <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ce991-520">Rilascia il blocco su un oggetto e interrompe il thread corrente finché riacquisisce il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-520">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="ce991-521">Allo scadere dell'intervallo di timeout specificato, il thread viene inserito nella coda di thread pronti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-521">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
          <span data-ttu-id="ce991-522">Questo metodo consente anche di specificare se il dominio di sincronizzazione per il contesto, qualora si trovi in un contesto di sincronizzazione, viene terminato prima dell'attesa e riacquisito in un secondo momento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-522">This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired afterward.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ce991-523">
            <see langword="true" /> se il blocco è stato riacquisito prima che sia trascorso il tempo specificato; <see langword="false" /> se il blocco è stato riacquisito dopo che è trascorso il tempo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-523">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="ce991-524">Il metodo non restituisce alcun valore finché il blocco non viene riacquisito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-524">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce991-525">Questo metodo non restituisce finché riacquisisce il blocco esclusivo su di `obj` parametro.</span><span class="sxs-lookup"><span data-stu-id="ce991-525">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="ce991-526">Questo metodo viene richiamato dal thread che possiede attualmente il blocco sull'oggetto specificato per rilasciare l'oggetto in modo che un altro thread possa accedervi.</span><span class="sxs-lookup"><span data-stu-id="ce991-526">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="ce991-527">Il chiamante è bloccato mentre attende di riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-527">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="ce991-528">Questo metodo viene chiamato quando il chiamante deve attendere un cambiamento di stato che si verifica in seguito a operazioni di un altro thread.</span><span class="sxs-lookup"><span data-stu-id="ce991-528">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="ce991-529">Il timeout garantisce che il thread corrente non blocca all'infinito se un altro thread rilascia il blocco senza chiamare prima il <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="ce991-529">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="ce991-530">Sposta inoltre i thread nella coda pronti, ignorando gli altri thread precederlo nella coda di attesa, in modo che possibile riacquisire il blocco prima.</span><span class="sxs-lookup"><span data-stu-id="ce991-530">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="ce991-531">Il thread può verificare il valore restituito del <xref:System.Threading.Monitor.Wait%2A> metodo per determinare se ha riacquisito il blocco prima del timeout. Il thread può valutare le condizioni che hanno causato lo stato di attesa, e, se necessario, chiamare il <xref:System.Threading.Monitor.Wait%2A> metodo nuovamente.</span><span class="sxs-lookup"><span data-stu-id="ce991-531">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="ce991-532">Quando un thread chiama `Wait`, rilascia il blocco e venga inserito nella coda di attesa.</span><span class="sxs-lookup"><span data-stu-id="ce991-532">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="ce991-533">A questo punto, il thread successivo nella coda degli elementi pronti (se presente) è consentito per assumere il controllo del blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-533">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="ce991-534">Il thread che ha richiamato `Wait` richiama un thread che contiene il blocco rimane nella coda di attesa fino al completamento <xref:System.Threading.Monitor.PulseAll%2A>, o è il successivo nella coda e un thread che contiene il blocco richiama <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="ce991-534">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="ce991-535">Tuttavia, se `millisecondsTimeout` scade prima che un altro thread richiama questo oggetto <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A> metodo, il thread originale viene spostato nella coda degli elementi pronti per riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-535">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ce991-536">Se <xref:System.Threading.Timeout.Infinite> viene specificato per il `millisecondsTimeout` parametro, questo metodo si blocca per un periodo illimitato, a meno che il proprietario del blocco chiama <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="ce991-536">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="ce991-537">Se `millisecondsTimeout` è uguale a 0, il thread che chiama `Wait` rilascia il blocco e viene inserito immediatamente nella coda degli elementi pronti per riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-537">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="ce991-538">Il chiamante esegue `Wait` una volta, indipendentemente dal numero di volte in cui <xref:System.Threading.Monitor.Enter%2A> è stato richiamato per l'oggetto specificato.</span><span class="sxs-lookup"><span data-stu-id="ce991-538">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="ce991-539">Concettualmente, la `Wait` metodo memorizza il numero di volte in cui viene richiamato il chiamante <xref:System.Threading.Monitor.Enter%2A> sull'oggetto e richiama <xref:System.Threading.Monitor.Exit%2A> tutte le volte necessarie per ottenere il rilascio dell'oggetto bloccato.</span><span class="sxs-lookup"><span data-stu-id="ce991-539">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="ce991-540">Il chiamante si bloccherà durante l'attesa dovrà quindi riacquisire l'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-540">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="ce991-541">Quando il chiamante riacquisisce il blocco, il sistema chiama <xref:System.Threading.Monitor.Enter%2A> tutte le volte necessarie per ripristinare il salvato <xref:System.Threading.Monitor.Enter%2A> conteggio per il chiamante.</span><span class="sxs-lookup"><span data-stu-id="ce991-541">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="ce991-542">La chiamata a `Wait` rilascia il blocco per l'oggetto specificato solo se il chiamante è il proprietario di blocchi su altri oggetti, tali blocchi non vengono rilasciati.</span><span class="sxs-lookup"><span data-stu-id="ce991-542">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ce991-543">Un oggetto sincronizzato contiene riferimenti a diversi, tra cui un riferimento al thread che attualmente detiene il blocco, un riferimento alla coda degli elementi pronti, che contiene i thread pronti ottenere il blocco, e un riferimento alla coda di attesa, che contiene il thread in attesa per la notifica di modifica dello stato dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-543">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="ce991-544">Il <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, e `Wait` metodi devono essere richiamati all'interno di un blocco di codice sincronizzato.</span><span class="sxs-lookup"><span data-stu-id="ce991-544">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="ce991-545">La sezione Osservazioni per il <xref:System.Threading.Monitor.Pulse%2A> metodo spiegano che cosa accade se <xref:System.Threading.Monitor.Pulse%2A> viene chiamato quando nessun thread in attesa.</span><span class="sxs-lookup"><span data-stu-id="ce991-545">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="ce991-546">Note sull'uscita dal contesto</span><span class="sxs-lookup"><span data-stu-id="ce991-546">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="ce991-547">Il`exitContext` parametro ha effetto solo se il <xref:System.Threading.Monitor.Wait%2A> metodo chiamato dall'interno di un contesto gestito.</span><span class="sxs-lookup"><span data-stu-id="ce991-547">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="ce991-548">Questa situazione può verificarsi se il thread si trova all'interno di una chiamata a un'istanza di una classe derivata da <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="ce991-548">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="ce991-549">Anche se un metodo attualmente in esecuzione in una classe che non è derivata da <xref:System.ContextBoundObject>, ad esempio <xref:System.String>, è possibile essere in un contesto non predefinite se un <xref:System.ContextBoundObject> nello stack nel dominio dell'applicazione corrente.</span><span class="sxs-lookup"><span data-stu-id="ce991-549">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="ce991-550">Quando il codice è in esecuzione in un contesto non predefinito, che specifica `true` per `exitContext` fa sì che il thread esce dal contesto gestito (vale a dire, per eseguire la transizione al contesto predefinito) prima di eseguire il <xref:System.Threading.Monitor.Wait%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="ce991-550">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="ce991-551">Restituisce il contesto originale non predefinita dopo la chiamata al <xref:System.Threading.Monitor.Wait%2A> metodo viene completato.</span><span class="sxs-lookup"><span data-stu-id="ce991-551">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="ce991-552">Ciò può essere utile quando la classe associata al contesto presenta la <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attributo viene applicato.</span><span class="sxs-lookup"><span data-stu-id="ce991-552">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="ce991-553">In tal caso, tutte le chiamate ai membri della classe sono automaticamente sincronizzate e il dominio di sincronizzazione è l'intero corpo del codice per la classe.</span><span class="sxs-lookup"><span data-stu-id="ce991-553">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="ce991-554">Se nello stack di chiamate di un membro codice chiama il <xref:System.Threading.Monitor.Wait%2A> (metodo) e specifica `true` per `exitContext`, il thread esce dal dominio di sincronizzazione, consentendo a un thread bloccato in una chiamata a qualsiasi membro dell'oggetto per continuare.</span><span class="sxs-lookup"><span data-stu-id="ce991-554">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="ce991-555">Quando il <xref:System.Threading.Monitor.Wait%2A> metodo viene restituito, il thread che ha effettuato la chiamata deve attendere per immettere di nuovo il dominio di sincronizzazione.</span><span class="sxs-lookup"><span data-stu-id="ce991-555">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ce991-556">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-556">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="ce991-557">
            <see langword="Wait" /> non viene richiamato dall'interno di un blocco di codice sincronizzato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-557">
              <see langword="Wait" /> is not invoked from within a synchronized block of code.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="ce991-558">Il thread da cui è stato richiamato <see langword="Wait" /> viene interrotto in seguito dallo stato di attesa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-558">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="ce991-559">L'interruzione si verifica quando il metodo <see cref="M:System.Threading.Thread.Interrupt" /> di questo thread viene chiamato da un altro thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-559">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ce991-560">Il valore del parametro <paramref name="millisecondsTimeout" /> è negativo e non è uguale a <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-560">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="ce991-561">Threading gestito</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-561">Managed Threading</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="ce991-562">Oggetto per il quale attendere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-562">The object on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="ce991-563">Oggetto <see cref="T:System.TimeSpan" /> che rappresenta il tempo di attesa prima che il thread venga inserito nella coda di thread pronti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-563">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="ce991-564">
            <see langword="true" /> per uscire e riacquisire il dominio di sincronizzazione per il contesto, se si trova in un contesto sincronizzato, prima dell'attesa; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-564">
              <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ce991-565">Rilascia il blocco su un oggetto e interrompe il thread corrente finché riacquisisce il blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-565">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="ce991-566">Allo scadere dell'intervallo di timeout specificato, il thread viene inserito nella coda di thread pronti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-566">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
          <span data-ttu-id="ce991-567">Esce eventualmente dal dominio di sincronizzazione per il contesto di sincronizzazione prima dell'attesa e riacquisisce il dominio in un secondo momento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-567">Optionally exits the synchronization domain for the synchronized context before the wait and reacquires the domain afterward.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ce991-568">
            <see langword="true" /> se il blocco è stato riacquisito prima che sia trascorso il tempo specificato; <see langword="false" /> se il blocco è stato riacquisito dopo che è trascorso il tempo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-568">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="ce991-569">Il metodo non restituisce alcun valore finché il blocco non viene riacquisito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-569">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce991-570">Questo metodo non restituisce finché riacquisisce il blocco esclusivo su di `obj` parametro.</span><span class="sxs-lookup"><span data-stu-id="ce991-570">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="ce991-571">Questo metodo viene richiamato dal thread che possiede attualmente il blocco sull'oggetto specificato per rilasciare l'oggetto in modo che un altro thread possa accedervi.</span><span class="sxs-lookup"><span data-stu-id="ce991-571">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="ce991-572">Il chiamante è bloccato mentre attende di riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-572">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="ce991-573">Questo metodo viene chiamato quando il chiamante deve attendere un cambiamento di stato che si verifica in seguito a operazioni di un altro thread.</span><span class="sxs-lookup"><span data-stu-id="ce991-573">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="ce991-574">Il timeout garantisce che il thread corrente non blocca all'infinito se un altro thread rilascia il blocco senza chiamare prima il <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="ce991-574">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="ce991-575">Sposta inoltre i thread nella coda pronti, ignorando gli altri thread precederlo nella coda di attesa, in modo che possibile riacquisire il blocco prima.</span><span class="sxs-lookup"><span data-stu-id="ce991-575">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="ce991-576">Il thread può verificare il valore restituito del <xref:System.Threading.Monitor.Wait%2A> metodo per determinare se ha riacquisito il blocco prima del timeout. Il thread può valutare le condizioni che hanno causato lo stato di attesa, e, se necessario, chiamare il <xref:System.Threading.Monitor.Wait%2A> metodo nuovamente.</span><span class="sxs-lookup"><span data-stu-id="ce991-576">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="ce991-577">Quando un thread chiama `Wait`, rilascia il blocco e venga inserito nella coda di attesa.</span><span class="sxs-lookup"><span data-stu-id="ce991-577">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="ce991-578">A questo punto, il thread successivo nella coda degli elementi pronti (se presente) è consentito per assumere il controllo del blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-578">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="ce991-579">Il thread che ha richiamato `Wait` richiama un thread che contiene il blocco rimane nella coda di attesa fino al completamento <xref:System.Threading.Monitor.PulseAll%2A>, o è il successivo nella coda e un thread che contiene il blocco richiama <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="ce991-579">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="ce991-580">Tuttavia, se `timeout` trascorre prima che un altro thread richiama questo oggetto <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A> metodo, il thread originale viene spostato nella coda degli elementi pronti per riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-580">However, if `timeout` milliseconds elapse before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ce991-581">Se un <xref:System.TimeSpan> che rappresenta-1 millisecondo specificato per il `timeout` parametro, questo metodo si blocca per un periodo illimitato, a meno che il proprietario del blocco chiama <xref:System.Threading.Monitor.Pulse%2A> o <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="ce991-581">If a <xref:System.TimeSpan> representing -1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="ce991-582">Se `timeout` è pari a 0 millisecondi, il thread che chiama `Wait` rilascia il blocco e viene inserito immediatamente nella coda degli elementi pronti per riacquisire il blocco.</span><span class="sxs-lookup"><span data-stu-id="ce991-582">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="ce991-583">Il chiamante esegue `Wait` una volta, indipendentemente dal numero di volte in cui <xref:System.Threading.Monitor.Enter%2A> è stato richiamato per l'oggetto specificato.</span><span class="sxs-lookup"><span data-stu-id="ce991-583">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="ce991-584">Concettualmente, la `Wait` metodo memorizza il numero di volte in cui viene richiamato il chiamante <xref:System.Threading.Monitor.Enter%2A> sull'oggetto e richiama <xref:System.Threading.Monitor.Exit%2A> tutte le volte necessarie per ottenere il rilascio dell'oggetto bloccato.</span><span class="sxs-lookup"><span data-stu-id="ce991-584">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="ce991-585">Il chiamante si bloccherà durante l'attesa dovrà quindi riacquisire l'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-585">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="ce991-586">Quando il chiamante riacquisisce il blocco, il sistema chiama <xref:System.Threading.Monitor.Enter%2A> tutte le volte necessarie per ripristinare il salvato <xref:System.Threading.Monitor.Enter%2A> conteggio per il chiamante.</span><span class="sxs-lookup"><span data-stu-id="ce991-586">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="ce991-587">La chiamata a `Wait` rilascia il blocco per l'oggetto specificato solo se il chiamante è il proprietario di blocchi su altri oggetti, tali blocchi non vengono rilasciati.</span><span class="sxs-lookup"><span data-stu-id="ce991-587">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ce991-588">Un oggetto sincronizzato contiene riferimenti a diversi, tra cui un riferimento al thread che attualmente detiene il blocco, un riferimento alla coda degli elementi pronti, che contiene i thread pronti ottenere il blocco, e un riferimento alla coda di attesa, che contiene il thread in attesa per la notifica di modifica dello stato dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ce991-588">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="ce991-589">Il <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, e `Wait` metodi devono essere richiamati all'interno di un blocco di codice sincronizzato.</span><span class="sxs-lookup"><span data-stu-id="ce991-589">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="ce991-590">La sezione Osservazioni per il <xref:System.Threading.Monitor.Pulse%2A> metodo spiegano che cosa accade se <xref:System.Threading.Monitor.Pulse%2A> viene chiamato quando nessun thread in attesa.</span><span class="sxs-lookup"><span data-stu-id="ce991-590">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="ce991-591">Note sull'uscita dal contesto</span><span class="sxs-lookup"><span data-stu-id="ce991-591">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="ce991-592">Il`exitContext` parametro ha effetto solo se il <xref:System.Threading.Monitor.Wait%2A> metodo chiamato dall'interno di un contesto gestito.</span><span class="sxs-lookup"><span data-stu-id="ce991-592">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="ce991-593">Questa situazione può verificarsi se il thread si trova all'interno di una chiamata a un'istanza di una classe derivata da <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="ce991-593">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="ce991-594">Anche se un metodo attualmente in esecuzione in una classe che non è derivata da <xref:System.ContextBoundObject>, ad esempio <xref:System.String>, è possibile essere in un contesto non predefinite se un <xref:System.ContextBoundObject> nello stack nel dominio dell'applicazione corrente.</span><span class="sxs-lookup"><span data-stu-id="ce991-594">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="ce991-595">Quando il codice è in esecuzione in un contesto non predefinito, che specifica `true` per `exitContext` fa sì che il thread esce dal contesto gestito (vale a dire, per eseguire la transizione al contesto predefinito) prima di eseguire il <xref:System.Threading.Monitor.Wait%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="ce991-595">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="ce991-596">Restituisce il contesto originale non predefinita dopo la chiamata al <xref:System.Threading.Monitor.Wait%2A> metodo viene completato.</span><span class="sxs-lookup"><span data-stu-id="ce991-596">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="ce991-597">Ciò può essere utile quando la classe associata al contesto presenta la <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attributo viene applicato.</span><span class="sxs-lookup"><span data-stu-id="ce991-597">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="ce991-598">In tal caso, tutte le chiamate ai membri della classe sono automaticamente sincronizzate e il dominio di sincronizzazione è l'intero corpo del codice per la classe.</span><span class="sxs-lookup"><span data-stu-id="ce991-598">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="ce991-599">Se nello stack di chiamate di un membro codice chiama il <xref:System.Threading.Monitor.Wait%2A> (metodo) e specifica `true` per `exitContext`, il thread esce dal dominio di sincronizzazione, consentendo a un thread bloccato in una chiamata a qualsiasi membro dell'oggetto per continuare.</span><span class="sxs-lookup"><span data-stu-id="ce991-599">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="ce991-600">Quando il <xref:System.Threading.Monitor.Wait%2A> metodo viene restituito, il thread che ha effettuato la chiamata deve attendere per immettere di nuovo il dominio di sincronizzazione.</span><span class="sxs-lookup"><span data-stu-id="ce991-600">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ce991-601">Il valore del parametro <paramref name="obj" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-601">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="ce991-602">
            <see langword="Wait" /> non viene richiamato dall'interno di un blocco di codice sincronizzato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-602">
              <see langword="Wait" /> is not invoked from within a synchronized block of code.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="ce991-603">Il thread da cui è stato richiamato Wait viene interrotto più tardi dallo stato di attesa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-603">The thread that invokes Wait is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="ce991-604">L'interruzione si verifica quando il metodo <see cref="M:System.Threading.Thread.Interrupt" /> di questo thread viene chiamato da un altro thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-604">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="ce991-605">Il parametro <paramref name="timeout" /> è negativo e non rappresenta <see cref="F:System.Threading.Timeout.Infinite" /> (– 1 millisecondo) oppure è maggiore di <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-605">The <paramref name="timeout" /> parameter is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.Monitor" />
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="ce991-606">Threading gestito</span>
          <span class="sxs-lookup">
            <span data-stu-id="ce991-606">Managed Threading</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>