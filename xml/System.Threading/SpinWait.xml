<Type Name="SpinWait" FullName="System.Threading.SpinWait">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f6c385202d641d465586dc3206f02b247b2d6170" />
    <Meta Name="ms.sourcegitcommit" Value="d0bb31ec8354fa58c62c2a646057eec11d3e2150" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/17/2018" />
    <Meta Name="ms.locfileid" Value="36605799" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct SpinWait" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SpinWait extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SpinWait" />
  <TypeSignature Language="VB.NET" Value="Public Structure SpinWait" />
  <TypeSignature Language="C++ CLI" Value="public value class SpinWait" />
  <TypeSignature Language="F#" Value="type SpinWait = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce il supporto per l'attesa basata su rotazione.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.SpinWait> incapsula la logica di rotazione comune. Nei computer a processore singolo, produce vengono sempre utilizzati invece attese occupate e nei computer con processori Intel basati su tecnologia Hyper-Threading, consente di evitare l'esaurimento dei thread hardware. SpinWait incapsula una combinazione ottima di rotazione e resa effettiva.  
  
 <xref:System.Threading.SpinWait> è un tipo di valore che indica che il codice di basso livello possa utilizzare SpinWait senza timore di costi generali di allocazione non necessaria. SpinWait non è in genere utile per le applicazioni comuni. Nella maggior parte dei casi, è consigliabile usare le classi di sincronizzazione fornite da .NET Framework, ad esempio <xref:System.Threading.Monitor>. Maggior parte dei casi in cui in attesa di selezione è necessario, tuttavia, il <xref:System.Threading.SpinWait> il tipo deve essere preferito rispetto di <xref:System.Threading.Thread.SpinWait%2A> (metodo).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare un <xref:System.Threading.SpinWait>:  
  
 [!code-csharp[System.Threading.SpinWait#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.spinwait/cs/spinwait.cs#01)]
 [!code-vb[System.Threading.SpinWait#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.spinwait/vb/spinwait.vb#01)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Mentre <see cref="T:System.Threading.SpinWait" /> è progettato per essere usato nelle applicazioni concorrenti, non è progettato per essere usati da più thread contemporaneamente. <see cref="T:System.Threading.SpinWait" /> i membri non sono thread-safe. Se è necessario avviare più thread, ognuno deve usare la propria istanza di <see cref="T:System.Threading.SpinWait" />.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinWait.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Threading.SpinWait.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il numero di chiamate di <see cref="M:System.Threading.SpinWait.SpinOnce" /> su questa istanza.</summary>
        <value>Restituisce un intero che rappresenta il numero di volte in cui <see cref="M:System.Threading.SpinWait.SpinOnce" /> è stato chiamato su questa istanza.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSpinWillYield">
      <MemberSignature Language="C#" Value="public bool NextSpinWillYield { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NextSpinWillYield" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinWait.NextSpinWillYield" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextSpinWillYield As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NextSpinWillYield { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.NextSpinWillYield : bool" Usage="System.Threading.SpinWait.NextSpinWillYield" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se la chiamata successiva a <see cref="M:System.Threading.SpinWait.SpinOnce" /> comporterà la cessione del processore, attivando un cambio imposto di contesto.</summary>
        <value>Valore che indica se la chiamata successiva a <see cref="M:System.Threading.SpinWait.SpinOnce" /> comporterà la cessione del processore, attivando un cambio imposto di contesto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In un computer a CPU singola <xref:System.Threading.SpinWait.SpinOnce%2A> genera sempre il processore. Nei computer con più CPU, <xref:System.Threading.SpinWait.SpinOnce%2A> risultati dopo un numero specificato di chiamate.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="spinWait.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reimposta il contatore delle rotazioni.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In questo modo <xref:System.Threading.SpinWait.SpinOnce%2A> e <xref:System.Threading.SpinWait.NextSpinWillYield%2A> si comporti come se nessuna chiamata a <xref:System.Threading.SpinWait.SpinOnce%2A> fosse stata eseguita in questa istanza. Se un <xref:System.Threading.SpinWait> istanza viene riutilizzata più volte, può essere utile eseguire questa operazione per evitare cede il controllo troppo presto.  
  
   
  
## Examples  
 Di seguito è riportato un esempio dell'uso SpinWait in un'implementazione semplice dello stack senza blocco. (Questo è solo un esempio. Se uno stack thread-safe efficiente, è necessario, è consigliabile usare ConcurrentStack.)  
  
 `// C#`  
  
 `public class LockFreeStack<T>`  
  
 `{`  
  
 `private volatile Node m_head;`  
  
 `private class Node { public Node Next; public T Value; }`  
  
 `public void Push(T item)`  
  
 `{`  
  
 `var spin = new SpinWait();`  
  
 `Node node = new Node { Value = item }, head;`  
  
 `while (true)`  
  
 `{`  
  
 `head = m_head;`  
  
 `node.Next = head;`  
  
 `if (Interlocked.CompareExchange(ref m_head, node, head) == head) break;`  
  
 `spin.SpinOnce();`  
  
 `}`  
  
 `}`  
  
 `public bool TryPop(out T result)`  
  
 `{`  
  
 `result = default(T);`  
  
 `var spin = new SpinWait();`  
  
 `Node head;`  
  
 `while (true)`  
  
 `{`  
  
 `head = m_head;`  
  
 `if (head == null) return false;`  
  
 `if (Interlocked.CompareExchange(ref m_head, head.Next, head) == head)`  
  
 `{`  
  
 `result = head.Value;`  
  
 `return true;`  
  
 `}`  
  
 `spin.SpinOnce();`  
  
 `}`  
  
 `}`  
  
 `}`  
  
 `' Visual Basic`  
  
 `Public Class LockFreeStack(Of T)`  
  
 `Private m_head As Node`  
  
 `Private Class Node`  
  
 `Public [Next] As Node`  
  
 `Public Value As T`  
  
 `End Class`  
  
 `Public Sub Push(ByVal item As T)`  
  
 `Dim spin As New SpinWait()`  
  
 `Dim head As Node, node As New Node With {.Value = item}`  
  
 `While True`  
  
 `Thread.MemoryBarrier()`  
  
 `head = m_head`  
  
 `node.Next = head`  
  
 `If Interlocked.CompareExchange(m_head, node, head) Is head Then Exit While`  
  
 `spin.SpinOnce()`  
  
 `End While`  
  
 `End Sub`  
  
 `Public Function TryPop(ByRef result As T) As Boolean`  
  
 `result = CType(Nothing, T)`  
  
 `Dim spin As New SpinWait()`  
  
 `Dim head As Node`  
  
 `While True`  
  
 `Thread.MemoryBarrier()`  
  
 `head = m_head`  
  
 `If head Is Nothing Then Return False`  
  
 `If Interlocked.CompareExchange(m_head, head.Next, head) Is head Then`  
  
 `result = head.Value`  
  
 `Return True`  
  
 `End If`  
  
 `spin.SpinOnce()`  
  
 `End While`  
  
 `End Function`  
  
 `End Class`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpinOnce">
      <MemberSignature Language="C#" Value="public void SpinOnce ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpinOnce() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinOnce" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpinOnce ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpinOnce();" />
      <MemberSignature Language="F#" Value="member this.SpinOnce : unit -&gt; unit" Usage="spinWait.SpinOnce " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Esegue una sola rotazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciò in genere viene chiamato in un ciclo e può cambiare comportamento in base al numero di volte in cui un <xref:System.Threading.SpinWait.SpinOnce%2A> è stato chiamato fino a quel momento in questa istanza. Ogni selezione comporta il <xref:System.Threading.Thread.SpinWait%2A> metodo chiamato. Viene mantenuto un conteggio del numero di volte <xref:System.Threading.SpinWait.SpinOnce%2A> viene chiamato, e dopo che un conteggio di soglia viene raggiunta, il <xref:System.Threading.Thread.Yield%2A> viene chiamato il metodo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SpinUntil">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Esegue rotazioni finché non è stata soddisfatta la condizione specificata.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SpinUntil">
      <MemberSignature Language="C#" Value="public static void SpinUntil (Func&lt;bool&gt; condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SpinUntil(class System.Func`1&lt;bool&gt; condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SpinUntil (condition As Func(Of Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SpinUntil(Func&lt;bool&gt; ^ condition);" />
      <MemberSignature Language="F#" Value="static member SpinUntil : Func&lt;bool&gt; -&gt; unit" Usage="System.Threading.SpinWait.SpinUntil condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Func&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="condition">Delegato da eseguire ripetutamente finché non restituisce true.</param>
        <summary>Esegue rotazioni finché non è stata soddisfatta la condizione specificata.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">L'argomento <paramref name="condition" /> è Null.</exception>
      </Docs>
    </Member>
    <Member MemberName="SpinUntil">
      <MemberSignature Language="C#" Value="public static bool SpinUntil (Func&lt;bool&gt; condition, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SpinUntil(class System.Func`1&lt;bool&gt; condition, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpinUntil (condition As Func(Of Boolean), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SpinUntil(Func&lt;bool&gt; ^ condition, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member SpinUntil : Func&lt;bool&gt; * int -&gt; bool" Usage="System.Threading.SpinWait.SpinUntil (condition, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Func&lt;System.Boolean&gt;" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="condition">Delegato da eseguire ripetutamente finché non restituisce true.</param>
        <param name="millisecondsTimeout">Numero di millisecondi di attesa oppure <see cref="F:System.Threading.Timeout.Infinite" /> (-1) per un'attesa indefinita.</param>
        <summary>Esegue rotazioni finché non è stata soddisfatta la condizione specificata o fino allo scadere del timeout specificato.</summary>
        <returns>True se la condizione viene soddisfatta entro lo scadere del timeout. In caso contrario, False.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">L'argomento <paramref name="condition" /> è Null.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="millisecondsTimeout" /> è un numero negativo diverso da -1, che rappresenta un timeout infinito.</exception>
      </Docs>
    </Member>
    <Member MemberName="SpinUntil">
      <MemberSignature Language="C#" Value="public static bool SpinUntil (Func&lt;bool&gt; condition, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SpinUntil(class System.Func`1&lt;bool&gt; condition, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpinUntil (condition As Func(Of Boolean), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SpinUntil(Func&lt;bool&gt; ^ condition, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member SpinUntil : Func&lt;bool&gt; * TimeSpan -&gt; bool" Usage="System.Threading.SpinWait.SpinUntil (condition, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Func&lt;System.Boolean&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="condition">Delegato da eseguire ripetutamente finché non restituisce true.</param>
        <param name="timeout">Oggetto <see cref="T:System.TimeSpan" /> che rappresenta il numero di millisecondi di attesa. In alternativa, per un'attesa indefinita, oggetto TimeSpan che rappresenta -1 millisecondi.</param>
        <summary>Esegue rotazioni finché non è stata soddisfatta la condizione specificata o fino allo scadere del timeout specificato.</summary>
        <returns>True se la condizione viene soddisfatta entro lo scadere del timeout. In caso contrario, False.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">L'argomento <paramref name="condition" /> è Null.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> è un numero negativo diverso da -1 millisecondi che rappresenta un timeout infinito - o - il timeout è più grande di <see cref="F:System.Int32.MaxValue" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>