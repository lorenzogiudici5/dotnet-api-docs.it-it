<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6bd57be7d0b7a3e06e014afa452e4dadda84883c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30527805" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="60974-101">Notifica a uno o più thread in attesa che si è verificato un evento.</span>
      <span class="sxs-lookup">
        <span data-stu-id="60974-101">Notifies one or more waiting threads that an event has occurred.</span>
      </span>
      <span data-ttu-id="60974-102">Questa classe non può essere ereditata.</span>
      <span class="sxs-lookup">
        <span data-stu-id="60974-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60974-103">In .NET Framework versione 2.0, <xref:System.Threading.ManualResetEvent> deriva dalla nuova <xref:System.Threading.EventWaitHandle> classe.</span><span class="sxs-lookup"><span data-stu-id="60974-103">In the .NET Framework version 2.0, <xref:System.Threading.ManualResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="60974-104">Oggetto <xref:System.Threading.ManualResetEvent> è funzionalmente equivalente a un <xref:System.Threading.EventWaitHandle> creato con <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="60974-104">A <xref:System.Threading.ManualResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60974-105">A differenza di <xref:System.Threading.ManualResetEvent> (classe), la <xref:System.Threading.EventWaitHandle> classe fornisce accesso agli eventi di sincronizzazione di sistema denominati.</span><span class="sxs-lookup"><span data-stu-id="60974-105">Unlike the <xref:System.Threading.ManualResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
 <span data-ttu-id="60974-106"><xref:System.Threading.ManualResetEvent> consente ai thread di comunicare tra loro mediante la segnalazione.</span><span class="sxs-lookup"><span data-stu-id="60974-106"><xref:System.Threading.ManualResetEvent> allows threads to communicate with each other by signaling.</span></span> <span data-ttu-id="60974-107">In genere, la presente comunicazione riguarda un'attività che un thread necessario completare prima di procedere altri thread.</span><span class="sxs-lookup"><span data-stu-id="60974-107">Typically, this communication concerns a task which one thread must complete before other threads can proceed.</span></span>  
  
 <span data-ttu-id="60974-108">Quando un thread avvia un'attività che deve essere completata prima di altri thread di procedere, viene chiamato <xref:System.Threading.EventWaitHandle.Reset%2A> inserire `ManualResetEvent` nello stato non segnalato.</span><span class="sxs-lookup"><span data-stu-id="60974-108">When a thread begins an activity that must complete before other threads proceed, it calls <xref:System.Threading.EventWaitHandle.Reset%2A> to put `ManualResetEvent` in the non-signaled state.</span></span> <span data-ttu-id="60974-109">Il thread può essere considerato come il controllo di `ManualResetEvent`.</span><span class="sxs-lookup"><span data-stu-id="60974-109">This thread can be thought of as controlling the `ManualResetEvent`.</span></span> <span data-ttu-id="60974-110">Thread che chiamano <xref:System.Threading.WaitHandle.WaitOne%2A> sul `ManualResetEvent` verrà bloccata, l'attesa del segnale.</span><span class="sxs-lookup"><span data-stu-id="60974-110">Threads that call <xref:System.Threading.WaitHandle.WaitOne%2A> on the `ManualResetEvent` will block, awaiting the signal.</span></span> <span data-ttu-id="60974-111">Quando il thread di controllo viene completata l'attività, chiama <xref:System.Threading.EventWaitHandle.Set%2A> per segnalare che il thread in attesa può procedere.</span><span class="sxs-lookup"><span data-stu-id="60974-111">When the controlling thread completes the activity, it calls <xref:System.Threading.EventWaitHandle.Set%2A> to signal that the waiting threads can proceed.</span></span> <span data-ttu-id="60974-112">Vengono rilasciati tutti i thread in attesa.</span><span class="sxs-lookup"><span data-stu-id="60974-112">All waiting threads are released.</span></span>  
  
 <span data-ttu-id="60974-113">Una volta che è stato segnalato, `ManualResetEvent` rimane segnalato fino a quando non viene reimpostato manualmente.</span><span class="sxs-lookup"><span data-stu-id="60974-113">Once it has been signaled, `ManualResetEvent` remains signaled until it is manually reset.</span></span> <span data-ttu-id="60974-114">Ovvero, le chiamate a `WaitOne` restituito immediatamente.</span><span class="sxs-lookup"><span data-stu-id="60974-114">That is, calls to `WaitOne` return immediately.</span></span>  
  
 <span data-ttu-id="60974-115">È possibile controllare lo stato iniziale di un `ManualResetEvent` passando un valore booleano al costruttore, `true` se viene segnalato lo stato iniziale e `false` in caso contrario.</span><span class="sxs-lookup"><span data-stu-id="60974-115">You can control the initial state of a `ManualResetEvent` by passing a Boolean value to the constructor, `true` if the initial state is signaled and `false` otherwise.</span></span>  
  
 <span data-ttu-id="60974-116">`ManualResetEvent` può anche essere utilizzato con il `static` <xref:System.Threading.WaitHandle.WaitAll%2A> e <xref:System.Threading.WaitHandle.WaitAny%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="60974-116">`ManualResetEvent` can also be used with the `static`<xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="60974-117">Per ulteriori informazioni sui meccanismi di sincronizzazione di thread, vedere [ManualResetEvent e ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) nella documentazione concettuale.</span><span class="sxs-lookup"><span data-stu-id="60974-117">For more information about thread synchronization mechanisms, see [ManualResetEvent and ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) in the conceptual documentation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60974-118">Nell'esempio seguente viene illustrato come <xref:System.Threading.ManualResetEvent> funziona.</span><span class="sxs-lookup"><span data-stu-id="60974-118">The following example demonstrates how <xref:System.Threading.ManualResetEvent> works.</span></span> <span data-ttu-id="60974-119">L'esempio inizia con un <xref:System.Threading.ManualResetEvent> nello stato segnalato (vale a dire `false` viene passato al costruttore).</span><span class="sxs-lookup"><span data-stu-id="60974-119">The example starts with a <xref:System.Threading.ManualResetEvent> in the unsignaled state (that is, `false` is passed to the constructor).</span></span> <span data-ttu-id="60974-120">L'esempio crea tre thread, ognuno dei quali si blocca nel <xref:System.Threading.ManualResetEvent> chiamando il relativo <xref:System.Threading.WaitHandle.WaitOne%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="60974-120">The example creates three threads, each of which blocks on the <xref:System.Threading.ManualResetEvent> by calling its <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="60974-121">Quando l'utente preme il **invio** chiave, nell'esempio viene chiamato il <xref:System.Threading.EventWaitHandle.Set%2A> (metodo), che quale rilascia tutti i thread.</span><span class="sxs-lookup"><span data-stu-id="60974-121">When the user presses the **Enter** key, the example calls the <xref:System.Threading.EventWaitHandle.Set%2A> method, which releases all three threads.</span></span> <span data-ttu-id="60974-122">Ciò si differenzia dal comportamento del <xref:System.Threading.AutoResetEvent> (classe), che rilascia i thread uno alla volta, reimpostare automaticamente dopo ogni rilascio.</span><span class="sxs-lookup"><span data-stu-id="60974-122">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class, which releases threads one at a time, resetting automatically after each release.</span></span>  
  
 <span data-ttu-id="60974-123">Premendo il **invio** chiave viene nuovamente illustrato che il <xref:System.Threading.ManualResetEvent> rimane nello stato segnalato fino a quando il relativo <xref:System.Threading.EventWaitHandle.Reset%2A> metodo viene chiamato: viene avviato il thread di altre due.</span><span class="sxs-lookup"><span data-stu-id="60974-123">Pressing the **Enter** key again demonstrates that the <xref:System.Threading.ManualResetEvent> remains in the signaled state until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called: The example starts two more threads.</span></span> <span data-ttu-id="60974-124">Questi thread non blocchino quando chiamano il <xref:System.Threading.WaitHandle.WaitOne%2A> (metodo), ma vengono invece eseguiti fino al completamento.</span><span class="sxs-lookup"><span data-stu-id="60974-124">These threads do not block when they call the <xref:System.Threading.WaitHandle.WaitOne%2A> method, but instead run to completion.</span></span>  
  
 <span data-ttu-id="60974-125">Premendo il **invio** chiave nuovamente fa sì che l'esempio chiama il <xref:System.Threading.EventWaitHandle.Reset%2A> (metodo) e avviare uno o più thread, che si blocca quando viene chiamata <xref:System.Threading.WaitHandle.WaitOne%2A>.</span><span class="sxs-lookup"><span data-stu-id="60974-125">Pressing the **Enter** key again causes the example to call the <xref:System.Threading.EventWaitHandle.Reset%2A> method and to start one more thread, which blocks when it calls <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="60974-126">Premendo il **invio** chiave uno ora finale chiamate <xref:System.Threading.EventWaitHandle.Set%2A> per rilasciare l'ultimo thread e il programma termina.</span><span class="sxs-lookup"><span data-stu-id="60974-126">Pressing the **Enter** key one final time calls <xref:System.Threading.EventWaitHandle.Set%2A> to release the last thread, and the program ends.</span></span>  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="60974-127">Questa classe è thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="60974-127">This class is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">
          <span data-ttu-id="60974-128">Viene restituito <see langword="true" /> per impostare lo stato iniziale su segnalato; <see langword="false" /> per impostare lo stato iniziale su non segnalato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60974-128">
              <see langword="true" /> to set the initial state signaled; <see langword="false" /> to set the initial state to nonsignaled.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="60974-129">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.Threading.ManualResetEvent" /> con un valore Booleano che indica se lo stato iniziale deve essere impostato su segnalato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="60974-129">Initializes a new instance of the <see cref="T:System.Threading.ManualResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60974-130">Se lo stato iniziale di un <xref:System.Threading.ManualResetEvent> viene segnalato (ovvero, se viene creato passando `true` per `initialState`), thread in attesa del <xref:System.Threading.ManualResetEvent> non blocchino.</span><span class="sxs-lookup"><span data-stu-id="60974-130">If the initial state of a <xref:System.Threading.ManualResetEvent> is signaled (that is, if it is created by passing `true` for `initialState`), threads that wait on the <xref:System.Threading.ManualResetEvent> do not block.</span></span> <span data-ttu-id="60974-131">Se lo stato iniziale è impostato su non segnalato, bloccano il thread fino al <xref:System.Threading.EventWaitHandle.Set%2A> metodo viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="60974-131">If the initial state is nonsignaled, threads block until the <xref:System.Threading.EventWaitHandle.Set%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
  </Members>
</Type>