<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ManualResetEvent.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac56bd57be7d0b7a3e06e014afa452e4dadda84883c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6bd57be7d0b7a3e06e014afa452e4dadda84883c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ManualResetEvent">
          <source>Notifies one or more waiting threads that an event has occurred.</source>
          <target state="translated">Notifica a uno o più thread in attesa che si è verificato un evento.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.ManualResetEvent">
          <source>This class cannot be inherited.</source>
          <target state="translated">Questa classe non può essere ereditata.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>In the .NET Framework version 2.0, <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> derives from the new <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class.</source>
          <target state="translated">In .NET Framework versione 2.0, <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> deriva dalla nuova <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>A <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> is functionally equivalent to an <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> created with <ph id="ph3">&lt;xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> è funzionalmente equivalente a un <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> creato con <ph id="ph3">&lt;xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class provides access to named system synchronization events.</source>
          <target state="translated">A differenza di <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> (classe), la <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> classe fornisce accesso agli eventi di sincronizzazione di sistema denominati.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source><ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> allows threads to communicate with each other by signaling.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> consente ai thread di comunicare tra loro mediante la segnalazione.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Typically, this communication concerns a task which one thread must complete before other threads can proceed.</source>
          <target state="translated">In genere, la presente comunicazione riguarda un'attività che un thread necessario completare prima di procedere altri thread.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>When a thread begins an activity that must complete before other threads proceed, it calls <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> to put <ph id="ph2">`ManualResetEvent`</ph> in the non-signaled state.</source>
          <target state="translated">Quando un thread avvia un'attività che deve essere completata prima di altri thread di procedere, viene chiamato <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> inserire <ph id="ph2">`ManualResetEvent`</ph> nello stato non segnalato.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>This thread can be thought of as controlling the <ph id="ph1">`ManualResetEvent`</ph>.</source>
          <target state="translated">Il thread può essere considerato come il controllo di <ph id="ph1">`ManualResetEvent`</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Threads that call <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> on the <ph id="ph2">`ManualResetEvent`</ph> will block, awaiting the signal.</source>
          <target state="translated">Thread che chiamano <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> sul <ph id="ph2">`ManualResetEvent`</ph> verrà bloccata, l'attesa del segnale.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>When the controlling thread completes the activity, it calls <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> to signal that the waiting threads can proceed.</source>
          <target state="translated">Quando il thread di controllo viene completata l'attività, chiama <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> per segnalare che il thread in attesa può procedere.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>All waiting threads are released.</source>
          <target state="translated">Vengono rilasciati tutti i thread in attesa.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Once it has been signaled, <ph id="ph1">`ManualResetEvent`</ph> remains signaled until it is manually reset.</source>
          <target state="translated">Una volta che è stato segnalato, <ph id="ph1">`ManualResetEvent`</ph> rimane segnalato fino a quando non viene reimpostato manualmente.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>That is, calls to <ph id="ph1">`WaitOne`</ph> return immediately.</source>
          <target state="translated">Ovvero, le chiamate a <ph id="ph1">`WaitOne`</ph> restituito immediatamente.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>You can control the initial state of a <ph id="ph1">`ManualResetEvent`</ph> by passing a Boolean value to the constructor, <ph id="ph2">`true`</ph> if the initial state is signaled and <ph id="ph3">`false`</ph> otherwise.</source>
          <target state="translated">È possibile controllare lo stato iniziale di un <ph id="ph1">`ManualResetEvent`</ph> passando un valore booleano al costruttore, <ph id="ph2">`true`</ph> se viene segnalato lo stato iniziale e <ph id="ph3">`false`</ph> in caso contrario.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source><ph id="ph1">`ManualResetEvent`</ph> can also be used with the <ph id="ph2">`static`</ph><ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">`ManualResetEvent`</ph> può anche essere utilizzato con il <ph id="ph2">`static`</ph> <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> e <ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> metodi.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>For more information about thread synchronization mechanisms, see <bpt id="p1">[</bpt>ManualResetEvent and ManualResetEventSlim<ept id="p1">](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md)</ept> in the conceptual documentation.</source>
          <target state="translated">Per ulteriori informazioni sui meccanismi di sincronizzazione di thread, vedere <bpt id="p1">[</bpt>ManualResetEvent e ManualResetEventSlim<ept id="p1">](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md)</ept> nella documentazione concettuale.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>The following example demonstrates how <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> works.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> funziona.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>The example starts with a <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> in the unsignaled state (that is, <ph id="ph2">`false`</ph> is passed to the constructor).</source>
          <target state="translated">L'esempio inizia con un <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> nello stato segnalato (vale a dire <ph id="ph2">`false`</ph> viene passato al costruttore).</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>The example creates three threads, each of which blocks on the <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> by calling its <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">L'esempio crea tre thread, ognuno dei quali si blocca nel <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> chiamando il relativo <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>When the user presses the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key, the example calls the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method, which releases all three threads.</source>
          <target state="translated">Quando l'utente preme il <bpt id="p1">**</bpt>invio<ept id="p1">**</ept> chiave, nell'esempio viene chiamato il <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> (metodo), che quale rilascia tutti i thread.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Contrast this with the behavior of the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> class, which releases threads one at a time, resetting automatically after each release.</source>
          <target state="translated">Ciò si differenzia dal comportamento del <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> (classe), che rilascia i thread uno alla volta, reimpostare automaticamente dopo ogni rilascio.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Pressing the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key again demonstrates that the <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> remains in the signaled state until its <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> method is called: The example starts two more threads.</source>
          <target state="translated">Premendo il <bpt id="p1">**</bpt>invio<ept id="p1">**</ept> chiave viene nuovamente illustrato che il <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> rimane nello stato segnalato fino a quando il relativo <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> metodo viene chiamato: viene avviato il thread di altre due.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>These threads do not block when they call the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method, but instead run to completion.</source>
          <target state="translated">Questi thread non blocchino quando chiamano il <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> (metodo), ma vengono invece eseguiti fino al completamento.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Pressing the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key again causes the example to call the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> method and to start one more thread, which blocks when it calls <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>.</source>
          <target state="translated">Premendo il <bpt id="p1">**</bpt>invio<ept id="p1">**</ept> chiave nuovamente fa sì che l'esempio chiama il <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> (metodo) e avviare uno o più thread, che si blocca quando viene chiamata <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Pressing the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key one final time calls <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> to release the last thread, and the program ends.</source>
          <target state="translated">Premendo il <bpt id="p1">**</bpt>invio<ept id="p1">**</ept> chiave uno ora finale chiamate <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> per rilasciare l'ultimo thread e il programma termina.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>This class is thread safe.</source>
          <target state="translated">Questa classe è thread-safe.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to set the initial state signaled; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to set the initial state to nonsignaled.</source>
          <target state="translated">Viene restituito <ph id="ph1">&lt;see langword="true" /&gt;</ph> per impostare lo stato iniziale su segnalato; <ph id="ph2">&lt;see langword="false" /&gt;</ph> per impostare lo stato iniziale su non segnalato.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEvent" /&gt;</ph> class with a Boolean value indicating whether to set the initial state to signaled.</source>
          <target state="translated">Consente l'inizializzazione di una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEvent" /&gt;</ph> con un valore Booleano che indica se lo stato iniziale deve essere impostato su segnalato.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
          <source>If the initial state of a <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> is signaled (that is, if it is created by passing <ph id="ph2">`true`</ph> for <ph id="ph3">`initialState`</ph>), threads that wait on the <ph id="ph4">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> do not block.</source>
          <target state="translated">Se lo stato iniziale di un <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> viene segnalato (ovvero, se viene creato passando <ph id="ph2">`true`</ph> per <ph id="ph3">`initialState`</ph>), thread in attesa del <ph id="ph4">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> non blocchino.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
          <source>If the initial state is nonsignaled, threads block until the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method is called.</source>
          <target state="translated">Se lo stato iniziale è impostato su non segnalato, bloccano il thread fino al <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> metodo viene chiamato.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>