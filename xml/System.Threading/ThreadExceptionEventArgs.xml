<Type Name="ThreadExceptionEventArgs" FullName="System.Threading.ThreadExceptionEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a54cf75e4e0c0ef07c0b66ac63e218532b41785d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30527515" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ThreadExceptionEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ThreadExceptionEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadExceptionEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class ThreadExceptionEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadExceptionEventArgs : EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce dati per l'evento <see cref="E:System.Windows.Forms.Application.ThreadException" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Threading.ThreadExceptionEventArgs> viene creato da un thread quando si verifica un'eccezione non gestita. <xref:System.Threading.ThreadExceptionEventArgs> contiene il <xref:System.Exception> che si è verificato.  
  
   
  
## Examples  
 Nell'esempio seguente consente di generare un <xref:System.Windows.Forms.Application.ThreadException> evento facendo `button1` in un form. L'esempio crea due classi. La `ErrorHandler` classe crea il form e il pulsante che genera l'evento. La `CustomExceptionHandler` classe fornisce i metodi per gestire l'eccezione.  
  
 In `Main` nel `ErrorHandler` (classe), il codice crea una nuova istanza della gestione delle eccezioni (classe), vale a dire, un'istanza di `CustomExceptionHandler`. Quindi l'istanza viene aggiunto all'evento e viene eseguita l'applicazione.  
  
 Nel `OnThreadException` metodo il `CustomExceptionHandler` (classe), nell'esempio viene utilizzato un `try...catch...finally` istruzione per elaborare l'eccezione. Il `ShowThreadExceptionDialog` metodo crea il messaggio da visualizzare e lo visualizza in una finestra di messaggio.  
  
 [!code-csharp[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.ThreadExceptionEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThreadExceptionEventArgs (Exception t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (t As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ThreadExceptionEventArgs(Exception ^ t);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="t" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="t">
          <see cref="T:System.Exception" /> generata.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Threading.ThreadExceptionEventArgs" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente consente di generare un <xref:System.Windows.Forms.Application.ThreadException> evento facendo `button1` in un form. L'esempio crea due classi. La `ErrorHandler` classe crea il form e il pulsante che genera l'evento. La `CustomExceptionHandler` classe fornisce i metodi per gestire l'eccezione.  
  
 In `Main` nel `ErrorHandler` (classe), il codice crea una nuova istanza della gestione delle eccezioni (classe), vale a dire, un'istanza di `CustomExceptionHandler`. Quindi l'istanza viene aggiunto all'evento e viene eseguita l'applicazione.  
  
 Nel `OnThreadException` metodo il `CustomExceptionHandler` (classe), nell'esempio viene utilizzato un `try...catch...finally` istruzione per elaborare l'eccezione. Il `ShowThreadExceptionDialog` metodo crea il messaggio da visualizzare e lo visualizza in una finestra di messaggio.  
  
 [!code-csharp[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="T:System.Threading.ThreadStart" />
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadExceptionEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Exception" /> che si è verificato.</summary>
        <value>
          <see cref="T:System.Exception" /> generata.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente consente di generare un <xref:System.Windows.Forms.Application.ThreadException> evento facendo `button1` in un form. L'esempio crea due classi. La `ErrorHandler` classe crea il form e il pulsante che genera l'evento. La `CustomExceptionHandler` classe fornisce i metodi per gestire l'eccezione.  
  
 In `Main` nel `ErrorHandler` (classe), il codice crea una nuova istanza della gestione delle eccezioni (classe), vale a dire, un'istanza di `CustomExceptionHandler`. Quindi l'istanza viene aggiunto all'evento e viene eseguita l'applicazione.  
  
 Nel `OnThreadException` metodo il `CustomExceptionHandler` (classe), nell'esempio viene utilizzato un `try...catch...finally` istruzione per elaborare l'eccezione. Il `ShowThreadExceptionDialog` metodo crea il messaggio da visualizzare e lo visualizza in una finestra di messaggio.  
  
 [!code-csharp[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic ThreadExceptionEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ThreadExceptionEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>