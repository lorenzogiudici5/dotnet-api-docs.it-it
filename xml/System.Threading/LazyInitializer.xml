<Type Name="LazyInitializer" FullName="System.Threading.LazyInitializer">
  <TypeSignature Language="C#" Value="public static class LazyInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LazyInitializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Class LazyInitializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class LazyInitializer abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="8d4ab-101">Fornisce routine di inizializzazione differita.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-101">Provides lazy initialization routines.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d4ab-102">Queste routine evitano la necessità di allocare un'istanza dedicata, con inizializzazione differita, utilizzando invece riferimenti per verificare le destinazioni sono state inizializzate al momento dell'accesso.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-102">These routines avoid needing to allocate a dedicated, lazy-initialization instance, instead using references to ensure targets have been initialized as they are accessed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8d4ab-103">Nell'esempio seguente viene illustrato come utilizzare EnsureInitialized per inizializzare in modo differito un valore utilizzando un valore booleano per rilevare se l'inizializzazione è già trascorsa e un oggetto da usare come il blocco a esclusione reciproca.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-103">The following example demonstrates how to use EnsureInitialized to lazily initialize a value using a Boolean value to track whether initialization has already happened and an object to use as the mutual exclusion lock.</span></span>  
  
```vb  
Dim _data As ExpensiveData = Nothing  
Dim _dataInitialized As Boolean = False  
Dim _dataLock As Object = Nothing  
'    ...  
Dim name = LazyInitializer.EnsureInitialized(_data, _dataInitialized, _dataLock)  
```  
  
```csharp  
ExpensiveData _data = null;  
                     bool _dataInitialized = false;  
                     object _dataLock = new object();  
                  //  ...  
  
                    ExpensiveData dataToUse = LazyInitializer.EnsureInitialized(ref _data, ref _dataInitialized, ref _dataLock);  
```  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="8d4ab-104">I metodi di <see cref="T:System.Threading.LazyInitializer" /> sono thread-safe e possono essere chiamati da più thread contemporaneamente.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-104">The methods of <see cref="T:System.Threading.LazyInitializer" /> are thread-safe and may be called from multiple threads concurrently.</span></span></threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName="EnsureInitialized&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8d4ab-105">Inizializza un tipo di destinazione se non è già stato inizializzato.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-105">Initializes a target type if it hasn't already been initialized.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="8d4ab-106">Tipo del riferimento da inizializzare.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-106">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="8d4ab-107">Riferimento di tipo <c>T</c> da inizializzare se non è già stato inizializzato.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-107">A reference of type <c>T</c> to initialize if it has not already been initialized.</span></span></param>
        <summary><span data-ttu-id="8d4ab-108">Inizializza un tipo di riferimento di destinazione con il relativo costruttore predefinito se non è già stato inizializzato.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-108">Initializes a target reference type with the type's default constructor if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="8d4ab-109">Riferimento inizializzato di tipo <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-109">The initialized reference of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d4ab-110">Questo metodo può essere utilizzato solo sui tipi di riferimento.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-110">This method may only be used on reference types.</span></span> <span data-ttu-id="8d4ab-111">Per assicurare l'inizializzazione di tipi di valore, vedere gli altri overload di EnsureInitialized.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-111">To ensure initialization of value types, see other overloads of EnsureInitialized.</span></span>  
  
 <span data-ttu-id="8d4ab-112">Questo metodo può essere utilizzato contemporaneamente da più thread per inizializzare `target`.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-112">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="8d4ab-113">Nel caso in cui più thread di accedere contemporaneamente a questo metodo, più istanze di `T` possono essere create, ma solo uno verrà archiviata in `target`.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-113">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`.</span></span> <span data-ttu-id="8d4ab-114">In questo caso, questo metodo non eliminerà gli oggetti che non sono stati archiviati.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-114">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="8d4ab-115">Se è necessario eliminare tali oggetti, è compito del chiamante per determinare se un oggetto non è stato utilizzato e quindi eliminare l'oggetto in modo appropriato.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-115">If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="8d4ab-116">Le autorizzazioni per accedere al costruttore di tipo <paramref name="T" /> erano mancanti.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-116">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="8d4ab-117">Il tipo <paramref name="T" /> non dispone di un costruttore predefinito.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-117">Type <paramref name="T" /> does not have a default constructor.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, Func&lt;T&gt; ^ valueFactory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="8d4ab-118">Tipo del riferimento da inizializzare.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-118">The reference type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="8d4ab-119">Riferimento di tipo <c>T</c> da inizializzare se non è già stato inizializzato.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-119">The reference of type <c>T</c> to initialize if it hasn't already been initialized.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="8d4ab-120">Funzione chiamata per inizializzare il riferimento.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-120">The function that is called to initialize the reference.</span></span></param>
        <summary><span data-ttu-id="8d4ab-121">Inizializza un tipo di riferimento di destinazione utilizzando una funzione specificata se non è già stato inizializzato.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-121">Initializes a target reference type by using a specified function if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="8d4ab-122">Valore inizializzato di tipo <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-122">The initialized value of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d4ab-123">Questo metodo può essere utilizzato solo sui tipi di riferimento e `valueFactory` non può restituire un riferimento null (Nothing in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="8d4ab-123">This method may only be used on reference types, and `valueFactory` may not return a null reference (Nothing in Visual Basic).</span></span> <span data-ttu-id="8d4ab-124">Per assicurare l'inizializzazione di tipi di valore o per consentire i tipi di riferimento null, vedere gli altri overload di EnsureInitialized.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-124">To ensure initialization of value types or to allow null reference types, see other overloads of EnsureInitialized.</span></span>  
  
 <span data-ttu-id="8d4ab-125">Questo metodo può essere utilizzato contemporaneamente da più thread per inizializzare `target`.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-125">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="8d4ab-126">Nel caso in cui più thread di accedere contemporaneamente a questo metodo, più istanze di `T` possono essere create, ma solo uno verrà archiviata in `target`.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-126">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`.</span></span> <span data-ttu-id="8d4ab-127">In questo caso, questo metodo non eliminerà gli oggetti che non sono stati archiviati.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-127">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="8d4ab-128">Se è necessario eliminare tali oggetti, è compito del chiamante per determinare se un oggetto non è stato utilizzato e quindi eliminare l'oggetto in modo appropriato.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-128">If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="8d4ab-129">Il tipo <paramref name="T" /> non dispone di un costruttore predefinito.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-129">Type <paramref name="T" /> does not have a default constructor.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8d4ab-130"><paramref name="valueFactory" /> restituisce null (Nothing in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="8d4ab-130"><paramref name="valueFactory" /> returned null (Nothing in Visual Basic).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="8d4ab-131">Tipo del riferimento da inizializzare.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-131">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="8d4ab-132">Riferimento o valore di tipo <c>T</c> da inizializzare se non è già stato inizializzato.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-132">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span></span></param>
        <param name="initialized"><span data-ttu-id="8d4ab-133">Riferimento a un valore booleano che determina se la destinazione è già stata inizializzata.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-133">A reference to a Boolean value that determines whether the target has already been initialized.</span></span></param>
        <param name="syncLock"><span data-ttu-id="8d4ab-134">Riferimento a un oggetto usato come blocco a esclusione reciproca per l'inizializzazione di <c>target</c>.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-134">A reference to an object used as the mutually exclusive lock for initializing <c>target</c>.</span></span> <span data-ttu-id="8d4ab-135">Se <c>syncLock</c> è <see langword="null" />, verrà creata un'istanza di un nuovo oggetto.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-135">If <c>syncLock</c> is <see langword="null" />, a new object will be instantiated.</span></span></param>
        <summary><span data-ttu-id="8d4ab-136">Inizializza un tipo di riferimento o di valore di destinazione con il relativo costruttore predefinito se non è già stato inizializzato.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-136">Initializes a target reference or value type with its default constructor if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="8d4ab-137">Valore inizializzato di tipo <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-137">The initialized value of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d4ab-138">Se `intialized` viene specificato come true, nessuna ulteriore inizializzazione si verifica.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-138">If `intialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="8d4ab-139">Le autorizzazioni per accedere al costruttore di tipo <paramref name="T" /> erano mancanti.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-139">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="8d4ab-140">Il tipo <paramref name="T" /> non dispone di un costruttore predefinito.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-140">Type <paramref name="T" /> does not have a default constructor.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref object syncLock, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="target">To be added.</param>
        <param name="syncLock">To be added.</param>
        <param name="valueFactory">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock, Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="8d4ab-141">Tipo del riferimento da inizializzare.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-141">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="8d4ab-142">Riferimento o valore di tipo <c>T</c> da inizializzare se non è già stato inizializzato.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-142">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span></span></param>
        <param name="initialized"><span data-ttu-id="8d4ab-143">Riferimento a un valore booleano che determina se la destinazione è già stata inizializzata.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-143">A reference to a Boolean value that determines whether the target has already been initialized.</span></span></param>
        <param name="syncLock"><span data-ttu-id="8d4ab-144">Riferimento a un oggetto usato come blocco a esclusione reciproca per l'inizializzazione di <c>target</c>.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-144">A reference to an object used as the mutually exclusive lock for initializing <c>target</c>.</span></span> <span data-ttu-id="8d4ab-145">Se <c>syncLock</c> è <see langword="null" />, verrà creata un'istanza di un nuovo oggetto.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-145">If <c>syncLock</c> is <see langword="null" />, a new object will be instantiated.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="8d4ab-146">Funzione chiamata per inizializzare il riferimento o il valore.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-146">The function that is called to initialize the reference or value.</span></span></param>
        <summary><span data-ttu-id="8d4ab-147">Inizializza un tipo di riferimento o di valore di destinazione utilizzando una funzione specificata se non è già stato inizializzato.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-147">Initializes a target reference or value type by using a specified function if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="8d4ab-148">Valore inizializzato di tipo <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-148">The initialized value of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8d4ab-149">Se `intialized` viene specificato come true, nessuna ulteriore inizializzazione si verifica.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-149">If `intialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="8d4ab-150">Le autorizzazioni per accedere al costruttore di tipo <paramref name="T" /> erano mancanti.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-150">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="8d4ab-151">Il tipo <paramref name="T" /> non dispone di un costruttore predefinito.</span><span class="sxs-lookup"><span data-stu-id="8d4ab-151">Type <paramref name="T" /> does not have a default constructor.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>