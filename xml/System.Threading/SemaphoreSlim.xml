<Type Name="SemaphoreSlim" FullName="System.Threading.SemaphoreSlim">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7e72beb63f37b38d4c665f106b4e720021f5574c" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48595471" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SemaphoreSlim : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemaphoreSlim extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SemaphoreSlim" />
  <TypeSignature Language="VB.NET" Value="Public Class SemaphoreSlim&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemaphoreSlim : IDisposable" />
  <TypeSignature Language="F#" Value="type SemaphoreSlim = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Current Count = {m_currentCount}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="566c4-101">Rappresenta un'alternativa semplificata a <see cref="T:System.Threading.Semaphore" /> che limita il numero di thread che possono accedere simultaneamente a una risorsa o a un pool di risorse.</span>
      <span class="sxs-lookup">
        <span data-stu-id="566c4-101">Represents a lightweight alternative to <see cref="T:System.Threading.Semaphore" /> that limits the number of threads that can access a resource or pool of resources concurrently.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="566c4-102">Sono disponibili due tipi: i semafori locali e i semafori denominati di sistema.</span><span class="sxs-lookup"><span data-stu-id="566c4-102">Semaphores are of two types: local semaphores and named system semaphores.</span></span> <span data-ttu-id="566c4-103">Il primo è locale rispetto a un'app.</span><span class="sxs-lookup"><span data-stu-id="566c4-103">The former is local to an app.</span></span> <span data-ttu-id="566c4-104">Quest'ultimo è visibile in tutto il sistema operativo ed è adatto per la sincronizzazione interprocesso.</span><span class="sxs-lookup"><span data-stu-id="566c4-104">The latter is visible throughout the operating system and is suitable for inter-process synchronization.</span></span> <span data-ttu-id="566c4-105">Il <xref:System.Threading.SemaphoreSlim> è un'alternativa semplificata al <xref:System.Threading.Semaphore> classe che non usa i semafori kernel di Windows.</span><span class="sxs-lookup"><span data-stu-id="566c4-105">The <xref:System.Threading.SemaphoreSlim> is a lightweight alternative to the <xref:System.Threading.Semaphore> class that doesn't use Windows kernel semaphores.</span></span> <span data-ttu-id="566c4-106">A differenza di <xref:System.Threading.Semaphore> (classe), il <xref:System.Threading.SemaphoreSlim> classe non supporta i semafori denominati di sistema.</span><span class="sxs-lookup"><span data-stu-id="566c4-106">Unlike the <xref:System.Threading.Semaphore> class, the <xref:System.Threading.SemaphoreSlim> class doesn't support named system semaphores.</span></span> <span data-ttu-id="566c4-107">È possibile utilizzarlo come solo un semaforo locale.</span><span class="sxs-lookup"><span data-stu-id="566c4-107">You can use it as a local semaphore only.</span></span> <span data-ttu-id="566c4-108">Il <xref:System.Threading.SemaphoreSlim> classe è il semaforo consigliato per la sincronizzazione all'interno di una singola app.</span><span class="sxs-lookup"><span data-stu-id="566c4-108">The <xref:System.Threading.SemaphoreSlim> class is the recommended semaphore for synchronization within a single app.</span></span>  
  
 <span data-ttu-id="566c4-109">Un semaforo leggero controlla l'accesso a un pool di risorse che è locale rispetto all'applicazione.</span><span class="sxs-lookup"><span data-stu-id="566c4-109">A lightweight semaphore controls access to a pool of resources that is local to your application.</span></span> <span data-ttu-id="566c4-110">Quando si crea un'istanza di un semaforo denominato, è possibile specificare il numero massimo di thread che possono accedere contemporaneamente al semaforo.</span><span class="sxs-lookup"><span data-stu-id="566c4-110">When you instantiate a semaphore, you can specify the maximum number of threads that can enter the semaphore concurrently.</span></span> <span data-ttu-id="566c4-111">Inoltre possibile specificare il numero iniziale di thread che possono accedere contemporaneamente al semaforo.</span><span class="sxs-lookup"><span data-stu-id="566c4-111">You also specify the initial number of threads that can enter the semaphore concurrently.</span></span> <span data-ttu-id="566c4-112">Questa impostazione definisce il conteggio del semaforo.</span><span class="sxs-lookup"><span data-stu-id="566c4-112">This defines the semaphore's count.</span></span>  
  
 <span data-ttu-id="566c4-113">Il conteggio viene decrementato ogni volta che un thread accede al semaforo e incrementato ogni volta che un thread rilascia il semaforo.</span><span class="sxs-lookup"><span data-stu-id="566c4-113">The count is decremented each time a thread enters the semaphore, and incremented each time a thread releases the semaphore.</span></span> <span data-ttu-id="566c4-114">Per accedere al semaforo, un thread chiama uno dei <xref:System.Threading.SemaphoreSlim.Wait%2A> o <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> overload.</span><span class="sxs-lookup"><span data-stu-id="566c4-114">To enter the semaphore, a thread calls one of the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> overloads.</span></span> <span data-ttu-id="566c4-115">Per rilasciare il semaforo, chiama uno del <xref:System.Threading.SemaphoreSlim.Release%2A> overload.</span><span class="sxs-lookup"><span data-stu-id="566c4-115">To release the semaphore, it calls one of the <xref:System.Threading.SemaphoreSlim.Release%2A> overloads.</span></span> <span data-ttu-id="566c4-116">Quando il conteggio raggiunge lo zero, le chiamate successive a uno del `Wait` metodi bloccano fino a quando gli altri thread rilasciano il semaforo.</span><span class="sxs-lookup"><span data-stu-id="566c4-116">When the count reaches zero, subsequent calls to one of the `Wait` methods block until other threads release the semaphore.</span></span> <span data-ttu-id="566c4-117">Se più thread sono bloccati, non vi è alcun ordine garantito, ad esempio FIFO o LIFO, che controlla quando i thread entrano nel semaforo.</span><span class="sxs-lookup"><span data-stu-id="566c4-117">If multiple threads are blocked, there is no guaranteed order, such as FIFO or LIFO, that controls when threads enter the semaphore.</span></span>  
  
 <span data-ttu-id="566c4-118">La struttura di base per il codice che usa un semaforo per proteggere le risorse è:</span><span class="sxs-lookup"><span data-stu-id="566c4-118">The basic structure for code that uses a semaphore to protect resources is:</span></span>  
  
```vb  
  
' Enter semaphore by calling one of the Wait or WaitAsync methods.  
SemaphoreSlim.Wait()  
'   
' Execute code protected by the semaphore.   
'  
SemaphoreSlim.Release()  
  
```  
  
 <span data-ttu-id="566c4-119">Quando tutti i thread hanno rilasciato il semaforo, il conteggio viene raggiunto il valore massimo specificato quando è stato creato il semaforo.</span><span class="sxs-lookup"><span data-stu-id="566c4-119">When all threads have released the semaphore, the count is at the maximum value specified when the semaphore was created.</span></span> <span data-ttu-id="566c4-120">Il conteggio del semaforo è disponibile il <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="566c4-120">The semaphore's count is available from the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="566c4-121">Il <xref:System.Threading.SemaphoreSlim> classe non impone l'identità del thread o attività nelle chiamate al <xref:System.Threading.SemaphoreSlim.Wait%2A>, <xref:System.Threading.SemaphoreSlim.WaitAsync%2A>, e <xref:System.Threading.SemaphoreSlim.Release%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="566c4-121">The <xref:System.Threading.SemaphoreSlim> class doesn't enforce thread or task identity on calls to the <xref:System.Threading.SemaphoreSlim.Wait%2A>, <xref:System.Threading.SemaphoreSlim.WaitAsync%2A>, and <xref:System.Threading.SemaphoreSlim.Release%2A> methods.</span></span> <span data-ttu-id="566c4-122">Inoltre, se il <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29> costruttore viene utilizzato per creare un'istanza di <xref:System.Threading.SemaphoreSlim> oggetto, il <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> proprietà può aumentare oltre il valore impostato dal costruttore.</span><span class="sxs-lookup"><span data-stu-id="566c4-122">In addition, if the <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29> constructor is used to instantiate the <xref:System.Threading.SemaphoreSlim> object, the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property can increase beyond the value set by the constructor.</span></span> <span data-ttu-id="566c4-123">È compito del programmatore per garantire che le chiamate a <xref:System.Threading.SemaphoreSlim.Wait%2A> oppure <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> metodi vengono abbinati in modo appropriato con le chiamate a <xref:System.Threading.SemaphoreSlim.Release%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="566c4-123">It is the programmer's responsibility to ensure that calls to <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> methods are appropriately paired with calls to <xref:System.Threading.SemaphoreSlim.Release%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="566c4-124">L'esempio seguente crea un semaforo con un numero massimo di tre thread e un conteggio iniziale pari a zero i thread.</span><span class="sxs-lookup"><span data-stu-id="566c4-124">The following example creates a semaphore with a maximum count of three threads and an initial count of zero threads.</span></span> <span data-ttu-id="566c4-125">Nell'esempio viene avviato cinque attività, ognuno dei quali smettere di attendere il semaforo.</span><span class="sxs-lookup"><span data-stu-id="566c4-125">The example starts five tasks, all of which block waiting for the semaphore.</span></span> <span data-ttu-id="566c4-126">Il thread principale chiama il <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> overload per aumentare il conteggio del semaforo sul valore massimo, che consente di entrare nel semaforo tre attività.</span><span class="sxs-lookup"><span data-stu-id="566c4-126">The main thread calls the <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> overload to increase the semaphore count to its maximum, which allows three tasks to enter the semaphore.</span></span> <span data-ttu-id="566c4-127">Ogni volta che viene rilasciato il semaforo, viene visualizzato il conteggio del semaforo precedente.</span><span class="sxs-lookup"><span data-stu-id="566c4-127">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="566c4-128">Utilizzo di semaforo track messaggi della console.</span><span class="sxs-lookup"><span data-stu-id="566c4-128">Console messages track semaphore use.</span></span> <span data-ttu-id="566c4-129">L'intervallo di lavoro simulato viene aumentato leggermente per ogni thread rendere più semplice leggere l'output.</span><span class="sxs-lookup"><span data-stu-id="566c4-129">The simulated work interval is increased slightly for each thread to make the output easier to read.</span></span>  
  
 [!code-csharp[System.Threading.SemaphoreSlim#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.semaphoreslim/cs/example.cs#1)]
 [!code-vb[System.Threading.SemaphoreSlim#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.semaphoreslim/vb/example.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="566c4-130">Tutti i membri pubblici e protetti della <see cref="T:System.Threading.SemaphoreSlim" /> sono thread-safe e possono essere utilizzati contemporaneamente da più thread, ad eccezione di <see cref="M:System.Threading.SemaphoreSlim.Dispose" />, che devono essere usate solo quando tutte le altre operazioni su di <see cref="T:System.Threading.SemaphoreSlim" /> completati.</span>
      <span class="sxs-lookup">
        <span data-stu-id="566c4-130">All public and protected members of <see cref="T:System.Threading.SemaphoreSlim" /> are thread-safe and may be used concurrently from multiple threads, with the exception of <see cref="M:System.Threading.SemaphoreSlim.Dispose" />, which must be used only when all other operations on the <see cref="T:System.Threading.SemaphoreSlim" /> have completed.</span>
      </span>
    </threadsafe>
    <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
      <span data-ttu-id="566c4-131">Semaphore e SemaphoreSlim</span>
      <span class="sxs-lookup">
        <span data-stu-id="566c4-131">Semaphore and SemaphoreSlim</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="566c4-132">Inizializza una nuova istanza della classe <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-132">Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSlim (int initialCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreSlim(int initialCount);" />
      <MemberSignature Language="F#" Value="new System.Threading.SemaphoreSlim : int -&gt; System.Threading.SemaphoreSlim" Usage="new System.Threading.SemaphoreSlim initialCount" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount">
          <span data-ttu-id="566c4-133">Numero iniziale di richieste per il semaforo che possono essere concesse simultaneamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-133">The initial number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="566c4-134">Inizializza una nuova istanza della classe <see cref="T:System.Threading.SemaphoreSlim" /> specificando il numero iniziale di richieste che possono essere concesse simultaneamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-134">Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class, specifying the initial number of requests that can be granted concurrently.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="566c4-135">Il `initialCount` parametro definisce il numero di richieste simultanee al semaforo che possono essere concesse.</span><span class="sxs-lookup"><span data-stu-id="566c4-135">The `initialCount` parameter defines the number of concurrent requests to enter the semaphore that can be granted.</span></span> <span data-ttu-id="566c4-136">Tuttavia non definisce il numero massimo di richieste che possono essere concesse simultaneamente.</span><span class="sxs-lookup"><span data-stu-id="566c4-136">However, it doesn't define the maximum number of requests that can be granted concurrently.</span></span> <span data-ttu-id="566c4-137">Un <xref:System.Threading.SemaphoreSlim> oggetto creata chiamando il costruttore non genera un <xref:System.Threading.SemaphoreFullException> eccezione se una chiamata al <xref:System.Threading.SemaphoreSlim.Release%2A> metodo aumenta il valore del <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> proprietà oltre `initialCount`.</span><span class="sxs-lookup"><span data-stu-id="566c4-137">A   <xref:System.Threading.SemaphoreSlim> object instantiated by calling this constructor doesn't throw a <xref:System.Threading.SemaphoreFullException> exception if a call to the <xref:System.Threading.SemaphoreSlim.Release%2A> method increases the value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property beyond `initialCount`.</span></span> <span data-ttu-id="566c4-138">Ciò si verifica se sono presenti più chiamate a <xref:System.Threading.SemaphoreSlim.Release%2A> metodi di quanti sono <xref:System.Threading.SemaphoreSlim.Wait%2A> o <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="566c4-138">This occurs if there are more calls to <xref:System.Threading.SemaphoreSlim.Release%2A> methods than there are to <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> methods.</span></span> <span data-ttu-id="566c4-139">Per impostare il numero massimo di richieste simultanee al semaforo che possono essere concesse, chiamare il <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29> costruttore.</span><span class="sxs-lookup"><span data-stu-id="566c4-139">To set the maximum number of concurrent requests to enter the semaphore that can be granted, call the <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="566c4-140">
            <paramref name="initialCount" /> è minore di 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-140">
              <paramref name="initialCount" /> is less than 0.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
          <span data-ttu-id="566c4-141">Semaphore e SemaphoreSlim</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-141">Semaphore and SemaphoreSlim</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSlim (int initialCount, int maxCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maxCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maxCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreSlim(int initialCount, int maxCount);" />
      <MemberSignature Language="F#" Value="new System.Threading.SemaphoreSlim : int * int -&gt; System.Threading.SemaphoreSlim" Usage="new System.Threading.SemaphoreSlim (initialCount, maxCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maxCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount">
          <span data-ttu-id="566c4-142">Numero iniziale di richieste per il semaforo che possono essere concesse simultaneamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-142">The initial number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <param name="maxCount">
          <span data-ttu-id="566c4-143">Numero massimo di richieste per il semaforo che possono essere concesse simultaneamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-143">The maximum number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="566c4-144">Inizializza una nuova istanza della classe <see cref="T:System.Threading.SemaphoreSlim" /> specificando il numero iniziale e massimo di richieste che possono essere concesse simultaneamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-144">Initializes a new instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class, specifying the initial and maximum number of requests that can be granted concurrently.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="566c4-145">
            <paramref name="initialCount" /> è minore di 0, o <paramref name="initialCount" /> è maggiore di <paramref name="maxCount" /> o <paramref name="maxCount" /> è uguale o minore di 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-145">
              <paramref name="initialCount" /> is less than 0, or <paramref name="initialCount" /> is greater than <paramref name="maxCount" />, or <paramref name="maxCount" /> is equal to or less than 0.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
          <span data-ttu-id="566c4-146">Semaphore e SemaphoreSlim</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-146">Semaphore and SemaphoreSlim</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="AvailableWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AvailableWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AvailableWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SemaphoreSlim.AvailableWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AvailableWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AvailableWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AvailableWaitHandle : System.Threading.WaitHandle" Usage="System.Threading.SemaphoreSlim.AvailableWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="566c4-147">Restituisce un oggetto <see cref="T:System.Threading.WaitHandle" /> che può essere usato per attendere il semaforo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-147">Returns a <see cref="T:System.Threading.WaitHandle" /> that can be used to wait on the semaphore.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="566c4-148">Oggetto <see cref="T:System.Threading.WaitHandle" /> che può essere usato per attendere il semaforo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-148">A <see cref="T:System.Threading.WaitHandle" /> that can be used to wait on the semaphore.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="566c4-149">Usare questa proprietà solo quando è necessario attendere un SemaphoreSlim con altri oggetti di sincronizzazione basata sul kernel con lo stesso handle di attesa.</span><span class="sxs-lookup"><span data-stu-id="566c4-149">Use this property only when you must wait on a SemaphoreSlim together with other kernel-based synchronization objects with the same wait handle.</span></span> <span data-ttu-id="566c4-150">Un'attesa ha esito positivo sul <xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A> non implica un'attesa ha esito positivo sul <xref:System.Threading.SemaphoreSlim> stessa, né decrementa il conteggio del semaforo.</span><span class="sxs-lookup"><span data-stu-id="566c4-150">A successful wait on the <xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A> does not imply a successful wait on the <xref:System.Threading.SemaphoreSlim> itself, nor does it decrement the semaphore's count.</span></span> <span data-ttu-id="566c4-151">Dopo che viene segnalato l'handle di attesa disponibili, è necessario attendere nel <xref:System.Threading.SemaphoreSlim> in modo specifico.</span><span class="sxs-lookup"><span data-stu-id="566c4-151">After the available wait handle is signaled, you should wait on the <xref:System.Threading.SemaphoreSlim> specifically.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="566c4-152">L'interfaccia <see cref="T:System.Threading.SemaphoreSlim" /> è stata eliminata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-152">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
          <span data-ttu-id="566c4-153">Semaphore e SemaphoreSlim</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-153">Semaphore and SemaphoreSlim</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="CurrentCount">
      <MemberSignature Language="C#" Value="public int CurrentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SemaphoreSlim.CurrentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCount : int" Usage="System.Threading.SemaphoreSlim.CurrentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="566c4-154">Ottiene il numero di thread rimanenti che possono accedere all'oggetto <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-154">Gets the number of remaining threads that can enter the <see cref="T:System.Threading.SemaphoreSlim" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="566c4-155">Numero di thread rimanenti che possono accedere al semaforo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-155">The number of remaining threads that can enter the semaphore.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="566c4-156">Il valore iniziale del <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> viene impostata dalla chiamata al metodo il <xref:System.Threading.SemaphoreSlim.%23ctor%2A> costruttore della classe.</span><span class="sxs-lookup"><span data-stu-id="566c4-156">The initial value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property is set by the call to the <xref:System.Threading.SemaphoreSlim.%23ctor%2A> class constructor.</span></span> <span data-ttu-id="566c4-157">È diminuito da ogni chiamata al <xref:System.Threading.SemaphoreSlim.Wait%2A> oppure <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> metodo e incrementando di ogni chiamata al <xref:System.Threading.SemaphoreSlim.Release%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="566c4-157">It is decremented by each call to the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> method, and incremented by each call to the <xref:System.Threading.SemaphoreSlim.Release%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
          <span data-ttu-id="566c4-158">Semaphore e SemaphoreSlim</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-158">Semaphore and SemaphoreSlim</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="566c4-159">Rilascia le risorse usate dall'istanza corrente della classe <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-159">Releases resources used by the current instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="semaphoreSlim.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="566c4-160">Rilascia tutte le risorse usate dall'istanza corrente della classe <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-160">Releases all resources used by the current instance of the <see cref="T:System.Threading.SemaphoreSlim" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="566c4-161">Chiamare il metodo `Dispose` dopo aver terminato di utilizzare l'oggetto <xref:System.Threading.SemaphoreSlim>.</span><span class="sxs-lookup"><span data-stu-id="566c4-161">Call `Dispose` when you are finished using the <xref:System.Threading.SemaphoreSlim>.</span></span> <span data-ttu-id="566c4-162">Il metodo `Dispose` lascia l'oggetto <xref:System.Threading.SemaphoreSlim> in una condizione di inutilizzabilità.</span><span class="sxs-lookup"><span data-stu-id="566c4-162">The `Dispose` method leaves the <xref:System.Threading.SemaphoreSlim> in an unusable state.</span></span> <span data-ttu-id="566c4-163">Dopo la chiamata `Dispose`, è necessario rilasciare tutti i riferimenti per il <xref:System.Threading.SemaphoreSlim> in modo che il garbage collector di recuperare la memoria che il <xref:System.Threading.SemaphoreSlim> occupata.</span><span class="sxs-lookup"><span data-stu-id="566c4-163">After calling `Dispose`, you must release all references to the <xref:System.Threading.SemaphoreSlim> so the garbage collector can reclaim the memory that the <xref:System.Threading.SemaphoreSlim> was occupying.</span></span>  
  
 <span data-ttu-id="566c4-164">Per altre informazioni, vedere [pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md) e [implementa un metodo Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="566c4-164">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="566c4-165">Chiamare sempre il metodo `Dispose` prima di rilasciare l'ultimo riferimento a <xref:System.Threading.SemaphoreSlim>.</span><span class="sxs-lookup"><span data-stu-id="566c4-165">Always call `Dispose` before you release your last reference to the <xref:System.Threading.SemaphoreSlim>.</span></span> <span data-ttu-id="566c4-166">In caso contrario, le risorse utilizzate non verranno liberate finché il metodo <xref:System.Threading.SemaphoreSlim> dell'oggetto `Finalize` non viene richiamato dal Garbage Collector.</span><span class="sxs-lookup"><span data-stu-id="566c4-166">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.SemaphoreSlim> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
          <span data-ttu-id="566c4-167">Semaphore e SemaphoreSlim</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-167">Semaphore and SemaphoreSlim</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="semaphoreSlim.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="566c4-168">
            <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-168">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="566c4-169">Rilascia le risorse non gestite usate dall'oggetto <see cref="T:System.Threading.SemaphoreSlim" /> e, facoltativamente, le risorse gestite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-169">Releases the unmanaged resources used by the <see cref="T:System.Threading.SemaphoreSlim" />, and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="566c4-170">A differenza della maggior parte dei membri del <xref:System.Threading.SemaphoreSlim>, <xref:System.Threading.SemaphoreSlim.Dispose%2A> non è thread-safe e non possono essere usati contemporaneamente ad altri membri di questa istanza.</span><span class="sxs-lookup"><span data-stu-id="566c4-170">Unlike most of the members of <xref:System.Threading.SemaphoreSlim>, <xref:System.Threading.SemaphoreSlim.Dispose%2A> is not thread-safe and may not be used concurrently with other members of this instance.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
          <span data-ttu-id="566c4-171">Semaphore e SemaphoreSlim</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-171">Semaphore and SemaphoreSlim</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Release">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="566c4-172">Rilascia l'oggetto <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-172">Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Release" />
      <MemberSignature Language="VB.NET" Value="Public Function Release () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release();" />
      <MemberSignature Language="F#" Value="member this.Release : unit -&gt; int" Usage="semaphoreSlim.Release " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="566c4-173">Rilascia l'oggetto <see cref="T:System.Threading.SemaphoreSlim" /> una volta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-173">Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object once.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="566c4-174">Numero precedente di <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-174">The previous count of the <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="566c4-175">Una chiamata ai <xref:System.Threading.SemaphoreSlim.Release> metodo consente di incrementare la <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> proprietà da uno.</span><span class="sxs-lookup"><span data-stu-id="566c4-175">A call to the <xref:System.Threading.SemaphoreSlim.Release> method increments the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span> <span data-ttu-id="566c4-176">Se il valore della <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> proprietà sia zero prima di questo metodo viene chiamato, il metodo consente inoltre di un thread o attività bloccate da una chiamata ai <xref:System.Threading.SemaphoreSlim.Wait%2A> o <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> metodo al semaforo.</span><span class="sxs-lookup"><span data-stu-id="566c4-176">If the value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property is zero before this method is called, the method also allows one thread or task blocked by a call to the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> method to enter the semaphore.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="566c4-177">L'istanza corrente è già stata eliminata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-177">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SemaphoreFullException">
          <span data-ttu-id="566c4-178">
            <see cref="T:System.Threading.SemaphoreSlim" /> ha già raggiunto la dimensione massima.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-178">The <see cref="T:System.Threading.SemaphoreSlim" /> has already reached its maximum size.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
          <span data-ttu-id="566c4-179">Semaphore e SemaphoreSlim</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-179">Semaphore and SemaphoreSlim</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release (int releaseCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release(int32 releaseCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Release(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Release (releaseCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release(int releaseCount);" />
      <MemberSignature Language="F#" Value="member this.Release : int -&gt; int" Usage="semaphoreSlim.Release releaseCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="releaseCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="releaseCount">
          <span data-ttu-id="566c4-180">Numero di uscite dal semaforo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-180">The number of times to exit the semaphore.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="566c4-181">Rilascia l'oggetto <see cref="T:System.Threading.SemaphoreSlim" /> un numero di volte specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-181">Releases the <see cref="T:System.Threading.SemaphoreSlim" /> object a specified number of times.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="566c4-182">Numero precedente di <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-182">The previous count of the <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="566c4-183">Una chiamata ai <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> metodo consente di incrementare la <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> proprietà in base alla `releaseCount`.</span><span class="sxs-lookup"><span data-stu-id="566c4-183">A call to the <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> method increments the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by `releaseCount`.</span></span> <span data-ttu-id="566c4-184">Se il valore della <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> proprietà sia zero prima di questo metodo viene chiamato, il metodo consente inoltre `releaseCount` thread o attività bloccate da una chiamata al <xref:System.Threading.SemaphoreSlim.Wait%2A> o <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> metodo al semaforo.</span><span class="sxs-lookup"><span data-stu-id="566c4-184">If the value of the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property is zero before this method is called, the method also allows `releaseCount` threads or tasks blocked by a call to the <xref:System.Threading.SemaphoreSlim.Wait%2A> or <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> method to enter the semaphore.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="566c4-185">L'istanza corrente è già stata eliminata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-185">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="566c4-186">
            <paramref name="releaseCount" /> è minore di 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-186">
              <paramref name="releaseCount" /> is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SemaphoreFullException">
          <span data-ttu-id="566c4-187">
            <see cref="T:System.Threading.SemaphoreSlim" /> ha già raggiunto la dimensione massima.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-187">The <see cref="T:System.Threading.SemaphoreSlim" /> has already reached its maximum size.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
          <span data-ttu-id="566c4-188">Semaphore e SemaphoreSlim</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-188">Semaphore and SemaphoreSlim</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="566c4-189">Blocca il thread corrente finché non può immettere <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-189">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait" />
      <MemberSignature Language="VB.NET" Value="Public Sub Wait ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait();" />
      <MemberSignature Language="F#" Value="member this.Wait : unit -&gt; unit" Usage="semaphoreSlim.Wait " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="566c4-190">Blocca il thread corrente finché non può immettere <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-190">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="566c4-191">Se un thread o attività è in grado di accedere al semaforo, decrementa il <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> proprietà da uno.</span><span class="sxs-lookup"><span data-stu-id="566c4-191">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="566c4-192">L'istanza corrente è già stata eliminata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-192">The current instance has already been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
          <span data-ttu-id="566c4-193">Semaphore e SemaphoreSlim</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-193">Semaphore and SemaphoreSlim</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.Wait : int -&gt; bool" Usage="semaphoreSlim.Wait millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="566c4-194">Numero di millisecondi di attesa, <see cref="F:System.Threading.Timeout.Infinite" />(-1) per un'attesa illimitata oppure zero per testare lo stato dell'handle di attesa e tornare immediatamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-194">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="566c4-195">Blocca il thread corrente finché non può accedere all'oggetto <see cref="T:System.Threading.SemaphoreSlim" />, usando un intero con segno a 32 bit che specifica il timeout.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-195">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer that specifies the timeout.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="566c4-196">
            <see langword="true" /> se il thread corrente ha immesso correttamente <see cref="T:System.Threading.SemaphoreSlim" />; altrimenti, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-196">
              <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks 
<span data-ttu-id="566c4-197">Se il timeout è impostato su-1 millisecondi, il metodo attende all'infinito.</span><span class="sxs-lookup"><span data-stu-id="566c4-197">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="566c4-198">Se il timeout è impostato su zero millisecondi, il metodo non blocca.</span><span class="sxs-lookup"><span data-stu-id="566c4-198">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="566c4-199">Verifica lo stato dell'handle di attesa e restituisce immediatamente.</span><span class="sxs-lookup"><span data-stu-id="566c4-199">It tests the state of the wait handle and returns immediately.</span></span>

<span data-ttu-id="566c4-200">Se un thread o attività è in grado di accedere al semaforo, decrementa il <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> proprietà da uno.</span><span class="sxs-lookup"><span data-stu-id="566c4-200">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="566c4-201">Se un thread o attività è bloccata quando si chiama <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29> e l'intervallo di timeout specificato da `millisecondsTimeout` alla scadenza:</span><span class="sxs-lookup"><span data-stu-id="566c4-201">If a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="566c4-202">Il thread o l'attività non al semaforo.</span><span class="sxs-lookup"><span data-stu-id="566c4-202">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="566c4-203">Il <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> proprietà non viene decrementata.</span><span class="sxs-lookup"><span data-stu-id="566c4-203">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="566c4-204">
            <paramref name="millisecondsTimeout" /> è un numero negativo diverso da -1 che rappresenta un timeout infinito oppure il timeout è maggiore di <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-204">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="566c4-205">L'interfaccia <see cref="T:System.Threading.SemaphoreSlim" /> è stata eliminata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-205">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
          <span data-ttu-id="566c4-206">Semaphore e SemaphoreSlim</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-206">Semaphore and SemaphoreSlim</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : System.Threading.CancellationToken -&gt; unit" Usage="semaphoreSlim.Wait cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <span data-ttu-id="566c4-207">Token <see cref="T:System.Threading.CancellationToken" /> da osservare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-207">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="566c4-208">Blocca il thread corrente finché non può accedere all'oggetto <see cref="T:System.Threading.SemaphoreSlim" /> osservando un oggetto <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-208">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, while observing a <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="566c4-209">Se un thread o attività è in grado di accedere al semaforo, decrementa il <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> proprietà da uno.</span><span class="sxs-lookup"><span data-stu-id="566c4-209">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
 <span data-ttu-id="566c4-210">Se `cancellationToken` viene annullato, il thread o l'attività non entrano nel semaforo e il <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> proprietà non viene decrementata.</span><span class="sxs-lookup"><span data-stu-id="566c4-210">If `cancellationToken` is cancelled, the thread or task doesn't enter the semaphore, and the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span> <span data-ttu-id="566c4-211">Al contrario, il metodo genera un <xref:System.OperationCanceledException> eccezione.</span><span class="sxs-lookup"><span data-stu-id="566c4-211">Instead, the method throws an <xref:System.OperationCanceledException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="566c4-212">
            <paramref name="cancellationToken" /> è stato annullato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-212">
              <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="566c4-213">L'istanza corrente è già stata eliminata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-213">The current instance has already been disposed.</span>
          </span>
          <span data-ttu-id="566c4-214">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-214">-or-</span>
          </span>
          <span data-ttu-id="566c4-215">L'oggetto <see cref="T:System.Threading.CancellationTokenSource" /> che ha creato <paramref name="cancellationToken" /> è già stato eliminato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-215">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
          <span data-ttu-id="566c4-216">Semaphore e SemaphoreSlim</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-216">Semaphore and SemaphoreSlim</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md">
          <span data-ttu-id="566c4-217">Annullamento</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-217">Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Wait : TimeSpan -&gt; bool" Usage="semaphoreSlim.Wait timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="566c4-218">
            <see cref="T:System.TimeSpan" /> che rappresenta il numero di millisecondi di attesa, <see cref="T:System.TimeSpan" /> che rappresenta -1 millisecondi di attesa illimitata o <see cref="T:System.TimeSpan" /> che rappresenta 0 millisecondi per testare l'handle di attesa e tornare immediatamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-218">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="566c4-219">Blocca il thread corrente finché non può accedere all'oggetto <see cref="T:System.Threading.SemaphoreSlim" />, usando un oggetto <see cref="T:System.TimeSpan" /> per specificare il timeout.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-219">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to specify the timeout.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="566c4-220">
            <see langword="true" /> se il thread corrente ha immesso correttamente <see cref="T:System.Threading.SemaphoreSlim" />; altrimenti, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-220">
              <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="566c4-221">Se il timeout è impostato su-1 millisecondi, il metodo attende all'infinito.</span><span class="sxs-lookup"><span data-stu-id="566c4-221">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="566c4-222">Se il timeout è impostato su zero millisecondi, il metodo non blocca.</span><span class="sxs-lookup"><span data-stu-id="566c4-222">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="566c4-223">Verifica lo stato dell'handle di attesa e restituisce immediatamente.</span><span class="sxs-lookup"><span data-stu-id="566c4-223">It tests the state of the wait handle and returns immediately.</span></span> 
 
<span data-ttu-id="566c4-224">Se un thread o attività è in grado di accedere al semaforo, decrementa il <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> proprietà da uno.</span><span class="sxs-lookup"><span data-stu-id="566c4-224">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="566c4-225">Se un thread o attività è bloccata quando si chiama <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29> e l'intervallo di timeout specificato da `millisecondsTimeout` alla scadenza:</span><span class="sxs-lookup"><span data-stu-id="566c4-225">If a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="566c4-226">Il thread o l'attività non al semaforo.</span><span class="sxs-lookup"><span data-stu-id="566c4-226">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="566c4-227">Il <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> proprietà non viene decrementata.</span><span class="sxs-lookup"><span data-stu-id="566c4-227">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="566c4-228">
            <paramref name="timeout" /> è un numero negativo diverso da -1 che rappresenta un timeout infinito oppure il timeout è maggiore di <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-228">
              <paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="566c4-229">L'istanza semaphoreSlim è stata eliminata <paramref name="." /></span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-229">The semaphoreSlim instance has been disposed <paramref name="." /></span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
          <span data-ttu-id="566c4-230">Semaphore e SemaphoreSlim</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-230">Semaphore and SemaphoreSlim</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : int * System.Threading.CancellationToken -&gt; bool" Usage="semaphoreSlim.Wait (millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="566c4-231">Numero di millisecondi di attesa, <see cref="F:System.Threading.Timeout.Infinite" />(-1) per un'attesa illimitata oppure zero per testare lo stato dell'handle di attesa e tornare immediatamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-231">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" />(-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="566c4-232">Oggetto <see cref="T:System.Threading.CancellationToken" /> da osservare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-232">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="566c4-233">Blocca il thread corrente finché non può accedere all'oggetto <see cref="T:System.Threading.SemaphoreSlim" />, usando un intero con segno a 32 bit che specifica il timeout e osservando un oggetto <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-233">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="566c4-234">
            <see langword="true" /> se il thread corrente ha immesso correttamente <see cref="T:System.Threading.SemaphoreSlim" />; altrimenti, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-234">
              <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="566c4-235">Se il timeout è impostato su-1 millisecondi, il metodo attende all'infinito.</span><span class="sxs-lookup"><span data-stu-id="566c4-235">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="566c4-236">Se il timeout è impostato su zero millisecondi, il metodo non blocca.</span><span class="sxs-lookup"><span data-stu-id="566c4-236">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="566c4-237">Verifica lo stato dell'handle di attesa e restituisce immediatamente.</span><span class="sxs-lookup"><span data-stu-id="566c4-237">It tests the state of the wait handle and returns immediately.</span></span>

<span data-ttu-id="566c4-238">Se un thread o attività è in grado di accedere al semaforo, decrementa il <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> proprietà da uno.</span><span class="sxs-lookup"><span data-stu-id="566c4-238">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="566c4-239">Se `cancellationToken` viene annullato, o se un thread o attività è bloccata quando si chiama <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> e l'intervallo di timeout specificato da `millisecondsTimeout` alla scadenza:</span><span class="sxs-lookup"><span data-stu-id="566c4-239">If `cancellationToken` is cancelled, or if a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="566c4-240">Il thread o l'attività non al semaforo.</span><span class="sxs-lookup"><span data-stu-id="566c4-240">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="566c4-241">Il <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> proprietà non viene decrementata.</span><span class="sxs-lookup"><span data-stu-id="566c4-241">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>  
 
<span data-ttu-id="566c4-242">Se `cancellationToken` viene annullato, il metodo genera un <xref:System.OperationCanceledException> eccezione.</span><span class="sxs-lookup"><span data-stu-id="566c4-242">If `cancellationToken` is cancelled, the method throws an   <xref:System.OperationCanceledException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="566c4-243">
            <paramref name="cancellationToken" /> è stato annullato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-243">
              <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="566c4-244">
            <paramref name="millisecondsTimeout" /> è un numero negativo diverso da -1 che rappresenta un timeout infinito oppure il timeout è maggiore di <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-244">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="566c4-245">È stata eliminata l'istanza di <see cref="T:System.Threading.SemaphoreSlim" /> o <see cref="T:System.Threading.CancellationTokenSource" /> che ha creato <paramref name="cancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-245">The <see cref="T:System.Threading.SemaphoreSlim" /> instance has been disposed, or the <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
          <span data-ttu-id="566c4-246">Semaphore e SemaphoreSlim</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-246">Semaphore and SemaphoreSlim</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : TimeSpan * System.Threading.CancellationToken -&gt; bool" Usage="semaphoreSlim.Wait (timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="566c4-247">
            <see cref="T:System.TimeSpan" /> che rappresenta il numero di millisecondi di attesa, <see cref="T:System.TimeSpan" /> che rappresenta -1 millisecondi di attesa illimitata o <see cref="T:System.TimeSpan" /> che rappresenta 0 millisecondi per testare l'handle di attesa e tornare immediatamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-247">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="566c4-248">Oggetto <see cref="T:System.Threading.CancellationToken" /> da osservare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-248">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="566c4-249">Blocca il thread corrente finché non può accedere all'oggetto <see cref="T:System.Threading.SemaphoreSlim" />, usando un oggetto <see cref="T:System.TimeSpan" /> che specifica il timeout e osservando un oggetto <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-249">Blocks the current thread until it can enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> that specifies the timeout, while observing a <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="566c4-250">
            <see langword="true" /> se il thread corrente ha immesso correttamente <see cref="T:System.Threading.SemaphoreSlim" />; altrimenti, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-250">
              <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="566c4-251">Se il timeout è impostato su-1 millisecondi, il metodo attende all'infinito.</span><span class="sxs-lookup"><span data-stu-id="566c4-251">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
<span data-ttu-id="566c4-252">Se il timeout è impostato su zero millisecondi, il metodo non blocca.</span><span class="sxs-lookup"><span data-stu-id="566c4-252">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="566c4-253">Verifica lo stato dell'handle di attesa e restituisce immediatamente.</span><span class="sxs-lookup"><span data-stu-id="566c4-253">It tests the state of the wait handle and returns immediately.</span></span> 

<span data-ttu-id="566c4-254">Se un thread o attività è in grado di accedere al semaforo, decrementa il <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> proprietà da uno.</span><span class="sxs-lookup"><span data-stu-id="566c4-254">If a thread or task is able to enter the semaphore, it decrements the <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property by one.</span></span>  
  
<span data-ttu-id="566c4-255">Se `cancellationToken` viene annullato, o se un thread o attività è bloccata quando si chiama <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> e l'intervallo di timeout specificato da `millisecondsTimeout` alla scadenza:</span><span class="sxs-lookup"><span data-stu-id="566c4-255">If `cancellationToken` is cancelled, or if a thread or task is blocked when calling <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> and the timeout interval specified by `millisecondsTimeout` expires:</span></span>

- <span data-ttu-id="566c4-256">Il thread o l'attività non al semaforo.</span><span class="sxs-lookup"><span data-stu-id="566c4-256">The thread or task doesn't enter the semaphore.</span></span>
- <span data-ttu-id="566c4-257">Il <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> proprietà non viene decrementata.</span><span class="sxs-lookup"><span data-stu-id="566c4-257">The <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> property isn't decremented.</span></span>  

<span data-ttu-id="566c4-258">Se `cancellationToken` viene annullato, il metodo genera un <xref:System.OperationCanceledException> eccezione.</span><span class="sxs-lookup"><span data-stu-id="566c4-258">If `cancellationToken` is cancelled, the method throws an <xref:System.OperationCanceledException> exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="566c4-259">
            <paramref name="cancellationToken" /> è stato annullato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-259">
              <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="566c4-260">
            <paramref name="timeout" /> è un numero negativo diverso da -1 che rappresenta un timeout infinito oppure il timeout è maggiore di <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-260">
              <paramref name="timeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="566c4-261">L'istanza semaphoreSlim è stata eliminata <paramref name="." /><paramref name="-or-" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-261">The semaphoreSlim instance has been disposed <paramref name="." /><paramref name="-or-" /></span>
          </span>
          <span data-ttu-id="566c4-262">L'oggetto <see cref="T:System.Threading.CancellationTokenSource" /> che ha creato <paramref name="cancellationToken" /> è già stato eliminato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-262">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">
          <span data-ttu-id="566c4-263">Semaphore e SemaphoreSlim</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-263">Semaphore and SemaphoreSlim</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md">
          <span data-ttu-id="566c4-264">Annullamento</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-264">Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAsync">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="566c4-265">Attende in modo asincrono di immettere <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-265">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WaitAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WaitAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WaitAsync();" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : unit -&gt; System.Threading.Tasks.Task" Usage="semaphoreSlim.WaitAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="566c4-266">Attende in modo asincrono di immettere <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-266">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="566c4-267">Attività che verrà completata quando si accede al semaforo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-267">A task that will complete when the semaphore has been entered.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="566c4-268">L'interfaccia <see cref="T:System.Threading.SemaphoreSlim" /> è stata eliminata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-268">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync (millisecondsTimeout As Integer) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : int -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="semaphoreSlim.WaitAsync millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="566c4-269">Numero di millisecondi di attesa, <see cref="F:System.Threading.Timeout.Infinite" />(-1) per un'attesa illimitata oppure zero per testare lo stato dell'handle di attesa e tornare immediatamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-269">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="566c4-270">Attende in modo asincrono di accedere all'oggetto <see cref="T:System.Threading.SemaphoreSlim" />, usando un intero con segno a 32 bit per misurare l'intervallo di tempo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-270">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer to measure the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="566c4-271">Attività che verrà completata con un risultato <see langword="true" /> se il thread corrente ha immesso correttamente <see cref="T:System.Threading.SemaphoreSlim" />, in caso contrario, con un risultato <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-271">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="566c4-272">Se il timeout è impostato su-1 millisecondi, il metodo attende all'infinito.</span><span class="sxs-lookup"><span data-stu-id="566c4-272">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
 <span data-ttu-id="566c4-273">Se il timeout è impostato su zero millisecondi, il metodo non blocca.</span><span class="sxs-lookup"><span data-stu-id="566c4-273">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="566c4-274">Verifica lo stato dell'handle di attesa e restituisce immediatamente.</span><span class="sxs-lookup"><span data-stu-id="566c4-274">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="566c4-275">L'istanza corrente è già stata eliminata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-275">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="566c4-276">
            <paramref name="millisecondsTimeout" /> è un numero negativo diverso da -1 che rappresenta un timeout infinito oppure il timeout è maggiore di <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-276">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WaitAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WaitAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WaitAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="semaphoreSlim.WaitAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <span data-ttu-id="566c4-277">Token <see cref="T:System.Threading.CancellationToken" /> da osservare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-277">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="566c4-278">Attende in modo asincrono di accedere all'oggetto <see cref="T:System.Threading.SemaphoreSlim" />, osservando un oggetto <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-278">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, while observing a <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="566c4-279">Attività che verrà completata quando si accede al semaforo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-279">A task that will complete when the semaphore has been entered.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="566c4-280">L'istanza corrente è già stata eliminata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-280">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="566c4-281">
            <paramref name="cancellationToken" /> è stato annullato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-281">
              <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync (timeout As TimeSpan) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : TimeSpan -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="semaphoreSlim.WaitAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="566c4-282">
            <see cref="T:System.TimeSpan" /> che rappresenta il numero di millisecondi di attesa, <see cref="T:System.TimeSpan" /> che rappresenta -1 millisecondi di attesa illimitata o <see cref="T:System.TimeSpan" /> che rappresenta 0 millisecondi per testare l'handle di attesa e tornare immediatamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-282">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="566c4-283">Attende in modo asincrono di accedere all'oggetto <see cref="T:System.Threading.SemaphoreSlim" />, usando un oggetto <see cref="T:System.TimeSpan" /> per misurare l'intervallo di tempo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-283">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to measure the time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="566c4-284">Attività che verrà completata con un risultato <see langword="true" /> se il thread corrente ha immesso correttamente <see cref="T:System.Threading.SemaphoreSlim" />, in caso contrario, con un risultato <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-284">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="566c4-285">Se il timeout è impostato su-1 millisecondi, il metodo attende all'infinito.</span><span class="sxs-lookup"><span data-stu-id="566c4-285">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
 <span data-ttu-id="566c4-286">Se il timeout è impostato su zero millisecondi, il metodo non blocca.</span><span class="sxs-lookup"><span data-stu-id="566c4-286">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="566c4-287">Verifica lo stato dell'handle di attesa e restituisce immediatamente.</span><span class="sxs-lookup"><span data-stu-id="566c4-287">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="566c4-288">L'istanza corrente è già stata eliminata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-288">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="566c4-289">
            <paramref name="millisecondsTimeout" /> è un numero negativo diverso da -1 che rappresenta un timeout infinito oppure il timeout è maggiore di <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-289">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="semaphoreSlim.WaitAsync (millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="566c4-290">Numero di millisecondi di attesa, <see cref="F:System.Threading.Timeout.Infinite" />(-1) per un'attesa illimitata oppure zero per testare lo stato dell'handle di attesa e tornare immediatamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-290">The number of milliseconds to wait, <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely, or zero to test the state of the wait handle and return immediately.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="566c4-291">Oggetto <see cref="T:System.Threading.CancellationToken" /> da osservare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-291">The <see cref="T:System.Threading.CancellationToken" /> to observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="566c4-292">Attende in modo asincrono di accedere all'oggetto <see cref="T:System.Threading.SemaphoreSlim" />, usando un intero con segno a 32 bit per misurare l'intervallo di tempo e osservando un oggetto <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-292">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a 32-bit signed integer to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="566c4-293">Attività che verrà completata con un risultato <see langword="true" /> se il thread corrente ha immesso correttamente <see cref="T:System.Threading.SemaphoreSlim" />, in caso contrario, con un risultato <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-293">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="566c4-294">Se il timeout è impostato su-1 millisecondi, il metodo attende all'infinito.</span><span class="sxs-lookup"><span data-stu-id="566c4-294">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>
 
 <span data-ttu-id="566c4-295">Se il timeout è impostato su zero millisecondi, il metodo non blocca.</span><span class="sxs-lookup"><span data-stu-id="566c4-295">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="566c4-296">Verifica lo stato dell'handle di attesa e restituisce immediatamente.</span><span class="sxs-lookup"><span data-stu-id="566c4-296">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="566c4-297">
            <paramref name="millisecondsTimeout" /> è un numero diverso da -1 che rappresenta un timeout infinito oppure il timeout è maggiore di <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-297">
              <paramref name="millisecondsTimeout" /> is a number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="566c4-298">L'istanza corrente è già stata eliminata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-298">The current instance has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="566c4-299">
            <paramref name="cancellationToken" /> è stato annullato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-299">
              <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="semaphoreSlim.WaitAsync (timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="566c4-300">
            <see cref="T:System.TimeSpan" /> che rappresenta il numero di millisecondi di attesa, <see cref="T:System.TimeSpan" /> che rappresenta -1 millisecondi di attesa illimitata o <see cref="T:System.TimeSpan" /> che rappresenta 0 millisecondi per testare l'handle di attesa e tornare immediatamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-300">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely, or a <see cref="T:System.TimeSpan" /> that represents 0 milliseconds to test the wait handle and return immediately.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="566c4-301">Token <see cref="T:System.Threading.CancellationToken" /> da osservare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-301">The <see cref="T:System.Threading.CancellationToken" /> token to observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="566c4-302">Attende in modo asincrono di accedere all'oggetto <see cref="T:System.Threading.SemaphoreSlim" />, usando un oggetto <see cref="T:System.TimeSpan" /> per misurare l'intervallo di tempo e osservando un oggetto <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-302">Asynchronously waits to enter the <see cref="T:System.Threading.SemaphoreSlim" />, using a <see cref="T:System.TimeSpan" /> to measure the time interval, while observing a <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="566c4-303">Attività che verrà completata con un risultato <see langword="true" /> se il thread corrente ha immesso correttamente <see cref="T:System.Threading.SemaphoreSlim" />, in caso contrario, con un risultato <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-303">A task that will complete with a result of <see langword="true" /> if the current thread successfully entered the <see cref="T:System.Threading.SemaphoreSlim" />, otherwise with a result of <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="566c4-304">Se il timeout è impostato su-1 millisecondi, il metodo attende all'infinito.</span><span class="sxs-lookup"><span data-stu-id="566c4-304">If the timeout is set to -1 milliseconds, the method waits indefinitely.</span></span>

 <span data-ttu-id="566c4-305">Se il timeout è impostato su zero millisecondi, il metodo non blocca.</span><span class="sxs-lookup"><span data-stu-id="566c4-305">If the timeout is set to zero milliseconds, the method doesn't block.</span></span> <span data-ttu-id="566c4-306">Verifica lo stato dell'handle di attesa e restituisce immediatamente.</span><span class="sxs-lookup"><span data-stu-id="566c4-306">It tests the state of the wait handle and returns immediately.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="566c4-307">
            <paramref name="millisecondsTimeout" /> è un numero negativo diverso da -1 che rappresenta un timeout infinito oppure il timeout è maggiore di <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-307">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite timeout -or- timeout is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="566c4-308">
            <paramref name="cancellationToken" /> è stato annullato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-308">
              <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="566c4-309">L'interfaccia <see cref="T:System.Threading.SemaphoreSlim" /> è stata eliminata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="566c4-309">The <see cref="T:System.Threading.SemaphoreSlim" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>