<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b5d797b515515af78c99d7bae5dc98c881fba73b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30527295" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">Oggetto contenente informazioni che devono essere utilizzate dal metodo di callback ogni volta che viene eseguito.</param>
    <param name="timedOut">
      Il valore è <see langword="true" /> se <see cref="T:System.Threading.WaitHandle" /> ha eseguito il timeout; è <see langword="false" /> se ha ricevuto un segnale.</param>
    <summary>Rappresenta un metodo da chiamare quando <see cref="T:System.Threading.WaitHandle" /> riceve un segnale o esegue il timeout.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.WaitOrTimerCallback> rappresenta un metodo di callback che si desidera eseguire quando un handle di attesa scade o viene segnalato. Creare il delegato passando il metodo di callback per la <xref:System.Threading.WaitOrTimerCallback> costruttore. Il metodo deve avere la firma illustrata di seguito.  
  
 Creare l'handle di attesa registrata, passando il <xref:System.Threading.WaitOrTimerCallback> delegato e un <xref:System.Threading.WaitHandle> a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>. Ogni volta che viene eseguito il metodo di callback di <xref:System.Threading.WaitHandle> scade o viene segnalato.  
  
  
> [!NOTE]
>  Gli utenti di Visual Basic è possono omettere il <xref:System.Threading.WaitOrTimerCallback> costruttore e utilizzare semplicemente la `AddressOf` operatore quando si passa il metodo di callback da <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>. Visual Basic chiama automaticamente il costruttore di delegato corretto.  
  
 Se si desidera passare le informazioni per il metodo di callback, creare un oggetto che contiene le informazioni necessarie e passarlo a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> quando si crea l'handle di attesa registrata. Ogni volta che viene eseguito il metodo di callback, la `state` parametro contiene questo oggetto.  
  
 Per ulteriori informazioni sull'utilizzo di metodi di callback per sincronizzare i thread del pool, vedere [il Pool di Thread gestiti](~/docs/standard/threading/the-managed-thread-pool.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Threading.WaitOrTimerCallback> delegato per rappresentare un metodo di callback che viene eseguito quando un handle di attesa viene segnalato.  
  
 Nell'esempio viene inoltre illustrato come utilizzare il <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metodo per eseguire un metodo di callback specificato quando viene segnalato un handle di attesa specificato. In questo esempio, il metodo di callback è `WaitProc` e l'handle di attesa è un <xref:System.Threading.AutoResetEvent>.  
  
 Nell'esempio viene definito un `TaskInfo` classe per contenere le informazioni che viene passate al callback durante l'esecuzione. Nell'esempio viene creato un `TaskInfo` dell'oggetto e lo assegna alcuni dati di tipo stringa. Il <xref:System.Threading.RegisteredWaitHandle> restituito dal <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> assegnare al metodo il `Handle` campo il `TaskInfo` oggetto, in modo che il metodo di callback ha accesso al <xref:System.Threading.RegisteredWaitHandle>.  
  
 Oltre al `TaskInfo` oggetto, la chiamata al <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metodo consente di specificare il <xref:System.Threading.AutoResetEvent> attende l'attività, un <xref:System.Threading.WaitOrTimerCallback> delegato che rappresenta il `WaitProc` metodo di callback, un intervallo di timeout di un secondo e più callback .  
  
 Quando il thread principale segnala il <xref:System.Threading.AutoResetEvent> chiamando il relativo <xref:System.Threading.EventWaitHandle.Set%2A> (metodo), il <xref:System.Threading.WaitOrTimerCallback> delegato viene richiamato. Il `WaitProc` metodo test <xref:System.Threading.RegisteredWaitHandle> per determinare se si è verificato un timeout. Se è stato richiamato il callback, perché è stato segnalato l'handle di attesa, il `WaitProc` metodo annulla la registrazione di <xref:System.Threading.RegisteredWaitHandle>, l'arresto del callback. Nel caso di un timeout, l'attività continua in attesa. Il `WaitProc` metodo termina con la stampa di un messaggio nella console.  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>