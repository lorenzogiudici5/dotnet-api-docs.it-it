<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="WaitOrTimerCallback.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b5d797b515515af78c99d7bae5dc98c881fba73b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5d797b515515af78c99d7bae5dc98c881fba73b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.WaitOrTimerCallback">
          <source>An object containing information to be used by the callback method each time it executes.</source>
          <target state="translated">Oggetto contenente informazioni che devono essere utilizzate dal metodo di callback ogni volta che viene eseguito.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.WaitOrTimerCallback">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> timed out; <ph id="ph3">&lt;see langword="false" /&gt;</ph> if it was signaled.</source>
          <target state="translated">Il valore è <ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> ha eseguito il timeout; è <ph id="ph3">&lt;see langword="false" /&gt;</ph> se ha ricevuto un segnale.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Threading.WaitOrTimerCallback">
          <source>Represents a method to be called when a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> is signaled or times out.</source>
          <target state="translated">Rappresenta un metodo da chiamare quando <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> riceve un segnale o esegue il timeout.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source><ph id="ph1">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> represents a callback method that you want to execute when a registered wait handle times out or is signaled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> rappresenta un metodo di callback che si desidera eseguire quando un handle di attesa scade o viene segnalato.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>Create the delegate by passing your callback method to the <ph id="ph1">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> constructor.</source>
          <target state="translated">Creare il delegato passando il metodo di callback per la <ph id="ph1">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> costruttore.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>Your method must have the signature shown here.</source>
          <target state="translated">Il metodo deve avere la firma illustrata di seguito.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>Create the registered wait handle by passing the <ph id="ph1">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate and a <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> to <ph id="ph3">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Creare l'handle di attesa registrata, passando il <ph id="ph1">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegato e un <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> a <ph id="ph3">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>Your callback method executes each time the <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> times out or is signaled.</source>
          <target state="translated">Ogni volta che viene eseguito il metodo di callback di <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> scade o viene segnalato.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>Visual Basic users can omit the <ph id="ph1">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> constructor, and simply use the <ph id="ph2">`AddressOf`</ph> operator when passing the callback method to <ph id="ph3">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>.</source>
          <target state="translated">Gli utenti di Visual Basic è possono omettere il <ph id="ph1">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> costruttore e utilizzare semplicemente la <ph id="ph2">`AddressOf`</ph> operatore quando si passa il metodo di callback da <ph id="ph3">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>Visual Basic automatically calls the correct delegate constructor.</source>
          <target state="translated">Visual Basic chiama automaticamente il costruttore di delegato corretto.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> when you create the registered wait handle.</source>
          <target state="translated">Se si desidera passare le informazioni per il metodo di callback, creare un oggetto che contiene le informazioni necessarie e passarlo a <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> quando si crea l'handle di attesa registrata.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>Each time your callback method executes, the <ph id="ph1">`state`</ph> parameter contains this object.</source>
          <target state="translated">Ogni volta che viene eseguito il metodo di callback, la <ph id="ph1">`state`</ph> parametro contiene questo oggetto.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>For more information about using callback methods to synchronize thread pool threads, see <bpt id="p1">[</bpt>The Managed Thread Pool<ept id="p1">](~/docs/standard/threading/the-managed-thread-pool.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sull'utilizzo di metodi di callback per sincronizzare i thread del pool, vedere <bpt id="p1">[</bpt>il Pool di Thread gestiti<ept id="p1">](~/docs/standard/threading/the-managed-thread-pool.md)</ept>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate to represent a callback method that is executed when a wait handle is signaled.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come utilizzare il <ph id="ph1">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegato per rappresentare un metodo di callback che viene eseguito quando un handle di attesa viene segnalato.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>The example also shows how to use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method to execute a specified callback method when a specified wait handle is signaled.</source>
          <target state="translated">Nell'esempio viene inoltre illustrato come utilizzare il <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> metodo per eseguire un metodo di callback specificato quando viene segnalato un handle di attesa specificato.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>In this example, the callback method is <ph id="ph1">`WaitProc`</ph> and the wait handle is an <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>.</source>
          <target state="translated">In questo esempio, il metodo di callback è <ph id="ph1">`WaitProc`</ph> e l'handle di attesa è un <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>The example defines a <ph id="ph1">`TaskInfo`</ph> class to hold the information that is passed to the callback when it executes.</source>
          <target state="translated">Nell'esempio viene definito un <ph id="ph1">`TaskInfo`</ph> classe per contenere le informazioni che viene passate al callback durante l'esecuzione.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>The example creates a <ph id="ph1">`TaskInfo`</ph> object and assigns it some string data.</source>
          <target state="translated">Nell'esempio viene creato un <ph id="ph1">`TaskInfo`</ph> dell'oggetto e lo assegna alcuni dati di tipo stringa.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>The <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method is assigned to the <ph id="ph3">`Handle`</ph> field of the <ph id="ph4">`TaskInfo`</ph> object, so that the callback method has access to the <ph id="ph5">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> restituito dal <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> assegnare al metodo il <ph id="ph3">`Handle`</ph> campo il <ph id="ph4">`TaskInfo`</ph> oggetto, in modo che il metodo di callback ha accesso al <ph id="ph5">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>In addition to the <ph id="ph1">`TaskInfo`</ph> object, the call to the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method specifies the <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> the task waits on, a <ph id="ph4">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate that represents the <ph id="ph5">`WaitProc`</ph> callback method, a one-second timeout interval, and multiple callbacks.</source>
          <target state="translated">Oltre al <ph id="ph1">`TaskInfo`</ph> oggetto, la chiamata al <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> metodo consente di specificare il <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> attende l'attività, un <ph id="ph4">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegato che rappresenta il <ph id="ph5">`WaitProc`</ph> metodo di callback, un intervallo di timeout di un secondo e più callback .</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>When the main thread signals the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> by calling its <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method, the <ph id="ph3">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate is invoked.</source>
          <target state="translated">Quando il thread principale segnala il <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> chiamando il relativo <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> (metodo), il <ph id="ph3">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegato viene richiamato.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>The <ph id="ph1">`WaitProc`</ph> method tests <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> to determine whether a timeout occurred.</source>
          <target state="translated">Il <ph id="ph1">`WaitProc`</ph> metodo test <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> per determinare se si è verificato un timeout.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>If the callback was invoked because the wait handle was signaled, the <ph id="ph1">`WaitProc`</ph> method unregisters the <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>, stopping further callbacks.</source>
          <target state="translated">Se è stato richiamato il callback, perché è stato segnalato l'handle di attesa, il <ph id="ph1">`WaitProc`</ph> metodo annulla la registrazione di <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>, l'arresto del callback.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>In the case of a timeout, the task continues waiting.</source>
          <target state="translated">Nel caso di un timeout, l'attività continua in attesa.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.WaitOrTimerCallback">
          <source>The <ph id="ph1">`WaitProc`</ph> method ends by printing a message to the console.</source>
          <target state="translated">Il <ph id="ph1">`WaitProc`</ph> metodo termina con la stampa di un messaggio nella console.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>