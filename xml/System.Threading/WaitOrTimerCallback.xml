<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="469d652f29246ee0fba56dca58170b558a5ef452" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39873266" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <TypeSignature Language="F#" Value="type WaitOrTimerCallback = delegate of obj * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">
      <span data-ttu-id="a9f27-101">Oggetto contenente informazioni che devono essere utilizzate dal metodo di callback ogni volta che viene eseguito.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a9f27-101">An object containing information to be used by the callback method each time it executes.</span>
      </span>
    </param>
    <param name="timedOut">
      <span data-ttu-id="a9f27-102">Il valore è <see langword="true" /> se <see cref="T:System.Threading.WaitHandle" /> ha eseguito il timeout; è <see langword="false" /> se ha ricevuto un segnale.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a9f27-102">
          <see langword="true" /> if the <see cref="T:System.Threading.WaitHandle" /> timed out; <see langword="false" /> if it was signaled.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="a9f27-103">Rappresenta un metodo da chiamare quando <see cref="T:System.Threading.WaitHandle" /> riceve un segnale o esegue il timeout.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a9f27-103">Represents a method to be called when a <see cref="T:System.Threading.WaitHandle" /> is signaled or times out.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9f27-104"><xref:System.Threading.WaitOrTimerCallback> rappresenta un metodo di callback che si desidera eseguire quando un handle di attesa scade o viene segnalato.</span><span class="sxs-lookup"><span data-stu-id="a9f27-104"><xref:System.Threading.WaitOrTimerCallback> represents a callback method that you want to execute when a registered wait handle times out or is signaled.</span></span> <span data-ttu-id="a9f27-105">Creare il delegato passando il metodo di callback per il <xref:System.Threading.WaitOrTimerCallback> costruttore.</span><span class="sxs-lookup"><span data-stu-id="a9f27-105">Create the delegate by passing your callback method to the <xref:System.Threading.WaitOrTimerCallback> constructor.</span></span> <span data-ttu-id="a9f27-106">Il metodo deve avere la firma illustrata di seguito.</span><span class="sxs-lookup"><span data-stu-id="a9f27-106">Your method must have the signature shown here.</span></span>  
  
 <span data-ttu-id="a9f27-107">Creare l'handle di attesa registrata passando il <xref:System.Threading.WaitOrTimerCallback> delegato e un <xref:System.Threading.WaitHandle> a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="a9f27-107">Create the registered wait handle by passing the <xref:System.Threading.WaitOrTimerCallback> delegate and a <xref:System.Threading.WaitHandle> to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a9f27-108">Ogni volta che viene eseguito il metodo di callback di <xref:System.Threading.WaitHandle> scade o viene segnalato.</span><span class="sxs-lookup"><span data-stu-id="a9f27-108">Your callback method executes each time the <xref:System.Threading.WaitHandle> times out or is signaled.</span></span>  
  
  
> [!NOTE]
>  <span data-ttu-id="a9f27-109">Gli utenti di Visual Basic è possono omettere il <xref:System.Threading.WaitOrTimerCallback> costruttore e usare semplicemente il `AddressOf` operatore quando si passa il metodo di callback per <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>.</span><span class="sxs-lookup"><span data-stu-id="a9f27-109">Visual Basic users can omit the <xref:System.Threading.WaitOrTimerCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>.</span></span> <span data-ttu-id="a9f27-110">Visual Basic chiama automaticamente il costruttore di delegato corretto.</span><span class="sxs-lookup"><span data-stu-id="a9f27-110">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
 <span data-ttu-id="a9f27-111">Se si desidera passare le informazioni per il metodo di callback, creare un oggetto che contiene le informazioni necessarie e passarlo a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> quando si crea l'handle di attesa registrata.</span><span class="sxs-lookup"><span data-stu-id="a9f27-111">If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> when you create the registered wait handle.</span></span> <span data-ttu-id="a9f27-112">Ogni volta che viene eseguito il metodo di callback, il `state` parametro contiene l'oggetto.</span><span class="sxs-lookup"><span data-stu-id="a9f27-112">Each time your callback method executes, the `state` parameter contains this object.</span></span>  
  
 <span data-ttu-id="a9f27-113">Per altre informazioni sull'uso di metodi di callback per sincronizzare i thread del pool, vedere [il Pool di Thread gestiti](~/docs/standard/threading/the-managed-thread-pool.md).</span><span class="sxs-lookup"><span data-stu-id="a9f27-113">For more information about using callback methods to synchronize thread pool threads, see [The Managed Thread Pool](~/docs/standard/threading/the-managed-thread-pool.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9f27-114">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Threading.WaitOrTimerCallback> delegato che rappresenti un metodo di callback che viene eseguito quando viene segnalato un handle di attesa.</span><span class="sxs-lookup"><span data-stu-id="a9f27-114">The following example shows how to use the <xref:System.Threading.WaitOrTimerCallback> delegate to represent a callback method that is executed when a wait handle is signaled.</span></span>  
  
 <span data-ttu-id="a9f27-115">Nell'esempio viene inoltre illustrato come utilizzare il <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metodo per eseguire un metodo di callback specificato quando viene segnalato un handle di attesa specificato.</span><span class="sxs-lookup"><span data-stu-id="a9f27-115">The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="a9f27-116">In questo esempio, è il metodo di callback `WaitProc` e l'handle di attesa è un <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="a9f27-116">In this example, the callback method is `WaitProc` and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="a9f27-117">L'esempio definisce un `TaskInfo` classe per contenere le informazioni che viene passate al callback durante l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="a9f27-117">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="a9f27-118">Nell'esempio viene creato un `TaskInfo` dell'oggetto e lo assegna alcuni dati di tipo stringa.</span><span class="sxs-lookup"><span data-stu-id="a9f27-118">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="a9f27-119">Il <xref:System.Threading.RegisteredWaitHandle> restituito dal <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metodo viene assegnato al `Handle` campo il `TaskInfo` dell'oggetto, in modo che il metodo di callback può accedere al <xref:System.Threading.RegisteredWaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="a9f27-119">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object, so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="a9f27-120">Oltre al `TaskInfo` object, la chiamata al <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metodo specifica il <xref:System.Threading.AutoResetEvent> attende l'attività, una <xref:System.Threading.WaitOrTimerCallback> delegato che rappresenta il `WaitProc` più callback del metodo di callback e un intervallo di timeout di un secondo .</span><span class="sxs-lookup"><span data-stu-id="a9f27-120">In addition to the `TaskInfo` object, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> the task waits on, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one-second timeout interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="a9f27-121">Quando il thread principale segnala la <xref:System.Threading.AutoResetEvent> chiamando relativi <xref:System.Threading.EventWaitHandle.Set%2A> metodo, il <xref:System.Threading.WaitOrTimerCallback> delegato viene richiamato.</span><span class="sxs-lookup"><span data-stu-id="a9f27-121">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="a9f27-122">Il `WaitProc` metodo test <xref:System.Threading.RegisteredWaitHandle> per determinare se si è verificato un timeout.</span><span class="sxs-lookup"><span data-stu-id="a9f27-122">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a timeout occurred.</span></span> <span data-ttu-id="a9f27-123">Se è stato richiamato il callback perché è stato segnalato l'handle di attesa, il `WaitProc` metodo annulla la registrazione di <xref:System.Threading.RegisteredWaitHandle>, arresto ulteriormente i callback.</span><span class="sxs-lookup"><span data-stu-id="a9f27-123">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping further callbacks.</span></span> <span data-ttu-id="a9f27-124">Nel caso di un timeout, l'attività continua in attesa.</span><span class="sxs-lookup"><span data-stu-id="a9f27-124">In the case of a timeout, the task continues waiting.</span></span> <span data-ttu-id="a9f27-125">Il `WaitProc` metodo termina con la stampa un messaggio nella console.</span><span class="sxs-lookup"><span data-stu-id="a9f27-125">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>