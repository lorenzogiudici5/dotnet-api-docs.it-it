<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="786d5f07007466fcd135c3c54003c9c7c7afcddb" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39961360" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="c3905-101">Notifica a un thread in attesa che si è verificato un evento.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c3905-101">Notifies a waiting thread that an event has occurred.</span>
      </span>
      <span data-ttu-id="c3905-102">Questa classe non può essere ereditata.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c3905-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3905-103">`AutoResetEvent` consente ai thread di comunicare tra loro mediante la segnalazione.</span><span class="sxs-lookup"><span data-stu-id="c3905-103">`AutoResetEvent` allows threads to communicate with each other by signaling.</span></span> <span data-ttu-id="c3905-104">In genere, si usa questa classe quando i thread necessitano dell'accesso esclusivo a una risorsa.</span><span class="sxs-lookup"><span data-stu-id="c3905-104">Typically, you use this class when threads need exclusive access to a resource.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c3905-105">Questo tipo implementa la <xref:System.IDisposable> interfaccia.</span><span class="sxs-lookup"><span data-stu-id="c3905-105">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="c3905-106">Dopo aver utilizzato il tipo, è necessario eliminarlo direttamente o indirettamente.</span><span class="sxs-lookup"><span data-stu-id="c3905-106">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="c3905-107">Per eliminare il tipo direttamente, chiamare relativi <xref:System.IDisposable.Dispose%2A> metodo in un `try` / `catch` blocco.</span><span class="sxs-lookup"><span data-stu-id="c3905-107">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="c3905-108">Per eliminarlo indirettamente, utilizzare un costrutto di linguaggio come ad esempio `using` in C# o `Using` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c3905-108">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="c3905-109">Per altre informazioni, vedere la sezione "Utilizzo di oggetti che implementano IDisposable" nel <xref:System.IDisposable> argomento relativo all'interfaccia.</span><span class="sxs-lookup"><span data-stu-id="c3905-109">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="c3905-110">Un thread attende un segnale chiamando <xref:System.Threading.WaitHandle.WaitOne%2A> nella `AutoResetEvent`.</span><span class="sxs-lookup"><span data-stu-id="c3905-110">A thread waits for a signal by calling <xref:System.Threading.WaitHandle.WaitOne%2A> on the `AutoResetEvent`.</span></span> <span data-ttu-id="c3905-111">Se il `AutoResetEvent` si trova nello stato non segnalato, il thread si blocca e attende che il thread che attualmente controlla la risorsa per segnalare che la risorsa è disponibile chiamando <xref:System.Threading.EventWaitHandle.Set%2A>.</span><span class="sxs-lookup"><span data-stu-id="c3905-111">If the `AutoResetEvent` is in the non-signaled state, the thread blocks, waiting for the thread that currently controls the resource to signal that the resource is available by calling <xref:System.Threading.EventWaitHandle.Set%2A>.</span></span>  
  
 <span data-ttu-id="c3905-112">La chiamata `Set` segnali `AutoResetEvent` per rilasciare un thread in attesa.</span><span class="sxs-lookup"><span data-stu-id="c3905-112">Calling `Set` signals `AutoResetEvent` to release a waiting thread.</span></span> <span data-ttu-id="c3905-113">`AutoResetEvent` rimane segnalato finché non viene rilasciato un singolo thread in attesa e quindi automaticamente torna allo stato non segnalato.</span><span class="sxs-lookup"><span data-stu-id="c3905-113">`AutoResetEvent` remains signaled until a single waiting thread is released, and then automatically returns to the non-signaled state.</span></span> <span data-ttu-id="c3905-114">Se nessun thread in attesa, lo stato resta segnalato in modo indefinito.</span><span class="sxs-lookup"><span data-stu-id="c3905-114">If no threads are waiting, the state remains signaled indefinitely.</span></span>  
  
 <span data-ttu-id="c3905-115">Se un thread chiama <xref:System.Threading.WaitHandle.WaitOne%2A> mentre il <xref:System.Threading.AutoResetEvent> è nello stato segnalato, non blocca il thread.</span><span class="sxs-lookup"><span data-stu-id="c3905-115">If a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A> while the <xref:System.Threading.AutoResetEvent> is in the signaled state, the thread does not block.</span></span> <span data-ttu-id="c3905-116">Il <xref:System.Threading.AutoResetEvent> rilascia immediatamente il thread e torna allo stato non segnalato.</span><span class="sxs-lookup"><span data-stu-id="c3905-116">The <xref:System.Threading.AutoResetEvent> releases the thread immediately and returns to the non-signaled state.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c3905-117">Non c'è garanzia che ogni chiamata al <xref:System.Threading.EventWaitHandle.Set%2A> metodo rilascerà un thread.</span><span class="sxs-lookup"><span data-stu-id="c3905-117">There is no guarantee that every call to the <xref:System.Threading.EventWaitHandle.Set%2A> method will release a thread.</span></span> <span data-ttu-id="c3905-118">Se due chiamate sono troppo vicini, in modo che la seconda chiamata si verifica prima che un thread è stato rilasciato, viene rilasciato un solo thread.</span><span class="sxs-lookup"><span data-stu-id="c3905-118">If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released.</span></span> <span data-ttu-id="c3905-119">È come se non è stata eseguita la seconda chiamata.</span><span class="sxs-lookup"><span data-stu-id="c3905-119">It is as if the second call did not happen.</span></span> <span data-ttu-id="c3905-120">Inoltre, se <xref:System.Threading.EventWaitHandle.Set%2A> viene chiamato quando nessun thread in attesa e <xref:System.Threading.AutoResetEvent> già segnalato, la chiamata non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="c3905-120">Also, if <xref:System.Threading.EventWaitHandle.Set%2A> is called when there are no threads waiting and the <xref:System.Threading.AutoResetEvent> is already signaled, the call has no effect.</span></span>  
  
 <span data-ttu-id="c3905-121">È possibile controllare lo stato iniziale di un' `AutoResetEvent` passando un valore booleano per il costruttore: `true` se viene segnalato lo stato iniziale e `false` in caso contrario.</span><span class="sxs-lookup"><span data-stu-id="c3905-121">You can control the initial state of an `AutoResetEvent` by passing a Boolean value to the constructor: `true` if the initial state is signaled and `false` otherwise.</span></span>  
  
 <span data-ttu-id="c3905-122">`AutoResetEvent` è anche utilizzabile con il `static` <xref:System.Threading.WaitHandle.WaitAll%2A> e <xref:System.Threading.WaitHandle.WaitAny%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="c3905-122">`AutoResetEvent` can also be used with the `static`<xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="c3905-123">Per altre informazioni sui meccanismi di sincronizzazione di thread, vedere [AutoResetEvent](~/docs/standard/threading/autoresetevent.md) nella documentazione concettuale.</span><span class="sxs-lookup"><span data-stu-id="c3905-123">For more information about thread synchronization mechanisms, see [AutoResetEvent](~/docs/standard/threading/autoresetevent.md) in the conceptual documentation.</span></span>  
  
 <span data-ttu-id="c3905-124">A partire da .NET Framework versione 2.0 <xref:System.Threading.AutoResetEvent> deriva dalla nuova <xref:System.Threading.EventWaitHandle> classe.</span><span class="sxs-lookup"><span data-stu-id="c3905-124">Beginning with the .NET Framework version 2.0, <xref:System.Threading.AutoResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="c3905-125">Un' <xref:System.Threading.AutoResetEvent> è funzionalmente equivalente a un <xref:System.Threading.EventWaitHandle> creati con <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c3905-125">An <xref:System.Threading.AutoResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c3905-126">A differenza di <xref:System.Threading.AutoResetEvent> (classe), il <xref:System.Threading.EventWaitHandle> classe fornisce accesso agli eventi di sincronizzazione di sistema denominati.</span><span class="sxs-lookup"><span data-stu-id="c3905-126">Unlike the <xref:System.Threading.AutoResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3905-127">Nell'esempio seguente viene illustrato come utilizzare <xref:System.Threading.AutoResetEvent> rilasciare un solo thread alla volta, chiamando la <xref:System.Threading.EventWaitHandle.Set%2A> metodo (nella classe di base) ogni volta che l'utente preme il **invio** chiave.</span><span class="sxs-lookup"><span data-stu-id="c3905-127">The following example shows how to use <xref:System.Threading.AutoResetEvent> to release one thread at a time, by calling the <xref:System.Threading.EventWaitHandle.Set%2A> method (on the base class) each time the user presses the **Enter** key.</span></span> <span data-ttu-id="c3905-128">Nell'esempio viene avviato tre thread, tra cui restare in attesa un <xref:System.Threading.AutoResetEvent> che è stato creato nello stato segnalato.</span><span class="sxs-lookup"><span data-stu-id="c3905-128">The example starts three threads, which wait on an <xref:System.Threading.AutoResetEvent> that was created in the signaled state.</span></span> <span data-ttu-id="c3905-129">Il primo thread viene rilasciato immediatamente, in quanto il <xref:System.Threading.AutoResetEvent> è già stato segnalato.</span><span class="sxs-lookup"><span data-stu-id="c3905-129">The first thread is released immediately, because the <xref:System.Threading.AutoResetEvent> is already in the signaled state.</span></span> <span data-ttu-id="c3905-130">Questa opzione Reimposta la <xref:System.Threading.AutoResetEvent> allo stato di non segnalato, in modo da bloccano i thread successivi.</span><span class="sxs-lookup"><span data-stu-id="c3905-130">This resets the <xref:System.Threading.AutoResetEvent> to the non-signaled state, so that subsequent threads block.</span></span> <span data-ttu-id="c3905-131">I thread bloccati non vengono rilasciati fino a quando l'utente rilascia loro uno alla volta premendo la **invio** chiave.</span><span class="sxs-lookup"><span data-stu-id="c3905-131">The blocked threads are not released until the user releases them one at a time by pressing the **Enter** key.</span></span>  
  
 <span data-ttu-id="c3905-132">Dopo che i thread vengono rilasciati dal primo <xref:System.Threading.AutoResetEvent>, rimangono in attesa su un altro <xref:System.Threading.AutoResetEvent> che è stato creato nello stato non segnalato.</span><span class="sxs-lookup"><span data-stu-id="c3905-132">After the threads are released from the first <xref:System.Threading.AutoResetEvent>, they wait on another <xref:System.Threading.AutoResetEvent> that was created in the non-signaled state.</span></span> <span data-ttu-id="c3905-133">Bloccano tutti i thread, pertanto la <xref:System.Threading.EventWaitHandle.Set%2A> metodo deve essere chiamato tre volte per il rilascio tutti.</span><span class="sxs-lookup"><span data-stu-id="c3905-133">All three threads block, so the <xref:System.Threading.EventWaitHandle.Set%2A> method must be called three times to release them all.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="c3905-134">Questa classe è thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c3905-134">This class is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.AutoResetEvent : bool -&gt; System.Threading.AutoResetEvent" Usage="new System.Threading.AutoResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">
          <span data-ttu-id="c3905-135">
            <see langword="true" /> per impostare lo stato iniziale su segnalato; <see langword="false" /> per impostare lo stato iniziale su non segnalato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3905-135">
              <see langword="true" /> to set the initial state to signaled; <see langword="false" /> to set the initial state to non-signaled.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c3905-136">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.Threading.AutoResetEvent" /> con un valore Booleano che indica se lo stato iniziale deve essere impostato su segnalato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c3905-136">Initializes a new instance of the <see cref="T:System.Threading.AutoResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c3905-137">L'esempio seguente usa un <xref:System.Threading.AutoResetEvent> per sincronizzare le attività di due thread.</span><span class="sxs-lookup"><span data-stu-id="c3905-137">The following example uses an <xref:System.Threading.AutoResetEvent> to synchronize the activities of two threads.</span></span> <span data-ttu-id="c3905-138">Il primo thread, che è il thread dell'applicazione, esegue `Main`.</span><span class="sxs-lookup"><span data-stu-id="c3905-138">The first thread, which is the application thread, executes `Main`.</span></span> <span data-ttu-id="c3905-139">Scrive i valori alla risorsa protetta, che è un `static` (`Shared` in Visual Basic) campo denominato `number`.</span><span class="sxs-lookup"><span data-stu-id="c3905-139">It writes values to the protected resource, which is a `static` (`Shared` in Visual Basic) field named `number`.</span></span> <span data-ttu-id="c3905-140">Il secondo thread esegue il metodo statico `ThreadProc` metodo, che legge i valori scritti dallo `Main`.</span><span class="sxs-lookup"><span data-stu-id="c3905-140">The second thread executes the static `ThreadProc` method, which reads the values written by `Main`.</span></span>  
  
 <span data-ttu-id="c3905-141">Il `ThreadProc` metodo attende il <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="c3905-141">The `ThreadProc` method waits for the <xref:System.Threading.AutoResetEvent>.</span></span> <span data-ttu-id="c3905-142">Quando `Main` chiama il <xref:System.Threading.EventWaitHandle.Set%2A> metodo sul <xref:System.Threading.AutoResetEvent>, il `ThreadProc` metodo legge un valore.</span><span class="sxs-lookup"><span data-stu-id="c3905-142">When `Main` calls the <xref:System.Threading.EventWaitHandle.Set%2A> method on the <xref:System.Threading.AutoResetEvent>, the `ThreadProc` method reads one value.</span></span> <span data-ttu-id="c3905-143">Il <xref:System.Threading.AutoResetEvent> immediatamente reimpostato, pertanto la `ThreadProc` metodo rimane in attesa nuovamente.</span><span class="sxs-lookup"><span data-stu-id="c3905-143">The <xref:System.Threading.AutoResetEvent> immediately resets, so the `ThreadProc` method waits again.</span></span>  
  
 <span data-ttu-id="c3905-144">La logica di programma garantisce che il `ThreadProc` metodo non leggerà mai lo stesso valore due volte.</span><span class="sxs-lookup"><span data-stu-id="c3905-144">The program logic guarantees that the `ThreadProc` method will never read the same value two times.</span></span> <span data-ttu-id="c3905-145">Ciò non garantisce che il `ThreadProc` metodo leggerà tutti i valori scritti da `Main`.</span><span class="sxs-lookup"><span data-stu-id="c3905-145">It does not guarantee that the `ThreadProc` method will read every value written by `Main`.</span></span> <span data-ttu-id="c3905-146">Tale garanzia richiederebbe una seconda <xref:System.Threading.AutoResetEvent> blocco.</span><span class="sxs-lookup"><span data-stu-id="c3905-146">That guarantee would require a second <xref:System.Threading.AutoResetEvent> lock.</span></span>  
  
 <span data-ttu-id="c3905-147">Dopo ogni operazione di scrittura `Main` produce chiamando il <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> i metodi, per permettere il secondo thread di esecuzione.</span><span class="sxs-lookup"><span data-stu-id="c3905-147">After each write operation, `Main` yields by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method, to give the second thread a chance to execute.</span></span> <span data-ttu-id="c3905-148">In caso contrario, in un computer a processore singolo `Main` scriverebbe numerosi valori tra le due operazioni di lettura.</span><span class="sxs-lookup"><span data-stu-id="c3905-148">Otherwise, on a single-processor computer `Main` would write many values between any two read operations.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="autoResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="autoResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>