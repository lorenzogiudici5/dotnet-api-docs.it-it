<Type Name="ReaderWriterLockSlim" FullName="System.Threading.ReaderWriterLockSlim">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="522d8b26e179558c4747b32eb8c9334684385cdc" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37548822" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ReaderWriterLockSlim : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ReaderWriterLockSlim extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ReaderWriterLockSlim" />
  <TypeSignature Language="VB.NET" Value="Public Class ReaderWriterLockSlim&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReaderWriterLockSlim : IDisposable" />
  <TypeSignature Language="F#" Value="type ReaderWriterLockSlim = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="78b1d-101">Represents a lock that is used to manage access to a resource, allowing multiple threads for reading or exclusive access for writing.</span>
      <span class="sxs-lookup">
        <span data-stu-id="78b1d-101">Represents a lock that is used to manage access to a resource, allowing multiple threads for reading or exclusive access for writing.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-102">Usare <xref:System.Threading.ReaderWriterLockSlim> per proteggere una risorsa che viene letta da più thread e scritta da un solo thread alla volta.</span><span class="sxs-lookup"><span data-stu-id="78b1d-102">Use <xref:System.Threading.ReaderWriterLockSlim> to protect a resource that is read by multiple threads and written to by one thread at a time.</span></span> <span data-ttu-id="78b1d-103"><xref:System.Threading.ReaderWriterLockSlim> consente a più thread essere in modalità di lettura, consente a un solo thread essere in modalità di scrittura con la proprietà esclusiva del blocco e consente a un thread che ha accesso in lettura sia in modalità di lettura aggiornabile, da cui il thread può eseguire l'aggiornamento alla modalità di scrittura senza la necessità di lasciare lo s accesso in lettura alla risorsa.</span><span class="sxs-lookup"><span data-stu-id="78b1d-103"><xref:System.Threading.ReaderWriterLockSlim> allows multiple threads to be in read mode, allows one thread to be in write mode with exclusive ownership of the lock, and allows one thread that has read access to be in upgradeable read mode, from which the thread can upgrade to write mode without having to relinquish its read access to the resource.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78b1d-104"><xref:System.Threading.ReaderWriterLockSlim> è simile a <xref:System.Threading.ReaderWriterLock>, ma include regole semplificate per la ricorsione e per l'aggiornamento e il downgrade dello stato del blocco.</span><span class="sxs-lookup"><span data-stu-id="78b1d-104"><xref:System.Threading.ReaderWriterLockSlim> is similar to <xref:System.Threading.ReaderWriterLock>, but it has simplified rules for recursion and for upgrading and downgrading lock state.</span></span> <span data-ttu-id="78b1d-105"><xref:System.Threading.ReaderWriterLockSlim> evita molti casi di deadlock potenziale.</span><span class="sxs-lookup"><span data-stu-id="78b1d-105"><xref:System.Threading.ReaderWriterLockSlim> avoids many cases of potential deadlock.</span></span> <span data-ttu-id="78b1d-106">Inoltre, le prestazioni di <xref:System.Threading.ReaderWriterLockSlim> sono significativamente migliori di <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="78b1d-106">In addition, the performance of <xref:System.Threading.ReaderWriterLockSlim> is significantly better than <xref:System.Threading.ReaderWriterLock>.</span></span> <span data-ttu-id="78b1d-107"><xref:System.Threading.ReaderWriterLockSlim> è consigliato per tutte le nuove fasi di sviluppo.</span><span class="sxs-lookup"><span data-stu-id="78b1d-107"><xref:System.Threading.ReaderWriterLockSlim> is recommended for all new development.</span></span>  
  
 <span data-ttu-id="78b1d-108">Per impostazione predefinita, le nuove istanze di <xref:System.Threading.ReaderWriterLockSlim> vengono creati con la <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> flag e non consentono la ricorsione.</span><span class="sxs-lookup"><span data-stu-id="78b1d-108">By default, new instances of <xref:System.Threading.ReaderWriterLockSlim> are created with the <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> flag and do not allow recursion.</span></span> <span data-ttu-id="78b1d-109">Il criterio predefinito è consigliato per tutti i nuovi progetti di sviluppo, poiché la ricorsione introduce complicazioni non necessari e rende il codice più soggette a deadlock.</span><span class="sxs-lookup"><span data-stu-id="78b1d-109">This default policy is recommended for all new development, because recursion introduces unnecessary complications and makes your code more prone to deadlocks.</span></span> <span data-ttu-id="78b1d-110">Per semplificare la migrazione da esistente i progetti che usano <xref:System.Threading.Monitor> oppure <xref:System.Threading.ReaderWriterLock>, è possibile utilizzare il <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> flag per creare istanze di <xref:System.Threading.ReaderWriterLockSlim> che consentono la ricorsione.</span><span class="sxs-lookup"><span data-stu-id="78b1d-110">To simplify migration from existing projects that use <xref:System.Threading.Monitor> or <xref:System.Threading.ReaderWriterLock>, you can use the <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> flag to create instances of <xref:System.Threading.ReaderWriterLockSlim> that allow recursion.</span></span>  
  
 <span data-ttu-id="78b1d-111">Un thread può accedere al blocco in tre modalità: lettura modalità, modalità di scrittura e modalità di lettura aggiornabile.</span><span class="sxs-lookup"><span data-stu-id="78b1d-111">A thread can enter the lock in three modes: read mode, write mode, and upgradeable read mode.</span></span> <span data-ttu-id="78b1d-112">(Nella parte restante di questo argomento, "modalità di lettura aggiornabile" fa riferimento come "modalità aggiornabile" e la frase "immettere `x` modalità" viene usato preferita la frase più lunga "Immettere il blocco in `x` modalità".)</span><span class="sxs-lookup"><span data-stu-id="78b1d-112">(In the rest of this topic, "upgradeable read mode" is referred to as "upgradeable mode", and the phrase "enter `x` mode" is used in preference to the longer phrase "enter the lock in `x` mode".)</span></span>  
  
 <span data-ttu-id="78b1d-113">Indipendentemente dai criteri di ricorsione, solo un thread può essere in modalità di scrittura in qualsiasi momento.</span><span class="sxs-lookup"><span data-stu-id="78b1d-113">Regardless of recursion policy, only one thread can be in write mode at any time.</span></span> <span data-ttu-id="78b1d-114">Quando un thread è in modalità scrittura, nessun altro thread può accedere al blocco in qualsiasi modalità.</span><span class="sxs-lookup"><span data-stu-id="78b1d-114">When a thread is in write mode, no other thread can enter the lock in any mode.</span></span> <span data-ttu-id="78b1d-115">Solo un thread può essere in modalità aggiornabile in qualsiasi momento.</span><span class="sxs-lookup"><span data-stu-id="78b1d-115">Only one thread can be in upgradeable mode at any time.</span></span> <span data-ttu-id="78b1d-116">Qualsiasi numero di thread può essere in modalità di lettura e può esistere un solo thread in modalità aggiornabile mentre altri thread sono in modalità lettura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-116">Any number of threads can be in read mode, and there can be one thread in upgradeable mode while other threads are in read mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="78b1d-117">Questo tipo implementa la <xref:System.IDisposable> interfaccia.</span><span class="sxs-lookup"><span data-stu-id="78b1d-117">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="78b1d-118">Dopo aver utilizzato il tipo, è necessario eliminarlo direttamente o indirettamente.</span><span class="sxs-lookup"><span data-stu-id="78b1d-118">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="78b1d-119">Per eliminare il tipo direttamente, chiamare relativi <xref:System.IDisposable.Dispose%2A> metodo in un `try` / `catch` blocco.</span><span class="sxs-lookup"><span data-stu-id="78b1d-119">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="78b1d-120">Per eliminarlo indirettamente, utilizzare un costrutto di linguaggio come ad esempio `using` in C# o `Using` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="78b1d-120">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="78b1d-121">Per altre informazioni, vedere la sezione "Utilizzo di oggetti che implementano IDisposable" nel <xref:System.IDisposable> argomento relativo all'interfaccia.</span><span class="sxs-lookup"><span data-stu-id="78b1d-121">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="78b1d-122"><xref:System.Threading.ReaderWriterLockSlim> ha gestito l'affinità di thread; vale a dire, ognuna <xref:System.Threading.Thread> oggetto deve eseguire la propria chiamate di metodo per attivare e disattivare la modalità di blocco.</span><span class="sxs-lookup"><span data-stu-id="78b1d-122"><xref:System.Threading.ReaderWriterLockSlim> has managed thread affinity; that is, each <xref:System.Threading.Thread> object must make its own method calls to enter and exit lock modes.</span></span> <span data-ttu-id="78b1d-123">Nessun thread può modificare la modalità di un altro thread.</span><span class="sxs-lookup"><span data-stu-id="78b1d-123">No thread can change the mode of another thread.</span></span>  
  
 <span data-ttu-id="78b1d-124">Se un <xref:System.Threading.ReaderWriterLockSlim> non supporta la ricorsione, un thread che prova ad attivare il blocco può essere bloccato per diversi motivi:</span><span class="sxs-lookup"><span data-stu-id="78b1d-124">If a <xref:System.Threading.ReaderWriterLockSlim> does not allow recursion, a thread that tries to enter the lock can block for several reasons:</span></span>  
  
-   <span data-ttu-id="78b1d-125">Un thread che prova ad attivare la modalità lettura blocchi se sono presenti thread in attesa di immettere la modalità scrittura o è presente un singolo thread in modalità di scrittura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-125">A thread that tries to enter read mode blocks if there are threads waiting to enter write mode or if there is a single thread in write mode.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="78b1d-126">Blocchi i lettori di nuovo quando vengono messe in coda i writer è un criterio di equità di blocco che predilige i thread.</span><span class="sxs-lookup"><span data-stu-id="78b1d-126">Blocking new readers when writers are queued is a lock fairness policy that favors writers.</span></span> <span data-ttu-id="78b1d-127">I criteri di equità correnti bilanciano equità tra i lettori e writer, per aumentare la velocità effettiva in scenari più comuni.</span><span class="sxs-lookup"><span data-stu-id="78b1d-127">The current fairness policy balances fairness to readers and writers, to promote throughput in the most common scenarios.</span></span> <span data-ttu-id="78b1d-128">Le versioni future del [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] può introdurre nuovi criteri di equità.</span><span class="sxs-lookup"><span data-stu-id="78b1d-128">Future versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] may introduce new fairness policies.</span></span>  
  
-   <span data-ttu-id="78b1d-129">Un thread che prova ad attivare i blocchi alla modalità aggiornabile se esiste già un thread in modalità aggiornabile, se sono presenti thread in attesa di attivazione della modalità scrittura, o se è presente un singolo thread in modalità di scrittura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-129">A thread that tries to enter upgradeable mode blocks if there is already a thread in upgradeable mode, if there are threads waiting to enter write mode, or if there is a single thread in write mode.</span></span>  
  
-   <span data-ttu-id="78b1d-130">Un thread che prova ad attivare i blocchi in modalità scrittura se è presente un thread in una qualsiasi delle tre modalità.</span><span class="sxs-lookup"><span data-stu-id="78b1d-130">A thread that tries to enter write mode blocks if there is a thread in any of the three modes.</span></span>  
  
## <a name="upgrading-and-downgrading-locks"></a><span data-ttu-id="78b1d-131">Blocchi di aggiornamento e downgrade</span><span class="sxs-lookup"><span data-stu-id="78b1d-131">Upgrading and Downgrading Locks</span></span>  
 <span data-ttu-id="78b1d-132">La modalità aggiornabile è destinata ai casi in cui un thread in genere legge da risorsa protetta, ma potrebbe essere necessario per la scrittura se vengono soddisfatte determinate condizioni.</span><span class="sxs-lookup"><span data-stu-id="78b1d-132">Upgradeable mode is intended for cases where a thread usually reads from the protected resource, but might need to write to it if some condition is met.</span></span> <span data-ttu-id="78b1d-133">Un thread entrato in un <xref:System.Threading.ReaderWriterLockSlim> in modalità aggiornabile con accesso in lettura alla risorsa protetta e può essere aggiornato alla modalità di scrittura chiamando il <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> o <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="78b1d-133">A thread that has entered a <xref:System.Threading.ReaderWriterLockSlim> in upgradeable mode has read access to the protected resource, and can upgrade to write mode by calling the <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> or <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> methods.</span></span> <span data-ttu-id="78b1d-134">Poiché può esserci un solo thread in modalità aggiornabile in una fase, l'aggiornamento alla modalità di scrittura non è possibile deadlock durante la ricorsione non è consentita, ovvero i criteri predefiniti.</span><span class="sxs-lookup"><span data-stu-id="78b1d-134">Because there can be only one thread in upgradeable mode at a time, upgrading to write mode cannot deadlock when recursion is not allowed, which is the default policy.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="78b1d-135">Indipendentemente dai criteri di ricorsione, un thread che ha inizialmente acceduto leggere in modalità non è consentita l'aggiornamento alla modalità aggiornabile o modalità scrittura, perché ciò comporterebbe una forte probabilità di deadlock.</span><span class="sxs-lookup"><span data-stu-id="78b1d-135">Regardless of recursion policy, a thread that initially entered read mode is not allowed to upgrade to upgradeable mode or write mode, because that pattern creates a strong probability of deadlocks.</span></span> <span data-ttu-id="78b1d-136">Ad esempio, se due thread in modalità lettura che entrambi tentano di accedere alla modalità di scrittura, provocano un deadlock.</span><span class="sxs-lookup"><span data-stu-id="78b1d-136">For example, if two threads in read mode both try to enter write mode, they will deadlock.</span></span> <span data-ttu-id="78b1d-137">La modalità aggiornabile è progettata per evitare deadlock di questo tipo.</span><span class="sxs-lookup"><span data-stu-id="78b1d-137">Upgradeable mode is designed to avoid such deadlocks.</span></span>  
  
 <span data-ttu-id="78b1d-138">Se sono presenti altri thread in modalità di lettura, il thread che sta eseguendo l'aggiornamento di blocchi.</span><span class="sxs-lookup"><span data-stu-id="78b1d-138">If there are other threads in read mode, the thread that is upgrading blocks.</span></span> <span data-ttu-id="78b1d-139">Mentre il thread è bloccato, altri thread che tentano di accedere alla modalità di lettura vengono bloccate.</span><span class="sxs-lookup"><span data-stu-id="78b1d-139">While the thread is blocked, other threads that try to enter read mode are blocked.</span></span> <span data-ttu-id="78b1d-140">Quando tutti i thread sono usciti dalla modalità di lettura, il thread bloccato aggiornabile passa alla modalità di scrittura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-140">When all threads have exited from read mode, the blocked upgradeable thread enters write mode.</span></span> <span data-ttu-id="78b1d-141">Se sono presenti altri thread in attesa di immettere la modalità scrittura, rimangono bloccati, perché il thread singolo che si trova in modalità aggiornabile impedisce loro di ottenere accesso esclusivo alla risorsa.</span><span class="sxs-lookup"><span data-stu-id="78b1d-141">If there are other threads waiting to enter write mode, they remain blocked, because the single thread that is in upgradeable mode prevents them from gaining exclusive access to the resource.</span></span>  
  
 <span data-ttu-id="78b1d-142">Quando il thread in modalità aggiornabile esce dalla modalità di scrittura, altri thread in attesa di attivare la modalità di lettura possono farlo, a meno che non sono presenti thread in attesa di immettere la modalità scrittura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-142">When the thread in upgradeable mode exits write mode, other threads that are waiting to enter read mode can do so, unless there are threads waiting to enter write mode.</span></span> <span data-ttu-id="78b1d-143">Il thread in modalità aggiornabile può eseguire l'aggiornamento e il downgrade a tempo indeterminato, purché è il thread che scrive alla risorsa protetta.</span><span class="sxs-lookup"><span data-stu-id="78b1d-143">The thread in upgradeable mode can upgrade and downgrade indefinitely, as long as it is the only thread that writes to the protected resource.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="78b1d-144">Se si consente a più thread immettere modalità di scrittura o la modalità aggiornabile, che non è necessario consentire un solo thread monopolizza modalità aggiornabile.</span><span class="sxs-lookup"><span data-stu-id="78b1d-144">If you allow multiple threads to enter write mode or upgradeable mode, you must not allow one thread to monopolize upgradeable mode.</span></span> <span data-ttu-id="78b1d-145">In caso contrario, i thread che tentano di accedere in scrittura modalità direttamente verrà bloccata per un periodo illimitato e mentre sono bloccati, altri thread sarà in grado di attivare la modalità di lettura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-145">Otherwise, threads that try to enter write mode directly will be blocked indefinitely, and while they are blocked, other threads will be unable to enter read mode.</span></span>  
  
 <span data-ttu-id="78b1d-146">Possa effettuare il downgrade di un thread in modalità aggiornabile per la modalità lettura chiamando prima il <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> metodo e chiamando quindi il <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="78b1d-146">A thread in upgradeable mode can downgrade to read mode by first calling the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method and then calling the <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> method.</span></span> <span data-ttu-id="78b1d-147">Questo modello il downgrade è consentito anche per tutti i criteri di ricorsione di blocco, <xref:System.Threading.LockRecursionPolicy.NoRecursion>.</span><span class="sxs-lookup"><span data-stu-id="78b1d-147">This downgrade pattern is allowed for all lock recursion policies, even <xref:System.Threading.LockRecursionPolicy.NoRecursion>.</span></span>  
  
 <span data-ttu-id="78b1d-148">Dopo il downgrade alla modalità di lettura, un thread non è possibile immettere nuovamente la modalità aggiornabile fino a quando non è stato terminato dalla modalità di lettura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-148">After downgrading to read mode, a thread cannot reenter upgradeable mode until it has exited from read mode.</span></span>  
  
## <a name="entering-the-lock-recursively"></a><span data-ttu-id="78b1d-149">Immettere il blocco in modo ricorsivo</span><span class="sxs-lookup"><span data-stu-id="78b1d-149">Entering the Lock Recursively</span></span>  
 <span data-ttu-id="78b1d-150">È possibile creare un <xref:System.Threading.ReaderWriterLockSlim> che supporta l'immissione di blocco ricorsiva tramite il <xref:System.Threading.ReaderWriterLockSlim.%23ctor%28System.Threading.LockRecursionPolicy%29> costruttore che consente di specificare criteri di blocco e specificando <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="78b1d-150">You can create a <xref:System.Threading.ReaderWriterLockSlim> that supports recursive lock entry by using the <xref:System.Threading.ReaderWriterLockSlim.%23ctor%28System.Threading.LockRecursionPolicy%29> constructor that specifies lock policy, and specifying <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78b1d-151">L'uso di ricorsione non è consigliabile per i nuovi sviluppi, in quanto introduce complessità non necessarie e rende il codice più soggette a deadlock.</span><span class="sxs-lookup"><span data-stu-id="78b1d-151">The use of recursion is not recommended for new development, because it introduces unnecessary complications and makes your code more prone to deadlocks.</span></span>  
  
 <span data-ttu-id="78b1d-152">Per un <xref:System.Threading.ReaderWriterLockSlim> che consente la ricorsione, si possono affermare seguenti sulle modalità di un thread può accedere:</span><span class="sxs-lookup"><span data-stu-id="78b1d-152">For a <xref:System.Threading.ReaderWriterLockSlim> that allows recursion, the following can be said about the modes a thread can enter:</span></span>  
  
-   <span data-ttu-id="78b1d-153">Un thread in modalità di lettura possa accedere in modo ricorsivo modalità lettura, ma non è possibile immettere la modalità scrittura o in modalità aggiornabile.</span><span class="sxs-lookup"><span data-stu-id="78b1d-153">A thread in read mode can enter read mode recursively, but cannot enter write mode or upgradeable mode.</span></span> <span data-ttu-id="78b1d-154">Se tenta di eseguire questa operazione, un <xref:System.Threading.LockRecursionException> viene generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="78b1d-154">If it tries to do this, a <xref:System.Threading.LockRecursionException> is thrown.</span></span> <span data-ttu-id="78b1d-155">Immissione di leggere la modalità e immettendo quindi la modalità scrittura o la modalità aggiornabile è un modello con una forte probabilità di deadlock, in modo che non è consentito.</span><span class="sxs-lookup"><span data-stu-id="78b1d-155">Entering read mode and then entering write mode or upgradeable mode is a pattern with a strong probability of deadlocks, so it is not allowed.</span></span> <span data-ttu-id="78b1d-156">Come illustrato in precedenza, la modalità aggiornabile viene fornita per i casi in cui è necessario un blocco di aggiornamento.</span><span class="sxs-lookup"><span data-stu-id="78b1d-156">As discussed earlier, upgradeable mode is provided for cases where it is necessary to upgrade a lock.</span></span>  
  
-   <span data-ttu-id="78b1d-157">Un thread in modalità aggiornabile possibile immettere la modalità di scrittura e/o modalità di lettura e può accedere a ognuna le tre modalità ricorsiva.</span><span class="sxs-lookup"><span data-stu-id="78b1d-157">A thread in upgradeable mode can enter write mode and/or read mode, and can enter any of the three modes recursively.</span></span> <span data-ttu-id="78b1d-158">Tuttavia, un tentativo di immettere scrivere modalità blocchi se sono presenti altri thread in modalità lettura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-158">However, an attempt to enter write mode blocks if there are other threads in read mode.</span></span>  
  
-   <span data-ttu-id="78b1d-159">Un thread in modalità di scrittura può immettere la modalità lettura e/o la modalità aggiornabile e possibile immettere qualsiasi in modo ricorsivo le tre modalità.</span><span class="sxs-lookup"><span data-stu-id="78b1d-159">A thread in write mode can enter read mode and/or upgradeable mode, and can enter any of the three modes recursively.</span></span>  
  
-   <span data-ttu-id="78b1d-160">Un thread che non ha acceduto al blocco è possibile immettere qualsiasi modalità.</span><span class="sxs-lookup"><span data-stu-id="78b1d-160">A thread that has not entered the lock can enter any mode.</span></span> <span data-ttu-id="78b1d-161">Questo tentativo può essere bloccato per gli stessi motivi un tentativo di attivare un blocco di non ricorsiva.</span><span class="sxs-lookup"><span data-stu-id="78b1d-161">This attempt can block for the same reasons as an attempt to enter a non-recursive lock.</span></span>  
  
 <span data-ttu-id="78b1d-162">Un thread può uscire le modalità che è stato attivato in qualsiasi ordine, purché si conclude ogni modalità esattamente come tutte le volte che passato in tale modalità.</span><span class="sxs-lookup"><span data-stu-id="78b1d-162">A thread can exit the modes it has entered in any order, as long as it exits each mode exactly as many times as it entered that mode.</span></span> <span data-ttu-id="78b1d-163">Se un thread prova a uscire da una modalità troppe volte o per uscire da una modalità non ha acceduto, un <xref:System.Threading.SynchronizationLockException> viene generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="78b1d-163">If a thread tries to exit a mode too many times, or to exit a mode it has not entered, a <xref:System.Threading.SynchronizationLockException> is thrown.</span></span>  
  
## <a name="lock-states"></a><span data-ttu-id="78b1d-164">Stati di blocco</span><span class="sxs-lookup"><span data-stu-id="78b1d-164">Lock States</span></span>  
 <span data-ttu-id="78b1d-165">Potrebbe essere utile sapere che il blocco in termini di stati.</span><span class="sxs-lookup"><span data-stu-id="78b1d-165">You may find it useful to think of the lock in terms of its states.</span></span> <span data-ttu-id="78b1d-166">Oggetto <xref:System.Threading.ReaderWriterLockSlim> può trovarsi in uno dei quattro stati: non immesso, lettura, aggiornamento e scrittura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-166">A <xref:System.Threading.ReaderWriterLockSlim> can be in one of four states: not entered, read, upgrade, and write.</span></span>  
  
-   <span data-ttu-id="78b1d-167">Non è stato immesso: In questo stato, nessun thread ha acceduto al blocco (o tutti i thread sono usciti dal blocco).</span><span class="sxs-lookup"><span data-stu-id="78b1d-167">Not entered: In this state, no threads have entered the lock (or all threads have exited the lock).</span></span>  
  
-   <span data-ttu-id="78b1d-168">Leggere: In questo stato, uno o più thread hanno acceduto al blocco per l'accesso in lettura alla risorsa protetta.</span><span class="sxs-lookup"><span data-stu-id="78b1d-168">Read: In this state, one or more threads have entered the lock for read access to the protected resource.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="78b1d-169">Un thread può accedere al blocco in modalità di lettura usando il <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> o <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> metodi, o il downgrade dalla modalità aggiornabile.</span><span class="sxs-lookup"><span data-stu-id="78b1d-169">A thread can enter the lock in read mode by using the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> or <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> methods, or by downgrading from upgradeable mode.</span></span>  
  
-   <span data-ttu-id="78b1d-170">Aggiornamento: In questo stato, un thread ha acceduto al blocco per l'accesso in lettura con la possibilità di eseguire l'aggiornamento per l'accesso in scrittura (vale a dire, in modalità aggiornabile), e zero o più thread hanno acceduto al blocco per l'accesso in lettura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-170">Upgrade: In this state, one thread has entered the lock for read access with the option to upgrade to write access (that is, in upgradeable mode), and zero or more threads have entered the lock for read access.</span></span> <span data-ttu-id="78b1d-171">Non più di un thread alla volta può attivare il blocco con l'opzione per aggiornare; gli altri thread che tenta di accedere alla modalità aggiornabile vengono bloccate.</span><span class="sxs-lookup"><span data-stu-id="78b1d-171">No more than one thread at a time can enter the lock with the option to upgrade; additional threads that try to enter upgradeable mode are blocked.</span></span>  
  
-   <span data-ttu-id="78b1d-172">Scrittura: In questo stato, un thread ha acceduto al blocco per l'accesso in scrittura alla risorsa protetta.</span><span class="sxs-lookup"><span data-stu-id="78b1d-172">Write: In this state, one thread has entered the lock for write access to the protected resource.</span></span> <span data-ttu-id="78b1d-173">Thread in questione sia esclusivo proprietaria del blocco.</span><span class="sxs-lookup"><span data-stu-id="78b1d-173">That thread has exclusive possession of the lock.</span></span> <span data-ttu-id="78b1d-174">Un altro thread che prova ad attivare il blocco per qualsiasi motivo è bloccato.</span><span class="sxs-lookup"><span data-stu-id="78b1d-174">Any other thread that tries to enter the lock for any reason is blocked.</span></span>  
  
 <span data-ttu-id="78b1d-175">La tabella seguente descrive le transizioni tra stati di blocco, per i blocchi che non consentono la ricorsione, quando un thread `t` accetta l'azione descritta nella colonna più a sinistra.</span><span class="sxs-lookup"><span data-stu-id="78b1d-175">The following table describes the transitions between lock states, for locks that do not allow recursion, when a thread `t` takes the action described in the leftmost column.</span></span> <span data-ttu-id="78b1d-176">Al momento accetta l'azione, `t` non possiede alcuna modalità.</span><span class="sxs-lookup"><span data-stu-id="78b1d-176">At the time it takes the action, `t` has no mode.</span></span> <span data-ttu-id="78b1d-177">(Il caso speciale in cui `t` è in modalità aggiornabile è descritto nel piè di pagina di tabella.) La prima riga descrive lo stato inizio del blocco.</span><span class="sxs-lookup"><span data-stu-id="78b1d-177">(The special case where `t` is in upgradeable mode is described in the table footnotes.) The top row describes the starting state of the lock.</span></span> <span data-ttu-id="78b1d-178">Le celle viene descritto cosa succede al thread e visualizzare le modifiche apportate allo stato di blocco tra parentesi.</span><span class="sxs-lookup"><span data-stu-id="78b1d-178">The cells describe what happens to the thread, and show changes to the lock state in parentheses.</span></span>  
  
||<span data-ttu-id="78b1d-179">Nessun accesso (N)</span><span class="sxs-lookup"><span data-stu-id="78b1d-179">Not entered (N)</span></span>|<span data-ttu-id="78b1d-180">Read (R)</span><span class="sxs-lookup"><span data-stu-id="78b1d-180">Read (R)</span></span>|<span data-ttu-id="78b1d-181">Aggiornamento (U)</span><span class="sxs-lookup"><span data-stu-id="78b1d-181">Upgrade (U)</span></span>|<span data-ttu-id="78b1d-182">Scrittura (S)</span><span class="sxs-lookup"><span data-stu-id="78b1d-182">Write (W)</span></span>|  
|-|-----------------------|----------------|-------------------|-----------------|  
|<span data-ttu-id="78b1d-183">`t` passa alla modalità di lettura</span><span class="sxs-lookup"><span data-stu-id="78b1d-183">`t` enters read mode</span></span>|<span data-ttu-id="78b1d-184">`t` assume (R).</span><span class="sxs-lookup"><span data-stu-id="78b1d-184">`t` enters (R).</span></span>|<span data-ttu-id="78b1d-185">`t` blocchi se sono thread in attesa per la modalità scrittura; in caso contrario, `t` immette.</span><span class="sxs-lookup"><span data-stu-id="78b1d-185">`t` blocks if threads are waiting for write mode; otherwise, `t` enters.</span></span>|<span data-ttu-id="78b1d-186">`t` blocchi se sono thread in attesa per la modalità scrittura; in caso contrario, `t` immette.<sup> 1</sup></span><span class="sxs-lookup"><span data-stu-id="78b1d-186">`t` blocks if threads are waiting for write mode; otherwise, `t` enters.<sup>1</sup></span></span>|<span data-ttu-id="78b1d-187">`t` blocchi.</span><span class="sxs-lookup"><span data-stu-id="78b1d-187">`t` blocks.</span></span>|  
|<span data-ttu-id="78b1d-188">`t` passa alla modalità aggiornabile</span><span class="sxs-lookup"><span data-stu-id="78b1d-188">`t` enters upgradeable mode</span></span>|<span data-ttu-id="78b1d-189">`t` assume (U).</span><span class="sxs-lookup"><span data-stu-id="78b1d-189">`t` enters (U).</span></span>|<span data-ttu-id="78b1d-190">`t` blocchi se sono thread in attesa per la modalità di scrittura o la modalità di aggiornamento; in caso contrario, `t` immette (U).</span><span class="sxs-lookup"><span data-stu-id="78b1d-190">`t` blocks if threads are waiting for write mode or upgrade mode; otherwise, `t` enters (U).</span></span>|<span data-ttu-id="78b1d-191">`t` blocchi.</span><span class="sxs-lookup"><span data-stu-id="78b1d-191">`t` blocks.</span></span>|<span data-ttu-id="78b1d-192">`t` blocchi.</span><span class="sxs-lookup"><span data-stu-id="78b1d-192">`t` blocks.</span></span>|  
|<span data-ttu-id="78b1d-193">`t` passa alla modalità di scrittura</span><span class="sxs-lookup"><span data-stu-id="78b1d-193">`t` enters write mode</span></span>|<span data-ttu-id="78b1d-194">`t` immette (W).</span><span class="sxs-lookup"><span data-stu-id="78b1d-194">`t` enters (W).</span></span>|<span data-ttu-id="78b1d-195">`t` blocchi.</span><span class="sxs-lookup"><span data-stu-id="78b1d-195">`t` blocks.</span></span>|<span data-ttu-id="78b1d-196">`t` blocchi. <sup>2</sup></span><span class="sxs-lookup"><span data-stu-id="78b1d-196">`t` blocks.<sup>2</sup></span></span>|<span data-ttu-id="78b1d-197">`t` blocchi.</span><span class="sxs-lookup"><span data-stu-id="78b1d-197">`t` blocks.</span></span>|  
  
 <span data-ttu-id="78b1d-198"><sup>1</sup> se `t` avvia orizzontale in modalità aggiornabile, entra in modalità lettura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-198"><sup>1</sup> If `t` starts out in upgradeable mode, it enters read mode.</span></span> <span data-ttu-id="78b1d-199">Blocca mai questa azione.</span><span class="sxs-lookup"><span data-stu-id="78b1d-199">This action never blocks.</span></span> <span data-ttu-id="78b1d-200">Lo stato del blocco rimane invariato.</span><span class="sxs-lookup"><span data-stu-id="78b1d-200">The lock state does not change.</span></span> <span data-ttu-id="78b1d-201">(Il thread possa quindi completare un downgrade alla modalità di lettura da disattivare la modalità aggiornabile.)</span><span class="sxs-lookup"><span data-stu-id="78b1d-201">(The thread can then complete a downgrade to read mode by exiting upgradeable mode.)</span></span>  
  
 <span data-ttu-id="78b1d-202"><sup>2</sup> se `t` viene avviato in modalità aggiornabile, si blocca se sono presenti thread in modalità lettura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-202"><sup>2</sup> If `t` starts out in upgradeable mode, it blocks if there are threads in read mode.</span></span> <span data-ttu-id="78b1d-203">In caso contrario, che venga aggiornato alla modalità di scrittura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-203">Otherwise it upgrades to write mode.</span></span> <span data-ttu-id="78b1d-204">I cambiamenti di stato di blocco per scrittura (S).</span><span class="sxs-lookup"><span data-stu-id="78b1d-204">The lock state changes to Write (W).</span></span> <span data-ttu-id="78b1d-205">Se `t` blocca perché sono presenti thread in modalità di lettura, passa alla modalità di scrittura, non appena l'ultimo thread esce dalla modalità di lettura, anche se sono presenti thread in attesa di immettere la modalità scrittura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-205">If `t` blocks because there are threads in read mode, it enters write mode as soon as the last thread exits read mode, even if there are threads waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="78b1d-206">Quando una modifica dello stato è dovuto al fatto che un thread termina il blocco, il thread successivo che riattivati viene selezionato come indicato di seguito:</span><span class="sxs-lookup"><span data-stu-id="78b1d-206">When a state change occurs because a thread exits the lock, the next thread to be awakened is selected as follows:</span></span>  
  
-   <span data-ttu-id="78b1d-207">In primo luogo, un thread in attesa per la modalità scrittura ed è già in modalità aggiornabile (possono essere presenti al massimo un thread di questo tipo).</span><span class="sxs-lookup"><span data-stu-id="78b1d-207">First, a thread that is waiting for write mode and is already in upgradeable mode (there can be at most one such thread).</span></span>  
  
-   <span data-ttu-id="78b1d-208">In mancanza di questo, un thread in attesa per la modalità scrittura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-208">Failing that, a thread that is waiting for write mode.</span></span>  
  
-   <span data-ttu-id="78b1d-209">In mancanza di questo, un thread in attesa per la modalità aggiornabile.</span><span class="sxs-lookup"><span data-stu-id="78b1d-209">Failing that, a thread that is waiting for upgradeable mode.</span></span>  
  
-   <span data-ttu-id="78b1d-210">Esito negativo, tutti i thread in attesa per la modalità lettura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-210">Failing that, all threads that are waiting for read mode.</span></span>  
  
 <span data-ttu-id="78b1d-211">Lo stato successivo del blocco è sempre di scrittura (W) nei primi due casi e aggiornamento (U) nel terzo caso, indipendentemente dallo stato del blocco quando il thread in fase di chiusura ha attivato la modifica dello stato.</span><span class="sxs-lookup"><span data-stu-id="78b1d-211">The subsequent state of the lock is always Write (W) in the first two cases and Upgrade (U) in the third case, regardless of the state of the lock when the exiting thread triggered the state change.</span></span> <span data-ttu-id="78b1d-212">Nell'ultimo caso, lo stato del blocco è eseguire l'aggiornamento (U) se non vi è un thread in modalità aggiornabile dopo la modifica dello stato e Read (R) in caso contrario, indipendentemente dallo stato precedente.</span><span class="sxs-lookup"><span data-stu-id="78b1d-212">In the last case, the state of the lock is Upgrade (U) if there is a thread in upgradeable mode after the state change, and Read (R) otherwise, regardless of the prior state.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b1d-213">L'esempio seguente illustra una semplice cache sincronizzata che contiene le stringhe con chiavi di interi.</span><span class="sxs-lookup"><span data-stu-id="78b1d-213">The following example shows a simple synchronized cache that holds strings with integer keys.</span></span> <span data-ttu-id="78b1d-214">Un'istanza di <xref:System.Threading.ReaderWriterLockSlim> utilizzato per sincronizzare l'accesso al <xref:System.Collections.Generic.Dictionary%602> che funge da cache interna.</span><span class="sxs-lookup"><span data-stu-id="78b1d-214">An instance of <xref:System.Threading.ReaderWriterLockSlim> is used to synchronize access to the <xref:System.Collections.Generic.Dictionary%602> that serves as the inner cache.</span></span>  
  
 <span data-ttu-id="78b1d-215">L'esempio include metodi semplici per aggiungere alla cache, eliminare dalla cache e leggere dalla cache.</span><span class="sxs-lookup"><span data-stu-id="78b1d-215">The example includes simple methods to add to the cache, delete from the cache, and read from the cache.</span></span> <span data-ttu-id="78b1d-216">Per illustrare i timeout, l'esempio include un metodo che viene aggiunto alla cache solo se è possibile eseguire questa operazione all'interno di un timeout specificato.</span><span class="sxs-lookup"><span data-stu-id="78b1d-216">To demonstrate time-outs, the example includes a method that adds to the cache only if it can do so within a specified time-out.</span></span>  
  
 <span data-ttu-id="78b1d-217">Per illustrare la modalità aggiornabile, l'esempio include un metodo che recupera il valore associato alla chiave e lo confronta con un nuovo valore.</span><span class="sxs-lookup"><span data-stu-id="78b1d-217">To demonstrate upgradeable mode, the example includes a method that retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="78b1d-218">Se il valore viene modificato, il metodo restituisce uno stato che indica nessuna modifica.</span><span class="sxs-lookup"><span data-stu-id="78b1d-218">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="78b1d-219">Viene trovato alcun valore per la chiave, viene inserita la coppia chiave/valore.</span><span class="sxs-lookup"><span data-stu-id="78b1d-219">It no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="78b1d-220">Se il valore è stato modificato, viene aggiornata.</span><span class="sxs-lookup"><span data-stu-id="78b1d-220">If the value has changed, it is updated.</span></span> <span data-ttu-id="78b1d-221">La modalità aggiornabile consente al thread di eseguire l'aggiornamento da accesso in lettura per l'accesso in scrittura in base alle necessità, senza il rischio di deadlock.</span><span class="sxs-lookup"><span data-stu-id="78b1d-221">Upgradeable mode allows the thread to upgrade from read access to write access as needed, without the risk of deadlocks.</span></span>  
  
 <span data-ttu-id="78b1d-222">L'esempio include un'enumerazione annidata che consente di specificare i valori restituiti per il metodo che illustra la modalità aggiornabile.</span><span class="sxs-lookup"><span data-stu-id="78b1d-222">The example includes a nested enumeration that specifies the return values for the method that demonstrates upgradeable mode.</span></span>  
  
 <span data-ttu-id="78b1d-223">L'esempio Usa il costruttore predefinito per creare il blocco, in modo che non è consentita la ricorsione.</span><span class="sxs-lookup"><span data-stu-id="78b1d-223">The example uses the default constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="78b1d-224">Programmazione di <xref:System.Threading.ReaderWriterLockSlim> è più semplice e meno soggetta a errori quando il blocco non supporta la ricorsione.</span><span class="sxs-lookup"><span data-stu-id="78b1d-224">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#12)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#12)]  
  
 <span data-ttu-id="78b1d-225">Il codice seguente usa quindi il `SynchronizedCache` oggetto usato per archiviare un dizionario di nomi vegetali.</span><span class="sxs-lookup"><span data-stu-id="78b1d-225">The following code then uses the `SynchronizedCache` object to store a dictionary of vegetable names.</span></span> <span data-ttu-id="78b1d-226">Crea tre attività.</span><span class="sxs-lookup"><span data-stu-id="78b1d-226">It creates three tasks.</span></span> <span data-ttu-id="78b1d-227">Il primo vengono scritti i nomi di verdure archiviate in una matrice a un `SynchronizedCache` istanza.</span><span class="sxs-lookup"><span data-stu-id="78b1d-227">The first writes the names of vegetables stored in an array to a `SynchronizedCache` instance.</span></span> <span data-ttu-id="78b1d-228">La seconda e terza attività visualizzare i nomi di verdura, il primo in modo crescente (da bassa indice in indice elevata), la seconda in ordine decrescente.</span><span class="sxs-lookup"><span data-stu-id="78b1d-228">The second and third task display the names of the vegetables, the first in ascending order (from low index to high index), the second in descending order.</span></span> <span data-ttu-id="78b1d-229">L'attività finale cerca la stringa "cucumber" e, quando la trova, chiama il <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> metodo per sostituire la stringa "verde bean".</span><span class="sxs-lookup"><span data-stu-id="78b1d-229">The final task searches for the string "cucumber" and, when it finds it, calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method  to substitute the string "green bean".</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#13)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#13)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="78b1d-230">Questo tipo è thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="78b1d-230">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="78b1d-231">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-231">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReaderWriterLockSlim ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReaderWriterLockSlim();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="78b1d-232">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class with default property values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-232">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class with default property values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-233">Oggetto <xref:System.Threading.ReaderWriterLockSlim> che viene inizializzato con questo costruttore non consente la ricorsione.</span><span class="sxs-lookup"><span data-stu-id="78b1d-233">A <xref:System.Threading.ReaderWriterLockSlim> that is initialized with this constructor does not allow recursion.</span></span> <span data-ttu-id="78b1d-234">Quindi la proprietà <xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A> restituisce <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="78b1d-234">That is, the <xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A> property returns <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="78b1d-235">Per altre informazioni sui criteri di ricorsione e i relativi effetti, vedere la <xref:System.Threading.LockRecursionPolicy> enumerazione e <xref:System.Threading.ReaderWriterLockSlim> classe.</span><span class="sxs-lookup"><span data-stu-id="78b1d-235">For more information about recursion policy and its effects, see the <xref:System.Threading.LockRecursionPolicy> enumeration and the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b1d-236">L'esempio seguente illustra una semplice cache sincronizzata che contiene le stringhe con chiavi di interi.</span><span class="sxs-lookup"><span data-stu-id="78b1d-236">The following example shows a simple synchronized cache that holds strings with integer keys.</span></span> <span data-ttu-id="78b1d-237">Un'istanza di <xref:System.Threading.ReaderWriterLockSlim> utilizzato per sincronizzare l'accesso al <xref:System.Collections.Generic.Dictionary%602> che funge da cache interna.</span><span class="sxs-lookup"><span data-stu-id="78b1d-237">An instance of <xref:System.Threading.ReaderWriterLockSlim> is used to synchronize access to the <xref:System.Collections.Generic.Dictionary%602> that serves as the inner cache.</span></span> <span data-ttu-id="78b1d-238">Il costruttore senza parametri consente di creare il blocco.</span><span class="sxs-lookup"><span data-stu-id="78b1d-238">The parameterless constructor is used to create the lock.</span></span>  
  
 <span data-ttu-id="78b1d-239">L'esempio include metodi semplici per aggiungere alla cache, eliminare dalla cache e leggere dalla cache.</span><span class="sxs-lookup"><span data-stu-id="78b1d-239">The example includes simple methods to add to the cache, delete from the cache, and read from the cache.</span></span> <span data-ttu-id="78b1d-240">Per illustrare i timeout, l'esempio include un metodo che viene aggiunto alla cache solo se è possibile eseguire questa operazione all'interno di un timeout specificato.</span><span class="sxs-lookup"><span data-stu-id="78b1d-240">To demonstrate time-outs, the example includes a method that adds to the cache only if it can do so within a specified time-out.</span></span>  
  
 <span data-ttu-id="78b1d-241">Per illustrare la modalità aggiornabile, l'esempio include un metodo che recupera il valore associato alla chiave e lo confronta con un nuovo valore.</span><span class="sxs-lookup"><span data-stu-id="78b1d-241">To demonstrate upgradeable mode, the example includes a method that retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="78b1d-242">Se il valore viene modificato, il metodo restituisce uno stato che indica nessuna modifica.</span><span class="sxs-lookup"><span data-stu-id="78b1d-242">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="78b1d-243">Viene trovato alcun valore per la chiave, viene inserita la coppia chiave/valore.</span><span class="sxs-lookup"><span data-stu-id="78b1d-243">It no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="78b1d-244">Se il valore è stato modificato, viene aggiornata.</span><span class="sxs-lookup"><span data-stu-id="78b1d-244">If the value has changed, it is updated.</span></span> <span data-ttu-id="78b1d-245">La modalità aggiornabile consente al thread di eseguire l'aggiornamento da accesso in lettura per l'accesso in scrittura in base alle necessità, senza il rischio di deadlock.</span><span class="sxs-lookup"><span data-stu-id="78b1d-245">Upgradeable mode allows the thread to upgrade from read access to write access as needed, without the risk of deadlocks.</span></span>  
  
 <span data-ttu-id="78b1d-246">L'esempio include un'enumerazione annidata che consente di specificare i valori restituiti per il metodo che illustra la modalità aggiornabile.</span><span class="sxs-lookup"><span data-stu-id="78b1d-246">The example includes a nested enumeration that specifies the return values for the method that demonstrates upgradeable mode.</span></span>  
  
 <span data-ttu-id="78b1d-247">L'esempio Usa il costruttore predefinito per creare il blocco, in modo che non è consentita la ricorsione.</span><span class="sxs-lookup"><span data-stu-id="78b1d-247">The example uses the default constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="78b1d-248">Programmazione di <xref:System.Threading.ReaderWriterLockSlim> è più semplice e meno soggetta a errori quando il blocco non supporta la ricorsione.</span><span class="sxs-lookup"><span data-stu-id="78b1d-248">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#12)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#12)]  
  
 <span data-ttu-id="78b1d-249">Il codice seguente usa quindi il `SynchronizedCache` oggetto usato per archiviare un dizionario di nomi vegetali.</span><span class="sxs-lookup"><span data-stu-id="78b1d-249">The following code then uses the `SynchronizedCache` object to store a dictionary of vegetable names.</span></span> <span data-ttu-id="78b1d-250">Crea tre attività.</span><span class="sxs-lookup"><span data-stu-id="78b1d-250">It creates three tasks.</span></span> <span data-ttu-id="78b1d-251">Il primo vengono scritti i nomi di verdure archiviate in una matrice a un `SynchronizedCache` istanza.</span><span class="sxs-lookup"><span data-stu-id="78b1d-251">The first writes the names of vegetables stored in an array to a `SynchronizedCache` instance.</span></span> <span data-ttu-id="78b1d-252">La seconda e terza attività visualizzare i nomi di verdura, il primo in modo crescente (da bassa indice in indice elevata), la seconda in ordine decrescente.</span><span class="sxs-lookup"><span data-stu-id="78b1d-252">The second and third task display the names of the vegetables, the first in ascending order (from low index to high index), the second in descending order.</span></span> <span data-ttu-id="78b1d-253">L'attività finale cerca la stringa "cucumber" e, quando la trova, chiama il <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> metodo per sostituire la stringa "verde bean".</span><span class="sxs-lookup"><span data-stu-id="78b1d-253">The final task searches for the string "cucumber" and, when it finds it, calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method  to substitute the string "green bean".</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#13)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LockRecursionPolicy" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReaderWriterLockSlim (System.Threading.LockRecursionPolicy recursionPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LockRecursionPolicy recursionPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.#ctor(System.Threading.LockRecursionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (recursionPolicy As LockRecursionPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReaderWriterLockSlim(System::Threading::LockRecursionPolicy recursionPolicy);" />
      <MemberSignature Language="F#" Value="new System.Threading.ReaderWriterLockSlim : System.Threading.LockRecursionPolicy -&gt; System.Threading.ReaderWriterLockSlim" Usage="new System.Threading.ReaderWriterLockSlim recursionPolicy" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recursionPolicy" Type="System.Threading.LockRecursionPolicy" />
      </Parameters>
      <Docs>
        <param name="recursionPolicy">
          <span data-ttu-id="78b1d-254">One of the enumeration values that specifies the lock recursion policy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-254">One of the enumeration values that specifies the lock recursion policy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78b1d-255">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class, specifying the lock recursion policy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-255">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class, specifying the lock recursion policy.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-256">Criteri di ricorsione determinano le restrizioni sul thread che accedono al blocco più volte.</span><span class="sxs-lookup"><span data-stu-id="78b1d-256">Recursion policy determines the restrictions on threads that enter the lock more than once.</span></span> <span data-ttu-id="78b1d-257">Ad esempio, se un blocco è stato creato con <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> e un thread ha acceduto al blocco in modalità lettura <xref:System.Threading.LockRecursionException> viene generata se il thread tenta di accedere nuovamente al blocco in modalità lettura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-257">For example, if a lock was created with <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> and a thread has entered the lock in read mode, <xref:System.Threading.LockRecursionException> is thrown if the thread tries to reenter the lock in read mode.</span></span> <span data-ttu-id="78b1d-258">Analogamente, se un thread ha acceduto al blocco in modalità scrittura, <xref:System.Threading.LockRecursionException> viene generata se il thread tenta di accedere nuovamente al blocco in qualsiasi modalità.</span><span class="sxs-lookup"><span data-stu-id="78b1d-258">Similarly, if a thread has entered the lock in write mode, <xref:System.Threading.LockRecursionException> is thrown if the thread tries to reenter the lock in any mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78b1d-259">Un thread in modalità aggiornabile è possibile eseguire l'aggiornamento alla modalità di scrittura o un downgrade dalla modalità indipendentemente dall'impostazione di criteri di ricorsione di blocco di lettura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-259">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode regardless of the lock recursion policy setting.</span></span>  
  
 <span data-ttu-id="78b1d-260">Indipendentemente dai criteri di ricorsione, un thread che ha inizialmente acceduto leggere in modalità non è consentita l'aggiornamento alla modalità aggiornabile o modalità scrittura, perché ciò comporterebbe una forte probabilità di deadlock.</span><span class="sxs-lookup"><span data-stu-id="78b1d-260">Regardless of recursion policy, a thread that initially entered read mode is not allowed to upgrade to upgradeable mode or write mode, because that pattern creates a strong probability of deadlocks.</span></span>  
  
 <span data-ttu-id="78b1d-261">Per altre informazioni sui criteri di ricorsione e i relativi effetti, vedere la <xref:System.Threading.LockRecursionPolicy> enumerazione e <xref:System.Threading.ReaderWriterLockSlim> classe.</span><span class="sxs-lookup"><span data-stu-id="78b1d-261">For more information about recursion policy and its effects, see the <xref:System.Threading.LockRecursionPolicy> enumeration and the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b1d-262">L'esempio seguente illustra due scenari di eccezione, che dipende la <xref:System.Threading.LockRecursionPolicy> impostazione e l'altro no.</span><span class="sxs-lookup"><span data-stu-id="78b1d-262">The following example shows two exception scenarios, one that depends on the <xref:System.Threading.LockRecursionPolicy> setting and one that does not.</span></span>  
  
 <span data-ttu-id="78b1d-263">Nel primo scenario, il thread entra in modalità di lettura e quindi tenta di accedere in modo ricorsivo modalità lettura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-263">In the first scenario, the thread enters read mode and then tries to enter read mode recursively.</span></span> <span data-ttu-id="78b1d-264">Se il <xref:System.Threading.ReaderWriterLockSlim> viene creato usando il costruttore predefinito, che imposta i criteri di ricorsione <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>, viene generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="78b1d-264">If the <xref:System.Threading.ReaderWriterLockSlim> is created by using the default constructor, which sets recursion policy to <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>, an exception is thrown.</span></span> <span data-ttu-id="78b1d-265">Se <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> viene usato per creare il <xref:System.Threading.ReaderWriterLockSlim>, viene generata alcuna eccezione.</span><span class="sxs-lookup"><span data-stu-id="78b1d-265">If <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> is used to create the <xref:System.Threading.ReaderWriterLockSlim>, no exception is thrown.</span></span>  
  
 <span data-ttu-id="78b1d-266">Nel secondo scenario, il thread entra in modalità di lettura e quindi tenta di accedere alla modalità di scrittura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-266">In the second scenario, the thread enters read mode and then tries to enter write mode.</span></span> <span data-ttu-id="78b1d-267"><xref:System.Threading.LockRecursionException> viene generata un'eccezione indipendentemente dai criteri di ricorsione del blocco.</span><span class="sxs-lookup"><span data-stu-id="78b1d-267"><xref:System.Threading.LockRecursionException> is thrown regardless of the lock recursion policy.</span></span>  
  
[!code-csharp[System.Threading.LockRecursionPolicy#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#11)] 
[!code-vb[System.Threading.LockRecursionPolicy#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#11)]   
[!code-csharp[System.Threading.LockRecursionPolicy#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#12)] 
[!code-vb[System.Threading.LockRecursionPolicy#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#12)]  
  
 <span data-ttu-id="78b1d-268">Il codice seguente usa quindi il `SynchronizedCache` oggetto usato per archiviare un dizionario di nomi vegetali.</span><span class="sxs-lookup"><span data-stu-id="78b1d-268">The following code then uses the `SynchronizedCache` object to store a dictionary of vegetable names.</span></span> <span data-ttu-id="78b1d-269">Crea tre attività.</span><span class="sxs-lookup"><span data-stu-id="78b1d-269">It creates three tasks.</span></span> <span data-ttu-id="78b1d-270">Il primo vengono scritti i nomi di verdure archiviate in una matrice a un `SynchronizedCache` istanza.</span><span class="sxs-lookup"><span data-stu-id="78b1d-270">The first writes the names of vegetables stored in an array to a `SynchronizedCache` instance.</span></span> <span data-ttu-id="78b1d-271">La seconda e terza attività visualizzare i nomi di verdura, il primo in modo crescente (da bassa indice in indice elevata), la seconda in ordine decrescente.</span><span class="sxs-lookup"><span data-stu-id="78b1d-271">The second and third task display the names of the vegetables, the first in ascending order (from low index to high index), the second in descending order.</span></span> <span data-ttu-id="78b1d-272">L'attività finale cerca la stringa "cucumber" e, quando la trova, chiama il <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> metodo per sostituire la stringa "verde bean".</span><span class="sxs-lookup"><span data-stu-id="78b1d-272">The final task searches for the string "cucumber" and, when it finds it, calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method  to substitute the string "green bean".</span></span>  
  
[!code-csharp[System.Threading.LockRecursionPolicy#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#11)] 
[!code-vb[System.Threading.LockRecursionPolicy#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#11)]   
[!code-csharp[System.Threading.LockRecursionPolicy#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#13)] 
[!code-vb[System.Threading.LockRecursionPolicy#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LockRecursionPolicy" />
        <altmember cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="CurrentReadCount">
      <MemberSignature Language="C#" Value="public int CurrentReadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentReadCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.CurrentReadCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentReadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentReadCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentReadCount : int" Usage="System.Threading.ReaderWriterLockSlim.CurrentReadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="78b1d-273">Gets the total number of unique threads that have entered the lock in read mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-273">Gets the total number of unique threads that have entered the lock in read mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="78b1d-274">Numero di thread univoci per i quali è stato attivato il blocco in modalità lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-274">The number of unique threads that have entered the lock in read mode.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-275">Un thread viene conteggiata una sola volta, anche se il blocco consente la ricorsione e il thread ha acceduto alla modalità lettura più volte.</span><span class="sxs-lookup"><span data-stu-id="78b1d-275">A thread is counted only once, even if the lock allows recursion and the thread has entered read mode multiple times.</span></span>  
  
 <span data-ttu-id="78b1d-276">Utilizzare questa proprietà solo per il debug, profilatura e a scopo di registrazione e non per controllare il comportamento di un algoritmo.</span><span class="sxs-lookup"><span data-stu-id="78b1d-276">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="78b1d-277">I risultati possono modificare non appena che sono state calcolate.</span><span class="sxs-lookup"><span data-stu-id="78b1d-277">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="78b1d-278">Pertanto, non sicuro prendere decisioni basate su questa proprietà.</span><span class="sxs-lookup"><span data-stu-id="78b1d-278">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b1d-279">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Threading.ReaderWriterLockSlim.CurrentReadCount%2A> proprietà per generare una voce nel registro eventi, se il numero di thread in modalità lettura supera una soglia.</span><span class="sxs-lookup"><span data-stu-id="78b1d-279">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.CurrentReadCount%2A> property to generate an event log entry if the number of threads in read mode exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#2)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#11)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="readerWriterLockSlim.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="78b1d-280">Releases all resources used by the current instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-280">Releases all resources used by the current instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-281">Chiamare il metodo <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> dopo aver terminato di utilizzare l'oggetto <xref:System.Threading.ReaderWriterLockSlim>.</span><span class="sxs-lookup"><span data-stu-id="78b1d-281">Call <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> when you are finished using the <xref:System.Threading.ReaderWriterLockSlim>.</span></span> <span data-ttu-id="78b1d-282">Il metodo <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> lascia l'oggetto <xref:System.Threading.ReaderWriterLockSlim> in una condizione di inutilizzabilità.</span><span class="sxs-lookup"><span data-stu-id="78b1d-282">The <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> method leaves the <xref:System.Threading.ReaderWriterLockSlim> in an unusable state.</span></span> <span data-ttu-id="78b1d-283">Dopo la chiamata <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A>, è necessario rilasciare tutti i riferimenti per il <xref:System.Threading.ReaderWriterLockSlim> in modo che il garbage collector di recuperare la memoria che il <xref:System.Threading.ReaderWriterLockSlim> occupata.</span><span class="sxs-lookup"><span data-stu-id="78b1d-283">After calling <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A>, you must release all references to the <xref:System.Threading.ReaderWriterLockSlim> so the garbage collector can reclaim the memory that the <xref:System.Threading.ReaderWriterLockSlim> was occupying.</span></span> <span data-ttu-id="78b1d-284">Per altre informazioni, vedere [pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md) e [implementa un metodo Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="78b1d-284">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78b1d-285">Chiamare sempre <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> prima di rilasciare l'ultimo riferimento al <xref:System.Threading.ReaderWriterLockSlim> oggetto.</span><span class="sxs-lookup"><span data-stu-id="78b1d-285">Always call <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> before you release your last reference to the <xref:System.Threading.ReaderWriterLockSlim> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="78b1d-286">
            <see cref="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" /> is greater than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-286">
              <see cref="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" /> is greater than zero.</span>
          </span>
          <span data-ttu-id="78b1d-287">-or-  <see cref="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" /> is greater than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-287">-or-  <see cref="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" /> is greater than zero.</span>
          </span>
          <span data-ttu-id="78b1d-288">-or-  <see cref="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" /> is greater than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-288">-or-  <see cref="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" /> is greater than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EnterReadLock">
      <MemberSignature Language="C#" Value="public void EnterReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnterReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.EnterReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnterReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnterReadLock();" />
      <MemberSignature Language="F#" Value="member this.EnterReadLock : unit -&gt; unit" Usage="readerWriterLockSlim.EnterReadLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="78b1d-289">Tries to enter the lock in read mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-289">Tries to enter the lock in read mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-290">Questo metodo si blocca fino a quando il thread chiamante entra nel blocco e pertanto potrebbe non essere mai restituito.</span><span class="sxs-lookup"><span data-stu-id="78b1d-290">This method blocks until the calling thread enters the lock, and therefore might never return.</span></span> <span data-ttu-id="78b1d-291">Usare il <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> metodo blocca per un intervallo specificato e quindi restituire se il thread chiamante non ha acceduto alla modalità di lettura durante l'intervallo.</span><span class="sxs-lookup"><span data-stu-id="78b1d-291">Use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method to block for a specified interval, and then return if the calling thread has not entered read mode during that interval.</span></span>  
  
 <span data-ttu-id="78b1d-292">Modalità di lettura possono accedere più thread contemporaneamente.</span><span class="sxs-lookup"><span data-stu-id="78b1d-292">Multiple threads can enter read mode at the same time.</span></span>  
  
 <span data-ttu-id="78b1d-293">Se uno o più thread sono in attesa di attivazione della modalità scrittura, un thread che chiama il <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> metodo si blocca fino a quando i thread hanno un timeout o passato in modalità scrittura e quindi sia terminato da quest'ultimo.</span><span class="sxs-lookup"><span data-stu-id="78b1d-293">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78b1d-294">Se un blocco consente la ricorsione, un thread ha acceduto al blocco in modalità di lettura può accedere in modo ricorsivo modalità lettura, anche se altri thread in attesa di passare alla modalità di scrittura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-294">If a lock allows recursion, a thread that has entered the lock in read mode can enter read mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="78b1d-295">Al massimo un thread può essere in modalità aggiornabile, mentre altri thread è in modalità lettura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-295">At most one thread can be in upgradeable mode while other threads are in read mode.</span></span> <span data-ttu-id="78b1d-296">Se altri thread in attesa di accedere alla modalità aggiornabile e non sono presenti thread in attesa di attivazione della modalità scrittura, i thread che chiamano il <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> metodo passare immediatamente alla modalità di lettura e non vengono bloccati.</span><span class="sxs-lookup"><span data-stu-id="78b1d-296">If additional threads are waiting to enter upgradeable mode, and there are no threads waiting to enter write mode, threads that call the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method enter read mode immediately and do not block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b1d-297">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> metodo ad attivare il blocco in modalità lettura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-297">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method to enter the lock in read mode.</span></span> <span data-ttu-id="78b1d-298">Il metodo illustrato nell'esempio recupera il valore associato alla chiave.</span><span class="sxs-lookup"><span data-stu-id="78b1d-298">The method shown in the example retrieves the value associated with a key.</span></span> <span data-ttu-id="78b1d-299">Se la chiave non viene trovata, l'eccezione generata dall'interno <xref:System.Collections.Generic.Dictionary%602> è consentito per il metodo terminate.</span><span class="sxs-lookup"><span data-stu-id="78b1d-299">If the key is not found, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="78b1d-300">Oggetto `finally` blocco viene utilizzato per eseguire il <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> metodo, assicurando che il chiamante esca dalla modalità di lettura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-300">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> method, ensuring that the caller exits read mode.</span></span>  
  
 <span data-ttu-id="78b1d-301">Questo codice è parte di un esempio più esaustivo disponibile per il <xref:System.Threading.ReaderWriterLockSlim> classe.</span><span class="sxs-lookup"><span data-stu-id="78b1d-301">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="78b1d-302">The current thread cannot acquire the write lock when it holds the read lock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-302">The current thread cannot acquire the write lock when it holds the read lock.</span>
          </span>
          <span data-ttu-id="78b1d-303">-or-  The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, and the current thread has attempted to acquire the read lock when it already holds the read lock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-303">-or-  The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, and the current thread has attempted to acquire the read lock when it already holds the read lock.</span>
          </span>
          <span data-ttu-id="78b1d-304">-or-  The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, and the current thread has attempted to acquire the read lock when it already holds the write lock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-304">-or-  The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, and the current thread has attempted to acquire the read lock when it already holds the write lock.</span>
          </span>
          <span data-ttu-id="78b1d-305">-or-  The recursion number would exceed the capacity of the counter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-305">-or-  The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="78b1d-306">This limit is so large that applications should never encounter this exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-306">This limit is so large that applications should never encounter this exception.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="78b1d-307">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-307">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EnterUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public void EnterUpgradeableReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnterUpgradeableReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnterUpgradeableReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnterUpgradeableReadLock();" />
      <MemberSignature Language="F#" Value="member this.EnterUpgradeableReadLock : unit -&gt; unit" Usage="readerWriterLockSlim.EnterUpgradeableReadLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="78b1d-308">Tries to enter the lock in upgradeable mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-308">Tries to enter the lock in upgradeable mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-309">Questo metodo si blocca fino a quando il thread chiamante entra nel blocco e pertanto potrebbe non essere mai restituito.</span><span class="sxs-lookup"><span data-stu-id="78b1d-309">This method blocks until the calling thread enters the lock, and therefore might never return.</span></span> <span data-ttu-id="78b1d-310">Usare il <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> metodo blocca per un intervallo specificato e quindi restituire se il thread chiamante non ha acceduto alla modalità aggiornabile durante tale intervallo.</span><span class="sxs-lookup"><span data-stu-id="78b1d-310">Use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> method to block for a specified interval, and then return if the calling thread has not entered upgradeable mode during that interval.</span></span>  
  
 <span data-ttu-id="78b1d-311">Utilizzare la modalità aggiornabile quando un thread accede in genere la risorsa protetta dal <xref:System.Threading.ReaderWriterLockSlim> in modalità lettura, ma potrebbe essere necessario immettere la modalità scrittura, se vengono soddisfatte determinate condizioni.</span><span class="sxs-lookup"><span data-stu-id="78b1d-311">Use upgradeable mode when a thread usually accesses the resource that is protected by the <xref:System.Threading.ReaderWriterLockSlim> in read mode, but may need to enter write mode if certain conditions are met.</span></span> <span data-ttu-id="78b1d-312">Un thread in modalità aggiornabile può downgrade alla modalità di lettura o eseguire l'aggiornamento alla modalità di scrittura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-312">A thread in upgradeable mode can downgrade to read mode or upgrade to write mode.</span></span>  
  
 <span data-ttu-id="78b1d-313">Solo un thread può accedere alla modalità aggiornabile in qualsiasi momento.</span><span class="sxs-lookup"><span data-stu-id="78b1d-313">Only one thread can enter upgradeable mode at any given time.</span></span> <span data-ttu-id="78b1d-314">Se un thread è in modalità aggiornabile e non sono presenti thread in attesa di attivazione della modalità scrittura, un numero qualsiasi di altri thread può passare alla modalità di lettura, anche se sono presenti thread in attesa di accedere alla modalità aggiornabile.</span><span class="sxs-lookup"><span data-stu-id="78b1d-314">If a thread is in upgradeable mode, and there are no threads waiting to enter write mode, any number of other threads can enter read mode, even if there are threads waiting to enter upgradeable mode.</span></span>  
  
 <span data-ttu-id="78b1d-315">Se uno o più thread sono in attesa di attivazione della modalità scrittura, un thread che chiama il <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> metodo si blocca fino a quando i thread hanno un timeout o passato in modalità scrittura e quindi sia terminato da quest'ultimo.</span><span class="sxs-lookup"><span data-stu-id="78b1d-315">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78b1d-316">Se un blocco consente la ricorsione, un thread ha acceduto al blocco in modalità aggiornabile può accedere in modo ricorsivo la modalità aggiornabile, anche se altri thread in attesa di passare alla modalità di scrittura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-316">If a lock allows recursion, a thread that has entered the lock in upgradeable mode can enter upgradeable mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b1d-317">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> metodo ad attivare il blocco in modalità aggiornabile.</span><span class="sxs-lookup"><span data-stu-id="78b1d-317">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method to enter the lock in upgradeable mode.</span></span> <span data-ttu-id="78b1d-318">Oggetto `finally` blocco viene utilizzato per eseguire il <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> metodo, assicurando che il chiamante esca dalla modalità aggiornabile.</span><span class="sxs-lookup"><span data-stu-id="78b1d-318">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> method, ensuring that the caller exits upgradeable mode.</span></span>  
  
 <span data-ttu-id="78b1d-319">Il metodo illustrato nell'esempio recupera il valore associato alla chiave e lo confronta con un nuovo valore.</span><span class="sxs-lookup"><span data-stu-id="78b1d-319">The method shown in the example retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="78b1d-320">Se il valore viene modificato, il metodo restituisce uno stato che indica nessuna modifica.</span><span class="sxs-lookup"><span data-stu-id="78b1d-320">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="78b1d-321">Viene trovato alcun valore per la chiave, viene inserita la coppia chiave/valore.</span><span class="sxs-lookup"><span data-stu-id="78b1d-321">It no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="78b1d-322">Se il valore è stato modificato, viene aggiornata.</span><span class="sxs-lookup"><span data-stu-id="78b1d-322">If the value has changed, it is updated.</span></span> <span data-ttu-id="78b1d-323">La modalità aggiornabile consente al thread eseguire l'aggiornamento il blocco di lettura in base alle necessità, senza il rischio di deadlock.</span><span class="sxs-lookup"><span data-stu-id="78b1d-323">Upgradeable mode allows the thread to upgrade the read lock as needed, without risk of deadlocks.</span></span>  
  
 <span data-ttu-id="78b1d-324">L'esempio Usa il costruttore predefinito per creare il blocco, in modo che non è consentita la ricorsione.</span><span class="sxs-lookup"><span data-stu-id="78b1d-324">The example uses the default constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="78b1d-325">Programmazione di <xref:System.Threading.ReaderWriterLockSlim> è più semplice e meno soggetta a errori quando il blocco non supporta la ricorsione.</span><span class="sxs-lookup"><span data-stu-id="78b1d-325">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 <span data-ttu-id="78b1d-326">Questo codice è parte di un esempio più esaustivo disponibile per il <xref:System.Threading.ReaderWriterLockSlim> classe.</span><span class="sxs-lookup"><span data-stu-id="78b1d-326">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#6)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#10)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="78b1d-327">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock in any mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-327">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock in any mode.</span>
          </span>
          <span data-ttu-id="78b1d-328">-or-  The current thread has entered read mode, so trying to enter upgradeable mode would create the possibility of a deadlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-328">-or-  The current thread has entered read mode, so trying to enter upgradeable mode would create the possibility of a deadlock.</span>
          </span>
          <span data-ttu-id="78b1d-329">-or-  The recursion number would exceed the capacity of the counter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-329">-or-  The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="78b1d-330">The limit is so large that applications should never encounter it.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-330">The limit is so large that applications should never encounter it.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="78b1d-331">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-331">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EnterWriteLock">
      <MemberSignature Language="C#" Value="public void EnterWriteLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnterWriteLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.EnterWriteLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnterWriteLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnterWriteLock();" />
      <MemberSignature Language="F#" Value="member this.EnterWriteLock : unit -&gt; unit" Usage="readerWriterLockSlim.EnterWriteLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="78b1d-332">Tries to enter the lock in write mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-332">Tries to enter the lock in write mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-333">Questo metodo si blocca fino a quando il thread chiamante entra nel blocco e pertanto potrebbe non essere mai restituito.</span><span class="sxs-lookup"><span data-stu-id="78b1d-333">This method blocks until the calling thread enters the lock, and therefore might never return.</span></span> <span data-ttu-id="78b1d-334">Usare il <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> metodo blocca per un intervallo specificato e quindi restituire se il thread chiamante non ha acceduto alla modalità di scrittura durante l'intervallo.</span><span class="sxs-lookup"><span data-stu-id="78b1d-334">Use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method to block for a specified interval, and then return if the calling thread has not entered write mode during that interval.</span></span>  
  
 <span data-ttu-id="78b1d-335">Se altri thread è stato attivato il blocco in modalità di lettura, un thread che chiama il <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> metodo si blocca fino a quando i thread sono usciti dalla modalità di lettura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-335">If other threads have entered the lock in read mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> method blocks until those threads have exited read mode.</span></span> <span data-ttu-id="78b1d-336">Quando sono presenti thread in attesa di attivazione della modalità scrittura, gli altri thread che tentano di accedere alla modalità di lettura o la modalità aggiornabile blocco fino a quando non hanno tutti i thread in attesa di attivazione della modalità scrittura o timeout passato in modalità scrittura e quindi sia terminato da quest'ultimo.</span><span class="sxs-lookup"><span data-stu-id="78b1d-336">When there are threads waiting to enter write mode, additional threads that try to enter read mode or upgradeable mode block until all the threads waiting to enter write mode have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78b1d-337">Se un blocco consente la ricorsione, un thread ha acceduto al blocco in modalità di scrittura può accedere in modo ricorsivo la modalità scrittura, anche se altri thread in attesa di passare alla modalità di scrittura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-337">If a lock allows recursion, a thread that has entered the lock in write mode can enter write mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b1d-338">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> metodo ad attivare il blocco in modalità di scrittura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-338">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> method to enter the lock in write mode.</span></span> <span data-ttu-id="78b1d-339">Il metodo illustrato nell'esempio aggiunge una nuova coppia chiave/valore per la cache sincronizzata.</span><span class="sxs-lookup"><span data-stu-id="78b1d-339">The method shown in the example adds a new key/value pair to the synchronized cache.</span></span> <span data-ttu-id="78b1d-340">Se la chiave esiste già nella cache, l'eccezione generata dall'interno <xref:System.Collections.Generic.Dictionary%602> è consentito per il metodo terminate.</span><span class="sxs-lookup"><span data-stu-id="78b1d-340">If the key is already in the cache, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="78b1d-341">Oggetto `finally` blocco viene utilizzato per eseguire il <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> metodo, assicurando che il chiamante esce dalla modalità di scrittura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-341">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> method, ensuring that the caller exits write mode.</span></span>  
  
 <span data-ttu-id="78b1d-342">Questo codice è parte di un esempio più esaustivo disponibile per il <xref:System.Threading.ReaderWriterLockSlim> classe.</span><span class="sxs-lookup"><span data-stu-id="78b1d-342">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="78b1d-343">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock in any mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-343">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock in any mode.</span>
          </span>
          <span data-ttu-id="78b1d-344">-or-  The current thread has entered read mode, so trying to enter the lock in write mode would create the possibility of a deadlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-344">-or-  The current thread has entered read mode, so trying to enter the lock in write mode would create the possibility of a deadlock.</span>
          </span>
          <span data-ttu-id="78b1d-345">-or-  The recursion number would exceed the capacity of the counter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-345">-or-  The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="78b1d-346">The limit is so large that applications should never encounter it.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-346">The limit is so large that applications should never encounter it.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="78b1d-347">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-347">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExitReadLock">
      <MemberSignature Language="C#" Value="public void ExitReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExitReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.ExitReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExitReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExitReadLock();" />
      <MemberSignature Language="F#" Value="member this.ExitReadLock : unit -&gt; unit" Usage="readerWriterLockSlim.ExitReadLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="78b1d-348">Reduces the recursion count for read mode, and exits read mode if the resulting count is 0 (zero).</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-348">Reduces the recursion count for read mode, and exits read mode if the resulting count is 0 (zero).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-349">Questo metodo non è sensibile all'ordine di ricorsione.</span><span class="sxs-lookup"><span data-stu-id="78b1d-349">This method is not sensitive to recursion order.</span></span> <span data-ttu-id="78b1d-350">Ad esempio, se un thread entra in un blocco in modalità aggiornabile e quindi accede al blocco in modalità di lettura, l'ordine in cui il thread venga chiuso le due modalità non è rilevante.</span><span class="sxs-lookup"><span data-stu-id="78b1d-350">For example, if a thread enters a lock in upgradeable mode and then enters the lock in read mode, the order in which the thread exits the two modes does not matter.</span></span> <span data-ttu-id="78b1d-351">Se un blocco consente la ricorsione, un thread può attivare il blocco in modalità di scrittura e quindi in modo ricorsivo in modalità lettura; l'ordine in cui il thread esce dalla modalità di lettura e scrittura in modalità non è rilevante.</span><span class="sxs-lookup"><span data-stu-id="78b1d-351">If a lock allows recursion, a thread can enter the lock in write mode and then enter it recursively in read mode; the order in which the thread exits read mode and write mode does not matter.</span></span>  
  
 <span data-ttu-id="78b1d-352">Disattivazione del blocco potrebbe segnalare altri thread in attesa.</span><span class="sxs-lookup"><span data-stu-id="78b1d-352">Exiting the lock might signal other waiting threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b1d-353">Nell'esempio seguente viene illustrato come utilizzare un `finally` esecuzione del blocco di <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> metodo, assicurando che il chiamante esca dalla modalità di lettura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-353">The following example shows how to use a `finally` block to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> method, ensuring that the caller exits read mode.</span></span> <span data-ttu-id="78b1d-354">Il metodo illustrato nell'esempio recupera il valore associato alla chiave.</span><span class="sxs-lookup"><span data-stu-id="78b1d-354">The method shown in the example retrieves the value associated with a key.</span></span> <span data-ttu-id="78b1d-355">Se la chiave non viene trovata, l'eccezione generata dall'interno <xref:System.Collections.Generic.Dictionary%602> è consentito per il metodo terminate.</span><span class="sxs-lookup"><span data-stu-id="78b1d-355">If the key is not found, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="78b1d-356">Il <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> metodo viene utilizzato per attivare la modalità di lettura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-356">The <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method is used to enter read mode.</span></span>  
  
 <span data-ttu-id="78b1d-357">Questo codice è parte di un esempio più esaustivo disponibile per il <xref:System.Threading.ReaderWriterLockSlim> classe.</span><span class="sxs-lookup"><span data-stu-id="78b1d-357">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="78b1d-358">The current thread has not entered the lock in read mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-358">The current thread has not entered the lock in read mode.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExitUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public void ExitUpgradeableReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExitUpgradeableReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExitUpgradeableReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExitUpgradeableReadLock();" />
      <MemberSignature Language="F#" Value="member this.ExitUpgradeableReadLock : unit -&gt; unit" Usage="readerWriterLockSlim.ExitUpgradeableReadLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="78b1d-359">Reduces the recursion count for upgradeable mode, and exits upgradeable mode if the resulting count is 0 (zero).</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-359">Reduces the recursion count for upgradeable mode, and exits upgradeable mode if the resulting count is 0 (zero).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-360">Questo metodo non è sensibile all'ordine di ricorsione.</span><span class="sxs-lookup"><span data-stu-id="78b1d-360">This method is not sensitive to recursion order.</span></span> <span data-ttu-id="78b1d-361">Ad esempio, se un thread entra in un blocco in modalità aggiornabile e quindi accede al blocco in modalità scrittura, l'ordine in cui il thread venga chiuso le due modalità non è rilevante.</span><span class="sxs-lookup"><span data-stu-id="78b1d-361">For example, if a thread enters a lock in upgradeable mode and then enters the lock in write mode, the order in which the thread exits the two modes does not matter.</span></span> <span data-ttu-id="78b1d-362">Se un blocco consente la ricorsione, un thread può attivare il blocco in modalità di scrittura e quindi in modo ricorsivo in modalità aggiornabile; non è importante l'ordine in cui il thread esce dalla modalità di scrittura e la modalità aggiornabile.</span><span class="sxs-lookup"><span data-stu-id="78b1d-362">If a lock allows recursion, a thread can enter the lock in write mode and then enter it recursively in upgradeable mode; the order in which the thread exits upgradeable mode and write mode does not matter.</span></span>  
  
 <span data-ttu-id="78b1d-363">Disattivazione del blocco potrebbe segnalare altri thread in attesa.</span><span class="sxs-lookup"><span data-stu-id="78b1d-363">Exiting the lock might signal other waiting threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b1d-364">Nell'esempio seguente viene illustrato come utilizzare un `finally` esecuzione del blocco di <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> metodo, assicurando che il chiamante esca dalla modalità aggiornabile.</span><span class="sxs-lookup"><span data-stu-id="78b1d-364">The following example shows how to use a `finally` block to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> method, ensuring that the caller exits upgradeable mode.</span></span>  
  
 <span data-ttu-id="78b1d-365">Il metodo illustrato nell'esempio recupera il valore associato alla chiave e lo confronta con un nuovo valore.</span><span class="sxs-lookup"><span data-stu-id="78b1d-365">The method shown in the example retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="78b1d-366">Se il valore viene modificato, il metodo restituisce uno stato che indica nessuna modifica.</span><span class="sxs-lookup"><span data-stu-id="78b1d-366">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="78b1d-367">Viene trovato alcun valore per la chiave, viene inserita la coppia chiave/valore.</span><span class="sxs-lookup"><span data-stu-id="78b1d-367">It no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="78b1d-368">Se il valore è stato modificato, viene aggiornata.</span><span class="sxs-lookup"><span data-stu-id="78b1d-368">If the value has changed, it is updated.</span></span> <span data-ttu-id="78b1d-369">La modalità aggiornabile consente al thread eseguire l'aggiornamento il blocco di lettura in base alle necessità, senza il rischio di deadlock.</span><span class="sxs-lookup"><span data-stu-id="78b1d-369">Upgradeable mode allows the thread to upgrade the read lock as needed, without risk of deadlocks.</span></span>  
  
 <span data-ttu-id="78b1d-370">L'esempio Usa il costruttore predefinito per creare il blocco, in modo che non è consentita la ricorsione.</span><span class="sxs-lookup"><span data-stu-id="78b1d-370">The example uses the default constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="78b1d-371">Programmazione di <xref:System.Threading.ReaderWriterLockSlim> è più semplice e meno soggetta a errori quando il blocco non supporta la ricorsione.</span><span class="sxs-lookup"><span data-stu-id="78b1d-371">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 <span data-ttu-id="78b1d-372">Questo codice è parte di un esempio più esaustivo disponibile per il <xref:System.Threading.ReaderWriterLockSlim> classe.</span><span class="sxs-lookup"><span data-stu-id="78b1d-372">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#6)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#10)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="78b1d-373">The current thread has not entered the lock in upgradeable mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-373">The current thread has not entered the lock in upgradeable mode.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExitWriteLock">
      <MemberSignature Language="C#" Value="public void ExitWriteLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExitWriteLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExitWriteLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExitWriteLock();" />
      <MemberSignature Language="F#" Value="member this.ExitWriteLock : unit -&gt; unit" Usage="readerWriterLockSlim.ExitWriteLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="78b1d-374">Reduces the recursion count for write mode, and exits write mode if the resulting count is 0 (zero).</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-374">Reduces the recursion count for write mode, and exits write mode if the resulting count is 0 (zero).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-375">Questo metodo non è sensibile all'ordine di ricorsione.</span><span class="sxs-lookup"><span data-stu-id="78b1d-375">This method is not sensitive to recursion order.</span></span> <span data-ttu-id="78b1d-376">Ad esempio, se un thread entra in un blocco in modalità aggiornabile e quindi accede al blocco in modalità scrittura, l'ordine in cui il thread venga chiuso le due modalità non è rilevante.</span><span class="sxs-lookup"><span data-stu-id="78b1d-376">For example, if a thread enters a lock in upgradeable mode and then enters the lock in write mode, the order in which the thread exits the two modes does not matter.</span></span> <span data-ttu-id="78b1d-377">Se un blocco consente la ricorsione, un thread può attivare il blocco in modalità di scrittura e quindi in modo ricorsivo in modalità lettura; l'ordine in cui il thread esce dalla modalità di lettura e scrittura in modalità non è rilevante.</span><span class="sxs-lookup"><span data-stu-id="78b1d-377">If a lock allows recursion, a thread can enter the lock in write mode and then enter it recursively in read mode; the order in which the thread exits read mode and write mode does not matter.</span></span>  
  
 <span data-ttu-id="78b1d-378">Disattivazione del blocco potrebbe segnalare altri thread in attesa.</span><span class="sxs-lookup"><span data-stu-id="78b1d-378">Exiting the lock might signal other waiting threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b1d-379">Nell'esempio seguente viene illustrato come utilizzare un `finally` esecuzione del blocco di <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> metodo, assicurando che il chiamante esce dalla modalità di scrittura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-379">The following example shows how to use a `finally` block to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> method, ensuring that the caller exits write mode.</span></span> <span data-ttu-id="78b1d-380">Il metodo illustrato nell'esempio aggiunge una nuova coppia chiave/valore per la cache sincronizzata.</span><span class="sxs-lookup"><span data-stu-id="78b1d-380">The method shown in the example adds a new key/value pair to the synchronized cache.</span></span> <span data-ttu-id="78b1d-381">Se la chiave esiste già nella cache, l'eccezione generata dall'interno <xref:System.Collections.Generic.Dictionary%602> è consentito per il metodo terminate.</span><span class="sxs-lookup"><span data-stu-id="78b1d-381">If the key is already in the cache, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="78b1d-382">Il <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> metodo viene utilizzato per attivare il blocco in modalità di scrittura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-382">The <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> method is used to enter the lock in write mode.</span></span>  
  
 <span data-ttu-id="78b1d-383">Questo codice è parte di un esempio più esaustivo disponibile per il <xref:System.Threading.ReaderWriterLockSlim> classe.</span><span class="sxs-lookup"><span data-stu-id="78b1d-383">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="78b1d-384">The current thread has not entered the lock in write mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-384">The current thread has not entered the lock in write mode.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadLockHeld">
      <MemberSignature Language="C#" Value="public bool IsReadLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.IsReadLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadLockHeld : bool" Usage="System.Threading.ReaderWriterLockSlim.IsReadLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="78b1d-385">Gets a value that indicates whether the current thread has entered the lock in read mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-385">Gets a value that indicates whether the current thread has entered the lock in read mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="78b1d-386">
            <see langword="true" /> se per il thread corrente è stata attivata la modalità lettura; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-386">
              <see langword="true" /> if the current thread has entered read mode; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-387">Questa proprietà deve essere utilizzata nelle asserzioni o per altri scopi di debug.</span><span class="sxs-lookup"><span data-stu-id="78b1d-387">This property is intended for use in asserts or for other debugging purposes.</span></span> <span data-ttu-id="78b1d-388">Non utilizzarlo per controllare il flusso dell'esecuzione del programma.</span><span class="sxs-lookup"><span data-stu-id="78b1d-388">Do not use it to control the flow of program execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b1d-389">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Threading.ReaderWriterLockSlim.IsReadLockHeld%2A> proprietà per generare un'asserzione se il thread corrente ha acceduto alla modalità di lettura in modo imprevisto.</span><span class="sxs-lookup"><span data-stu-id="78b1d-389">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.IsReadLockHeld%2A> property to generate an assert if the current thread has entered read mode unexpectedly.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#21)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUpgradeableReadLockHeld">
      <MemberSignature Language="C#" Value="public bool IsUpgradeableReadLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUpgradeableReadLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUpgradeableReadLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUpgradeableReadLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUpgradeableReadLockHeld : bool" Usage="System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="78b1d-390">Gets a value that indicates whether the current thread has entered the lock in upgradeable mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-390">Gets a value that indicates whether the current thread has entered the lock in upgradeable mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="78b1d-391">
            <see langword="true" /> se per il thread corrente è stata attivata la modalità aggiornabile; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-391">
              <see langword="true" /> if the current thread has entered upgradeable mode; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-392">Questa proprietà deve essere utilizzata nelle asserzioni o per altri scopi di debug.</span><span class="sxs-lookup"><span data-stu-id="78b1d-392">This property is intended for use in asserts or for other debugging purposes.</span></span> <span data-ttu-id="78b1d-393">Non utilizzarlo per controllare il flusso dell'esecuzione del programma.</span><span class="sxs-lookup"><span data-stu-id="78b1d-393">Do not use it to control the flow of program execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b1d-394">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld%2A> proprietà per generare un'asserzione se il thread corrente ha acceduto alla modalità aggiornabile in modo imprevisto.</span><span class="sxs-lookup"><span data-stu-id="78b1d-394">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld%2A> property to generate an assert if the current thread has entered upgradeable mode unexpectedly.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#22)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWriteLockHeld">
      <MemberSignature Language="C#" Value="public bool IsWriteLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWriteLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWriteLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWriteLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWriteLockHeld : bool" Usage="System.Threading.ReaderWriterLockSlim.IsWriteLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="78b1d-395">Gets a value that indicates whether the current thread has entered the lock in write mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-395">Gets a value that indicates whether the current thread has entered the lock in write mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="78b1d-396">
            <see langword="true" /> se per il thread corrente è stata attivata la modalità scrittura; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-396">
              <see langword="true" /> if the current thread has entered write mode; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-397">Questa proprietà deve essere utilizzata nelle asserzioni o per altri scopi di debug.</span><span class="sxs-lookup"><span data-stu-id="78b1d-397">This property is intended for use in asserts or for other debugging purposes.</span></span> <span data-ttu-id="78b1d-398">Non utilizzarlo per controllare il flusso dell'esecuzione del programma.</span><span class="sxs-lookup"><span data-stu-id="78b1d-398">Do not use it to control the flow of program execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b1d-399">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld%2A> proprietà per generare un'asserzione se il thread corrente ha acceduto alla modalità di scrittura in modo imprevisto.</span><span class="sxs-lookup"><span data-stu-id="78b1d-399">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld%2A> property to generate an assert if the current thread has entered write mode unexpectedly.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#23)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecursionPolicy">
      <MemberSignature Language="C#" Value="public System.Threading.LockRecursionPolicy RecursionPolicy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.LockRecursionPolicy RecursionPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursionPolicy As LockRecursionPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::LockRecursionPolicy RecursionPolicy { System::Threading::LockRecursionPolicy get(); };" />
      <MemberSignature Language="F#" Value="member this.RecursionPolicy : System.Threading.LockRecursionPolicy" Usage="System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockRecursionPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="78b1d-400">Gets a value that indicates the recursion policy for the current <see cref="T:System.Threading.ReaderWriterLockSlim" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-400">Gets a value that indicates the recursion policy for the current <see cref="T:System.Threading.ReaderWriterLockSlim" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="78b1d-401">Uno dei valori di enumerazione che specifica i criteri di ricorsione del blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-401">One of the enumeration values that specifies the lock recursion policy.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-402">Criteri di ricorsione determinano le restrizioni sul thread che accedono al blocco più volte.</span><span class="sxs-lookup"><span data-stu-id="78b1d-402">Recursion policy determines the restrictions on threads that enter the lock more than once.</span></span> <span data-ttu-id="78b1d-403">Ad esempio, se un blocco è stato creato con <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> e un thread ha acceduto al blocco in modalità lettura <xref:System.Threading.LockRecursionException> viene generata se il thread tenta di accedere nuovamente al blocco in modalità lettura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-403">For example, if a lock was created with <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> and a thread has entered the lock in read mode, <xref:System.Threading.LockRecursionException> is thrown if the thread tries to reenter the lock in read mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78b1d-404">Un thread in modalità aggiornabile è possibile eseguire l'aggiornamento alla modalità di scrittura o un downgrade dalla modalità indipendentemente dall'impostazione di criteri di ricorsione di blocco di lettura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-404">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode regardless of the lock recursion policy setting.</span></span>  
  
 <span data-ttu-id="78b1d-405">Indipendentemente dai criteri di ricorsione, un thread che ha inizialmente acceduto leggere in modalità non è consentita l'aggiornamento alla modalità aggiornabile o modalità scrittura, perché ciò comporterebbe una forte probabilità di deadlock.</span><span class="sxs-lookup"><span data-stu-id="78b1d-405">Regardless of recursion policy, a thread that initially entered read mode is not allowed to upgrade to upgradeable mode or write mode, because that pattern creates a strong probability of deadlocks.</span></span>  
  
 <span data-ttu-id="78b1d-406">Per altre informazioni sui criteri di ricorsione e i relativi effetti, vedere la <xref:System.Threading.LockRecursionPolicy> enumerazione e <xref:System.Threading.ReaderWriterLockSlim> classe.</span><span class="sxs-lookup"><span data-stu-id="78b1d-406">For more information about recursion policy and its effects, see the <xref:System.Threading.LockRecursionPolicy> enumeration and the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LockRecursionException" />
      </Docs>
    </Member>
    <Member MemberName="RecursiveReadCount">
      <MemberSignature Language="C#" Value="public int RecursiveReadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecursiveReadCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursiveReadCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursiveReadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RecursiveReadCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.RecursiveReadCount : int" Usage="System.Threading.ReaderWriterLockSlim.RecursiveReadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="78b1d-407">Gets the number of times the current thread has entered the lock in read mode, as an indication of recursion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-407">Gets the number of times the current thread has entered the lock in read mode, as an indication of recursion.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="78b1d-408">0 (zero) se il thread corrente non ha acceduto alla modalità di lettura, 1 se il thread ha acceduto alla modalità lettura ma non in modo ricorsivo o * n * Se il thread è stato attivato il blocco in modo ricorsivo * n * - 1 volte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-408">0 (zero) if the current thread has not entered read mode, 1 if the thread has entered read mode but has not entered it recursively, or *n* if the thread has entered the lock recursively *n* - 1 times.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-409">Utilizzare questa proprietà solo per il debug, profilatura e a scopo di registrazione e non per controllare il comportamento di un algoritmo.</span><span class="sxs-lookup"><span data-stu-id="78b1d-409">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="78b1d-410">I risultati possono modificare non appena che sono state calcolate.</span><span class="sxs-lookup"><span data-stu-id="78b1d-410">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="78b1d-411">Pertanto, non sicuro prendere decisioni basate su questa proprietà.</span><span class="sxs-lookup"><span data-stu-id="78b1d-411">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecursiveUpgradeCount">
      <MemberSignature Language="C#" Value="public int RecursiveUpgradeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecursiveUpgradeCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursiveUpgradeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RecursiveUpgradeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.RecursiveUpgradeCount : int" Usage="System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="78b1d-412">Gets the number of times the current thread has entered the lock in upgradeable mode, as an indication of recursion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-412">Gets the number of times the current thread has entered the lock in upgradeable mode, as an indication of recursion.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="78b1d-413">0 se il thread corrente non ha acceduto alla modalità aggiornabile, 1 se il thread ha acceduto alla modalità aggiornabile ma non è stata attivata, in modo ricorsivo, oppure * n * Se il thread ha acceduto alla modalità aggiornabile in modo ricorsivo * n * - 1 volte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-413">0 if the current thread has not entered upgradeable mode, 1 if the thread has entered upgradeable mode but has not entered it recursively, or *n* if the thread has entered upgradeable mode recursively *n* - 1 times.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-414">Utilizzare questa proprietà solo per il debug, profilatura e a scopo di registrazione e non per controllare il comportamento di un algoritmo.</span><span class="sxs-lookup"><span data-stu-id="78b1d-414">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="78b1d-415">I risultati possono modificare non appena che sono state calcolate.</span><span class="sxs-lookup"><span data-stu-id="78b1d-415">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="78b1d-416">Pertanto, non sicuro prendere decisioni basate su questa proprietà.</span><span class="sxs-lookup"><span data-stu-id="78b1d-416">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecursiveWriteCount">
      <MemberSignature Language="C#" Value="public int RecursiveWriteCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecursiveWriteCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursiveWriteCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursiveWriteCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RecursiveWriteCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.RecursiveWriteCount : int" Usage="System.Threading.ReaderWriterLockSlim.RecursiveWriteCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="78b1d-417">Gets the number of times the current thread has entered the lock in write mode, as an indication of recursion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-417">Gets the number of times the current thread has entered the lock in write mode, as an indication of recursion.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="78b1d-418">0 se il thread corrente non ha acceduto alla modalità di scrittura, 1 se il thread ha acceduto alla modalità scrittura ma non in modo ricorsivo o * n * Se il thread ha acceduto alla modalità di scrittura in modo ricorsivo * n * - 1 volte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-418">0 if the current thread has not entered write mode, 1 if the thread has entered write mode but has not entered it recursively, or *n* if the thread has entered write mode recursively *n* - 1 times.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-419">Utilizzare questa proprietà solo per il debug, profilatura e a scopo di registrazione e non per controllare il comportamento di un algoritmo.</span><span class="sxs-lookup"><span data-stu-id="78b1d-419">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="78b1d-420">I risultati possono modificare non appena che sono state calcolate.</span><span class="sxs-lookup"><span data-stu-id="78b1d-420">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="78b1d-421">Pertanto, non sicuro prendere decisioni basate su questa proprietà.</span><span class="sxs-lookup"><span data-stu-id="78b1d-421">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnterReadLock">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="78b1d-422">Tries to enter the lock in read mode, with an optional time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-422">Tries to enter the lock in read mode, with an optional time-out.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnterReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterReadLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterReadLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterReadLock (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterReadLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterReadLock : int -&gt; bool" Usage="readerWriterLockSlim.TryEnterReadLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="78b1d-423">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-423">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78b1d-424">Tries to enter the lock in read mode, with an optional integer time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-424">Tries to enter the lock in read mode, with an optional integer time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="78b1d-425">
            <see langword="true" /> if the calling thread entered read mode, otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-425">
              <see langword="true" /> if the calling thread entered read mode, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-426">Se `millisecondsTimeout` è 0 (zero), questo metodo controlla lo stato di blocco e restituisce `false` immediatamente se lo stato desiderato non è disponibile.</span><span class="sxs-lookup"><span data-stu-id="78b1d-426">If `millisecondsTimeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="78b1d-427">Modalità di lettura possono accedere più thread contemporaneamente.</span><span class="sxs-lookup"><span data-stu-id="78b1d-427">Multiple threads can enter read mode at the same time.</span></span>  
  
 <span data-ttu-id="78b1d-428">Se uno o più thread sono in attesa di attivazione della modalità scrittura, un thread che chiama il <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> metodo si blocca fino a quando i thread hanno sia un timeout o passato in modalità scrittura e quindi sia terminato da quest'ultimo, o fino alla scadenza dell'intervallo di timeout del thread chiamante.</span><span class="sxs-lookup"><span data-stu-id="78b1d-428">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78b1d-429">Se un blocco consente la ricorsione, un thread ha acceduto al blocco in modalità di lettura può accedere in modo ricorsivo modalità lettura, anche se altri thread in attesa di passare alla modalità di scrittura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-429">If a lock allows recursion, a thread that has entered the lock in read mode can enter read mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="78b1d-430">Un thread può essere in modalità aggiornabile, mentre altri thread è in modalità lettura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-430">One thread can be in upgradeable mode while other threads are in read mode.</span></span> <span data-ttu-id="78b1d-431">Se altri thread in attesa di accedere alla modalità aggiornabile e non sono presenti thread in attesa di attivazione della modalità scrittura, i thread che chiamano il <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> metodo passare immediatamente alla modalità di lettura e non vengono bloccati.</span><span class="sxs-lookup"><span data-stu-id="78b1d-431">If additional threads are waiting to enter upgradeable mode, and there are no threads waiting to enter write mode, threads that call the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method enter read mode immediately and do not block.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="78b1d-432">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-432">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span>
          </span>
          <span data-ttu-id="78b1d-433">-or-  The recursion number would exceed the capacity of the counter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-433">-or-  The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="78b1d-434">The limit is so large that applications should never encounter it.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-434">The limit is so large that applications should never encounter it.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="78b1d-435">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-435">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="78b1d-436">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-436">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnterReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterReadLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterReadLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterReadLock (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterReadLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterReadLock : TimeSpan -&gt; bool" Usage="readerWriterLockSlim.TryEnterReadLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="78b1d-437">The interval to wait, or -1 milliseconds to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-437">The interval to wait, or -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78b1d-438">Tries to enter the lock in read mode, with an optional time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-438">Tries to enter the lock in read mode, with an optional time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="78b1d-439">
            <see langword="true" /> if the calling thread entered read mode, otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-439">
              <see langword="true" /> if the calling thread entered read mode, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-440">Se `timeout` è 0 (zero), questo metodo controlla lo stato di blocco e restituisce `false` immediatamente se lo stato desiderato non è disponibile.</span><span class="sxs-lookup"><span data-stu-id="78b1d-440">If `timeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="78b1d-441">Più thread possono accedere al blocco in modalità di lettura nello stesso momento.</span><span class="sxs-lookup"><span data-stu-id="78b1d-441">Multiple threads can enter the lock in read mode at the same time.</span></span>  
  
 <span data-ttu-id="78b1d-442">Se uno o più thread sono in coda per attivare la modalità di scrittura, un thread che chiama il <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> metodo si blocca fino a quando i thread hanno sia un timeout o passato in modalità scrittura e quindi sia terminato da quest'ultimo, o fino alla scadenza dell'intervallo di timeout del thread chiamante.</span><span class="sxs-lookup"><span data-stu-id="78b1d-442">If one or more threads are queued to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78b1d-443">Se un blocco consente la ricorsione, un thread ha acceduto al blocco in modalità di lettura può accedere in modo ricorsivo modalità lettura, anche se altri thread in attesa di passare alla modalità di scrittura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-443">If a lock allows recursion, a thread that has entered the lock in read mode can enter read mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="78b1d-444">Un thread può essere in modalità aggiornabile, mentre altri thread è in modalità lettura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-444">One thread can be in upgradeable mode while other threads are in read mode.</span></span> <span data-ttu-id="78b1d-445">Se altri thread in attesa di accedere alla modalità aggiornabile e non sono presenti thread in attesa di attivazione della modalità scrittura, i thread che chiamano il <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> metodo passare immediatamente alla modalità di lettura e non vengono bloccati.</span><span class="sxs-lookup"><span data-stu-id="78b1d-445">If additional threads are waiting to enter upgradeable mode, and there are no threads waiting to enter write mode, threads that call the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method enter read mode immediately and do not block.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="78b1d-446">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-446">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span>
          </span>
          <span data-ttu-id="78b1d-447">-or-  The recursion number would exceed the capacity of the counter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-447">-or-  The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="78b1d-448">The limit is so large that applications should never encounter it.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-448">The limit is so large that applications should never encounter it.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="78b1d-449">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-449">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.</span>
          </span>
          <span data-ttu-id="78b1d-450">-or-  The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-450">-or-  The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="78b1d-451">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-451">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnterUpgradeableReadLock">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="78b1d-452">Tries to enter the lock in upgradeable mode, with an optional time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-452">Tries to enter the lock in upgradeable mode, with an optional time-out.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnterUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterUpgradeableReadLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterUpgradeableReadLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterUpgradeableReadLock (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterUpgradeableReadLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterUpgradeableReadLock : int -&gt; bool" Usage="readerWriterLockSlim.TryEnterUpgradeableReadLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="78b1d-453">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-453">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78b1d-454">Tries to enter the lock in upgradeable mode, with an optional time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-454">Tries to enter the lock in upgradeable mode, with an optional time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="78b1d-455">
            <see langword="true" /> if the calling thread entered upgradeable mode, otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-455">
              <see langword="true" /> if the calling thread entered upgradeable mode, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-456">Se `millisecondsTimeout` è 0 (zero), questo metodo controlla lo stato di blocco e restituisce `false` immediatamente se lo stato desiderato non è disponibile.</span><span class="sxs-lookup"><span data-stu-id="78b1d-456">If `millisecondsTimeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="78b1d-457">Utilizzare la modalità aggiornabile quando un thread accede in genere la risorsa protetta dal <xref:System.Threading.ReaderWriterLockSlim> in modalità lettura, ma potrebbe essere necessario immettere la modalità scrittura, se vengono soddisfatte determinate condizioni.</span><span class="sxs-lookup"><span data-stu-id="78b1d-457">Use upgradeable mode when a thread usually accesses the resource that is protected by the <xref:System.Threading.ReaderWriterLockSlim> in read mode, but may need to enter write mode if certain conditions are met.</span></span> <span data-ttu-id="78b1d-458">Un thread in modalità aggiornabile può eseguire l'aggiornamento alla modalità di scrittura o il downgrade per la modalità lettura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-458">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode.</span></span>  
  
 <span data-ttu-id="78b1d-459">Solo un thread può accedere un blocco in modalità aggiornabile in qualsiasi momento.</span><span class="sxs-lookup"><span data-stu-id="78b1d-459">Only one thread can enter a lock in upgradeable mode at any given time.</span></span> <span data-ttu-id="78b1d-460">Se un thread è in modalità aggiornabile e non sono presenti thread in attesa di attivazione della modalità scrittura, un numero qualsiasi di altri thread può passare alla modalità di lettura, anche se sono presenti thread in attesa di accedere alla modalità aggiornabile.</span><span class="sxs-lookup"><span data-stu-id="78b1d-460">If a thread is in upgradeable mode, and there are no threads waiting to enter write mode, any number of other threads can enter read mode, even if there are threads waiting to enter upgradeable mode.</span></span>  
  
 <span data-ttu-id="78b1d-461">Se uno o più thread sono in attesa di attivazione della modalità scrittura, un thread che chiama il <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> metodo si blocca fino a quando i thread hanno sia un timeout o passato in modalità scrittura e quindi sia terminato da quest'ultimo, o fino alla scadenza dell'intervallo di timeout del thread chiamante.</span><span class="sxs-lookup"><span data-stu-id="78b1d-461">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78b1d-462">Se un blocco consente la ricorsione, un thread ha acceduto al blocco in modalità aggiornabile può accedere in modo ricorsivo la modalità aggiornabile, anche se altri thread in attesa di passare alla modalità di scrittura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-462">If a lock allows recursion, a thread that has entered the lock in upgradeable mode can enter upgradeable mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="78b1d-463">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-463">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span>
          </span>
          <span data-ttu-id="78b1d-464">-or-  The current thread initially entered the lock in read mode, and therefore trying to enter upgradeable mode would create the possibility of a deadlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-464">-or-  The current thread initially entered the lock in read mode, and therefore trying to enter upgradeable mode would create the possibility of a deadlock.</span>
          </span>
          <span data-ttu-id="78b1d-465">-or-  The recursion number would exceed the capacity of the counter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-465">-or-  The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="78b1d-466">The limit is so large that applications should never encounter it.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-466">The limit is so large that applications should never encounter it.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="78b1d-467">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-467">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="78b1d-468">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-468">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnterUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterUpgradeableReadLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterUpgradeableReadLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterUpgradeableReadLock (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterUpgradeableReadLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterUpgradeableReadLock : TimeSpan -&gt; bool" Usage="readerWriterLockSlim.TryEnterUpgradeableReadLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="78b1d-469">The interval to wait, or -1 milliseconds to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-469">The interval to wait, or -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78b1d-470">Tries to enter the lock in upgradeable mode, with an optional time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-470">Tries to enter the lock in upgradeable mode, with an optional time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="78b1d-471">
            <see langword="true" /> if the calling thread entered upgradeable mode, otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-471">
              <see langword="true" /> if the calling thread entered upgradeable mode, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-472">Se `timeout` è 0 (zero), questo metodo controlla lo stato di blocco e restituisce `false` immediatamente se lo stato desiderato non è disponibile.</span><span class="sxs-lookup"><span data-stu-id="78b1d-472">If `timeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="78b1d-473">Utilizzare la modalità aggiornabile quando un thread è in genere accedere alla risorsa protetta dal <xref:System.Threading.ReaderWriterLockSlim> in modalità lettura, ma potrebbe essere necessario immettere la modalità scrittura, se vengono soddisfatte determinate condizioni.</span><span class="sxs-lookup"><span data-stu-id="78b1d-473">Use upgradeable mode when a thread usually accesses the resource protected by the <xref:System.Threading.ReaderWriterLockSlim> in read mode, but may need to enter write mode if certain conditions are met.</span></span> <span data-ttu-id="78b1d-474">Un thread in modalità aggiornabile può eseguire l'aggiornamento alla modalità di scrittura o il downgrade per la modalità lettura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-474">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode.</span></span>  
  
 <span data-ttu-id="78b1d-475">Solo un thread può accedere un blocco in modalità aggiornabile in qualsiasi momento.</span><span class="sxs-lookup"><span data-stu-id="78b1d-475">Only one thread can enter a lock in upgradeable mode at any given time.</span></span> <span data-ttu-id="78b1d-476">Se un thread è in modalità aggiornabile e non sono presenti thread in attesa di attivazione della modalità scrittura, un numero qualsiasi di altri thread può passare alla modalità di lettura, anche se sono presenti thread in attesa di accedere alla modalità aggiornabile.</span><span class="sxs-lookup"><span data-stu-id="78b1d-476">If a thread is in upgradeable mode, and there are no threads waiting to enter write mode, any number of other threads can enter read mode, even if there are threads waiting to enter upgradeable mode.</span></span>  
  
 <span data-ttu-id="78b1d-477">Se uno o più thread sono in attesa di attivazione della modalità scrittura, un thread che chiama il <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> metodo si blocca fino a quando i thread hanno sia un timeout o passato in modalità scrittura e quindi sia terminato da quest'ultimo, o fino alla scadenza dell'intervallo di timeout del thread chiamante.</span><span class="sxs-lookup"><span data-stu-id="78b1d-477">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78b1d-478">Se un blocco consente la ricorsione, un thread ha acceduto al blocco in modalità aggiornabile può accedere in modo ricorsivo la modalità aggiornabile, anche se altri thread in attesa di passare alla modalità di scrittura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-478">If a lock allows recursion, a thread that has entered the lock in upgradeable mode can enter upgradeable mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="78b1d-479">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-479">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span>
          </span>
          <span data-ttu-id="78b1d-480">-or-  The current thread initially entered the lock in read mode, and therefore trying to enter upgradeable mode would create the possibility of a deadlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-480">-or-  The current thread initially entered the lock in read mode, and therefore trying to enter upgradeable mode would create the possibility of a deadlock.</span>
          </span>
          <span data-ttu-id="78b1d-481">-or-  The recursion number would exceed the capacity of the counter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-481">-or-  The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="78b1d-482">The limit is so large that applications should never encounter it.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-482">The limit is so large that applications should never encounter it.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="78b1d-483">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-483">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.</span>
          </span>
          <span data-ttu-id="78b1d-484">-or-  The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-484">-or-  The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="78b1d-485">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-485">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnterWriteLock">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="78b1d-486">Tries to enter the lock in write mode, with an optional time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-486">Tries to enter the lock in write mode, with an optional time-out.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnterWriteLock">
      <MemberSignature Language="C#" Value="public bool TryEnterWriteLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterWriteLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterWriteLock (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterWriteLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterWriteLock : int -&gt; bool" Usage="readerWriterLockSlim.TryEnterWriteLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="78b1d-487">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-487">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78b1d-488">Tries to enter the lock in write mode, with an optional time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-488">Tries to enter the lock in write mode, with an optional time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="78b1d-489">
            <see langword="true" /> if the calling thread entered write mode, otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-489">
              <see langword="true" /> if the calling thread entered write mode, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-490">Se `millisecondsTimeout` è 0 (zero), questo metodo controlla lo stato di blocco e restituisce `false` immediatamente se lo stato desiderato non è disponibile.</span><span class="sxs-lookup"><span data-stu-id="78b1d-490">If `millisecondsTimeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="78b1d-491">Se altri thread è stato attivato il blocco in modalità di lettura, un thread che chiama il <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> metodo si blocca fino a quando tali thread sono usciti dal modalità lettura o fino a quando non è trascorso l'intervallo di timeout.</span><span class="sxs-lookup"><span data-stu-id="78b1d-491">If other threads have entered the lock in read mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method blocks until those threads have exited read mode or until the time-out interval has elapsed.</span></span> <span data-ttu-id="78b1d-492">Mentre i thread sono bloccati in attesa di attivazione della modalità scrittura, gli altri thread che tentano di accedere alla modalità di lettura o in modalità aggiornabile bloccare fino a quando tutti i thread in attesa di immettere la modalità scrivono hanno entrambi un timeout o passato in modalità scrittura e quindi sia terminato da quest'ultimo.</span><span class="sxs-lookup"><span data-stu-id="78b1d-492">While threads are blocked waiting to enter write mode, additional threads that try to enter read mode or upgradeable mode block until all the threads waiting to enter write mode have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78b1d-493">Se un blocco consente la ricorsione, un thread ha acceduto al blocco in modalità di scrittura può accedere in modo ricorsivo la modalità scrittura, anche se altri thread in attesa di passare alla modalità di scrittura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-493">If a lock allows recursion, a thread that has entered the lock in write mode can enter write mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b1d-494">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> metodo ad attivare il blocco in modalità di scrittura, con un timeout. Il metodo illustrato nell'esempio aggiunge una nuova coppia chiave/valore per la cache sincronizzata.</span><span class="sxs-lookup"><span data-stu-id="78b1d-494">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method to enter the lock in write mode, with a time-out. The method shown in the example adds a new key/value pair to the synchronized cache.</span></span> <span data-ttu-id="78b1d-495">Se l'intervallo di timeout specificato deve trascorrere prima che il thread entra nel blocco, il metodo restituisce `false`.</span><span class="sxs-lookup"><span data-stu-id="78b1d-495">If the specified time-out interval elapses before the thread enters the lock, the method returns `false`.</span></span> <span data-ttu-id="78b1d-496">Il metodo restituisce `true` se viene aggiunta la coppia chiave/valore.</span><span class="sxs-lookup"><span data-stu-id="78b1d-496">The method returns `true` if the key/value pair is added.</span></span>  
  
 <span data-ttu-id="78b1d-497">Se la chiave esiste già nella cache, l'eccezione generata dall'interno <xref:System.Collections.Generic.Dictionary%602> è consentito per il metodo terminate.</span><span class="sxs-lookup"><span data-stu-id="78b1d-497">If the key is already in the cache, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="78b1d-498">Oggetto `finally` blocco viene utilizzato per eseguire il <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> metodo, assicurando che il chiamante termina il blocco.</span><span class="sxs-lookup"><span data-stu-id="78b1d-498">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> method, ensuring that the caller exits the lock.</span></span>  
  
 <span data-ttu-id="78b1d-499">Questo codice è parte di un esempio più esaustivo disponibile per il <xref:System.Threading.ReaderWriterLockSlim> classe.</span><span class="sxs-lookup"><span data-stu-id="78b1d-499">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="78b1d-500">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-500">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span>
          </span>
          <span data-ttu-id="78b1d-501">-or-  The current thread initially entered the lock in read mode, and therefore trying to enter write mode would create the possibility of a deadlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-501">-or-  The current thread initially entered the lock in read mode, and therefore trying to enter write mode would create the possibility of a deadlock.</span>
          </span>
          <span data-ttu-id="78b1d-502">-or-  The recursion number would exceed the capacity of the counter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-502">-or-  The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="78b1d-503">The limit is so large that applications should never encounter it.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-503">The limit is so large that applications should never encounter it.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="78b1d-504">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-504">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="78b1d-505">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-505">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnterWriteLock">
      <MemberSignature Language="C#" Value="public bool TryEnterWriteLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterWriteLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterWriteLock (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterWriteLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterWriteLock : TimeSpan -&gt; bool" Usage="readerWriterLockSlim.TryEnterWriteLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="78b1d-506">The interval to wait, or -1 milliseconds to wait indefinitely.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-506">The interval to wait, or -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="78b1d-507">Tries to enter the lock in write mode, with an optional time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-507">Tries to enter the lock in write mode, with an optional time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="78b1d-508">
            <see langword="true" /> if the calling thread entered write mode, otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-508">
              <see langword="true" /> if the calling thread entered write mode, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-509">Se `timeout` è 0 (zero), questo metodo controlla lo stato di blocco e restituisce `false` immediatamente se lo stato desiderato non è disponibile.</span><span class="sxs-lookup"><span data-stu-id="78b1d-509">If `timeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="78b1d-510">Se altri thread è stato attivato il blocco in modalità di lettura, un thread che chiama il <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> metodo si blocca fino a quando tali thread sono usciti dal modalità lettura o fino a quando non è trascorso l'intervallo di timeout.</span><span class="sxs-lookup"><span data-stu-id="78b1d-510">If other threads have entered the lock in read mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method blocks until those threads have exited read mode or until the time-out interval has elapsed.</span></span> <span data-ttu-id="78b1d-511">Mentre i thread sono bloccati in attesa di attivazione della modalità scrittura, gli altri thread che tentano di accedere alla modalità di lettura o in modalità aggiornabile bloccare fino a quando tutti i thread in attesa di immettere la modalità scrivono hanno entrambi un timeout o passato in modalità scrittura e quindi sia terminato da quest'ultimo.</span><span class="sxs-lookup"><span data-stu-id="78b1d-511">While threads are blocked waiting to enter write mode, additional threads that try to enter read mode or upgradeable mode block until all the threads waiting to enter write mode have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78b1d-512">Se un blocco consente la ricorsione, un thread ha acceduto al blocco in modalità di scrittura può accedere in modo ricorsivo la modalità scrittura, anche se altri thread in attesa di passare alla modalità di scrittura.</span><span class="sxs-lookup"><span data-stu-id="78b1d-512">If a lock allows recursion, a thread that has entered the lock in write mode can enter write mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException">
          <span data-ttu-id="78b1d-513">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-513">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span>
          </span>
          <span data-ttu-id="78b1d-514">-or-  The current thread initially entered the lock in read mode, and therefore trying to enter write mode would create the possibility of a deadlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-514">-or-  The current thread initially entered the lock in read mode, and therefore trying to enter write mode would create the possibility of a deadlock.</span>
          </span>
          <span data-ttu-id="78b1d-515">-or-  The recursion number would exceed the capacity of the counter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-515">-or-  The recursion number would exceed the capacity of the counter.</span>
          </span>
          <span data-ttu-id="78b1d-516">The limit is so large that applications should never encounter it.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-516">The limit is so large that applications should never encounter it.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="78b1d-517">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-517">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.</span>
          </span>
          <span data-ttu-id="78b1d-518">-or-  The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-518">-or-  The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="78b1d-519">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-519">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitingReadCount">
      <MemberSignature Language="C#" Value="public int WaitingReadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitingReadCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitingReadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WaitingReadCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitingReadCount : int" Usage="System.Threading.ReaderWriterLockSlim.WaitingReadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="78b1d-520">Gets the total number of threads that are waiting to enter the lock in read mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-520">Gets the total number of threads that are waiting to enter the lock in read mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="78b1d-521">Numero complessivo di thread in attesa di attivazione della modalità lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-521">The total number of threads that are waiting to enter read mode.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-522">Utilizzare questa proprietà solo per il debug, profilatura e a scopo di registrazione e non per controllare il comportamento di un algoritmo.</span><span class="sxs-lookup"><span data-stu-id="78b1d-522">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="78b1d-523">I risultati possono modificare non appena che sono state calcolate.</span><span class="sxs-lookup"><span data-stu-id="78b1d-523">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="78b1d-524">Pertanto, non sicuro prendere decisioni basate su questa proprietà.</span><span class="sxs-lookup"><span data-stu-id="78b1d-524">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b1d-525">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Threading.ReaderWriterLockSlim.WaitingReadCount%2A> proprietà per generare una voce nel registro eventi, se il numero di thread che sono bloccati in attesa di attivazione della modalità di lettura, supera una soglia.</span><span class="sxs-lookup"><span data-stu-id="78b1d-525">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.WaitingReadCount%2A> property to generate an event log entry if the number of threads that are blocked, waiting to enter read mode, exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#31)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitingUpgradeCount">
      <MemberSignature Language="C#" Value="public int WaitingUpgradeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitingUpgradeCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitingUpgradeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WaitingUpgradeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitingUpgradeCount : int" Usage="System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="78b1d-526">Gets the total number of threads that are waiting to enter the lock in upgradeable mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-526">Gets the total number of threads that are waiting to enter the lock in upgradeable mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="78b1d-527">Numero complessivo di thread in attesa di attivazione della modalità aggiornabile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-527">The total number of threads that are waiting to enter upgradeable mode.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-528">Utilizzare questa proprietà solo per il debug, profilatura e a scopo di registrazione e non per controllare il comportamento di un algoritmo.</span><span class="sxs-lookup"><span data-stu-id="78b1d-528">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="78b1d-529">I risultati possono modificare non appena che sono state calcolate.</span><span class="sxs-lookup"><span data-stu-id="78b1d-529">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="78b1d-530">Pertanto, non sicuro prendere decisioni basate su questa proprietà.</span><span class="sxs-lookup"><span data-stu-id="78b1d-530">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b1d-531">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount%2A> proprietà per generare una voce nel registro eventi, se il numero di thread che sono bloccati in attesa di passare alla modalità aggiornabile, supera una soglia.</span><span class="sxs-lookup"><span data-stu-id="78b1d-531">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount%2A> property to generate an event log entry if the number of threads that are blocked, waiting to enter upgradeable mode, exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#33)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitingWriteCount">
      <MemberSignature Language="C#" Value="public int WaitingWriteCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitingWriteCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitingWriteCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WaitingWriteCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitingWriteCount : int" Usage="System.Threading.ReaderWriterLockSlim.WaitingWriteCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="78b1d-532">Gets the total number of threads that are waiting to enter the lock in write mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-532">Gets the total number of threads that are waiting to enter the lock in write mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="78b1d-533">Numero complessivo di thread in attesa di attivazione della modalità scrittura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="78b1d-533">The total number of threads that are waiting to enter write mode.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78b1d-534">Utilizzare questa proprietà solo per il debug, profilatura e a scopo di registrazione e non per controllare il comportamento di un algoritmo.</span><span class="sxs-lookup"><span data-stu-id="78b1d-534">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="78b1d-535">I risultati possono modificare non appena che sono state calcolate.</span><span class="sxs-lookup"><span data-stu-id="78b1d-535">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="78b1d-536">Pertanto, non sicuro prendere decisioni basate su questa proprietà.</span><span class="sxs-lookup"><span data-stu-id="78b1d-536">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78b1d-537">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Threading.ReaderWriterLockSlim.WaitingWriteCount%2A> proprietà per generare una voce nel registro eventi, se il numero di thread che sono bloccati in attesa di passare alla modalità di scrittura, supera una soglia.</span><span class="sxs-lookup"><span data-stu-id="78b1d-537">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.WaitingWriteCount%2A> property to generate an event log entry if the number of threads that are blocked, waiting to enter write mode, exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#32)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>