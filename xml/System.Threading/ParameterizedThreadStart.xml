<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj"><span data-ttu-id="d31c9-101">Oggetto che contiene i dati per la routine del thread.</span><span class="sxs-lookup"><span data-stu-id="d31c9-101">An object that contains data for the thread procedure.</span></span></param>
    <summary><span data-ttu-id="d31c9-102">Rappresenta il metodo eseguito in un oggetto <see cref="T:System.Threading.Thread" />.</span><span class="sxs-lookup"><span data-stu-id="d31c9-102">Represents the method that executes on a <see cref="T:System.Threading.Thread" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d31c9-103">Quando viene creato un thread gestito, il metodo che viene eseguita sul thread è rappresentato da:</span><span class="sxs-lookup"><span data-stu-id="d31c9-103">When a managed thread is created, the method that executes on the thread is represented by:</span></span>  
  
-   <span data-ttu-id="d31c9-104">Oggetto <xref:System.Threading.ThreadStart> delegato che viene passato per il <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> costruttore.</span><span class="sxs-lookup"><span data-stu-id="d31c9-104">A <xref:System.Threading.ThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> constructor.</span></span>  <span data-ttu-id="d31c9-105">Qualsiasi metodo che non ha parametri e restituisce `void` in c# o un `Sub` routine in Visual Basic può rappresentare il delegato.</span><span class="sxs-lookup"><span data-stu-id="d31c9-105">Any method that has no parameters and that returns `void` in C# or is a `Sub` procedure in Visual Basic can represent the delegate.</span></span>  
  
-   <span data-ttu-id="d31c9-106">Oggetto <xref:System.Threading.ParameterizedThreadStart> delegato che viene passato per il <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> costruttore.</span><span class="sxs-lookup"><span data-stu-id="d31c9-106">A <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="d31c9-107">Qualsiasi metodo che presenta un singolo parametro di tipo <xref:System.Object> e che restituisce void in c# o una routine Sub in Visual Basic può rappresentare il delegato.</span><span class="sxs-lookup"><span data-stu-id="d31c9-107">Any method that has a single parameter of type <xref:System.Object> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.</span></span>  
  
 <span data-ttu-id="d31c9-108">Il thread non avviato l'esecuzione fino a quando il <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> metodo viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="d31c9-108">The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="d31c9-109">Il <xref:System.Threading.ThreadStart> o <xref:System.Threading.ParameterizedThreadStart> delegato viene richiamato sul thread e l'esecuzione inizia dalla prima riga del metodo rappresentato dal delegato.</span><span class="sxs-lookup"><span data-stu-id="d31c9-109">The <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate.</span></span> <span data-ttu-id="d31c9-110">In caso del <xref:System.Threading.ParameterizedThreadStart> delegato, l'oggetto viene passato per il <xref:System.Threading.Thread.Start%28System.Object%29> viene passato al delegato.</span><span class="sxs-lookup"><span data-stu-id="d31c9-110">In the case of the <xref:System.Threading.ParameterizedThreadStart> delegate, the object that is passed to the <xref:System.Threading.Thread.Start%28System.Object%29> method is passed to the delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d31c9-111">Gli utenti di Visual Basic e c# è possono omettere il <xref:System.Threading.ThreadStart> o <xref:System.Threading.ParameterizedThreadStart> costruttore di delegato durante la creazione di un thread.</span><span class="sxs-lookup"><span data-stu-id="d31c9-111">Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread.</span></span> <span data-ttu-id="d31c9-112">In Visual Basic, usare il `AddressOf` operatore quando si passa il metodo per il <xref:System.Threading.Thread.%23ctor%2A> costruttore, ad esempio `Dim t As New Thread(AddressOf ThreadProc)`.</span><span class="sxs-lookup"><span data-stu-id="d31c9-112">In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="d31c9-113">In c#, è sufficiente specificare il nome della routine del thread.</span><span class="sxs-lookup"><span data-stu-id="d31c9-113">In C#, simply specify the name of the thread procedure.</span></span> <span data-ttu-id="d31c9-114">Il compilatore seleziona il costruttore di delegato corretto.</span><span class="sxs-lookup"><span data-stu-id="d31c9-114">The compiler selects the correct delegate constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d31c9-115">Quando si crea un <xref:System.Threading.ParameterizedThreadStart> delegato per un metodo di istanza in C++, il primo parametro del costruttore è la variabile di istanza.</span><span class="sxs-lookup"><span data-stu-id="d31c9-115">When you create a <xref:System.Threading.ParameterizedThreadStart> delegate for an instance method in C++, the first parameter of the constructor is the instance variable.</span></span> <span data-ttu-id="d31c9-116">Per un metodo statico, il primo parametro del costruttore è zero.</span><span class="sxs-lookup"><span data-stu-id="d31c9-116">For a static method, the first parameter of the constructor is zero.</span></span> <span data-ttu-id="d31c9-117">Per un metodo statico, il costruttore di delegato richiede un solo parametro: l'indirizzo del metodo di callback, qualificato dal nome della classe.</span><span class="sxs-lookup"><span data-stu-id="d31c9-117">For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.</span></span>  
  
 <span data-ttu-id="d31c9-118">Il <xref:System.Threading.ParameterizedThreadStart> delegato e <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> overload del metodo semplificano passare dati a una procedura thread, ma questa tecnica non è indipendente dai tipi perché qualsiasi oggetto può essere passato a <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="d31c9-118">The <xref:System.Threading.ParameterizedThreadStart> delegate and the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d31c9-119">Un modo più efficiente per passare dati a una procedura thread è inserire sia la procedura del thread e i campi dati in un oggetto di lavoro.</span><span class="sxs-lookup"><span data-stu-id="d31c9-119">A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</span></span> <span data-ttu-id="d31c9-120">Per ulteriori informazioni, vedere [la creazione di thread e passaggio di dati in fase di avvio](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span><span class="sxs-lookup"><span data-stu-id="d31c9-120">For more information, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span></span>  
  
 <span data-ttu-id="d31c9-121">Il <xref:System.Threading.ParameterizedThreadStart> delegato supporta solo un singolo parametro.</span><span class="sxs-lookup"><span data-stu-id="d31c9-121">The <xref:System.Threading.ParameterizedThreadStart> delegate supports only a single parameter.</span></span> <span data-ttu-id="d31c9-122">È possibile passare più elementi di dati per il <xref:System.Threading.ParameterizedThreadStart> rendendo tale parametro di uno dei seguenti:</span><span class="sxs-lookup"><span data-stu-id="d31c9-122">You can pass multiple data items to the <xref:System.Threading.ParameterizedThreadStart> by making that parameter one of the following:</span></span>  
  
-   <span data-ttu-id="d31c9-123">Una matrice.</span><span class="sxs-lookup"><span data-stu-id="d31c9-123">An array.</span></span>  
  
-   <span data-ttu-id="d31c9-124">Un tipo di raccolta, se tutti gli elementi di dati sono dello stesso tipo.</span><span class="sxs-lookup"><span data-stu-id="d31c9-124">A collection type, if all of the data items are of the same type.</span></span>  
  
-   <span data-ttu-id="d31c9-125">Tipo di una tupla, ad esempio <xref:System.Tuple%602> o <xref:System.Tuple%604>.</span><span class="sxs-lookup"><span data-stu-id="d31c9-125">A tuple type, such as <xref:System.Tuple%602> or <xref:System.Tuple%604>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d31c9-126">Nell'esempio di codice viene illustrato come utilizzare un <xref:System.Threading.ParameterizedThreadStart> delegato per eseguire un metodo statico e un metodo di istanza.</span><span class="sxs-lookup"><span data-stu-id="d31c9-126">The following code example uses a <xref:System.Threading.ParameterizedThreadStart> delegate to execute a static method and an instance method.</span></span> <span data-ttu-id="d31c9-127">Il primo <xref:System.Threading.ParameterizedThreadStart> delegato è rappresentato da statico `DoWork` (metodo) e il secondo è rappresentato dall'istanza `DoMoreWork` metodo.</span><span class="sxs-lookup"><span data-stu-id="d31c9-127">The first <xref:System.Threading.ParameterizedThreadStart> delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method.</span></span> <span data-ttu-id="d31c9-128">Corrispondano a entrambi i metodi di <xref:System.Threading.ParameterizedThreadStart> firma del delegato; che è disponibile un solo parametro di tipo <xref:System.Object> e non restituisce alcun valore.</span><span class="sxs-lookup"><span data-stu-id="d31c9-128">Both methods match the <xref:System.Threading.ParameterizedThreadStart> delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d31c9-129">I compilatori Visual Basic e c# deducono il <xref:System.Threading.ParameterizedThreadStart> delegare dalle firme del `DoWork` e `DoMoreWork` metodi e chiamare il costruttore corretto.</span><span class="sxs-lookup"><span data-stu-id="d31c9-129">The Visual Basic and C# compilers infer the <xref:System.Threading.ParameterizedThreadStart> delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor.</span></span> <span data-ttu-id="d31c9-130">Pertanto, non è disponibile alcuna chiamata esplicita al costruttore nel codice.</span><span class="sxs-lookup"><span data-stu-id="d31c9-130">Thus, there is no explicit constructor call in the code.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
  </Docs>
</Type>