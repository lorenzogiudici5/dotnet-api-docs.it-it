<Type Name="CancellationToken" FullName="System.Threading.CancellationToken">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f85e2f40367265a7a17f0a020c0ab3735cf981ce" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct CancellationToken" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit CancellationToken extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.CancellationToken" />
  <TypeSignature Language="VB.NET" Value="Public Structure CancellationToken" />
  <TypeSignature Language="C++ CLI" Value="public value class CancellationToken" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsCancellationRequested = {IsCancellationRequested}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="4ccbf-101">Propaga la notifica di richiesta di annullamento delle operazioni.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ccbf-101">Propagates notification that operations should be canceled.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ccbf-102">Oggetto <xref:System.Threading.CancellationToken> consente l'annullamento cooperativo tra thread, gli elementi di lavoro del pool di thread, o <xref:System.Threading.Tasks.Task> oggetti.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-102">A <xref:System.Threading.CancellationToken> enables cooperative cancellation between threads, thread pool work items, or <xref:System.Threading.Tasks.Task> objects.</span></span> <span data-ttu-id="4ccbf-103">Creare un token di annullamento creando un <xref:System.Threading.CancellationTokenSource> oggetto, che gestisce i token di annullamento recuperato dal relativo <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> proprietà.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-103">You create a cancellation token by instantiating a <xref:System.Threading.CancellationTokenSource> object, which manages cancellation tokens retrieved from its <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="4ccbf-104">È quindi possibile passare il token di annullamento a qualsiasi numero di operazioni che devono ricevere la notifica di annullamento, attività o thread.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-104">You then  pass the cancellation token to any number of threads, tasks, or operations that should receive notice of cancellation.</span></span> <span data-ttu-id="4ccbf-105">Il token non può essere usato per avviare l'annullamento.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-105">The token cannot be used to initiate cancellation.</span></span> <span data-ttu-id="4ccbf-106">Quando l'oggetto proprietario chiama <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>, <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> in ogni copia del token di annullamento è impostata su `true`.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-106">When the owning object calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType>, the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property on every copy of the cancellation token is set to `true`.</span></span> <span data-ttu-id="4ccbf-107">Gli oggetti che ricevono la notifica possono rispondere nel modo appropriato.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-107">The objects that receive the notification can respond in whatever manner is appropriate.</span></span>  
  
 <span data-ttu-id="4ccbf-108">Per ulteriori informazioni ed esempi di codice vedere [annullamento in thread gestiti](~/docs/standard/threading/cancellation-in-managed-threads.md).</span><span class="sxs-lookup"><span data-stu-id="4ccbf-108">For more information and code examples see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ccbf-109">L'esempio seguente usa un generatore di numeri casuali per emulare un'applicazione di raccolta dati che legge i valori integrali 10 da undici strumenti diversi.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-109">The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</span></span> <span data-ttu-id="4ccbf-110">Un valore pari a zero indica che la misura non è riuscita per uno strumento, nel qual caso l'operazione deve essere annullata e non Media globale deve essere calcolate.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-110">A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</span></span>  
  
 <span data-ttu-id="4ccbf-111">Per gestire l'annullamento dell'operazione possibili, nell'esempio viene creata un'istanza di un <xref:System.Threading.CancellationTokenSource> oggetto che genera un token di annullamento che viene passato a un <xref:System.Threading.Tasks.TaskFactory> oggetto.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-111">To handle the possible cancellation of the operation, the example instantiates a <xref:System.Threading.CancellationTokenSource> object that generates a cancellation token which is passed to a <xref:System.Threading.Tasks.TaskFactory> object.</span></span> <span data-ttu-id="4ccbf-112">Il <xref:System.Threading.Tasks.TaskFactory> oggetto a sua volta passa il token di annullamento a ognuna delle attività responsabile della raccolta di valori per uno strumento specifico.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-112">The <xref:System.Threading.Tasks.TaskFactory> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</span></span> <span data-ttu-id="4ccbf-113">Il <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> metodo viene chiamato per verificare che la media viene calcolata solo dopo che tutti i valori sono state raccolte correttamente.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-113">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</span></span> <span data-ttu-id="4ccbf-114">Se un'attività ha non perché è stata annullata, la chiamata al <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> metodo genera un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-114">If a task has not because it has been cancelled, the call to the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType> method throws an exception.</span></span>  
  
 [!code-csharp[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/cs/cancel1.cs#1)]
 [!code-vb[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/vb/cancel1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="4ccbf-115">Tutti i membri pubblici e protetti di <see cref="T:System.Threading.CancellationToken" /> sono thread-safe e possono essere utilizzate contemporaneamente da più thread.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4ccbf-115">All public and protected members of <see cref="T:System.Threading.CancellationToken" /> are thread-safe and may be used concurrently from multiple threads.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CancellationToken (bool canceled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool canceled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (canceled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CancellationToken(bool canceled);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="canceled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="canceled">
          <span data-ttu-id="4ccbf-116">Stato di annullamento del token.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-116">The canceled state for the token.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4ccbf-117">Inizializza <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-117">Initializes the <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ccbf-118">I token creati con questo costruttore rimarranno in stato di annullamento specificato da di `canceled` parametro.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-118">Tokens created with this constructor will remain in the canceled state specified by the `canceled` parameter.</span></span> <span data-ttu-id="4ccbf-119">Se `canceled` è `false`, entrambi <xref:System.Threading.CancellationToken.CanBeCanceled%2A> e <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> sarà `false`.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-119">If `canceled` is `false`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `false`.</span></span>  
  
 <span data-ttu-id="4ccbf-120">Se `canceled` è `true`, entrambi <xref:System.Threading.CancellationToken.CanBeCanceled%2A> e <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> sarà `true`.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-120">If `canceled` is `true`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanBeCanceled">
      <MemberSignature Language="C#" Value="public bool CanBeCanceled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanBeCanceled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.CanBeCanceled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanBeCanceled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanBeCanceled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4ccbf-121">Ottiene un valore che indica se questo token è in grado di essere in stato di annullamento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-121">Gets whether this token is capable of being in the canceled state.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4ccbf-122">
            <see langword="true" /> se questo token è in grado di essere in stato di annullamento; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-122">
              <see langword="true" /> if this token is capable of being in the canceled state; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ccbf-123">Se <xref:System.Threading.CancellationToken.CanBeCanceled%2A> restituisce `false`, garantisce che il token mai passeranno a uno stato annullato, il che significa che <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> non restituiranno mai `true`.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-123">If <xref:System.Threading.CancellationToken.CanBeCanceled%2A> returns `false`, it is guaranteed that the token will never transition into a canceled state, meaning that <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will never return `true`.</span></span> <span data-ttu-id="4ccbf-124">Viene restituito un token di annullamento che non può essere annullato da statico <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType> proprietà.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-124">A cancellation token that cannot be canceled is returned by the static <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="4ccbf-125">Facoltativamente, è possibile utilizzare questa proprietà per determinare se un token di annullamento può essere annullato prima dell'analisi del valore di <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> proprietà per determinare se è stata annullata.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-125">You can optionally use this property to determine whether a cancellation token can be canceled before examing the value of the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property to determine whether it has been canceled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4ccbf-126">Determina se l'istanza di <see cref="T:System.Threading.CancellationToken" /> corrente è uguale al token specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-126">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified token.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (other As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="4ccbf-127">L'altro oggetto da confrontare con questa istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-127">The other object to compare with this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4ccbf-128">Determina se l'istanza di <see cref="T:System.Threading.CancellationToken" /> corrente è uguale all'oggetto <see cref="T:System.Object" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-128">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified <see cref="T:System.Object" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4ccbf-129">
            <see langword="true" /> se <paramref name="other" /> è un <see cref="T:System.Threading.CancellationToken" /> e se le due istanze sono uguali; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-129">
              <see langword="true" /> if <paramref name="other" /> is a <see cref="T:System.Threading.CancellationToken" /> and if the two instances are equal; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="4ccbf-130">Per altre informazioni, vedere la sezione Osservazioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-130">See the Remarks section for more information.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="4ccbf-131">Due token di annullamento sono uguali se si verifica una qualsiasi delle condizioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="4ccbf-131">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="4ccbf-132">Sono associate con lo stesso <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-132">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="4ccbf-133">Entrambi sono stati costruiti da public <xref:System.Threading.CancellationToken> , costruttori e i relativi <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> valori sono uguali.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-133">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="4ccbf-134">Il valore di entrambi i token di annullamento è <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-134">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="4ccbf-135">Un oggetto <see cref="T:System.Threading.CancellationTokenSource" /> associato è stato eliminato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-135">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Threading.CancellationToken other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Threading.CancellationToken other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Threading::CancellationToken other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="4ccbf-136">L'altro oggetto <see cref="T:System.Threading.CancellationToken" /> da confrontare con questa istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-136">The other <see cref="T:System.Threading.CancellationToken" /> to compare with this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4ccbf-137">Determina se l'istanza di <see cref="T:System.Threading.CancellationToken" /> corrente è uguale al token specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-137">Determines whether the current <see cref="T:System.Threading.CancellationToken" /> instance is equal to the specified token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4ccbf-138">È <see langword="true" /> se le istanze sono uguali. In caso contrario è <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-138">
              <see langword="true" /> if the instances are equal; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="4ccbf-139">Per altre informazioni, vedere la sezione Osservazioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-139">See the Remarks section for more information.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="4ccbf-140">Due token di annullamento sono uguali se si verifica una qualsiasi delle condizioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="4ccbf-140">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="4ccbf-141">Sono associate con lo stesso <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-141">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="4ccbf-142">Entrambi sono stati costruiti da public <xref:System.Threading.CancellationToken> , costruttori e i relativi <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> valori sono uguali.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-142">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="4ccbf-143">Il valore di entrambi i token di annullamento è <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-143">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4ccbf-144">Viene usato come funzione hash per un oggetto <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-144">Serves as a hash function for a <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4ccbf-145">Codice hash per l'istanza di <see cref="T:System.Threading.CancellationToken" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-145">A hash code for the current <see cref="T:System.Threading.CancellationToken" /> instance.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCancellationRequested">
      <MemberSignature Language="C#" Value="public bool IsCancellationRequested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCancellationRequested" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.IsCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCancellationRequested As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCancellationRequested { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4ccbf-146">Ottiene un valore che indica se per questo token è stato richiesto l'annullamento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-146">Gets whether cancellation has been requested for this token.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4ccbf-147">
            <see langword="true" /> Se l'annullamento è stato richiesto per questo token. in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-147">
              <see langword="true" /> if cancellation has been requested for this token; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ccbf-148">Questa proprietà indica se è stato richiesto l'annullamento per questo token, tramite il token viene inizialmente costruito in uno stato annullato o tramite la chiamata <xref:System.Threading.CancellationTokenSource.Cancel%2A> nel token associato <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-148">This property indicates whether cancellation has been requested for this token, either through the token initially being constructed in a canceled state, or through calling <xref:System.Threading.CancellationTokenSource.Cancel%2A> on the token's associated <xref:System.Threading.CancellationTokenSource>.</span></span>  
  
 <span data-ttu-id="4ccbf-149">Se questa proprietà è `true`, garantisce solo che è stato richiesto l'annullamento.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-149">If this property is `true`, it only guarantees that cancellation has been requested.</span></span> <span data-ttu-id="4ccbf-150">Non garantisce che ogni gestore registrato ha terminato l'esecuzione, né che le richieste di annullamento state propagate in tutti i gestori registrati.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-150">It does not guarantee that every registered handler has finished executing, nor that cancellation requests have finished propagating to all registered handlers.</span></span> <span data-ttu-id="4ccbf-151">Un'ulteriore sincronizzazione potrebbe essere necessario, in particolare nelle situazioni in cui gli oggetti correlati vengono annullati contemporaneamente.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-151">Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4ccbf-152">Ecco un esempio semplice che esegue un processo server fino a quando il <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> restituisce proprietà `true`.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-152">The following is a simple example that executes a server process until the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property returns `true`.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.CancellationToken.IsCancellationRequested#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Tasks.CancellationToken.IsCancellationRequested/cs/cancellation.cs#12)]
 [!code-vb[System.Threading.Tasks.CancellationToken.IsCancellationRequested#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Tasks.CancellationToken.IsCancellationRequested/vb/cancelthreads.vb#12)]  
  
 <span data-ttu-id="4ccbf-153">Nell'esempio viene creata un'istanza di un <xref:System.Threading.CancellationTokenSource> oggetto, che controlla l'accesso al token di annullamento.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-153">The example instantiates a <xref:System.Threading.CancellationTokenSource> object, which controls access to the cancellation token.</span></span> <span data-ttu-id="4ccbf-154">Definisce quindi due procedure di thread.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-154">It then defines two thread procedures.</span></span> <span data-ttu-id="4ccbf-155">Il primo è definito come un'espressione lambda che condivide la tastiera e, quando viene premuto il tasto "C", chiama <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> per impostare lo stato annullato il token di annullamento.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-155">The first is defined as a lambda expression that pools the keyboard and, when the "C" key is pressed, calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> to set the cancellation token to the cancelled state.</span></span> <span data-ttu-id="4ccbf-156">Il secondo è un metodo con parametri, `ServerClass.StaticMethod`, che esegue un ciclo finché il <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> proprietà `true`.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-156">The second is a parameterized method, `ServerClass.StaticMethod`, that executes a loop until the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="4ccbf-157">Il thread principale avvia quindi i blocchi e due thread finché il thread che esegue il `ServerClass.StaticMethod` metodo termina.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-157">The main thread then starts the two threads and blocks until the thread that executes the `ServerClass.StaticMethod` method terminates.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.Threading.CancellationToken None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Threading.CancellationToken None" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property None As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::CancellationToken None { System::Threading::CancellationToken get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4ccbf-158">Restituisce un valore <see cref="T:System.Threading.CancellationToken" /> vuoto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-158">Returns an empty <see cref="T:System.Threading.CancellationToken" /> value.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4ccbf-159">Token di annullamento vuoto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-159">An empty cancellation token.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ccbf-160">Il token di annullamento restituito da questa proprietà non può essere annullato. vale a dire il relativo <xref:System.Threading.CancellationToken.CanBeCanceled%2A> proprietà `false`.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-160">The cancellation token returned by this property cannot be canceled; that is, its <xref:System.Threading.CancellationToken.CanBeCanceled%2A> property is `false`.</span></span>  
  
 <span data-ttu-id="4ccbf-161">È inoltre possibile utilizzare il linguaggio c# [default(CancellationToken)](~/docs/csharp/language-reference/keywords/default.md) istruzione per creare un token di annullamento vuoto.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-161">You can also use the C#  [default(CancellationToken)](~/docs/csharp/language-reference/keywords/default.md) statement to create an empty cancellation token.</span></span> 

 <span data-ttu-id="4ccbf-162">Due token di annullamento vuoto sono sempre uguali.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-162">Two empty cancellation tokens are always equal.</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Threading.CancellationToken left, System.Threading.CancellationToken right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Threading.CancellationToken left, valuetype System.Threading.CancellationToken right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As CancellationToken, right As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Threading::CancellationToken left, System::Threading::CancellationToken right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Threading.CancellationToken" />
        <Parameter Name="right" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="4ccbf-163">Prima istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-163">The first instance.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="4ccbf-164">Seconda istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-164">The second instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4ccbf-165">Determina se due istanze di <see cref="T:System.Threading.CancellationToken" /> sono uguali.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-165">Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4ccbf-166">
            <see langword="true" /> se le istanze sono uguali. In caso contrario, <see langword="false" />. Vedere la sezione Osservazioni per altre informazioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-166">
              <see langword="true" /> if the instances are equal; otherwise, <see langword="false" /> See the Remarks section for more information.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="4ccbf-167">Due token di annullamento sono uguali se si verifica una qualsiasi delle condizioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="4ccbf-167">Two cancellation tokens are equal if any one of the following conditions is true:</span></span> 

- <span data-ttu-id="4ccbf-168">Sono associate con lo stesso <xref:System.Threading.CancellationTokenSource>.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-168">They are associated with the same <xref:System.Threading.CancellationTokenSource>.</span></span>

- <span data-ttu-id="4ccbf-169">Entrambi sono stati costruiti da public <xref:System.Threading.CancellationToken> , costruttori e i relativi <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> valori sono uguali.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-169">They were both constructed from public <xref:System.Threading.CancellationToken> constructors, and their <xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType> values are equal.</span></span>

- <span data-ttu-id="4ccbf-170">Il valore di entrambi i token di annullamento è <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-170">The value of both cancellation tokens is <xref:System.Threading.CancellationToken.None?displayProperty=nameWithType>.</span></span>
       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="4ccbf-171">Un oggetto <see cref="T:System.Threading.CancellationTokenSource" /> associato è stato eliminato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-171">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Threading.CancellationToken left, System.Threading.CancellationToken right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Threading.CancellationToken left, valuetype System.Threading.CancellationToken right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As CancellationToken, right As CancellationToken) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Threading::CancellationToken left, System::Threading::CancellationToken right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Threading.CancellationToken" />
        <Parameter Name="right" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="4ccbf-172">Prima istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-172">The first instance.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="4ccbf-173">Seconda istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-173">The second instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4ccbf-174">Determina se due istanze di <see cref="T:System.Threading.CancellationToken" /> non sono uguali.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-174">Determines whether two <see cref="T:System.Threading.CancellationToken" /> instances are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4ccbf-175">
            <see langword="true" /> se le istanze non sono uguali; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-175">
              <see langword="true" /> if the instances are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Remarks  

<span data-ttu-id="4ccbf-176">Per la definizione di uguaglianza, vedere il <xref:System.Threading.CancellationToken.Equals%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-176">For the definition of equality, see the <xref:System.Threading.CancellationToken.Equals%2A> method.</span></span> 
       ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="4ccbf-177">Un oggetto <see cref="T:System.Threading.CancellationTokenSource" /> associato è stato eliminato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-177">An associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4ccbf-178">Registra un delegato che verrà chiamato quando questo oggetto <see cref="T:System.Threading.CancellationToken" /> viene annullato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-178">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="4ccbf-179">Delegato da eseguire quando l'oggetto <see cref="T:System.Threading.CancellationToken" /> viene annullato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-179">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4ccbf-180">Registra un delegato che verrà chiamato quando questo oggetto <see cref="T:System.Threading.CancellationToken" /> viene annullato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-180">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4ccbf-181">Istanza di <see cref="T:System.Threading.CancellationTokenRegistration" /> che può essere usata per annullare la registrazione del callback.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-181">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ccbf-182">Se questo token è già nello stato annullato, il delegato verrà eseguito immediatamente e in modo sincrono.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-182">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="4ccbf-183">Qualsiasi eccezione generata dal delegato verrà propagato fuori questa chiamata al metodo.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-183">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="4ccbf-184">Corrente <xref:System.Threading.ExecutionContext> insieme il delegato viene acquisito e verrà utilizzato durante l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-184">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="4ccbf-185">Corrente <xref:System.Threading.SynchronizationContext> non viene acquisita.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-185">The current <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
 
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="4ccbf-186">L'oggetto <see cref="T:System.Threading.CancellationTokenSource" /> associato è stato eliminato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-186">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4ccbf-187">
            <paramref name="callback" /> è null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-187">
              <paramref name="callback" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action callback, bool useSynchronizationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action callback, bool useSynchronizationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action, useSynchronizationContext As Boolean) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action ^ callback, bool useSynchronizationContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="useSynchronizationContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="4ccbf-188">Delegato da eseguire quando l'oggetto <see cref="T:System.Threading.CancellationToken" /> viene annullato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-188">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </param>
        <param name="useSynchronizationContext">
          <span data-ttu-id="4ccbf-189">Valore che indica se acquisire l'oggetto <see cref="T:System.Threading.SynchronizationContext" /> corrente e usarlo quando si richiama il <c>callback</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-189">A value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <c>callback</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4ccbf-190">Registra un delegato che verrà chiamato quando questo oggetto <see cref="T:System.Threading.CancellationToken" /> viene annullato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-190">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4ccbf-191">Istanza di <see cref="T:System.Threading.CancellationTokenRegistration" /> che può essere usata per annullare la registrazione del callback.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-191">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ccbf-192">Se questo token è già nello stato annullato, il delegato verrà eseguito immediatamente e in modo sincrono.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-192">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="4ccbf-193">Qualsiasi eccezione generata dal delegato verrà propagato fuori questa chiamata al metodo.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-193">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="4ccbf-194">Corrente <xref:System.Threading.ExecutionContext> insieme il delegato viene acquisito e verrà utilizzato durante l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-194">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="4ccbf-195">Se `useSynchronizationContext` viene `true`, corrente <xref:System.Threading.SynchronizationContext>, se uno esiste, viene acquisito anche con il delegato e verrà usato quando eseguirla.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-195">If `useSynchronizationContext` is `true`, the current <xref:System.Threading.SynchronizationContext>, if one exists, is also captured along with the delegate and will be used when executing it.</span></span> <span data-ttu-id="4ccbf-196">In caso contrario, <xref:System.Threading.SynchronizationContext> non viene acquisita.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-196">Otherwise, <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="4ccbf-197">L'oggetto <see cref="T:System.Threading.CancellationTokenSource" /> associato è stato eliminato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-197">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4ccbf-198">
            <paramref name="callback" /> è null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-198">
              <paramref name="callback" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action&lt;object&gt; callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action`1&lt;object&gt; callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action(Of Object), state As Object) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="4ccbf-199">Delegato da eseguire quando l'oggetto <see cref="T:System.Threading.CancellationToken" /> viene annullato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-199">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="4ccbf-200">Stato da passare all'oggetto <c>callback</c> quando il delegato viene richiamato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-200">The state to pass to the <c>callback</c> when the delegate is invoked.</span>
          </span>
          <span data-ttu-id="4ccbf-201">Può assumere valore Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-201">This may be null.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4ccbf-202">Registra un delegato che verrà chiamato quando questo oggetto <see cref="T:System.Threading.CancellationToken" /> viene annullato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-202">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4ccbf-203">Istanza di <see cref="T:System.Threading.CancellationTokenRegistration" /> che può essere usata per annullare la registrazione del callback.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-203">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ccbf-204">Se questo token è già nello stato annullato, il delegato verrà eseguito immediatamente e in modo sincrono.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-204">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="4ccbf-205">Qualsiasi eccezione generata dal delegato verrà propagato fuori questa chiamata al metodo.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-205">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="4ccbf-206">Corrente <xref:System.Threading.ExecutionContext> insieme il delegato viene acquisito e verrà utilizzato durante l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-206">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="4ccbf-207">Corrente <xref:System.Threading.SynchronizationContext> non viene acquisita.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-207">The current <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="4ccbf-208">L'oggetto <see cref="T:System.Threading.CancellationTokenSource" /> associato è stato eliminato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-208">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4ccbf-209">
            <paramref name="callback" /> è null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-209">
              <paramref name="callback" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationTokenRegistration Register (Action&lt;object&gt; callback, object state, bool useSynchronizationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.CancellationTokenRegistration Register(class System.Action`1&lt;object&gt; callback, object state, bool useSynchronizationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Register (callback As Action(Of Object), state As Object, useSynchronizationContext As Boolean) As CancellationTokenRegistration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CancellationTokenRegistration Register(Action&lt;System::Object ^&gt; ^ callback, System::Object ^ state, bool useSynchronizationContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationTokenRegistration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="useSynchronizationContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="4ccbf-210">Delegato da eseguire quando l'oggetto <see cref="T:System.Threading.CancellationToken" /> viene annullato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-210">The delegate to be executed when the <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="4ccbf-211">Stato da passare all'oggetto <c>callback</c> quando il delegato viene richiamato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-211">The state to pass to the <c>callback</c> when the delegate is invoked.</span>
          </span>
          <span data-ttu-id="4ccbf-212">Può assumere valore Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-212">This may be null.</span>
          </span>
        </param>
        <param name="useSynchronizationContext">
          <span data-ttu-id="4ccbf-213">Valore booleano che indica se acquisire l'oggetto <see cref="T:System.Threading.SynchronizationContext" /> corrente e usarlo quando si richiama l'oggetto <c>callback</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-213">A Boolean value that indicates whether to capture the current <see cref="T:System.Threading.SynchronizationContext" /> and use it when invoking the <c>callback</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4ccbf-214">Registra un delegato che verrà chiamato quando questo oggetto <see cref="T:System.Threading.CancellationToken" /> viene annullato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-214">Registers a delegate that will be called when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4ccbf-215">Istanza di <see cref="T:System.Threading.CancellationTokenRegistration" /> che può essere usata per annullare la registrazione del callback.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-215">The <see cref="T:System.Threading.CancellationTokenRegistration" /> instance that can be used to unregister the callback.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ccbf-216">Se questo token è già nello stato annullato, il delegato verrà eseguito immediatamente e in modo sincrono.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-216">If this token is already in the canceled state, the delegate will be run immediately and synchronously.</span></span> <span data-ttu-id="4ccbf-217">Qualsiasi eccezione generata dal delegato verrà propagato fuori questa chiamata al metodo.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-217">Any exception the delegate generates will be propagated out of this method call.</span></span>  
  
 <span data-ttu-id="4ccbf-218">Corrente <xref:System.Threading.ExecutionContext> insieme il delegato viene acquisito e verrà utilizzato durante l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-218">The current <xref:System.Threading.ExecutionContext> is captured along with the delegate and will be used when executing it.</span></span> 

 <span data-ttu-id="4ccbf-219">Se `useSynchronizationContext` viene `true`, corrente <xref:System.Threading.SynchronizationContext>, se uno esiste, viene acquisito anche con il delegato e verrà usato quando eseguirla.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-219">If `useSynchronizationContext` is `true`, the current <xref:System.Threading.SynchronizationContext>, if one exists, is also captured along with the delegate and will be used when executing it.</span></span> <span data-ttu-id="4ccbf-220">In caso contrario, <xref:System.Threading.SynchronizationContext> non viene acquisita.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-220">Otherwise, <xref:System.Threading.SynchronizationContext> is not captured.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="4ccbf-221">L'oggetto <see cref="T:System.Threading.CancellationTokenSource" /> associato è stato eliminato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-221">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4ccbf-222">
            <paramref name="callback" /> è null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-222">
              <paramref name="callback" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ThrowIfCancellationRequested">
      <MemberSignature Language="C#" Value="public void ThrowIfCancellationRequested ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ThrowIfCancellationRequested() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.CancellationToken.ThrowIfCancellationRequested" />
      <MemberSignature Language="VB.NET" Value="Public Sub ThrowIfCancellationRequested ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ThrowIfCancellationRequested();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4ccbf-223">Genera un oggetto <see cref="T:System.OperationCanceledException" /> se è stato richiesto l'annullamento di questo token.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-223">Throws a <see cref="T:System.OperationCanceledException" /> if this token has had cancellation requested.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ccbf-224">Questo metodo offre funzionalità equivalenti a:</span><span class="sxs-lookup"><span data-stu-id="4ccbf-224">This method provides functionality equivalent to:</span></span>  
  
 <span data-ttu-id="4ccbf-225">C#</span><span class="sxs-lookup"><span data-stu-id="4ccbf-225">C#</span></span>  
  
```  
if (token.IsCancellationRequested)   
    throw new OperationCanceledException(token);  
```  
  
```vb  
If token.IsCancellationRequested Then  
    Throw New OperationCanceledException(token)  
End If  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="4ccbf-226">Per il token è stato richiesto l'annullamento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-226">The token has had cancellation requested.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="4ccbf-227">L'oggetto <see cref="T:System.Threading.CancellationTokenSource" /> associato è stato eliminato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-227">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle WaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle WaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.CancellationToken.WaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ WaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4ccbf-228">Ottiene un oggetto <see cref="T:System.Threading.WaitHandle" /> che viene segnalato quando il token viene annullato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-228">Gets a <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4ccbf-229">
            <see cref="T:System.Threading.WaitHandle" /> segnalato quando il token viene annullato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-229">A <see cref="T:System.Threading.WaitHandle" /> that is signaled when the token is canceled.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4ccbf-230">Accedere a questa proprietà determina un <xref:System.Threading.WaitHandle> deve essere creata un'istanza.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-230">Accessing this property causes a <xref:System.Threading.WaitHandle> to be instantiated.</span></span> <span data-ttu-id="4ccbf-231">È preferibile utilizzare questa proprietà solo quando necessario e quindi eliminare l'oggetto associato <xref:System.Threading.CancellationTokenSource> istanza al più presto (disposing eliminerà l'origine di questo handle allocato).</span><span class="sxs-lookup"><span data-stu-id="4ccbf-231">It is preferable to only use this property when necessary, and to then dispose the associated <xref:System.Threading.CancellationTokenSource> instance at the earliest opportunity (disposing the source will dispose of this allocated handle).</span></span> <span data-ttu-id="4ccbf-232">L'handle non deve essere chiuso o eliminato direttamente.</span><span class="sxs-lookup"><span data-stu-id="4ccbf-232">The handle should not be closed or disposed directly.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="4ccbf-233">L'oggetto <see cref="T:System.Threading.CancellationTokenSource" /> associato è stato eliminato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4ccbf-233">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>