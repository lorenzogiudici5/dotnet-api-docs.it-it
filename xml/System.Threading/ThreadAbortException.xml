<Type Name="ThreadAbortException" FullName="System.Threading.ThreadAbortException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="df80ea7009fca382cb46604f09261cf8a62af706" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37548640" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ThreadAbortException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ThreadAbortException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadAbortException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ThreadAbortException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadAbortException sealed : SystemException" />
  <TypeSignature Language="F#" Value="type ThreadAbortException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Eccezione generata quando viene eseguita una chiamata al metodo <see cref="M:System.Threading.Thread.Abort(System.Object)" />. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando viene eseguita una chiamata per il <xref:System.Threading.Thread.Abort%2A> metodo per eliminare un thread, common language runtime genera una <xref:System.Threading.ThreadAbortException>. <xref:System.Threading.ThreadAbortException> è un'eccezione speciale che può essere intercettata, ma verrà automaticamente generato di nuovo alla fine del `catch` blocco. Quando viene generata questa eccezione, il runtime esegue tutti i `finally` blocchi prima di terminare il thread. Poiché il thread può eseguire un calcolo illimitato `finally` blocchi o chiamata <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=nameWithType> per annullare la richiesta di interruzione, non c'è garanzia che il thread che mai terminerà. Se si vuole attendere fino a quando non è terminato il thread interrotto, è possibile chiamare il <xref:System.Threading.Thread.Join%2A?displayProperty=nameWithType> (metodo). <xref:System.Threading.Thread.Join%2A> è una chiamata di blocco che non termina finché il thread viene effettivamente interrotta l'esecuzione.  
  
> [!NOTE]
>  Quando common language runtime (CLR) si arresta in background threadsafter tutti i thread in primo piano in un file eseguibile gestito, non usa <xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType>. Pertanto, è possibile utilizzare <xref:System.Threading.ThreadAbortException> per rilevare quando vengono terminati i thread in background da CLR.  
  
 <xref:System.Threading.ThreadAbortException> Usa il COR_E_THREADABORTED HRESULT, che ha il valore 0x80131530.  
  
> [!NOTE]
>  Il valore di ereditato <xref:System.Exception.Data%2A> proprietà è sempre `null`.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrata l'eliminazione di un thread. Il thread che riceve la `ThreadAbortException` utilizza il <xref:System.Threading.Thread.ResetAbort%2A> metodo per annullare la richiesta di interruzione e continuare l'esecuzione.  
  
 [!code-cpp[ThreadAbEx#1](~/samples/snippets/cpp/VS_Snippets_CLR/ThreadAbEx/CPP/threadabex.cpp#1)]
 [!code-csharp[ThreadAbEx#1](~/samples/snippets/csharp/VS_Snippets_CLR/ThreadAbEx/CS/threadabex.cs#1)]
 [!code-vb[ThreadAbEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ThreadAbEx/VB/threadabex.vb#1)]  
  
 L'output del codice è il seguente:  
  
```  
Thread - working.  
Main - aborting my thread.  
Thread - caught ThreadAbortException - resetting.  
Exception message: Thread was being aborted.  
Thread - still alive and working.  
Thread - finished working.  
Main ending.  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="M:System.Threading.Thread.Abort(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName="ExceptionState">
      <MemberSignature Language="C#" Value="public object ExceptionState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ExceptionState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ThreadAbortException.ExceptionState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExceptionState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ExceptionState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionState : obj" Usage="System.Threading.ThreadAbortException.ExceptionState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Viene fornito un oggetto che contiene informazioni specifiche dell'applicazione relative all'interruzione del thread.</summary>
        <value>Oggetto contenente informazioni specifiche dell'applicazione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'oggetto restituito da questa proprietà viene specificato tramite il `stateInfo` parametro il <xref:System.Threading.Thread.Abort%2A> (metodo). Il contenuto esatto e l'utilizzo di questo oggetto è definita; dell'applicazione in genere utilizzato per trasmettere informazioni significative per il thread interrotto.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come passare informazioni a un thread che è stata interrotta.  
  
 [!code-cpp[System.Threading.Thread.Abort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Abort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Abort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Thread.CurrentThread" />
        <altmember cref="M:System.Threading.Thread.Abort(System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>