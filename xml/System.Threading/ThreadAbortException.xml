<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ThreadAbortException.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac51b2a2f2697e92949b7f739964f5f510bbcbe3e0a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b2a2f2697e92949b7f739964f5f510bbcbe3e0a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadAbortException">
          <source>The exception that is thrown when a call is made to the <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Abort(System.Object)" /&gt;</ph> method.</source>
          <target state="translated">Eccezione generata quando viene eseguita una chiamata al metodo <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Abort(System.Object)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadAbortException">
          <source>This class cannot be inherited.</source>
          <target state="translated">Questa classe non può essere ereditata.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>When a call is made to the <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> method to destroy a thread, the common language runtime throws a <ph id="ph2">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>.</source>
          <target state="translated">Quando viene eseguita una chiamata per il <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> metodo per eliminare un thread, common language runtime genera un <ph id="ph2">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source><ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> is a special exception that can be caught, but it will automatically be raised again at the end of the <ph id="ph2">`catch`</ph> block.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> è un'eccezione speciale che può essere intercettata, ma verrà automaticamente generato di nuovo alla fine del <ph id="ph2">`catch`</ph> blocco.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>When this exception is raised, the runtime executes all the <ph id="ph1">`finally`</ph> blocks before ending the thread.</source>
          <target state="translated">Quando viene generata questa eccezione, il runtime esegue tutte le <ph id="ph1">`finally`</ph> blocchi prima di terminare il thread.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>Because the thread can do an unbounded computation in the <ph id="ph1">`finally`</ph> blocks or call <ph id="ph2">&lt;xref:System.Threading.Thread.ResetAbort%2A?displayProperty=nameWithType&gt;</ph> to cancel the abort, there is no guarantee that the thread will ever end.</source>
          <target state="translated">Perché il thread può eseguire un calcolo unbounded <ph id="ph1">`finally`</ph> blocchi oppure chiamare <ph id="ph2">&lt;xref:System.Threading.Thread.ResetAbort%2A?displayProperty=nameWithType&gt;</ph> per annullare la richiesta di interruzione, non c'è garanzia che il thread terminerà mai.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>If you want to wait until the aborted thread has ended, you can call the <ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Se si desidera attendere fino a quando non è terminato il thread interrotto, è possibile chiamare il <ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> is a blocking call that does not return until the thread actually stops executing.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> è una chiamata di blocco non termina finché il thread effettivamente interrompe l'esecuzione.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>When the common language runtime (CLR) stops background threadsafter all foreground threads in a managed executable have ended, it does not use <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Al termine di background threadsafter tutti i thread in primo piano in un file eseguibile gestito, common language runtime (CLR) non utilizza <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>Therefore, you cannot use <ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> to detect when background threads are being terminated by the CLR.</source>
          <target state="translated">Pertanto, è possibile utilizzare <ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> per rilevare quando vengono terminati i thread in background da CLR.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source><ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> uses the HRESULT COR_E_THREADABORTED, which has the value 0x80131530.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> utilizza HRESULT COR_E_THREADABORTED, il cui valore 0x80131530.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>The value of the inherited <ph id="ph1">&lt;xref:System.Exception.Data%2A&gt;</ph> property is always <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Il valore ereditato <ph id="ph1">&lt;xref:System.Exception.Data%2A&gt;</ph> proprietà è sempre <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>The following example demonstrates aborting a thread.</source>
          <target state="translated">Nell'esempio seguente viene illustrata l'eliminazione di un thread.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>The thread that receives the <ph id="ph1">`ThreadAbortException`</ph> uses the <ph id="ph2">&lt;xref:System.Threading.Thread.ResetAbort%2A&gt;</ph> method to cancel the abort request and continue executing.</source>
          <target state="translated">Il thread che riceve il <ph id="ph1">`ThreadAbortException`</ph> utilizza il <ph id="ph2">&lt;xref:System.Threading.Thread.ResetAbort%2A&gt;</ph> per annullare la richiesta di interruzione e continuare l'esecuzione.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadAbortException">
          <source>This code produces the following output:</source>
          <target state="translated">L'output del codice è il seguente:</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="P:System.Threading.ThreadAbortException.ExceptionState">
          <source>Gets an object that contains application-specific information related to the thread abort.</source>
          <target state="translated">Viene fornito un oggetto che contiene informazioni specifiche dell'applicazione relative all'interruzione del thread.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadAbortException.ExceptionState">
          <source>An object containing application-specific information.</source>
          <target state="translated">Oggetto contenente informazioni specifiche dell'applicazione.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadAbortException.ExceptionState">
          <source>The object returned by this property is specified through the <ph id="ph1">`stateInfo`</ph> parameter of the <ph id="ph2">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> method.</source>
          <target state="translated">L'oggetto restituito da questa proprietà viene specificato tramite il <ph id="ph1">`stateInfo`</ph> parametro del <ph id="ph2">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadAbortException.ExceptionState">
          <source>The exact content and usage of this object is application defined; it is typically used to convey information that is meaningful to the thread being aborted.</source>
          <target state="translated">Il contenuto esatto e l'utilizzo di questo oggetto è definito; applicazione in genere utilizzato per trasmettere informazioni significative per il thread interrotto.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ThreadAbortException.ExceptionState">
          <source>The following code example shows how to pass information to a thread that is being aborted.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come passare informazioni a un thread che è stata interrotta.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>