<Type Name="Mutex" FullName="System.Threading.Mutex">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b9f6f3b97fec6581e9267dd0f2050265fa381f9b" />
    <Meta Name="ms.sourcegitcommit" Value="0d6aa6694f157a08fe52cd25b4d9d3dcf913e812" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="10/12/2018" />
    <Meta Name="ms.locfileid" Value="49146214" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Mutex : System.Threading.WaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Mutex extends System.Threading.WaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Mutex" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Mutex&#xA;Inherits WaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class Mutex sealed : System::Threading::WaitHandle" />
  <TypeSignature Language="F#" Value="type Mutex = class&#xA;    inherit WaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ff95d-101">Primitiva di sincronizzazione che può essere utilizzata anche per la sincronizzazione interprocesso.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ff95d-101">A synchronization primitive that can also be used for interprocess synchronization.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff95d-102">Quando due o più thread devono accedere a una risorsa condivisa allo stesso tempo, il sistema deve un meccanismo di sincronizzazione per garantire che un solo thread alla volta utilizza la risorsa.</span><span class="sxs-lookup"><span data-stu-id="ff95d-102">When two or more threads need to access a shared resource at the same time, the system needs a synchronization mechanism to ensure that only one thread at a time uses the resource.</span></span> <span data-ttu-id="ff95d-103"><xref:System.Threading.Mutex> è una sincronizzazione primitivi che concede l'accesso esclusivo alla risorsa condivisa su un solo thread.</span><span class="sxs-lookup"><span data-stu-id="ff95d-103"><xref:System.Threading.Mutex> is a synchronization primitive that grants exclusive access to the shared resource to only one thread.</span></span> <span data-ttu-id="ff95d-104">Se un thread acquisisce un mutex, il secondo thread che vuole acquisire il mutex viene sospeso fino a quando il primo thread rilascia la mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-104">If a thread acquires a mutex, the second thread that wants to acquire that mutex is suspended until the first thread releases the mutex.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ff95d-105">Questo tipo implementa la <xref:System.IDisposable> interfaccia.</span><span class="sxs-lookup"><span data-stu-id="ff95d-105">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="ff95d-106">Dopo aver utilizzato il tipo, è necessario eliminarlo direttamente o indirettamente.</span><span class="sxs-lookup"><span data-stu-id="ff95d-106">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="ff95d-107">Per eliminare il tipo direttamente, chiamare relativi <xref:System.IDisposable.Dispose%2A> metodo in un `try` / `catch` blocco.</span><span class="sxs-lookup"><span data-stu-id="ff95d-107">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="ff95d-108">Per eliminarlo indirettamente, utilizzare un costrutto di linguaggio come ad esempio `using` in C# o `Using` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="ff95d-108">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="ff95d-109">Per altre informazioni, vedere la sezione "Utilizzo di oggetti che implementano IDisposable" nel <xref:System.IDisposable> argomento relativo all'interfaccia.</span><span class="sxs-lookup"><span data-stu-id="ff95d-109">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="ff95d-110">È possibile usare il <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> metodo per richiedere la proprietà di un mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-110">You can use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method to request ownership of a mutex.</span></span> <span data-ttu-id="ff95d-111">Il thread chiamante si bloccherà fino a quando non si verifica una delle operazioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="ff95d-111">The calling thread blocks until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="ff95d-112">Il mutex viene segnalato per indicare che il proprietario.</span><span class="sxs-lookup"><span data-stu-id="ff95d-112">The mutex is signaled to indicate that it is not owned.</span></span> <span data-ttu-id="ff95d-113">In questo caso, il <xref:System.Threading.WaitHandle.WaitOne%2A> restituzione del metodo `true`, e il thread chiamante diventa il proprietario del mutex e accede alla risorsa protetta dal mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-113">When this happens, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `true`, and the calling thread assumes ownership of the mutex and accesses the resource protected by the mutex.</span></span> <span data-ttu-id="ff95d-114">Dopo aver terminato l'accesso alla risorsa, il thread deve chiamare il <xref:System.Threading.Mutex.ReleaseMutex%2A> metodo per rilasciare la proprietà del mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-114">When it has finished accessing the resource, the thread must call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method to release ownership of the mutex.</span></span> <span data-ttu-id="ff95d-115">Il primo esempio nella sezione esempi illustra il modello.</span><span class="sxs-lookup"><span data-stu-id="ff95d-115">The first example in the Examples section illustrates this pattern.</span></span>  
  
-   <span data-ttu-id="ff95d-116">L'intervallo di timeout specificato nella chiamata a un <xref:System.Threading.WaitHandle.WaitOne%2A> metodo con un `millisecondsTimeout` o `timeout` parametro è trascorso.</span><span class="sxs-lookup"><span data-stu-id="ff95d-116">The time-out interval specified in the call to a <xref:System.Threading.WaitHandle.WaitOne%2A> method that has a `millisecondsTimeout` or `timeout` parameter has elapsed.</span></span> <span data-ttu-id="ff95d-117">In questo caso, il <xref:System.Threading.WaitHandle.WaitOne%2A> restituzione del metodo `false`, e il thread chiamante non effettua altri tentativi di acquisire la proprietà del mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-117">When this happens, the <xref:System.Threading.WaitHandle.WaitOne%2A> method returns `false`, and the calling thread makes no further attempt to acquire ownership of the mutex.</span></span> <span data-ttu-id="ff95d-118">In questo caso, è necessario strutturare il codice in modo che il thread chiamante viene negato l'accesso alla risorsa protetta dal mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-118">In this case, you should structure your code so that access to the resource that is protected by the mutex is denied to the calling thread.</span></span> <span data-ttu-id="ff95d-119">Perché il thread mai acquisito la proprietà del mutex, non deve chiamare il <xref:System.Threading.Mutex.ReleaseMutex%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="ff95d-119">Because the thread never acquired ownership of the mutex, it must not call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span> <span data-ttu-id="ff95d-120">Questo modello è illustrato nel secondo esempio nella sezione esempi.</span><span class="sxs-lookup"><span data-stu-id="ff95d-120">The second example in the Examples section illustrates this pattern.</span></span>  
  
 <span data-ttu-id="ff95d-121">Il <xref:System.Threading.Mutex> identità del thread, imposto dalla classe in modo che un mutex può essere rilasciato solo dal thread che ha acquisito.</span><span class="sxs-lookup"><span data-stu-id="ff95d-121">The <xref:System.Threading.Mutex> class enforces thread identity, so a mutex can be released only by the thread that acquired it.</span></span> <span data-ttu-id="ff95d-122">Al contrario, il <xref:System.Threading.Semaphore> classe non impone l'identità del thread.</span><span class="sxs-lookup"><span data-stu-id="ff95d-122">By contrast, the <xref:System.Threading.Semaphore> class does not enforce thread identity.</span></span> <span data-ttu-id="ff95d-123">Un mutex può essere passato anche attraverso i limiti del dominio applicazione.</span><span class="sxs-lookup"><span data-stu-id="ff95d-123">A mutex can also be passed across application domain boundaries.</span></span>  
  
 <span data-ttu-id="ff95d-124">Il thread che possiede un mutex può richiedere lo stesso mutex nelle chiamate ripetute a <xref:System.Threading.WaitHandle.WaitOne%2A> senza interromperne l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="ff95d-124">The thread that owns a mutex can request the same mutex in repeated calls to <xref:System.Threading.WaitHandle.WaitOne%2A> without blocking its execution.</span></span> <span data-ttu-id="ff95d-125">Tuttavia, il thread deve chiamare il <xref:System.Threading.Mutex.ReleaseMutex%2A> metodo di stesso numero di volte per rilasciare la proprietà del mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-125">However, the thread must call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method the same number of times to release ownership of the mutex.</span></span>  
  
 <span data-ttu-id="ff95d-126">Poiché il <xref:System.Threading.Mutex> classe eredita da <xref:System.Threading.WaitHandle>, è anche possibile chiamare il metodo statico <xref:System.Threading.WaitHandle.WaitAll%2A?displayProperty=nameWithType> e <xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=nameWithType> metodi per sincronizzare l'accesso a una risorsa protetta.</span><span class="sxs-lookup"><span data-stu-id="ff95d-126">Because the <xref:System.Threading.Mutex> class inherits from <xref:System.Threading.WaitHandle>, you can also call the static <xref:System.Threading.WaitHandle.WaitAll%2A?displayProperty=nameWithType> and <xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=nameWithType> methods to synchronize access to a protected resource.</span></span>  
  
 <span data-ttu-id="ff95d-127">Se durante il proprietario di un mutex termina un thread, si dice che il mutex abbandonato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-127">If a thread terminates while owning a mutex, the mutex is said to be abandoned.</span></span> <span data-ttu-id="ff95d-128">Lo stato del tipo mutex è impostato su segnalato, e il thread d'attesa successivo Ottiene la proprietà.</span><span class="sxs-lookup"><span data-stu-id="ff95d-128">The state of the mutex is set to signaled, and the next waiting thread gets ownership.</span></span> <span data-ttu-id="ff95d-129">Partire dalla versione 2.0 di .NET Framework, un <xref:System.Threading.AbandonedMutexException> generata nel thread successivo che acquisisce il mutex abbandonato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-129">Beginning in version 2.0 of the .NET Framework, an <xref:System.Threading.AbandonedMutexException> is thrown in the next thread that acquires the abandoned mutex.</span></span> <span data-ttu-id="ff95d-130">Prima della versione 2.0 di .NET Framework, è stata generata alcuna eccezione.</span><span class="sxs-lookup"><span data-stu-id="ff95d-130">Before version 2.0 of the .NET Framework, no exception was thrown.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="ff95d-131">Un mutex abbandonato indica spesso un errore grave nel codice.</span><span class="sxs-lookup"><span data-stu-id="ff95d-131">An abandoned mutex often indicates a serious error in the code.</span></span> <span data-ttu-id="ff95d-132">Quando un thread termina senza rilasciare il mutex, le strutture di dati protette dal mutex non sia in uno stato coerente.</span><span class="sxs-lookup"><span data-stu-id="ff95d-132">When a thread exits without releasing the mutex, the data structures protected by the mutex might not be in a consistent state.</span></span> <span data-ttu-id="ff95d-133">Il thread successivo per richiedere la proprietà del mutex può gestire questa eccezione e continuare, se è possibile verificare l'integrità delle strutture di dati.</span><span class="sxs-lookup"><span data-stu-id="ff95d-133">The next thread to request ownership of the mutex can handle this exception and proceed, if the integrity of the data structures can be verified.</span></span>  
  
 <span data-ttu-id="ff95d-134">Nel caso di un mutex di sistema, un mutex abbandonato potrebbe indicare che un'applicazione è stata terminata in modo anomalo (ad esempio, usando Gestione attività Windows).</span><span class="sxs-lookup"><span data-stu-id="ff95d-134">In the case of a system-wide mutex, an abandoned mutex might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span>  
  
 <span data-ttu-id="ff95d-135">Sono disponibili due tipi: i mutex locali, che sono denominati e non denominati mutex di sistema.</span><span class="sxs-lookup"><span data-stu-id="ff95d-135">Mutexes are of two types: local mutexes, which are unnamed, and named system mutexes.</span></span> <span data-ttu-id="ff95d-136">Un mutex locale esiste solo all'interno del processo.</span><span class="sxs-lookup"><span data-stu-id="ff95d-136">A local mutex exists only within your process.</span></span> <span data-ttu-id="ff95d-137">Può essere utilizzato da qualsiasi thread nel processo che dispone di un riferimento al <xref:System.Threading.Mutex> oggetto che rappresenta il mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-137">It can be used by any thread in your process that has a reference to the <xref:System.Threading.Mutex> object that represents the mutex.</span></span> <span data-ttu-id="ff95d-138">Ogni senza nome <xref:System.Threading.Mutex> oggetto rappresenta un mutex locale separato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-138">Each unnamed <xref:System.Threading.Mutex> object represents a separate local mutex.</span></span>  
  
 <span data-ttu-id="ff95d-139">I mutex sono visibili in tutto il sistema operativo e possono essere utilizzati per sincronizzare le attività dei processi di sistema denominati.</span><span class="sxs-lookup"><span data-stu-id="ff95d-139">Named system mutexes are visible throughout the operating system, and can be used to synchronize the activities of processes.</span></span> <span data-ttu-id="ff95d-140">È possibile creare un <xref:System.Threading.Mutex> oggetto che rappresenta un mutex di sistema denominato usando un costruttore che accetta un nome.</span><span class="sxs-lookup"><span data-stu-id="ff95d-140">You can create a <xref:System.Threading.Mutex> object that represents a named system mutex by using a constructor that accepts a name.</span></span> <span data-ttu-id="ff95d-141">L'oggetto di sistema operativo può essere creato nello stesso momento o può esistere già prima della creazione del <xref:System.Threading.Mutex> oggetto.</span><span class="sxs-lookup"><span data-stu-id="ff95d-141">The operating-system object can be created at the same time, or it can exist before the creation of the <xref:System.Threading.Mutex> object.</span></span> <span data-ttu-id="ff95d-142">È possibile creare più oggetti <xref:System.Threading.Mutex> che rappresentano lo stesso mutex di sistema denominato ed è possibile usare il metodo <xref:System.Threading.Mutex.OpenExisting%2A> per aprire un mutex di sistema denominato esistente.</span><span class="sxs-lookup"><span data-stu-id="ff95d-142">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex, and you can use the <xref:System.Threading.Mutex.OpenExisting%2A> method to open an existing named system mutex.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ff95d-143">In un server che esegue Servizi Terminal, un mutex di sistema denominato può avere due livelli di visibilità.</span><span class="sxs-lookup"><span data-stu-id="ff95d-143">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="ff95d-144">Se il nome inizia con il prefisso "Global\\", il mutex è visibile in tutte le sessioni di terminal server.</span><span class="sxs-lookup"><span data-stu-id="ff95d-144">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="ff95d-145">Se il nome inizia con il prefisso "locale\\", il mutex è visibile solo nella sessione di terminal server in cui è stato creato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-145">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="ff95d-146">In tal caso, un mutex separato con lo stesso nome può esistere in ognuna delle altre sessioni di terminal server nel server.</span><span class="sxs-lookup"><span data-stu-id="ff95d-146">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="ff95d-147">Se non si specifica un prefisso quando si crea un mutex denominato, accetta il prefisso "locale\\".</span><span class="sxs-lookup"><span data-stu-id="ff95d-147">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="ff95d-148">All'interno di una sessione di terminal server, i due mutex i cui nomi differiscono solo per i relativi prefissi vengono separati i mutex ed entrambi sono visibili a tutti i processi nella sessione di terminal server.</span><span class="sxs-lookup"><span data-stu-id="ff95d-148">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="ff95d-149">Vale a dire, i nomi di prefisso "Global\\" e "locale\\" viene descritto l'ambito del nome del mutex relativo sessioni di terminal server, non relativo ai processi.</span><span class="sxs-lookup"><span data-stu-id="ff95d-149">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  
  
[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]

  
## Examples  
 <span data-ttu-id="ff95d-150">Questo esempio viene illustrato come una variabile locale <xref:System.Threading.Mutex> oggetto viene usato per sincronizzare l'accesso a una risorsa protetta.</span><span class="sxs-lookup"><span data-stu-id="ff95d-150">This example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="ff95d-151">Poiché ogni thread chiamante è bloccato fino a quando non viene acquisita la proprietà del mutex, è necessario chiamare il <xref:System.Threading.Mutex.ReleaseMutex%2A> metodo per rilasciare la proprietà del thread.</span><span class="sxs-lookup"><span data-stu-id="ff95d-151">Because each calling thread is blocked until it acquires ownership of the mutex, it must call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method to release ownership of the thread.</span></span>  
  
 [!code-csharp[System.Threading.Mutex.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.mutex.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Mutex.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.mutex.class/vb/example1.vb#1)]  
  
 <span data-ttu-id="ff95d-152">Nell'esempio seguente, ogni thread chiama il <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%29> metodo per acquisire il mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-152">In the following example, each thread calls the <xref:System.Threading.WaitHandle.WaitOne%28System.Int32%29> method to acquire the mutex.</span></span> <span data-ttu-id="ff95d-153">Se l'intervallo di timeout scade, il metodo restituisce `false`, e il thread non acquisisce il mutex né riesce ad accedere alla risorsa protegge il mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-153">If the time-out interval elapses, the method returns `false`, and the thread neither acquires the mutex nor gains access to the resource the mutex protects.</span></span> <span data-ttu-id="ff95d-154">Il <xref:System.Threading.Mutex.ReleaseMutex%2A> viene chiamato solo dal thread che acquisisce il mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-154">The <xref:System.Threading.Mutex.ReleaseMutex%2A> method is called only by the thread that acquires the mutex.</span></span>  
  
 [!code-csharp[System.Threading.Mutex.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.mutex.class/cs/example2.cs#2)]
 [!code-vb[System.Threading.Mutex.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.mutex.class/vb/example2.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="ff95d-155">Questo tipo è thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ff95d-155">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <altmember cref="T:System.Threading.Thread" />
    <related type="Article" href="~/docs/standard/threading/index.md">
      <span data-ttu-id="ff95d-156">Threading gestito</span>
      <span class="sxs-lookup">
        <span data-stu-id="ff95d-156">Managed Threading</span>
      </span>
    </related>
    <related type="Article" href="~/docs/standard/threading/mutexes.md">
      <span data-ttu-id="ff95d-157">Mutex</span>
      <span class="sxs-lookup">
        <span data-stu-id="ff95d-157">Mutexes</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ff95d-158">Inizializza una nuova istanza della classe <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-158">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ff95d-159">Inizializza una nuova istanza della classe <see cref="T:System.Threading.Mutex" /> con le proprietà predefinite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-159">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with default properties.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff95d-160">Chiamare questo overload del costruttore viene chiamata la <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> overload del costruttore e specificando `false` per la proprietà iniziale del mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-160">Calling this constructor overload is the same as calling the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor overload and specifying `false` for initial ownership of the mutex.</span></span> <span data-ttu-id="ff95d-161">Vale a dire, il thread chiamante non dispone del mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-161">That is, the calling thread does not own the mutex.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff95d-162">Nell'esempio di codice riportato di seguito viene illustrato come una variabile locale <xref:System.Threading.Mutex> oggetto viene usato per sincronizzare l'accesso a una risorsa protetta.</span><span class="sxs-lookup"><span data-stu-id="ff95d-162">The following code example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="ff95d-163">Il thread che crea il mutex non proprietari inizialmente.</span><span class="sxs-lookup"><span data-stu-id="ff95d-163">The thread that creates the mutex does not own it initially.</span></span>  
  
 [!code-cpp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="ff95d-164">Threading gestito</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-164">Managed Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/mutexes.md">
          <span data-ttu-id="ff95d-165">Mutex</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-165">Mutexes</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initiallyOwned As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned);" />
      <MemberSignature Language="F#" Value="new System.Threading.Mutex : bool -&gt; System.Threading.Mutex" Usage="new System.Threading.Mutex initiallyOwned" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned">
          <span data-ttu-id="ff95d-166">Viene restituito <see langword="true" /> per concedere al thread chiamante la proprietà iniziale del mutex; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-166">
              <see langword="true" /> to give the calling thread initial ownership of the mutex; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff95d-167">Inizializza una nuova istanza della classe <see cref="T:System.Threading.Mutex" /> con un valore booleano che indica se il thread chiamante deve avere la proprietà iniziale del mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-167">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ff95d-168">Nell'esempio di codice riportato di seguito viene illustrato come una variabile locale <xref:System.Threading.Mutex> oggetto viene usato per sincronizzare l'accesso a una risorsa protetta.</span><span class="sxs-lookup"><span data-stu-id="ff95d-168">The following code example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="ff95d-169">Il thread che crea il <xref:System.Threading.Mutex> inizialmente lo possiede.</span><span class="sxs-lookup"><span data-stu-id="ff95d-169">The thread that creates the <xref:System.Threading.Mutex> owns it initially.</span></span>  
  
 [!code-cpp[System.Threading.Mutex 1Arg Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex 1Arg Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex 1Arg Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex 1Arg Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex 1Arg Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex 1Arg Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="ff95d-170">Threading gestito</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-170">Managed Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/mutexes.md">
          <span data-ttu-id="ff95d-171">Mutex</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-171">Mutexes</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initiallyOwned As Boolean, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Threading.Mutex : bool * string -&gt; System.Threading.Mutex" Usage="new System.Threading.Mutex (initiallyOwned, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned">
          <span data-ttu-id="ff95d-172">
            <see langword="true" /> per concedere al thread chiamante la proprietà iniziale del mutex di sistema denominato, se questo è stato creato come risultato della chiamata; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-172">
              <see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="ff95d-173">Nome di <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-173">The name of the <see cref="T:System.Threading.Mutex" />.</span>
          </span>
          <span data-ttu-id="ff95d-174">Se il valore è <see langword="null" />, l'oggetto <see cref="T:System.Threading.Mutex" /> è senza nome.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-174">If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff95d-175">Inizializza una nuova istanza della classe <see cref="T:System.Threading.Mutex" /> con un valore booleano che indica se il thread chiamante deve avere la proprietà iniziale del mutex e con una stringa che rappresenta il nome del mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-175">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, and a string that is the name of the mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff95d-176">Se `name` non è `null` e `initiallyOwned` è `true`, il thread chiamante è proprietario del mutex solo se in seguito a questa chiamata è stato creato il mutex di sistema denominato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-176">If `name` is not `null` and `initiallyOwned` is `true`, the calling thread owns the mutex only if the named system mutex was created as a result of this call.</span></span> <span data-ttu-id="ff95d-177">Poiché non esiste alcun meccanismo per determinare se è stato creato il mutex di sistema denominato, è preferibile specificare `false` per `initiallyOwned` quando si chiamano questo overload del costruttore.</span><span class="sxs-lookup"><span data-stu-id="ff95d-177">Since there is no mechanism for determining whether the named system mutex was created, it is better to specify `false` for `initiallyOwned` when calling this constructor overload.</span></span> <span data-ttu-id="ff95d-178">È possibile usare il <xref:System.Threading.Mutex.%23ctor%28System.Boolean%2CSystem.String%2CSystem.Boolean%40%29> costruttore se è necessario determinare la proprietà iniziale.</span><span class="sxs-lookup"><span data-stu-id="ff95d-178">You can use the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%2CSystem.String%2CSystem.Boolean%40%29> constructor if you need to determine initial ownership.</span></span>  
  
 <span data-ttu-id="ff95d-179">Questo costruttore inizializza un <xref:System.Threading.Mutex> oggetto che rappresenta un mutex di sistema denominato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-179">This constructor initializes a <xref:System.Threading.Mutex> object that represents a named system mutex.</span></span> <span data-ttu-id="ff95d-180">È possibile creare più <xref:System.Threading.Mutex> gli oggetti che rappresentano lo stesso mutex di sistema denominato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-180">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="ff95d-181">Se il mutex denominato è già stato creato con controllo degli accessi e il chiamante non ha <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>, viene generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="ff95d-181">If the named mutex has already been created with access control security, and the caller does not have <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>, an exception is thrown.</span></span> <span data-ttu-id="ff95d-182">Per aprire un mutex denominato esistente quando si dispone solo delle autorizzazioni necessarie per la sincronizzazione delle attività di thread, vedere il <xref:System.Threading.Mutex.OpenExisting%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="ff95d-182">To open an existing named mutex with only those permissions needed for synchronizing thread activities, see the <xref:System.Threading.Mutex.OpenExisting%2A> method.</span></span>  
  
 <span data-ttu-id="ff95d-183">Se si specifica `null` o una stringa vuota per `name`, viene creato un mutex locale, come se fosse stato chiamato il <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> costruttore.</span><span class="sxs-lookup"><span data-stu-id="ff95d-183">If you specify `null` or an empty string for `name`, a local mutex is created, as if you had called the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="ff95d-184">In questo caso `createdNew` è sempre `true`.</span><span class="sxs-lookup"><span data-stu-id="ff95d-184">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="ff95d-185">Poiché sono a livello di sistema, i mutex denominati è utilizzabile per coordinare l'utilizzo delle risorse attraverso i limiti dei processi.</span><span class="sxs-lookup"><span data-stu-id="ff95d-185">Because they are system-wide, named mutexes can be used to coordinate resource use across process boundaries.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ff95d-186">In un server che esegue Servizi Terminal, un mutex di sistema denominato può avere due livelli di visibilità.</span><span class="sxs-lookup"><span data-stu-id="ff95d-186">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="ff95d-187">Se il nome inizia con il prefisso "Global\\", il mutex è visibile in tutte le sessioni di terminal server.</span><span class="sxs-lookup"><span data-stu-id="ff95d-187">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="ff95d-188">Se il nome inizia con il prefisso "locale\\", il mutex è visibile solo nella sessione di terminal server in cui è stato creato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-188">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="ff95d-189">In tal caso, un mutex separato con lo stesso nome può esistere in ognuna delle altre sessioni di terminal server nel server.</span><span class="sxs-lookup"><span data-stu-id="ff95d-189">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="ff95d-190">Se non si specifica un prefisso quando si crea un mutex denominato, accetta il prefisso "locale\\".</span><span class="sxs-lookup"><span data-stu-id="ff95d-190">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="ff95d-191">All'interno di una sessione di terminal server, i due mutex i cui nomi differiscono solo per i relativi prefissi vengono separati i mutex ed entrambi sono visibili a tutti i processi nella sessione di terminal server.</span><span class="sxs-lookup"><span data-stu-id="ff95d-191">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="ff95d-192">Vale a dire, i nomi di prefisso "Global\\" e "locale\\" viene descritto l'ambito del nome del mutex relativo sessioni di terminal server, non relativo ai processi.</span><span class="sxs-lookup"><span data-stu-id="ff95d-192">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  
  
[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]

## Examples  
 <span data-ttu-id="ff95d-193">Nell'esempio seguente viene illustrato come usare un mutex denominato per segnalare tra i thread in esecuzione in due processi distinti.</span><span class="sxs-lookup"><span data-stu-id="ff95d-193">The following example shows how a named mutex is used to signal between threads running in two separate processes.</span></span>  
  
 <span data-ttu-id="ff95d-194">Eseguire il programma da due o più finestre di comando.</span><span class="sxs-lookup"><span data-stu-id="ff95d-194">Run this program from two or more command windows.</span></span> <span data-ttu-id="ff95d-195">Ogni processo crea una <xref:System.Threading.Mutex> oggetto che rappresenta il mutex denominato `MyMutex`.</span><span class="sxs-lookup"><span data-stu-id="ff95d-195">Each process creates a <xref:System.Threading.Mutex> object that represents the named mutex `MyMutex`.</span></span> <span data-ttu-id="ff95d-196">Il mutex denominato è un oggetto di sistema la cui durata è dipende dalla durata del <xref:System.Threading.Mutex> gli oggetti che lo rappresentano.</span><span class="sxs-lookup"><span data-stu-id="ff95d-196">The named mutex is a system object whose lifetime is bounded by the lifetimes of the <xref:System.Threading.Mutex> objects that represent it.</span></span> <span data-ttu-id="ff95d-197">Il mutex denominato viene creato quando si crea il primo processo relativo <xref:System.Threading.Mutex> dell'oggetto; in questo esempio, il mutex denominato è di proprietà dal processo prima che l'esecuzione del programma.</span><span class="sxs-lookup"><span data-stu-id="ff95d-197">The named mutex is created when the first process creates its <xref:System.Threading.Mutex> object; in this example, the named mutex is owned by the first process that runs the program.</span></span> <span data-ttu-id="ff95d-198">Il mutex denominato viene eliminato definitivamente quando tutti i <xref:System.Threading.Mutex> sono stati rilasciati gli oggetti che rappresentano lo.</span><span class="sxs-lookup"><span data-stu-id="ff95d-198">The named mutex is destroyed when all the <xref:System.Threading.Mutex> objects that represent it have been released.</span></span>  
  
 <span data-ttu-id="ff95d-199">L'overload del costruttore usato in questo esempio non è possibile indicare il thread chiamante se è stata concessa la proprietà iniziale del mutex denominato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-199">The constructor overload used in this example cannot tell the calling thread whether initial ownership of the named mutex was granted.</span></span> <span data-ttu-id="ff95d-200">È consigliabile non utilizzare questo costruttore per richiedere la proprietà iniziale a meno che non si avrà la certezza che il thread verrà creato il mutex denominato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-200">You should not use this constructor to request initial ownership unless you can be certain that the thread will create the named mutex.</span></span>  
  
 [!code-cpp[System.Threading.Mutex 2Arg Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex 2Arg Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex 2Arg Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex 2Arg Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex 2Arg Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex 2Arg Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="ff95d-201">Il mutex denominato esiste e ha accesso alla sicurezza controllo, ma l'utente non dispone di <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-201">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="ff95d-202">Errore Win32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-202">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="ff95d-203">Il mutex denominato non può essere creato, forse perché un handle di attesa di un tipo diverso ha lo stesso nome.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-203">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff95d-204">La lunghezza di <paramref name="name" /> supera i 260 caratteri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-204">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ff95d-205">richiede l'attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-205">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ff95d-206">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-206">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="ff95d-207">Threading gestito</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-207">Managed Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/mutexes.md">
          <span data-ttu-id="ff95d-208">Mutex</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-208">Mutexes</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned, string name, out bool createdNew);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned, string name, [out] bool&amp; createdNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initiallyOwned As Boolean, name As String, ByRef createdNew As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew);" />
      <MemberSignature Language="F#" Value="new System.Threading.Mutex : bool * string *  -&gt; System.Threading.Mutex" Usage="new System.Threading.Mutex (initiallyOwned, name, createdNew)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned">
          <span data-ttu-id="ff95d-209">
            <see langword="true" /> per concedere al thread chiamante la proprietà iniziale del mutex di sistema denominato, se questo è stato creato come risultato della chiamata; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-209">
              <see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="ff95d-210">Nome di <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-210">The name of the <see cref="T:System.Threading.Mutex" />.</span>
          </span>
          <span data-ttu-id="ff95d-211">Se il valore è <see langword="null" />, l'oggetto <see cref="T:System.Threading.Mutex" /> è senza nome.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-211">If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</span>
          </span>
        </param>
        <param name="createdNew">
          <span data-ttu-id="ff95d-212">Quando questo metodo viene restituito, contiene un valore booleano che è <see langword="true" /> se è stato creato un mutex locale (ovvero, se il valore di <c>name</c> è <see langword="null" /> o una stringa vuota) oppure se è stato creato il mutex di sistema denominato specificato. <see langword="false" /> se il mutex di sistema denominato specificato è già esistente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-212">When this method returns, contains a Boolean that is <see langword="true" /> if a local mutex was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system mutex was created; <see langword="false" /> if the specified named system mutex already existed.</span>
          </span>
          <span data-ttu-id="ff95d-213">Questo parametro viene passato non inizializzato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-213">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff95d-214">Inizializza una nuova istanza della classe <see cref="T:System.Threading.Mutex" /> con un valore booleano che indica se il thread chiamante deve avere la proprietà iniziale del mutex, con una stringa che rappresenta il nome del mutex e con un valore booleano che, quando il metodo viene restituito, indichi se al thread chiamante era stata concessa la proprietà iniziale del mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-214">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, and a Boolean value that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff95d-215">Se `name` non è `null` e `initiallyOwned` viene `true`, il thread chiamante proprietario solo se il mutex denominato `createdNew` è `true` dopo la chiamata.</span><span class="sxs-lookup"><span data-stu-id="ff95d-215">If `name` is not `null` and `initiallyOwned` is `true`, the calling thread owns the named mutex only if `createdNew` is `true` after the call.</span></span> <span data-ttu-id="ff95d-216">In caso contrario, il thread può richiedere il mutex chiamando il <xref:System.Threading.WaitHandle.WaitOne%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="ff95d-216">Otherwise the thread can request the mutex by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="ff95d-217">Questo costruttore inizializza un <xref:System.Threading.Mutex> oggetto che rappresenta un mutex di sistema denominato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-217">This constructor initializes a <xref:System.Threading.Mutex> object that represents a named system mutex.</span></span> <span data-ttu-id="ff95d-218">È possibile creare più <xref:System.Threading.Mutex> gli oggetti che rappresentano lo stesso mutex di sistema denominato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-218">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="ff95d-219">Se il mutex denominato è già stato creato con controllo degli accessi e il chiamante non ha <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType> diritti, viene generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="ff95d-219">If the named mutex has already been created with access control security, and the caller does not have <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType> rights, an exception is thrown.</span></span> <span data-ttu-id="ff95d-220">Per aprire un mutex denominato esistente quando si dispone solo delle autorizzazioni necessarie per la sincronizzazione delle attività di thread, vedere il <xref:System.Threading.Mutex.OpenExisting%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="ff95d-220">To open an existing named mutex with only those permissions needed for synchronizing thread activities, see the <xref:System.Threading.Mutex.OpenExisting%2A> method.</span></span>  
  
 <span data-ttu-id="ff95d-221">Se si specifica `null` o una stringa vuota per `name`, viene creato un mutex locale, come se fosse stato chiamato il <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> costruttore.</span><span class="sxs-lookup"><span data-stu-id="ff95d-221">If you specify `null` or an empty string for `name`, a local mutex is created, as if you had called the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="ff95d-222">In questo caso `createdNew` è sempre `true`.</span><span class="sxs-lookup"><span data-stu-id="ff95d-222">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="ff95d-223">Poiché sono a livello di sistema, i mutex denominati è utilizzabile per coordinare l'utilizzo delle risorse attraverso i limiti dei processi.</span><span class="sxs-lookup"><span data-stu-id="ff95d-223">Because they are system-wide, named mutexes can be used to coordinate resource use across process boundaries.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ff95d-224">In un server che esegue Servizi Terminal, un mutex di sistema denominato può avere due livelli di visibilità.</span><span class="sxs-lookup"><span data-stu-id="ff95d-224">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="ff95d-225">Se il nome inizia con il prefisso "Global\\", il mutex è visibile in tutte le sessioni di terminal server.</span><span class="sxs-lookup"><span data-stu-id="ff95d-225">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="ff95d-226">Se il nome inizia con il prefisso "locale\\", il mutex è visibile solo nella sessione di terminal server in cui è stato creato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-226">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="ff95d-227">In tal caso, un mutex separato con lo stesso nome può esistere in ognuna delle altre sessioni di terminal server nel server.</span><span class="sxs-lookup"><span data-stu-id="ff95d-227">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="ff95d-228">Se non si specifica un prefisso quando si crea un mutex denominato, accetta il prefisso "locale\\".</span><span class="sxs-lookup"><span data-stu-id="ff95d-228">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="ff95d-229">All'interno di una sessione di terminal server, i due mutex i cui nomi differiscono solo per i relativi prefissi vengono separati i mutex ed entrambi sono visibili a tutti i processi nella sessione di terminal server.</span><span class="sxs-lookup"><span data-stu-id="ff95d-229">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="ff95d-230">Vale a dire, i nomi di prefisso "Global\\" e "locale\\" viene descritto l'ambito del nome del mutex relativo sessioni di terminal server, non relativo ai processi.</span><span class="sxs-lookup"><span data-stu-id="ff95d-230">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  

[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]   
  
## Examples  
 <span data-ttu-id="ff95d-231">Esempio di codice seguente illustra come usare un mutex denominato per segnalare tra processi o thread.</span><span class="sxs-lookup"><span data-stu-id="ff95d-231">The following code example shows how a named mutex is used to signal between processes or threads.</span></span> <span data-ttu-id="ff95d-232">Eseguire il programma da due o più finestre di comando.</span><span class="sxs-lookup"><span data-stu-id="ff95d-232">Run this program from two or more command windows.</span></span> <span data-ttu-id="ff95d-233">Ogni processo crea un <xref:System.Threading.Mutex> oggetto che rappresenta il mutex denominato "MyMutex".</span><span class="sxs-lookup"><span data-stu-id="ff95d-233">Each process creates a <xref:System.Threading.Mutex> object that represents the named mutex "MyMutex".</span></span> <span data-ttu-id="ff95d-234">Il mutex denominato è un oggetto di sistema.</span><span class="sxs-lookup"><span data-stu-id="ff95d-234">The named mutex is a system object.</span></span> <span data-ttu-id="ff95d-235">In questo esempio, la sua durata è dipende dalla durata del <xref:System.Threading.Mutex> gli oggetti che lo rappresentano.</span><span class="sxs-lookup"><span data-stu-id="ff95d-235">In this example, its lifetime is bounded by the lifetimes of the <xref:System.Threading.Mutex> objects that represent it.</span></span> <span data-ttu-id="ff95d-236">Il mutex denominato viene creato durante il primo processo di creazione propria locale <xref:System.Threading.Mutex> dell'oggetto ed eliminati quando tutti i i <xref:System.Threading.Mutex> gli oggetti che rappresentano lo sono stati rilasciati.</span><span class="sxs-lookup"><span data-stu-id="ff95d-236">The named mutex is created when the first process creates its local <xref:System.Threading.Mutex> object, and destroyed when all the <xref:System.Threading.Mutex> objects that represent it have been released.</span></span> <span data-ttu-id="ff95d-237">Il primo processo inizialmente appartiene il mutex denominato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-237">The named mutex is initially owned by the first process.</span></span> <span data-ttu-id="ff95d-238">Il secondo processo e tutti i processi successivi attendono i processi precedenti rilasciare il mutex denominato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-238">The second process and any subsequent processes wait for earlier processes to release the named mutex.</span></span>  
  
 [!code-cpp[System.Threading.Mutex 3Arg Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex 3Arg Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex 3Arg Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex 3Arg Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex 3Arg Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex 3Arg Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="ff95d-239">Il mutex denominato esiste e ha accesso alla sicurezza controllo, ma l'utente non dispone di <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-239">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="ff95d-240">Errore Win32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-240">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="ff95d-241">Il mutex denominato non può essere creato, forse perché un handle di attesa di un tipo diverso ha lo stesso nome.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-241">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff95d-242">La lunghezza di <paramref name="name" /> supera i 260 caratteri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-242">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ff95d-243">richiede l'attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-243">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ff95d-244">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-244">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="ff95d-245">Threading gestito</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-245">Managed Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/mutexes.md">
          <span data-ttu-id="ff95d-246">Mutex</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-246">Mutexes</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Mutex (bool initiallyOwned, string name, out bool createdNew, System.Security.AccessControl.MutexSecurity mutexSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initiallyOwned, string name, [out] bool&amp; createdNew, class System.Security.AccessControl.MutexSecurity mutexSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@,System.Security.AccessControl.MutexSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Mutex(bool initiallyOwned, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew, System::Security::AccessControl::MutexSecurity ^ mutexSecurity);" />
      <MemberSignature Language="F#" Value="new System.Threading.Mutex : bool * string *  * System.Security.AccessControl.MutexSecurity -&gt; System.Threading.Mutex" Usage="new System.Threading.Mutex (initiallyOwned, name, createdNew, mutexSecurity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initiallyOwned" Type="System.Boolean" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean" RefType="out" />
        <Parameter Name="mutexSecurity" Type="System.Security.AccessControl.MutexSecurity" />
      </Parameters>
      <Docs>
        <param name="initiallyOwned">
          <span data-ttu-id="ff95d-247">
            <see langword="true" /> per concedere al thread chiamante la proprietà iniziale del mutex di sistema denominato, se questo è stato creato come risultato della chiamata; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-247">
              <see langword="true" /> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="ff95d-248">Nome del mutex di sistema.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-248">The name of the system mutex.</span>
          </span>
          <span data-ttu-id="ff95d-249">Se il valore è <see langword="null" />, l'oggetto <see cref="T:System.Threading.Mutex" /> è senza nome.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-249">If the value is <see langword="null" />, the <see cref="T:System.Threading.Mutex" /> is unnamed.</span>
          </span>
        </param>
        <param name="createdNew">
          <span data-ttu-id="ff95d-250">Quando questo metodo viene restituito, contiene un valore booleano che è <see langword="true" /> se è stato creato un mutex locale (ovvero, se il valore di <c>name</c> è <see langword="null" /> o una stringa vuota) oppure se è stato creato il mutex di sistema denominato specificato. <see langword="false" /> se il mutex di sistema denominato specificato è già esistente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-250">When this method returns, contains a Boolean that is <see langword="true" /> if a local mutex was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system mutex was created; <see langword="false" /> if the specified named system mutex already existed.</span>
          </span>
          <span data-ttu-id="ff95d-251">Questo parametro viene passato non inizializzato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-251">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <param name="mutexSecurity">
          <span data-ttu-id="ff95d-252">Oggetto <see cref="T:System.Security.AccessControl.MutexSecurity" /> che rappresenta la sicurezza del controllo di accesso da applicare al mutex di sistema denominato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-252">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security to be applied to the named system mutex.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff95d-253">Inizializza una nuova istanza della classe <see cref="T:System.Threading.Mutex" /> con un valore booleano che indica se il thread chiamante deve avere la proprietà iniziale del mutex, con una stringa che rappresenta il nome del mutex, con una variabile Boolean che, quando il metodo viene restituito, indichi se al thread chiamante era stata concessa la proprietà iniziale del mutex e con la sicurezza del controllo di accesso da applicare al mutex denominato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-253">Initializes a new instance of the <see cref="T:System.Threading.Mutex" /> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, a Boolean variable that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex, and the access control security to be applied to the named mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff95d-254">Se `name` non è `null` e `initiallyOwned` viene `true`, il thread chiamante proprietario solo se il mutex denominato `createdNew` è `true` dopo la chiamata.</span><span class="sxs-lookup"><span data-stu-id="ff95d-254">If `name` is not `null` and `initiallyOwned` is `true`, the calling thread owns the named mutex only if `createdNew` is `true` after the call.</span></span> <span data-ttu-id="ff95d-255">In caso contrario, il thread può richiedere il mutex chiamando il <xref:System.Threading.WaitHandle.WaitOne%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="ff95d-255">Otherwise the thread can request the mutex by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="ff95d-256">Utilizzare questo costruttore per applicare la sicurezza del controllo di accesso a un mutex di sistema denominato al momento della creazione, impedendo ad altro codice di assumere il controllo del tipo mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-256">Use this constructor to apply access control security to a named system mutex when it is created, preventing other code from taking control of the mutex.</span></span>  
  
 <span data-ttu-id="ff95d-257">Questo costruttore inizializza un <xref:System.Threading.Mutex> oggetto che rappresenta un mutex di sistema denominato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-257">This constructor initializes a <xref:System.Threading.Mutex> object that represents a named system mutex.</span></span> <span data-ttu-id="ff95d-258">È possibile creare più <xref:System.Threading.Mutex> gli oggetti che rappresentano lo stesso mutex di sistema denominato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-258">You can create multiple <xref:System.Threading.Mutex> objects that represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="ff95d-259">Se il mutex di sistema denominato non esiste, viene creato con la sicurezza del controllo di accesso specificato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-259">If the named system mutex does not exist, it is created with the specified access control security.</span></span> <span data-ttu-id="ff95d-260">Se il mutex denominato esiste, la sicurezza del controllo di accesso specificato viene ignorata.</span><span class="sxs-lookup"><span data-stu-id="ff95d-260">If the named mutex exists, the specified access control security is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ff95d-261">Il chiamante dispone di controllo completo sull'oggetto appena creato <xref:System.Threading.Mutex> oggetto anche se `mutexSecurity` nega o non riesce a concedere alcuni diritti di accesso per l'utente corrente.</span><span class="sxs-lookup"><span data-stu-id="ff95d-261">The caller has full control over the newly created <xref:System.Threading.Mutex> object even if `mutexSecurity` denies or fails to grant some access rights to the current user.</span></span> <span data-ttu-id="ff95d-262">Tuttavia, se l'utente corrente tenta di ottenere un'altra <xref:System.Threading.Mutex> per rappresentare lo stesso mutex denominato, usando un costruttore dell'oggetto o il <xref:System.Threading.Mutex.OpenExisting%2A> metodo, viene applicata la sicurezza del controllo di accesso di Windows.</span><span class="sxs-lookup"><span data-stu-id="ff95d-262">However, if the current user attempts to get another <xref:System.Threading.Mutex> object to represent the same named mutex, using either a constructor or the <xref:System.Threading.Mutex.OpenExisting%2A> method, Windows access control security is applied.</span></span>  
  
 <span data-ttu-id="ff95d-263">Se il mutex denominato è già stato creato con controllo degli accessi e il chiamante non ha <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>, viene generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="ff95d-263">If the named mutex has already been created with access control security, and the caller does not have <xref:System.Security.AccessControl.MutexRights.FullControl?displayProperty=nameWithType>, an exception is thrown.</span></span> <span data-ttu-id="ff95d-264">Per aprire un mutex denominato esistente quando si dispone solo delle autorizzazioni necessarie per la sincronizzazione delle attività di thread, vedere il <xref:System.Threading.Mutex.OpenExisting%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="ff95d-264">To open an existing named mutex with only those permissions needed for synchronizing thread activities, see the <xref:System.Threading.Mutex.OpenExisting%2A> method.</span></span>  
  
 <span data-ttu-id="ff95d-265">Se si specifica `null` o una stringa vuota per `name`, viene creato un mutex locale, come se fosse stato chiamato il <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> costruttore.</span><span class="sxs-lookup"><span data-stu-id="ff95d-265">If you specify `null` or an empty string for `name`, a local mutex is created, as if you had called the <xref:System.Threading.Mutex.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="ff95d-266">In questo caso `createdNew` è sempre `true`.</span><span class="sxs-lookup"><span data-stu-id="ff95d-266">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="ff95d-267">Poiché sono a livello di sistema, i mutex denominati è utilizzabile per coordinare l'utilizzo delle risorse attraverso i limiti dei processi.</span><span class="sxs-lookup"><span data-stu-id="ff95d-267">Because they are system-wide, named mutexes can be used to coordinate resource use across process boundaries.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ff95d-268">In un server che esegue Servizi Terminal, un mutex di sistema denominato può avere due livelli di visibilità.</span><span class="sxs-lookup"><span data-stu-id="ff95d-268">On a server that is running Terminal Services, a named system mutex can have two levels of visibility.</span></span> <span data-ttu-id="ff95d-269">Se il nome inizia con il prefisso "Global\\", il mutex è visibile in tutte le sessioni di terminal server.</span><span class="sxs-lookup"><span data-stu-id="ff95d-269">If its name begins with the prefix "Global\\", the mutex is visible in all terminal server sessions.</span></span> <span data-ttu-id="ff95d-270">Se il nome inizia con il prefisso "locale\\", il mutex è visibile solo nella sessione di terminal server in cui è stato creato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-270">If its name begins with the prefix "Local\\", the mutex is visible only in the terminal server session where it was created.</span></span> <span data-ttu-id="ff95d-271">In tal caso, un mutex separato con lo stesso nome può esistere in ognuna delle altre sessioni di terminal server nel server.</span><span class="sxs-lookup"><span data-stu-id="ff95d-271">In that case, a separate mutex with the same name can exist in each of the other terminal server sessions on the server.</span></span> <span data-ttu-id="ff95d-272">Se non si specifica un prefisso quando si crea un mutex denominato, accetta il prefisso "locale\\".</span><span class="sxs-lookup"><span data-stu-id="ff95d-272">If you do not specify a prefix when you create a named mutex, it takes the prefix "Local\\".</span></span> <span data-ttu-id="ff95d-273">All'interno di una sessione di terminal server, i due mutex i cui nomi differiscono solo per i relativi prefissi vengono separati i mutex ed entrambi sono visibili a tutti i processi nella sessione di terminal server.</span><span class="sxs-lookup"><span data-stu-id="ff95d-273">Within a terminal server session, two mutexes whose names differ only by their prefixes are separate mutexes, and both are visible to all processes in the terminal server session.</span></span> <span data-ttu-id="ff95d-274">Vale a dire, i nomi di prefisso "Global\\" e "locale\\" viene descritto l'ambito del nome del mutex relativo sessioni di terminal server, non relativo ai processi.</span><span class="sxs-lookup"><span data-stu-id="ff95d-274">That is, the prefix names "Global\\" and "Local\\" describe the scope of the mutex name relative to terminal server sessions, not relative to processes.</span></span>  

[!INCLUDE[backslash-mutex-note](~/includes/backslash-mutex.md)]  
   
  
## Examples  
 <span data-ttu-id="ff95d-275">Esempio di codice seguente viene illustrato il comportamento tra processi di un mutex denominato con controllo degli accessi.</span><span class="sxs-lookup"><span data-stu-id="ff95d-275">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="ff95d-276">Nell'esempio viene usato il <xref:System.Threading.Mutex.OpenExisting%28System.String%29> overload del metodo per verificare l'esistenza di un mutex denominato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-276">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="ff95d-277">Se il mutex non esiste, viene creato con la proprietà iniziale e la sicurezza del controllo di accesso che nega l'utente corrente il diritto di utilizzare il mutex, ma concede il diritto di leggere e modificare le autorizzazioni per il mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-277">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="ff95d-278">Se si esegue l'esempio compilato in due finestre di comando, la seconda copia genererà un'eccezione di violazione di accesso alla chiamata a <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span><span class="sxs-lookup"><span data-stu-id="ff95d-278">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="ff95d-279">Viene rilevata l'eccezione e l'esempio Usa il <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> overload del metodo per aprire il mutex con i diritti necessari per leggere e modificare le autorizzazioni.</span><span class="sxs-lookup"><span data-stu-id="ff95d-279">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="ff95d-280">Dopo la modifica delle autorizzazioni, il mutex viene aperto con i diritti necessari per immettere e rilasciarlo.</span><span class="sxs-lookup"><span data-stu-id="ff95d-280">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="ff95d-281">Se si esegue l'esempio compilato da una terza finestra di comando, viene eseguito con le nuove autorizzazioni.</span><span class="sxs-lookup"><span data-stu-id="ff95d-281">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="ff95d-282">Errore Win32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-282">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="ff95d-283">Il mutex denominato esiste e ha accesso alla sicurezza controllo, ma l'utente non dispone di <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-283">The named mutex exists and has access control security, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="ff95d-284">Il mutex denominato non può essere creato, forse perché un handle di attesa di un tipo diverso ha lo stesso nome.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-284">The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff95d-285">La lunghezza di <paramref name="name" /> supera i 260 caratteri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-285">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ff95d-286">richiede l'attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-286">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ff95d-287">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-287">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.MutexSecurity GetAccessControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.AccessControl.MutexSecurity GetAccessControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.GetAccessControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessControl () As MutexSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::AccessControl::MutexSecurity ^ GetAccessControl();" />
      <MemberSignature Language="F#" Value="member this.GetAccessControl : unit -&gt; System.Security.AccessControl.MutexSecurity" Usage="mutex.GetAccessControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.MutexSecurity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ff95d-288">Ottiene un oggetto <see cref="T:System.Security.AccessControl.MutexSecurity" /> che rappresenta la sicurezza del controllo di accesso per il mutex denominato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-288">Gets a <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security for the named mutex.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff95d-289">Oggetto <see cref="T:System.Security.AccessControl.MutexSecurity" /> che rappresenta la sicurezza del controllo di accesso per il mutex denominato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-289">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security for the named mutex.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff95d-290">Il <xref:System.Threading.Mutex.GetAccessControl%2A> metodo utilizza la seguente combinazione di flag (combinati mediante un'operazione OR bit per bit) per cercare le autorizzazioni: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, e <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="ff95d-290">The <xref:System.Threading.Mutex.GetAccessControl%2A> method uses the following combination of flags (combined using the bitwise OR operation) to search for permissions: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, and <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="ff95d-291">L'utente deve disporre <xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType> per chiamare questo metodo e il mutex necessario sia stato aperto con <xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="ff95d-291">The user must have <xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType> to call this method, and the mutex must have been opened with <xref:System.Security.AccessControl.MutexRights.ReadPermissions?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff95d-292">Esempio di codice seguente viene illustrato il comportamento tra processi di un mutex denominato con controllo degli accessi.</span><span class="sxs-lookup"><span data-stu-id="ff95d-292">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="ff95d-293">Nell'esempio viene usato il <xref:System.Threading.Mutex.OpenExisting%28System.String%29> overload del metodo per verificare l'esistenza di un mutex denominato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-293">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="ff95d-294">Se il mutex non esiste, viene creato con la proprietà iniziale e la sicurezza del controllo di accesso che nega l'utente corrente il diritto di utilizzare il mutex, ma concede il diritto di leggere e modificare le autorizzazioni per il mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-294">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="ff95d-295">Se si esegue l'esempio compilato in due finestre di comando, la seconda copia genererà un'eccezione di violazione di accesso alla chiamata a <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span><span class="sxs-lookup"><span data-stu-id="ff95d-295">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="ff95d-296">Viene rilevata l'eccezione e l'esempio Usa la <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> overload del metodo per aprire il mutex con i diritti necessari per leggere e modificare le autorizzazioni, usando il <xref:System.Threading.Mutex.GetAccessControl%2A> e <xref:System.Threading.Mutex.SetAccessControl%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="ff95d-296">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions, using the <xref:System.Threading.Mutex.GetAccessControl%2A> and <xref:System.Threading.Mutex.SetAccessControl%2A> methods.</span></span>  
  
 <span data-ttu-id="ff95d-297">Dopo la modifica delle autorizzazioni, il mutex viene aperto con i diritti necessari per immettere e rilasciarlo.</span><span class="sxs-lookup"><span data-stu-id="ff95d-297">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="ff95d-298">Se si esegue l'esempio compilato da una terza finestra di comando, viene eseguito con le nuove autorizzazioni.</span><span class="sxs-lookup"><span data-stu-id="ff95d-298">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="ff95d-299">L'oggetto <see cref="T:System.Threading.Mutex" /> corrente rappresenta un mutex di sistema denominato, ma l'utente non dispone di <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-299">The current <see cref="T:System.Threading.Mutex" /> object represents a named system mutex, but the user does not have <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />.</span>
          </span>
          <span data-ttu-id="ff95d-300">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-300">-or-</span>
          </span>
          <span data-ttu-id="ff95d-301">L'oggetto <see cref="T:System.Threading.Mutex" /> corrente rappresenta un mutex di sistema denominato e non è stato aperto con <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-301">The current <see cref="T:System.Threading.Mutex" /> object represents a named system mutex, and was not opened with <see cref="F:System.Security.AccessControl.MutexRights.ReadPermissions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ff95d-302">Non supportato per Windows 98 o Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-302">Not supported for Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ff95d-303">Apre un mutex denominato specificato, se esistente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-303">Opens a specified named mutex, if it already exists.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Mutex OpenExisting (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Mutex OpenExisting(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.OpenExisting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String) As Mutex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Mutex ^ OpenExisting(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string -&gt; System.Threading.Mutex" Usage="System.Threading.Mutex.OpenExisting name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Mutex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ff95d-304">Nome del mutex di sistema da aprire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-304">The name of the system mutex to open.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff95d-305">Apre il mutex denominato specificato, se esistente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-305">Opens the specified named mutex, if it already exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff95d-306">Oggetto che rappresenta il mutex di sistema denominato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-306">An object that represents the named system mutex.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff95d-307">Il <xref:System.Threading.Mutex.OpenExisting%2A> metodo tenta di aprire l'oggetto specificato mutex di sistema denominato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-307">The <xref:System.Threading.Mutex.OpenExisting%2A> method tries to open the specified named system mutex.</span></span> <span data-ttu-id="ff95d-308">Se il mutex di sistema non esiste, questo metodo genera un'eccezione anziché creare l'oggetto di sistema.</span><span class="sxs-lookup"><span data-stu-id="ff95d-308">If the system mutex does not exist, this method throws an exception instead of creating the system object.</span></span> <span data-ttu-id="ff95d-309">Per creare il mutex di sistema quando non esiste già, usare uno dei <xref:System.Threading.Mutex.%23ctor%2A> costruttori che dispone di un `name` parametro.</span><span class="sxs-lookup"><span data-stu-id="ff95d-309">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="ff95d-310">Più chiamate al metodo che usano lo stesso valore per `name` non necessariamente restituiscono lo stesso <xref:System.Threading.Mutex> dell'oggetto, anche se gli oggetti restituiti rappresentano lo stesso mutex di sistema denominato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-310">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="ff95d-311">Questo overload del metodo è equivalente alla chiamata di <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> overload del metodo e specificando <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> e <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> diritti, combinati tramite l'operazione OR bit per bit.</span><span class="sxs-lookup"><span data-stu-id="ff95d-311">This method overload is equivalent to calling the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload and specifying <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span>  
  
 <span data-ttu-id="ff95d-312">Specificando il <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag consente a un thread in attesa di mutex e specificare il <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag consente a un thread chiamare il <xref:System.Threading.Mutex.ReleaseMutex%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="ff95d-312">Specifying the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag allows a thread to wait on the mutex, and specifying the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="ff95d-313">Questo metodo non viene richiesta la proprietà del mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-313">This method does not request ownership of the mutex.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff95d-314">Esempio di codice seguente viene illustrato il comportamento tra processi di un mutex denominato con controllo degli accessi.</span><span class="sxs-lookup"><span data-stu-id="ff95d-314">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="ff95d-315">Nell'esempio viene usato il <xref:System.Threading.Mutex.OpenExisting%28System.String%29> overload del metodo per verificare l'esistenza di un mutex denominato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-315">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="ff95d-316">Se il mutex non esiste, viene creato con la proprietà iniziale e la sicurezza del controllo di accesso che nega l'utente corrente il diritto di utilizzare il mutex, ma concede il diritto di leggere e modificare le autorizzazioni per il mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-316">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="ff95d-317">Se si esegue l'esempio compilato in due finestre di comando, la seconda copia genererà un'eccezione di violazione di accesso alla chiamata a <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span><span class="sxs-lookup"><span data-stu-id="ff95d-317">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="ff95d-318">Viene rilevata l'eccezione e l'esempio Usa il <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> overload del metodo per aprire il mutex con i diritti necessari per leggere e modificare le autorizzazioni.</span><span class="sxs-lookup"><span data-stu-id="ff95d-318">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="ff95d-319">Dopo la modifica delle autorizzazioni, il mutex viene aperto con i diritti necessari per immettere e rilasciarlo.</span><span class="sxs-lookup"><span data-stu-id="ff95d-319">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="ff95d-320">Se si esegue l'esempio compilato da una terza finestra di comando, viene eseguito con le nuove autorizzazioni.</span><span class="sxs-lookup"><span data-stu-id="ff95d-320">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff95d-321">Il parametro <paramref name="name" /> è una stringa vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-321">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="ff95d-322">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-322">-or-</span>
          </span>
          <span data-ttu-id="ff95d-323">La lunghezza di <paramref name="name" /> supera i 260 caratteri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-323">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff95d-324">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-324">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="ff95d-325">Il mutex denominato non esiste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-325">The named mutex does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="ff95d-326">Errore Win32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-326">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="ff95d-327">Il mutex denominato esiste, ma l'utente non dispone dell'accesso di sicurezza necessario per usarlo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-327">The named mutex exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ff95d-328">richiede l'attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-328">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ff95d-329">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-329">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Mutex OpenExisting (string name, System.Security.AccessControl.MutexRights rights);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Mutex OpenExisting(string name, valuetype System.Security.AccessControl.MutexRights rights) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.OpenExisting(System.String,System.Security.AccessControl.MutexRights)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String, rights As MutexRights) As Mutex" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Mutex ^ OpenExisting(System::String ^ name, System::Security::AccessControl::MutexRights rights);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string * System.Security.AccessControl.MutexRights -&gt; System.Threading.Mutex" Usage="System.Threading.Mutex.OpenExisting (name, rights)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Mutex</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.MutexRights" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ff95d-330">Nome del mutex di sistema da aprire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-330">The name of the system mutex to open.</span>
          </span>
        </param>
        <param name="rights">
          <span data-ttu-id="ff95d-331">Combinazione bit per bit dei valori di enumerazione che rappresentano l'accesso di sicurezza desiderato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-331">A bitwise combination of the enumeration values that represent the desired security access.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff95d-332">Apre il mutex denominato specificato, se esistente, con l'accesso di sicurezza desiderato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-332">Opens the specified named mutex, if it already exists, with the desired security access.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff95d-333">Oggetto che rappresenta il mutex di sistema denominato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-333">An object that represents the named system mutex.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff95d-334">Il `rights` parametro deve includere il <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag per consentire ai thread in attesa di mutex e il <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag per consentire ai thread chiamare il <xref:System.Threading.Mutex.ReleaseMutex%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="ff95d-334">The `rights` parameter must include the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag to allow threads to wait on the mutex, and the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="ff95d-335">Il <xref:System.Threading.Mutex.OpenExisting%2A> metodo tenta di aprire un mutex denominato esistente.</span><span class="sxs-lookup"><span data-stu-id="ff95d-335">The <xref:System.Threading.Mutex.OpenExisting%2A> method tries to open an existing named mutex.</span></span> <span data-ttu-id="ff95d-336">Se il mutex di sistema non esiste, questo metodo genera un'eccezione anziché creare l'oggetto di sistema.</span><span class="sxs-lookup"><span data-stu-id="ff95d-336">If the system mutex does not exist, this method throws an exception instead of creating the system object.</span></span> <span data-ttu-id="ff95d-337">Per creare il mutex di sistema quando non esiste già, usare uno dei <xref:System.Threading.Mutex.%23ctor%2A> costruttori che dispone di un `name` parametro.</span><span class="sxs-lookup"><span data-stu-id="ff95d-337">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="ff95d-338">Più chiamate al metodo che usano lo stesso valore per `name` non necessariamente restituiscono lo stesso <xref:System.Threading.Mutex> dell'oggetto, anche se gli oggetti restituiti rappresentano lo stesso mutex di sistema denominato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-338">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="ff95d-339">Questo metodo non viene richiesta la proprietà del mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-339">This method does not request ownership of the mutex.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff95d-340">Esempio di codice seguente viene illustrato il comportamento tra processi di un mutex denominato con controllo degli accessi.</span><span class="sxs-lookup"><span data-stu-id="ff95d-340">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="ff95d-341">Nell'esempio viene usato il <xref:System.Threading.Mutex.OpenExisting%28System.String%29> overload del metodo per verificare l'esistenza di un mutex denominato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-341">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="ff95d-342">Se il mutex non esiste, viene creato con la proprietà iniziale e la sicurezza del controllo di accesso che nega l'utente corrente il diritto di utilizzare il mutex, ma concede il diritto di leggere e modificare le autorizzazioni per il mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-342">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="ff95d-343">Se si esegue l'esempio compilato in due finestre di comando, la seconda copia genererà un'eccezione di violazione di accesso alla chiamata a <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span><span class="sxs-lookup"><span data-stu-id="ff95d-343">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="ff95d-344">Viene rilevata l'eccezione e l'esempio Usa il <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> overload del metodo per aprire il mutex con i diritti necessari per leggere e modificare le autorizzazioni.</span><span class="sxs-lookup"><span data-stu-id="ff95d-344">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="ff95d-345">Dopo la modifica delle autorizzazioni, il mutex viene aperto con i diritti necessari per immettere e rilasciarlo.</span><span class="sxs-lookup"><span data-stu-id="ff95d-345">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="ff95d-346">Se si esegue l'esempio compilato da una terza finestra di comando, viene eseguito con le nuove autorizzazioni.</span><span class="sxs-lookup"><span data-stu-id="ff95d-346">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff95d-347">Il parametro <paramref name="name" /> è una stringa vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-347">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="ff95d-348">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-348">-or-</span>
          </span>
          <span data-ttu-id="ff95d-349">La lunghezza di <paramref name="name" /> supera i 260 caratteri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-349">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff95d-350">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-350">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="ff95d-351">Il mutex denominato non esiste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-351">The named mutex does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="ff95d-352">Errore Win32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-352">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="ff95d-353">Il mutex denominato esiste, ma l'utente non dispone dell'accesso di sicurezza desiderato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-353">The named mutex exists, but the user does not have the desired security access.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ff95d-354">richiede l'attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-354">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ff95d-355">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-355">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMutex">
      <MemberSignature Language="C#" Value="public void ReleaseMutex ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseMutex() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.ReleaseMutex" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMutex ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseMutex();" />
      <MemberSignature Language="F#" Value="member this.ReleaseMutex : unit -&gt; unit" Usage="mutex.ReleaseMutex " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ff95d-356">Rilascia l'oggetto <see cref="T:System.Threading.Mutex" /> una volta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-356">Releases the <see cref="T:System.Threading.Mutex" /> once.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff95d-357">Ogni volta che un thread acquisisce un mutex (ad esempio, chiamando relativi <xref:System.Threading.WaitHandle.WaitOne%2A> metodo), deve chiamare successivamente <xref:System.Threading.Mutex.ReleaseMutex%2A> per rilasciare la proprietà del mutex e sbloccare gli altri thread che sta tentando di assumere la proprietà del mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-357">Whenever a thread acquires a mutex (for example, by calling its <xref:System.Threading.WaitHandle.WaitOne%2A> method), it must subsequently call <xref:System.Threading.Mutex.ReleaseMutex%2A> to relinquish ownership of the mutex and unblock other threads that are trying to gain ownership of the mutex.</span></span> <span data-ttu-id="ff95d-358">Se il tentativo di ottenere la proprietà del mutex ha esito negativo (ad esempio, quando una chiamata al <xref:System.Threading.WaitHandle.WaitOne%2A> metodo con un `millisecondsTimeout` o una `timeout` parametro restituisce `false` perché la richiesta scade), il thread non deve chiamare <xref:System.Threading.Mutex.ReleaseMutex%2A>, In questo i casi, il thread deve anche non essere consentito per accedere alla risorsa protetta dal mutex, come illustrato nell'esempio seguente.</span><span class="sxs-lookup"><span data-stu-id="ff95d-358">If the attempt to get ownership of the mutex fails (for example, when a call to the <xref:System.Threading.WaitHandle.WaitOne%2A> method with a `millisecondsTimeout` or a `timeout` parameter returns `false` because the request times out), the thread shouldn't call <xref:System.Threading.Mutex.ReleaseMutex%2A>, In this case, the thread should also not be allowed to access the resource protected by the mutex, as the following example shows.</span></span>  
  
 [!code-csharp[System.Threading.Mutex.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.mutex.class/cs/example2.cs#2)]
 [!code-vb[System.Threading.Mutex.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.mutex.class/vb/example2.vb#2)]  
  
 <span data-ttu-id="ff95d-359">Un thread che possiede un mutex può specificare lo stesso mutex nelle chiamate di funzione di attesa ripetute senza interromperne l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="ff95d-359">A thread that owns a mutex can specify the same mutex in repeated wait function calls without blocking its execution.</span></span> <span data-ttu-id="ff95d-360">Il numero di chiamate viene mantenuto da common language runtime.</span><span class="sxs-lookup"><span data-stu-id="ff95d-360">The number of calls is kept by the common language runtime.</span></span> <span data-ttu-id="ff95d-361">Il thread deve chiamare <xref:System.Threading.Mutex.ReleaseMutex%2A> lo stesso numero di volte per rilasciare la proprietà del mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-361">The thread must call <xref:System.Threading.Mutex.ReleaseMutex%2A> the same number of times to release ownership of the mutex.</span></span>  
  
 <span data-ttu-id="ff95d-362">Se durante il proprietario di un mutex termina un thread, si dice che il mutex abbandonato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-362">If a thread terminates while owning a mutex, the mutex is said to be abandoned.</span></span> <span data-ttu-id="ff95d-363">Lo stato del tipo mutex è impostato su segnalato e il thread d'attesa successivo Ottiene la proprietà.</span><span class="sxs-lookup"><span data-stu-id="ff95d-363">The state of the mutex is set to signaled and the next waiting thread gets ownership.</span></span> <span data-ttu-id="ff95d-364">Se non è proprietario del mutex, viene segnalato lo stato del mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-364">If no one owns the mutex, the state of the mutex is signaled.</span></span> <span data-ttu-id="ff95d-365">Partire dalla versione 2.0 di .NET Framework, un <xref:System.Threading.AbandonedMutexException> generata nel thread successivo che acquisisce il mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-365">Beginning in version 2.0 of the .NET Framework, an <xref:System.Threading.AbandonedMutexException> is thrown in the next thread that acquires the mutex.</span></span> <span data-ttu-id="ff95d-366">Prima della versione 2.0 di .NET Framework, è stata generata alcuna eccezione.</span><span class="sxs-lookup"><span data-stu-id="ff95d-366">Prior to version 2.0 of the .NET Framework, no exception was thrown.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="ff95d-367">Un mutex abbandonato indica spesso un errore grave nel codice.</span><span class="sxs-lookup"><span data-stu-id="ff95d-367">An abandoned mutex often indicates a serious error in the code.</span></span> <span data-ttu-id="ff95d-368">Quando un thread termina senza rilasciare il mutex, le strutture di dati protette dal mutex non sia in uno stato coerente.</span><span class="sxs-lookup"><span data-stu-id="ff95d-368">When a thread exits without releasing the mutex, the data structures protected by the mutex might not be in a consistent state.</span></span> <span data-ttu-id="ff95d-369">Il thread successivo per richiedere la proprietà del mutex può gestire questa eccezione e continuare, se è possibile verificare l'integrità delle strutture di dati.</span><span class="sxs-lookup"><span data-stu-id="ff95d-369">The next thread to request ownership of the mutex can handle this exception and proceed, if the integrity of the data structures can be verified.</span></span>  
  
 <span data-ttu-id="ff95d-370">Nel caso di un mutex di sistema, un mutex abbandonato potrebbe indicare che un'applicazione è stata terminata in modo anomalo (ad esempio, usando Gestione attività Windows).</span><span class="sxs-lookup"><span data-stu-id="ff95d-370">In the case of a system-wide mutex, an abandoned mutex might indicate that an application has been terminated abruptly (for example, by using Windows Task Manager).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff95d-371">Nell'esempio seguente viene illustrato come una variabile locale <xref:System.Threading.Mutex> oggetto viene usato per sincronizzare l'accesso a una risorsa protetta.</span><span class="sxs-lookup"><span data-stu-id="ff95d-371">The following example shows how a local <xref:System.Threading.Mutex> object is used to synchronize access to a protected resource.</span></span> <span data-ttu-id="ff95d-372">Il thread che crea il mutex non proprietari inizialmente.</span><span class="sxs-lookup"><span data-stu-id="ff95d-372">The thread that creates the mutex does not own it initially.</span></span> <span data-ttu-id="ff95d-373">Il <xref:System.Threading.Mutex.ReleaseMutex%2A> metodo viene utilizzato per rilasciare il mutex quando non è più necessario.</span><span class="sxs-lookup"><span data-stu-id="ff95d-373">The <xref:System.Threading.Mutex.ReleaseMutex%2A> method is used to release the mutex when it is no longer needed.</span></span>  
  
 [!code-cpp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/CS/class1.cs#1)]
 [!code-vb[System.Threading.Mutex Default Ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex Default Ctor Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="ff95d-374">Il thread di chiamata non è il proprietario del mutex.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-374">The calling thread does not own the mutex.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="ff95d-375">L'istanza corrente è già stata eliminata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-375">The current instance has already been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/threading/index.md">
          <span data-ttu-id="ff95d-376">Threading gestito</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-376">Managed Threading</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/mutexes.md">
          <span data-ttu-id="ff95d-377">Mutex</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-377">Mutexes</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public void SetAccessControl (System.Security.AccessControl.MutexSecurity mutexSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessControl(class System.Security.AccessControl.MutexSecurity mutexSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.SetAccessControl(System.Security.AccessControl.MutexSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessControl(System::Security::AccessControl::MutexSecurity ^ mutexSecurity);" />
      <MemberSignature Language="F#" Value="member this.SetAccessControl : System.Security.AccessControl.MutexSecurity -&gt; unit" Usage="mutex.SetAccessControl mutexSecurity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mutexSecurity" Type="System.Security.AccessControl.MutexSecurity" />
      </Parameters>
      <Docs>
        <param name="mutexSecurity">
          <span data-ttu-id="ff95d-378">Oggetto <see cref="T:System.Security.AccessControl.MutexSecurity" /> che rappresenta la sicurezza del controllo di accesso da applicare al mutex di sistema denominato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-378">A <see cref="T:System.Security.AccessControl.MutexSecurity" /> object that represents the access control security to be applied to the named system mutex.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff95d-379">Imposta la sicurezza del controllo di accesso per un mutex di sistema denominato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-379">Sets the access control security for a named system mutex.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff95d-380">L'utente deve disporre <xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType> diritti di chiamare questo metodo e il mutex necessario sia stato aperto con <xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="ff95d-380">The user must have <xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType> rights to call this method, and the mutex must have been opened with <xref:System.Security.AccessControl.MutexRights.ChangePermissions?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ff95d-381">Esempio di codice seguente viene illustrato il comportamento tra processi di un mutex denominato con controllo degli accessi.</span><span class="sxs-lookup"><span data-stu-id="ff95d-381">The following code example demonstrates the cross-process behavior of a named mutex with access control security.</span></span> <span data-ttu-id="ff95d-382">Nell'esempio viene usato il <xref:System.Threading.Mutex.OpenExisting%28System.String%29> overload del metodo per verificare l'esistenza di un mutex denominato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-382">The example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload to test for the existence of a named mutex.</span></span>  
  
 <span data-ttu-id="ff95d-383">Se il mutex non esiste, viene creato con la proprietà iniziale e la sicurezza del controllo di accesso che nega l'utente corrente il diritto di utilizzare il mutex, ma concede il diritto di leggere e modificare le autorizzazioni per il mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-383">If the mutex does not exist, it is created with initial ownership and access control security that denies the current user the right to use the mutex, but grants the right to read and change permissions on the mutex.</span></span>  
  
 <span data-ttu-id="ff95d-384">Se si esegue l'esempio compilato in due finestre di comando, la seconda copia genererà un'eccezione di violazione di accesso alla chiamata a <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span><span class="sxs-lookup"><span data-stu-id="ff95d-384">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to <xref:System.Threading.Mutex.OpenExisting%28System.String%29>.</span></span> <span data-ttu-id="ff95d-385">Viene rilevata l'eccezione e l'esempio Usa la <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> overload del metodo per aprire il mutex con i diritti necessari per leggere e modificare le autorizzazioni, usando il <xref:System.Threading.Mutex.GetAccessControl%2A> e <xref:System.Threading.Mutex.SetAccessControl%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="ff95d-385">The exception is caught, and the example uses the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload to open the mutex with the rights needed to read and change the permissions, using the <xref:System.Threading.Mutex.GetAccessControl%2A> and <xref:System.Threading.Mutex.SetAccessControl%2A> methods.</span></span>  
  
 <span data-ttu-id="ff95d-386">Dopo la modifica delle autorizzazioni, il mutex viene aperto con i diritti necessari per immettere e rilasciarlo.</span><span class="sxs-lookup"><span data-stu-id="ff95d-386">After the permissions are changed, the mutex is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="ff95d-387">Se si esegue l'esempio compilato da una terza finestra di comando, viene eseguito con le nuove autorizzazioni.</span><span class="sxs-lookup"><span data-stu-id="ff95d-387">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Mutex.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Mutex.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff95d-388">
            <paramref name="mutexSecurity" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-388">
              <paramref name="mutexSecurity" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="ff95d-389">L'utente non dispone di <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-389">The user does not have <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />.</span>
          </span>
          <span data-ttu-id="ff95d-390">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-390">-or-</span>
          </span>
          <span data-ttu-id="ff95d-391">Il mutex non è stato aperto con <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-391">The mutex was not opened with <see cref="F:System.Security.AccessControl.MutexRights.ChangePermissions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.SystemException">
          <span data-ttu-id="ff95d-392">L'oggetto <see cref="T:System.Threading.Mutex" /> corrente non rappresenta un mutex di sistema denominato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-392">The current <see cref="T:System.Threading.Mutex" /> object does not represent a named system mutex.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryOpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ff95d-393">Apre un mutex denominato specificato, se esistente, e restituisce un valore che indica se l'operazione è stata completata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-393">Opens a specified named mutex, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, out System.Threading.Mutex result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, [out] class System.Threading.Mutex&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, ByRef result As Mutex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, [Runtime::InteropServices::Out] System::Threading::Mutex ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string *  -&gt; bool" Usage="System.Threading.Mutex.TryOpenExisting (name, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="result" Type="System.Threading.Mutex" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ff95d-394">Nome del mutex di sistema da aprire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-394">The name of the system mutex to open.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="ff95d-395">Quando questo metodo viene restituito, contiene un oggetto di <see cref="T:System.Threading.Mutex" /> che rappresenta il mutex denominato se la chiamata ha esito positivo o <see langword="null" /> se la chiamata ha esito negativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-395">When this method returns, contains a <see cref="T:System.Threading.Mutex" /> object that represents the named mutex if the call succeeded, or <see langword="null" /> if the call failed.</span>
          </span>
          <span data-ttu-id="ff95d-396">Questo parametro viene trattato come non inizializzato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-396">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff95d-397">Apre il mutex denominato specificato, se esistente, e restituisce un valore che indica se l'operazione è stata completata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-397">Opens the specified named mutex, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff95d-398">
            <see langword="true" /> se il mutex denominato è stato aperto correttamente; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-398">
              <see langword="true" /> if the named mutex was opened successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff95d-399">Se il mutex denominato non esiste, questo metodo non crearla.</span><span class="sxs-lookup"><span data-stu-id="ff95d-399">If the named mutex does not exist, this method does not create it.</span></span> <span data-ttu-id="ff95d-400">Per creare il mutex di sistema quando non esiste già, usare uno dei <xref:System.Threading.Mutex.%23ctor%2A> costruttori che dispone di un `name` parametro.</span><span class="sxs-lookup"><span data-stu-id="ff95d-400">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="ff95d-401">Se non si è certi se un mutex denominato esiste, utilizzare questo overload del metodo anziché il <xref:System.Threading.Mutex.OpenExisting%28System.String%29> overload del metodo che genera un'eccezione se il mutex non esiste.</span><span class="sxs-lookup"><span data-stu-id="ff95d-401">If you are uncertain whether a named mutex exists, use this method overload instead of the <xref:System.Threading.Mutex.OpenExisting%28System.String%29> method overload, which throws an exception if the mutex does not exist.</span></span>  
  
 <span data-ttu-id="ff95d-402">Più chiamate al metodo che usano lo stesso valore per `name` non necessariamente restituiscono lo stesso <xref:System.Threading.Mutex> dell'oggetto, anche se gli oggetti restituiti rappresentano lo stesso mutex di sistema denominato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-402">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="ff95d-403">Questo overload del metodo è equivalente alla chiamata di <xref:System.Threading.Mutex.TryOpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%2CSystem.Threading.Mutex%40%29> overload del metodo e specificando <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> e <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> diritti, combinati tramite l'operazione OR bit per bit.</span><span class="sxs-lookup"><span data-stu-id="ff95d-403">This method overload is equivalent to calling the <xref:System.Threading.Mutex.TryOpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%2CSystem.Threading.Mutex%40%29> method overload and specifying <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span> <span data-ttu-id="ff95d-404">Specificando il <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag consente a un thread in attesa di mutex e specificare il <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag consente a un thread chiamare il <xref:System.Threading.Mutex.ReleaseMutex%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="ff95d-404">Specifying the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag allows a thread to wait on the mutex, and specifying the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="ff95d-405">Questo metodo non viene richiesta la proprietà del mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-405">This method does not request ownership of the mutex.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff95d-406">Il parametro <paramref name="name" /> è una stringa vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-406">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="ff95d-407">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-407">-or-</span>
          </span>
          <span data-ttu-id="ff95d-408">La lunghezza di <paramref name="name" /> supera i 260 caratteri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-408">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff95d-409">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-409">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="ff95d-410">Errore Win32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-410">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="ff95d-411">Il mutex denominato esiste, ma l'utente non dispone dell'accesso di sicurezza necessario per usarlo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-411">The named mutex exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ff95d-412">richiede l'attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-412">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ff95d-413">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-413">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, System.Security.AccessControl.MutexRights rights, out System.Threading.Mutex result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, valuetype System.Security.AccessControl.MutexRights rights, [out] class System.Threading.Mutex&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Mutex.TryOpenExisting(System.String,System.Security.AccessControl.MutexRights,System.Threading.Mutex@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, rights As MutexRights, ByRef result As Mutex) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, System::Security::AccessControl::MutexRights rights, [Runtime::InteropServices::Out] System::Threading::Mutex ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string * System.Security.AccessControl.MutexRights *  -&gt; bool" Usage="System.Threading.Mutex.TryOpenExisting (name, rights, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.MutexRights" />
        <Parameter Name="result" Type="System.Threading.Mutex" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ff95d-414">Nome del mutex di sistema da aprire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-414">The name of the system mutex to open.</span>
          </span>
        </param>
        <param name="rights">
          <span data-ttu-id="ff95d-415">Combinazione bit per bit dei valori di enumerazione che rappresentano l'accesso di sicurezza desiderato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-415">A bitwise combination of the enumeration values that represent the desired security access.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="ff95d-416">Quando questo metodo viene restituito, contiene un oggetto di <see cref="T:System.Threading.Mutex" /> che rappresenta il mutex denominato se la chiamata ha esito positivo o <see langword="null" /> se la chiamata ha esito negativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-416">When this method returns, contains a <see cref="T:System.Threading.Mutex" /> object that represents the named mutex if the call succeeded, or <see langword="null" /> if the call failed.</span>
          </span>
          <span data-ttu-id="ff95d-417">Questo parametro viene trattato come non inizializzato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-417">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ff95d-418">Apre il mutex denominato specificato, se esistente, con l'accesso di sicurezza desiderato, e restituisce un valore che indica se l'operazione è stata completata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-418">Opens the specified named mutex, if it already exists, with the desired security access, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ff95d-419">
            <see langword="true" /> se il mutex denominato è stato aperto correttamente; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-419">
              <see langword="true" /> if the named mutex was opened successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ff95d-420">Se il mutex denominato non esiste, questo metodo non crearla.</span><span class="sxs-lookup"><span data-stu-id="ff95d-420">If the named mutex does not exist, this method does not create it.</span></span> <span data-ttu-id="ff95d-421">Per creare il mutex di sistema quando non esiste già, usare uno dei <xref:System.Threading.Mutex.%23ctor%2A> costruttori che dispone di un `name` parametro.</span><span class="sxs-lookup"><span data-stu-id="ff95d-421">To create the system mutex when it does not already exist, use one of the <xref:System.Threading.Mutex.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="ff95d-422">Se non si è certi se un mutex denominato esiste, utilizzare questo overload del metodo anziché il <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> overload del metodo che genera un'eccezione se il mutex non esiste.</span><span class="sxs-lookup"><span data-stu-id="ff95d-422">If you are uncertain whether a named mutex exists, use this method overload instead of the <xref:System.Threading.Mutex.OpenExisting%28System.String%2CSystem.Security.AccessControl.MutexRights%29> method overload, which throws an exception if the mutex does not exist.</span></span>  
  
 <span data-ttu-id="ff95d-423">Il `rights` parametro deve includere il <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag per consentire ai thread in attesa di mutex e il <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag per consentire ai thread chiamare il <xref:System.Threading.Mutex.ReleaseMutex%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="ff95d-423">The `rights` parameter must include the <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> flag to allow threads to wait on the mutex, and the <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Mutex.ReleaseMutex%2A> method.</span></span>  
  
 <span data-ttu-id="ff95d-424">Più chiamate al metodo che usano lo stesso valore per `name` non necessariamente restituiscono lo stesso <xref:System.Threading.Mutex> dell'oggetto, anche se gli oggetti restituiti rappresentano lo stesso mutex di sistema denominato.</span><span class="sxs-lookup"><span data-stu-id="ff95d-424">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Mutex> object, even though the objects that are returned represent the same named system mutex.</span></span>  
  
 <span data-ttu-id="ff95d-425">Questo metodo non viene richiesta la proprietà del mutex.</span><span class="sxs-lookup"><span data-stu-id="ff95d-425">This method does not request ownership of the mutex.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ff95d-426">Il parametro <paramref name="name" /> è una stringa vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-426">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="ff95d-427">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-427">-or-</span>
          </span>
          <span data-ttu-id="ff95d-428">La lunghezza di <paramref name="name" /> supera i 260 caratteri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-428">
              <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ff95d-429">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-429">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="ff95d-430">Errore Win32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-430">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="ff95d-431">Il mutex denominato esiste, ma l'utente non dispone dell'accesso di sicurezza necessario per usarlo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-431">The named mutex exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ff95d-432">richiede l'attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-432">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ff95d-433">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ff95d-433">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>