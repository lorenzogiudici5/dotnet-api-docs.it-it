<Type Name="LazyThreadSafetyMode" FullName="System.Threading.LazyThreadSafetyMode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bffe15f7432e9c6a32d5ebae79cbf8cad97790ab" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36605919" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum LazyThreadSafetyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LazyThreadSafetyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyThreadSafetyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum LazyThreadSafetyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class LazyThreadSafetyMode" />
  <TypeSignature Language="F#" Value="type LazyThreadSafetyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Specifica il modo in cui un'istanza di <see cref="T:System.Lazy`1" /> sincronizza l'accesso tra più thread.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questa enumerazione per specificare il `mode` parametro di <xref:System.Lazy%601> costruttori. Gli effetti di tutti i costruttori sulla sincronizzazione dei thread possono essere descritti in termini di questa enumerazione dispongono o meno `mode` parametri.  
  
 Un <xref:System.Lazy%601> l'istanza viene inizializzata da un metodo di inizializzazione specificato dall'utente o dal costruttore predefinito per `T`. Il metodo di inizializzazione è specificato per il `valueFactory` parametro di un <xref:System.Lazy%601> costruttore. Il metodo restituisce un'istanza di `T`, che è il tipo che viene creata un'istanza differita dall'istanza di <xref:System.Lazy%601>. Se un costruttore non ha un `valueFactory` parametro, il costruttore predefinito per `T` utilizzato per inizializzare il <xref:System.Lazy%601> istanza. In entrambi i casi, l'inizializzazione si verifica la prima volta chiama il <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> proprietà.  
  
 Oltre a specificare la protezione del thread di un <xref:System.Lazy%601> istanza, questa enumerazione interessa la memorizzazione nella cache di eccezione. Quando le eccezioni vengono memorizzati nella cache per un <xref:System.Lazy%601> istanza, viene visualizzato solo un'opportunità per inizializzare l'istanza. Se un'eccezione viene generata la prima volta che si chiama il <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> proprietà, che l'eccezione viene memorizzata nella cache e rigenerata in tutte le chiamate successive al <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> proprietà. Il vantaggio della memorizzazione nella cache le eccezioni è che le due thread ottengano sempre lo stesso risultato, anche quando si verificano errori.  
  
 Quando si specifica la modalità PublicationOnly, le eccezioni non vengono mai memorizzati nella cache. Quando si specifica nessuno o ExecutionAndPublication, la memorizzazione nella cache varia a seconda se si specifica un metodo di inizializzazione o consentire il costruttore predefinito per `T` da utilizzare. Se si specifica un metodo di inizializzazione, la memorizzazione nella cache delle eccezioni viene abilitata per queste due modalità. Il metodo di inizializzazione può essere molto semplice. Ad esempio, può chiamare il costruttore predefinito per `T`: `new Lazy<Contents>(() => new Contents(), mode)` in C# o `New Lazy(Of Contents)(Function() New Contents())` in Visual Basic. Se si utilizza un costruttore che non specifica un metodo di inizializzazione, le eccezioni generate dal costruttore predefinito per `T` non vengono memorizzati nella cache. Nella tabella seguente viene riepilogato il comportamento di memorizzazione nella cache (eccezione).  
  
|Modalità|Utilizzando il metodo di inizializzazione|Usando il costruttore predefinito per `T`|  
|----------|---------------------------------|---------------------------------------|  
|nessuno|Memorizzata nella cache|Non memorizzato nella cache|  
|PublicationOnly|Non memorizzato nella cache|Non memorizzato nella cache|  
|ExecutionAndPublication|Memorizzata nella cache|Non memorizzato nella cache|  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecutionAndPublication">
      <MemberSignature Language="C#" Value="ExecutionAndPublication" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode ExecutionAndPublication = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberSignature Language="VB.NET" Value="ExecutionAndPublication" />
      <MemberSignature Language="C++ CLI" Value="ExecutionAndPublication" />
      <MemberSignature Language="F#" Value="ExecutionAndPublication = 2" Usage="System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Per garantire che solo un singolo thread possa inizializzare un'istanza di <see cref="T:System.Lazy`1" /> in modalità thread-safe, vengono usati i blocchi. Se il metodo di inizializzazione (o il costruttore predefinito se non esiste alcun metodo di inizializzazione) usa i blocchi internamente, possono verificarsi deadlock. Se si usa un costruttore di <see cref="T:System.Lazy`1" /> che specifica un metodo di inizializzazione (parametro <paramref name="valueFactory" />) e se tale metodo di inizializzazione genera un'eccezione (o non è in grado di gestire un'eccezione) la prima volta che si chiama la proprietà <see cref="P:System.Lazy`1.Value" />, l'eccezione viene memorizzata nella cache e generata di nuovo per le chiamate successive alla proprietà <see cref="P:System.Lazy`1.Value" />. Se si usa un costruttore di <see cref="T:System.Lazy`1" /> che non specifica un metodo di inizializzazione, le eccezioni generate dal costruttore predefinito per <paramref name="T" /> non vengono memorizzate nella cache. In tal caso, è possibile che una chiamata successiva alla proprietà <see cref="P:System.Lazy`1.Value" /> inizializzi correttamente l'istanza di <see cref="T:System.Lazy`1" />. Se il metodo di inizializzazione accede in modo ricorsivo alla proprietà <see cref="P:System.Lazy`1.Value" /> dell'istanza di <see cref="T:System.Lazy`1" />, verrà generata un'eccezione <see cref="T:System.InvalidOperationException" />.</summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Threading.LazyThreadSafetyMode.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>L'istanza di <see cref="T:System.Lazy`1" /> non è thread-safe. Se l'istanza è accessibile da più thread, il comportamento sarà indefinito. Usare questa modalità solo quando è fondamentale ottenere prestazioni elevate e l'istanza di <see cref="T:System.Lazy`1" /> non potrà mai essere inizializzata da più thread. Se si usa un costruttore di <see cref="T:System.Lazy`1" /> che specifica un metodo di inizializzazione (parametro <paramref name="valueFactory" />) e se tale metodo di inizializzazione genera un'eccezione (o non è in grado di gestire un'eccezione) la prima volta che si chiama la proprietà <see cref="P:System.Lazy`1.Value" />, l'eccezione viene memorizzata nella cache e generata di nuovo per le chiamate successive alla proprietà <see cref="P:System.Lazy`1.Value" />. Se si usa un costruttore di <see cref="T:System.Lazy`1" /> che non specifica un metodo di inizializzazione, le eccezioni generate dal costruttore predefinito per <paramref name="T" /> non vengono memorizzate nella cache. In tal caso, è possibile che una chiamata successiva alla proprietà <see cref="P:System.Lazy`1.Value" /> inizializzi correttamente l'istanza di <see cref="T:System.Lazy`1" />. Se il metodo di inizializzazione accede in modo ricorsivo alla proprietà <see cref="P:System.Lazy`1.Value" /> dell'istanza di <see cref="T:System.Lazy`1" />, verrà generata un'eccezione <see cref="T:System.InvalidOperationException" />.</summary>
      </Docs>
    </Member>
    <Member MemberName="PublicationOnly">
      <MemberSignature Language="C#" Value="PublicationOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode PublicationOnly = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberSignature Language="VB.NET" Value="PublicationOnly" />
      <MemberSignature Language="C++ CLI" Value="PublicationOnly" />
      <MemberSignature Language="F#" Value="PublicationOnly = 1" Usage="System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Quando più thread tentano di inizializzare un'istanza di <see cref="T:System.Lazy`1" /> contemporaneamente, tutti i thread possono eseguire il metodo di inizializzazione (o il costruttore predefinito, se non esiste alcun metodo di inizializzazione). Il primo thread la cui inizializzazione viene completata imposta il valore dell'istanza di <see cref="T:System.Lazy`1" />. Questo valore viene restituito a qualsiasi altro thread che esegue simultaneamente il metodo di inizializzazione, a meno che il metodo di inizializzazione non generi eccezioni per tali thread. Tutte le istanze di <paramref name="T" /> che sono state create dai thread concorrenti vengono ignorate. Se il metodo di inizializzazione genera un'eccezione in qualsiasi thread, l'eccezione viene propagata fuori dalla proprietà <see cref="P:System.Lazy`1.Value" /> sul thread interessato. L'eccezione non viene memorizzata nella cache. Il valore della proprietà <see cref="P:System.Lazy`1.IsValueCreated" /> rimane <see langword="false" /> e le chiamate successive alla proprietà <see cref="P:System.Lazy`1.Value" /> proprietà (da parte del thread in cui è stata generata l'eccezione o da parte di altri thread) comporta la riesecuzione del metodo di inizializzazione. Se il metodo di inizializzazione accede in modo ricorsivo alla proprietà <see cref="P:System.Lazy`1.Value" /> dell'istanza di <see cref="T:System.Lazy`1" />, non verrà generata alcuna eccezione.</summary>
      </Docs>
    </Member>
  </Members>
</Type>