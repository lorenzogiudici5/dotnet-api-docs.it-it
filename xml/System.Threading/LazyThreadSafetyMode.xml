<Type Name="LazyThreadSafetyMode" FullName="System.Threading.LazyThreadSafetyMode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bffe15f7432e9c6a32d5ebae79cbf8cad97790ab" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="36605919" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum LazyThreadSafetyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LazyThreadSafetyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyThreadSafetyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum LazyThreadSafetyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class LazyThreadSafetyMode" />
  <TypeSignature Language="F#" Value="type LazyThreadSafetyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
      <span data-ttu-id="94776-101">Specifica il modo in cui un'istanza di <see cref="T:System.Lazy`1" /> sincronizza l'accesso tra più thread.</span>
      <span class="sxs-lookup">
        <span data-stu-id="94776-101">Specifies how a <see cref="T:System.Lazy`1" /> instance synchronizes access among multiple threads.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94776-102">Utilizzare questa enumerazione per specificare il `mode` parametro di <xref:System.Lazy%601> costruttori.</span><span class="sxs-lookup"><span data-stu-id="94776-102">Use this enumeration to specify the `mode` parameter of <xref:System.Lazy%601> constructors.</span></span> <span data-ttu-id="94776-103">Gli effetti di tutti i costruttori nella sincronizzazione dei thread possono essere descritti in termini di questa enumerazione, se hanno `mode` parametri.</span><span class="sxs-lookup"><span data-stu-id="94776-103">The effects of all constructors on thread synchronization can be described in terms of this enumeration, whether or not they have `mode` parameters.</span></span>  
  
 <span data-ttu-id="94776-104">Oggetto <xref:System.Lazy%601> l'istanza viene inizializzata da un metodo di inizializzazione specificato dall'utente o dal costruttore predefinito per `T`.</span><span class="sxs-lookup"><span data-stu-id="94776-104">A <xref:System.Lazy%601> instance is initialized either by a user-specified initialization method or by the default constructor for `T`.</span></span> <span data-ttu-id="94776-105">Il metodo di inizializzazione è specificato per il `valueFactory` parametro di un <xref:System.Lazy%601> costruttore.</span><span class="sxs-lookup"><span data-stu-id="94776-105">The initialization method is specified by the `valueFactory` parameter of a <xref:System.Lazy%601> constructor.</span></span> <span data-ttu-id="94776-106">Il metodo restituisce un'istanza di `T`, ovvero il tipo che viene creato in modo differito mediante l'istanza di <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="94776-106">The method returns an instance of `T`, which is the type that is lazily instantiated by the instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="94776-107">Se un costruttore non ha un `valueFactory` parametro, il costruttore predefinito per `T` viene usato per inizializzare il <xref:System.Lazy%601> istanza.</span><span class="sxs-lookup"><span data-stu-id="94776-107">If a constructor does not have a `valueFactory` parameter, the default constructor for `T` is used to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="94776-108">In entrambi i casi, si verifica la prima volta che si chiama l'inizializzazione di <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> proprietà.</span><span class="sxs-lookup"><span data-stu-id="94776-108">In either case, initialization occurs the first time you call the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="94776-109">Oltre a specificare la thread safety di un <xref:System.Lazy%601> istanza, questa enumerazione interessa la memorizzazione nella cache di eccezione.</span><span class="sxs-lookup"><span data-stu-id="94776-109">In addition to specifying the thread safety of a <xref:System.Lazy%601> instance, this enumeration affects exception caching.</span></span> <span data-ttu-id="94776-110">Quando le eccezioni vengono memorizzate nella cache per un <xref:System.Lazy%601> istanza, si ottiene solo un'occasione per inizializzare l'istanza.</span><span class="sxs-lookup"><span data-stu-id="94776-110">When exceptions are cached for a <xref:System.Lazy%601> instance, you get only one chance to initialize the instance.</span></span> <span data-ttu-id="94776-111">Se la prima volta che viene generata un'eccezione si chiama il <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> proprietà, che l'eccezione viene memorizzata nella cache e generata di nuovo a tutte le chiamate successive al <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> proprietà.</span><span class="sxs-lookup"><span data-stu-id="94776-111">If an exception is thrown the first time you call the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property, that exception is cached and rethrown on all subsequent calls to the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="94776-112">Il vantaggio della memorizzazione nella cache delle eccezioni è che qualsiasi due thread ottiene sempre lo stesso risultato, anche quando si verificano errori.</span><span class="sxs-lookup"><span data-stu-id="94776-112">The advantage of caching exceptions is that any two threads always get the same result, even when errors occur.</span></span>  
  
 <span data-ttu-id="94776-113">Quando si specifica la modalità PublicationOnly, le eccezioni non vengono mai memorizzati nella cache.</span><span class="sxs-lookup"><span data-stu-id="94776-113">When you specify the PublicationOnly mode, exceptions are never cached.</span></span> <span data-ttu-id="94776-114">Quando si specifica nessuno o ExecutionAndPublication, la memorizzazione nella cache dipende dal fatto che si specifica un metodo di inizializzazione o si lascia il costruttore predefinito per `T` da utilizzare.</span><span class="sxs-lookup"><span data-stu-id="94776-114">When you specify None or ExecutionAndPublication, caching depends on whether you specify an initialization method or allow the default constructor for `T` to be used.</span></span> <span data-ttu-id="94776-115">Se si specifica un metodo di inizializzazione, la memorizzazione nella cache delle eccezioni viene abilitata per queste due modalità.</span><span class="sxs-lookup"><span data-stu-id="94776-115">Specifying an initialization method enables exception caching for these two modes.</span></span> <span data-ttu-id="94776-116">Il metodo di inizializzazione può essere molto semplice.</span><span class="sxs-lookup"><span data-stu-id="94776-116">The initialization method can be very simple.</span></span> <span data-ttu-id="94776-117">Ad esempio, può chiamare il costruttore predefinito per `T`: `new Lazy<Contents>(() => new Contents(), mode)` in C# o `New Lazy(Of Contents)(Function() New Contents())` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="94776-117">For example, it might call the default constructor for `T`: `new Lazy<Contents>(() => new Contents(), mode)` in C#, or `New Lazy(Of Contents)(Function() New Contents())` in Visual Basic.</span></span> <span data-ttu-id="94776-118">Se si utilizza un costruttore che non specifica un metodo di inizializzazione, le eccezioni generate dal costruttore predefinito per `T` non vengono memorizzate nella cache.</span><span class="sxs-lookup"><span data-stu-id="94776-118">If you use a constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for `T` are not cached.</span></span> <span data-ttu-id="94776-119">La tabella seguente riepiloga il comportamento di memorizzazione nella cache di eccezione.</span><span class="sxs-lookup"><span data-stu-id="94776-119">The following table summarizes exception caching behavior.</span></span>  
  
|<span data-ttu-id="94776-120">Modalità</span><span class="sxs-lookup"><span data-stu-id="94776-120">Mode</span></span>|<span data-ttu-id="94776-121">Usando un metodo di inizializzazione</span><span class="sxs-lookup"><span data-stu-id="94776-121">Using initialization method</span></span>|<span data-ttu-id="94776-122">Usando il costruttore predefinito per `T`</span><span class="sxs-lookup"><span data-stu-id="94776-122">Using default constructor for `T`</span></span>|  
|----------|---------------------------------|---------------------------------------|  
|<span data-ttu-id="94776-123">nessuno</span><span class="sxs-lookup"><span data-stu-id="94776-123">None</span></span>|<span data-ttu-id="94776-124">Memorizzata nella cache</span><span class="sxs-lookup"><span data-stu-id="94776-124">Cached</span></span>|<span data-ttu-id="94776-125">Non memorizzato nella cache</span><span class="sxs-lookup"><span data-stu-id="94776-125">Not cached</span></span>|  
|<span data-ttu-id="94776-126">PublicationOnly</span><span class="sxs-lookup"><span data-stu-id="94776-126">PublicationOnly</span></span>|<span data-ttu-id="94776-127">Non memorizzato nella cache</span><span class="sxs-lookup"><span data-stu-id="94776-127">Not cached</span></span>|<span data-ttu-id="94776-128">Non memorizzato nella cache</span><span class="sxs-lookup"><span data-stu-id="94776-128">Not cached</span></span>|  
|<span data-ttu-id="94776-129">ExecutionAndPublication</span><span class="sxs-lookup"><span data-stu-id="94776-129">ExecutionAndPublication</span></span>|<span data-ttu-id="94776-130">Memorizzata nella cache</span><span class="sxs-lookup"><span data-stu-id="94776-130">Cached</span></span>|<span data-ttu-id="94776-131">Non memorizzato nella cache</span><span class="sxs-lookup"><span data-stu-id="94776-131">Not cached</span></span>|  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecutionAndPublication">
      <MemberSignature Language="C#" Value="ExecutionAndPublication" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode ExecutionAndPublication = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberSignature Language="VB.NET" Value="ExecutionAndPublication" />
      <MemberSignature Language="C++ CLI" Value="ExecutionAndPublication" />
      <MemberSignature Language="F#" Value="ExecutionAndPublication = 2" Usage="System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="94776-132">Per garantire che solo un singolo thread possa inizializzare un'istanza di <see cref="T:System.Lazy`1" /> in modalità thread-safe, vengono usati i blocchi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94776-132">Locks are used to ensure that only a single thread can initialize a <see cref="T:System.Lazy`1" /> instance in a thread-safe manner.</span>
          </span>
          <span data-ttu-id="94776-133">Se il metodo di inizializzazione (o il costruttore predefinito se non esiste alcun metodo di inizializzazione) usa i blocchi internamente, possono verificarsi deadlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94776-133">If the initialization method (or the default constructor, if there is no initialization method) uses locks internally, deadlocks can occur.</span>
          </span>
          <span data-ttu-id="94776-134">Se si usa un costruttore di <see cref="T:System.Lazy`1" /> che specifica un metodo di inizializzazione (parametro <paramref name="valueFactory" />) e se tale metodo di inizializzazione genera un'eccezione (o non è in grado di gestire un'eccezione) la prima volta che si chiama la proprietà <see cref="P:System.Lazy`1.Value" />, l'eccezione viene memorizzata nella cache e generata di nuovo per le chiamate successive alla proprietà <see cref="P:System.Lazy`1.Value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94776-134">If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property.</span>
          </span>
          <span data-ttu-id="94776-135">Se si usa un costruttore di <see cref="T:System.Lazy`1" /> che non specifica un metodo di inizializzazione, le eccezioni generate dal costruttore predefinito per <paramref name="T" /> non vengono memorizzate nella cache.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94776-135">If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <paramref name="T" /> are not cached.</span>
          </span>
          <span data-ttu-id="94776-136">In tal caso, è possibile che una chiamata successiva alla proprietà <see cref="P:System.Lazy`1.Value" /> inizializzi correttamente l'istanza di <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94776-136">In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
          <span data-ttu-id="94776-137">Se il metodo di inizializzazione accede in modo ricorsivo alla proprietà <see cref="P:System.Lazy`1.Value" /> dell'istanza di <see cref="T:System.Lazy`1" />, verrà generata un'eccezione <see cref="T:System.InvalidOperationException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94776-137">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Threading.LazyThreadSafetyMode.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="94776-138">L'istanza di <see cref="T:System.Lazy`1" /> non è thread-safe. Se l'istanza è accessibile da più thread, il comportamento sarà indefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94776-138">The <see cref="T:System.Lazy`1" /> instance is not thread safe; if the instance is accessed from multiple threads, its behavior is undefined.</span>
          </span>
          <span data-ttu-id="94776-139">Usare questa modalità solo quando è fondamentale ottenere prestazioni elevate e l'istanza di <see cref="T:System.Lazy`1" /> non potrà mai essere inizializzata da più thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94776-139">Use this mode only when high performance is crucial and the <see cref="T:System.Lazy`1" /> instance is guaranteed never to be initialized from more than one thread.</span>
          </span>
          <span data-ttu-id="94776-140">Se si usa un costruttore di <see cref="T:System.Lazy`1" /> che specifica un metodo di inizializzazione (parametro <paramref name="valueFactory" />) e se tale metodo di inizializzazione genera un'eccezione (o non è in grado di gestire un'eccezione) la prima volta che si chiama la proprietà <see cref="P:System.Lazy`1.Value" />, l'eccezione viene memorizzata nella cache e generata di nuovo per le chiamate successive alla proprietà <see cref="P:System.Lazy`1.Value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94776-140">If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property.</span>
          </span>
          <span data-ttu-id="94776-141">Se si usa un costruttore di <see cref="T:System.Lazy`1" /> che non specifica un metodo di inizializzazione, le eccezioni generate dal costruttore predefinito per <paramref name="T" /> non vengono memorizzate nella cache.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94776-141">If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <paramref name="T" /> are not cached.</span>
          </span>
          <span data-ttu-id="94776-142">In tal caso, è possibile che una chiamata successiva alla proprietà <see cref="P:System.Lazy`1.Value" /> inizializzi correttamente l'istanza di <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94776-142">In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
          <span data-ttu-id="94776-143">Se il metodo di inizializzazione accede in modo ricorsivo alla proprietà <see cref="P:System.Lazy`1.Value" /> dell'istanza di <see cref="T:System.Lazy`1" />, verrà generata un'eccezione <see cref="T:System.InvalidOperationException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94776-143">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="PublicationOnly">
      <MemberSignature Language="C#" Value="PublicationOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode PublicationOnly = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberSignature Language="VB.NET" Value="PublicationOnly" />
      <MemberSignature Language="C++ CLI" Value="PublicationOnly" />
      <MemberSignature Language="F#" Value="PublicationOnly = 1" Usage="System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="94776-144">Quando più thread tentano di inizializzare un'istanza di <see cref="T:System.Lazy`1" /> contemporaneamente, tutti i thread possono eseguire il metodo di inizializzazione (o il costruttore predefinito, se non esiste alcun metodo di inizializzazione).</span>
          <span class="sxs-lookup">
            <span data-stu-id="94776-144">When multiple threads try to initialize a <see cref="T:System.Lazy`1" /> instance simultaneously, all threads are allowed to run the initialization method (or the default constructor, if there is no initialization method).</span>
          </span>
          <span data-ttu-id="94776-145">Il primo thread la cui inizializzazione viene completata imposta il valore dell'istanza di <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94776-145">The first thread to complete initialization sets the value of the <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
          <span data-ttu-id="94776-146">Questo valore viene restituito a qualsiasi altro thread che esegue simultaneamente il metodo di inizializzazione, a meno che il metodo di inizializzazione non generi eccezioni per tali thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94776-146">That value is returned to any other threads that were simultaneously running the initialization method, unless the initialization method throws exceptions on those threads.</span>
          </span>
          <span data-ttu-id="94776-147">Tutte le istanze di <paramref name="T" /> che sono state create dai thread concorrenti vengono ignorate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94776-147">Any instances of <paramref name="T" /> that were created by the competing threads are discarded.</span>
          </span>
          <span data-ttu-id="94776-148">Se il metodo di inizializzazione genera un'eccezione in qualsiasi thread, l'eccezione viene propagata fuori dalla proprietà <see cref="P:System.Lazy`1.Value" /> sul thread interessato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94776-148">If the initialization method throws an exception on any thread, the exception is propagated out of the <see cref="P:System.Lazy`1.Value" /> property on that thread.</span>
          </span>
          <span data-ttu-id="94776-149">L'eccezione non viene memorizzata nella cache.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94776-149">The exception is not cached.</span>
          </span>
          <span data-ttu-id="94776-150">Il valore della proprietà <see cref="P:System.Lazy`1.IsValueCreated" /> rimane <see langword="false" /> e le chiamate successive alla proprietà <see cref="P:System.Lazy`1.Value" /> proprietà (da parte del thread in cui è stata generata l'eccezione o da parte di altri thread) comporta la riesecuzione del metodo di inizializzazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94776-150">The value of the <see cref="P:System.Lazy`1.IsValueCreated" /> property remains <see langword="false" />, and subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property, either by the thread where the exception was thrown or by other threads, cause the initialization method to run again.</span>
          </span>
          <span data-ttu-id="94776-151">Se il metodo di inizializzazione accede in modo ricorsivo alla proprietà <see cref="P:System.Lazy`1.Value" /> dell'istanza di <see cref="T:System.Lazy`1" />, non verrà generata alcuna eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94776-151">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, no exception is thrown.</span>
          </span>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>