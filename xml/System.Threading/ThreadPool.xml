<Type Name="ThreadPool" FullName="System.Threading.ThreadPool">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="68b7762e25c13529637c3ed6d542d63fee277f04" />
    <Meta Name="ms.sourcegitcommit" Value="f9e3295b6cc303a611a73a84c4b27f9da792ad0d" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/26/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ThreadPool" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ThreadPool extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadPool" />
  <TypeSignature Language="VB.NET" Value="Public Class ThreadPool" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadPool abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="5edd1-101">Fornisce un pool di thread che può essere usato per eseguire attività, inviare elementi di lavoro, elaborare operazioni di I/O asincrone, attendere per conto di altri thread ed elaborare timer.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5edd1-101">Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5edd1-102">Molte applicazioni creano thread spesa una notevole quantità di tempo nello stato inattivo, in attesa di un evento.</span><span class="sxs-lookup"><span data-stu-id="5edd1-102">Many applications create threads that spend a great deal of time in the sleeping state, waiting for an event to occur.</span></span> <span data-ttu-id="5edd1-103">Altri thread potrebbero entrare in uno stato solo a essere riattivata periodicamente per eseguire il polling delle modifiche o aggiornare le informazioni sullo stato.</span><span class="sxs-lookup"><span data-stu-id="5edd1-103">Other threads might enter a sleeping state only to be awakened periodically to poll for a change or update status information.</span></span> <span data-ttu-id="5edd1-104">Il pool di thread consente di utilizzare i thread in modo più efficiente fornendo all'applicazione un pool di thread di lavoro sono gestiti dal sistema.</span><span class="sxs-lookup"><span data-stu-id="5edd1-104">The thread pool enables you to use threads more efficiently by providing your application with a pool of worker threads that are managed by the system.</span></span> <span data-ttu-id="5edd1-105">Esempi di operazioni che usano i pool thread, tra cui:</span><span class="sxs-lookup"><span data-stu-id="5edd1-105">Examples of operations that use thread pool threads include the following:</span></span>  
  
-   <span data-ttu-id="5edd1-106">Quando si crea un <xref:System.Threading.Tasks.Task> o <xref:System.Threading.Tasks.Task%601> oggetto per eseguire alcune attività in modo asincrono, per impostazione predefinita l'attività è pianificata l'esecuzione in un pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-106">When you create a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> object to perform some task asynchronously, by default the task is scheduled to run on a thread pool thread.</span></span>  
  
-   <span data-ttu-id="5edd1-107">Timer asincroni utilizzano il pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-107">Asynchronous timers use the thread pool.</span></span> <span data-ttu-id="5edd1-108">I callback di esecuzione di thread del pool di <xref:System.Threading.Timer?displayProperty=nameWithType> classe e generare eventi dalla <xref:System.Timers.Timer?displayProperty=nameWithType> classe.</span><span class="sxs-lookup"><span data-stu-id="5edd1-108">Thread pool threads execute callbacks from the <xref:System.Threading.Timer?displayProperty=nameWithType> class and raise events from the <xref:System.Timers.Timer?displayProperty=nameWithType> class.</span></span>  
  
-   <span data-ttu-id="5edd1-109">Quando si utilizzano l'handle di attesa registrata, un thread di sistema consente di monitorare lo stato dell'handle di attesa.</span><span class="sxs-lookup"><span data-stu-id="5edd1-109">When you use registered wait handles, a system thread monitors the status of the wait handles.</span></span> <span data-ttu-id="5edd1-110">Quando viene completata un'operazione di attesa, un thread di lavoro dal pool di thread viene eseguita la funzione di callback corrispondente.</span><span class="sxs-lookup"><span data-stu-id="5edd1-110">When a wait operation completes, a worker thread from the thread pool executes the corresponding callback function.</span></span>  
  
-   <span data-ttu-id="5edd1-111">Quando si chiama il <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> metodo accodare un metodo per l'esecuzione in un pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-111">When you call the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method to queue a method for execution on a thread pool thread.</span></span> <span data-ttu-id="5edd1-112">Questo caso passando al metodo un <xref:System.Threading.WaitCallback> delegato.</span><span class="sxs-lookup"><span data-stu-id="5edd1-112">You do this by passing the method a <xref:System.Threading.WaitCallback> delegate.</span></span>   <span data-ttu-id="5edd1-113">Il delegato dispone della firma</span><span class="sxs-lookup"><span data-stu-id="5edd1-113">The delegate has the signature</span></span>  
  
    ```csharp  
    void WaitCallback(Object state)  
    ```  
  
    ```vb  
    Sub WaitCallback(state As Object)  
    ```  
  
     <span data-ttu-id="5edd1-114">dove `state` è un oggetto che contiene i dati da utilizzare dal delegato.</span><span class="sxs-lookup"><span data-stu-id="5edd1-114">where `state` is an object that contains data to be used by the delegate.</span></span> <span data-ttu-id="5edd1-115">I dati effettivi possono essere passati al delegato chiamando il <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> metodo.</span><span class="sxs-lookup"><span data-stu-id="5edd1-115">The actual data can be passed to the delegate by calling the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5edd1-116">I thread nel pool di thread gestiti sono thread in background.</span><span class="sxs-lookup"><span data-stu-id="5edd1-116">The threads in the managed thread pool are background threads.</span></span> <span data-ttu-id="5edd1-117">Vale a dire i <xref:System.Threading.Thread.IsBackground%2A> sono proprietà `true`.</span><span class="sxs-lookup"><span data-stu-id="5edd1-117">That is, their <xref:System.Threading.Thread.IsBackground%2A> properties are `true`.</span></span> <span data-ttu-id="5edd1-118">Ciò significa che un <xref:System.Threading.ThreadPool> thread non manterrà un'applicazione in esecuzione dopo il termine di tutti i thread in primo piano.</span><span class="sxs-lookup"><span data-stu-id="5edd1-118">This means that a <xref:System.Threading.ThreadPool> thread will not keep an application running after all foreground threads have exited.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5edd1-119">Quando il pool di thread riutilizza un thread, non cancella i dati nell'archiviazione locale di thread o nei campi contrassegnati con il <xref:System.ThreadStaticAttribute> attributo.</span><span class="sxs-lookup"><span data-stu-id="5edd1-119">When the thread pool reuses a thread, it does not clear the data in thread local storage or in fields that are marked with the <xref:System.ThreadStaticAttribute> attribute.</span></span> <span data-ttu-id="5edd1-120">Pertanto, quando un metodo esamina l'archiviazione locale di thread o i campi contrassegnati con il <xref:System.ThreadStaticAttribute> attributo, i valori rilevati potrebbero essere rimasti dopo un precedente utilizzo del thread del pool.</span><span class="sxs-lookup"><span data-stu-id="5edd1-120">Therefore, when a method examines thread local storage or fields that are marked with the <xref:System.ThreadStaticAttribute> attribute, the values it finds might be left over from an earlier use of the thread pool thread.</span></span>  
  
 <span data-ttu-id="5edd1-121">È inoltre possibile accodare gli elementi di lavoro che non sono correlati a un'operazione di attesa per il pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-121">You can also queue work items that are not related to a wait operation to the thread pool.</span></span> <span data-ttu-id="5edd1-122">Per richiedere che un elemento di lavoro gestito da un thread nel pool di thread, chiamare il <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="5edd1-122">To request that a work item be handled by a thread in the thread pool, call the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="5edd1-123">Questo metodo accetta come parametro un riferimento al metodo o delegato che verrà chiamato dal thread selezionato dal pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-123">This method takes as a parameter a reference to the method or delegate that will be called by the thread selected from the thread pool.</span></span> <span data-ttu-id="5edd1-124">Non è possibile annullare un elemento di lavoro dopo aver accodato.</span><span class="sxs-lookup"><span data-stu-id="5edd1-124">There is no way to cancel a work item after it has been queued.</span></span>  
  
 <span data-ttu-id="5edd1-125">Timer di coda del timer e le operazioni di attesa registrata anche usare il pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-125">Timer-queue timers and registered wait operations also use the thread pool.</span></span> <span data-ttu-id="5edd1-126">Le funzioni di callback vengono messe in coda nel pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-126">Their callback functions are queued to the thread pool.</span></span>  
  
 <span data-ttu-id="5edd1-127">È un pool di thread per ogni processo.</span><span class="sxs-lookup"><span data-stu-id="5edd1-127">There is one thread pool per process.</span></span> <span data-ttu-id="5edd1-128">A partire da [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], la dimensione predefinita del pool di thread per un processo dipende da diversi fattori, ad esempio la dimensione dello spazio degli indirizzi virtuali.</span><span class="sxs-lookup"><span data-stu-id="5edd1-128">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the default size of the thread pool for a process depends on several factors, such as the size of the virtual address space.</span></span> <span data-ttu-id="5edd1-129">Un processo può chiamare il metodo <xref:System.Threading.ThreadPool.GetMaxThreads%2A> per determinare il numero di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-129">A process can call the <xref:System.Threading.ThreadPool.GetMaxThreads%2A> method to determine the number of threads.</span></span> <span data-ttu-id="5edd1-130">Il numero di thread nel pool di thread può essere modificato utilizzando il <xref:System.Threading.ThreadPool.SetMaxThreads%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="5edd1-130">The number of threads in the thread pool can be changed by using the <xref:System.Threading.ThreadPool.SetMaxThreads%2A> method.</span></span> <span data-ttu-id="5edd1-131">Ogni thread utilizza la dimensione predefinita e viene eseguita con la priorità predefinita.</span><span class="sxs-lookup"><span data-stu-id="5edd1-131">Each thread uses the default stack size and runs at the default priority.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5edd1-132">Codice non gestito che ospita .NET Framework è possibile modificare le dimensioni del pool di thread usando il `CorSetMaxThreads` funzione, definito nel file Mscoree. h.</span><span class="sxs-lookup"><span data-stu-id="5edd1-132">Unmanaged code that hosts the .NET Framework can change the size of the thread pool by using the `CorSetMaxThreads` function, defined in the mscoree.h file.</span></span>  
  
 <span data-ttu-id="5edd1-133">Il pool di thread fornisce nuovi thread di lavoro o thread di completamento i/o su richiesta finché raggiunge il valore minimo per ogni categoria.</span><span class="sxs-lookup"><span data-stu-id="5edd1-133">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="5edd1-134">Quando viene raggiunto un valore minimo, il pool di thread può creare thread aggiuntivi in quella categoria o attendere il completamento di alcune attività.</span><span class="sxs-lookup"><span data-stu-id="5edd1-134">When a minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="5edd1-135">A partire da [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], il pool di thread crea ed elimina i thread di lavoro per ottimizzare la velocità effettiva, definita come numero di attività completate per unità di tempo.</span><span class="sxs-lookup"><span data-stu-id="5edd1-135">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys worker threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="5edd1-136">Un numero troppo ridotto di thread potrebbe non usare in modo ottimale le risorse disponibili, mentre troppi thread potrebbero aumentare il conflitto per le risorse.</span><span class="sxs-lookup"><span data-stu-id="5edd1-136">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5edd1-137">Quando la richiesta è bassa, il numero effettivo di thread del pool può scendere sotto i valori minimi.</span><span class="sxs-lookup"><span data-stu-id="5edd1-137">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
 <span data-ttu-id="5edd1-138">È possibile usare il metodo <xref:System.Threading.ThreadPool.GetMinThreads%2A> per ottenere questi valori minimi.</span><span class="sxs-lookup"><span data-stu-id="5edd1-138">You can use the <xref:System.Threading.ThreadPool.GetMinThreads%2A> method to obtain these minimum values.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="5edd1-139">È possibile utilizzare il <xref:System.Threading.ThreadPool.SetMinThreads%2A> metodo per aumentare il numero minimo di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-139">You can use the <xref:System.Threading.ThreadPool.SetMinThreads%2A> method to increase the minimum number of threads.</span></span> <span data-ttu-id="5edd1-140">Tuttavia, un aumento non necessario di questi valori può provocare problemi di prestazioni.</span><span class="sxs-lookup"><span data-stu-id="5edd1-140">However, unnecessarily increasing these values can cause performance problems.</span></span> <span data-ttu-id="5edd1-141">Se si avviano troppe attività contemporaneamente, potrebbero sembrare tutte lente.</span><span class="sxs-lookup"><span data-stu-id="5edd1-141">If too many tasks start at the same time, all of them might appear to be slow.</span></span> <span data-ttu-id="5edd1-142">Nella maggior parte dei casi, il pool di thread offre prestazioni migliori con il proprio algoritmo per l'allocazione dei thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-142">In most cases the thread pool will perform better with its own algorithm for allocating threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5edd1-143">Nell'esempio seguente, il thread principale dell'applicazione Accoda un metodo denominato `ThreadProc` da eseguire in un pool di thread, viene sospeso per un secondo e quindi viene chiusa.</span><span class="sxs-lookup"><span data-stu-id="5edd1-143">In the following example, the main application thread  queues a method named `ThreadProc` to execute on a thread pool thread, sleeps for one second, and then exits.</span></span> <span data-ttu-id="5edd1-144">Il `ThreadProc` metodo semplicemente visualizza un messaggio.</span><span class="sxs-lookup"><span data-stu-id="5edd1-144">The `ThreadProc` method simply displays a message.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 <span data-ttu-id="5edd1-145">Impostare come commento la chiamata al <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> (metodo), il thread principale viene chiuso prima del metodo viene eseguito nel pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-145">If you comment out the call to the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method, the main thread exits before         method runs on the thread pool thread.</span></span>  <span data-ttu-id="5edd1-146">Il pool di thread utilizza thread in background, che non mantengono l'applicazione in esecuzione se tutti i thread in primo piano è sono interrotto.</span><span class="sxs-lookup"><span data-stu-id="5edd1-146">The thread pool uses background         threads, which do not keep the application running if all foreground threads have terminated.</span></span>  <span data-ttu-id="5edd1-147">(Si tratta di un semplice esempio di una race condition).</span><span class="sxs-lookup"><span data-stu-id="5edd1-147">(This         is a simple example of a race condition.)</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="5edd1-148">Questo tipo è thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5edd1-148">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName="BindHandle">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5edd1-149">Associa un handle del sistema operativo al <see cref="T:System.Threading.ThreadPool" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-149">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BindHandle">
      <MemberSignature Language="C#" Value="public static bool BindHandle (IntPtr osHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool BindHandle(native int osHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BindHandle (osHandle As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool BindHandle(IntPtr osHandle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("ThreadPool.BindHandle(IntPtr) has been deprecated.  Please use ThreadPool.BindHandle(SafeHandle) instead.", false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="osHandle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="osHandle">
          <span data-ttu-id="5edd1-150">
            <see cref="T:System.IntPtr" /> che contiene l'handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-150">An <see cref="T:System.IntPtr" /> that holds the handle.</span>
          </span>
          <span data-ttu-id="5edd1-151">È necessario che l'handle sia stato aperto per operazioni di I/O sovrapposte nella parte non gestita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-151">The handle must have been opened for overlapped I/O on the unmanaged side.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5edd1-152">Associa un handle del sistema operativo al <see cref="T:System.Threading.ThreadPool" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-152">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5edd1-153">
            <see langword="true" /> se l'handle è associato; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-153">
              <see langword="true" /> if the handle is bound; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="5edd1-154">Il chiamante non dispone dell'autorizzazione richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-154">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="5edd1-155">Per poter chiamare codice non gestito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-155">for the ability to call unmanaged code.</span>
          </span>
          <span data-ttu-id="5edd1-156">Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-156">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="BindHandle">
      <MemberSignature Language="C#" Value="public static bool BindHandle (System.Runtime.InteropServices.SafeHandle osHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool BindHandle(class System.Runtime.InteropServices.SafeHandle osHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BindHandle (osHandle As SafeHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool BindHandle(System::Runtime::InteropServices::SafeHandle ^ osHandle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="osHandle" Type="System.Runtime.InteropServices.SafeHandle" />
      </Parameters>
      <Docs>
        <param name="osHandle">
          <span data-ttu-id="5edd1-157">Oggetto <see cref="T:System.Runtime.InteropServices.SafeHandle" /> che contiene l'handle del sistema operativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-157">A <see cref="T:System.Runtime.InteropServices.SafeHandle" /> that holds the operating system handle.</span>
          </span>
          <span data-ttu-id="5edd1-158">È necessario che l'handle sia stato aperto per operazioni di I/O sovrapposte nella parte non gestita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-158">The handle must have been opened for overlapped I/O on the unmanaged side.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5edd1-159">Associa un handle del sistema operativo al <see cref="T:System.Threading.ThreadPool" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-159">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5edd1-160">
            <see langword="true" /> se l'handle è associato; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-160">
              <see langword="true" /> if the handle is bound; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5edd1-161">Il `osHandle` parametro deve essere un <xref:Microsoft.Win32.SafeHandles.SafeFileHandle>, che deriva dalla classe astratta <xref:System.Runtime.InteropServices.SafeHandle> classe.</span><span class="sxs-lookup"><span data-stu-id="5edd1-161">The `osHandle` parameter should be a <xref:Microsoft.Win32.SafeHandles.SafeFileHandle>, which derives from the abstract <xref:System.Runtime.InteropServices.SafeHandle> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5edd1-162">
            <paramref name="osHandle" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-162">
              <paramref name="osHandle" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="5edd1-163">Per poter chiamare codice non gestito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-163">for the ability to call unmanaged code.</span>
          </span>
          <span data-ttu-id="5edd1-164">Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-164">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetAvailableThreads">
      <MemberSignature Language="C#" Value="public static void GetAvailableThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetAvailableThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetAvailableThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetAvailableThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="5edd1-165">Numero di thread di lavoro disponibili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-165">The number of available worker threads.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="5edd1-166">Numero di thread I/O asincroni disponibili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-166">The number of available asynchronous I/O threads.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5edd1-167">Recupera la differenza tra il numero massimo di thread del pool di thread restituito dal metodo <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> e il numero attualmente attivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-167">Retrieves the difference between the maximum number of thread pool threads returned by the <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> method, and the number currently active.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5edd1-168">Quando <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> restituisce, la variabile specificata dalla `workerThreads` contiene il numero di thread di lavoro aggiuntivo che può essere avviato e la variabile specificata dalla `completionPortThreads` contiene il numero di thread i/o asincroni che può essere avviato.</span><span class="sxs-lookup"><span data-stu-id="5edd1-168">When <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> returns, the variable specified by `workerThreads` contains the number of additional worker threads that can be started, and the variable specified by `completionPortThreads` contains the number of additional asynchronous I/O threads that can be started.</span></span>  
  
 <span data-ttu-id="5edd1-169">Se non sono presenti thread disponibili, richieste del pool di thread aggiuntivo rimangono in coda fino a quando non diventano disponibili thread di pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-169">If there are no available threads, additional thread pool requests remain queued until thread pool threads become available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5edd1-170">Nell'esempio seguente visualizza il numero di thread di lavoro e thread dei / o disponibile quando viene avviata un'app semplice.</span><span class="sxs-lookup"><span data-stu-id="5edd1-170">The following example displays the number of worker threads and I/O threads available when a simple app is started.</span></span>  
  
 [!code-csharp[System.Threading.ThreadPool.GetAvailableThreads#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CS/Example2.cs#2)]
 [!code-vb[System.Threading.ThreadPool.GetAvailableThreads#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/VB/Example2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxThreads">
      <MemberSignature Language="C#" Value="public static void GetMaxThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetMaxThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetMaxThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetMaxThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="5edd1-171">Numero massimo di thread di lavoro nel pool di thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-171">The maximum number of worker threads in the thread pool.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="5edd1-172">Numero massimo di thread I/O asincroni nel pool di thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-172">The maximum number of asynchronous I/O threads in the thread pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5edd1-173">Recupera il numero di richieste al pool di thread che possono essere attive contemporaneamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-173">Retrieves the number of requests to the thread pool that can be active concurrently.</span>
          </span>
          <span data-ttu-id="5edd1-174">Tutte le richieste al di fuori di tale numero rimangono in coda fino a quando non diventano disponibili thread di pool di thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-174">All requests above that number remain queued until thread pool threads become available.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5edd1-175">Quando <xref:System.Threading.ThreadPool.GetMaxThreads%2A> restituisce, la variabile specificata dalla `workerThreads` contiene il numero massimo di thread di lavoro consentiti nel pool di thread e la variabile specificata dalla `completionPortThreads` contiene il numero massimo di thread dei / o asincroni consentiti nel pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-175">When <xref:System.Threading.ThreadPool.GetMaxThreads%2A> returns, the variable specified by `workerThreads` contains the maximum number of worker threads allowed in the thread pool, and the variable specified by `completionPortThreads` contains the maximum number of asynchronous I/O threads allowed in the thread pool.</span></span>  
  
 <span data-ttu-id="5edd1-176">È possibile utilizzare il <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> metodo per determinare il numero effettivo di thread nel pool di thread in qualsiasi momento.</span><span class="sxs-lookup"><span data-stu-id="5edd1-176">You can use the <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> method to determine the actual number of threads in the thread pool at any given time.</span></span>  
  
 <span data-ttu-id="5edd1-177">È possibile utilizzare il <xref:System.Threading.ThreadPool.SetMaxThreads%2A> per impostare il numero massimo di thread di lavoro e i thread dei / o asincroni nel pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-177">You can use the <xref:System.Threading.ThreadPool.SetMaxThreads%2A> to set the maximum number of worker threads and asynchronous I/O threads in the thread pool.</span></span>  
  
 <span data-ttu-id="5edd1-178">È possibile accodare molti come memoria di sistema consente di richieste del pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-178">You can queue as many thread pool requests as system memory allows.</span></span> <span data-ttu-id="5edd1-179">Se sono presenti più richieste rispetto al thread del pool, le richieste aggiuntive rimangono in coda fino a quando non diventano disponibili thread di pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-179">If there are more requests than thread pool threads, the additional requests remain queued until thread pool threads become available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5edd1-180">Esempio di codice seguente viene illustrato come recuperare un conteggio del numero disponibile e massimo di thread nel pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-180">The following code example shows how to retrieve a count of the maximum and available number of threads in the thread pool.</span></span> <span data-ttu-id="5edd1-181">Un elemento di lavoro è in coda che utilizza `FileStream` scrivere in modo asincrono in due file.</span><span class="sxs-lookup"><span data-stu-id="5edd1-181">A work item is queued that uses `FileStream` to asynchronously write to two files.</span></span> <span data-ttu-id="5edd1-182">I metodi di callback sono temporizzati in si sovrappongono.</span><span class="sxs-lookup"><span data-stu-id="5edd1-182">The callback methods are timed to overlap.</span></span> <span data-ttu-id="5edd1-183">Un thread di lavoro gestisce l'elemento di lavoro e, a seconda della velocità e il numero di processori nel computer, uno o due thread di porta di completamento di gestire le operazioni di scrittura.</span><span class="sxs-lookup"><span data-stu-id="5edd1-183">A worker thread handles the work item and, depending on the speed and number of processors on the computer, one or two completion port threads handle the write operations.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetMinThreads">
      <MemberSignature Language="C#" Value="public static void GetMinThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetMinThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetMinThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetMinThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="5edd1-184">Quando il metodo viene restituito, contiene il numero minimo di thread di lavoro che il pool di thread crea su richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-184">When this method returns, contains the minimum number of worker threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="5edd1-185">Quando il metodo viene restituito, contiene il numero minimo di thread I/O asincroni che il pool di thread crea su richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-185">When this method returns, contains the minimum number of asynchronous I/O threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5edd1-186">Recupera il numero minimo di thread che il pool di thread crea, man mano che vengono effettuate nuove richieste, prima di passare a un algoritmo per la gestione della creazione e dell'eliminazione del thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-186">Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5edd1-187">Il pool di thread fornisce nuovi thread di lavoro o thread di completamento i/o su richiesta finché raggiunge il valore minimo per ogni categoria.</span><span class="sxs-lookup"><span data-stu-id="5edd1-187">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="5edd1-188">Per impostazione predefinita, il numero minimo di thread è il numero di processori in un sistema.</span><span class="sxs-lookup"><span data-stu-id="5edd1-188">By default, the minimum number of threads is set to the number of processors on a system.</span></span> <span data-ttu-id="5edd1-189">Quando viene raggiunto il valore minimo, il pool di thread può creare thread aggiuntivi in quella categoria o attendere il completamento di alcune attività.</span><span class="sxs-lookup"><span data-stu-id="5edd1-189">When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="5edd1-190">A partire dal [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], il pool di thread crea ed elimina i thread per ottimizzare la velocità effettiva, definita come il numero di attività completate per unità di tempo.</span><span class="sxs-lookup"><span data-stu-id="5edd1-190">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="5edd1-191">Un numero troppo ridotto di thread potrebbe non usare in modo ottimale le risorse disponibili, mentre troppi thread potrebbero aumentare il conflitto per le risorse.</span><span class="sxs-lookup"><span data-stu-id="5edd1-191">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5edd1-192">Quando la richiesta è bassa, il numero effettivo di thread del pool può scendere sotto i valori minimi.</span><span class="sxs-lookup"><span data-stu-id="5edd1-192">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5edd1-193">Nell'esempio seguente imposta il numero minimo di thread di lavoro a quattro e mantiene il valore originale per il numero minimo di thread di completamento i/o asincroni.</span><span class="sxs-lookup"><span data-stu-id="5edd1-193">The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="QueueUserWorkItem">
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5edd1-194">Accoda un metodo da eseguire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-194">Queues a method for execution.</span>
          </span>
          <span data-ttu-id="5edd1-195">Il metodo viene eseguito quando un thread del pool di thread diventa disponibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-195">The method executes when a thread pool thread becomes available.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="QueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem(class System.Threading.WaitCallback callBack) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem (callBack As WaitCallback) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool QueueUserWorkItem(System::Threading::WaitCallback ^ callBack);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <span data-ttu-id="5edd1-196">Oggetto <see cref="T:System.Threading.WaitCallback" /> che rappresenta il metodo da eseguire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-196">A <see cref="T:System.Threading.WaitCallback" /> that represents the method to be executed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5edd1-197">Accoda un metodo da eseguire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-197">Queues a method for execution.</span>
          </span>
          <span data-ttu-id="5edd1-198">Il metodo viene eseguito quando un thread del pool di thread diventa disponibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-198">The method executes when a thread pool thread becomes available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5edd1-199">
            <see langword="true" /> se il metodo viene accodato correttamente. Viene generata l'eccezione <see cref="T:System.NotSupportedException" /> se non è stato possibile accodare l'elemento di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-199">
              <see langword="true" /> if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5edd1-200">È possibile inserire i dati necessari per il metodo in coda i campi di istanza della classe in cui il metodo è definito o è possibile utilizzare il <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> overload che accetta un oggetto che contiene i dati necessari.</span><span class="sxs-lookup"><span data-stu-id="5edd1-200">You can place data required by the queued method in the instance fields of the class in which the method is defined, or you can use the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> overload that accepts an object containing the necessary data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5edd1-201">Gli utenti di Visual Basic è possono omettere il <xref:System.Threading.WaitCallback> costruttore e utilizzare semplicemente la `AddressOf` operatore quando si passa il metodo di callback da <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span><span class="sxs-lookup"><span data-stu-id="5edd1-201">Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span></span> <span data-ttu-id="5edd1-202">Visual Basic chiama automaticamente il costruttore di delegato corretto.</span><span class="sxs-lookup"><span data-stu-id="5edd1-202">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="5edd1-203">Informazioni sulla versione</span><span class="sxs-lookup"><span data-stu-id="5edd1-203">Version Information</span></span>  
 <span data-ttu-id="5edd1-204">In .NET Framework versione 2.0, il <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> valore della proprietà viene propagato ai thread di lavoro in coda tramite il <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="5edd1-204">In the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="5edd1-205">Nelle versioni precedenti, le informazioni dell'entità non viene propagate.</span><span class="sxs-lookup"><span data-stu-id="5edd1-205">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5edd1-206">L'esempio seguente usa il <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29> overload del metodo per accodare un'attività, che è rappresentato dal `ThreadProc` (metodo), da eseguire quando un thread diventa disponibile.</span><span class="sxs-lookup"><span data-stu-id="5edd1-206">The following example uses the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29> method overload to queue a task, which is represented by the `ThreadProc` method, to execute when a thread becomes available.</span></span> <span data-ttu-id="5edd1-207">Nessuna informazione di attività viene fornita con questo overload.</span><span class="sxs-lookup"><span data-stu-id="5edd1-207">No task information is supplied with this overload.</span></span> <span data-ttu-id="5edd1-208">Pertanto, le informazioni che sono disponibile per il `ThreadProc` metodo è limitato all'oggetto a cui appartiene il metodo.</span><span class="sxs-lookup"><span data-stu-id="5edd1-208">Therefore, the information that is available to the `ThreadProc` method is limited to the object the method belongs to.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5edd1-209">
            <paramref name="callBack" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-209">
              <paramref name="callBack" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5edd1-210">Common Language Runtime (CLR) è ospitato e l'host non supporta questa azione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-210">The common language runtime (CLR) is hosted, and the host does not support this action.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="QueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem(class System.Threading.WaitCallback callBack, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem (callBack As WaitCallback, state As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool QueueUserWorkItem(System::Threading::WaitCallback ^ callBack, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <span data-ttu-id="5edd1-211">
            <see cref="T:System.Threading.WaitCallback" /> che rappresenta il metodo da eseguire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-211">A <see cref="T:System.Threading.WaitCallback" /> representing the method to execute.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="5edd1-212">Oggetto contenente i dati che devono essere usati dal metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-212">An object containing data to be used by the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5edd1-213">Accoda un metodo da eseguire e specifica un oggetto che contiene i dati che dovranno essere usati dal metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-213">Queues a method for execution, and specifies an object containing data to be used by the method.</span>
          </span>
          <span data-ttu-id="5edd1-214">Il metodo viene eseguito quando un thread del pool di thread diventa disponibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-214">The method executes when a thread pool thread becomes available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5edd1-215">
            <see langword="true" /> se il metodo viene accodato correttamente. Viene generata l'eccezione <see cref="T:System.NotSupportedException" /> se non è stato possibile accodare l'elemento di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-215">
              <see langword="true" /> if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5edd1-216">Se il metodo di callback richiede dati complessi, è possibile definire una classe per contenere i dati.</span><span class="sxs-lookup"><span data-stu-id="5edd1-216">If the callback method requires complex data, you can define a class to contain the data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5edd1-217">Gli utenti di Visual Basic è possono omettere il <xref:System.Threading.WaitCallback> costruttore e utilizzare semplicemente la `AddressOf` operatore quando si passa il metodo di callback da <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span><span class="sxs-lookup"><span data-stu-id="5edd1-217">Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span></span> <span data-ttu-id="5edd1-218">Visual Basic chiama automaticamente il costruttore di delegato corretto.</span><span class="sxs-lookup"><span data-stu-id="5edd1-218">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="5edd1-219">Informazioni sulla versione</span><span class="sxs-lookup"><span data-stu-id="5edd1-219">Version Information</span></span>  
 <span data-ttu-id="5edd1-220">In .NET Framework versione 2.0, il <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> valore della proprietà viene propagato ai thread di lavoro in coda tramite il <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="5edd1-220">In the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="5edd1-221">Nelle versioni precedenti, le informazioni dell'entità non viene propagate.</span><span class="sxs-lookup"><span data-stu-id="5edd1-221">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5edd1-222">Nell'esempio seguente viene illustrato come creare un oggetto che contiene informazioni sull'attività.</span><span class="sxs-lookup"><span data-stu-id="5edd1-222">The following example shows how to create an object that contains task information.</span></span> <span data-ttu-id="5edd1-223">Viene inoltre illustrato come passare tale oggetto a un'attività in coda per l'esecuzione dal pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-223">It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5edd1-224">Common Language Runtime (CLR) è ospitato e l'host non supporta questa azione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-224">The common language runtime (CLR) is hosted, and the host does not support this action.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5edd1-225">
            <paramref name="callBack" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-225">
              <paramref name="callBack" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="QueueUserWorkItem&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem&lt;TState&gt; (Action&lt;TState&gt; callBack, TState state, bool preferLocal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem&lt;TState&gt;(class System.Action`1&lt;!!TState&gt; callBack, !!TState state, bool preferLocal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem(Of TState) (callBack As Action(Of TState), state As TState, preferLocal As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; static bool QueueUserWorkItem(Action&lt;TState&gt; ^ callBack, TState state, bool preferLocal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callBack" Type="System.Action&lt;TState&gt;" />
        <Parameter Name="state" Type="TState" />
        <Parameter Name="preferLocal" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TState">To be added.</typeparam>
        <param name="callBack">To be added.</param>
        <param name="state">To be added.</param>
        <param name="preferLocal">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterWaitForSingleObject">
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5edd1-226">Registra un delegato in attesa di un <see cref="T:System.Threading.WaitHandle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-226">Registers a delegate that is waiting for a <see cref="T:System.Threading.WaitHandle" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Integer, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="5edd1-227">
            <see cref="T:System.Threading.WaitHandle" /> da registrare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-227">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="5edd1-228">Usare una classe <see cref="T:System.Threading.WaitHandle" /> diversa da <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-228">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="5edd1-229">Delegato <see cref="T:System.Threading.WaitOrTimerCallback" /> da chiamare quando il parametro <c>waitObject</c> riceve un segnale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-229">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="5edd1-230">Oggetto passato al delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-230">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="5edd1-231">Timeout in millisecondi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-231">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="5edd1-232">Se il parametro <c>millisecondsTimeOutInterval</c> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-232">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="5edd1-233">Se <c>millisecondsTimeOutInterval</c> è -1, l'intervallo di timeout della funzione non termina mai.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-233">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="5edd1-234">Viene restituito <see langword="true" /> per indicare che il thread non attenderà più in base al parametro <c>waitObject</c> dopo la chiamata al delegato. <see langword="false" /> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-234">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5edd1-235">Registra un delegato per l'attesa di un oggetto <see cref="T:System.Threading.WaitHandle" />, specificando un valore intero con segno a 32 bit per il timeout in millisecondi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-235">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit signed integer for the time-out in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5edd1-236">
            <see cref="T:System.Threading.RegisteredWaitHandle" /> che incapsula l'handle nativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-236">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5edd1-237">Quando si è finito utilizzando il <xref:System.Threading.RegisteredWaitHandle> restituito da questo metodo, chiamare il relativo <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodo per rilasciare i riferimenti all'handle di attesa.</span><span class="sxs-lookup"><span data-stu-id="5edd1-237">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="5edd1-238">È consigliabile chiamare sempre il <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> (metodo), anche se si specifica `true` per `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="5edd1-238">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="5edd1-239">Funzionamento di Garbage collection più efficiente se si chiama il <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodo invece che a seconda del finalizzatore dell'handle di attesa registrata.</span><span class="sxs-lookup"><span data-stu-id="5edd1-239">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="5edd1-240">Il <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metodo Accoda il delegato specificato al pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-240">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="5edd1-241">Il delegato di un thread di lavoro verrà eseguito quando si verifica una delle operazioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="5edd1-241">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="5edd1-242">L'oggetto specificato è in stato segnalato.</span><span class="sxs-lookup"><span data-stu-id="5edd1-242">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="5edd1-243">L'intervallo di timeout scade.</span><span class="sxs-lookup"><span data-stu-id="5edd1-243">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="5edd1-244">Il <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metodo controlla lo stato corrente dell'oggetto specificato <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="5edd1-244">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="5edd1-245">Se non è segnalato lo stato dell'oggetto, il metodo registra un'operazione di attesa.</span><span class="sxs-lookup"><span data-stu-id="5edd1-245">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="5edd1-246">L'operazione di attesa viene eseguita da un thread dal pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-246">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="5edd1-247">Il delegato viene eseguito da un thread di lavoro quando viene segnalato lo stato dell'oggetto o l'intervallo di timeout scade.</span><span class="sxs-lookup"><span data-stu-id="5edd1-247">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="5edd1-248">Se il `timeOutInterval` parametro non è 0 (zero) e `executeOnlyOnce` parametro `false`, il timer viene reimpostato ogni volta che l'evento viene segnalato o l'intervallo di timeout scade.</span><span class="sxs-lookup"><span data-stu-id="5edd1-248">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5edd1-249">Utilizzando un <xref:System.Threading.Mutex> per `waitObject` non forniscono l'esclusione reciproca per i metodi di callback in quanto l'API Win32 sottostante utilizza il valore predefinito `WT_EXECUTEDEFAULT` flag, pertanto ogni callback viene inviato su un thread di pool di thread separato.</span><span class="sxs-lookup"><span data-stu-id="5edd1-249">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="5edd1-250">Invece di un <xref:System.Threading.Mutex>, utilizzare un <xref:System.Threading.Semaphore> con un conteggio massimo di 1.</span><span class="sxs-lookup"><span data-stu-id="5edd1-250">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="5edd1-251">Per annullare l'operazione di attesa, chiamare il <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="5edd1-251">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="5edd1-252">Il thread di attesa utilizza Win32 `WaitForMultipleObjects` funzione per monitorare le operazioni di attesa registrata.</span><span class="sxs-lookup"><span data-stu-id="5edd1-252">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="5edd1-253">Pertanto, se è necessario utilizzare lo stesso handle nativo del sistema operativo in più chiamate al metodo <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, è necessario duplicare l'handle Win32 utilizzando `DuplicateHandle` (funzione).</span><span class="sxs-lookup"><span data-stu-id="5edd1-253">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="5edd1-254">Si noti che deve eseguire il pulse un oggetto evento passato a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, perché il thread di attesa potrebbe non rilevare che l'evento viene segnalato prima della reimpostazione.</span><span class="sxs-lookup"><span data-stu-id="5edd1-254">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="5edd1-255">Prima della restituzione, la funzione modifica lo stato di alcuni tipi di oggetti di sincronizzazione.</span><span class="sxs-lookup"><span data-stu-id="5edd1-255">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="5edd1-256">La modifica si verifica solo per l'oggetto il cui stato segnalato ha provocato la condizione di attesa di essere soddisfatto.</span><span class="sxs-lookup"><span data-stu-id="5edd1-256">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="5edd1-257">Ad esempio, il conteggio del semaforo viene ridotta di uno.</span><span class="sxs-lookup"><span data-stu-id="5edd1-257">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="5edd1-258">Informazioni sulla versione</span><span class="sxs-lookup"><span data-stu-id="5edd1-258">Version Information</span></span>  
 <span data-ttu-id="5edd1-259">A partire da .NET Framework versione 2.0, il <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> valore della proprietà viene propagato ai thread di lavoro in coda tramite il <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="5edd1-259">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="5edd1-260">Nelle versioni precedenti, le informazioni dell'entità non viene propagate.</span><span class="sxs-lookup"><span data-stu-id="5edd1-260">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5edd1-261">Il parametro <paramref name="millisecondsTimeOutInterval" /> è minore di -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-261">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int64 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Long, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int64" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="5edd1-262">
            <see cref="T:System.Threading.WaitHandle" /> da registrare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-262">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="5edd1-263">Usare una classe <see cref="T:System.Threading.WaitHandle" /> diversa da <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-263">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="5edd1-264">Delegato <see cref="T:System.Threading.WaitOrTimerCallback" /> da chiamare quando il parametro <c>waitObject</c> riceve un segnale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-264">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="5edd1-265">Oggetto passato al delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-265">The object passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="5edd1-266">Timeout in millisecondi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-266">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="5edd1-267">Se il parametro <c>millisecondsTimeOutInterval</c> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-267">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="5edd1-268">Se <c>millisecondsTimeOutInterval</c> è -1, l'intervallo di timeout della funzione non termina mai.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-268">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="5edd1-269">Viene restituito <see langword="true" /> per indicare che il thread non attenderà più in base al parametro <c>waitObject</c> dopo la chiamata al delegato. <see langword="false" /> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-269">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5edd1-270">Registra un delegato per l'attesa di un oggetto <see cref="T:System.Threading.WaitHandle" />, specificando un valore intero con segno a 64 bit per il timeout in millisecondi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-270">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5edd1-271">
            <see cref="T:System.Threading.RegisteredWaitHandle" /> che incapsula l'handle nativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-271">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5edd1-272">Quando si è finito utilizzando il <xref:System.Threading.RegisteredWaitHandle> restituito da questo metodo, chiamare il relativo <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodo per rilasciare i riferimenti all'handle di attesa.</span><span class="sxs-lookup"><span data-stu-id="5edd1-272">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="5edd1-273">È consigliabile chiamare sempre il <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> (metodo), anche se si specifica `true` per `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="5edd1-273">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="5edd1-274">Funzionamento di Garbage collection più efficiente se si chiama il <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodo invece che a seconda del finalizzatore dell'handle di attesa registrata.</span><span class="sxs-lookup"><span data-stu-id="5edd1-274">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="5edd1-275">Il <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metodo Accoda il delegato specificato al pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-275">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="5edd1-276">Il delegato di un thread di lavoro verrà eseguito quando si verifica una delle operazioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="5edd1-276">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="5edd1-277">L'oggetto specificato è in stato segnalato.</span><span class="sxs-lookup"><span data-stu-id="5edd1-277">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="5edd1-278">L'intervallo di timeout scade.</span><span class="sxs-lookup"><span data-stu-id="5edd1-278">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="5edd1-279">Il <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metodo controlla lo stato corrente dell'oggetto specificato <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="5edd1-279">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="5edd1-280">Se non è segnalato lo stato dell'oggetto, il metodo registra un'operazione di attesa.</span><span class="sxs-lookup"><span data-stu-id="5edd1-280">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="5edd1-281">L'operazione di attesa viene eseguita da un thread dal pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-281">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="5edd1-282">Il delegato viene eseguito da un thread di lavoro quando viene segnalato lo stato dell'oggetto o l'intervallo di timeout scade.</span><span class="sxs-lookup"><span data-stu-id="5edd1-282">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="5edd1-283">Se il `timeOutInterval` parametro non è 0 (zero) e `executeOnlyOnce` parametro `false`, il timer viene reimpostato ogni volta che l'evento viene segnalato o l'intervallo di timeout scade.</span><span class="sxs-lookup"><span data-stu-id="5edd1-283">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5edd1-284">Utilizzando un <xref:System.Threading.Mutex> per `waitObject` non forniscono l'esclusione reciproca per i metodi di callback in quanto l'API Win32 sottostante utilizza il valore predefinito `WT_EXECUTEDEFAULT` flag, pertanto ogni callback viene inviato su un thread di pool di thread separato.</span><span class="sxs-lookup"><span data-stu-id="5edd1-284">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="5edd1-285">Invece di un <xref:System.Threading.Mutex>, utilizzare un <xref:System.Threading.Semaphore> con un conteggio massimo di 1.</span><span class="sxs-lookup"><span data-stu-id="5edd1-285">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="5edd1-286">Per annullare l'operazione di attesa, chiamare il <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="5edd1-286">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="5edd1-287">Il thread di attesa utilizza Win32 `WaitForMultipleObjects` funzione per monitorare le operazioni di attesa registrata.</span><span class="sxs-lookup"><span data-stu-id="5edd1-287">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="5edd1-288">Pertanto, se è necessario utilizzare lo stesso handle nativo del sistema operativo in più chiamate al metodo <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, è necessario duplicare l'handle Win32 utilizzando `DuplicateHandle` (funzione).</span><span class="sxs-lookup"><span data-stu-id="5edd1-288">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="5edd1-289">Si noti che deve eseguire il pulse un oggetto evento passato a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, perché il thread di attesa potrebbe non rilevare che l'evento viene segnalato prima della reimpostazione.</span><span class="sxs-lookup"><span data-stu-id="5edd1-289">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="5edd1-290">Prima della restituzione, la funzione modifica lo stato di alcuni tipi di oggetti di sincronizzazione.</span><span class="sxs-lookup"><span data-stu-id="5edd1-290">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="5edd1-291">La modifica si verifica solo per l'oggetto il cui stato segnalato ha provocato la condizione di attesa di essere soddisfatto.</span><span class="sxs-lookup"><span data-stu-id="5edd1-291">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="5edd1-292">Ad esempio, il conteggio del semaforo viene ridotta di uno.</span><span class="sxs-lookup"><span data-stu-id="5edd1-292">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="5edd1-293">Informazioni sulla versione</span><span class="sxs-lookup"><span data-stu-id="5edd1-293">Version Information</span></span>  
 <span data-ttu-id="5edd1-294">A partire da .NET Framework versione 2.0, il <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> valore della proprietà viene propagato ai thread di lavoro in coda tramite il <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="5edd1-294">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="5edd1-295">Nelle versioni precedenti, le informazioni dell'entità non viene propagate.</span><span class="sxs-lookup"><span data-stu-id="5edd1-295">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5edd1-296">Il parametro <paramref name="millisecondsTimeOutInterval" /> è minore di -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-296">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, valuetype System.TimeSpan timeout, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, timeout As TimeSpan, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="5edd1-297">
            <see cref="T:System.Threading.WaitHandle" /> da registrare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-297">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="5edd1-298">Usare una classe <see cref="T:System.Threading.WaitHandle" /> diversa da <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-298">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="5edd1-299">Delegato <see cref="T:System.Threading.WaitOrTimerCallback" /> da chiamare quando il parametro <c>waitObject</c> riceve un segnale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-299">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="5edd1-300">Oggetto passato al delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-300">The object passed to the delegate.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="5edd1-301">Il timeout rappresentato da un valore <see cref="T:System.TimeSpan" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-301">The time-out represented by a <see cref="T:System.TimeSpan" />.</span>
          </span>
          <span data-ttu-id="5edd1-302">Se <c>timeout</c> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-302">If <c>timeout</c> is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="5edd1-303">Se <c>timeout</c> è -1, l'intervallo di timeout della funzione non termina mai.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-303">If <c>timeout</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="5edd1-304">Viene restituito <see langword="true" /> per indicare che il thread non attenderà più in base al parametro <c>waitObject</c> dopo la chiamata al delegato. <see langword="false" /> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-304">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5edd1-305">Registra un delegato per l'attesa di un oggetto <see cref="T:System.Threading.WaitHandle" />, specificando un valore <see cref="T:System.TimeSpan" /> per il timeout.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-305">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5edd1-306">
            <see cref="T:System.Threading.RegisteredWaitHandle" /> che incapsula l'handle nativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-306">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5edd1-307">Quando si è finito utilizzando il <xref:System.Threading.RegisteredWaitHandle> restituito da questo metodo, chiamare il relativo <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodo per rilasciare i riferimenti all'handle di attesa.</span><span class="sxs-lookup"><span data-stu-id="5edd1-307">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="5edd1-308">È consigliabile chiamare sempre il <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> (metodo), anche se si specifica `true` per `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="5edd1-308">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="5edd1-309">Funzionamento di Garbage collection più efficiente se si chiama il <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodo invece che a seconda del finalizzatore dell'handle di attesa registrata.</span><span class="sxs-lookup"><span data-stu-id="5edd1-309">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="5edd1-310">Il <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metodo Accoda il delegato specificato al pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-310">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="5edd1-311">Il delegato di un thread di lavoro verrà eseguito quando si verifica una delle operazioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="5edd1-311">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="5edd1-312">L'oggetto specificato è in stato segnalato.</span><span class="sxs-lookup"><span data-stu-id="5edd1-312">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="5edd1-313">L'intervallo di timeout scade.</span><span class="sxs-lookup"><span data-stu-id="5edd1-313">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="5edd1-314">Il <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metodo controlla lo stato corrente dell'oggetto specificato <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="5edd1-314">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="5edd1-315">Se non è segnalato lo stato dell'oggetto, il metodo registra un'operazione di attesa.</span><span class="sxs-lookup"><span data-stu-id="5edd1-315">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="5edd1-316">L'operazione di attesa viene eseguita da un thread dal pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-316">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="5edd1-317">Il delegato viene eseguito da un thread di lavoro quando viene segnalato lo stato dell'oggetto o l'intervallo di timeout scade.</span><span class="sxs-lookup"><span data-stu-id="5edd1-317">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="5edd1-318">Se il `timeOutInterval` parametro non è 0 (zero) e `executeOnlyOnce` parametro `false`, il timer viene reimpostato ogni volta che l'evento viene segnalato o l'intervallo di timeout scade.</span><span class="sxs-lookup"><span data-stu-id="5edd1-318">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5edd1-319">Utilizzando un <xref:System.Threading.Mutex> per `waitObject` non forniscono l'esclusione reciproca per i metodi di callback in quanto l'API Win32 sottostante utilizza il valore predefinito `WT_EXECUTEDEFAULT` flag, pertanto ogni callback viene inviato su un thread di pool di thread separato.</span><span class="sxs-lookup"><span data-stu-id="5edd1-319">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="5edd1-320">Invece di un <xref:System.Threading.Mutex>, utilizzare un <xref:System.Threading.Semaphore> con un conteggio massimo di 1.</span><span class="sxs-lookup"><span data-stu-id="5edd1-320">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="5edd1-321">Per annullare l'operazione di attesa, chiamare il <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="5edd1-321">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="5edd1-322">Il thread di attesa utilizza Win32 `WaitForMultipleObjects` funzione per monitorare le operazioni di attesa registrata.</span><span class="sxs-lookup"><span data-stu-id="5edd1-322">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="5edd1-323">Pertanto, se è necessario utilizzare lo stesso handle nativo del sistema operativo in più chiamate al metodo <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, è necessario duplicare l'handle Win32 utilizzando `DuplicateHandle` (funzione).</span><span class="sxs-lookup"><span data-stu-id="5edd1-323">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="5edd1-324">Si noti che deve eseguire il pulse un oggetto evento passato a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, perché il thread di attesa potrebbe non rilevare che l'evento viene segnalato prima della reimpostazione.</span><span class="sxs-lookup"><span data-stu-id="5edd1-324">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="5edd1-325">Prima della restituzione, la funzione modifica lo stato di alcuni tipi di oggetti di sincronizzazione.</span><span class="sxs-lookup"><span data-stu-id="5edd1-325">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="5edd1-326">La modifica si verifica solo per l'oggetto il cui stato segnalato ha provocato la condizione di attesa di essere soddisfatto.</span><span class="sxs-lookup"><span data-stu-id="5edd1-326">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="5edd1-327">Ad esempio, il conteggio del semaforo viene ridotta di uno.</span><span class="sxs-lookup"><span data-stu-id="5edd1-327">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="5edd1-328">Informazioni sulla versione</span><span class="sxs-lookup"><span data-stu-id="5edd1-328">Version Information</span></span>  
 <span data-ttu-id="5edd1-329">A partire da .NET Framework versione 2.0, il <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> valore della proprietà viene propagato ai thread di lavoro in coda tramite il <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="5edd1-329">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="5edd1-330">Nelle versioni precedenti, le informazioni dell'entità non viene propagate.</span><span class="sxs-lookup"><span data-stu-id="5edd1-330">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5edd1-331">Il parametro <paramref name="timeout" /> è minore di -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-331">The <paramref name="timeout" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5edd1-332">Il parametro <paramref name="timeout" /> è maggiore di <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-332">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, unsigned int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As UInteger, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, System::UInt32 millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.UInt32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="5edd1-333">
            <see cref="T:System.Threading.WaitHandle" /> da registrare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-333">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="5edd1-334">Usare una classe <see cref="T:System.Threading.WaitHandle" /> diversa da <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-334">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="5edd1-335">Delegato <see cref="T:System.Threading.WaitOrTimerCallback" /> da chiamare quando il parametro <c>waitObject</c> riceve un segnale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-335">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="5edd1-336">Oggetto passato al delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-336">The object passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="5edd1-337">Timeout in millisecondi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-337">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="5edd1-338">Se il parametro <c>millisecondsTimeOutInterval</c> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-338">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="5edd1-339">Se <c>millisecondsTimeOutInterval</c> è -1, l'intervallo di timeout della funzione non termina mai.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-339">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="5edd1-340">Viene restituito <see langword="true" /> per indicare che il thread non attenderà più in base al parametro <c>waitObject</c> dopo la chiamata al delegato. <see langword="false" /> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-340">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5edd1-341">Registra un delegato per l'attesa di un oggetto <see cref="T:System.Threading.WaitHandle" />, specificando un intero senza segno a 32 bit per il timeout in millisecondi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-341">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5edd1-342">Oggetto <see cref="T:System.Threading.RegisteredWaitHandle" /> che può essere usato per annullare l'operazione di attesa registrata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-342">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5edd1-343">Quando si è finito utilizzando il <xref:System.Threading.RegisteredWaitHandle> restituito da questo metodo, chiamare il relativo <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodo per rilasciare i riferimenti all'handle di attesa.</span><span class="sxs-lookup"><span data-stu-id="5edd1-343">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="5edd1-344">È consigliabile chiamare sempre il <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> (metodo), anche se si specifica `true` per `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="5edd1-344">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="5edd1-345">Funzionamento di Garbage collection più efficiente se si chiama il <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodo invece che a seconda del finalizzatore dell'handle di attesa registrata.</span><span class="sxs-lookup"><span data-stu-id="5edd1-345">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="5edd1-346">Il <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metodo Accoda il delegato specificato al pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-346">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="5edd1-347">Il delegato di un thread di lavoro verrà eseguito quando si verifica una delle operazioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="5edd1-347">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="5edd1-348">L'oggetto specificato è in stato segnalato.</span><span class="sxs-lookup"><span data-stu-id="5edd1-348">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="5edd1-349">L'intervallo di timeout scade.</span><span class="sxs-lookup"><span data-stu-id="5edd1-349">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="5edd1-350">Il <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metodo controlla lo stato corrente dell'oggetto specificato <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="5edd1-350">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="5edd1-351">Se non è segnalato lo stato dell'oggetto, il metodo registra un'operazione di attesa.</span><span class="sxs-lookup"><span data-stu-id="5edd1-351">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="5edd1-352">L'operazione di attesa viene eseguita da un thread dal pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-352">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="5edd1-353">Il delegato viene eseguito da un thread di lavoro quando viene segnalato lo stato dell'oggetto o l'intervallo di timeout scade.</span><span class="sxs-lookup"><span data-stu-id="5edd1-353">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="5edd1-354">Se il `timeOutInterval` parametro non è 0 (zero) e `executeOnlyOnce` parametro `false`, il timer viene reimpostato ogni volta che l'evento viene segnalato o l'intervallo di timeout scade.</span><span class="sxs-lookup"><span data-stu-id="5edd1-354">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5edd1-355">Utilizzando un <xref:System.Threading.Mutex> per `waitObject` non forniscono l'esclusione reciproca per i metodi di callback in quanto l'API Win32 sottostante utilizza il valore predefinito `WT_EXECUTEDEFAULT` flag, pertanto ogni callback viene inviato su un thread di pool di thread separato.</span><span class="sxs-lookup"><span data-stu-id="5edd1-355">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="5edd1-356">Invece di un <xref:System.Threading.Mutex>, utilizzare un <xref:System.Threading.Semaphore> con un conteggio massimo di 1.</span><span class="sxs-lookup"><span data-stu-id="5edd1-356">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="5edd1-357">Per annullare l'operazione di attesa, chiamare il <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="5edd1-357">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="5edd1-358">Il thread di attesa utilizza Win32 `WaitForMultipleObjects` funzione per monitorare le operazioni di attesa registrata.</span><span class="sxs-lookup"><span data-stu-id="5edd1-358">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="5edd1-359">Pertanto, se è necessario utilizzare lo stesso handle nativo del sistema operativo in più chiamate al metodo <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, è necessario duplicare l'handle Win32 utilizzando `DuplicateHandle` (funzione).</span><span class="sxs-lookup"><span data-stu-id="5edd1-359">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="5edd1-360">Si noti che deve eseguire il pulse un oggetto evento passato a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, perché il thread di attesa potrebbe non rilevare che l'evento viene segnalato prima della reimpostazione.</span><span class="sxs-lookup"><span data-stu-id="5edd1-360">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="5edd1-361">Prima della restituzione, la funzione modifica lo stato di alcuni tipi di oggetti di sincronizzazione.</span><span class="sxs-lookup"><span data-stu-id="5edd1-361">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="5edd1-362">La modifica si verifica solo per l'oggetto il cui stato segnalato ha provocato la condizione di attesa di essere soddisfatto.</span><span class="sxs-lookup"><span data-stu-id="5edd1-362">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="5edd1-363">Ad esempio, il conteggio del semaforo viene ridotta di uno.</span><span class="sxs-lookup"><span data-stu-id="5edd1-363">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="5edd1-364">Informazioni sulla versione</span><span class="sxs-lookup"><span data-stu-id="5edd1-364">Version Information</span></span>  
 <span data-ttu-id="5edd1-365">A partire da .NET Framework versione 2.0, il <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> valore della proprietà viene propagato ai thread di lavoro in coda tramite il <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="5edd1-365">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="5edd1-366">Nelle versioni precedenti, le informazioni dell'entità non viene propagate.</span><span class="sxs-lookup"><span data-stu-id="5edd1-366">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5edd1-367">Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metodo per eseguire un metodo di callback specificato quando viene segnalato un handle di attesa specificato.</span><span class="sxs-lookup"><span data-stu-id="5edd1-367">The following example shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="5edd1-368">In questo esempio, il metodo di callback è `WaitProc`, e l'handle di attesa è un <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="5edd1-368">In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="5edd1-369">Nell'esempio viene definito un `TaskInfo` classe per contenere le informazioni che viene passate al callback durante l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="5edd1-369">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="5edd1-370">Nell'esempio viene creato un `TaskInfo` dell'oggetto e lo assegna alcuni dati di tipo stringa.</span><span class="sxs-lookup"><span data-stu-id="5edd1-370">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="5edd1-371">Il <xref:System.Threading.RegisteredWaitHandle> restituito dal <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> assegnare al metodo il `Handle` campo il `TaskInfo` oggetto in modo che il metodo di callback ha accesso al <xref:System.Threading.RegisteredWaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="5edd1-371">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="5edd1-372">Oltre a specificare `TaskInfo` come oggetto da passare al metodo di callback, la chiamata al <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metodo consente di specificare il <xref:System.Threading.AutoResetEvent> che l'attività dovrà attendere un <xref:System.Threading.WaitOrTimerCallback> delegato che rappresenta il `WaitProc` il metodo di callback, un un secondo intervallo di timeout e più callback.</span><span class="sxs-lookup"><span data-stu-id="5edd1-372">In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="5edd1-373">Quando il thread principale segnala il <xref:System.Threading.AutoResetEvent> chiamando il relativo <xref:System.Threading.EventWaitHandle.Set%2A> (metodo), il <xref:System.Threading.WaitOrTimerCallback> delegato viene richiamato.</span><span class="sxs-lookup"><span data-stu-id="5edd1-373">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="5edd1-374">Il `WaitProc` metodo test <xref:System.Threading.RegisteredWaitHandle> per determinare se si è verificato un timeout.</span><span class="sxs-lookup"><span data-stu-id="5edd1-374">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a time-out occurred.</span></span> <span data-ttu-id="5edd1-375">Se è stato richiamato il callback, perché è stato segnalato l'handle di attesa, il `WaitProc` metodo annulla la registrazione di <xref:System.Threading.RegisteredWaitHandle>, l'arresto di callback aggiuntivi.</span><span class="sxs-lookup"><span data-stu-id="5edd1-375">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping additional callbacks.</span></span> <span data-ttu-id="5edd1-376">Nel caso di un timeout, l'attività continua ad attendere.</span><span class="sxs-lookup"><span data-stu-id="5edd1-376">In the case of a time-out, the task continues to wait.</span></span> <span data-ttu-id="5edd1-377">Il `WaitProc` metodo termina con la stampa di un messaggio nella console.</span><span class="sxs-lookup"><span data-stu-id="5edd1-377">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5edd1-378">Il parametro <paramref name="millisecondsTimeOutInterval" /> è minore di -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-378">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetMaxThreads">
      <MemberSignature Language="C#" Value="public static bool SetMaxThreads (int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetMaxThreads(int32 workerThreads, int32 completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetMaxThreads (workerThreads As Integer, completionPortThreads As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetMaxThreads(int workerThreads, int completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" />
        <Parameter Name="completionPortThreads" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="5edd1-379">Numero massimo di thread di lavoro nel pool di thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-379">The maximum number of worker threads in the thread pool.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="5edd1-380">Numero massimo di thread I/O asincroni nel pool di thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-380">The maximum number of asynchronous I/O threads in the thread pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5edd1-381">Imposta il numero di richieste al pool di thread che possono essere attivate contemporaneamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-381">Sets the number of requests to the thread pool that can be active concurrently.</span>
          </span>
          <span data-ttu-id="5edd1-382">Tutte le richieste al di fuori di tale numero rimangono in coda fino a quando non diventano disponibili thread di pool di thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-382">All requests above that number remain queued until thread pool threads become available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5edd1-383">
            <see langword="true" /> se la modifica ha esito positivo; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-383">
              <see langword="true" /> if the change is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5edd1-384">Non è possibile impostare il numero massimo di thread di lavoro o thread di completamento i/o su un numero inferiore al numero di processori nel computer.</span><span class="sxs-lookup"><span data-stu-id="5edd1-384">You cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the number of processors on the computer.</span></span> <span data-ttu-id="5edd1-385">Per determinare il numero di processori siano presente, recuperare il valore della <xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType> proprietà.</span><span class="sxs-lookup"><span data-stu-id="5edd1-385">To determine how many processors are present, retrieve the value of the <xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="5edd1-386">Inoltre, non è possibile impostare il numero massimo di thread di lavoro o thread di completamento i/o su un numero inferiore al numero corrispondente minimo di thread di lavoro o thread di completamento i/o.</span><span class="sxs-lookup"><span data-stu-id="5edd1-386">In addition, you cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the corresponding minimum number of worker threads or I/O completion threads.</span></span> <span data-ttu-id="5edd1-387">Per determinare la dimensione del pool di thread minimo, chiamare il <xref:System.Threading.ThreadPool.GetMinThreads%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="5edd1-387">To determine the minimum thread pool size,  call the <xref:System.Threading.ThreadPool.GetMinThreads%2A> method.</span></span>  
  
 <span data-ttu-id="5edd1-388">Se è ospitato in common language runtime, ad esempio da Internet Information Services (IIS) o SQL Server, l'host può limitare o evitare che le modifiche per la dimensione del pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-388">If the common language runtime is hosted, for example by Internet Information Services (IIS) or SQL Server, the host can limit or prevent changes to the thread pool size.</span></span>  
  
 <span data-ttu-id="5edd1-389">Prestare attenzione quando si modifica il numero massimo di thread nel pool di thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-389">Use caution when changing the maximum number of threads in the thread pool.</span></span> <span data-ttu-id="5edd1-390">Mentre il codice può risultare utile, la modifica potrebbe avere effetti negativi sulle librerie di codice che si utilizza.</span><span class="sxs-lookup"><span data-stu-id="5edd1-390">While your code might benefit, the changes might have an adverse effect on code libraries you use.</span></span>  
  
 <span data-ttu-id="5edd1-391">Impostare la dimensione del pool di thread troppo elevato può causare problemi di prestazioni.</span><span class="sxs-lookup"><span data-stu-id="5edd1-391">Setting the thread pool size too large can cause performance problems.</span></span> <span data-ttu-id="5edd1-392">Se un numero eccessivo di thread sono in esecuzione nello stesso momento, l'attività di cambio overhead diventa un fattore significativo.</span><span class="sxs-lookup"><span data-stu-id="5edd1-392">If too many threads are executing at the same time, the task switching overhead becomes a significant factor.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="5edd1-393">per consentire ai thread di controllo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-393">for the ability to control threads.</span>
          </span>
          <span data-ttu-id="5edd1-394">Valore di autorizzazione: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-394">Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="SetMinThreads">
      <MemberSignature Language="C#" Value="public static bool SetMinThreads (int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetMinThreads(int32 workerThreads, int32 completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetMinThreads (workerThreads As Integer, completionPortThreads As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetMinThreads(int workerThreads, int completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" />
        <Parameter Name="completionPortThreads" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="5edd1-395">Il numero minimo di thread di lavoro che vengono creati su richiesta dal pool di thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-395">The minimum number of worker threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="5edd1-396">Il numero minimo di thread I/O asincroni che vengono creati su richiesta dal pool di thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-396">The minimum number of asynchronous I/O threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5edd1-397">Imposta il numero minimo di thread che il pool di thread crea, man mano che vengono effettuate nuove richieste, prima di passare a un algoritmo per la gestione della creazione e dell'eliminazione del thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-397">Sets the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5edd1-398">
            <see langword="true" /> se la modifica ha esito positivo; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-398">
              <see langword="true" /> if the change is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5edd1-399">Il pool di thread fornisce nuovi thread di lavoro o thread di completamento i/o su richiesta finché raggiunge il valore minimo per ogni categoria.</span><span class="sxs-lookup"><span data-stu-id="5edd1-399">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="5edd1-400">Quando viene raggiunto il valore minimo, il pool di thread può creare thread aggiuntivi in quella categoria o attendere il completamento di alcune attività.</span><span class="sxs-lookup"><span data-stu-id="5edd1-400">When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="5edd1-401">A partire dal [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], il pool di thread crea ed elimina i thread per ottimizzare la velocità effettiva, definita come il numero di attività completate per unità di tempo.</span><span class="sxs-lookup"><span data-stu-id="5edd1-401">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="5edd1-402">Un numero troppo ridotto di thread potrebbe non usare in modo ottimale le risorse disponibili, mentre troppi thread potrebbero aumentare il conflitto per le risorse.</span><span class="sxs-lookup"><span data-stu-id="5edd1-402">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
 <span data-ttu-id="5edd1-403">Quando la richiesta è bassa, il numero effettivo di thread del pool può scendere sotto i valori minimi.</span><span class="sxs-lookup"><span data-stu-id="5edd1-403">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
 <span data-ttu-id="5edd1-404">Se si specifica un numero negativo o un numero maggiore del numero massimo di thread di pool di thread attivi (ottenuto utilizzando <xref:System.Threading.ThreadPool.GetMaxThreads%2A>), <xref:System.Threading.ThreadPool.SetMinThreads%2A> restituisce `false` e non viene modificato uno dei valori minimi.</span><span class="sxs-lookup"><span data-stu-id="5edd1-404">If you specify a negative number or a number larger than the maximum number of active thread pool threads (obtained using <xref:System.Threading.ThreadPool.GetMaxThreads%2A>), <xref:System.Threading.ThreadPool.SetMinThreads%2A> returns `false` and does not change either of the minimum values.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="5edd1-405">Per impostazione predefinita, il numero minimo di thread è il numero di processori in un sistema.</span><span class="sxs-lookup"><span data-stu-id="5edd1-405">By default, the minimum number of threads is set to the number of processors on a system.</span></span> <span data-ttu-id="5edd1-406">È possibile utilizzare il <xref:System.Threading.ThreadPool.SetMinThreads%2A> metodo per aumentare la ofthreads numero minimo.</span><span class="sxs-lookup"><span data-stu-id="5edd1-406">You can use the <xref:System.Threading.ThreadPool.SetMinThreads%2A> method to increase the minimum number ofthreads.</span></span> <span data-ttu-id="5edd1-407">Tuttavia, un aumento non necessario di questi valori può provocare problemi di prestazioni.</span><span class="sxs-lookup"><span data-stu-id="5edd1-407">However, unnecessarily increasing these values can cause performance problems.</span></span> <span data-ttu-id="5edd1-408">Se si avviano troppe attività contemporaneamente, potrebbero sembrare tutte lente.</span><span class="sxs-lookup"><span data-stu-id="5edd1-408">If too many tasks start at the same time, all of them might appear to be slow.</span></span> <span data-ttu-id="5edd1-409">Nella maggior parte dei casi, il pool di thread verrà prestazioni migliori con il proprio algoritmo per l'allocazione dei thread.</span><span class="sxs-lookup"><span data-stu-id="5edd1-409">In most cases, the thread pool will perform better with its own algorithm for allocating threads.</span></span> <span data-ttu-id="5edd1-410">Riduzione al minimo a meno che il numero di processori può anche ridurre le prestazioni.</span><span class="sxs-lookup"><span data-stu-id="5edd1-410">Reducing the minimum to less than the number of processors can also hurt performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5edd1-411">Nell'esempio seguente imposta il numero minimo di thread di lavoro a quattro e mantiene il valore originale per il numero minimo di thread di completamento i/o asincroni.</span><span class="sxs-lookup"><span data-stu-id="5edd1-411">The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="5edd1-412">per consentire ai thread di controllo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-412">for the ability to control threads.</span>
          </span>
          <span data-ttu-id="5edd1-413">Valore di autorizzazione: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-413">Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="UnsafeQueueNativeOverlapped">
      <MemberSignature Language="C#" Value="public static bool UnsafeQueueNativeOverlapped (System.Threading.NativeOverlapped* overlapped);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UnsafeQueueNativeOverlapped(valuetype System.Threading.NativeOverlapped* overlapped) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool UnsafeQueueNativeOverlapped(System::Threading::NativeOverlapped* overlapped);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlapped" Type="System.Threading.NativeOverlapped*" />
      </Parameters>
      <Docs>
        <param name="overlapped">
          <span data-ttu-id="5edd1-414">Struttura <see cref="T:System.Threading.NativeOverlapped" /> da accodare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-414">The <see cref="T:System.Threading.NativeOverlapped" /> structure to queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5edd1-415">Accoda un'operazione di I/O sovrapposta per l'esecuzione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-415">Queues an overlapped I/O operation for execution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5edd1-416">
            <see langword="true" /> se l'accodamento dell'operazione a una porta di completamento di I/O è stato eseguito correttamente; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-416">
              <see langword="true" /> if the operation was successfully queued to an I/O completion port; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5edd1-417">Per informazioni sull'utilizzo di Win32 nativo operazioni dei / o sovrappongono, vedere il <xref:System.Threading.Overlapped> (classe), il <xref:System.Threading.NativeOverlapped> struttura e `OVERLAPPED` struttura in Win32 di Platform SDK.</span><span class="sxs-lookup"><span data-stu-id="5edd1-417">For information about using native Win32 overlapped I/O, see the <xref:System.Threading.Overlapped> class, the <xref:System.Threading.NativeOverlapped> structure, and the `OVERLAPPED` structure in the Win32 Platform SDK.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="5edd1-418">Utilizzo di <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A> metodo è stato possibile aprire inavvertitamente un problema di sicurezza.</span><span class="sxs-lookup"><span data-stu-id="5edd1-418">Using the <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A> method could inadvertently open up a security hole.</span></span> <span data-ttu-id="5edd1-419">Sicurezza dall'accesso di codice si basa i controlli di autorizzazione sulle autorizzazioni di tutti i chiamanti nello stack.</span><span class="sxs-lookup"><span data-stu-id="5edd1-419">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="5edd1-420">Quando il lavoro viene accodato in un thread di pool di thread tramite <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A>, lo stack del thread del pool non hanno il contesto dei chiamanti effettivi.</span><span class="sxs-lookup"><span data-stu-id="5edd1-420">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A>, the stack of the thread pool thread does not have the context of the actual callers.</span></span> <span data-ttu-id="5edd1-421">Codice dannoso potrebbe essere in grado di sfruttare questa vulnerabilità per evitare i controlli di autorizzazione.</span><span class="sxs-lookup"><span data-stu-id="5edd1-421">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="5edd1-422">richiede l'attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-422">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="5edd1-423">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-423">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeQueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool UnsafeQueueUserWorkItem (System.Threading.WaitCallback callBack, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UnsafeQueueUserWorkItem(class System.Threading.WaitCallback callBack, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeQueueUserWorkItem (callBack As WaitCallback, state As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool UnsafeQueueUserWorkItem(System::Threading::WaitCallback ^ callBack, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <span data-ttu-id="5edd1-424">Oggetto <see cref="T:System.Threading.WaitCallback" /> che rappresenta il delegato da richiamare quando un thread nel pool di thread sceglie l'elemento di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-424">A <see cref="T:System.Threading.WaitCallback" /> that represents the delegate to invoke when a thread in the thread pool picks up the work item.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="5edd1-425">Oggetto passato al delegato quando viene servito dal pool di thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-425">The object that is passed to the delegate when serviced from the thread pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5edd1-426">Accoda il delegato specificato al pool di thread, ma non propaga lo stack di chiamata nel thread di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-426">Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5edd1-427">
            <see langword="true" /> se il metodo viene eseguito correttamente. Viene generata l'eccezione <see cref="T:System.OutOfMemoryException" /> se non è stato possibile accodare l'elemento di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-427">
              <see langword="true" /> if the method succeeds; <see cref="T:System.OutOfMemoryException" /> is thrown if the work item could not be queued.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5edd1-428">A differenza di <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> metodo <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> non propaga lo stack di chiamate al thread di lavoro.</span><span class="sxs-lookup"><span data-stu-id="5edd1-428">Unlike the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method, <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="5edd1-429">In questo modo il codice perdere lo stack di chiamate e in tal modo di elevare i privilegi di sicurezza.</span><span class="sxs-lookup"><span data-stu-id="5edd1-429">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="5edd1-430">Utilizzando <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> può provocare inavvertitamente un problema di sicurezza.</span><span class="sxs-lookup"><span data-stu-id="5edd1-430">Using <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="5edd1-431">Sicurezza dall'accesso di codice si basa i controlli di autorizzazione sulle autorizzazioni di tutti i chiamanti nello stack.</span><span class="sxs-lookup"><span data-stu-id="5edd1-431">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="5edd1-432">Quando il lavoro viene accodato in un thread di pool di thread tramite <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>, lo stack del thread del pool non avrà il contesto dei chiamanti effettivi.</span><span class="sxs-lookup"><span data-stu-id="5edd1-432">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="5edd1-433">Codice dannoso potrebbe essere in grado di sfruttare questa vulnerabilità per evitare i controlli di autorizzazione.</span><span class="sxs-lookup"><span data-stu-id="5edd1-433">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="5edd1-434">Il chiamante non dispone dell'autorizzazione richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-434">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="5edd1-435">È stata rilevata una condizione di memoria insufficiente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-435">An out-of-memory condition was encountered.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="5edd1-436">Non è stato possibile accodare l'elemento di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-436">The work item could not be queued.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5edd1-437">
            <paramref name="callBack" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-437">
              <paramref name="callBack" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="5edd1-438">richiede l'attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-438">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="5edd1-439">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-439">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="UnsafeRegisterWaitForSingleObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5edd1-440">Registra un delegato per l'attesa di un <see cref="T:System.Threading.WaitHandle" />, ma non propaga lo stack di chiamata nel thread di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-440">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, but does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Integer, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="5edd1-441">
            <see cref="T:System.Threading.WaitHandle" /> da registrare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-441">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="5edd1-442">Usare una classe <see cref="T:System.Threading.WaitHandle" /> diversa da <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-442">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="5edd1-443">Delegato da chiamare quando il parametro <c>waitObject</c> riceve un segnale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-443">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="5edd1-444">Oggetto passato al delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-444">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="5edd1-445">Timeout in millisecondi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-445">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="5edd1-446">Se il parametro <c>millisecondsTimeOutInterval</c> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-446">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="5edd1-447">Se <c>millisecondsTimeOutInterval</c> è -1, l'intervallo di timeout della funzione non termina mai.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-447">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="5edd1-448">Viene restituito <see langword="true" /> per indicare che il thread non attenderà più in base al parametro <c>waitObject</c> dopo la chiamata al delegato. <see langword="false" /> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-448">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5edd1-449">Registra un delegato per l'attesa di un <see cref="T:System.Threading.WaitHandle" />, specificando un intero con segno a 32 bit per il timeout in millisecondi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-449">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, using a 32-bit signed integer for the time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="5edd1-450">Questo metodo non propaga lo stack di chiamate al thread di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-450">This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5edd1-451">Oggetto <see cref="T:System.Threading.RegisteredWaitHandle" /> che può essere usato per annullare l'operazione di attesa registrata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-451">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5edd1-452">A differenza di <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metodo <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> non propaga lo stack di chiamate al thread di lavoro.</span><span class="sxs-lookup"><span data-stu-id="5edd1-452">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="5edd1-453">In questo modo il codice perdere lo stack di chiamate e in tal modo di elevare i privilegi di sicurezza.</span><span class="sxs-lookup"><span data-stu-id="5edd1-453">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="5edd1-454">Utilizzando <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> può provocare inavvertitamente un problema di sicurezza.</span><span class="sxs-lookup"><span data-stu-id="5edd1-454">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="5edd1-455">Sicurezza dall'accesso di codice si basa i controlli di autorizzazione sulle autorizzazioni di tutti i chiamanti nello stack.</span><span class="sxs-lookup"><span data-stu-id="5edd1-455">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="5edd1-456">Quando il lavoro viene accodato in un thread di pool di thread tramite <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, lo stack del thread del pool non avrà il contesto dei chiamanti effettivi.</span><span class="sxs-lookup"><span data-stu-id="5edd1-456">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="5edd1-457">Codice dannoso potrebbe essere in grado di sfruttare questa vulnerabilità per evitare i controlli di autorizzazione.</span><span class="sxs-lookup"><span data-stu-id="5edd1-457">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="5edd1-458">Utilizzando un <xref:System.Threading.Mutex> per `waitObject` non forniscono l'esclusione reciproca per i metodi di callback in quanto l'API Win32 sottostante utilizza il valore predefinito `WT_EXECUTEDEFAULT` flag, pertanto ogni callback viene inviato su un thread di pool di thread separato.</span><span class="sxs-lookup"><span data-stu-id="5edd1-458">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="5edd1-459">Quando si è finito utilizzando il <xref:System.Threading.RegisteredWaitHandle> restituito da questo metodo, chiamare il relativo <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodo per rilasciare i riferimenti all'handle di attesa.</span><span class="sxs-lookup"><span data-stu-id="5edd1-459">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="5edd1-460">È consigliabile chiamare sempre il <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> (metodo), anche se si specifica `true` per `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="5edd1-460">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="5edd1-461">Funzionamento di Garbage collection più efficiente se si chiama il <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodo invece che a seconda del finalizzatore dell'handle di attesa registrata.</span><span class="sxs-lookup"><span data-stu-id="5edd1-461">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5edd1-462">Il parametro <paramref name="millisecondsTimeOutInterval" /> è minore di -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-462">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="5edd1-463">Il chiamante non dispone dell'autorizzazione richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-463">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="5edd1-464">richiede l'attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-464">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="5edd1-465">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-465">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int64 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Long, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int64" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="5edd1-466">
            <see cref="T:System.Threading.WaitHandle" /> da registrare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-466">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="5edd1-467">Usare una classe <see cref="T:System.Threading.WaitHandle" /> diversa da <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-467">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="5edd1-468">Delegato da chiamare quando il parametro <c>waitObject</c> riceve un segnale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-468">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="5edd1-469">Oggetto passato al delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-469">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="5edd1-470">Timeout in millisecondi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-470">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="5edd1-471">Se il parametro <c>millisecondsTimeOutInterval</c> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-471">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="5edd1-472">Se <c>millisecondsTimeOutInterval</c> è -1, l'intervallo di timeout della funzione non termina mai.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-472">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="5edd1-473">Viene restituito <see langword="true" /> per indicare che il thread non attenderà più in base al parametro <c>waitObject</c> dopo la chiamata al delegato. <see langword="false" /> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-473">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5edd1-474">Registra un delegato per l'attesa di un oggetto <see cref="T:System.Threading.WaitHandle" />, specificando un valore intero con segno a 64 bit per il timeout in millisecondi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-474">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="5edd1-475">Questo metodo non propaga lo stack di chiamate al thread di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-475">This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5edd1-476">Oggetto <see cref="T:System.Threading.RegisteredWaitHandle" /> che può essere usato per annullare l'operazione di attesa registrata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-476">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5edd1-477">A differenza di <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metodo <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> non propaga lo stack di chiamate al thread di lavoro.</span><span class="sxs-lookup"><span data-stu-id="5edd1-477">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="5edd1-478">In questo modo il codice perdere lo stack di chiamate e in tal modo di elevare i privilegi di sicurezza.</span><span class="sxs-lookup"><span data-stu-id="5edd1-478">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="5edd1-479">Utilizzando <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> può provocare inavvertitamente un problema di sicurezza.</span><span class="sxs-lookup"><span data-stu-id="5edd1-479">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="5edd1-480">Sicurezza dall'accesso di codice si basa i controlli di autorizzazione sulle autorizzazioni di tutti i chiamanti nello stack.</span><span class="sxs-lookup"><span data-stu-id="5edd1-480">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="5edd1-481">Quando il lavoro viene accodato in un thread di pool di thread tramite <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, lo stack del thread del pool non avrà il contesto dei chiamanti effettivi.</span><span class="sxs-lookup"><span data-stu-id="5edd1-481">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="5edd1-482">Codice dannoso potrebbe essere in grado di sfruttare questa vulnerabilità per evitare i controlli di autorizzazione.</span><span class="sxs-lookup"><span data-stu-id="5edd1-482">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="5edd1-483">Utilizzando un <xref:System.Threading.Mutex> per `waitObject` non forniscono l'esclusione reciproca per i metodi di callback in quanto l'API Win32 sottostante utilizza il valore predefinito `WT_EXECUTEDEFAULT` flag, pertanto ogni callback viene inviato su un thread di pool di thread separato.</span><span class="sxs-lookup"><span data-stu-id="5edd1-483">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="5edd1-484">Quando si è finito utilizzando il <xref:System.Threading.RegisteredWaitHandle> restituito da questo metodo, chiamare il relativo <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodo per rilasciare i riferimenti all'handle di attesa.</span><span class="sxs-lookup"><span data-stu-id="5edd1-484">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="5edd1-485">È consigliabile chiamare sempre il <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> (metodo), anche se si specifica `true` per `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="5edd1-485">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="5edd1-486">Funzionamento di Garbage collection più efficiente se si chiama il <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodo invece che a seconda del finalizzatore dell'handle di attesa registrata.</span><span class="sxs-lookup"><span data-stu-id="5edd1-486">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5edd1-487">Il parametro <paramref name="millisecondsTimeOutInterval" /> è minore di -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-487">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="5edd1-488">Il chiamante non dispone dell'autorizzazione richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-488">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="5edd1-489">richiede l'attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-489">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="5edd1-490">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-490">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, valuetype System.TimeSpan timeout, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, timeout As TimeSpan, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="5edd1-491">
            <see cref="T:System.Threading.WaitHandle" /> da registrare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-491">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="5edd1-492">Usare una classe <see cref="T:System.Threading.WaitHandle" /> diversa da <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-492">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="5edd1-493">Delegato da chiamare quando il parametro <c>waitObject</c> riceve un segnale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-493">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="5edd1-494">Oggetto passato al delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-494">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="5edd1-495">Il timeout rappresentato da un valore <see cref="T:System.TimeSpan" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-495">The time-out represented by a <see cref="T:System.TimeSpan" />.</span>
          </span>
          <span data-ttu-id="5edd1-496">Se <c>timeout</c> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-496">If <c>timeout</c> is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="5edd1-497">Se <c>timeout</c> è -1, l'intervallo di timeout della funzione non termina mai.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-497">If <c>timeout</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="5edd1-498">Viene restituito <see langword="true" /> per indicare che il thread non attenderà più in base al parametro <c>waitObject</c> dopo la chiamata al delegato. <see langword="false" /> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-498">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5edd1-499">Registra un delegato per l'attesa di un oggetto <see cref="T:System.Threading.WaitHandle" />, specificando un valore <see cref="T:System.TimeSpan" /> per il timeout. Questo metodo non propaga lo stack di chiamate al thread di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-499">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out. This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5edd1-500">Oggetto <see cref="T:System.Threading.RegisteredWaitHandle" /> che può essere usato per annullare l'operazione di attesa registrata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-500">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5edd1-501">A differenza di <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metodo <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> non propaga lo stack di chiamate al thread di lavoro.</span><span class="sxs-lookup"><span data-stu-id="5edd1-501">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="5edd1-502">In questo modo il codice perdere lo stack di chiamate e in tal modo di elevare i privilegi di sicurezza.</span><span class="sxs-lookup"><span data-stu-id="5edd1-502">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="5edd1-503">Utilizzando <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> può provocare inavvertitamente un problema di sicurezza.</span><span class="sxs-lookup"><span data-stu-id="5edd1-503">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="5edd1-504">Sicurezza dall'accesso di codice si basa i controlli di autorizzazione sulle autorizzazioni di tutti i chiamanti nello stack.</span><span class="sxs-lookup"><span data-stu-id="5edd1-504">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="5edd1-505">Quando il lavoro viene accodato in un thread di pool di thread tramite <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, lo stack del thread del pool non avrà il contesto dei chiamanti effettivi.</span><span class="sxs-lookup"><span data-stu-id="5edd1-505">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="5edd1-506">Codice dannoso potrebbe essere in grado di sfruttare questa vulnerabilità per evitare i controlli di autorizzazione.</span><span class="sxs-lookup"><span data-stu-id="5edd1-506">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="5edd1-507">Utilizzando un <xref:System.Threading.Mutex> per `waitObject` non forniscono l'esclusione reciproca per i metodi di callback in quanto l'API Win32 sottostante utilizza il valore predefinito `WT_EXECUTEDEFAULT` flag, pertanto ogni callback viene inviato su un thread di pool di thread separato.</span><span class="sxs-lookup"><span data-stu-id="5edd1-507">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="5edd1-508">Quando si è finito utilizzando il <xref:System.Threading.RegisteredWaitHandle> restituito da questo metodo, chiamare il relativo <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodo per rilasciare i riferimenti all'handle di attesa.</span><span class="sxs-lookup"><span data-stu-id="5edd1-508">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="5edd1-509">È consigliabile chiamare sempre il <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> (metodo), anche se si specifica `true` per `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="5edd1-509">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="5edd1-510">Funzionamento di Garbage collection più efficiente se si chiama il <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodo invece che a seconda del finalizzatore dell'handle di attesa registrata.</span><span class="sxs-lookup"><span data-stu-id="5edd1-510">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="5edd1-511">Il parametro <paramref name="timeout" /> è minore di -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-511">The <paramref name="timeout" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5edd1-512">Il parametro <paramref name="timeout" /> è maggiore di <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-512">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="5edd1-513">Il chiamante non dispone dell'autorizzazione richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-513">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="5edd1-514">richiede l'attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-514">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="5edd1-515">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-515">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, unsigned int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As UInteger, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, System::UInt32 millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.UInt32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="5edd1-516">
            <see cref="T:System.Threading.WaitHandle" /> da registrare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-516">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="5edd1-517">Usare una classe <see cref="T:System.Threading.WaitHandle" /> diversa da <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-517">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="5edd1-518">Delegato da chiamare quando il parametro <c>waitObject</c> riceve un segnale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-518">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="5edd1-519">Oggetto passato al delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-519">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="5edd1-520">Timeout in millisecondi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-520">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="5edd1-521">Se il parametro <c>millisecondsTimeOutInterval</c> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-521">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="5edd1-522">Se <c>millisecondsTimeOutInterval</c> è -1, l'intervallo di timeout della funzione non termina mai.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-522">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="5edd1-523">Viene restituito <see langword="true" /> per indicare che il thread non attenderà più in base al parametro <c>waitObject</c> dopo la chiamata al delegato. <see langword="false" /> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-523">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5edd1-524">Registra un delegato per l'attesa di un oggetto <see cref="T:System.Threading.WaitHandle" />, specificando un intero senza segno a 32 bit per il timeout in millisecondi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-524">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="5edd1-525">Questo metodo non propaga lo stack di chiamate al thread di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-525">This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5edd1-526">Oggetto <see cref="T:System.Threading.RegisteredWaitHandle" /> che può essere usato per annullare l'operazione di attesa registrata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-526">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5edd1-527">A differenza di <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> metodo <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> non propaga lo stack di chiamate al thread di lavoro.</span><span class="sxs-lookup"><span data-stu-id="5edd1-527">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="5edd1-528">In questo modo il codice perdere lo stack di chiamate e in tal modo di elevare i privilegi di sicurezza.</span><span class="sxs-lookup"><span data-stu-id="5edd1-528">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="5edd1-529">Utilizzando <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> può provocare inavvertitamente un problema di sicurezza.</span><span class="sxs-lookup"><span data-stu-id="5edd1-529">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="5edd1-530">Sicurezza dall'accesso di codice si basa i controlli di autorizzazione sulle autorizzazioni di tutti i chiamanti nello stack.</span><span class="sxs-lookup"><span data-stu-id="5edd1-530">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="5edd1-531">Quando il lavoro viene accodato in un thread di pool di thread tramite <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, lo stack del thread del pool non avrà il contesto dei chiamanti effettivi.</span><span class="sxs-lookup"><span data-stu-id="5edd1-531">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="5edd1-532">Codice dannoso potrebbe essere in grado di sfruttare questa vulnerabilità per evitare i controlli di autorizzazione.</span><span class="sxs-lookup"><span data-stu-id="5edd1-532">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="5edd1-533">Utilizzando un <xref:System.Threading.Mutex> per `waitObject` non forniscono l'esclusione reciproca per i metodi di callback in quanto l'API Win32 sottostante utilizza il valore predefinito `WT_EXECUTEDEFAULT` flag, pertanto ogni callback viene inviato su un thread di pool di thread separato.</span><span class="sxs-lookup"><span data-stu-id="5edd1-533">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="5edd1-534">Quando si è finito utilizzando il <xref:System.Threading.RegisteredWaitHandle> restituito da questo metodo, chiamare il relativo <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodo per rilasciare i riferimenti all'handle di attesa.</span><span class="sxs-lookup"><span data-stu-id="5edd1-534">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="5edd1-535">È consigliabile chiamare sempre il <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> (metodo), anche se si specifica `true` per `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="5edd1-535">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="5edd1-536">Funzionamento di Garbage collection più efficiente se si chiama il <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> metodo invece che a seconda del finalizzatore dell'handle di attesa registrata.</span><span class="sxs-lookup"><span data-stu-id="5edd1-536">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="5edd1-537">Il chiamante non dispone dell'autorizzazione richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-537">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="5edd1-538">richiede l'attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-538">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="5edd1-539">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5edd1-539">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>