<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ThreadPool.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac550de54f2e0cde589b4af1c454e85fed39c9f40df.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">50de54f2e0cde589b4af1c454e85fed39c9f40df</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.</source>
          <target state="translated">Fornisce un pool di thread che può essere usato per eseguire attività, inviare elementi di lavoro, elaborare operazioni di I/O asincrone, attendere per conto di altri thread ed elaborare timer.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Many applications create threads that spend a great deal of time in the sleeping state, waiting for an event to occur.</source>
          <target state="translated">Molte applicazioni creano thread spesa una notevole quantità di tempo nello stato inattivo, in attesa di un evento.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Other threads might enter a sleeping state only to be awakened periodically to poll for a change or update status information.</source>
          <target state="translated">Altri thread potrebbero entrare in uno stato solo a essere riattivata periodicamente per eseguire il polling delle modifiche o aggiornare le informazioni sullo stato.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The thread pool enables you to use threads more efficiently by providing your application with a pool of worker threads that are managed by the system.</source>
          <target state="translated">Il pool di thread consente di utilizzare i thread in modo più efficiente fornendo all'applicazione un pool di thread di lavoro sono gestiti dal sistema.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Examples of operations that use thread pool threads include the following:</source>
          <target state="translated">Esempi di operazioni che usano i pool thread, tra cui:</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When you create a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object to perform some task asynchronously, by default the task is scheduled to run on a thread pool thread.</source>
          <target state="translated">Quando si crea un <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> o <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> oggetto per eseguire alcune attività in modo asincrono, per impostazione predefinita l'attività è pianificata l'esecuzione in un pool di thread.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Asynchronous timers use the thread pool.</source>
          <target state="translated">Timer asincroni utilizzano il pool di thread.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Thread pool threads execute callbacks from the <ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph> class and raise events from the <ph id="ph2">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">I callback di esecuzione di thread del pool di <ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph> classe e generare eventi dalla <ph id="ph2">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When you use registered wait handles, a system thread monitors the status of the wait handles.</source>
          <target state="translated">Quando si utilizzano l'handle di attesa registrata, un thread di sistema consente di monitorare lo stato dell'handle di attesa.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When a wait operation completes, a worker thread from the thread pool executes the corresponding callback function.</source>
          <target state="translated">Quando viene completata un'operazione di attesa, un thread di lavoro dal pool di thread viene eseguita la funzione di callback corrispondente.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When you call the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method to queue a method for execution on a thread pool thread.</source>
          <target state="translated">Quando si chiama il <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> metodo accodare un metodo per l'esecuzione in un pool di thread.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>You do this by passing the method a <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> delegate.</source>
          <target state="translated">Questo caso passando al metodo un <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> delegato.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The delegate has the signature</source>
          <target state="translated">Il delegato dispone della firma</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>where <ph id="ph1">`state`</ph> is an object that contains data to be used by the delegate.</source>
          <target state="translated">dove <ph id="ph1">`state`</ph> è un oggetto che contiene i dati da utilizzare dal delegato.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The actual data can be passed to the delegate by calling the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;</ph> method.</source>
          <target state="translated">I dati effettivi possono essere passati al delegato chiamando il <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The threads in the managed thread pool are background threads.</source>
          <target state="translated">I thread nel pool di thread gestiti sono thread in background.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>That is, their <ph id="ph1">&lt;xref:System.Threading.Thread.IsBackground%2A&gt;</ph> properties are <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Vale a dire i <ph id="ph1">&lt;xref:System.Threading.Thread.IsBackground%2A&gt;</ph> sono proprietà <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>This means that a <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread will not keep an application running after all foreground threads have exited.</source>
          <target state="translated">Ciò significa che un <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread non manterrà un'applicazione in esecuzione dopo il termine di tutti i thread in primo piano.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When the thread pool reuses a thread, it does not clear the data in thread local storage or in fields that are marked with the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute.</source>
          <target state="translated">Quando il pool di thread riutilizza un thread, non cancella i dati nell'archiviazione locale di thread o nei campi contrassegnati con il <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attributo.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Therefore, when a method examines thread local storage or fields that are marked with the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute, the values it finds might be left over from an earlier use of the thread pool thread.</source>
          <target state="translated">Pertanto, quando un metodo esamina l'archiviazione locale di thread o i campi contrassegnati con il <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attributo, i valori rilevati potrebbero essere rimasti dopo un precedente utilizzo del thread del pool.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>You can also queue work items that are not related to a wait operation to the thread pool.</source>
          <target state="translated">È inoltre possibile accodare gli elementi di lavoro che non sono correlati a un'operazione di attesa per il pool di thread.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>To request that a work item be handled by a thread in the thread pool, call the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method.</source>
          <target state="translated">Per richiedere che un elemento di lavoro gestito da un thread nel pool di thread, chiamare il <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>This method takes as a parameter a reference to the method or delegate that will be called by the thread selected from the thread pool.</source>
          <target state="translated">Questo metodo accetta come parametro un riferimento al metodo o delegato che verrà chiamato dal thread selezionato dal pool di thread.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>There is no way to cancel a work item after it has been queued.</source>
          <target state="translated">Non è possibile annullare un elemento di lavoro dopo aver accodato.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Timer-queue timers and registered wait operations also use the thread pool.</source>
          <target state="translated">Timer di coda del timer e le operazioni di attesa registrata anche usare il pool di thread.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Their callback functions are queued to the thread pool.</source>
          <target state="translated">Le funzioni di callback vengono messe in coda nel pool di thread.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>There is one thread pool per process.</source>
          <target state="translated">È un pool di thread per ogni processo.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the default size of the thread pool for a process depends on several factors, such as the size of the virtual address space.</source>
          <target state="translated">A partire da <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, la dimensione predefinita del pool di thread per un processo dipende da diversi fattori, ad esempio la dimensione dello spazio degli indirizzi virtuali.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>A process can call the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph> method to determine the number of threads.</source>
          <target state="translated">Un processo può chiamare il metodo <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph> per determinare il numero di thread.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The number of threads in the thread pool can be changed by using the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</ph> method.</source>
          <target state="translated">Il numero di thread nel pool di thread può essere modificato utilizzando il <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Each thread uses the default stack size and runs at the default priority.</source>
          <target state="translated">Ogni thread utilizza la dimensione predefinita e viene eseguita con la priorità predefinita.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Unmanaged code that hosts the .NET Framework can change the size of the thread pool by using the <ph id="ph1">`CorSetMaxThreads`</ph> function, defined in the mscoree.h file.</source>
          <target state="translated">Codice non gestito che ospita .NET Framework è possibile modificare le dimensioni del pool di thread usando il <ph id="ph1">`CorSetMaxThreads`</ph> funzione, definito nel file Mscoree. h.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</source>
          <target state="translated">Il pool di thread fornisce nuovi thread di lavoro o thread di completamento i/o su richiesta finché raggiunge il valore minimo per ogni categoria.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When a minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</source>
          <target state="translated">Quando viene raggiunto un valore minimo, il pool di thread può creare thread aggiuntivi in quella categoria o attendere il completamento di alcune attività.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys worker threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
          <target state="translated">A partire da <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, il pool di thread crea ed elimina i thread di lavoro per ottimizzare la velocità effettiva, definita come numero di attività completate per unità di tempo.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
          <target state="translated">Un numero troppo ridotto di thread potrebbe non usare in modo ottimale le risorse disponibili, mentre troppi thread potrebbero aumentare il conflitto per le risorse.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
          <target state="translated">Quando la richiesta è bassa, il numero effettivo di thread del pool può scendere sotto i valori minimi.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</ph> method to obtain these minimum values.</source>
          <target state="translated">È possibile usare il metodo <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</ph> per ottenere questi valori minimi.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> method to increase the minimum number of threads.</source>
          <target state="translated">È possibile utilizzare il <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> metodo per aumentare il numero minimo di thread.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>However, unnecessarily increasing these values can cause performance problems.</source>
          <target state="translated">Tuttavia, un aumento non necessario di questi valori può provocare problemi di prestazioni.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>If too many tasks start at the same time, all of them might appear to be slow.</source>
          <target state="translated">Se si avviano troppe attività contemporaneamente, potrebbero sembrare tutte lente.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>In most cases the thread pool will perform better with its own algorithm for allocating threads.</source>
          <target state="translated">Nella maggior parte dei casi, il pool di thread offre prestazioni migliori con il proprio algoritmo per l'allocazione dei thread.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>In the following example, the main application thread  queues a method named <ph id="ph1">`ThreadProc`</ph> to execute on a thread pool thread, sleeps for one second, and then exits.</source>
          <target state="translated">Nell'esempio seguente, il thread principale dell'applicazione Accoda un metodo denominato <ph id="ph1">`ThreadProc`</ph> da eseguire in un pool di thread, viene sospeso per un secondo e quindi viene chiusa.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The <ph id="ph1">`ThreadProc`</ph> method simply displays a message.</source>
          <target state="translated">Il <ph id="ph1">`ThreadProc`</ph> metodo semplicemente visualizza un messaggio.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>If you comment out the call to the <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> method, the main thread exits before         method runs on the thread pool thread.</source>
          <target state="translated">Impostare come commento la chiamata al <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> (metodo), il thread principale viene chiuso prima del metodo viene eseguito nel pool di thread.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The thread pool uses background         threads, which do not keep the application running if all foreground threads have terminated.</source>
          <target state="translated">Il pool di thread utilizza thread in background, che non mantengono l'applicazione in esecuzione se tutti i thread in primo piano è sono interrotto.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>(This         is a simple example of a race condition.)</source>
          <target state="translated">(Si tratta di un semplice esempio di una race condition).</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>This type is thread safe.</source>
          <target state="translated">Questo tipo è thread-safe.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Binds an operating system handle to the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>.</source>
          <target state="translated">Associa un handle del sistema operativo al <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> that holds the handle.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> che contiene l'handle.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>The handle must have been opened for overlapped I/O on the unmanaged side.</source>
          <target state="translated">È necessario che l'handle sia stato aperto per operazioni di I/O sovrapposte nella parte non gestita.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>Binds an operating system handle to the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>.</source>
          <target state="translated">Associa un handle del sistema operativo al <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the handle is bound; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'handle è associato; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">Il chiamante non dispone dell'autorizzazione richiesta.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>for the ability to call unmanaged code.</source>
          <target state="translated">Per poter chiamare codice non gestito.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> that holds the operating system handle.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> che contiene l'handle del sistema operativo.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>The handle must have been opened for overlapped I/O on the unmanaged side.</source>
          <target state="translated">È necessario che l'handle sia stato aperto per operazioni di I/O sovrapposte nella parte non gestita.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>Binds an operating system handle to the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>.</source>
          <target state="translated">Associa un handle del sistema operativo al <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the handle is bound; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'handle è associato; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>The <ph id="ph1">`osHandle`</ph> parameter should be a <ph id="ph2">&lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;</ph>, which derives from the abstract <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class.</source>
          <target state="translated">Il <ph id="ph1">`osHandle`</ph> parametro deve essere un <ph id="ph2">&lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;</ph>, che deriva dalla classe astratta <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;paramref name="osHandle" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="osHandle" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>for the ability to call unmanaged code.</source>
          <target state="translated">Per poter chiamare codice non gestito.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>The number of available worker threads.</source>
          <target state="translated">Numero di thread di lavoro disponibili.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>The number of available asynchronous I/O threads.</source>
          <target state="translated">Numero di thread I/O asincroni disponibili.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>Retrieves the difference between the maximum number of thread pool threads returned by the <ph id="ph1">&lt;see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /&gt;</ph> method, and the number currently active.</source>
          <target state="translated">Recupera la differenza tra il numero massimo di thread del pool di thread restituito dal metodo <ph id="ph1">&lt;see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /&gt;</ph> e il numero attualmente attivo.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>When <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;</ph> returns, the variable specified by <ph id="ph2">`workerThreads`</ph> contains the number of additional worker threads that can be started, and the variable specified by <ph id="ph3">`completionPortThreads`</ph> contains the number of additional asynchronous I/O threads that can be started.</source>
          <target state="translated">Quando <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;</ph> restituisce, la variabile specificata dalla <ph id="ph2">`workerThreads`</ph> contiene il numero di thread di lavoro aggiuntivo che può essere avviato e la variabile specificata dalla <ph id="ph3">`completionPortThreads`</ph> contiene il numero di thread i/o asincroni che può essere avviato.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>If there are no available threads, additional thread pool requests remain queued until thread pool threads become available.</source>
          <target state="translated">Se non sono presenti thread disponibili, richieste del pool di thread aggiuntivo rimangono in coda fino a quando non diventano disponibili thread di pool di thread.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>The following example displays the number of worker threads and I/O threads available when a simple app is started.</source>
          <target state="translated">Nell'esempio seguente visualizza il numero di thread di lavoro e thread dei / o disponibile quando viene avviata un'app semplice.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>The maximum number of worker threads in the thread pool.</source>
          <target state="translated">Numero massimo di thread di lavoro nel pool di thread.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>The maximum number of asynchronous I/O threads in the thread pool.</source>
          <target state="translated">Numero massimo di thread I/O asincroni nel pool di thread.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>Retrieves the number of requests to the thread pool that can be active concurrently.</source>
          <target state="translated">Recupera il numero di richieste al pool di thread che possono essere attive contemporaneamente.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>All requests above that number remain queued until thread pool threads become available.</source>
          <target state="translated">Tutte le richieste al di fuori di tale numero rimangono in coda fino a quando non diventano disponibili thread di pool di thread.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>When <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph> returns, the variable specified by <ph id="ph2">`workerThreads`</ph> contains the maximum number of worker threads allowed in the thread pool, and the variable specified by <ph id="ph3">`completionPortThreads`</ph> contains the maximum number of asynchronous I/O threads allowed in the thread pool.</source>
          <target state="translated">Quando <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph> restituisce, la variabile specificata dalla <ph id="ph2">`workerThreads`</ph> contiene il numero massimo di thread di lavoro consentiti nel pool di thread e la variabile specificata dalla <ph id="ph3">`completionPortThreads`</ph> contiene il numero massimo di thread dei / o asincroni consentiti nel pool di thread.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;</ph> method to determine the actual number of threads in the thread pool at any given time.</source>
          <target state="translated">È possibile utilizzare il <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;</ph> metodo per determinare il numero effettivo di thread nel pool di thread in qualsiasi momento.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</ph> to set the maximum number of worker threads and asynchronous I/O threads in the thread pool.</source>
          <target state="translated">È possibile utilizzare il <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</ph> per impostare il numero massimo di thread di lavoro e i thread dei / o asincroni nel pool di thread.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>You can queue as many thread pool requests as system memory allows.</source>
          <target state="translated">È possibile accodare molti come memoria di sistema consente di richieste del pool di thread.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>If there are more requests than thread pool threads, the additional requests remain queued until thread pool threads become available.</source>
          <target state="translated">Se sono presenti più richieste rispetto al thread del pool, le richieste aggiuntive rimangono in coda fino a quando non diventano disponibili thread di pool di thread.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>The following code example shows how to retrieve a count of the maximum and available number of threads in the thread pool.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come recuperare un conteggio del numero disponibile e massimo di thread nel pool di thread.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>A work item is queued that uses <ph id="ph1">`FileStream`</ph> to asynchronously write to two files.</source>
          <target state="translated">Un elemento di lavoro è in coda che utilizza <ph id="ph1">`FileStream`</ph> scrivere in modo asincrono in due file.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>The callback methods are timed to overlap.</source>
          <target state="translated">I metodi di callback sono temporizzati in si sovrappongono.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>A worker thread handles the work item and, depending on the speed and number of processors on the computer, one or two completion port threads handle the write operations.</source>
          <target state="translated">Un thread di lavoro gestisce l'elemento di lavoro e, a seconda della velocità e il numero di processori nel computer, uno o due thread di porta di completamento di gestire le operazioni di scrittura.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>When this method returns, contains the minimum number of worker threads that the thread pool creates on demand.</source>
          <target state="translated">Quando il metodo viene restituito, contiene il numero minimo di thread di lavoro che il pool di thread crea su richiesta.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>When this method returns, contains the minimum number of asynchronous I/O threads that the thread pool creates on demand.</source>
          <target state="translated">Quando il metodo viene restituito, contiene il numero minimo di thread I/O asincroni che il pool di thread crea su richiesta.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</source>
          <target state="translated">Recupera il numero minimo di thread che il pool di thread crea, man mano che vengono effettuate nuove richieste, prima di passare a un algoritmo per la gestione della creazione e dell'eliminazione del thread.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</source>
          <target state="translated">Il pool di thread fornisce nuovi thread di lavoro o thread di completamento i/o su richiesta finché raggiunge il valore minimo per ogni categoria.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>By default, the minimum number of threads is set to the number of processors on a system.</source>
          <target state="translated">Per impostazione predefinita, il numero minimo di thread è il numero di processori in un sistema.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</source>
          <target state="translated">Quando viene raggiunto il valore minimo, il pool di thread può creare thread aggiuntivi in quella categoria o attendere il completamento di alcune attività.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, il pool di thread crea ed elimina i thread per ottimizzare la velocità effettiva, definita come il numero di attività completate per unità di tempo.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
          <target state="translated">Un numero troppo ridotto di thread potrebbe non usare in modo ottimale le risorse disponibili, mentre troppi thread potrebbero aumentare il conflitto per le risorse.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
          <target state="translated">Quando la richiesta è bassa, il numero effettivo di thread del pool può scendere sotto i valori minimi.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</source>
          <target state="translated">Nell'esempio seguente imposta il numero minimo di thread di lavoro a quattro e mantiene il valore originale per il numero minimo di thread di completamento i/o asincroni.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Queues a method for execution.</source>
          <target state="translated">Accoda un metodo da eseguire.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>The method executes when a thread pool thread becomes available.</source>
          <target state="translated">Il metodo viene eseguito quando un thread del pool di thread diventa disponibile.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph> that represents the method to be executed.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph> che rappresenta il metodo da eseguire.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Queues a method for execution.</source>
          <target state="translated">Accoda un metodo da eseguire.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>The method executes when a thread pool thread becomes available.</source>
          <target state="translated">Il metodo viene eseguito quando un thread del pool di thread diventa disponibile.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the method is successfully queued; <ph id="ph2">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> is thrown if the work item could not be queued.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se il metodo viene accodato correttamente. Viene generata l'eccezione <ph id="ph2">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> se non è stato possibile accodare l'elemento di lavoro.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>You can place data required by the queued method in the instance fields of the class in which the method is defined, or you can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;</ph> overload that accepts an object containing the necessary data.</source>
          <target state="translated">È possibile inserire i dati necessari per il metodo in coda i campi di istanza della classe in cui il metodo è definito o è possibile utilizzare il <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;</ph> overload che accetta un oggetto che contiene i dati necessari.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Visual Basic users can omit the <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> constructor, and simply use the <ph id="ph2">`AddressOf`</ph> operator when passing the callback method to <ph id="ph3">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>.</source>
          <target state="translated">Gli utenti di Visual Basic è possono omettere il <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> costruttore e utilizzare semplicemente la <ph id="ph2">`AddressOf`</ph> operatore quando si passa il metodo di callback da <ph id="ph3">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Visual Basic automatically calls the correct delegate constructor.</source>
          <target state="translated">Visual Basic chiama automaticamente il costruttore di delegato corretto.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Version Information</source>
          <target state="translated">Informazioni sulla versione</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>In the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method.</source>
          <target state="translated">In .NET Framework versione 2.0, il <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> valore della proprietà viene propagato ai thread di lavoro in coda tramite il <ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">Nelle versioni precedenti, le informazioni dell'entità non viene propagate.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29&gt;</ph> method overload to queue a task, which is represented by the <ph id="ph2">`ThreadProc`</ph> method, to execute when a thread becomes available.</source>
          <target state="translated">L'esempio seguente usa il <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29&gt;</ph> overload del metodo per accodare un'attività, che è rappresentato dal <ph id="ph2">`ThreadProc`</ph> (metodo), da eseguire quando un thread diventa disponibile.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>No task information is supplied with this overload.</source>
          <target state="translated">Nessuna informazione di attività viene fornita con questo overload.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Therefore, the information that is available to the <ph id="ph1">`ThreadProc`</ph> method is limited to the object the method belongs to.</source>
          <target state="translated">Pertanto, le informazioni che sono disponibile per il <ph id="ph1">`ThreadProc`</ph> metodo è limitato all'oggetto a cui appartiene il metodo.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>The common language runtime (CLR) is hosted, and the host does not support this action.</source>
          <target state="translated">Common Language Runtime (CLR) è ospitato e l'host non supporta questa azione.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph> representing the method to execute.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph> che rappresenta il metodo da eseguire.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>An object containing data to be used by the method.</source>
          <target state="translated">Oggetto contenente i dati che devono essere usati dal metodo.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Queues a method for execution, and specifies an object containing data to be used by the method.</source>
          <target state="translated">Accoda un metodo da eseguire e specifica un oggetto che contiene i dati che dovranno essere usati dal metodo.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The method executes when a thread pool thread becomes available.</source>
          <target state="translated">Il metodo viene eseguito quando un thread del pool di thread diventa disponibile.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the method is successfully queued; <ph id="ph2">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> is thrown if the work item could not be queued.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se il metodo viene accodato correttamente. Viene generata l'eccezione <ph id="ph2">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> se non è stato possibile accodare l'elemento di lavoro.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>If the callback method requires complex data, you can define a class to contain the data.</source>
          <target state="translated">Se il metodo di callback richiede dati complessi, è possibile definire una classe per contenere i dati.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Visual Basic users can omit the <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> constructor, and simply use the <ph id="ph2">`AddressOf`</ph> operator when passing the callback method to <ph id="ph3">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>.</source>
          <target state="translated">Gli utenti di Visual Basic è possono omettere il <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> costruttore e utilizzare semplicemente la <ph id="ph2">`AddressOf`</ph> operatore quando si passa il metodo di callback da <ph id="ph3">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Visual Basic automatically calls the correct delegate constructor.</source>
          <target state="translated">Visual Basic chiama automaticamente il costruttore di delegato corretto.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Version Information</source>
          <target state="translated">Informazioni sulla versione</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>In the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method.</source>
          <target state="translated">In .NET Framework versione 2.0, il <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> valore della proprietà viene propagato ai thread di lavoro in coda tramite il <ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">Nelle versioni precedenti, le informazioni dell'entità non viene propagate.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The following example shows how to create an object that contains task information.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come creare un oggetto che contiene informazioni sull'attività.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.</source>
          <target state="translated">Viene inoltre illustrato come passare tale oggetto a un'attività in coda per l'esecuzione dal pool di thread.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The common language runtime (CLR) is hosted, and the host does not support this action.</source>
          <target state="translated">Common Language Runtime (CLR) è ospitato e l'host non supporta questa azione.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Registers a delegate that is waiting for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>.</source>
          <target state="translated">Registra un delegato in attesa di un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> da registrare.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">Usare una classe <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> diversa da <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">Delegato <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> da chiamare quando il parametro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> riceve un segnale.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">Oggetto passato al delegato.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Timeout in millisecondi.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Se il parametro <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> è -1, l'intervallo di timeout della funzione non termina mai.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated">Viene restituito <ph id="ph1">&lt;see langword="true" /&gt;</ph> per indicare che il thread non attenderà più in base al parametro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> dopo la chiamata al delegato. <ph id="ph2">&lt;see langword="false" /&gt;</ph> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 32-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">Registra un delegato per l'attesa di un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specificando un valore intero con segno a 32 bit per il timeout in millisecondi.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> that encapsulates the native handle.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> che incapsula l'handle nativo.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">Quando si è finito utilizzando il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> restituito da questo metodo, chiamare il relativo <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> metodo per rilasciare i riferimenti all'handle di attesa.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">È consigliabile chiamare sempre il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> (metodo), anche se si specifica <ph id="ph2">`true`</ph> per <ph id="ph3">`executeOnlyOnce`</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Funzionamento di Garbage collection più efficiente se si chiama il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> metodo invece che a seconda del finalizzatore dell'handle di attesa registrata.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method queues the specified delegate to the thread pool.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> metodo Accoda il delegato specificato al pool di thread.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>A worker thread will execute the delegate when one of the following occurs:</source>
          <target state="translated">Il delegato di un thread di lavoro verrà eseguito quando si verifica una delle operazioni seguenti:</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The specified object is in the signaled state.</source>
          <target state="translated">L'oggetto specificato è in stato segnalato.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The time-out interval elapses.</source>
          <target state="translated">L'intervallo di timeout scade.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method checks the current state of the specified object's <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> metodo controlla lo stato corrente dell'oggetto specificato <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">Se non è segnalato lo stato dell'oggetto, il metodo registra un'operazione di attesa.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">L'operazione di attesa viene eseguita da un thread dal pool di thread.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">Il delegato viene eseguito da un thread di lavoro quando viene segnalato lo stato dell'oggetto o l'intervallo di timeout scade.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">Se il <ph id="ph1">`timeOutInterval`</ph> parametro non è 0 (zero) e <ph id="ph2">`executeOnlyOnce`</ph> parametro <ph id="ph3">`false`</ph>, il timer viene reimpostato ogni volta che l'evento viene segnalato o l'intervallo di timeout scade.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">Utilizzando un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> per <ph id="ph2">`waitObject`</ph> non forniscono l'esclusione reciproca per i metodi di callback in quanto l'API Win32 sottostante utilizza il valore predefinito <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, pertanto ogni callback viene inviato su un thread di pool di thread separato.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Instead of a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, use a <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> with a maximum count of 1.</source>
          <target state="translated">Invece di un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, utilizzare un <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> con un conteggio massimo di 1.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>To cancel the wait operation, call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Per annullare l'operazione di attesa, chiamare il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">Il thread di attesa utilizza Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> funzione per monitorare le operazioni di attesa registrata.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, you must duplicate the handle using the Win32 <ph id="ph2">`DuplicateHandle`</ph> function.</source>
          <target state="translated">Pertanto, se è necessario utilizzare lo stesso handle nativo del sistema operativo in più chiamate al metodo <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, è necessario duplicare l'handle Win32 utilizzando <ph id="ph2">`DuplicateHandle`</ph> (funzione).</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Note that you should not pulse an event object passed to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">Si noti che deve eseguire il pulse un oggetto evento passato a <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, perché il thread di attesa potrebbe non rilevare che l'evento viene segnalato prima della reimpostazione.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">Prima della restituzione, la funzione modifica lo stato di alcuni tipi di oggetti di sincronizzazione.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">La modifica si verifica solo per l'oggetto il cui stato segnalato ha provocato la condizione di attesa di essere soddisfatto.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">Ad esempio, il conteggio del semaforo viene ridotta di uno.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Version Information</source>
          <target state="translated">Informazioni sulla versione</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Starting with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method.</source>
          <target state="translated">A partire da .NET Framework versione 2.0, il <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> valore della proprietà viene propagato ai thread di lavoro in coda tramite il <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">Nelle versioni precedenti, le informazioni dell'entità non viene propagate.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> è minore di -1.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> da registrare.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">Usare una classe <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> diversa da <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">Delegato <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> da chiamare quando il parametro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> riceve un segnale.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The object passed to the delegate.</source>
          <target state="translated">Oggetto passato al delegato.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Timeout in millisecondi.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Se il parametro <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> è -1, l'intervallo di timeout della funzione non termina mai.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated">Viene restituito <ph id="ph1">&lt;see langword="true" /&gt;</ph> per indicare che il thread non attenderà più in base al parametro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> dopo la chiamata al delegato. <ph id="ph2">&lt;see langword="false" /&gt;</ph> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 64-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">Registra un delegato per l'attesa di un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specificando un valore intero con segno a 64 bit per il timeout in millisecondi.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> that encapsulates the native handle.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> che incapsula l'handle nativo.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">Quando si è finito utilizzando il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> restituito da questo metodo, chiamare il relativo <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> metodo per rilasciare i riferimenti all'handle di attesa.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">È consigliabile chiamare sempre il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> (metodo), anche se si specifica <ph id="ph2">`true`</ph> per <ph id="ph3">`executeOnlyOnce`</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Funzionamento di Garbage collection più efficiente se si chiama il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> metodo invece che a seconda del finalizzatore dell'handle di attesa registrata.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method queues the specified delegate to the thread pool.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> metodo Accoda il delegato specificato al pool di thread.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>A worker thread will execute the delegate when one of the following occurs:</source>
          <target state="translated">Il delegato di un thread di lavoro verrà eseguito quando si verifica una delle operazioni seguenti:</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The specified object is in the signaled state.</source>
          <target state="translated">L'oggetto specificato è in stato segnalato.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The time-out interval elapses.</source>
          <target state="translated">L'intervallo di timeout scade.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method checks the current state of the specified object's <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> metodo controlla lo stato corrente dell'oggetto specificato <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">Se non è segnalato lo stato dell'oggetto, il metodo registra un'operazione di attesa.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">L'operazione di attesa viene eseguita da un thread dal pool di thread.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">Il delegato viene eseguito da un thread di lavoro quando viene segnalato lo stato dell'oggetto o l'intervallo di timeout scade.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">Se il <ph id="ph1">`timeOutInterval`</ph> parametro non è 0 (zero) e <ph id="ph2">`executeOnlyOnce`</ph> parametro <ph id="ph3">`false`</ph>, il timer viene reimpostato ogni volta che l'evento viene segnalato o l'intervallo di timeout scade.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">Utilizzando un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> per <ph id="ph2">`waitObject`</ph> non forniscono l'esclusione reciproca per i metodi di callback in quanto l'API Win32 sottostante utilizza il valore predefinito <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, pertanto ogni callback viene inviato su un thread di pool di thread separato.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Instead of a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, use a <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> with a maximum count of 1.</source>
          <target state="translated">Invece di un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, utilizzare un <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> con un conteggio massimo di 1.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>To cancel the wait operation, call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Per annullare l'operazione di attesa, chiamare il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">Il thread di attesa utilizza Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> funzione per monitorare le operazioni di attesa registrata.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, you must duplicate the handle using the Win32 <ph id="ph2">`DuplicateHandle`</ph> function.</source>
          <target state="translated">Pertanto, se è necessario utilizzare lo stesso handle nativo del sistema operativo in più chiamate al metodo <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, è necessario duplicare l'handle Win32 utilizzando <ph id="ph2">`DuplicateHandle`</ph> (funzione).</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Note that you should not pulse an event object passed to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">Si noti che deve eseguire il pulse un oggetto evento passato a <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, perché il thread di attesa potrebbe non rilevare che l'evento viene segnalato prima della reimpostazione.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">Prima della restituzione, la funzione modifica lo stato di alcuni tipi di oggetti di sincronizzazione.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">La modifica si verifica solo per l'oggetto il cui stato segnalato ha provocato la condizione di attesa di essere soddisfatto.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">Ad esempio, il conteggio del semaforo viene ridotta di uno.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Version Information</source>
          <target state="translated">Informazioni sulla versione</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Starting with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method.</source>
          <target state="translated">A partire da .NET Framework versione 2.0, il <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> valore della proprietà viene propagato ai thread di lavoro in coda tramite il <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">Nelle versioni precedenti, le informazioni dell'entità non viene propagate.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> è minore di -1.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> da registrare.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">Usare una classe <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> diversa da <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">Delegato <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> da chiamare quando il parametro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> riceve un segnale.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The object passed to the delegate.</source>
          <target state="translated">Oggetto passato al delegato.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The time-out represented by a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>.</source>
          <target state="translated">Il timeout rappresentato da un valore <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> è -1, l'intervallo di timeout della funzione non termina mai.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated">Viene restituito <ph id="ph1">&lt;see langword="true" /&gt;</ph> per indicare che il thread non attenderà più in base al parametro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> dopo la chiamata al delegato. <ph id="ph2">&lt;see langword="false" /&gt;</ph> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> value for the time-out.</source>
          <target state="translated">Registra un delegato per l'attesa di un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specificando un valore <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> per il timeout.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> that encapsulates the native handle.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> che incapsula l'handle nativo.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">Quando si è finito utilizzando il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> restituito da questo metodo, chiamare il relativo <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> metodo per rilasciare i riferimenti all'handle di attesa.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">È consigliabile chiamare sempre il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> (metodo), anche se si specifica <ph id="ph2">`true`</ph> per <ph id="ph3">`executeOnlyOnce`</ph>.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Funzionamento di Garbage collection più efficiente se si chiama il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> metodo invece che a seconda del finalizzatore dell'handle di attesa registrata.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method queues the specified delegate to the thread pool.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> metodo Accoda il delegato specificato al pool di thread.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>A worker thread will execute the delegate when one of the following occurs:</source>
          <target state="translated">Il delegato di un thread di lavoro verrà eseguito quando si verifica una delle operazioni seguenti:</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The specified object is in the signaled state.</source>
          <target state="translated">L'oggetto specificato è in stato segnalato.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The time-out interval elapses.</source>
          <target state="translated">L'intervallo di timeout scade.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method checks the current state of the specified object's <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> metodo controlla lo stato corrente dell'oggetto specificato <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">Se non è segnalato lo stato dell'oggetto, il metodo registra un'operazione di attesa.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">L'operazione di attesa viene eseguita da un thread dal pool di thread.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">Il delegato viene eseguito da un thread di lavoro quando viene segnalato lo stato dell'oggetto o l'intervallo di timeout scade.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">Se il <ph id="ph1">`timeOutInterval`</ph> parametro non è 0 (zero) e <ph id="ph2">`executeOnlyOnce`</ph> parametro <ph id="ph3">`false`</ph>, il timer viene reimpostato ogni volta che l'evento viene segnalato o l'intervallo di timeout scade.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">Utilizzando un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> per <ph id="ph2">`waitObject`</ph> non forniscono l'esclusione reciproca per i metodi di callback in quanto l'API Win32 sottostante utilizza il valore predefinito <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, pertanto ogni callback viene inviato su un thread di pool di thread separato.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Instead of a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, use a <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> with a maximum count of 1.</source>
          <target state="translated">Invece di un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, utilizzare un <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> con un conteggio massimo di 1.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>To cancel the wait operation, call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Per annullare l'operazione di attesa, chiamare il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">Il thread di attesa utilizza Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> funzione per monitorare le operazioni di attesa registrata.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, you must duplicate the handle using the Win32 <ph id="ph2">`DuplicateHandle`</ph> function.</source>
          <target state="translated">Pertanto, se è necessario utilizzare lo stesso handle nativo del sistema operativo in più chiamate al metodo <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, è necessario duplicare l'handle Win32 utilizzando <ph id="ph2">`DuplicateHandle`</ph> (funzione).</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Note that you should not pulse an event object passed to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">Si noti che deve eseguire il pulse un oggetto evento passato a <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, perché il thread di attesa potrebbe non rilevare che l'evento viene segnalato prima della reimpostazione.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">Prima della restituzione, la funzione modifica lo stato di alcuni tipi di oggetti di sincronizzazione.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">La modifica si verifica solo per l'oggetto il cui stato segnalato ha provocato la condizione di attesa di essere soddisfatto.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">Ad esempio, il conteggio del semaforo viene ridotta di uno.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Version Information</source>
          <target state="translated">Informazioni sulla versione</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Starting with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method.</source>
          <target state="translated">A partire da .NET Framework versione 2.0, il <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> valore della proprietà viene propagato ai thread di lavoro in coda tramite il <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">Nelle versioni precedenti, le informazioni dell'entità non viene propagate.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> è minore di -1.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> è maggiore di <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> da registrare.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">Usare una classe <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> diversa da <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">Delegato <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> da chiamare quando il parametro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> riceve un segnale.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The object passed to the delegate.</source>
          <target state="translated">Oggetto passato al delegato.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Timeout in millisecondi.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Se il parametro <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> è -1, l'intervallo di timeout della funzione non termina mai.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated">Viene restituito <ph id="ph1">&lt;see langword="true" /&gt;</ph> per indicare che il thread non attenderà più in base al parametro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> dopo la chiamata al delegato. <ph id="ph2">&lt;see langword="false" /&gt;</ph> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 32-bit unsigned integer for the time-out in milliseconds.</source>
          <target state="translated">Registra un delegato per l'attesa di un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specificando un intero senza segno a 32 bit per il timeout in millisecondi.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> that can be used to cancel the registered wait operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> che può essere usato per annullare l'operazione di attesa registrata.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">Quando si è finito utilizzando il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> restituito da questo metodo, chiamare il relativo <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> metodo per rilasciare i riferimenti all'handle di attesa.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">È consigliabile chiamare sempre il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> (metodo), anche se si specifica <ph id="ph2">`true`</ph> per <ph id="ph3">`executeOnlyOnce`</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Funzionamento di Garbage collection più efficiente se si chiama il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> metodo invece che a seconda del finalizzatore dell'handle di attesa registrata.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method queues the specified delegate to the thread pool.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> metodo Accoda il delegato specificato al pool di thread.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>A worker thread will execute the delegate when one of the following occurs:</source>
          <target state="translated">Il delegato di un thread di lavoro verrà eseguito quando si verifica una delle operazioni seguenti:</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The specified object is in the signaled state.</source>
          <target state="translated">L'oggetto specificato è in stato segnalato.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The time-out interval elapses.</source>
          <target state="translated">L'intervallo di timeout scade.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method checks the current state of the specified object's <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> metodo controlla lo stato corrente dell'oggetto specificato <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">Se non è segnalato lo stato dell'oggetto, il metodo registra un'operazione di attesa.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">L'operazione di attesa viene eseguita da un thread dal pool di thread.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">Il delegato viene eseguito da un thread di lavoro quando viene segnalato lo stato dell'oggetto o l'intervallo di timeout scade.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">Se il <ph id="ph1">`timeOutInterval`</ph> parametro non è 0 (zero) e <ph id="ph2">`executeOnlyOnce`</ph> parametro <ph id="ph3">`false`</ph>, il timer viene reimpostato ogni volta che l'evento viene segnalato o l'intervallo di timeout scade.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">Utilizzando un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> per <ph id="ph2">`waitObject`</ph> non forniscono l'esclusione reciproca per i metodi di callback in quanto l'API Win32 sottostante utilizza il valore predefinito <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, pertanto ogni callback viene inviato su un thread di pool di thread separato.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Instead of a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, use a <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> with a maximum count of 1.</source>
          <target state="translated">Invece di un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, utilizzare un <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> con un conteggio massimo di 1.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>To cancel the wait operation, call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Per annullare l'operazione di attesa, chiamare il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">Il thread di attesa utilizza Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> funzione per monitorare le operazioni di attesa registrata.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, you must duplicate the handle using the Win32 <ph id="ph2">`DuplicateHandle`</ph> function.</source>
          <target state="translated">Pertanto, se è necessario utilizzare lo stesso handle nativo del sistema operativo in più chiamate al metodo <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, è necessario duplicare l'handle Win32 utilizzando <ph id="ph2">`DuplicateHandle`</ph> (funzione).</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Note that you should not pulse an event object passed to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">Si noti che deve eseguire il pulse un oggetto evento passato a <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, perché il thread di attesa potrebbe non rilevare che l'evento viene segnalato prima della reimpostazione.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">Prima della restituzione, la funzione modifica lo stato di alcuni tipi di oggetti di sincronizzazione.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">La modifica si verifica solo per l'oggetto il cui stato segnalato ha provocato la condizione di attesa di essere soddisfatto.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">Ad esempio, il conteggio del semaforo viene ridotta di uno.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Version Information</source>
          <target state="translated">Informazioni sulla versione</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Starting with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method.</source>
          <target state="translated">A partire da .NET Framework versione 2.0, il <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> valore della proprietà viene propagato ai thread di lavoro in coda tramite il <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">Nelle versioni precedenti, le informazioni dell'entità non viene propagate.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method to execute a specified callback method when a specified wait handle is signaled.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come utilizzare il <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> metodo per eseguire un metodo di callback specificato quando viene segnalato un handle di attesa specificato.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>In this example, the callback method is <ph id="ph1">`WaitProc`</ph>, and the wait handle is an <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>.</source>
          <target state="translated">In questo esempio, il metodo di callback è <ph id="ph1">`WaitProc`</ph>, e l'handle di attesa è un <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The example defines a <ph id="ph1">`TaskInfo`</ph> class to hold the information that is passed to the callback when it executes.</source>
          <target state="translated">Nell'esempio viene definito un <ph id="ph1">`TaskInfo`</ph> classe per contenere le informazioni che viene passate al callback durante l'esecuzione.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The example creates a <ph id="ph1">`TaskInfo`</ph> object and assigns it some string data.</source>
          <target state="translated">Nell'esempio viene creato un <ph id="ph1">`TaskInfo`</ph> dell'oggetto e lo assegna alcuni dati di tipo stringa.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method is assigned to the <ph id="ph3">`Handle`</ph> field of the <ph id="ph4">`TaskInfo`</ph> object so that the callback method has access to the <ph id="ph5">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> restituito dal <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> assegnare al metodo il <ph id="ph3">`Handle`</ph> campo il <ph id="ph4">`TaskInfo`</ph> oggetto in modo che il metodo di callback ha accesso al <ph id="ph5">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>In addition to specifying <ph id="ph1">`TaskInfo`</ph> as the object to pass to the callback method, the call to the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method specifies the <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> that the task will wait for, a <ph id="ph4">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate that represents the <ph id="ph5">`WaitProc`</ph> callback method, a one second time-out interval, and multiple callbacks.</source>
          <target state="translated">Oltre a specificare <ph id="ph1">`TaskInfo`</ph> come oggetto da passare al metodo di callback, la chiamata al <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> metodo consente di specificare il <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> che l'attività dovrà attendere un <ph id="ph4">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegato che rappresenta il <ph id="ph5">`WaitProc`</ph> il metodo di callback, un un secondo intervallo di timeout e più callback.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>When the main thread signals the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> by calling its <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method, the <ph id="ph3">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate is invoked.</source>
          <target state="translated">Quando il thread principale segnala il <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> chiamando il relativo <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> (metodo), il <ph id="ph3">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegato viene richiamato.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">`WaitProc`</ph> method tests <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> to determine whether a time-out occurred.</source>
          <target state="translated">Il <ph id="ph1">`WaitProc`</ph> metodo test <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> per determinare se si è verificato un timeout.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the callback was invoked because the wait handle was signaled, the <ph id="ph1">`WaitProc`</ph> method unregisters the <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>, stopping additional callbacks.</source>
          <target state="translated">Se è stato richiamato il callback, perché è stato segnalato l'handle di attesa, il <ph id="ph1">`WaitProc`</ph> metodo annulla la registrazione di <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>, l'arresto di callback aggiuntivi.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>In the case of a time-out, the task continues to wait.</source>
          <target state="translated">Nel caso di un timeout, l'attività continua ad attendere.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">`WaitProc`</ph> method ends by printing a message to the console.</source>
          <target state="translated">Il <ph id="ph1">`WaitProc`</ph> metodo termina con la stampa di un messaggio nella console.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> è minore di -1.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>The maximum number of worker threads in the thread pool.</source>
          <target state="translated">Numero massimo di thread di lavoro nel pool di thread.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>The maximum number of asynchronous I/O threads in the thread pool.</source>
          <target state="translated">Numero massimo di thread I/O asincroni nel pool di thread.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>Sets the number of requests to the thread pool that can be active concurrently.</source>
          <target state="translated">Imposta il numero di richieste al pool di thread che possono essere attivate contemporaneamente.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>All requests above that number remain queued until thread pool threads become available.</source>
          <target state="translated">Tutte le richieste al di fuori di tale numero rimangono in coda fino a quando non diventano disponibili thread di pool di thread.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the change is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se la modifica ha esito positivo; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>You cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the number of processors on the computer.</source>
          <target state="translated">Non è possibile impostare il numero massimo di thread di lavoro o thread di completamento i/o su un numero inferiore al numero di processori nel computer.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>To determine how many processors are present, retrieve the value of the <ph id="ph1">&lt;xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Per determinare il numero di processori siano presente, recuperare il valore della <ph id="ph1">&lt;xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>In addition, you cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the corresponding minimum number of worker threads or I/O completion threads.</source>
          <target state="translated">Inoltre, non è possibile impostare il numero massimo di thread di lavoro o thread di completamento i/o su un numero inferiore al numero corrispondente minimo di thread di lavoro o thread di completamento i/o.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>To determine the minimum thread pool size,  call the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</ph> method.</source>
          <target state="translated">Per determinare la dimensione del pool di thread minimo, chiamare il <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>If the common language runtime is hosted, for example by Internet Information Services (IIS) or SQL Server, the host can limit or prevent changes to the thread pool size.</source>
          <target state="translated">Se è ospitato in common language runtime, ad esempio da Internet Information Services (IIS) o SQL Server, l'host può limitare o evitare che le modifiche per la dimensione del pool di thread.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>Use caution when changing the maximum number of threads in the thread pool.</source>
          <target state="translated">Prestare attenzione quando si modifica il numero massimo di thread nel pool di thread.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>While your code might benefit, the changes might have an adverse effect on code libraries you use.</source>
          <target state="translated">Mentre il codice può risultare utile, la modifica potrebbe avere effetti negativi sulle librerie di codice che si utilizza.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>Setting the thread pool size too large can cause performance problems.</source>
          <target state="translated">Impostare la dimensione del pool di thread troppo elevato può causare problemi di prestazioni.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>If too many threads are executing at the same time, the task switching overhead becomes a significant factor.</source>
          <target state="translated">Se un numero eccessivo di thread sono in esecuzione nello stesso momento, l'attività di cambio overhead diventa un fattore significativo.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>for the ability to control threads.</source>
          <target state="translated">per consentire ai thread di controllo.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>Permission value: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph></source>
          <target state="translated">Valore di autorizzazione: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>The minimum number of worker threads that the thread pool creates on demand.</source>
          <target state="translated">Il numero minimo di thread di lavoro che vengono creati su richiesta dal pool di thread.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>The minimum number of asynchronous I/O threads that the thread pool creates on demand.</source>
          <target state="translated">Il numero minimo di thread I/O asincroni che vengono creati su richiesta dal pool di thread.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Sets the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</source>
          <target state="translated">Imposta il numero minimo di thread che il pool di thread crea, man mano che vengono effettuate nuove richieste, prima di passare a un algoritmo per la gestione della creazione e dell'eliminazione del thread.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the change is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se la modifica ha esito positivo; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</source>
          <target state="translated">Il pool di thread fornisce nuovi thread di lavoro o thread di completamento i/o su richiesta finché raggiunge il valore minimo per ogni categoria.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</source>
          <target state="translated">Quando viene raggiunto il valore minimo, il pool di thread può creare thread aggiuntivi in quella categoria o attendere il completamento di alcune attività.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, il pool di thread crea ed elimina i thread per ottimizzare la velocità effettiva, definita come il numero di attività completate per unità di tempo.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
          <target state="translated">Un numero troppo ridotto di thread potrebbe non usare in modo ottimale le risorse disponibili, mentre troppi thread potrebbero aumentare il conflitto per le risorse.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
          <target state="translated">Quando la richiesta è bassa, il numero effettivo di thread del pool può scendere sotto i valori minimi.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>If you specify a negative number or a number larger than the maximum number of active thread pool threads (obtained using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph>), <ph id="ph2">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> returns <ph id="ph3">`false`</ph> and does not change either of the minimum values.</source>
          <target state="translated">Se si specifica un numero negativo o un numero maggiore del numero massimo di thread di pool di thread attivi (ottenuto utilizzando <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph>), <ph id="ph2">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> restituisce <ph id="ph3">`false`</ph> e non viene modificato uno dei valori minimi.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>By default, the minimum number of threads is set to the number of processors on a system.</source>
          <target state="translated">Per impostazione predefinita, il numero minimo di thread è il numero di processori in un sistema.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> method to increase the minimum number ofthreads.</source>
          <target state="translated">È possibile utilizzare il <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> metodo per aumentare la ofthreads numero minimo.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>However, unnecessarily increasing these values can cause performance problems.</source>
          <target state="translated">Tuttavia, un aumento non necessario di questi valori può provocare problemi di prestazioni.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>If too many tasks start at the same time, all of them might appear to be slow.</source>
          <target state="translated">Se si avviano troppe attività contemporaneamente, potrebbero sembrare tutte lente.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>In most cases, the thread pool will perform better with its own algorithm for allocating threads.</source>
          <target state="translated">Nella maggior parte dei casi, il pool di thread verrà prestazioni migliori con il proprio algoritmo per l'allocazione dei thread.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Reducing the minimum to less than the number of processors can also hurt performance.</source>
          <target state="translated">Riduzione al minimo a meno che il numero di processori può anche ridurre le prestazioni.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</source>
          <target state="translated">Nell'esempio seguente imposta il numero minimo di thread di lavoro a quattro e mantiene il valore originale per il numero minimo di thread di completamento i/o asincroni.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>for the ability to control threads.</source>
          <target state="translated">per consentire ai thread di controllo.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Permission value: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph></source>
          <target state="translated">Valore di autorizzazione: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure to queue.</source>
          <target state="translated">Struttura <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> da accodare.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Queues an overlapped I/O operation for execution.</source>
          <target state="translated">Accoda un'operazione di I/O sovrapposta per l'esecuzione.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation was successfully queued to an I/O completion port; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'accodamento dell'operazione a una porta di completamento di I/O è stato eseguito correttamente; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>For information about using native Win32 overlapped I/O, see the <ph id="ph1">&lt;xref:System.Threading.Overlapped&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure, and the <ph id="ph3">`OVERLAPPED`</ph> structure in the Win32 Platform SDK.</source>
          <target state="translated">Per informazioni sull'utilizzo di Win32 nativo operazioni dei / o sovrappongono, vedere il <ph id="ph1">&lt;xref:System.Threading.Overlapped&gt;</ph> (classe), il <ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> struttura e <ph id="ph3">`OVERLAPPED`</ph> struttura in Win32 di Platform SDK.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Using the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A&gt;</ph> method could inadvertently open up a security hole.</source>
          <target state="translated">Utilizzo di <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A&gt;</ph> metodo è stato possibile aprire inavvertitamente un problema di sicurezza.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Sicurezza dall'accesso di codice si basa i controlli di autorizzazione sulle autorizzazioni di tutti i chiamanti nello stack.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A&gt;</ph>, the stack of the thread pool thread does not have the context of the actual callers.</source>
          <target state="translated">Quando il lavoro viene accodato in un thread di pool di thread tramite <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A&gt;</ph>, lo stack del thread del pool non hanno il contesto dei chiamanti effettivi.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Codice dannoso potrebbe essere in grado di sfruttare questa vulnerabilità per evitare i controlli di autorizzazione.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">richiede l'attendibilità totale per il chiamante immediato.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph> that represents the delegate to invoke when a thread in the thread pool picks up the work item.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph> che rappresenta il delegato da richiamare quando un thread nel pool di thread sceglie l'elemento di lavoro.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The object that is passed to the delegate when serviced from the thread pool.</source>
          <target state="translated">Oggetto passato al delegato quando viene servito dal pool di thread.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Accoda il delegato specificato al pool di thread, ma non propaga lo stack di chiamata nel thread di lavoro.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the method succeeds; <ph id="ph2">&lt;see cref="T:System.OutOfMemoryException" /&gt;</ph> is thrown if the work item could not be queued.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se il metodo viene eseguito correttamente. Viene generata l'eccezione <ph id="ph2">&lt;see cref="T:System.OutOfMemoryException" /&gt;</ph> se non è stato possibile accodare l'elemento di lavoro.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">A differenza di <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> metodo <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph> non propaga lo stack di chiamate al thread di lavoro.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">In questo modo il codice perdere lo stack di chiamate e in tal modo di elevare i privilegi di sicurezza.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">Utilizzando <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph> può provocare inavvertitamente un problema di sicurezza.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Sicurezza dall'accesso di codice si basa i controlli di autorizzazione sulle autorizzazioni di tutti i chiamanti nello stack.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Quando il lavoro viene accodato in un thread di pool di thread tramite <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph>, lo stack del thread del pool non avrà il contesto dei chiamanti effettivi.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Codice dannoso potrebbe essere in grado di sfruttare questa vulnerabilità per evitare i controlli di autorizzazione.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">Il chiamante non dispone dell'autorizzazione richiesta.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>An out-of-memory condition was encountered.</source>
          <target state="translated">È stata rilevata una condizione di memoria insufficiente.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The work item could not be queued.</source>
          <target state="translated">Non è stato possibile accodare l'elemento di lavoro.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">richiede l'attendibilità totale per il chiamante immediato.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, but does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Registra un delegato per l'attesa di un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, ma non propaga lo stack di chiamata nel thread di lavoro.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> da registrare.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">Usare una classe <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> diversa da <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">Delegato da chiamare quando il parametro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> riceve un segnale.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">Oggetto passato al delegato.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Timeout in millisecondi.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Se il parametro <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> è -1, l'intervallo di timeout della funzione non termina mai.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated">Viene restituito <ph id="ph1">&lt;see langword="true" /&gt;</ph> per indicare che il thread non attenderà più in base al parametro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> dopo la chiamata al delegato. <ph id="ph2">&lt;see langword="false" /&gt;</ph> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, using a 32-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">Registra un delegato per l'attesa di un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specificando un intero con segno a 32 bit per il timeout in millisecondi.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Questo metodo non propaga lo stack di chiamate al thread di lavoro.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> object that can be used to cancel the registered wait operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> che può essere usato per annullare l'operazione di attesa registrata.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">A differenza di <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> metodo <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> non propaga lo stack di chiamate al thread di lavoro.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">In questo modo il codice perdere lo stack di chiamate e in tal modo di elevare i privilegi di sicurezza.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">Utilizzando <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> può provocare inavvertitamente un problema di sicurezza.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Sicurezza dall'accesso di codice si basa i controlli di autorizzazione sulle autorizzazioni di tutti i chiamanti nello stack.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Quando il lavoro viene accodato in un thread di pool di thread tramite <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, lo stack del thread del pool non avrà il contesto dei chiamanti effettivi.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Codice dannoso potrebbe essere in grado di sfruttare questa vulnerabilità per evitare i controlli di autorizzazione.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">Utilizzando un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> per <ph id="ph2">`waitObject`</ph> non forniscono l'esclusione reciproca per i metodi di callback in quanto l'API Win32 sottostante utilizza il valore predefinito <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, pertanto ogni callback viene inviato su un thread di pool di thread separato.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">Quando si è finito utilizzando il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> restituito da questo metodo, chiamare il relativo <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> metodo per rilasciare i riferimenti all'handle di attesa.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">È consigliabile chiamare sempre il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> (metodo), anche se si specifica <ph id="ph2">`true`</ph> per <ph id="ph3">`executeOnlyOnce`</ph>.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Funzionamento di Garbage collection più efficiente se si chiama il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> metodo invece che a seconda del finalizzatore dell'handle di attesa registrata.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> è minore di -1.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">Il chiamante non dispone dell'autorizzazione richiesta.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">richiede l'attendibilità totale per il chiamante immediato.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> da registrare.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">Usare una classe <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> diversa da <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">Delegato da chiamare quando il parametro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> riceve un segnale.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">Oggetto passato al delegato.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Timeout in millisecondi.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Se il parametro <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> è -1, l'intervallo di timeout della funzione non termina mai.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated">Viene restituito <ph id="ph1">&lt;see langword="true" /&gt;</ph> per indicare che il thread non attenderà più in base al parametro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> dopo la chiamata al delegato. <ph id="ph2">&lt;see langword="false" /&gt;</ph> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 64-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">Registra un delegato per l'attesa di un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specificando un valore intero con segno a 64 bit per il timeout in millisecondi.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Questo metodo non propaga lo stack di chiamate al thread di lavoro.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> object that can be used to cancel the registered wait operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> che può essere usato per annullare l'operazione di attesa registrata.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">A differenza di <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> metodo <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> non propaga lo stack di chiamate al thread di lavoro.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">In questo modo il codice perdere lo stack di chiamate e in tal modo di elevare i privilegi di sicurezza.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">Utilizzando <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> può provocare inavvertitamente un problema di sicurezza.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Sicurezza dall'accesso di codice si basa i controlli di autorizzazione sulle autorizzazioni di tutti i chiamanti nello stack.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Quando il lavoro viene accodato in un thread di pool di thread tramite <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, lo stack del thread del pool non avrà il contesto dei chiamanti effettivi.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Codice dannoso potrebbe essere in grado di sfruttare questa vulnerabilità per evitare i controlli di autorizzazione.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">Utilizzando un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> per <ph id="ph2">`waitObject`</ph> non forniscono l'esclusione reciproca per i metodi di callback in quanto l'API Win32 sottostante utilizza il valore predefinito <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, pertanto ogni callback viene inviato su un thread di pool di thread separato.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">Quando si è finito utilizzando il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> restituito da questo metodo, chiamare il relativo <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> metodo per rilasciare i riferimenti all'handle di attesa.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">È consigliabile chiamare sempre il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> (metodo), anche se si specifica <ph id="ph2">`true`</ph> per <ph id="ph3">`executeOnlyOnce`</ph>.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Funzionamento di Garbage collection più efficiente se si chiama il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> metodo invece che a seconda del finalizzatore dell'handle di attesa registrata.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> è minore di -1.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">Il chiamante non dispone dell'autorizzazione richiesta.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">richiede l'attendibilità totale per il chiamante immediato.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> da registrare.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">Usare una classe <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> diversa da <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">Delegato da chiamare quando il parametro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> riceve un segnale.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">Oggetto passato al delegato.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The time-out represented by a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>.</source>
          <target state="translated">Il timeout rappresentato da un valore <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> è -1, l'intervallo di timeout della funzione non termina mai.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated">Viene restituito <ph id="ph1">&lt;see langword="true" /&gt;</ph> per indicare che il thread non attenderà più in base al parametro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> dopo la chiamata al delegato. <ph id="ph2">&lt;see langword="false" /&gt;</ph> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> value for the time-out. This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Registra un delegato per l'attesa di un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specificando un valore <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> per il timeout. Questo metodo non propaga lo stack di chiamate al thread di lavoro.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> object that can be used to cancel the registered wait operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> che può essere usato per annullare l'operazione di attesa registrata.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">A differenza di <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> metodo <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> non propaga lo stack di chiamate al thread di lavoro.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">In questo modo il codice perdere lo stack di chiamate e in tal modo di elevare i privilegi di sicurezza.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">Utilizzando <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> può provocare inavvertitamente un problema di sicurezza.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Sicurezza dall'accesso di codice si basa i controlli di autorizzazione sulle autorizzazioni di tutti i chiamanti nello stack.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Quando il lavoro viene accodato in un thread di pool di thread tramite <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, lo stack del thread del pool non avrà il contesto dei chiamanti effettivi.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Codice dannoso potrebbe essere in grado di sfruttare questa vulnerabilità per evitare i controlli di autorizzazione.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">Utilizzando un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> per <ph id="ph2">`waitObject`</ph> non forniscono l'esclusione reciproca per i metodi di callback in quanto l'API Win32 sottostante utilizza il valore predefinito <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, pertanto ogni callback viene inviato su un thread di pool di thread separato.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">Quando si è finito utilizzando il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> restituito da questo metodo, chiamare il relativo <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> metodo per rilasciare i riferimenti all'handle di attesa.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">È consigliabile chiamare sempre il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> (metodo), anche se si specifica <ph id="ph2">`true`</ph> per <ph id="ph3">`executeOnlyOnce`</ph>.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Funzionamento di Garbage collection più efficiente se si chiama il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> metodo invece che a seconda del finalizzatore dell'handle di attesa registrata.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> è minore di -1.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> è maggiore di <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">Il chiamante non dispone dell'autorizzazione richiesta.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">richiede l'attendibilità totale per il chiamante immediato.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> da registrare.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">Usare una classe <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> diversa da <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">Delegato da chiamare quando il parametro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> riceve un segnale.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">Oggetto passato al delegato.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Timeout in millisecondi.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Se il parametro <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> è -1, l'intervallo di timeout della funzione non termina mai.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated">Viene restituito <ph id="ph1">&lt;see langword="true" /&gt;</ph> per indicare che il thread non attenderà più in base al parametro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> dopo la chiamata al delegato. <ph id="ph2">&lt;see langword="false" /&gt;</ph> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 32-bit unsigned integer for the time-out in milliseconds.</source>
          <target state="translated">Registra un delegato per l'attesa di un oggetto <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specificando un intero senza segno a 32 bit per il timeout in millisecondi.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Questo metodo non propaga lo stack di chiamate al thread di lavoro.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> object that can be used to cancel the registered wait operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> che può essere usato per annullare l'operazione di attesa registrata.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">A differenza di <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> metodo <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> non propaga lo stack di chiamate al thread di lavoro.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">In questo modo il codice perdere lo stack di chiamate e in tal modo di elevare i privilegi di sicurezza.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">Utilizzando <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> può provocare inavvertitamente un problema di sicurezza.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Sicurezza dall'accesso di codice si basa i controlli di autorizzazione sulle autorizzazioni di tutti i chiamanti nello stack.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Quando il lavoro viene accodato in un thread di pool di thread tramite <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, lo stack del thread del pool non avrà il contesto dei chiamanti effettivi.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Codice dannoso potrebbe essere in grado di sfruttare questa vulnerabilità per evitare i controlli di autorizzazione.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">Utilizzando un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> per <ph id="ph2">`waitObject`</ph> non forniscono l'esclusione reciproca per i metodi di callback in quanto l'API Win32 sottostante utilizza il valore predefinito <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, pertanto ogni callback viene inviato su un thread di pool di thread separato.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">Quando si è finito utilizzando il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> restituito da questo metodo, chiamare il relativo <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> metodo per rilasciare i riferimenti all'handle di attesa.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">È consigliabile chiamare sempre il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> (metodo), anche se si specifica <ph id="ph2">`true`</ph> per <ph id="ph3">`executeOnlyOnce`</ph>.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Funzionamento di Garbage collection più efficiente se si chiama il <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> metodo invece che a seconda del finalizzatore dell'handle di attesa registrata.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">Il chiamante non dispone dell'autorizzazione richiesta.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">richiede l'attendibilità totale per il chiamante immediato.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>