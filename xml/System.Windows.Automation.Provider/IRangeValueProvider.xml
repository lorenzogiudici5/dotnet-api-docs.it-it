<Type Name="IRangeValueProvider" FullName="System.Windows.Automation.Provider.IRangeValueProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="013e6b355fd1f36d6ccc9e99fb70233a6c10a611" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36371854" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IRangeValueProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRangeValueProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IRangeValueProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRangeValueProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRangeValueProvider" />
  <TypeSignature Language="F#" Value="type IRangeValueProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("36dc7aef-33e6-4691-afe1-2be7274b3d33")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e82b9-101">Espone metodi e proprietà per supportare l'accesso client di automazione interfaccia utente ai controlli che è possibile impostare su un valore compreso in un intervallo.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e82b9-101">Exposes methods and properties to support UI Automation client access to controls that can be set to a value within a range.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e82b9-102">Implementato su un provider di automazione interfaccia utente che deve supportare il <xref:System.Windows.Automation.RangeValuePattern> pattern di controllo.</span><span class="sxs-lookup"><span data-stu-id="e82b9-102">Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.RangeValuePattern> control pattern.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.RangeValuePattern" />
  </Docs>
  <Members>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e82b9-103">Ottiene un valore che specifica se il valore di un controllo è di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e82b9-103">Gets a value that specifies whether the value of a control is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e82b9-104">
            <see langword="true" /> se il valore è di sola lettura; <see langword="false" /> se può essere modificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e82b9-104">
              <see langword="true" /> if the value is read-only; <see langword="false" /> if it can be modified.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e82b9-105">Nell'esempio seguente viene illustrata un'implementazione di questo metodo per un controllo che non è di sola lettura.</span><span class="sxs-lookup"><span data-stu-id="e82b9-105">The following example shows an implementation of this method for a control that is not read-only.</span></span>  
  
 [!code-csharp[UIAIRangeValueProvider_snip#IsReadOnly](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAIRangeValueProvider_snip/CSharp/RangeValueFragment.cs#isreadonly)]
 [!code-vb[UIAIRangeValueProvider_snip#IsReadOnly](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAIRangeValueProvider_snip/visualbasic/rangevaluefragment.vb#isreadonly)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LargeChange">
      <MemberSignature Language="C#" Value="public double LargeChange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 LargeChange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LargeChange As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double LargeChange { double get(); };" />
      <MemberSignature Language="F#" Value="member this.LargeChange : double" Usage="System.Windows.Automation.Provider.IRangeValueProvider.LargeChange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e82b9-106">Ottiene il valore aggiunto o sottratto dalla proprietà <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /> quando viene apportata una modifica di grandi dimensioni, ad esempio con il tasto PGGIÙ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e82b9-106">Gets the value that is added to or subtracted from the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /> property when a large change is made, such as with the PAGE DOWN key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e82b9-107">Il valore della modifica estesa supportato dal controllo o null (<see langword="Nothing" /> in Visual Basic) se il controllo non supporta <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e82b9-107">The large-change value supported by the control or null (<see langword="Nothing" /> in Visual Basic) if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e82b9-108">Nell'esempio seguente viene illustrata un'implementazione di questo metodo per un controllo che ha un'ampia modifica al valore 5.0.</span><span class="sxs-lookup"><span data-stu-id="e82b9-108">The following example shows an implementation of this method for a control that has a large change value of 5.0.</span></span>  
  
 [!code-csharp[UIAIRangeValueProvider_snip#LargeChange](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAIRangeValueProvider_snip/CSharp/RangeValueFragment.cs#largechange)]
 [!code-vb[UIAIRangeValueProvider_snip#LargeChange](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAIRangeValueProvider_snip/visualbasic/rangevaluefragment.vb#largechange)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange" />
      </Docs>
    </Member>
    <Member MemberName="Maximum">
      <MemberSignature Language="C#" Value="public double Maximum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Maximum" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Maximum As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Maximum { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Maximum : double" Usage="System.Windows.Automation.Provider.IRangeValueProvider.Maximum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e82b9-109">Ottiene il massimo valore dell'intervallo supportato dal controllo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e82b9-109">Gets the maximum range value supported by the control.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e82b9-110">Il valore massimo supportato dal controllo o null (<see langword="Nothing" /> in Visual Basic) se il controllo non supporta <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e82b9-110">The maximum value supported by the control or null (<see langword="Nothing" /> in Visual Basic) if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e82b9-111">Nell'esempio seguente viene illustrata un'implementazione di questo metodo per un controllo presenta un valore massimo pari a 255,0.</span><span class="sxs-lookup"><span data-stu-id="e82b9-111">The following example shows an implementation of this method for a control that has a maximum value of 255.0.</span></span>  
  
 [!code-csharp[UIAIRangeValueProvider_snip#Maximum](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAIRangeValueProvider_snip/CSharp/RangeValueFragment.cs#maximum)]
 [!code-vb[UIAIRangeValueProvider_snip#Maximum](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAIRangeValueProvider_snip/visualbasic/rangevaluefragment.vb#maximum)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum" />
      </Docs>
    </Member>
    <Member MemberName="Minimum">
      <MemberSignature Language="C#" Value="public double Minimum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Minimum" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minimum As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Minimum { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Minimum : double" Usage="System.Windows.Automation.Provider.IRangeValueProvider.Minimum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e82b9-112">Ottiene il minimo valore dell'intervallo supportato dal controllo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e82b9-112">Gets the minimum range value supported by the control.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e82b9-113">Il valore minimo supportato dal controllo o null (<see langword="Nothing" /> in Visual Basic) se il controllo non supporta <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e82b9-113">The minimum value supported by the control or null (<see langword="Nothing" /> in Visual Basic) if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e82b9-114">Nell'esempio seguente viene illustrata un'implementazione di questo metodo per un controllo che presenta un valore minimo pari a 0,0.</span><span class="sxs-lookup"><span data-stu-id="e82b9-114">The following example shows an implementation of this method for a control that has a minimum value of 0.0.</span></span>  
  
 [!code-csharp[UIAIRangeValueProvider_snip#Minimum](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAIRangeValueProvider_snip/CSharp/RangeValueFragment.cs#minimum)]
 [!code-vb[UIAIRangeValueProvider_snip#Minimum](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAIRangeValueProvider_snip/visualbasic/rangevaluefragment.vb#minimum)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum" />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IRangeValueProvider.SetValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(double value);" />
      <MemberSignature Language="F#" Value="abstract member SetValue : double -&gt; unit" Usage="iRangeValueProvider.SetValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="e82b9-115">Il valore da impostare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e82b9-115">The value to set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e82b9-116">Imposta il valore del controllo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e82b9-116">Sets the value of the control.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e82b9-117">Il valore effettivo impostato dipende dall'implementazione del controllo.</span><span class="sxs-lookup"><span data-stu-id="e82b9-117">The actual value set depends on the control implementation.</span></span> <span data-ttu-id="e82b9-118">Il controllo può arrotondare richiesto `value` verso l'alto o verso il basso.</span><span class="sxs-lookup"><span data-stu-id="e82b9-118">The control may round the requested `value` up or down.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e82b9-119">Nell'esempio seguente viene illustrata una possibile implementazione di questo metodo per un controllo personalizzato.</span><span class="sxs-lookup"><span data-stu-id="e82b9-119">The following example shows one possible implementation of this method for a custom control.</span></span> <span data-ttu-id="e82b9-120">Il controllo personalizzato consente di visualizzare il valore di intervallo e il valore alfa del colore di base.</span><span class="sxs-lookup"><span data-stu-id="e82b9-120">The custom control displays its range value through the alpha value of its base color.</span></span>  
  
 [!code-csharp[UIAIRangeValueProvider_snip#SetValue](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAIRangeValueProvider_snip/CSharp/RangeValueFragment.cs#setvalue)]
 [!code-vb[UIAIRangeValueProvider_snip#SetValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAIRangeValueProvider_snip/visualbasic/rangevaluefragment.vb#setvalue)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e82b9-121">Quando <paramref name="value" /> è inferiore al valore minimo o superiore al valore massimo del controllo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e82b9-121">When <paramref name="value" /> is less than the minimum or greater than the maximum value of the control.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SmallChange">
      <MemberSignature Language="C#" Value="public double SmallChange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 SmallChange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SmallChange As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double SmallChange { double get(); };" />
      <MemberSignature Language="F#" Value="member this.SmallChange : double" Usage="System.Windows.Automation.Provider.IRangeValueProvider.SmallChange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e82b9-122">Ottiene il valore aggiunto o sottratto dalla proprietà <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /> quando viene apportata una modifica di piccole dimensioni, ad esempio con un tasto di direzione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e82b9-122">Gets the value that is added to or subtracted from the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /> property when a small change is made, such as with an arrow key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e82b9-123">Il valore di modifica di piccole dimensioni o null (<see langword="Nothing" /> in Visual Basic) se il controllo non supporta <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e82b9-123">The small-change value or null (<see langword="Nothing" /> in Visual Basic) if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e82b9-124">Nell'esempio seguente viene illustrata un'implementazione di questo metodo per un controllo presenta un valore di modifica di piccole dimensioni pari a 1,0.</span><span class="sxs-lookup"><span data-stu-id="e82b9-124">The following example shows an implementation of this method for a control that has a small change value of 1.0.</span></span>  
  
 [!code-csharp[UIAIRangeValueProvider_snip#SmallChange](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAIRangeValueProvider_snip/CSharp/RangeValueFragment.cs#smallchange)]
 [!code-vb[UIAIRangeValueProvider_snip#SmallChange](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAIRangeValueProvider_snip/visualbasic/rangevaluefragment.vb#smallchange)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public double Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Value" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Value { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : double" Usage="System.Windows.Automation.Provider.IRangeValueProvider.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e82b9-125">Ottiene il valore del controllo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e82b9-125">Gets the value of the control.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e82b9-126">Il valore del controllo o null (<see langword="Nothing" /> in Visual Basic) se il controllo non supporta <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e82b9-126">The value of the control or null (<see langword="Nothing" /> in Visual Basic) if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e82b9-127">Nell'esempio seguente viene illustrata un'implementazione di questo metodo per un controllo personalizzato.</span><span class="sxs-lookup"><span data-stu-id="e82b9-127">The following example shows an implementation of this method for a custom control.</span></span> <span data-ttu-id="e82b9-128">Ai fini di questo esempio, il controllo personalizzato consente di visualizzare il valore tramite l'impostazione alfa del colore di base.</span><span class="sxs-lookup"><span data-stu-id="e82b9-128">For the purposes of this sample, the custom control displays the value through the alpha setting of its base color.</span></span>  
  
 [!code-csharp[UIAIRangeValueProvider_snip#Value](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAIRangeValueProvider_snip/CSharp/RangeValueFragment.cs#value)]
 [!code-vb[UIAIRangeValueProvider_snip#Value](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAIRangeValueProvider_snip/visualbasic/rangevaluefragment.vb#value)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Automation.Provider.IRangeValueProvider.SetValue(System.Double)" />
      </Docs>
    </Member>
  </Members>
</Type>