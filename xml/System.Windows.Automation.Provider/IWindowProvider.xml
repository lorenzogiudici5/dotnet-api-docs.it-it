<Type Name="IWindowProvider" FullName="System.Windows.Automation.Provider.IWindowProvider">
  <TypeSignature Language="C#" Value="public interface IWindowProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWindowProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IWindowProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWindowProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWindowProvider" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("987df77b-db06-4d77-8f8a-86a9c3bb90b9")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7d494-101">Espone i metodi e le proprietà per supportare l'accesso del client di automazione interfaccia utente ai controlli che forniscono importanti funzionalità basate su finestra in una tradizionale interfaccia utente grafica (GUI).</span><span class="sxs-lookup"><span data-stu-id="7d494-101">Exposes methods and properties to support UI Automation client access to controls that provide fundamental window-based functionality within a traditional graphical user interface (GUI).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d494-102">Implementato su un provider di automazione interfaccia utente che deve supportare il <xref:System.Windows.Automation.WindowPattern> pattern di controllo.</span><span class="sxs-lookup"><span data-stu-id="7d494-102">Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.WindowPattern> control pattern.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.WindowPattern" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IWindowProvider.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7d494-103">Tenta di chiudere la finestra.</span><span class="sxs-lookup"><span data-stu-id="7d494-103">Attempts to close the window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d494-104"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> deve restituire immediatamente senza bloccare.</span><span class="sxs-lookup"><span data-stu-id="7d494-104"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> must return immediately without blocking.</span></span>  
  
 <span data-ttu-id="7d494-105"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> genera l'evento <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent>.</span><span class="sxs-lookup"><span data-stu-id="7d494-105"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> raises the <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent> event.</span></span> <span data-ttu-id="7d494-106">Se possibile, l'evento deve essere generato dopo il controllo ha completato l'azione associata.</span><span class="sxs-lookup"><span data-stu-id="7d494-106">If possible, the event should be raised after the control has completed its associated action.</span></span>  
  
 <span data-ttu-id="7d494-107">Quando viene chiamato su un controllo del riquadro, questo metodo verrà chiudere il riquadro e rimuovere la divisione associata.</span><span class="sxs-lookup"><span data-stu-id="7d494-107">When called on a split pane control, this method will close the pane and remove the associated split.</span></span> <span data-ttu-id="7d494-108">Questo metodo potrebbe inoltre chiudere tutti gli altri riquadri, a seconda di implementazione.</span><span class="sxs-lookup"><span data-stu-id="7d494-108">This method might also close all other panes, depending on implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7d494-109">Quando il controllo non è in grado di eseguire l'azione richiesta.</span><span class="sxs-lookup"><span data-stu-id="7d494-109">When the control is unable to perform the requested action.</span></span></exception>
        <exception cref="T:System.Windows.Automation.ElementNotAvailableException"><span data-ttu-id="7d494-110">Quando l'elemento di destinazione non è più disponibile, ad esempio quando la finestra è stata chiusa.</span><span class="sxs-lookup"><span data-stu-id="7d494-110">When the target element is no longer available (for example, the window has closed).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InteractionState">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.WindowInteractionState InteractionState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.WindowInteractionState InteractionState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.InteractionState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InteractionState As WindowInteractionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::WindowInteractionState InteractionState { System::Windows::Automation::WindowInteractionState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.WindowInteractionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d494-111">Ottiene lo stato di interazione della finestra.</span><span class="sxs-lookup"><span data-stu-id="7d494-111">Gets the interaction state of the window.</span></span></summary>
        <value><span data-ttu-id="7d494-112">Valore <see cref="T:System.Windows.Automation.WindowInteractionState" /> del controllo.</span><span class="sxs-lookup"><span data-stu-id="7d494-112">The <see cref="T:System.Windows.Automation.WindowInteractionState" /> of the control.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsModal">
      <MemberSignature Language="C#" Value="public bool IsModal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsModal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.IsModal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsModal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsModal { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d494-113">Ottiene un valore che specifica se la finestra è modale.</span><span class="sxs-lookup"><span data-stu-id="7d494-113">Gets a value that specifies whether the window is modal.</span></span></summary>
        <value>
          <span data-ttu-id="7d494-114"><see langword="true" /> se la finestra è modale; in caso contrario <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7d494-114"><see langword="true" /> if the window is modal; otherwise <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTopmost">
      <MemberSignature Language="C#" Value="public bool IsTopmost { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTopmost" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.IsTopmost" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTopmost As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTopmost { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d494-115">Ottiene un valore che specifica se la finestra è l'elemento in primo piano nell'ordine z.</span><span class="sxs-lookup"><span data-stu-id="7d494-115">Gets a value that specifies whether the window is the topmost element in the z-order.</span></span></summary>
        <value>
          <span data-ttu-id="7d494-116"><see langword="true" /> se la finestra è l'elemento più alto; in caso contrario <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7d494-116"><see langword="true" /> if the window is topmost; otherwise <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Maximizable">
      <MemberSignature Language="C#" Value="public bool Maximizable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Maximizable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.Maximizable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Maximizable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Maximizable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d494-117">Ottiene un valore che specifica se la finestra può essere ingrandita.</span><span class="sxs-lookup"><span data-stu-id="7d494-117">Gets a value that specifies whether the window can be maximized.</span></span></summary>
        <value>
          <span data-ttu-id="7d494-118"><see langword="true" /> se la finestra può essere ingrandita; in caso contrario <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7d494-118"><see langword="true" /> if the window can be maximized; otherwise <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Minimizable">
      <MemberSignature Language="C#" Value="public bool Minimizable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Minimizable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.Minimizable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minimizable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Minimizable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d494-119">Ottiene un valore che specifica se la finestra può essere ridotta a icona.</span><span class="sxs-lookup"><span data-stu-id="7d494-119">Gets a value that specifies whether the window can be minimized.</span></span></summary>
        <value>
          <span data-ttu-id="7d494-120"><see langword="true" /> se la finestra può essere ridotta a icona; in caso contrario <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7d494-120"><see langword="true" /> if the window can be minimized; otherwise <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVisualState">
      <MemberSignature Language="C#" Value="public void SetVisualState (System.Windows.Automation.WindowVisualState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVisualState(valuetype System.Windows.Automation.WindowVisualState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IWindowProvider.SetVisualState(System.Windows.Automation.WindowVisualState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetVisualState (state As WindowVisualState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetVisualState(System::Windows::Automation::WindowVisualState state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Windows.Automation.WindowVisualState" />
      </Parameters>
      <Docs>
        <param name="state"><span data-ttu-id="7d494-121">Stato di visualizzazione della finestra richiesto.</span><span class="sxs-lookup"><span data-stu-id="7d494-121">The requested visual state of the window.</span></span></param>
        <summary><span data-ttu-id="7d494-122">Modifica lo stato di visualizzazione della finestra.</span><span class="sxs-lookup"><span data-stu-id="7d494-122">Changes the visual state of the window.</span></span> <span data-ttu-id="7d494-123">Ad esempio, la riduce al minimo o la ingrandisce.</span><span class="sxs-lookup"><span data-stu-id="7d494-123">For example, minimizes or maximizes it.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7d494-124">Quando il controllo non supporta il comportamento richiesto.</span><span class="sxs-lookup"><span data-stu-id="7d494-124">When the control does not support the requested behavior.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VisualState">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.WindowVisualState VisualState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.WindowVisualState VisualState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.VisualState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VisualState As WindowVisualState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::WindowVisualState VisualState { System::Windows::Automation::WindowVisualState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.WindowVisualState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7d494-125">Ottiene lo stato di visualizzazione della finestra.</span><span class="sxs-lookup"><span data-stu-id="7d494-125">Gets the visual state of the window.</span></span></summary>
        <value><span data-ttu-id="7d494-126">Stato di visualizzazione della finestra.</span><span class="sxs-lookup"><span data-stu-id="7d494-126">The visual state of the window.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForInputIdle">
      <MemberSignature Language="C#" Value="public bool WaitForInputIdle (int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForInputIdle(int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForInputIdle (milliseconds As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForInputIdle(int milliseconds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="milliseconds"><span data-ttu-id="7d494-127">Quantità di tempo, espressa in millisecondi, per cui aspettare che il processo associato diventi inattivo.</span><span class="sxs-lookup"><span data-stu-id="7d494-127">The amount of time, in milliseconds, to wait for the associated process to become idle.</span></span> <span data-ttu-id="7d494-128">Il valore massimo è <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="7d494-128">The maximum is <see cref="F:System.Int32.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="7d494-129">Comporta il blocco del codice chiamante per il lasso di tempo specificato o finché il processo associato non entra in stato di inattività, in base alla prima condizione che viene soddisfatta.</span><span class="sxs-lookup"><span data-stu-id="7d494-129">Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first.</span></span></summary>
        <returns>
          <span data-ttu-id="7d494-130"><see langword="true" /> se la finestra è diventata inattiva; <see langword="false" /> se si è verificato il timeout.</span><span class="sxs-lookup"><span data-stu-id="7d494-130"><see langword="true" /> if the window has entered the idle state; <see langword="false" /> if the timeout occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d494-131">Questo metodo viene in genere utilizzato in combinazione con la gestione di un <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>.</span><span class="sxs-lookup"><span data-stu-id="7d494-131">This method is typically used in conjunction with the handling of a <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>.</span></span>  
  
 <span data-ttu-id="7d494-132">L'implementazione dipende dal framework applicazione sottostante. Pertanto, questo metodo può restituire qualche tempo dopo la finestra è pronta per l'input dell'utente.</span><span class="sxs-lookup"><span data-stu-id="7d494-132">The implementation is dependent on the underlying application framework; therefore this method might return some time after the window is ready for user input.</span></span> <span data-ttu-id="7d494-133">Il codice chiamante non deve basarsi su questo metodo per determinare esattamente quando la finestra è diventata inattiva.</span><span class="sxs-lookup"><span data-stu-id="7d494-133">The calling code should not rely on this method to ascertain exactly when the window has become idle.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7d494-134">Quando il parametro è passato non è un numero valido.</span><span class="sxs-lookup"><span data-stu-id="7d494-134">When the parameter passed in is not a valid number.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>