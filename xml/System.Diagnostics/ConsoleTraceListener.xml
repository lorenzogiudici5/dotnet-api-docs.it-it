<Type Name="ConsoleTraceListener" FullName="System.Diagnostics.ConsoleTraceListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="26e860522f09c9efe6d62180c32e0bd6eb702da5" />
    <Meta Name="ms.sourcegitcommit" Value="b15b8cf0f6dbc1504057c88969d9ef4b790891fe" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="05/11/2018" />
    <Meta Name="ms.locfileid" Value="34061245" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ConsoleTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConsoleTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.ConsoleTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsoleTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsoleTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Viene indirizzato l'output di tracciatura e debug per l'output standard o il flusso di errore standard.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare la <xref:System.Diagnostics.ConsoleTraceListener> classe per la scrittura di traccia e debug di messaggi alla console. È possibile inizializzare un <xref:System.Diagnostics.ConsoleTraceListener> oggetto da scrivere messaggi di traccia di <xref:System.Console.Out%2A?displayProperty=nameWithType> flusso o il <xref:System.Console.Error%2A?displayProperty=nameWithType> flusso.  
  
> [!IMPORTANT]
>  <xref:System.IDisposable> interfaccia. Dopo aver utilizzato il tipo, è necessario eliminarlo direttamente o indirettamente. Per eliminare direttamente il tipo, chiamare il relativo <xref:System.IDisposable.Dispose%2A> metodo in un`try` / `catch` blocco. Per eliminarlo indirettamente, utilizzare un costrutto di linguaggio come ad esempio `using` in C# o `Using` in Visual Basic. Per ulteriori informazioni, vedere la sezione "Utilizzo di oggetti che implementano IDisposable" nel <xref:System.IDisposable> argomento relativo all'interfaccia.  
  
 Quando di traccia e debug è abilitato, il <xref:System.Diagnostics.ConsoleTraceListener> i messaggi vengono scritti nell'oggetto specificato <xref:System.Console?displayProperty=nameWithType> flusso, analogamente al modo in cui i messaggi vengono scritti con il <xref:System.Console.Write%2A?displayProperty=nameWithType> o <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metodi. In un'applicazione console, il <xref:System.Console?displayProperty=nameWithType> flussi di errore e di output scrivono messaggi nella finestra della console esistente oppure è possibile reindirizzare i flussi per scrivere un <xref:System.IO.TextWriter?displayProperty=nameWithType> istanza.  
  
> [!NOTE]
>  Se la console non esiste, come in un'applicazione basata su Windows, non vengono visualizzati i messaggi scritti nella console.  
  
 Aggiungere un <xref:System.Diagnostics.ConsoleTraceListener> oggetto appropriati <xref:System.Diagnostics.Trace.Listeners%2A> raccolta se si desidera che i messaggi scritti tramite <xref:System.Diagnostics.Trace>, <xref:System.Diagnostics.TraceSource>, o <xref:System.Diagnostics.Debug> da scrivere nella console. Inoltre, è possibile scrivere i messaggi direttamente alla console usando il <xref:System.Diagnostics.Trace.Write%2A?displayProperty=nameWithType> o <xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=nameWithType> metodi.  
  
> [!NOTE]
>  Il <xref:System.Diagnostics.Debug> e <xref:System.Diagnostics.Trace> condividono lo stesso <xref:System.Diagnostics.TraceListenerCollection> insieme, è possibile accedere tramite le rispettive `Listeners` proprietà. Se si aggiunge un <xref:System.Diagnostics.ConsoleTraceListener> dell'oggetto alla raccolta utilizzando una di queste classi, l'altra classe utilizzerà automaticamente lo stesso listener.  
  
 La maggior parte dei compilatori abilitare la traccia e debug di output tramite il flag di compilazione condizionale. Se non si abilita la traccia o di debug, i messaggi scritti tramite il <xref:System.Diagnostics.Debug?displayProperty=nameWithType> e <xref:System.Diagnostics.Trace?displayProperty=nameWithType> vengono ignorati. La sintassi per attivare l'analisi e l'output di debug è specifica del compilatore. Se si utilizzano compilatori diversi da c# o Visual Basic, vedere la documentazione del compilatore.  
  
-   Per abilitare il debug in c#, aggiungere il **/d: debug**flag alla riga di comando del compilatore quando si compila il codice, oppure è possibile aggiungere **#define DEBUG** nella parte superiore del file. In Visual Basic, aggiungere il **/d: debug = True** flag alla riga di comando del compilatore.  
  
-   Per abilitare la traccia in c#, aggiungere il **/d** flag alla riga di comando del compilatore quando si compila il codice o aggiungere **#define TRACE** nella parte superiore del file. In Visual Basic, aggiungere il **/d: TRACE = True** flag alla riga di comando del compilatore.  
  
 È possibile aggiungere un <xref:System.Diagnostics.ConsoleTraceListener> dell'oggetto per il <xref:System.Diagnostics.Trace.Listeners%2A> raccolta presenti nel codice, è possibile aggiungere un <xref:System.Diagnostics.ConsoleTraceListener> dell'oggetto per il <xref:System.Diagnostics.Trace.Listeners%2A> raccolta tramite il file di configurazione dell'applicazione. Aggiungere il <xref:System.Diagnostics.ConsoleTraceListener> oggetto nel codice per scrivere i messaggi per un percorso di sezione o l'esecuzione di codice specifici. Aggiungere il <xref:System.Diagnostics.ConsoleTraceListener> oggetto nel file di configurazione dell'applicazione per indirizzare tutti traccia e debug di messaggi alla console durante l'esecuzione dell'applicazione.  
  
 Per scrivere analisi e i messaggi nella console per una particolare sezione di codice di debug, è possibile inizializzare un <xref:System.Diagnostics.ConsoleTraceListener> dell'oggetto e aggiungerlo al <xref:System.Diagnostics.Trace.Listeners%2A> insieme. Instrumentare la sezione di codice che contiene i messaggi utilizzando il <xref:System.Diagnostics.Trace> o <xref:System.Diagnostics.Debug> classi. Alla fine della sezione di codice, rimuovere il <xref:System.Diagnostics.ConsoleTraceListener> dall'oggetto di <xref:System.Diagnostics.Trace.Listeners%2A> insieme e chiamare il <xref:System.Diagnostics.TextWriterTraceListener.Close%2A> metodo il <xref:System.Diagnostics.ConsoleTraceListener>.  
  
 Per indirizzare tutti traccia e debug messaggi alla console durante l'esecuzione dell'applicazione, aggiungere un <xref:System.Diagnostics.ConsoleTraceListener> oggetto al file di configurazione dell'applicazione. Modificare il file di configurazione che corrisponde al nome dell'applicazione o il file app. config in un [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] progetto. In questo file, inserire un elemento per un <xref:System.Diagnostics.ConsoleTraceListener>.  
  
 L'esempio seguente aggiunge un <xref:System.Diagnostics.ConsoleTraceListener> oggetto denominato `configConsoleListener` per il <xref:System.Diagnostics.Trace.Listeners%2A> insieme.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="configConsoleListener"            type="System.Diagnostics.ConsoleTraceListener" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
 </configuration>  
```  
  
 Per informazioni dettagliate sull'aggiunta dei listener di traccia nel file di configurazione dell'applicazione, vedere [ &lt;listener&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/listeners-element-for-trace.md).  
  
   
  
## Examples  
 Esempio di codice seguente implementa un'applicazione console costituito da una classe con due metodi pubblici.  
  
 Il `Main` metodo esamina gli argomenti della riga di comando e determina se l'output di traccia deve essere indirizzato al flusso di errore standard o nel flusso di output standard. `Main` Crea e Inizializza un <xref:System.Diagnostics.ConsoleTraceListener> oggetto per l'oggetto specificato <xref:System.Console> flusso di output e aggiunge l'oggetto alla raccolta di listener di traccia. Chiama quindi il `WriteEnvironmentInfoToTrace` metodo, che scrive i dettagli sull'ambiente di esecuzione e la configurazione del listener di traccia nell'output di traccia.  
  
 Quando viene eseguita l'applicazione di esempio, i dettagli di configurazione Ambiente e di traccia vengono scritti nel flusso di output di console specificato tramite il <xref:System.Diagnostics.ConsoleTraceListener> oggetto.  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#1)]
 [!code-vb[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Trace" />
    <altmember cref="T:System.Console" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.ConsoleTraceListener" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.ConsoleTraceListener" /> con l'output di traccia scritto nel flusso di output standard.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore inizializza un <xref:System.Diagnostics.ConsoleTraceListener> oggetto da scrivere i messaggi di <xref:System.Console.Out%2A?displayProperty=nameWithType> flusso. Il relativo <xref:System.Diagnostics.TraceListener.Name%2A> proprietà viene inizializzata su una stringa vuota ("").  
  
   
  
## Examples  
 Nell'esempio di codice viene inizializzato un <xref:System.Diagnostics.ConsoleTraceListener> oggetto per l'oggetto specificato <xref:System.Console> flusso di output e lo aggiunge alla raccolta di listener di traccia. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Diagnostics.ConsoleTraceListener> classe.  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener (bool useErrorStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool useErrorStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (useErrorStream As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener(bool useErrorStream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="useErrorStream" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useErrorStream">
          <see langword="true" /> per scrivere l'output di tracciatura e debug nel flusso di errore standard; <see langword="false" /> per scrivere l'output di tracciatura e debug nel flusso di output standard.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.ConsoleTraceListener" /> con un'opzione per la scrittura dell'output di traccia nel flusso di output standard o nel flusso di errore standard.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore inizializza un <xref:System.Diagnostics.ConsoleTraceListener> oggetto da scrivere i messaggi di <xref:System.Console.Out%2A?displayProperty=nameWithType> o <xref:System.Console.Error%2A?displayProperty=nameWithType> flusso. Il relativo <xref:System.Diagnostics.TraceListener.Name%2A> proprietà viene inizializzata su una stringa vuota ("").  
  
   
  
## Examples  
 Nell'esempio di codice viene inizializzato un <xref:System.Diagnostics.ConsoleTraceListener> oggetto per l'oggetto specificato <xref:System.Console> flusso di output e lo aggiunge alla raccolta di listener di traccia. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Diagnostics.ConsoleTraceListener> classe.  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Console" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chiude l'output al flusso specificato per questo listener di traccia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il flusso specificato per questo <xref:System.Diagnostics.ConsoleTraceListener> istanza (entrambi il <xref:System.Console.Out%2A?displayProperty=nameWithType> flusso o <xref:System.Console.Error%2A?displayProperty=nameWithType> flusso) viene chiuso.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>