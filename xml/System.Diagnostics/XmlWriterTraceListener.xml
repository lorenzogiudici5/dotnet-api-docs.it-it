<Type Name="XmlWriterTraceListener" FullName="System.Diagnostics.XmlWriterTraceListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="947a1f9fa7d052610f5006e95373c72b4f3aae6c" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52231200" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlWriterTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlWriterTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.XmlWriterTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlWriterTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriterTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type XmlWriterTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Indirizza l'output di tracciatura o di debug come dati con codifica XML a una classe <see cref="T:System.IO.TextWriter" /> o <see cref="T:System.IO.Stream" />, ad esempio una classe <see cref="T:System.IO.FileStream" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Deve avere non gestito per creare un'istanza di autorizzazione al codice il <xref:System.Diagnostics.XmlWriterTraceListener> classe.  
  
 Il <xref:System.Diagnostics.XmlWriterTraceListener> classe converte traccia e debug di informazioni in un flusso di testo con codifica XML. La descrizione dell'output XML viene visualizzata nelle tabelle riportate di seguito. È possibile usare la [strumento Service Trace Viewer (SvcTraceViewer.exe)](https://go.microsoft.com/fwlink/p/?LinkId=240129) per visualizzare il XML di output.  
  
 È possibile abilitare o disabilitare un <xref:System.Diagnostics.XmlWriterTraceListener> tramite il file di configurazione dell'applicazione e utilizzare quindi l'applicazione configurata <xref:System.Diagnostics.XmlWriterTraceListener> nell'applicazione. In alternativa, è possibile creare un <xref:System.Diagnostics.XmlWriterTraceListener> nel codice.  
  
 Per configurare un <xref:System.Diagnostics.XmlWriterTraceListener>, modificare il file di configurazione che corrisponde al nome dell'applicazione. In questo file, è possibile aggiungere o rimuovere un listener, impostare le proprietà di un listener o rimuovere i listener. Il file di configurazione deve essere formattato come nell'esempio seguente.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="xmlListener"   
          type="System.Diagnostics.XmlWriterTraceListener"   
          initializeData="xmlOutput.xml"   
          traceOutputOptions="ProcessId, DateTime" />  
        <remove name="Default" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
</configuration>  
```  
  
 Il <xref:System.Diagnostics.XmlWriterTraceListener> classe eredita le <xref:System.Diagnostics.TraceListener.Filter%2A> proprietà dalla classe di base <xref:System.Diagnostics.TraceListener>.  Il <xref:System.Diagnostics.TraceListener.Filter%2A> proprietà consente a un livello aggiuntivo di output di traccia nel listener del filtro.  Se è presente un filtro è presente, il `Trace` metodi di chiamata di listener di traccia di <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A> metodo del filtro per determinare se emettere la traccia.  
  
> [!NOTE]
>  Se viene effettuato un tentativo di scrivere in un file in uso o non disponibile, il nome del file viene automaticamente preceduto da un GUID.  
  
> [!NOTE]
>  Metodi di listener sono destinati a essere chiamato da metodi del <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource> classi.  I metodi del listener non sono destinati a essere chiamato direttamente dal codice dell'applicazione. Il <xref:System.Diagnostics.XmlWriterTraceListener> listener è destinato principalmente l'utilizzo da parte di <xref:System.Diagnostics.TraceSource> classe. Il <xref:System.Diagnostics.XmlWriterTraceListener.Write%2A> e <xref:System.Diagnostics.XmlWriterTraceListener.WriteLine%2A> metodi possono essere chiamati <xref:System.Diagnostics.Trace> e <xref:System.Diagnostics.Debug> classi e i valori predefiniti vengono forniti per gli elementi XML che <xref:System.Diagnostics.Trace> e <xref:System.Diagnostics.Debug> non forniscono valori per.  
  
 Nella tabella seguente descrive gli elementi e attributi di output XML.  
  
|Elemento|Attributi|Output|Note|  
|-------------|----------------|------------|-----------|  
|`CallStack`|nessuno|Dipende dalla presenza del <xref:System.Diagnostics.TraceOptions.Callstack> flag nel <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Caratteri speciali, ad esempio > o < vengono sostituiti da sequenze di escape. Vedere la tabella di conversione dei caratteri di escape che segue.|  
|`Computer`|nessuno|Sempre presente.|Il valore della proprietà <xref:System.Environment.MachineName%2A>.|  
|`Correlation`|`ActivityID`|Sempre presente|Se non specificato, il valore predefinito è un GUID vuoto.|  
||`RelatedActivityID`|Dipende dalla presenza del `relatedActivityId` parametro nella chiamata al metodo di traccia.|Il parametro `relatedActivityId` del metodo <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A>.|  
|`DataItem`|nessuno|Dipende i `data` parametro del <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> (metodo).|Questo elemento può contenere una matrice di elementi o un elemento, in modo che i valori vengono scritti come un set di `DataItem` i nodi sotto il `TraceData` elemento.<br /><br /> I dati di output viene utilizzato il `ToString` metodo degli oggetti dati passati.|  
|`EventID`|nessuno|Sempre presente.|Input del parametro (`id`).|  
|`Execution`|`ProcessName`|Sempre presente.|Dal <xref:System.Diagnostics.TraceEventCache>.|  
||`ProcessID`|Sempre presente.|Dal <xref:System.Diagnostics.TraceEventCache>. In Windows 98 e Windows Me, sistemi operativi se `ProcessID` è maggiore di 2.147.483.647 è una rappresentazione positiva di un numero negativo e deve essere convertita per ottenere l'identificatore di processo corretto.|  
||`ThreadID`|Sempre presente.|Dal <xref:System.Diagnostics.TraceEventCache>.|  
|`Level`|nessuno|Sempre presente.|Input del parametro (il valore numerico del `eventType`). I valori dei parametri maggiori di 255 vengono restituiti come 255.|  
|`LogicalOperationStack`|nessuno|Dipende dalla presenza del <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag nel <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Può esistere più di un'operazione logica, in modo che i valori vengono scritti come `LogicalOperation` i nodi sotto il `LogicalOperationStack` elemento.|  
|`Message`|nessuno|Dipende dalla presenza di un messaggio nella chiamata al metodo di traccia.|Questo elemento è un messaggio formattato se vengono forniti gli argomenti di formattazione.|  
|`Source`|`Name`|Sempre presente.|Parametro di input.|  
|`SubType`|`Name`|Sempre presente.|Parametro di input.|  
|`TimeCreated`|`SystemTime`|Sempre presente.|Se non è presente nel <xref:System.Diagnostics.TraceEventCache>, il valore predefinito è l'ora corrente.|  
|`TimeStamp`|nessuno|Dipende dalla presenza del <xref:System.Diagnostics.TraceOptions.Timestamp> flag nel <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Dal <xref:System.Diagnostics.TraceEventCache>.|  
|`Type`|nessuno|Sempre presente.|Sempre il valore 3.|  
  
 Nella tabella seguente mostra i caratteri di escape nell'output XML. Escape si verifica in tutti gli elementi e attributi ad eccezione del `DataItem` elemento che non sottoposto a escape se l'oggetto passato per il `data` parametro del <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> metodo è un <xref:System.Xml.XPath.XPathNavigator> oggetto. Se un' <xref:System.Xml.XPath.XPathNavigator> viene usato per l'oggetto dati, il <xref:System.Xml.XPath.XPathNavigator.MoveToRoot%2A> viene chiamato e l'intero nodo radice è analizzato come dati non di escape.  
  
|Caratteri di escape|Valore|  
|-----------------------|-----------|  
|&|&amp;|  
|\<|&lt;|  
|>|&gt;|  
|"|&quot;|  
|\|&apos;|  
|0xD|&\#xD;|  
|0xA|&\#xA;|  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Diagnostics.XmlWriterTraceListener> classe per la scrittura dei dati con caratteri di escape e non sottoposto a escape per i log di file.  
  
 [!code-csharp[System.Diagnostics.XmlWriterTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.XmlWriterTraceListener/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.XmlWriterTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.XmlWriterTraceListener/VB/module1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">la possibilità di chiamare codice non gestito. Enumerazione associata: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.XmlWriterTraceListener" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.Stream -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Oggetto <see cref="T:System.IO.Stream" /> che rappresenta il flusso in cui scrive il listener di traccia.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.XmlWriterTraceListener" />, utilizzando il flusso specificato come destinatario dell'output di debug o di tracciatura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Diagnostics.TraceListener.Name%2A> proprietà viene inizializzata su una stringa vuota ("").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> è <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">la possibilità di chiamare codice non gestito. Enumerazione associata: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.TextWriter -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Classe <see cref="T:System.IO.TextWriter" /> che riceve l'output dal listener di traccia.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.XmlWriterTraceListener" />, utilizzando il writer specificato come destinatario dell'output di debug o di tracciatura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Diagnostics.TraceListener.Name%2A> proprietà viene inizializzata su una stringa vuota ("").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> è <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">la possibilità di chiamare codice non gestito. Enumerazione associata: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener filename" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Nome del file in cui scrivere.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.XmlWriterTraceListener" />, utilizzando il file specificato come destinatario dell'output di debug o di tracciatura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore inizializza una nuova istanza di <xref:System.IO.StreamWriter> classe per il file specificato nel percorso specificato, usando <xref:System.Text.Encoding.UTF8%2A> codifica. Se il file esiste, questo viene aggiunto a. Se il file non esiste, viene creato un nuovo file.  
  
> [!NOTE]
>  Per ridurre le probabilità di un'eccezione, qualsiasi carattere che potrebbe invalidare l'output viene sostituito con un "?" caratteri.  
  
 Il <xref:System.Diagnostics.TraceListener.Name%2A> proprietà viene inizializzata su una stringa vuota ("").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="filename" /> è <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">la possibilità di chiamare codice non gestito. Enumerazione associata: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.Stream stream, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::Stream ^ stream, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.Stream * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (stream, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">Oggetto <see cref="T:System.IO.Stream" /> che rappresenta il flusso in cui scrive il listener di traccia.</param>
        <param name="name">Nome della nuova istanza.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> con il nome specificato, utilizzando il flusso specificato come destinatario dell'output di debug o di tracciatura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore inizializza la <xref:System.Diagnostics.TraceListener.Name%2A> proprietà per il `name` valore del parametro o in una stringa vuota ("") se il `name` parametro è `null`. Il nome può essere utilizzato come indice nella <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> raccolta per modificare a livello di programmazione le proprietà per il listener. Ad esempio, il codice seguente imposta la <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà di un'istanza di <xref:System.Diagnostics.XmlWriterTraceListener> cui <xref:System.Diagnostics.TraceListener.Name%2A> proprietà è "xmlListener".  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =   
    TraceOptions.Timestamp  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> è <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">la possibilità di chiamare codice non gestito. Enumerazione associata: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.TextWriter writer, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::TextWriter ^ writer, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.TextWriter * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (writer, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">Classe <see cref="T:System.IO.TextWriter" /> che riceve l'output dal listener di traccia.</param>
        <param name="name">Nome della nuova istanza.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> con il nome specificato, utilizzando il writer specificato come destinatario dell'output di debug o di tracciatura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore inizializza la <xref:System.Diagnostics.TraceListener.Name%2A> proprietà per il `name` valore del parametro o in una stringa vuota ("") se il `name` parametro è `null`. Il nome può essere utilizzato come indice nella <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> raccolta per modificare a livello di programmazione le proprietà per il listener. Ad esempio, il codice seguente imposta la <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà di un'istanza di <xref:System.Diagnostics.XmlWriterTraceListener> cui <xref:System.Diagnostics.TraceListener.Name%2A> proprietà è "xmlListener".  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =   
    TraceOptions.Timestamp.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> è <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">la possibilità di chiamare codice non gestito. Enumerazione associata: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (string filename, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::String ^ filename, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : string * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (filename, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Nome del file in cui scrivere.</param>
        <param name="name">Nome della nuova istanza.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> con il nome specificato, utilizzando il file specificato come destinatario dell'output di debug o di tracciatura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore inizializza una nuova istanza di <xref:System.IO.StreamWriter> classe per il file specificato nel percorso specificato, usando <xref:System.Text.Encoding.UTF8%2A> codifica. Se il file esiste, questo viene aggiunto a. Se il file non esiste, viene creato un nuovo file.  
  
> [!NOTE]
>  Per ridurre le probabilità di un'eccezione, qualsiasi carattere che potrebbe invalidare l'output viene sostituito con un "?" caratteri.  
  
 Il <xref:System.Diagnostics.TraceListener.Name%2A> è impostata sul `name` valore del parametro o una stringa vuota ("") se il `name` parametro è `null`. Il nome può essere utilizzato come indice nella <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> raccolta per modificare a livello di programmazione le proprietà per il listener. Ad esempio, il codice seguente imposta la <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà di un'istanza di <xref:System.Diagnostics.XmlWriterTraceListener> cui <xref:System.Diagnostics.TraceListener.Name%2A> proprietà è "xmlListener".  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =  
    TraceOptions.Timestamp.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> è <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">la possibilità di chiamare codice non gestito. Enumerazione associata: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="xmlWriterTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chiude la classe <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /> per questo listener in modo che non riceva più output di tracciatura o di debug.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="override this.Fail : string * string -&gt; unit" Usage="xmlWriterTraceListener.Fail (message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Messaggio di errore da scrivere.</param>
        <param name="detailMessage">Messaggio di errore dettagliato da accodare al messaggio di errore.</param>
        <summary>Scrive informazioni di traccia, compresi un messaggio di errore e un messaggio di errore dettagliato, nel file o nel flusso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il comportamento predefinito consiste nel visualizzare il messaggio e il messaggio dettagliato in una finestra di messaggio quando l'applicazione è in esecuzione in modalità interfaccia utente e la <xref:System.Diagnostics.TraceListener> di istanze nel <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> raccolta. Per impostazione predefinita, la raccolta contiene un'istanza di <xref:System.Diagnostics.DefaultTraceListener>. È possibile personalizzare questo comportamento aggiungendo o rimuovendo un <xref:System.Diagnostics.TraceListener> dalla raccolta.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">la possibilità di chiamare codice non gestito. Enumerazione associata: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Scrive dati di traccia nel flusso o nel file di output.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="xmlWriterTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">Oggetto <see cref="T:System.Diagnostics.TraceEventCache" /> contenente l'ID processo corrente, l'ID thread e le informazioni di traccia dello stack.</param>
        <param name="source">Nome di origine.</param>
        <param name="eventType">Uno dei valori di <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Identificatore numerico per l'evento.</param>
        <param name="data">Oggetto dati da creare.</param>
        <summary>Scrive informazioni di traccia, un oggetto dati e informazioni di evento nel file o nel flusso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `eventCache`, `source`, `eventType`, e `id` i parametri vengono utilizzati nell'intestazione e piè di pagina della traccia. Il `id` parametro viene convertito in un intero senza segno prima della scrittura, pertanto, un valore negativo `id` valore viene scritto come un grande numero intero positivo. Il `data` parametro viene scritta come un `DataItem` nodo il `TraceData` elemento. Il `ToString` metodo dell'oggetto dati viene utilizzato per convertire l'oggetto in una stringa.  
  
> [!IMPORTANT]
>  Questo metodo non deve essere chiamato direttamente dal codice dell'applicazione.  Viene chiamato dai metodi della <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource> classi per scrivere i dati di traccia.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">la possibilità di chiamare codice non gestito. Enumerazione associata: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="xmlWriterTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">Oggetto <see cref="T:System.Diagnostics.TraceEventCache" /> contenente l'ID processo corrente, l'ID thread e le informazioni di traccia dello stack.</param>
        <param name="source">Nome di origine.</param>
        <param name="eventType">Uno dei valori di <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Identificatore numerico per l'evento.</param>
        <param name="data">Matrice di oggetti dati da creare.</param>
        <summary>Scrive informazioni di traccia, oggetti dati e informazioni di evento nel file o nel flusso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `eventCache`, `source`, `eventType`, e `id` i parametri vengono utilizzati nell'intestazione e piè di pagina della traccia. Il `id` parametro viene convertito in un intero senza segno prima della scrittura, pertanto, un valore negativo `id` valore viene scritto come un grande numero intero positivo. Gli oggetti nel `data` matrice di parametri vengono scritti come `DataItem` i nodi di `TraceData` elemento. Il `ToString` metodo di ogni oggetto dati viene utilizzato per convertire l'oggetto in una stringa.  
  
> [!IMPORTANT]
>  Questo metodo non deve essere chiamato direttamente dal codice dell'applicazione.  Viene chiamato dai metodi della <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource> classi per scrivere i dati di traccia.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">la possibilità di chiamare codice non gestito. Enumerazione associata: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Scrive informazioni di traccia evento nel flusso o nel file di output.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="xmlWriterTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">Oggetto <see cref="T:System.Diagnostics.TraceEventCache" /> contenente l'ID processo corrente, l'ID thread e le informazioni di traccia dello stack.</param>
        <param name="source">Nome di origine.</param>
        <param name="eventType">Uno dei valori di <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Identificatore numerico per l'evento.</param>
        <param name="message">Messaggio da inserire.</param>
        <summary>Scrive informazioni di traccia, un messaggio e informazioni di evento nel file o nel flusso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `eventCache`, `source`, `eventType`, e `id` i parametri vengono utilizzati nell'intestazione e piè di pagina della traccia. Il `id` parametro viene convertito in un intero senza segno prima della scrittura, pertanto, un valore negativo `id` valore viene scritto come un grande numero intero positivo. Il `message` parametro viene scritto come il `Message` elemento.  
  
> [!IMPORTANT]
>  Questo metodo non deve essere chiamato direttamente dal codice dell'applicazione.  Viene chiamato dai metodi della <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource> classi per scrivere i dati di traccia.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">la possibilità di chiamare codice non gestito. Enumerazione associata: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="xmlWriterTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">Oggetto <see cref="T:System.Diagnostics.TraceEventCache" /> contenente l'ID processo corrente, l'ID thread e le informazioni di traccia dello stack.</param>
        <param name="source">Nome di origine.</param>
        <param name="eventType">Uno dei valori di <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Identificatore numerico per l'evento.</param>
        <param name="format">Stringa di formato che contiene zero o più elementi di formato, corrispondenti a oggetti nella matrice <paramref name="args" />.</param>
        <param name="args">Matrice di oggetti che contiene zero o più oggetti da formattare.</param>
        <summary>Scrive informazioni di traccia, un messaggio formattato e informazioni di evento nel file o nel flusso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `eventCache`, `source`, `eventType`, e `id` i parametri vengono utilizzati nell'intestazione e piè di pagina della traccia. Il `id` parametro viene convertito in un intero senza segno prima della scrittura, pertanto, un valore negativo `id` valore viene scritto come un grande numero intero positivo. Il <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> metodo viene chiamato, passando il `format` stringa e `args` matrice come parametri, per formattare il `args` matrice di oggetti come il `Message` elemento.  
  
> [!IMPORTANT]
>  Questo metodo non deve essere chiamato direttamente dal codice dell'applicazione.  Viene chiamato dai metodi della <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource> classi per scrivere i dati di traccia.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">la possibilità di chiamare codice non gestito. Enumerazione associata: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceTransfer">
      <MemberSignature Language="C#" Value="public override void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceTransfer(class System.Diagnostics.TraceEventCache eventCache, string source, int32 id, string message, valuetype System.Guid relatedActivityId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceTransfer (eventCache As TraceEventCache, source As String, id As Integer, message As String, relatedActivityId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceTransfer(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, int id, System::String ^ message, Guid relatedActivityId);" />
      <MemberSignature Language="F#" Value="override this.TraceTransfer : System.Diagnostics.TraceEventCache * string * int * string * Guid -&gt; unit" Usage="xmlWriterTraceListener.TraceTransfer (eventCache, source, id, message, relatedActivityId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="relatedActivityId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="eventCache">Oggetto <see cref="T:System.Diagnostics.TraceEventCache" /> contenente l'ID processo corrente, l'ID thread e le informazioni di traccia dello stack.</param>
        <param name="source">Nome di origine.</param>
        <param name="id">Identificatore numerico per l'evento.</param>
        <param name="message">Messaggio di traccia da scrivere.</param>
        <param name="relatedActivityId">Struttura <see cref="T:System.Guid" /> che identifica un'attività correlata.</param>
        <summary>Scrive informazioni di traccia, compresi l'identità di un'attività correlata, un messaggio e informazioni di evento, nel file o nel flusso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> metodo viene utilizzato per la correlazione di tracce correlate. Il `eventCache`, `source`, `id`, e `relatedActivityId` i parametri vengono utilizzati nell'intestazione e piè di pagina della traccia. Il `id` parametro viene convertito in un intero senza segno prima della scrittura, pertanto, un valore negativo `id` valore viene scritto come un grande numero intero positivo. Il `message` parametro viene scritto come il `Message` elemento. Il <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType> viene chiamato per convertire il `relatedActivityId`valore da una "B" formato stringa, che viene visualizzato nell'intestazione. Il `SubTypeName` elemento del piè di pagina identifica il tipo di evento di traccia come un <xref:System.Diagnostics.TraceEventType.Transfer>.  
  
> [!IMPORTANT]
>  Il <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> metodo non è destinato a essere chiamato dal codice dell'applicazione.  Deve essere chiamato da un <xref:System.Diagnostics.TraceSource> oggetto per generare informazioni di traccia per relativo <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">la possibilità di chiamare codice non gestito. Enumerazione associata: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="xmlWriterTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Messaggio da inserire.</param>
        <summary>Scrive nel file o nel flusso un messaggio testuale senza informazioni di contesto aggiuntive.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> metodo per includere le informazioni di contesto nell'output del log.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">la possibilità di chiamare codice non gestito. Enumerazione associata: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="xmlWriterTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Messaggio da inserire.</param>
        <summary>Scrive nel file o nel flusso un messaggio testuale privo di informazioni di contesto aggiuntive, seguito dal terminatore di riga corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> metodo per includere le informazioni di contesto nell'output del log.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">la possibilità di chiamare codice non gestito. Enumerazione associata: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
  </Members>
</Type>