<Type Name="DefaultTraceListener" FullName="System.Diagnostics.DefaultTraceListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="739480e6735e978535fe7182c408602fc0ce8890" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37663992" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DefaultTraceListener : System.Diagnostics.TraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi DefaultTraceListener extends System.Diagnostics.TraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DefaultTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class DefaultTraceListener&#xA;Inherits TraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class DefaultTraceListener : System::Diagnostics::TraceListener" />
  <TypeSignature Language="F#" Value="type DefaultTraceListener = class&#xA;    inherit TraceListener" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce i metodi di output predefiniti e il comportamento per la traccia.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'istanza di questa classe viene aggiunta automaticamente per il <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=nameWithType> e <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> raccolte. In modo esplicito aggiungendo un secondo <xref:System.Diagnostics.DefaultTraceListener> cause duplicare i messaggi nella finestra di output del debugger e finestre di messaggio duplicati per le asserzioni.  
  
 Per impostazione predefinita, il <xref:System.Diagnostics.DefaultTraceListener.Write%2A> e <xref:System.Diagnostics.DefaultTraceListener.WriteLine%2A> metodi creano il messaggio a Win32 `OutputDebugString` funzione e di ottenere il <xref:System.Diagnostics.Debugger.Log%2A?displayProperty=nameWithType> (metodo). Per informazioni sul `OutputDebugString` function, vedere il SDK di piattaforma o MSDN.  
  
 Il <xref:System.Diagnostics.DefaultTraceListener.Fail%2A> metodo, per impostazione predefinita, viene visualizzata una finestra di messaggio quando l'applicazione è in esecuzione in modalità interfaccia utente; emette anche il messaggio usando <xref:System.Diagnostics.DefaultTraceListener.WriteLine%2A>.  
  
> [!NOTE]
>  La visualizzazione della finestra di messaggio per <xref:System.Diagnostics.Debug.Assert%2A> e <xref:System.Diagnostics.Debug.Fail%2A> chiamate al metodo dipende dalla presenza del <xref:System.Diagnostics.DefaultTraceListener>. Se il <xref:System.Diagnostics.DefaultTraceListener> non si trova nel <xref:System.Diagnostics.Trace.Listeners%2A> insieme, la finestra di messaggio non viene visualizzata. Il <xref:System.Diagnostics.DefaultTraceListener> può essere rimossa mediante il [ \<cancellare > elemento](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), dal [ \<rimuovere > elemento](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), o chiamando il <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> metodo sul <xref:System.Diagnostics.Trace.Listeners%2A> proprietà (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 È necessario abilitare la tracciatura o di debug per usare un listener di traccia. La sintassi seguente è specifica del compilatore. Se si utilizzano i compilatori diversi da c# o Visual Basic, vedere la documentazione per il compilatore.  
  
-   Per abilitare il debug in c#, aggiungere il `/d:DEBUG` flag per la riga di comando del compilatore quando compila il codice o si aggiunge `#define DEBUG` all'inizio del file app. In Visual Basic, aggiungere il `/d:DEBUG=True` flag per la riga di comando del compilatore.  
  
-   Per abilitare la traccia in c#, aggiungere il `/d:TRACE` flag per la riga di comando del compilatore quando si compila il codice, o aggiungere `#define TRACE` nella parte superiore del file app. In Visual Basic, aggiungere il `/d:TRACE=True` flag per la riga di comando del compilatore.  
  
 Per aggiungere un listener di traccia, modificare il file di configurazione che corrisponde al nome dell'applicazione. All'interno di questo file, è possibile aggiungere un listener, impostarne il tipo e impostare i relativi parametri, rimuovere un listener o cancellare tutti i listener precedentemente impostati dall'applicazione. Il file di configurazione deve essere formattato in modo simile all'esempio seguente:  
  
```xml  
<configuration>  
<system.diagnostics>  
  <trace autoflush="false" indentsize="4">  
    <listeners>  
      <remove name="Default" />  
      <add name="myListener"  type="System.Diagnostics.TextWriterTraceListener"    initializeData="c:\myListener.log" />  
    </listeners>  
  </trace>  
</system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 Esempio di codice seguente calcola binomiali coefficienti, costituiti da valori usati nella probabilità e le statistiche. Questo esempio viene usato un <xref:System.Diagnostics.DefaultTraceListener> i risultati di traccia e registrazione degli errori. Crea una nuova <xref:System.Diagnostics.DefaultTraceListener>, lo aggiunge al <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> insieme e imposta il <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A> proprietà nel file di log specificato negli argomenti della riga di comando.  
  
 Se viene rilevato un errore durante l'elaborazione di parametro di input o se il `CalcBinomial` funzione genera un'eccezione, il <xref:System.Diagnostics.DefaultTraceListener.Fail%2A> metodo registra e visualizza un messaggio di errore. Se il <xref:System.Diagnostics.DefaultTraceListener.AssertUiEnabled%2A> è di proprietà `false`, il messaggio di errore inoltre viene scritto nella console. Quando il risultato viene calcolato correttamente, il <xref:System.Diagnostics.DefaultTraceListener.Write%28System.String%29> e <xref:System.Diagnostics.DefaultTraceListener.WriteLine%28System.String%29> metodi scrivono i risultati nel file di log.  
  
 Il <xref:System.Diagnostics.DefaultTraceListener.Fail%2A>, <xref:System.Diagnostics.DefaultTraceListener.Write%2A>, e <xref:System.Diagnostics.DefaultTraceListener.WriteLine%2A> metodi che le informazioni di traccia essere scritto solo il <xref:System.Diagnostics.DefaultTraceListener>. Per scrivere le informazioni di traccia di tutti i listener di traccia nel <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> raccolta, usare il <xref:System.Diagnostics.Trace.Fail%2A>, <xref:System.Diagnostics.Trace.Write%2A>, e <xref:System.Diagnostics.Trace.WriteLine%2A> metodi del <xref:System.Diagnostics.Trace> classe.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/CS/binomial.cs#11)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/VB/binomial.vb#11)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Questa classe è thread-safe.</threadsafe>
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
    <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Trace" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DefaultTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DefaultTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.DefaultTraceListener" /> con "Default" come valore della proprietà <see cref="P:System.Diagnostics.TraceListener.Name" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Il codice seguente esempio rimuove il <xref:System.Diagnostics.DefaultTraceListener> forniti dall'applicazione dal <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> raccolta e quindi crea un nuovo <xref:System.Diagnostics.DefaultTraceListener> e lo aggiunge al <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> raccolta.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/CS/binomial.cs#3)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/VB/binomial.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="AssertUiEnabled">
      <MemberSignature Language="C#" Value="public bool AssertUiEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AssertUiEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.DefaultTraceListener.AssertUiEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property AssertUiEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AssertUiEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AssertUiEnabled : bool with get, set" Usage="System.Diagnostics.DefaultTraceListener.AssertUiEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("AssertUiEnabled defaults to False; should follow Environment.UserInteractive.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se l'applicazione è in esecuzione nella modalità interfaccia utente.</summary>
        <value>
          <see langword="true" /> se la modalità interfaccia utente è attivata; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente chiama una funzione che chiama il <xref:System.Diagnostics.DefaultTraceListener.Fail%28System.String%2CSystem.String%29> metodo per registrare un messaggio di errore se la funzione genera un'eccezione. Se il <xref:System.Diagnostics.DefaultTraceListener.AssertUiEnabled%2A> è di proprietà `false`, il metodo scrive inoltre il messaggio di errore nella console.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/CS/binomial.cs#8)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/VB/binomial.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fail">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Genera o visualizza un messaggio e una traccia dello stack per un'asserzione che ha sempre esito negativo.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DefaultTraceListener.Fail(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Fail (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Fail(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.Fail : string -&gt; unit" Usage="defaultTraceListener.Fail message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Messaggio da generare o da visualizzare.</param>
        <summary>Genera o visualizza un messaggio e una traccia dello stack per un'asserzione che ha sempre esito negativo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, questo metodo invia il `message` parametro e un'analisi dello stack di una finestra di messaggio (quando l'applicazione viene eseguita in modalità interfaccia utente) e di ottenere il <xref:System.Diagnostics.DefaultTraceListener> istanza.  
  
   
  
## Examples  
 Esempio di codice seguente scrive un messaggio di errore a un <xref:System.Diagnostics.DefaultTraceListener> utilizzando il <xref:System.Diagnostics.DefaultTraceListener.Fail%28System.String%29> (metodo). Se non è disponibile un'interfaccia utente, il metodo scrive inoltre il messaggio nella console.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/CS/binomial.cs#6)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/VB/binomial.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DefaultTraceListener.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="override this.Fail : string * string -&gt; unit" Usage="defaultTraceListener.Fail (message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Messaggio da generare o da visualizzare.</param>
        <param name="detailMessage">Messaggio dettagliato da generare o da visualizzare.</param>
        <summary>Genera o visualizza un messaggio dettagliato e una traccia dello stack per un'asserzione che ha sempre esito negativo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, questo metodo invia il `message` parametro, il `detailMessage` parametro e un'analisi dello stack di una finestra di messaggio (quando l'applicazione viene eseguita in modalità interfaccia utente) e di ottenere il <xref:System.Diagnostics.DefaultTraceListener> istanza.  
  
   
  
## Examples  
 Esempio di codice seguente chiama una funzione che chiama il <xref:System.Diagnostics.DefaultTraceListener.Fail%28System.String%2CSystem.String%29> metodo per registrare un messaggio di errore dettagliato, se la funzione genera un'eccezione. Il metodo scrive il messaggio nella console se non è disponibile un'interfaccia utente.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/CS/binomial.cs#8)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/VB/binomial.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="LogFileName">
      <MemberSignature Language="C#" Value="public string LogFileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LogFileName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.DefaultTraceListener.LogFileName" />
      <MemberSignature Language="VB.NET" Value="Public Property LogFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LogFileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LogFileName : string with get, set" Usage="System.Diagnostics.DefaultTraceListener.LogFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome di un file di log in cui scrivere i messaggi di traccia o debug.</summary>
        <value>Nome di un file di log in cui scrivere messaggi di traccia o di debug.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente crea un nuovo <xref:System.Diagnostics.DefaultTraceListener>, lo aggiunge al <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> insieme e imposta il <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A> proprietà nel file di log specificato negli argomenti della riga di comando.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/CS/binomial.cs#4)]
 [!code-vb[System.Diagnostics.DefaultTraceListener#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener/VB/binomial.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DefaultTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="defaultTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Messaggio da scrivere in <see langword="OutputDebugString" /> e <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" />.</param>
        <summary>Scrive l'output nella funzione <see langword="OutputDebugString" /> e nel metodo <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per informazioni su Win32 `OutputDebugString` debug funzione, vedere "OutputDebugString" in Platform SDK o MSDN.  
  
   
  
## Examples  
 Esempio di codice seguente formatta i risultati di una funzione e Usa il <xref:System.Diagnostics.DefaultTraceListener.Write%28System.String%29> metodo per scrivere la prima parte del messaggio da un <xref:System.Diagnostics.DefaultTraceListener>.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener.WriteLine#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener.WriteLine/CS/defaulttracelistener.cs#4)]
 [!code-vb[System.Diagnostics.DefaultTraceListener.WriteLine#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener.WriteLine/VB/defaulttracelistener.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.DefaultTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="defaultTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Messaggio da scrivere in <see langword="OutputDebugString" /> e <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" />.</param>
        <summary>Scrive l'output nella funzione <see langword="OutputDebugString" /> e nel metodo <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" /> seguito da un ritorno a capo e da un avanzamento riga (\r\n).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il terminatore di riga predefinito è un ritorno a capo seguito da un avanzamento riga (\r\n).  
  
 Per informazioni su Win32 `OutputDebugString` debug funzione, vedere il SDK di piattaforma o MSDN.  
  
 Questo metodo imposta la <xref:System.Diagnostics.TraceListener.NeedIndent%2A> proprietà `true`.  
  
   
  
## Examples  
 Esempio di codice seguente formatta i risultati di una funzione e Usa il <xref:System.Diagnostics.DefaultTraceListener.WriteLine%28System.String%29> metodo per scrivere l'ultima parte del messaggio da un <xref:System.Diagnostics.DefaultTraceListener>.  
  
 [!code-csharp[System.Diagnostics.DefaultTraceListener.WriteLine#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener.WriteLine/CS/defaulttracelistener.cs#4)]
 [!code-vb[System.Diagnostics.DefaultTraceListener.WriteLine#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.DefaultTraceListener.WriteLine/VB/defaulttracelistener.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
  </Members>
</Type>