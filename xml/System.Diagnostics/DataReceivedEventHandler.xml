<Type Name="DataReceivedEventHandler" FullName="System.Diagnostics.DataReceivedEventHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0891c160d3f86199bf8315369d15a3c93174afa7" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36675054" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void DataReceivedEventHandler(object sender, DataReceivedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed DataReceivedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DataReceivedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub DataReceivedEventHandler(sender As Object, e As DataReceivedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void DataReceivedEventHandler(System::Object ^ sender, DataReceivedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type DataReceivedEventHandler = delegate of obj * DataReceivedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Diagnostics.DataReceivedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">Origine dell'evento.</param>
    <param name="e">Oggetto <see cref="T:System.Diagnostics.DataReceivedEventArgs" /> che contiene i dati dell'evento.</param>
    <summary>Rappresenta il metodo che gestirà l'evento <see cref="E:System.Diagnostics.Process.OutputDataReceived" /> o l'evento <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> di un oggetto <see cref="T:System.Diagnostics.Process" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si crea un delegato <xref:System.Diagnostics.DataReceivedEventHandler>, si identifica il metodo che gestirà l'evento. Per associare l'evento al gestore eventi in uso, aggiungere all'evento un'istanza del delegato. Il gestore eventi viene chiamato ogni volta che si verifica l'evento, a meno che non venga rimosso il delegato. Per ulteriori informazioni sui delegati del gestore eventi, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
 Per raccogliere in modo asincrono reindirizzato <xref:System.Diagnostics.Process.StandardOutput%2A> oppure <xref:System.Diagnostics.Process.StandardError%2A> flusso di output di un processo, aggiungere il gestore eventi per il <xref:System.Diagnostics.Process.OutputDataReceived> o <xref:System.Diagnostics.Process.ErrorDataReceived> evento. Questi eventi vengono generati ogni volta che il processo scrive una riga nel flusso reindirizzato corrispondente. Quando il flusso è chiuso, una riga null viene inviata al gestore dell'evento. Verificare che il gestore eventi controlla questa condizione prima di accedere al <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> proprietà. Ad esempio, è possibile utilizzare il `static` metodo <xref:System.String.IsNullOrEmpty%2A?displayProperty=nameWithType> per convalidare il <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> proprietà nel gestore dell'evento.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire operazioni di lettura asincrone sul reindirizzato <xref:System.Diagnostics.Process.StandardOutput%2A> flusso dei **ordinamento** comando. Il **ordinamento** comando è un'applicazione console che legge e ordina il testo immesso.  
  
 Nell'esempio viene creata una <xref:System.Diagnostics.DataReceivedEventHandler> delegato per il `SortOutputHandler` gestore dell'evento e associa il delegato con il <xref:System.Diagnostics.Process.OutputDataReceived> evento. Il gestore eventi riceve righe di testo da reindirizzato <xref:System.Diagnostics.Process.StandardOutput%2A> flusso, formatta il testo e scrive il testo sullo schermo.  
  
 [!code-cpp[Process_AsyncStreams#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/sort_async.cpp#1)]
 [!code-csharp[Process_AsyncStreams#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/sort_async.cs#1)]
 [!code-vb[Process_AsyncStreams#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/sort_async.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.DataReceivedEventArgs" />
    <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
    <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
    <altmember cref="T:System.Diagnostics.Process" />
  </Docs>
</Type>