<Type Name="EventLogInstaller" FullName="System.Diagnostics.EventLogInstaller">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="61fdc2ecf54b60287cf1c2507876fbe664114a7b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36343319" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventLogInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventLogInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventLogInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class EventLogInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventLogInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type EventLogInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration.Install</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Allows you to install and configure an event log that your application reads from or writes to when running.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Diagnostics.EventLogInstaller> viene utilizzato il [Installutil.exe (strumento programma di installazione)](~/docs/framework/tools/installutil-exe-installer-tool.md) durante l'installazione di un registro eventi. Il <xref:System.Diagnostics.EventLogInstaller> classe può installare i registri eventi solo nel computer locale.  
  
 Utilizzare la <xref:System.Diagnostics.EventLogInstaller> classe quando l'applicazione scrive un registro eventi; non è necessario utilizzare un programma di installazione del registro eventi dell'applicazione per leggere da un registro eventi. Servizi e applicazioni scrivono nel registro applicazioni o in un log personalizzato. I driver di dispositivo devono scrivere nel Registro di sistema.  
  
> [!NOTE]
>  Il Registro di sicurezza è di sola lettura.  
  
 Il programma di installazione crea l'origine evento specificata nella <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà e i registri per il registro eventi specificato in <xref:System.Diagnostics.EventLogInstaller.Log%2A> proprietà. Questo comportamento è simile alla chiamata al metodo <xref:System.Diagnostics.EventLog.CreateEventSource%2A> nella <xref:System.Diagnostics.EventLog> componente.  
  
 Usare la <xref:System.Diagnostics.EventLog.WriteEvent%2A> e <xref:System.Diagnostics.EventLog.WriteEntry%2A> i metodi per scrivere eventi in un registro eventi. È necessario specificare un'origine evento per scrivere eventi; è necessario creare e configurare l'origine evento prima di scrivere la prima voce con l'origine.  
  
 Creare la nuova origine evento durante l'installazione dell'applicazione. Questo consente di tempo per il sistema operativo aggiornare l'elenco delle origini eventi registrati e le relative configurazioni. Se il sistema operativo non è aggiornato l'elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l'operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodo. È necessario disporre dei diritti amministrativi sul computer per creare una nuova origine evento.  
  
 È possibile creare un'origine evento per un log eventi esistente o un nuovo registro eventi. Quando si crea una nuova origine per un nuovo registro eventi, il sistema registra l'origine di tale log, ma non viene creato il registro finché la prima voce viene scritto in essa.  
  
 Per installare un registro eventi, creare una classe di installazione di progetto che eredita da <xref:System.Configuration.Install.Installer>e impostare il <xref:System.ComponentModel.RunInstallerAttribute> per la classe a `true`. All'interno del progetto, creare un <xref:System.Diagnostics.EventLogInstaller> per ogni log di eventi che scriverà l'applicazione e aggiungere l'istanza alla classe del programma di installazione del progetto.  
  
 Quando il [Installutil.exe (strumento programma di installazione)](~/docs/framework/tools/installutil-exe-installer-tool.md) viene chiamato, esamina il <xref:System.ComponentModel.RunInstallerAttribute>. Se è `true`, lo strumento consente di installare tutti gli elementi di <xref:System.Configuration.Install.Installer.Installers%2A> insieme che sono associati al programma di installazione del progetto. Se <xref:System.ComponentModel.RunInstallerAttribute> è `false`, lo strumento ignora il programma di installazione di progetto.  
  
 Modificare altre proprietà di un <xref:System.Diagnostics.EventLogInstaller> prima o dopo l'aggiunta dell'istanza di <xref:System.Configuration.Install.Installer.Installers%2A> raccolta del programma di installazione del progetto, ma prima che venga eseguito lo strumento programma di installazione. È necessario impostare il <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà se l'applicazione verrà scritta nel registro eventi.  
  
 Utilizzare <xref:System.Diagnostics.EventLogInstaller> per registrare una nuova origine per un registro eventi di nuovo o esistente; non utilizzare <xref:System.Diagnostics.EventLogInstaller> per modificare un'origine esistente. Il <xref:System.Diagnostics.EventLogInstaller> classe non modifica le proprietà di configurazione di un'origine esistente in base alla proprietà di installazione specificate. Il <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo genera un'eccezione se il <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà corrisponde a un nome di origine che è registrato per un altro log eventi nel computer. Il <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo registra l'origine se il <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà corrisponde a un nome di origine che è già registrato per lo stesso log di eventi specificato nella <xref:System.Diagnostics.EventLogInstaller.Log%2A> proprietà.  
  
 È possibile registrare l'origine evento con file di risorse localizzate per le stringhe di categoria e il messaggio di evento. L'applicazione può scrivere voci del registro eventi tramite identificatori di risorsa, anziché specificare la stringa effettiva. Il Visualizzatore eventi utilizza l'identificatore di risorsa per trovare e visualizzare la stringa corrispondente dal file di risorse localizzato in base alle impostazioni della lingua corrente. È possibile registrare un file separato per le categorie di eventi, messaggi e le stringhe di inserimento di parametro o è possibile registrare lo stesso file di risorse per tutti i tre tipi di stringhe. Usare la <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>, <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>, e <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> proprietà per configurare l'origine per scrivere voci localizzate nel registro eventi. Se l'applicazione scrive stringhe valori direttamente nel registro eventi, è necessario impostare queste proprietà.  
  
 L'origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Se l'applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un'origine con i file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci tramite identificatori di risorsa nel registro eventi. Creare un'origine diversa senza file di risorse e quindi usare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo per scrivere stringhe direttamente il registro eventi utilizza tale origine.  
  
 In genere, non si chiama i metodi del <xref:System.Diagnostics.EventLogInstaller> classe all'interno del codice; vengono in genere chiamati solo da Installutil.exe. Lo strumento chiama automaticamente il <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo durante il processo di installazione. Per il ripristino da errori, se necessario, chiamando la <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> metodo per l'oggetto che ha generato l'eccezione.  
  
   
  
## Examples  
 Esempio di codice seguente imposta la proprietà di installazione per una nuova origine evento. L'esempio di codice imposta il nome di origine e il nome del registro eventi e aggiunge i <xref:System.Diagnostics.EventLogInstaller> per il <xref:System.Configuration.Install.Installer.Installers%2A> insieme.  
  
 [!code-cpp[EventLogInstaller#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogInstaller/CPP/eventloginstaller.cpp#1)]
 [!code-csharp[EventLogInstaller#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogInstaller/CS/eventloginstaller.cs#1)]
 [!code-vb[EventLogInstaller#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogInstaller/VB/eventloginstaller.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLogInstaller" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CategoryCount">
      <MemberSignature Language="C#" Value="public int CategoryCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryCount : int with get, set" Usage="System.Diagnostics.EventLogInstaller.CategoryCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of categories in the category resource file.</summary>
        <value>Il numero di categorie nel file di risorse di categoria. Il valore predefinito è zero.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> e <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> categoria stringhe localizzate per le proprietà per scrivere eventi con. Il Visualizzatore eventi consente di visualizzare la categoria per una voce di evento, se si fornisce una categoria quando si scrittura l'evento. Le categorie del registro eventi sono stringhe definite dall'applicazione che consentono di filtrare gli eventi, o forniscono informazioni su un evento. Ad esempio, l'applicazione può definire categorie separate per i diversi componenti o diverse operazioni.  
  
 Le categorie di eventi sono facoltative. Se l'applicazione non utilizza le categorie, non impostare il <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> e <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> proprietà.  
  
 Per informazioni dettagliate sulla definizione dei messaggi di evento e la creazione di file di risorse di eventi, vedere l'argomento "Messaggio del compilatore" nella documentazione di Platform SDK [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 Esempio di codice seguente imposta la proprietà di installazione per una nuova origine evento. L'esempio di codice imposta il nome dell'origine evento, nome registro eventi e file di risorse per testo localizzato dell'evento.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 L'esempio di codice Usa il seguente file di testo messaggio, compilato nella libreria di risorse EventLogMsgs. Un file di testo del messaggio è l'origine da cui viene creato il file di risorse di messaggio. Il file di testo del messaggio definisce il testo per la categoria, messaggio di evento e le stringhe di inserimento di parametro e identificatori di risorsa.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CategoryResourceFile">
      <MemberSignature Language="C#" Value="public string CategoryResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryResourceFile : string with get, set" Usage="System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the path of the resource file that contains category strings for the source.</summary>
        <value>Il percorso del file di risorse di categoria. Il valore predefinito è una stringa vuota ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> e <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> categoria stringhe localizzate per le proprietà per scrivere eventi con. Il Visualizzatore eventi consente di visualizzare la categoria per una voce di evento se si fornisce una categoria quando si scrittura l'evento. Le categorie del registro eventi sono stringhe definite dall'applicazione che consentono di filtrare gli eventi, o forniscono informazioni relative a un evento. Ad esempio, l'applicazione potrebbe essere necessario categorie separate per i diversi componenti o diverse operazioni.  
  
 Le categorie di eventi sono facoltative. Se l'applicazione non utilizza le categorie, non impostare il <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> e <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> proprietà.  
  
 Per informazioni dettagliate sulla definizione dei messaggi di evento e la creazione di file di risorse di eventi, vedere l'argomento "Messaggio del compilatore" nella documentazione di Platform SDK [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 Esempio di codice seguente imposta la proprietà di installazione per una nuova origine evento. L'esempio di codice imposta il nome dell'origine evento, nome registro eventi e file di risorse per testo localizzato dell'evento.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 L'esempio di codice Usa il seguente file di testo messaggio, compilato nella libreria di risorse EventLogMsgs. Un file di testo del messaggio è l'origine da cui viene creato il file di risorse di messaggio. Il file di testo del messaggio definisce il testo per la categoria, messaggio di evento e le stringhe di inserimento di parametro e identificatori di risorsa.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="eventLogInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">An <see cref="T:System.ComponentModel.IComponent" /> to use as a template for the <see cref="T:System.Diagnostics.EventLogInstaller" />.</param>
        <summary>Copies the property values of an <see cref="T:System.Diagnostics.EventLog" /> component that are required at installation time for an event log.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il componente specificato per il `component` il parametro deve essere un <xref:System.Diagnostics.EventLog>; in caso contrario, viene generata un'eccezione.  
  
 In genere, non si chiama i metodi del <xref:System.Diagnostics.EventLogInstaller> dall'interno del codice; vengono in genere chiamati solo dal [Installutil.exe (strumento programma di installazione)](~/docs/framework/tools/installutil-exe-installer-tool.md). <xref:System.Diagnostics.EventLogInstaller.CopyFromComponent%2A> viene utilizzata da Installutil.exe per impostare i valori delle proprietà per il <xref:System.Diagnostics.EventLogInstaller> per i valori di un oggetto esistente <xref:System.Diagnostics.EventLog>.  
  
 Se il <xref:System.Diagnostics.EventLog.Log%2A> del <xref:System.Diagnostics.EventLog> vale a dire passato è una stringa vuota (""), è necessario impostare il <xref:System.Diagnostics.EventLog.Log%2A> proprietà su un valore valido prima dell'esecuzione il programma di installazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The specified component is not an <see cref="T:System.Diagnostics.EventLog" />.  -or-  The <see cref="P:System.Diagnostics.EventLog.Log" /> or <see cref="P:System.Diagnostics.EventLog.Source" /> property of the specified component is either <see langword="null" /> or empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="eventLogInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">An <see cref="T:System.Collections.IDictionary" /> used to save information needed to perform a rollback or uninstall operation.</param>
        <summary>Performs the installation and writes event log information to the registry.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo scrive informazioni del registro eventi nel Registro di sistema e associa il registro eventi a un log specificato dal <xref:System.Diagnostics.EventLogInstaller.Log%2A> proprietà. Se il log non esiste già e viene specificata un'origine, <xref:System.Diagnostics.EventLogInstaller.Install%2A> crea un log e associa la nuova origine.  
  
 In genere, non si chiama i metodi del <xref:System.Diagnostics.EventLogInstaller> dall'interno del codice; vengono in genere chiamati solo dal [Installutil.exe (strumento programma di installazione)](~/docs/framework/tools/installutil-exe-installer-tool.md). Lo strumento chiama automaticamente il <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo durante il processo di installazione per scrivere le informazioni del Registro di sistema sono associate il registro eventi in corso l'installazione. L'installazione è transazionale, pertanto se si verifica un errore di qualsiasi componente di progetto di installazione durante l'installazione, tutti i componenti installati in precedenza rollback e ripristinarne lo stato pre-installazione. Questa operazione viene eseguita chiamando ogni componente <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> metodo.  
  
 Utilizzare <xref:System.Diagnostics.EventLogInstaller> per registrare una nuova origine per un registro eventi di nuovo o esistente; non utilizzare <xref:System.Diagnostics.EventLogInstaller> per modificare un'origine esistente. Il <xref:System.Diagnostics.EventLogInstaller> classe non modifica le proprietà di configurazione di un'origine esistente in base alla proprietà di installazione specificate. Il <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo genera un'eccezione se il <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà corrisponde a un nome di origine che è registrato per un altro log eventi nel computer. Il <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo ignora la registrazione dell'origine se il <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà corrisponde a un nome di origine che è già registrato per lo stesso log di eventi specificato nella <xref:System.Diagnostics.EventLogInstaller.Log%2A> proprietà.  
  
 Routine di installazione di un'applicazione utilizza il programma di installazione progetto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> proprietà per gestire automaticamente le informazioni sui componenti che sono già stati installati. Queste informazioni sullo stato, che viene passate a <xref:System.Diagnostics.EventLogInstaller.Install%2A> come il `stateSaver` parametro, viene continuamente aggiornato mentre lo strumento installa ciascuno <xref:System.Diagnostics.EventLogInstaller>. Non è in genere, necessario per il codice modificare in modo esplicito queste informazioni sullo stato.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">The platform the installer is trying to use is not Windows NT 4.0 or later.</exception>
        <exception cref="T:System.ArgumentException">The name specified in the <see cref="P:System.Diagnostics.EventLogInstaller.Source" /> property is already registered for a different event log.</exception>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="eventLogInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">The installer to compare.</param>
        <summary>Determines whether an installer and another specified installer refer to the same source.</summary>
        <returns>
          <see langword="true" /> if this installer and the installer specified by the <paramref name="otherInstaller" /> parameter would install or uninstall the same source; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, non si chiama i metodi del <xref:System.Diagnostics.EventLogInstaller> dall'interno del codice; vengono in genere chiamati solo tramite lo strumento programma di installazione (Installutil.exe).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public string Log { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Log" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.Log" />
      <MemberSignature Language="VB.NET" Value="Public Property Log As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Log { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Log : string with get, set" Usage="System.Diagnostics.EventLogInstaller.Log" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the log to set the source to.</summary>
        <value>Nome del log. Può trattarsi di applicazione, sistema o un nome di log personalizzato. Il valore predefinito è una stringa vuota ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile usare il <xref:System.Diagnostics.EventLogInstaller.Log%2A> per associare l'origine specificata nella proprietà di <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà con un log esistente o un nuovo log nel computer locale. Il [Installutil.exe (strumento programma di installazione)](~/docs/framework/tools/installutil-exe-installer-tool.md) utilizza queste informazioni per eseguire il mapping di origine per il log nel Registro di sistema del computer. Servizi e applicazioni scrivono nel registro applicazioni o in un log personalizzato. I driver di dispositivo devono scrivere nel Registro di sistema.  
  
 Per scrivere voci in un registro eventi, è necessario creare un'origine e registrarlo con un registro eventi. Un'origine evento può solo scrivere in un log alla volta. Il programma di installazione Usa il valore della <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà per registrare l'applicazione con il log eventi come origine valida delle voci. Se non si specifica un nome di log prima dell'esecuzione del programma di installazione, il programma di installazione registra l'origine nel registro applicazioni. Se si specifica una nuova origine e un log esistente, il programma di installazione crea una nuova origine evento e lo associa al log specificato. Se si specifica una nuova origine sia un nuovo registro, il programma di installazione consente di associare la nuova origine con il nuovo registro nel Registro di sistema, ma non viene creato il registro finché la prima voce viene scritto in essa.  
  
 Il sistema operativo archivia i registri eventi come file. Quando si usa <xref:System.Diagnostics.EventLogInstaller> o <xref:System.Diagnostics.EventLog.CreateEventSource%2A> i metodi per creare un nuovo registro eventi, il file associato viene archiviato nella directory %SystemRoot%\System32\Config nel computer specificato. Il nome del file è impostato aggiungendo i primi 8 caratteri di <xref:System.Diagnostics.EventLogInstaller.Log%2A> proprietà con l'estensione "evt".  
  
 Utilizzare <xref:System.Diagnostics.EventLogInstaller> per registrare una nuova origine per un registro eventi di nuovo o esistente; non utilizzare <xref:System.Diagnostics.EventLogInstaller> per modificare un'origine esistente. Il <xref:System.Diagnostics.EventLogInstaller> classe non modifica le proprietà di configurazione di un'origine esistente in base alla proprietà di installazione specificate. Il <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo genera un'eccezione se il <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà corrisponde a un nome di origine che è registrato per un altro log eventi nel computer. Il <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo registra l'origine se il <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà corrisponde a un nome di origine che è già registrato per lo stesso log di eventi specificato nella <xref:System.Diagnostics.EventLogInstaller.Log%2A> proprietà.  
  
 Per ulteriori informazioni sui comportamenti di origini e i registri eventi, vedere la <xref:System.Diagnostics.EventLog> documentazione per la classe di <xref:System.Diagnostics.EventLog.Log%2A> e <xref:System.Diagnostics.EventLog.Source%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="MessageResourceFile">
      <MemberSignature Language="C#" Value="public string MessageResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MessageResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MessageResourceFile : string with get, set" Usage="System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the path of the resource file that contains message formatting strings for the source.</summary>
        <value>Il percorso del file di risorse di messaggio. Il valore predefinito è una stringa vuota ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> proprietà per configurare un'origine di log eventi per scrivere messaggi di evento localizzati. I messaggi di evento sono stringhe definite dall'applicazione che descrivono l'evento all'utente.  
  
 L'applicazione può scrivere voci del registro eventi tramite identificatori di risorsa. Un identificatore di risorsa indicizza un messaggio che si trova nel <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>. Il Visualizzatore eventi utilizza l'identificatore di risorsa per trovare e visualizzare la stringa corrispondente dal file di risorse localizzato in base alle impostazioni della lingua corrente.  
  
 L'origine evento deve essere configurato per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci localizzate per un'origine configurata con un file di risorse di messaggio.  
  
 Se l'applicazione scrive le stringhe di messaggio di evento direttamente, anziché utilizzare un identificatore di risorsa in un file di risorse localizzato, non impostare il <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> proprietà.  
  
 Se il <xref:System.Diagnostics.EventLog.MachineName%2A> proprietà non è l'identificatore del computer locale ("."), .NET Framework presuppone che il file di risorse sia in un computer remoto. Se il <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> valore della proprietà contiene una lettera di unità, si presuppone che il file di risorse nel \\ \\< machinename\>\\< unità\>condivisione $ (ad esempio, \\\server \c$). Se il valore contiene la stringa % systemroot %, si presuppone che il file di risorse nel \\ \\< nomecomputer\>\admin$ condivisione (ad esempio, \\\server\admin$).  
  
 Per informazioni dettagliate sulla definizione dei messaggi di evento e la creazione di file di risorse di eventi, vedere l'argomento "Messaggio del compilatore" nella documentazione di Platform SDK [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 Esempio di codice seguente imposta la proprietà di installazione per una nuova origine evento. L'esempio di codice imposta il nome dell'origine evento, nome registro eventi e file di risorse per testo localizzato dell'evento.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 L'esempio di codice Usa il seguente file di testo messaggio, compilato nella libreria di risorse EventLogMsgs. Un file di testo del messaggio è l'origine da cui viene creato il file di risorse di messaggio. Il file di testo del messaggio definisce il testo per la categoria, messaggio di evento e le stringhe di inserimento di parametro e identificatori di risorsa.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="ParameterResourceFile">
      <MemberSignature Language="C#" Value="public string ParameterResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property ParameterResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParameterResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ParameterResourceFile : string with get, set" Usage="System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the path of the resource file that contains message parameter strings for the source.</summary>
        <value>Il percorso del file di risorse parametro messaggio. Il valore predefinito è una stringa vuota ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> proprietà per configurare un'origine di log eventi per scrivere i messaggi di evento localizzata con inserito le stringhe di parametri. Ogni messaggio di evento localizzata specificato nella <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> proprietà può contenere i segnaposto per le stringhe di inserimento. Questi segnaposto vengono utilizzati per specificare la posizione e l'identificatore di risorsa per una stringa indipendente dal linguaggio all'interno del messaggio di evento. Il Visualizzatore eventi sostituisce i segnaposto con le stringhe corrispondenti dal <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> e formatta il messaggio registro eventi per la voce di evento localizzata.  
  
 Ad esempio, la sezione seguente di un file di testo del messaggio definisce una stringa con un segnaposto per il parametro:  
  
```  
  
MessageId = 1501  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_STARTING  
Language=English  
Component %%6050 is starting.  
.  
```  
  
 All'interno del file di risorse di parametro, la stringa di inserimento deve essere definita con l'identificatore di risorsa che corrisponde al segnaposto, come illustrato di seguito:  
  
```  
MessageId = 6050  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_NAME_MSGID  
Language=English  
TRIGGER.EXE  
.  
```  
  
 L'origine evento deve essere configurato per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci localizzate per un'origine configurata con un file di risorse di messaggio.  
  
 Se l'applicazione scrive le stringhe di messaggio di evento direttamente nel registro eventi o se il <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> non contiene messaggi di inserimento dei segnaposto di parametri, non impostare il <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> proprietà.  
  
 Per informazioni dettagliate sulla definizione dei messaggi di evento e la creazione di file di risorse di eventi, vedere l'argomento "Messaggio del compilatore" nella documentazione di Platform SDK [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 Esempio di codice seguente imposta la proprietà di installazione per una nuova origine evento. L'esempio di codice imposta il nome dell'origine evento, nome registro eventi e file di risorse per testo localizzato dell'evento.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 L'esempio di codice Usa il seguente file di testo messaggio, compilato nella libreria di risorse EventLogMsgs. Un file di testo del messaggio è l'origine da cui viene creato il file di risorse di messaggio. Il file di testo del messaggio definisce il testo per la categoria, messaggio di evento e le stringhe di inserimento di parametro e identificatori di risorsa. In particolare, il messaggio definito per l'identificatore di risorsa 1004 Usa un segnaposto per la stringa di un parametro definita per l'identificatore di risorsa 5002.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="eventLogInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the pre-installation state of the computer.</param>
        <summary>Restores the computer to the state it was in before the installation by rolling back the event log information that the installation procedure wrote to the registry.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> metodo annulla gli effetti del <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo. <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> viene chiamato se l'installazione di qualsiasi componente nel progetto di installazione non riesce. Il <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo crea o imposta le proprietà per un registro eventi e un'origine evento. <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> Elimina il registro eventi e l'origine o Reimposta le proprietà di un'origine preesistente di pre-installazione valori.  
  
 In genere, non si chiama i metodi del <xref:System.Diagnostics.EventLogInstaller> dall'interno del codice; vengono in genere chiamati solo dal [Installutil.exe (strumento programma di installazione)](~/docs/framework/tools/installutil-exe-installer-tool.md). Lo strumento chiama il <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> metodo, quando questo o un altro componente non è riuscita per l'installazione, per annullare le modifiche già effettuate dal processo di installazione.  
  
 Routine di installazione di un'applicazione utilizza il programma di installazione progetto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> proprietà per gestire automaticamente le informazioni sui componenti che sono già stati installati. Queste informazioni sullo stato, che viene passate a <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> come il `savedState` parametro, viene continuamente aggiornato mentre lo strumento esegue il rollback eseguirne il <xref:System.Diagnostics.EventLogInstaller>. Non è in genere, necessario per il codice modificare in modo esplicito queste informazioni sullo stato.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Diagnostics.EventLogInstaller.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the source name to register with the log.</summary>
        <value>Nome da registrare con il log eventi come origine delle voci. Il valore predefinito è una stringa vuota ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'origine evento indica ciò che registra l'evento. È spesso il nome dell'applicazione o il nome di un componente all'interno di un'applicazione di grandi dimensioni.  
  
 Il programma di installazione Usa il valore della <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà per registrare l'applicazione con il log eventi come origine valida delle voci. Un nuovo nome di origine non può corrispondere a un nome di origine esistente o un nome registro eventi esistente. Ogni origine può solo scrivere in un log eventi alla volta. Tuttavia, l'applicazione può utilizzare più origini per scrivere più registri eventi. Ad esempio, l'applicazione potrebbe richiedere più origini configurate per diversi log eventi o i file di risorse diverso.  
  
 Servizi e applicazioni scrivono nel registro applicazioni o in un log personalizzato. I driver di dispositivo devono scrivere nel Registro di sistema. Se non si specifica un nome di log prima dell'esecuzione del programma di installazione, il programma di installazione registra l'origine nel registro applicazioni. Se si specifica il nome di un log che non esiste, il sistema registra il <xref:System.Diagnostics.EventLogInstaller.Source%2A> in tale registro, ma non viene creato il registro finché la prima voce viene scritto in essa.  
  
 Utilizzare <xref:System.Diagnostics.EventLogInstaller> per registrare una nuova origine per un registro eventi di nuovo o esistente; non utilizzare <xref:System.Diagnostics.EventLogInstaller> per modificare un'origine esistente. Il <xref:System.Diagnostics.EventLogInstaller> classe non modifica le proprietà di configurazione di un'origine esistente in base alla proprietà di installazione specificate. Il <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo genera un'eccezione se il <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà corrisponde a un nome di origine che è registrato per un altro log eventi nel computer. Il <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo registra l'origine se il <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà corrisponde a un nome di origine che è già registrato per lo stesso log di eventi specificato nella <xref:System.Diagnostics.EventLogInstaller.Log%2A> proprietà.  
  
 Per ulteriori informazioni sui comportamenti di origini e i registri eventi, vedere la <xref:System.Diagnostics.EventLog> documentazione per la classe di <xref:System.Diagnostics.EventLog.Log%2A> e <xref:System.Diagnostics.EventLog.Source%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="eventLogInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the pre-installation state of the computer.</param>
        <summary>Removes an installation by removing event log information from the registry.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il <xref:System.Diagnostics.EventLogInstaller.UninstallAction%2A> valore della proprietà è `Remove`, la <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> metodo elimina l'origine e log associato che ha creato il programma di installazione se il <xref:System.Diagnostics.EventLogInstaller.Log%2A> e <xref:System.Diagnostics.EventLogInstaller.Source%2A> le proprietà specificate la creazione di un nuovo registro eventi e un'origine.  
  
 In genere, non si chiama i metodi del <xref:System.Diagnostics.EventLogInstaller> dall'interno del codice; vengono in genere chiamati solo dal [Installutil.exe (strumento programma di installazione)](~/docs/framework/tools/installutil-exe-installer-tool.md) in modalità di disinstallazione. Lo strumento chiama automaticamente il <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> metodo per il ripristino delle parti del sistema sono state interessate dall'installazione e ripristinarne lo stato pre-installazione. È necessario anche eliminare le informazioni del Registro di sistema associate nel registro eventi in corso la disinstallazione.  
  
 Un'applicazione la disinstallazione di routine utilizza il programma di installazione progetto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> proprietà per gestire automaticamente le informazioni sui componenti che sono già stati disinstallati. Queste informazioni sullo stato, che viene passate a <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> come il `savedState` parametro, viene continuamente aggiornato mentre lo strumento Disinstalla ognuno <xref:System.Diagnostics.EventLogInstaller>. Non è in genere, necessario per il codice modificare in modo esplicito queste informazioni sullo stato.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="UninstallAction">
      <MemberSignature Language="C#" Value="public System.Configuration.Install.UninstallAction UninstallAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Configuration.Install.UninstallAction UninstallAction" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.UninstallAction" />
      <MemberSignature Language="VB.NET" Value="Public Property UninstallAction As UninstallAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Configuration::Install::UninstallAction UninstallAction { System::Configuration::Install::UninstallAction get(); void set(System::Configuration::Install::UninstallAction value); };" />
      <MemberSignature Language="F#" Value="member this.UninstallAction : System.Configuration.Install.UninstallAction with get, set" Usage="System.Diagnostics.EventLogInstaller.UninstallAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.Install.UninstallAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) should remove the event log or leave it in its installed state at uninstall time.</summary>
        <value>Uno del <see cref="T:System.Configuration.Install.UninstallAction" /> i valori che indica lo stato per lasciare il registro eventi quando il <see cref="T:System.Diagnostics.EventLog" /> viene disinstallato. Il valore predefinito è <see langword="Remove" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si installa un registro eventi, è facoltativamente possibile collegarlo a un log esistente. Se esegue questa operazione, è necessario decidere se il registro deve restituire lo stato di pre-installazione o rimangono nello stato corrente e post-installazione. Se si sceglie di ripristinare il registro eventi stato pre-installazione, le modifiche alle voci registro eventi in fase di installazione non vengono ripristinate. È possibile reimpostare solo le proprietà del registro eventi che sono associate le <xref:System.Diagnostics.EventLogInstaller> in base ai valori di pre-installazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <see cref="P:System.Diagnostics.EventLogInstaller.UninstallAction" /> contains an invalid value. The only valid values for this property are <see langword="Remove" /> and <see langword="NoAction" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>