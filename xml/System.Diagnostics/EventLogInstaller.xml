<Type Name="EventLogInstaller" FullName="System.Diagnostics.EventLogInstaller">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3dea502097bd7de2a1d19d1c41fb212d88ea6ba2" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30399785" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventLogInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventLogInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventLogInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class EventLogInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventLogInstaller : System::Configuration::Install::ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration.Install</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Consente di installare e configurare un log eventi che l'applicazione legge o nel quale scrive durante l'esecuzione.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Diagnostics.EventLogInstaller> viene utilizzato il [Installutil.exe (strumento programma di installazione)](~/docs/framework/tools/installutil-exe-installer-tool.md) durante l'installazione di un registro eventi. La <xref:System.Diagnostics.EventLogInstaller> classe è possibile installare i registri eventi solo nel computer locale.  
  
 Utilizzare la <xref:System.Diagnostics.EventLogInstaller> classe quando l'applicazione scrive nel log eventi, non è necessario utilizzare un programma di installazione del registro eventi dell'applicazione per leggere da un registro eventi. Servizi e applicazioni scrivono nel registro applicazioni o in un log personalizzato. I driver di dispositivo devono scrivere nel Registro di sistema.  
  
> [!NOTE]
>  Il Registro di sicurezza è di sola lettura.  
  
 Il programma di installazione crea l'origine evento specificata nel <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà e i registri per il registro eventi specificato in <xref:System.Diagnostics.EventLogInstaller.Log%2A> proprietà. Questo comportamento è simile alla chiamata <xref:System.Diagnostics.EventLog.CreateEventSource%2A> sul <xref:System.Diagnostics.EventLog> componente.  
  
 Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A> e <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodi per scrivere eventi in un log eventi. È necessario specificare un'origine eventi per scrivere eventi; è necessario creare e configurare l'origine evento prima di scrivere la prima voce con l'origine.  
  
 Creare la nuova origine eventi durante l'installazione dell'applicazione. Questo consente di tempo per il sistema operativo aggiornare l'elenco delle origini eventi registrati e le relative configurazioni. Se il sistema operativo non è aggiornato l'elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l'operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodo. È necessario disporre dei diritti amministrativi nel computer per creare una nuova origine evento.  
  
 È possibile creare un'origine evento per un log eventi esistente o un nuovo registro eventi. Quando si crea una nuova origine per un nuovo registro eventi, il sistema registra l'origine di tale log, ma non viene creato il registro fino a quando la prima voce è scritto in essa.  
  
 Per installare un registro eventi, creare una classe di installazione di progetto che eredita da <xref:System.Configuration.Install.Installer>e impostare il <xref:System.ComponentModel.RunInstallerAttribute> che la classe `true`. All'interno del progetto, creare un <xref:System.Diagnostics.EventLogInstaller> per ogni log di eventi che scriverà l'applicazione e aggiungere l'istanza alla classe del programma di installazione del progetto.  
  
 Quando il [Installutil.exe (strumento programma di installazione)](~/docs/framework/tools/installutil-exe-installer-tool.md) viene chiamato, esamina il <xref:System.ComponentModel.RunInstallerAttribute>. Se è `true`, lo strumento consente di installare tutti gli elementi di <xref:System.Configuration.Install.Installer.Installers%2A> insieme che sono associati al programma di installazione del progetto. Se <xref:System.ComponentModel.RunInstallerAttribute> è `false`, lo strumento ignora il programma di installazione.  
  
 Modificare altre proprietà di un <xref:System.Diagnostics.EventLogInstaller> prima o dopo l'aggiunta dell'istanza di <xref:System.Configuration.Install.Installer.Installers%2A> raccolta del programma di installazione del progetto, ma prima che venga eseguito lo strumento programma di installazione. È necessario impostare il <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà se l'applicazione verrà scritta nel registro eventi.  
  
 Utilizzare <xref:System.Diagnostics.EventLogInstaller> per registrare una nuova origine per un registro eventi di nuovo o esistente; non utilizzare <xref:System.Diagnostics.EventLogInstaller> per modificare un'origine esistente. La <xref:System.Diagnostics.EventLogInstaller> classe non modifica le proprietà di configurazione di un'origine esistente a cui corrispondono alle proprietà di installazione specificato. Il <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo genera un'eccezione se il <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà corrisponde a un nome di origine che è registrato per un altro log eventi nel computer. Il <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo registra l'origine se il <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà corrisponde a un nome di origine che è già registrato per lo stesso log eventi specificato nella <xref:System.Diagnostics.EventLogInstaller.Log%2A> proprietà.  
  
 È possibile registrare l'origine evento con file di risorse localizzate per le stringhe di categoria e il messaggio di evento. L'applicazione può scrivere voci nel registro eventi tramite identificatori di risorsa, anziché specificare la stringa effettiva. Il Visualizzatore eventi utilizza l'identificatore di risorsa per trovare e visualizzare la stringa corrispondente dal file di risorse localizzato in base alle impostazioni di lingua corrente. È possibile registrare un file separato per le categorie di eventi, messaggi e le stringhe di inserimento di parametro o è possibile registrare lo stesso file di risorse per tutti i tre tipi di stringhe. Utilizzare il <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>, <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>, e <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> proprietà per configurare l'origine per scrivere voci localizzate nel registro eventi. Se l'applicazione scrive valori stringa direttamente nel registro eventi, non è necessario impostare queste proprietà.  
  
 L'origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Se l'applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un'origine dei file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci tramite identificatori di risorsa nel registro eventi. Creare un'origine diversa senza file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo per scrivere stringhe direttamente nel log eventi.  
  
 In genere, non si chiama i metodi del <xref:System.Diagnostics.EventLogInstaller> classe all'interno del codice; in genere vengono chiamati solo da Installutil.exe. Lo strumento chiama automaticamente il <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo durante il processo di installazione. Per il ripristino da errori, se necessario, chiamando la <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> metodo per l'oggetto che ha generato l'eccezione.  
  
   
  
## Examples  
 Esempio di codice seguente imposta le proprietà di installazione per una nuova origine evento. L'esempio di codice imposta il nome di origine e il nome del registro eventi e aggiunge il <xref:System.Diagnostics.EventLogInstaller> per il <xref:System.Configuration.Install.Installer.Installers%2A> insieme.  
  
 [!code-cpp[EventLogInstaller#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogInstaller/CPP/eventloginstaller.cpp#1)]
 [!code-csharp[EventLogInstaller#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogInstaller/CS/eventloginstaller.cs#1)]
 [!code-vb[EventLogInstaller#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogInstaller/VB/eventloginstaller.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.EventLogInstaller" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CategoryCount">
      <MemberSignature Language="C#" Value="public int CategoryCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryCount { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il numero di categorie nel file di risorse di categoria.</summary>
        <value>Numero di categorie nel file di risorse di categoria. Il valore predefinito è zero.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> e <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> categoria stringhe localizzate per le proprietà per scrivere eventi con. Il Visualizzatore eventi consente di visualizzare la categoria per una voce di evento, se si specifica una categoria quando si scrittura l'evento. Categorie del registro eventi sono stringhe definite dall'applicazione che consentono di filtrare gli eventi, o forniscono informazioni su un evento. Ad esempio, l'applicazione è possibile definire categorie separate per i diversi componenti o diverse operazioni.  
  
 Categorie di eventi sono facoltative. Se l'applicazione non utilizza le categorie, non impostare il <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> e <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> proprietà.  
  
 Per informazioni dettagliate sulla definizione dei messaggi di evento e la creazione di file di risorse di eventi, vedere l'argomento "Messaggio del compilatore" nella documentazione di Platform SDK [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 Esempio di codice seguente imposta le proprietà di installazione per una nuova origine evento. L'esempio di codice imposta il nome dell'origine evento, nome registro eventi e i file di risorse per il testo dell'evento localizzata.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 L'esempio di codice Usa il seguente file di testo di messaggio, generato nella libreria di risorse EventLogMsgs. Un file di testo del messaggio è l'origine da cui viene creato il file di risorse del messaggio. Il file di testo del messaggio definisce gli identificatori di risorsa e un testo per la categoria, un messaggio di evento e le stringhe di inserimento di parametro.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CategoryResourceFile">
      <MemberSignature Language="C#" Value="public string CategoryResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il percorso del file di risorse che contiene le stringhe di categoria per l'origine.</summary>
        <value>Percorso del file di risorse di categoria. Il valore predefinito è una stringa vuota ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> e <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> categoria stringhe localizzate per le proprietà per scrivere eventi con. Consente di visualizzare la categoria per una voce di evento nel Visualizzatore eventi se si specifica una categoria quando si scrittura l'evento. Categorie del registro eventi sono stringhe definite dall'applicazione che consentono di filtrare gli eventi, o di ottenere informazioni su un evento. Ad esempio, l'applicazione potrebbe essere categorie separate per i diversi componenti o diverse operazioni.  
  
 Categorie di eventi sono facoltative. Se l'applicazione non utilizza le categorie, non impostare il <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> e <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> proprietà.  
  
 Per informazioni dettagliate sulla definizione dei messaggi di evento e la creazione di file di risorse di eventi, vedere l'argomento "Messaggio del compilatore" nella documentazione di Platform SDK [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 Esempio di codice seguente imposta le proprietà di installazione per una nuova origine evento. L'esempio di codice imposta il nome dell'origine evento, nome registro eventi e i file di risorse per il testo dell'evento localizzata.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 L'esempio di codice Usa il seguente file di testo di messaggio, generato nella libreria di risorse EventLogMsgs. Un file di testo del messaggio è l'origine da cui viene creato il file di risorse del messaggio. Il file di testo del messaggio definisce gli identificatori di risorsa e un testo per la categoria, un messaggio di evento e le stringhe di inserimento di parametro.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">
          <see cref="T:System.ComponentModel.IComponent" /> da utilizzare come modello per <see cref="T:System.Diagnostics.EventLogInstaller" />.</param>
        <summary>Copia i valori di proprietà di un componente <see cref="T:System.Diagnostics.EventLog" /> necessari in fase di installazione per un log eventi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il componente specificato per il `component` parametro deve essere un <xref:System.Diagnostics.EventLog>; in caso contrario, viene generata un'eccezione.  
  
 In genere, non si chiama i metodi del <xref:System.Diagnostics.EventLogInstaller> dall'interno del codice; di solito vengono chiamati solo dal [Installutil.exe (strumento programma di installazione)](~/docs/framework/tools/installutil-exe-installer-tool.md). <xref:System.Diagnostics.EventLogInstaller.CopyFromComponent%2A> viene utilizzato da Installutil.exe per impostare i valori delle proprietà per il <xref:System.Diagnostics.EventLogInstaller> ai valori di un oggetto esistente <xref:System.Diagnostics.EventLog>.  
  
 Se il <xref:System.Diagnostics.EventLog.Log%2A> del <xref:System.Diagnostics.EventLog> che è passato è una stringa vuota (""), è necessario impostare il <xref:System.Diagnostics.EventLog.Log%2A> proprietà su un valore valido prima dell'esecuzione il programma di installazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il componente specificato non è un <see cref="T:System.Diagnostics.EventLog" />.  
  
 oppure  
  
 La proprietà <see cref="P:System.Diagnostics.EventLog.Log" /> o <see cref="P:System.Diagnostics.EventLog.Source" /> del componente specificato è <see langword="null" /> o vuota.</exception>
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">
          <see cref="T:System.Collections.IDictionary" /> utilizzato per salvare le informazioni necessarie per eseguire un'operazione di ripristino o di disinstallazione.</param>
        <summary>Esegue l'installazione e inserisce nel Registro di sistema le informazioni relative al log eventi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo scrive informazioni del registro eventi nel Registro di sistema e associa il registro eventi a un log specificato da di <xref:System.Diagnostics.EventLogInstaller.Log%2A> proprietà. Se il log esiste già e viene specificata un'origine, <xref:System.Diagnostics.EventLogInstaller.Install%2A> crea un log e associa la nuova origine.  
  
 In genere, non si chiama i metodi del <xref:System.Diagnostics.EventLogInstaller> dall'interno del codice; di solito vengono chiamati solo dal [Installutil.exe (strumento programma di installazione)](~/docs/framework/tools/installutil-exe-installer-tool.md). Lo strumento chiama automaticamente il <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo durante il processo di installazione per scrivere le informazioni del Registro di sistema associate al log eventi da installare. L'installazione è transazionale, quindi se si verifica un errore di qualsiasi componente di progetto di installazione durante l'installazione, vengono ripristinati allo stato pre-installazione di tutti i componenti installati in precedenza. Questa operazione viene eseguita chiamando ogni componente <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> metodo.  
  
 Utilizzare <xref:System.Diagnostics.EventLogInstaller> per registrare una nuova origine per un registro eventi di nuovo o esistente; non utilizzare <xref:System.Diagnostics.EventLogInstaller> per modificare un'origine esistente. La <xref:System.Diagnostics.EventLogInstaller> classe non modifica le proprietà di configurazione di un'origine esistente a cui corrispondono alle proprietà di installazione specificato. Il <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo genera un'eccezione se il <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà corrisponde a un nome di origine che è registrato per un altro log eventi nel computer. Il <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo ignora la registrazione dell'origine se il <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà corrisponde a un nome di origine che è già registrato per lo stesso log eventi specificato nella <xref:System.Diagnostics.EventLogInstaller.Log%2A> proprietà.  
  
 Routine di installazione di un'applicazione utilizza il programma di installazione progetto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> proprietà per gestire automaticamente le informazioni sui componenti che sono già stati installati. Queste informazioni sullo stato, che viene passate a <xref:System.Diagnostics.EventLogInstaller.Install%2A> come il `stateSaver` parametro, viene continuamente aggiornato mentre lo strumento installa ogni <xref:System.Diagnostics.EventLogInstaller>. In genere, non è necessario che il codice modificare in modo esplicito queste informazioni sullo stato.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">Il programma di installazione sta tentando di utilizzare una piattaforma diversa da Windows NT 4.0 o versione successiva.</exception>
        <exception cref="T:System.ArgumentException">Il nome specificato nella proprietà <see cref="P:System.Diagnostics.EventLogInstaller.Source" /> è già registrato per un altro log eventi.</exception>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">Programma di installazione da confrontare.</param>
        <summary>Stabilisce se un programma di installazione e un altro programma di installazione specificato fanno riferimento alla stessa origine.</summary>
        <returns>
          Restituisce <see langword="true" /> se il programma di installazione corrente e quello specificato dal parametro <paramref name="otherInstaller" /> installano o disinstallano la stessa origine; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, non si chiama i metodi del <xref:System.Diagnostics.EventLogInstaller> dall'interno del codice; di solito vengono chiamati solo dallo strumento programma di installazione (Installutil.exe).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public string Log { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Log" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.Log" />
      <MemberSignature Language="VB.NET" Value="Public Property Log As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Log { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome del log sul quale impostare l'origine.</summary>
        <value>Nome del log. Può trattarsi di un nome di log personalizzato o dei log Applicazione o Sistema. Il valore predefinito è una stringa vuota ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare il <xref:System.Diagnostics.EventLogInstaller.Log%2A> proprietà per associare l'origine specificata nel <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà con un log esistente o un nuovo log nel computer locale. Il [Installutil.exe (strumento programma di installazione)](~/docs/framework/tools/installutil-exe-installer-tool.md) queste informazioni vengono utilizzate per eseguire il mapping di origine per il log nel Registro di sistema del computer. Servizi e applicazioni scrivono nel registro applicazioni o in un log personalizzato. I driver di dispositivo devono scrivere nel Registro di sistema.  
  
 Per scrivere voci nel log eventi, è necessario creare un'origine e registrarlo con un log eventi. Un'origine eventi può solo scrivere in un log alla volta. Il programma di installazione utilizza il valore della <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà per registrare l'applicazione con il log eventi come origine valida delle voci. Se non si specifica un nome di log prima dell'esecuzione del programma di installazione, il programma di installazione registra l'origine nel registro applicazioni. Se si specifica una nuova origine e un log esistente, il programma di installazione crea una nuova origine evento e lo associa al log specificato. Se si specifica una nuova origine sia un nuovo registro, il programma di installazione consente di associare la nuova origine con il nuovo registro nel Registro di sistema, ma non viene creato il registro fino a quando la prima voce è scritto in essa.  
  
 Il sistema operativo archivia i registri eventi come file. Quando si utilizza <xref:System.Diagnostics.EventLogInstaller> o <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodo per creare un nuovo registro eventi, il file associato viene archiviato nella directory %SystemRoot%\System32\Config del computer specificato. Aggiungendo i primi 8 caratteri di cui è impostato il nome del file di <xref:System.Diagnostics.EventLogInstaller.Log%2A> proprietà con l'estensione "evt".  
  
 Utilizzare <xref:System.Diagnostics.EventLogInstaller> per registrare una nuova origine per un registro eventi di nuovo o esistente; non utilizzare <xref:System.Diagnostics.EventLogInstaller> per modificare un'origine esistente. La <xref:System.Diagnostics.EventLogInstaller> classe non modifica le proprietà di configurazione di un'origine esistente a cui corrispondono alle proprietà di installazione specificato. Il <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo genera un'eccezione se il <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà corrisponde a un nome di origine che è registrato per un altro log eventi nel computer. Il <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo registra l'origine se il <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà corrisponde a un nome di origine che è già registrato per lo stesso log eventi specificato nella <xref:System.Diagnostics.EventLogInstaller.Log%2A> proprietà.  
  
 Per ulteriori informazioni sui comportamenti di origini e i registri eventi, vedere il <xref:System.Diagnostics.EventLog> documentazione per la classe di <xref:System.Diagnostics.EventLog.Log%2A> e <xref:System.Diagnostics.EventLog.Source%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="MessageResourceFile">
      <MemberSignature Language="C#" Value="public string MessageResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MessageResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il percorso del file di risorse che contiene le stringhe di formattazione del messaggio per l'origine.</summary>
        <value>Percorso del file di risorse del messaggio. Il valore predefinito è una stringa vuota ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> proprietà per configurare un'origine di log eventi per scrivere messaggi di evento localizzati. Messaggi di evento sono stringhe definite dall'applicazione che descrivono l'evento all'utente.  
  
 L'applicazione può scrivere voci del registro eventi tramite identificatori di risorsa. Un identificatore di risorsa indicizza un messaggio all'interno di <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>. Il Visualizzatore eventi utilizza l'identificatore di risorsa per trovare e visualizzare la stringa corrispondente dal file di risorse localizzato in base alle impostazioni di lingua corrente.  
  
 L'origine evento deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci localizzate per un'origine configurata con un file di risorse del messaggio.  
  
 Se l'applicazione scrive le stringhe di messaggio di evento direttamente, anziché utilizzare un identificatore di risorsa in un file di risorse localizzato, non impostare la <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> proprietà.  
  
 Se il <xref:System.Diagnostics.EventLog.MachineName%2A> proprietà non è l'identificatore del computer locale ("."), .NET Framework presuppone che il file di risorse è in un computer remoto. Se il <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> valore della proprietà contiene una lettera di unità, si presuppone che il file di risorse nel \\ \\< machinename\>\\< unità\>condivisione $ (ad esempio, \\\server \c$). Se il valore contiene la stringa % systemroot %, si presuppone che il file di risorse nel \\ \\< machinename\>\admin$ condivisione (ad esempio, \\\server\admin$).  
  
 Per informazioni dettagliate sulla definizione dei messaggi di evento e la creazione di file di risorse di eventi, vedere l'argomento "Messaggio del compilatore" nella documentazione di Platform SDK [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 Esempio di codice seguente imposta le proprietà di installazione per una nuova origine evento. L'esempio di codice imposta il nome dell'origine evento, nome registro eventi e i file di risorse per il testo dell'evento localizzata.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 L'esempio di codice Usa il seguente file di testo di messaggio, generato nella libreria di risorse EventLogMsgs. Un file di testo del messaggio è l'origine da cui viene creato il file di risorse del messaggio. Il file di testo del messaggio definisce gli identificatori di risorsa e un testo per la categoria, un messaggio di evento e le stringhe di inserimento di parametro.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="ParameterResourceFile">
      <MemberSignature Language="C#" Value="public string ParameterResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property ParameterResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParameterResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il percorso del file di risorse che contiene le stringhe dei parametri di messaggio per l'origine.</summary>
        <value>Percorso del file di risorse dei parametri del messaggio. Il valore predefinito è una stringa vuota ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> proprietà per configurare un'origine di log eventi per scrivere messaggi di evento localizzati con inserito le stringhe di parametri. Ogni messaggio di evento localizzata specificato nella <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> proprietà può contenere i segnaposto per le stringhe di inserimento. Questi segnaposto vengono utilizzati per specificare la posizione e l'identificatore di risorsa per una stringa indipendente dal linguaggio all'interno del messaggio di evento. Il Visualizzatore eventi sostituisce i segnaposto con le stringhe corrispondenti dal <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> e formatta il messaggio registro eventi per la voce di evento localizzata.  
  
 Ad esempio, la sezione seguente di un file di testo del messaggio definisce una stringa con un segnaposto per il parametro:  
  
```  
  
MessageId = 1501  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_STARTING  
Language=English  
Component %%6050 is starting.  
.  
```  
  
 All'interno del file di risorse di parametro, è necessario definire la stringa di inserimento con l'identificatore di risorsa che corrisponde al segnaposto, come illustrato di seguito:  
  
```  
MessageId = 6050  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_NAME_MSGID  
Language=English  
TRIGGER.EXE  
.  
```  
  
 L'origine evento deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci localizzate per un'origine configurata con un file di risorse del messaggio.  
  
 Se l'applicazione scrive le stringhe di messaggio di evento direttamente nel registro eventi o se il <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> non contiene messaggi di inserimento dei segnaposto di parametri, non impostare la <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> proprietà.  
  
 Per informazioni dettagliate sulla definizione dei messaggi di evento e la creazione di file di risorse di eventi, vedere l'argomento "Messaggio del compilatore" nella documentazione di Platform SDK [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 Esempio di codice seguente imposta le proprietà di installazione per una nuova origine evento. L'esempio di codice imposta il nome dell'origine evento, nome registro eventi e i file di risorse per il testo dell'evento localizzata.  
  
 [!code-cpp[EventLogInstaller_Resources#1](~/samples/snippets/cpp/VS_Snippets_CLR/eventlogInstaller_Resources/CPP/source.cpp#1)]
 [!code-csharp[EventLogInstaller_Resources#1](~/samples/snippets/csharp/VS_Snippets_CLR/eventlogInstaller_Resources/CS/source.cs#1)]
 [!code-vb[EventLogInstaller_Resources#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlogInstaller_Resources/VB/source.vb#1)]  
  
 L'esempio di codice Usa il seguente file di testo di messaggio, generato nella libreria di risorse EventLogMsgs. Un file di testo del messaggio è l'origine da cui viene creato il file di risorse del messaggio. Il file di testo del messaggio definisce gli identificatori di risorsa e un testo per la categoria, un messaggio di evento e le stringhe di inserimento di parametro. In particolare, il messaggio definito per l'identificatore di risorsa 1004 utilizza un segnaposto per la stringa di un parametro definita per l'identificatore di risorsa 5002.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">Oggetto <see cref="T:System.Collections.IDictionary" /> che contiene lo stato del computer precedente all'installazione.</param>
        <summary>Ripristina lo stato del computer precedente l'installazione, ripristinando le informazioni del log eventi scritte nel Registro di sistema durante la procedura di installazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> metodo annulla gli effetti del <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo. <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> viene chiamato se l'installazione di qualsiasi componente del progetto di installazione non riesce. Il <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo crea o imposta le proprietà per un log eventi e l'origine evento. <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> Elimina il registro eventi e l'origine o Reimposta le proprietà di un'origine di pre-installazione valori.  
  
 In genere, non si chiama i metodi del <xref:System.Diagnostics.EventLogInstaller> dall'interno del codice; di solito vengono chiamati solo dal [Installutil.exe (strumento programma di installazione)](~/docs/framework/tools/installutil-exe-installer-tool.md). Lo strumento chiama il <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> metodo, quando non è riuscita o in un altro componente per l'installazione, per annullare le modifiche già effettuate il processo di installazione.  
  
 Routine di installazione di un'applicazione utilizza il programma di installazione progetto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> proprietà per gestire automaticamente le informazioni sui componenti che sono già stati installati. Queste informazioni sullo stato, che viene passate a <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> come il `savedState` parametro, viene continuamente aggiornato mentre lo strumento esegue il rollback ciascuna istanza <xref:System.Diagnostics.EventLogInstaller>. In genere, non è necessario che il codice modificare in modo esplicito queste informazioni sullo stato.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome origine da registrare con il log.</summary>
        <value>Nome da registrare con il log eventi come origine delle voci. Il valore predefinito è una stringa vuota ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'origine eventi indica ciò che registra l'evento. È spesso il nome dell'applicazione o il nome di un componente all'interno di un'applicazione di grandi dimensioni.  
  
 Il programma di installazione utilizza il valore della <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà per registrare l'applicazione con il log eventi come origine valida delle voci. Un nuovo nome di origine non può corrispondere un nome di origine esistente o un nome registro eventi esistente. Ogni origine solo è possibile scrivere in un log eventi alla volta. Tuttavia, l'applicazione può utilizzare più origini per scrivere più registri eventi. Ad esempio, l'applicazione potrebbe richiedere più origini configurate per diversi log eventi o file di risorse diversi.  
  
 Servizi e applicazioni scrivono nel registro applicazioni o in un log personalizzato. I driver di dispositivo devono scrivere nel Registro di sistema. Se non si specifica un nome di log prima dell'esecuzione del programma di installazione, il programma di installazione registra l'origine nel registro applicazioni. Se si specifica il nome di un log che non esiste, il sistema registra il <xref:System.Diagnostics.EventLogInstaller.Source%2A> in tale registro, ma il log non viene creato fino a quando la prima voce è scritto in essa.  
  
 Utilizzare <xref:System.Diagnostics.EventLogInstaller> per registrare una nuova origine per un registro eventi di nuovo o esistente; non utilizzare <xref:System.Diagnostics.EventLogInstaller> per modificare un'origine esistente. La <xref:System.Diagnostics.EventLogInstaller> classe non modifica le proprietà di configurazione di un'origine esistente a cui corrispondono alle proprietà di installazione specificato. Il <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo genera un'eccezione se il <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà corrisponde a un nome di origine che è registrato per un altro log eventi nel computer. Il <xref:System.Diagnostics.EventLogInstaller.Install%2A> metodo registra l'origine se il <xref:System.Diagnostics.EventLogInstaller.Source%2A> proprietà corrisponde a un nome di origine che è già registrato per lo stesso log eventi specificato nella <xref:System.Diagnostics.EventLogInstaller.Log%2A> proprietà.  
  
 Per ulteriori informazioni sui comportamenti di origini e i registri eventi, vedere il <xref:System.Diagnostics.EventLog> documentazione per la classe di <xref:System.Diagnostics.EventLog.Log%2A> e <xref:System.Diagnostics.EventLog.Source%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">Oggetto <see cref="T:System.Collections.IDictionary" /> che contiene lo stato del computer precedente all'installazione.</param>
        <summary>Rimuove un'installazione eliminando le informazioni sul log eventi dal Registro di sistema.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il <xref:System.Diagnostics.EventLogInstaller.UninstallAction%2A> valore della proprietà è `Remove`, <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> metodo elimina l'origine e log associato che ha creato il programma di installazione se il <xref:System.Diagnostics.EventLogInstaller.Log%2A> e <xref:System.Diagnostics.EventLogInstaller.Source%2A> la creazione di un nuovo registro eventi e un'origine di specificare le proprietà.  
  
 In genere, non si chiama i metodi del <xref:System.Diagnostics.EventLogInstaller> dall'interno del codice; di solito vengono chiamati solo dal [Installutil.exe (strumento programma di installazione)](~/docs/framework/tools/installutil-exe-installer-tool.md) in modalità di disinstallazione. Lo strumento chiama automaticamente il <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> per ripristinare le parti del sistema che sono state interessate dall'installazione allo stato pre-installazione. Ciò include le informazioni del Registro di sistema associate al log eventi disinstallazione in corso l'eliminazione.  
  
 Un'applicazione la disinstallazione di routine utilizza il programma di installazione progetto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> proprietà per gestire automaticamente le informazioni sui componenti che sono già stati disinstallati. Queste informazioni sullo stato, che viene passate a <xref:System.Diagnostics.EventLogInstaller.Uninstall%2A> come il `savedState` parametro, viene continuamente aggiornato mentre lo strumento Disinstalla ogni <xref:System.Diagnostics.EventLogInstaller>. In genere, non è necessario che il codice modificare in modo esplicito queste informazioni sullo stato.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="UninstallAction">
      <MemberSignature Language="C#" Value="public System.Configuration.Install.UninstallAction UninstallAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Configuration.Install.UninstallAction UninstallAction" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogInstaller.UninstallAction" />
      <MemberSignature Language="VB.NET" Value="Public Property UninstallAction As UninstallAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Configuration::Install::UninstallAction UninstallAction { System::Configuration::Install::UninstallAction get(); void set(System::Configuration::Install::UninstallAction value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.Install.UninstallAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se lo [Installutil.exe (Strumento Programma di installazione)](~/docs/framework/tools/installutil-exe-installer-tool.md) deve rimuovere il log eventi o lasciarlo installato al momento della disinstallazione.</summary>
        <value>Uno dei valori <see cref="T:System.Configuration.Install.UninstallAction" /> che indica lo stato in cui lasciare il log eventi quando <see cref="T:System.Diagnostics.EventLog" /> viene disinstallato. Il valore predefinito è <see langword="Remove" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si installa un registro eventi, è facoltativamente possibile collegarlo a un log esistente. Se si esegue questa operazione, è necessario decidere se il registro deve restituire lo stato di pre-installazione o rimanere nello stato corrente, dopo l'installazione. Se si sceglie di ripristinare lo stato pre-installazione nel registro eventi, le modifiche alle voci registro eventi in fase di installazione non vengono ripristinate. È possibile reimpostare solo le proprietà del registro eventi che sono associate le <xref:System.Diagnostics.EventLogInstaller> in base ai valori di pre-installazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <see cref="P:System.Diagnostics.EventLogInstaller.UninstallAction" /> contiene un valore non valido. Gli unici valori validi per questa proprietà sono <see langword="Remove" /> e <see langword="NoAction" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>