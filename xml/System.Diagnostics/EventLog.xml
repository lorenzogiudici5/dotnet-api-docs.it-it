<Type Name="EventLog" FullName="System.Diagnostics.EventLog">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9d1d55650794a0dbf45b3b81bb454cf8fbec5629" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36344325" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventLog : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventLog extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventLog" />
  <TypeSignature Language="VB.NET" Value="Public Class EventLog&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventLog : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <TypeSignature Language="F#" Value="type EventLog = class&#xA;    inherit Component&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("EntryWritten")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.InstallerType(typeof(System.Diagnostics.EventLogInstaller))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.MonitoringDescription("Represents an event log")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides interaction with Windows event logs.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventLog> Consente di accedere o personalizzare i registri eventi di Windows, che registrano le informazioni sugli eventi importanti del software o hardware. Utilizzando <xref:System.Diagnostics.EventLog>, è possibile leggere i log esistenti, scrivere voci di log, creare o eliminare i registri e rispondere per le voci di log, nonché eliminare origini eventi. È anche possibile creare nuovi log durante la creazione di un'origine evento.  
  
> [!IMPORTANT]
>  Questo tipo implementa la <xref:System.IDisposable> interfaccia. Dopo aver utilizzato il tipo, è necessario eliminarlo direttamente o indirettamente. Per eliminare direttamente il tipo, chiamare il relativo <xref:System.IDisposable.Dispose%2A> metodo in un `try` / `catch` blocco. Per eliminarlo indirettamente, utilizzare un costrutto di linguaggio come ad esempio `using` in C# o `Using` in Visual Basic. Per altre informazioni, vedere la sezione "Utilizzo di oggetti che implementano IDisposable" nel <xref:System.IDisposable> argomento relativo all'interfaccia.  
  
 Oltre a fornire l'accesso a singoli log eventi e le relative voci, la <xref:System.Diagnostics.EventLog> classe consente di accedere alla raccolta di tutti i registri eventi. È possibile usare il `static` i membri di <xref:System.Diagnostics.EventLog> per eliminare i registri, ottenere elenchi di log, creare o eliminare un'origine o determinare se un computer contiene già una determinata origine.  
  
 Esistono tre log eventi predefiniti: applicazione, sistema e sicurezza. Registro di sicurezza è di sola lettura. Altre applicazioni e servizi di installare, ad esempio Active Directory, potrebbe essere necessario ulteriori registri eventi.  
  
 Sono presenti le considerazioni sulla sicurezza quando si utilizza il <xref:System.Diagnostics.EventLog> classe. <xref:System.Diagnostics.EventLog> è necessario <xref:System.Diagnostics.EventLogPermission> le autorizzazioni per azioni specifiche in .NET Framework 2.0 e versioni successive o con attendibilità totale in .NET Framework 1.0 e 1.1. È consigliabile che <xref:System.Diagnostics.EventLogPermission> non è concessa a codice parzialmente attendibile.  Non passare mai alcun oggetto registro eventi, inclusi <xref:System.Diagnostics.EventLogEntryCollection> e <xref:System.Diagnostics.EventLogEntry> degli oggetti a codice parzialmente attendibile. Ad esempio, la creazione di un <xref:System.Diagnostics.EventLog> oggetto, si scrive una voce e quindi passando il <xref:System.Diagnostics.EventLog> oggetto a codice parzialmente attendibile può creare un problema di sicurezza, poiché la possibilità di leggere e scrivere nel registro eventi consente al codice eseguire azioni quali il rilascio messaggi del registro eventi nel nome di un'altra applicazione.  
  
 A partire da Windows Vista, controllo dell'Account utente (UAC) determina le credenziali di un utente. Ai membri del gruppo Administrators predefinito vengono assegnati due token di accesso in fase di esecuzione, ovvero un token di accesso utente standard e un token di accesso amministratore. Per impostazione predefinita, viene assegnato il ruolo dell'utente standard. Per eseguire il codice che accede al Registro di sicurezza, è necessario elevare le credenziali da utente standard ad amministratore. È possibile farlo quando si avvia un'applicazione aprendo il menu di scelta rapida per l'applicazione (se si usa un mouse, fare doppio clic sull'icona dell'applicazione) e che indica che si desidera eseguire come amministratore.  
  
 È possibile utilizzare <xref:System.Diagnostics.EventLog> per creare il log eventi personalizzati che è possibile visualizzare tramite il server del Visualizzatore eventi. Utilizzare il <xref:System.Diagnostics.EventLog.RegisterDisplayName%2A> metodo per visualizzare un nome localizzato per il log eventi nel Visualizzatore eventi. Utilizzare il <xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A> metodo per configurare il comportamento del log eventi quando raggiunge la dimensione massima del registro.  
  
 Per leggere da un registro eventi, specificare il nome del log (<xref:System.Diagnostics.EventLog.Log%2A> proprietà) e nome del computer server (<xref:System.Diagnostics.EventLog.MachineName%2A> proprietà per il log eventi. Se non si specifica il nome del computer server, il computer locale, ".", verrà utilizzato. Non è necessario specificare l'origine evento (<xref:System.Diagnostics.EventLog.Source%2A> proprietà), poiché un'origine è obbligatorio solo per la scrittura nei log. Il <xref:System.Diagnostics.EventLog.Entries%2A> proprietà viene popolata automaticamente con l'elenco delle voci del log eventi.  
  
 Per scrivere in un registro eventi, specificare o creare un'origine evento (<xref:System.Diagnostics.EventLog.Source%2A> proprietà). È necessario disporre delle credenziali amministrative nel computer per creare una nuova origine evento. L'origine evento registra l'applicazione con il registro eventi come origine valida delle voci. È possibile utilizzare l'origine evento per scrivere in un solo log alla volta. Il <xref:System.Diagnostics.EventLog.Source%2A> proprietà può essere qualsiasi stringa, ma il nome deve essere diverso da altre origini nel computer. L'origine evento è in genere il nome dell'applicazione o un'altra stringa di identificazione. Tentativo di creare un duplicato <xref:System.Diagnostics.EventLog.Source%2A> valore genera un'eccezione. Tuttavia, un singolo registro eventi può essere associato a più origini.  
  
 Se l'origine eventi per il registro eventi è associato il <xref:System.Diagnostics.EventLog> istanza non esiste, viene creata una nuova origine evento. Per creare un'origine evento in Windows Vista e versioni successive o Windows Server 2003, è necessario disporre delle credenziali amministrative.  
  
 Questo requisito è poiché deve essere eseguita la ricerca di tutti i registri eventi, inclusi i log di sicurezza, per determinare se l'origine evento è univoco. A partire da Windows Vista, gli utenti non dispone dell'autorizzazione per accedere al Registro di sicurezza; Pertanto, un <xref:System.Security.SecurityException> viene generata un'eccezione.  
  
> [!IMPORTANT]
>  Creazione o l'eliminazione di un'origine eventi richiede la sincronizzazione del codice sottostante mediante un mutex denominato. Se un'applicazione con privilegi elevati blocca il mutex denominato, il tentativo di creare o eliminare un'origine evento fa sì che l'applicazione di rispondere fino a quando non viene rilasciato il blocco. Per evitare questo problema, non concedere mai <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode> dell'autorizzazione per codice non attendibile. Inoltre, <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode> autorizzazione potenzialmente consente altre autorizzazioni è stata ignorata e deve essere concesso solo a codice altamente attendibile.  
  
 Servizi e applicazioni scrivono nel registro applicazioni o in un log personalizzato. I driver di dispositivo devono scrivere nel Registro di sistema. Se non si imposta in modo esplicito il <xref:System.Diagnostics.EventLog.Log%2A> proprietà, valore predefinito è il registro eventi nel registro applicazioni.  
  
> [!NOTE]
>  Non c'è niente per proteggere un'applicazione da scrivere come qualsiasi origine registrata.  Se un'applicazione è stata concessa <xref:System.Diagnostics.EventLogPermissionAccess.Write> autorizzazione, è possibile scrivere gli eventi per qualsiasi origine valida registrata nel computer.  
  
 Usare la <xref:System.Diagnostics.EventLog.WriteEvent%2A> e <xref:System.Diagnostics.EventLog.WriteEntry%2A> i metodi per scrivere eventi in un registro eventi. È necessario specificare un'origine evento per scrivere eventi; è necessario creare e configurare l'origine evento prima di scrivere la prima voce con l'origine.  
  
 Creare la nuova origine evento durante l'installazione dell'applicazione. Questo consente di tempo per il sistema operativo aggiornare l'elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è stato aggiornato l'elenco delle origini evento e si prova a scrivere un evento con la nuova origine, che l'operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine utilizzando un <xref:System.Diagnostics.EventLogInstaller> oggetto o il <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodo. È necessario disporre delle credenziali amministrative nel computer per creare una nuova origine evento.  
  
 Ogni origine può scrivere in un solo log eventi alla volta. Tuttavia, l'applicazione può utilizzare più origini per scrivere più registri eventi. Ad esempio, l'applicazione potrebbe richiedere più origini configurate per diversi log eventi o i file di risorse diverso. Per modificare i dettagli di configurazione di un'origine esistente, è necessario eliminare l'origine e quindi crearlo nuovamente con la nuova configurazione. Se altre applicazioni o componenti usano l'origine esistente, creare una nuova origine con la configurazione aggiornata anziché eliminare l'origine esistente.  
  
 È possibile registrare l'origine evento con le risorse localizzate per le stringhe di categoria e il messaggio di evento. L'applicazione può scrivere voci nel registro eventi tramite identificatori di risorsa anziché specificare i valori stringa effettivo. Consultare il <xref:System.Diagnostics.EventLogInstaller> e <xref:System.Diagnostics.EventSourceCreationData> classi per ulteriori informazioni sulla configurazione dell'origine con i file di risorse.  
  
 Se l'applicazione scrive i valori stringa direttamente nel registro eventi, non è necessario impostare le proprietà di file per l'origine della risorsa. L'origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Se l'applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un'origine con i file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci tramite identificatori di risorsa nel registro eventi. Creare un'origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo per scrivere stringhe direttamente il registro eventi utilizza tale origine.  
  
 Quando si scrivono eventi, è necessario specificare almeno una stringa di messaggio o l'identificatore di risorsa per una stringa di messaggio. Altre proprietà di evento sono facoltativi. Esempi di impostazioni facoltativi dell'evento includono quanto segue:  
  
-   È possibile impostare il <xref:System.Diagnostics.EventLogEntryType> per specificare l'icona che consente di visualizzare il Visualizzatore eventi per la voce.  
  
-   È possibile specificare un identificatore di categoria per l'evento, se l'applicazione usa categorie per filtrare gli eventi.  
  
-   Se si desidera associare informazioni aggiuntive con un determinato evento, è possibile collegare dati binari alla voce dell'evento.  
  
> [!IMPORTANT]
>  La registrazione degli eventi utilizza lo spazio su disco, il tempo del processore e altre risorse di sistema. È importante registrare solo le informazioni essenziali. Si consiglia di inserire le chiamate del log eventi in un percorso di errore, anziché nel percorso del codice principale, in modo non influire negativamente sulle prestazioni.  
  
 Per un elenco di valori di proprietà iniziali per un'istanza di <xref:System.Diagnostics.EventLog>, vedere il <xref:System.Diagnostics.EventLog.%23ctor%2A> costruttore.  
  
   
  
## Examples  
 L'esempio seguente viene creata l'origine evento `MySource` se non esiste già e viene scritta una voce nel registro eventi `MyNewLog`.  
  
> [!NOTE]
>  A partire da Windows Vista, è necessario eseguire questa applicazione come amministratore.  
  
 [!code-cpp[Classic EventLog.CreateEventSource Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.CreateEventSource Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.CreateEventSource Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.CreateEventSource Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.CreateEventSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.CreateEventSource Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.EventLogInstaller" />
    <altmember cref="T:System.Diagnostics.EventLogEntry" />
    <altmember cref="T:System.Diagnostics.EntryWrittenEventArgs" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLog" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLog();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLog" /> class. Does not associate the instance with any log.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prima di chiamare <xref:System.Diagnostics.EventLog.WriteEntry%2A>, specificare il <xref:System.Diagnostics.EventLog.Source%2A> proprietà del <xref:System.Diagnostics.EventLog> istanza. Se stanno solo leggendo <xref:System.Diagnostics.EventLog.Entries%2A> dal log, è possibile specificare solo il <xref:System.Diagnostics.EventLog.Log%2A> e <xref:System.Diagnostics.EventLog.MachineName%2A> proprietà.  
  
> [!NOTE]
>  Se non si specifica un <xref:System.Diagnostics.EventLog.MachineName%2A>, il computer locale (".") verrà utilizzato.  
  
 La tabella seguente illustra i valori di proprietà iniziali per un'istanza di <xref:System.Diagnostics.EventLog>.  
  
|Proprietà|Valore iniziale|  
|--------------|-------------------|  
|<xref:System.Diagnostics.EventLog.Source%2A>|Una stringa vuota ("").|  
|<xref:System.Diagnostics.EventLog.Log%2A>|Una stringa vuota ("").|  
|<xref:System.Diagnostics.EventLog.MachineName%2A>|Il computer locale (".").|  
  
   
  
## Examples  
 L'esempio seguente viene creata l'origine `MySource` se non esiste già e viene scritta una voce nel registro eventi `MyNewLog`.  
  
 [!code-cpp[Classic EventLog.CreateEventSource Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.CreateEventSource Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.CreateEventSource Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.CreateEventSource Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.CreateEventSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.CreateEventSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEntry" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="T:System.Diagnostics.EventLogEntry" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLog (string logName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string logName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (logName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLog(System::String ^ logName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventLog : string -&gt; System.Diagnostics.EventLog" Usage="new System.Diagnostics.EventLog logName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="logName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logName">The name of the log on the local computer.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLog" /> class. Associates the instance with a log on the local computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Imposta questo overload di <xref:System.Diagnostics.EventLog.Log%2A> proprietà per il `logName` parametro. Prima di chiamare <xref:System.Diagnostics.EventLog.WriteEntry%2A>, specificare il <xref:System.Diagnostics.EventLog.Source%2A> proprietà del <xref:System.Diagnostics.EventLog> istanza. Se stanno solo leggendo <xref:System.Diagnostics.EventLog.Entries%2A> dal log, è possibile specificare solo il <xref:System.Diagnostics.EventLog.Log%2A> e <xref:System.Diagnostics.EventLog.MachineName%2A> proprietà.  
  
> [!NOTE]
>  Se non si specifica un <xref:System.Diagnostics.EventLog.MachineName%2A>, il computer locale (".") verrà utilizzato. Questo overload del costruttore viene specificata la <xref:System.Diagnostics.EventLog.Log%2A> proprietà, ma è possibile modificare questa prima di leggere il <xref:System.Diagnostics.EventLog.Entries%2A> proprietà.  
  
 Se l'origine specifica nel <xref:System.Diagnostics.EventLog.Source%2A> la proprietà è univoca da altre origini nel computer, una chiamata successiva a <xref:System.Diagnostics.EventLog.WriteEntry%2A> crea un log con il nome specificato, se non esiste già.  
  
 La tabella seguente illustra i valori di proprietà iniziali per un'istanza di <xref:System.Diagnostics.EventLog>.  
  
|Proprietà|Valore iniziale|  
|--------------|-------------------|  
|<xref:System.Diagnostics.EventLog.Source%2A>|Una stringa vuota ("").|  
|<xref:System.Diagnostics.EventLog.Log%2A>|Il `logName` parametro.|  
|<xref:System.Diagnostics.EventLog.MachineName%2A>|Il computer locale (".").|  
  
   
  
## Examples  
 Nell'esempio seguente legge le voci nel registro eventi, "myNewLog", nel computer locale.  
  
 [!code-cpp[Classic EventLog.EventLog1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.EventLog1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.EventLog1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.EventLog1 Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.EventLog1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.EventLog1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The log name is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The log name is invalid.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEntry" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="T:System.Diagnostics.EventLogEntry" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLog (string logName, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string logName, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (logName As String, machineName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLog(System::String ^ logName, System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventLog : string * string -&gt; System.Diagnostics.EventLog" Usage="new System.Diagnostics.EventLog (logName, machineName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="logName" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logName">The name of the log on the specified computer.</param>
        <param name="machineName">The computer on which the log exists.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLog" /> class. Associates the instance with a log on the specified computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo overload imposta la <xref:System.Diagnostics.EventLog.Log%2A> proprietà per il `logName` parametro e il <xref:System.Diagnostics.EventLog.MachineName%2A> proprietà per il `machineName` parametro. Prima di chiamare <xref:System.Diagnostics.EventLog.WriteEntry%2A>, specificare il <xref:System.Diagnostics.EventLog.Source%2A> proprietà del <xref:System.Diagnostics.EventLog>. Se stanno solo leggendo <xref:System.Diagnostics.EventLog.Entries%2A> dal log, è possibile specificare solo il <xref:System.Diagnostics.EventLog.Log%2A> e <xref:System.Diagnostics.EventLog.MachineName%2A> proprietà.  
  
> [!NOTE]
>  Questo overload del costruttore specifica il <xref:System.Diagnostics.EventLog.Log%2A> e <xref:System.Diagnostics.EventLog.MachineName%2A> delle proprietà, ma è possibile modificare entrambe prima di leggere il <xref:System.Diagnostics.EventLog.Entries%2A> proprietà.  
  
 La tabella seguente illustra i valori di proprietà iniziali per un'istanza di <xref:System.Diagnostics.EventLog>.  
  
|Proprietà|Valore iniziale|  
|--------------|-------------------|  
|<xref:System.Diagnostics.EventLog.Source%2A>|Una stringa vuota ("").|  
|<xref:System.Diagnostics.EventLog.Log%2A>|Il `logName` parametro.|  
|<xref:System.Diagnostics.EventLog.MachineName%2A>|Il `machineName` parametro.|  
  
   
  
## Examples  
 Nell'esempio seguente legge le voci nel registro eventi, "myNewLog", nel computer "myServer".  
  
 [!code-cpp[Classic EventLog.EventLog2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.EventLog2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.EventLog2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.EventLog2 Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.EventLog2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.EventLog2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The log name is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The log name is invalid.  -or-  The computer name is invalid.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEntry" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="T:System.Diagnostics.EventLogEntry" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLog (string logName, string machineName, string source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string logName, string machineName, string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (logName As String, machineName As String, source As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLog(System::String ^ logName, System::String ^ machineName, System::String ^ source);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventLog : string * string * string -&gt; System.Diagnostics.EventLog" Usage="new System.Diagnostics.EventLog (logName, machineName, source)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="logName" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logName">The name of the log on the specified computer</param>
        <param name="machineName">The computer on which the log exists.</param>
        <param name="source">The source of event log entries.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventLog" /> class. Associates the instance with a log on the specified computer and creates or assigns the specified source to the <see cref="T:System.Diagnostics.EventLog" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore imposta la <xref:System.Diagnostics.EventLog.Log%2A> proprietà per il `logName` parametro, il <xref:System.Diagnostics.EventLog.MachineName%2A> proprietà per il `machineName` parametro e il <xref:System.Diagnostics.EventLog.Source%2A> proprietà per il `source` parametro. Il <xref:System.Diagnostics.EventLog.Source%2A> proprietà è obbligatoria quando si scrive in un registro eventi. Tuttavia, se si è solo di leggere da un registro eventi, solo il <xref:System.Diagnostics.EventLog.Log%2A> e <xref:System.Diagnostics.EventLog.MachineName%2A> proprietà sono necessarie (fino a quando il registro eventi sul server è già associato a un'origine). Se si è solo di leggere dal registro eventi, un altro overload del costruttore potrebbe essere sufficiente.  
  
 La tabella seguente illustra i valori di proprietà iniziali per un'istanza di <xref:System.Diagnostics.EventLog>.  
  
|Proprietà|Valore iniziale|  
|--------------|-------------------|  
|<xref:System.Diagnostics.EventLog.Source%2A>|Il `source` parametro.|  
|<xref:System.Diagnostics.EventLog.Log%2A>|Il `logName` parametro.|  
|<xref:System.Diagnostics.EventLog.MachineName%2A>|Il `machineName` parametro.|  
  
   
  
## Examples  
 Nell'esempio seguente scrive una voce in un registro eventi, "MyNewLog", nel computer locale, usando l'origine "MySource".  
  
 [!code-cpp[Classic EventLog.EventLog3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.EventLog3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.EventLog3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.EventLog3 Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.EventLog3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.EventLog3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The log name is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The log name is invalid.  -or-  The computer name is invalid.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEntry" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="T:System.Diagnostics.EventLogEntry" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="eventLog.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Begins the initialization of an <see cref="T:System.Diagnostics.EventLog" /> used on a form or used by another component. The initialization occurs at runtime.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] Progettazione ambiente utilizza questo metodo per avviare l'inizializzazione di un componente utilizzato in un form o da un altro componente. Il <xref:System.Diagnostics.EventLog.EndInit%2A> metodo termina l'inizializzazione. Utilizzando il <xref:System.Diagnostics.EventLog.BeginInit%2A> e <xref:System.Diagnostics.EventLog.EndInit%2A> impedisce che il controllo venga utilizzato prima che il completamento dell'inizializzazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Diagnostics.EventLog" /> is already initialized.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="M:System.Diagnostics.EventLog.EndInit" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="eventLog.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all entries from the event log.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I registri eventi sono impostati con una dimensione massima che determina il numero di voci contengono. Quando un registro eventi è pieno, interrompe la registrazione di informazioni sui nuovi eventi o inizia a sovrascrivere le voci precedenti. Se si arresta la registrazione degli eventi, è possibile utilizzare questo metodo per cancellare il log delle voci esistenti e consentono di avviare di nuovo la registrazione eventi. È necessario disporre delle autorizzazioni di amministratore nel computer in cui risiede il log per la cancellazione di voci del registro eventi.  
  
 <xref:System.Diagnostics.EventLog.Clear%2A> Chiude il log eventi, rilascia l'handle di evento, recupera i nuovi leggere e scrittura gli handle e riapre il log eventi. Gli eventi ricevuti dopo la chiamata al metodo non vengono cancellati insieme agli eventi esistenti.  
  
   
  
## Examples  
 Nell'esempio seguente elimina un registro eventi.  
  
> [!CAUTION]
>  Poiché l'applicazione, sistema, sicurezza e gli altri log personalizzati non possono contenere informazioni essenziali; Assicurarsi di specificare un log personalizzato prima di eseguire questo codice di esempio. In questo esempio viene eliminato il log personalizzato `myNewLog`.  
  
 [!code-cpp[Classic EventLog.Clear Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.Clear Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">The event log was not cleared successfully.  -or-  The log cannot be opened. A Windows error code is not available.</exception>
        <exception cref="T:System.ArgumentException">A value is not specified for the <see cref="P:System.Diagnostics.EventLog.Log" /> property. Make sure the log name is not an empty string.</exception>
        <exception cref="T:System.InvalidOperationException">The log does not exist.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per l'amministrazione informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="M:System.Diagnostics.EventLog.Close" />
        <altmember cref="M:System.Diagnostics.EventLog.Delete(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="eventLog.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes the event log and releases read and write handles.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Diagnostics.EventLog.Close%2A> viene chiamato da protetto <xref:System.ComponentModel.Component.Dispose%2A> metodo. Non è necessario richiamare <xref:System.Diagnostics.EventLog.Close%2A> prima di chiamare <xref:System.ComponentModel.Component.Dispose%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">The event log's read handle or write handle was not released successfully.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="M:System.Diagnostics.EventLog.Delete(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.Clear" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateEventSource">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Establishes an application as able to write event information to a particular log on the system.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateEventSource">
      <MemberSignature Language="C#" Value="public static void CreateEventSource (System.Diagnostics.EventSourceCreationData sourceData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateEventSource(class System.Diagnostics.EventSourceCreationData sourceData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.CreateEventSource(System.Diagnostics.EventSourceCreationData)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateEventSource (sourceData As EventSourceCreationData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateEventSource(System::Diagnostics::EventSourceCreationData ^ sourceData);" />
      <MemberSignature Language="F#" Value="static member CreateEventSource : System.Diagnostics.EventSourceCreationData -&gt; unit" Usage="System.Diagnostics.EventLog.CreateEventSource sourceData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoNotSupported("remote machine is not supported")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceData" Type="System.Diagnostics.EventSourceCreationData" />
      </Parameters>
      <Docs>
        <param name="sourceData">The configuration properties for the event source and its target event log.</param>
        <summary>Establishes a valid event source for writing localized event messages, using the specified configuration properties for the event source and the corresponding event log.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo overload per configurare una nuova origine per la scrittura di voci in un registro eventi sul computer locale o in un computer remoto. Non è necessario utilizzare questo metodo per leggere da un registro eventi.  
  
 Il <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodo Usa l'input `sourceData` <xref:System.Diagnostics.EventSourceCreationData.Source%2A>, <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> e <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> proprietà per creare i valori del Registro di sistema nel computer di destinazione per la nuova origine e il log eventi associato. Un nuovo nome di origine non può corrispondere a un nome di origine esistente o un nome registro eventi esistenti nel computer di destinazione. Se il <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> non è impostata, l'origine sia registrata per il log eventi dell'applicazione. Se il <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> non è impostata, l'origine sia registrata nel computer locale.  
  
> [!NOTE]
>  Per creare un'origine evento in Windows Vista e versioni successive o Windows Server 2003, è necessario disporre dei privilegi di amministratore.  
>   
>  Il motivo di questo requisito è che tutti i registri eventi, tra cui sicurezza, deve essere eseguita la ricerca per determinare se l'origine evento è univoco. A partire da Windows Vista, gli utenti non dispone dell'autorizzazione per accedere al Registro di sicurezza; Pertanto, un <xref:System.Security.SecurityException> viene generata un'eccezione.  
>   
>  A partire da Windows Vista, controllo dell'Account utente (UAC) determina i privilegi di un utente. Ai membri del gruppo Administrators predefinito vengono assegnati due token di accesso in fase di esecuzione, ovvero un token di accesso utente standard e un token di accesso amministratore. Per impostazione predefinita, viene assegnato il ruolo dell'utente standard. Per eseguire il codice che accede al Registro di sicurezza, è necessario elevare i privilegi da utente standard ad amministratore. È possibile farlo quando si avvia un'applicazione facendo clic con il pulsante destro del mouse sull'icona dell'applicazione e indicando l'opzione di esecuzione come amministratore.  
  
 Uso <xref:System.Diagnostics.EventLog.WriteEvent%2A> e <xref:System.Diagnostics.EventLog.WriteEntry%2A> per scrivere eventi in un registro eventi. È necessario specificare un'origine evento per scrivere eventi; è necessario creare e configurare l'origine evento prima di scrivere la prima voce con l'origine.  
  
 Creare la nuova origine evento durante l'installazione dell'applicazione. Questo consente di tempo per il sistema operativo aggiornare l'elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l'elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l'operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodo. È necessario disporre dei diritti amministrativi sul computer per creare una nuova origine evento.  
  
 È possibile creare un'origine evento per un log eventi esistente o un nuovo registro eventi. Quando si crea una nuova origine per un nuovo registro eventi, il sistema registra l'origine di tale log, ma non viene creato il registro finché la prima voce viene scritto in essa.  
  
 Il sistema operativo archivia i registri eventi come file. Quando si usa <xref:System.Diagnostics.EventLogInstaller> o <xref:System.Diagnostics.EventLog.CreateEventSource%2A> per creare un nuovo registro eventi, il file associato viene archiviato nella directory %SystemRoot%\System32\Config nel computer specificato. Il nome del file è impostato aggiungendo i primi 8 caratteri di <xref:System.Diagnostics.EventLog.Log%2A> proprietà con l'estensione "evt".  
  
 Ogni origine può solo scrivere un solo log eventi alla volta. Tuttavia, l'applicazione può utilizzare più origini per scrivere più registri eventi. Ad esempio, l'applicazione potrebbe richiedere più origini configurate per diversi log eventi o i file di risorse diverso.  
  
 È possibile registrare l'origine evento con file di risorse localizzate per le stringhe di categoria e il messaggio di evento. L'applicazione può scrivere voci del registro eventi tramite identificatori di risorsa, anziché specificare la stringa effettiva. Il Visualizzatore eventi utilizza l'identificatore di risorsa per trovare e visualizzare la stringa corrispondente dal file di risorse localizzato in base alle impostazioni della lingua corrente. È possibile registrare un file separato per le categorie di eventi, messaggi e le stringhe di inserimento di parametro o è possibile registrare lo stesso file di risorse per tutti i tre tipi di stringhe. Usare la <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, e <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> proprietà per configurare l'origine per scrivere voci localizzate nel registro eventi. Se l'applicazione scrive stringhe valori direttamente nel registro eventi, è necessario impostare queste proprietà.  
  
 L'origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Se l'applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un'origine con i file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci tramite identificatori di risorsa nel registro eventi. Creare un'origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo per scrivere stringhe direttamente il registro eventi utilizza tale origine.  
  
 Per modificare i dettagli di configurazione di un'origine esistente, è necessario eliminare l'origine e quindi crearlo nuovamente con la nuova configurazione. Se altre applicazioni o componenti usano l'origine esistente, creare una nuova origine con la configurazione aggiornata, piuttosto che l'eliminazione dell'origine esistente.  
  
> [!NOTE]
>  Se è configurata un'origine per un registro eventi e la si riconfigura per un altro log eventi, è necessario riavviare il computer rendere effettive le modifiche.  
  
   
  
## Examples  
 Nell'esempio seguente si determina se l'origine eventi denominata `SampleApplicationSource` è registrato nel computer locale. Se l'origine evento non esiste, l'esempio imposta il file di risorse di messaggio per l'origine e crea la nuova origine evento. Infine, l'esempio imposta il nome visualizzato localizzato per il registro eventi, usando il valore dell'identificatore di risorsa in `DisplayNameMsgId` e il percorso del file di risorse in `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 L'esempio Usa il seguente file di testo messaggio, compilato nella libreria di risorse EventLogMsgs. Un file di testo del messaggio è l'origine da cui viene creato il file di risorse di messaggio. Il file di testo del messaggio definisce il testo per la categoria, messaggio di evento e le stringhe di inserimento di parametro e identificatori di risorsa. In particolare, identificatore di risorsa 5001 è definito per il nome localizzato del registro eventi.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The computer name specified in <paramref name="sourceData" /> is not valid.  \- or -  The source name specified in <paramref name="sourceData" /> is <see langword="null" />.  \- or -  The log name specified in <paramref name="sourceData" /> is not valid. Event log names must consist of printable characters and cannot include the characters '*', '?', or '\\'.  \- or -  The log name specified in <paramref name="sourceData" /> is not valid for user log creation. The Event log names AppEvent, SysEvent, and SecEvent are reserved for system use.  \- or -  The log name matches an existing event source name.  \- or -  The source name specified in <paramref name="sourceData" /> results in a registry key path longer than 254 characters.  \- or -  The first 8 characters of the log name specified in <paramref name="sourceData" /> are not unique.  \- or -  The source name specified in <paramref name="sourceData" /> is already registered.  \- or -  The source name specified in <paramref name="sourceData" /> matches an existing event log name.</exception>
        <exception cref="T:System.InvalidOperationException">The registry key for the event log could not be opened.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceData" /> is <see langword="null" />.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per l'amministrazione informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="T:System.Diagnostics.EventSourceCreationData" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="T:System.Diagnostics.EventLogInstaller" />
      </Docs>
    </Member>
    <Member MemberName="CreateEventSource">
      <MemberSignature Language="C#" Value="public static void CreateEventSource (string source, string logName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateEventSource(string source, string logName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.CreateEventSource(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateEventSource (source As String, logName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateEventSource(System::String ^ source, System::String ^ logName);" />
      <MemberSignature Language="F#" Value="static member CreateEventSource : string * string -&gt; unit" Usage="System.Diagnostics.EventLog.CreateEventSource (source, logName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="logName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The source name by which the application is registered on the local computer.</param>
        <param name="logName">The name of the log the source's entries are written to. Possible values include Application, System, or a custom event log.</param>
        <summary>Establishes the specified source name as a valid event source for writing entries to a log on the local computer. This method can also create a new custom log on the local computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo overload per creare un log personalizzato o per creare e registrare un <xref:System.Diagnostics.EventLog.Source%2A> in un log esistente nel computer locale.  
  
 Se `logName` viene `null` o una stringa vuota ("") quando si chiama <xref:System.Diagnostics.EventLog.CreateEventSource%2A>, il log predefinito nel registro applicazioni. Se il log non esiste nel computer locale, il sistema crea un log personalizzato e registra l'applicazione come un <xref:System.Diagnostics.EventLog.Source%2A> di tale log.  
  
> [!NOTE]
>  Per creare un'origine evento in Windows Vista e versioni successive o Windows Server 2003, è necessario disporre dei privilegi di amministratore.  
>   
>  Il motivo di questo requisito è che tutti i registri eventi, tra cui sicurezza, deve essere eseguita la ricerca per determinare se l'origine evento è univoco. A partire da Windows Vista, gli utenti non dispone dell'autorizzazione per accedere al Registro di sicurezza; Pertanto, un <xref:System.Security.SecurityException> viene generata un'eccezione.  
>   
>  In Windows Vista e versioni successive i privilegi di un utente sono determinati dalla funzionalità Controllo dell'account utente. Ai membri del gruppo Administrators predefinito vengono assegnati due token di accesso in fase di esecuzione, ovvero un token di accesso utente standard e un token di accesso amministratore. Per impostazione predefinita, viene assegnato il ruolo dell'utente standard. Per eseguire il codice che accede al Registro di sicurezza, è necessario elevare i privilegi da utente standard ad amministratore. È possibile farlo quando si avvia un'applicazione facendo clic con il pulsante destro del mouse sull'icona dell'applicazione e indicando l'opzione di esecuzione come amministratore.  
  
 È sufficiente creare un'origine evento, se si scrive nel registro eventi. Prima di scrivere una voce in un registro eventi, è necessario registrare l'origine evento con il registro eventi come origine valida degli eventi. Quando si scrive una voce di log, il sistema utilizza il <xref:System.Diagnostics.EventLog.Source%2A> per trovare il log appropriato in cui inserire la voce. Se si sta leggendo il registro eventi, è possibile specificare il <xref:System.Diagnostics.EventLog.Source%2A>, o un <xref:System.Diagnostics.EventLog.Log%2A> e <xref:System.Diagnostics.EventLog.MachineName%2A>.  
  
> [!NOTE]
>  Non è necessario specificare il <xref:System.Diagnostics.EventLog.MachineName%2A> se ci si connette a un log nel computer locale. Se non si specifica il <xref:System.Diagnostics.EventLog.MachineName%2A> durante la lettura da un log, il computer locale (".") verrà utilizzato.  
  
 Uso <xref:System.Diagnostics.EventLog.WriteEvent%2A> e <xref:System.Diagnostics.EventLog.WriteEntry%2A> per scrivere eventi in un registro eventi. È necessario specificare un'origine evento per scrivere eventi; è necessario creare e configurare l'origine evento prima di scrivere la prima voce con l'origine.  
  
 Creare la nuova origine evento durante l'installazione dell'applicazione. Questo consente di tempo per il sistema operativo aggiornare l'elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l'elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l'operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodo. È necessario disporre dei diritti amministrativi sul computer per creare una nuova origine evento.  
  
 È possibile creare un'origine evento per un log eventi esistente o un nuovo registro eventi. Quando si crea una nuova origine per un nuovo registro eventi, il sistema registra l'origine di tale log, ma non viene creato il registro finché la prima voce viene scritto in essa.  
  
 Il sistema operativo archivia i registri eventi come file. Quando si usa <xref:System.Diagnostics.EventLogInstaller> o <xref:System.Diagnostics.EventLog.CreateEventSource%2A> per creare un nuovo registro eventi, il file associato viene archiviato nella directory %SystemRoot%\System32\Config nel computer specificato. Il nome del file è impostato aggiungendo i primi 8 caratteri di <xref:System.Diagnostics.EventLog.Log%2A> proprietà con l'estensione "evt".  
  
 L'origine deve essere univoco nel computer locale. un nuovo nome di origine non può corrispondere a un nome di origine esistente o un nome registro eventi esistente. Ogni origine può scrivere in un solo log eventi alla volta. Tuttavia, l'applicazione può utilizzare più origini per scrivere più registri eventi. Ad esempio, l'applicazione potrebbe richiedere più origini configurate per diversi log eventi o i file di risorse diverso.  
  
 L'origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Se l'applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un'origine con i file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci tramite identificatori di risorsa nel registro eventi. Creare un'origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo per scrivere stringhe direttamente il registro eventi utilizza tale origine.  
  
 Per modificare i dettagli di configurazione di un'origine esistente, è necessario eliminare l'origine e quindi crearlo nuovamente con la nuova configurazione. Se altre applicazioni o componenti usano l'origine esistente, creare una nuova origine con la configurazione aggiornata, piuttosto che l'eliminazione dell'origine esistente.  
  
> [!NOTE]
>  Se un'origine è già stata mappata a un log e si modifica un nuovo registro, è necessario riavviare il computer rendere effettive le modifiche.  
  
   
  
## Examples  
 L'esempio seguente viene creata l'origine `MySource` se non esiste già e viene scritta una voce nel registro eventi `MyNewLog`.  
  
 [!code-cpp[Classic EventLog.CreateEventSource Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.CreateEventSource Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.CreateEventSource Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.CreateEventSource Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.CreateEventSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.CreateEventSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="source" /> is an empty string ("") or <see langword="null" />.  \- or -  <paramref name="logName" /> is not a valid event log name. Event log names must consist of printable characters, and cannot include the characters '*', '?', or '\\'.  \- or -  <paramref name="logName" /> is not valid for user log creation. The event log names AppEvent, SysEvent, and SecEvent are reserved for system use.  \- or -  The log name matches an existing event source name.  \- or -  The source name results in a registry key path longer than 254 characters.  \- or -  The first 8 characters of <paramref name="logName" /> match the first 8 characters of an existing event log name.  \- or -  The source cannot be registered because it already exists on the local computer.  \- or -  The source name matches an existing event log name.</exception>
        <exception cref="T:System.InvalidOperationException">The registry key for the event log could not be opened on the local computer.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per l'amministrazione informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="M:System.Diagnostics.EventLog.Delete(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateEventSource">
      <MemberSignature Language="C#" Value="public static void CreateEventSource (string source, string logName, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateEventSource(string source, string logName, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.CreateEventSource(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateEventSource (source As String, logName As String, machineName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateEventSource(System::String ^ source, System::String ^ logName, System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member CreateEventSource : string * string * string -&gt; unit" Usage="System.Diagnostics.EventLog.CreateEventSource (source, logName, machineName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("use CreateEventSource(EventSourceCreationData) instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="logName" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The source by which the application is registered on the specified computer.</param>
        <param name="logName">The name of the log the source's entries are written to. Possible values include Application, System, or a custom event log. If you do not specify a value, <c>logName</c> defaults to Application.</param>
        <param name="machineName">The name of the computer to register this event source with, or "." for the local computer.</param>
        <summary>Establishes the specified source name as a valid event source for writing entries to a log on the specified computer. This method can also be used to create a new custom log on the specified computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo overload per creare un log personalizzato o per creare e registrare un <xref:System.Diagnostics.EventLog.Source%2A> in un log esistente nel computer specificato.  
  
 Se `logName` viene `null` o una stringa vuota ("") quando si chiama <xref:System.Diagnostics.EventLog.CreateEventSource%2A>, il log predefinito nel registro applicazioni. Se il log non esiste nel computer specificato, il sistema crea un log personalizzato e registra l'applicazione come un <xref:System.Diagnostics.EventLog.Source%2A> di tale log.  
  
 È sufficiente creare un'origine evento, se si scrive nel registro eventi. Prima di scrivere una voce in un registro eventi, è necessario registrare l'origine evento con il registro eventi come origine valida degli eventi. Quando si scrive una voce di log, il sistema utilizza il <xref:System.Diagnostics.EventLog.Source%2A> per trovare il log appropriato in cui inserire la voce. Se si sta leggendo il registro eventi, è possibile specificare il <xref:System.Diagnostics.EventLog.Source%2A>, o un <xref:System.Diagnostics.EventLog.Log%2A> e <xref:System.Diagnostics.EventLog.MachineName%2A>.  
  
> [!NOTE]
>  Per creare un'origine evento in Windows Vista e versioni successive o Windows Server 2003, è necessario disporre dei privilegi di amministratore.  
>   
>  Il motivo di questo requisito è che tutti i registri eventi, tra cui sicurezza, deve essere eseguita la ricerca per determinare se l'origine evento è univoco. In Windows Vista e versioni successive, gli utenti non dispone dell'autorizzazione per accedere al Registro di sicurezza; Pertanto, un <xref:System.Security.SecurityException> viene generata un'eccezione.  
>   
>  In Windows Vista e versioni successive i privilegi di un utente sono determinati dalla funzionalità Controllo dell'account utente. Ai membri del gruppo Administrators predefinito vengono assegnati due token di accesso in fase di esecuzione, ovvero un token di accesso utente standard e un token di accesso amministratore. Per impostazione predefinita, viene assegnato il ruolo dell'utente standard. Per eseguire il codice che accede al Registro di sicurezza, è necessario elevare i privilegi da utente standard ad amministratore. È possibile farlo quando si avvia un'applicazione facendo clic con il pulsante destro del mouse sull'icona dell'applicazione e indicando l'opzione di esecuzione come amministratore.  
  
 Uso <xref:System.Diagnostics.EventLog.WriteEvent%2A> e <xref:System.Diagnostics.EventLog.WriteEntry%2A> per scrivere eventi in un registro eventi. È necessario specificare un'origine evento per scrivere eventi; è necessario creare e configurare l'origine evento prima di scrivere la prima voce con l'origine.  
  
 Creare la nuova origine evento durante l'installazione dell'applicazione. Questo consente di tempo per il sistema operativo aggiornare l'elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l'elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l'operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodo. È necessario disporre dei diritti amministrativi sul computer per creare una nuova origine evento.  
  
 È possibile creare un'origine evento per un log eventi esistente o un nuovo registro eventi. Quando si crea una nuova origine per un nuovo registro eventi, il sistema registra l'origine di tale log, ma non viene creato il registro finché la prima voce viene scritto in essa.  
  
 Il sistema operativo archivia i registri eventi come file. Quando si usa <xref:System.Diagnostics.EventLogInstaller> o <xref:System.Diagnostics.EventLog.CreateEventSource%2A> per creare un nuovo registro eventi, il file associato viene archiviato nella directory %SystemRoot%\System32\Config nel computer specificato. Il nome del file è impostato aggiungendo i primi 8 caratteri di <xref:System.Diagnostics.EventLog.Log%2A> proprietà con l'estensione "evt".  
  
 L'origine deve essere univoco nel computer locale. un nuovo nome di origine non può corrispondere a un nome di origine esistente o un nome registro eventi esistente. Ogni origine può scrivere in un solo log eventi alla volta. Tuttavia, l'applicazione può utilizzare più origini per scrivere più registri eventi. Ad esempio, l'applicazione potrebbe richiedere più origini configurate per diversi log eventi o i file di risorse diverso.  
  
 L'origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Se l'applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un'origine con i file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci tramite identificatori di risorsa nel registro eventi. Creare un'origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo per scrivere stringhe direttamente il registro eventi utilizza tale origine.  
  
 Per modificare i dettagli di configurazione di un'origine esistente, è necessario eliminare l'origine e quindi crearlo nuovamente con la nuova configurazione. Se altre applicazioni o componenti usano l'origine esistente, creare una nuova origine con la configurazione aggiornata, piuttosto che l'eliminazione dell'origine esistente.  
  
> [!NOTE]
>  Se un'origine è già stata mappata a un log e si modifica un nuovo registro, è necessario riavviare il computer rendere effettive le modifiche.  
  
   
  
## Examples  
 L'esempio seguente viene creata l'origine `MySource` nel computer `MyServer`e viene scritta una voce nel registro eventi `MyNewLog`.  
  
 [!code-cpp[Classic EventLog.SourceExists1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.SourceExists1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.SourceExists1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.SourceExists1 Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.SourceExists1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.SourceExists1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="machineName" /> is not a valid computer name.  \- or -  <paramref name="source" /> is an empty string ("") or <see langword="null" />.  \- or -  <paramref name="logName" /> is not a valid event log name. Event log names must consist of printable characters, and cannot include the characters '*', '?', or '\\'.  \- or -  <paramref name="logName" /> is not valid for user log creation. The event log names AppEvent, SysEvent, and SecEvent are reserved for system use.  \- or -  The log name matches an existing event source name.  \- or -  The source name results in a registry key path longer than 254 characters.  \- or -  The first 8 characters of <paramref name="logName" /> match the first 8 characters of an existing event log name on the specified computer.  \- or -  The source cannot be registered because it already exists on the specified computer.  \- or -  The source name matches an existing event source name.</exception>
        <exception cref="T:System.InvalidOperationException">The registry key for the event log could not be opened on the specified computer.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per l'amministrazione informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="M:System.Diagnostics.EventLog.Delete(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Delete">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Removes a log resource.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static void Delete (string logName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Delete(string logName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.Delete(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Delete (logName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Delete(System::String ^ logName);" />
      <MemberSignature Language="F#" Value="static member Delete : string -&gt; unit" Usage="System.Diagnostics.EventLog.Delete logName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logName">The name of the log to delete. Possible values include: Application, Security, System, and any custom event logs on the computer.</param>
        <summary>Removes an event log from the local computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo quando il log che si desidera eliminare è nel computer locale. È possibile eliminare tutti i log nel computer, purché si disponga di autorizzazioni adeguate.  
  
 <xref:System.Diagnostics.EventLog.Delete%2A> Rimuove il log specificato da `logName` dal computer locale. Se si desidera eliminare solo se l'origine registrata in un log, chiamare <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>. Se si desidera solo eliminare le voci di log, chiamare <xref:System.Diagnostics.EventLog.Clear%2A>. <xref:System.Diagnostics.EventLog.Delete%2A> e <xref:System.Diagnostics.EventLog.DeleteEventSource%2A> sono `static` metodi, pertanto possono essere chiamati sulla classe stessa. Non è necessario creare una nuova istanza della <xref:System.Diagnostics.EventLog> per chiamare dei metodi.  
  
 Il <xref:System.Diagnostics.EventLog.Delete%2A> metodo prima elimina il file che contiene il contenuto del log. Quindi, accede al Registro di sistema e rimuove tutte le origini evento registrate per tale registro. Se si ricrea il log in un secondo momento, è consigliabile registrare le origini evento anche in questo caso se sono debba essere riutilizzate. Se non registrare le origini eventi e altri utenti di scrittura a un'origine eventi senza specificare un nome di log, verrà creato l'origine evento nel registro eventi dell'applicazione. Pertanto, le applicazioni che precedentemente erano in grado di scrivere voci nel registro eliminato e ricreato scriverà nel registro applicazioni di invece perché ora contiene l'origine evento.  
  
> [!NOTE]
>  Ricreazione di un registro eventi può risultare difficile. Evitare l'eliminazione di alcuni dei registri eventi creato dal sistema, ad esempio il registro applicazione.  
  
 Eliminazione di un log tramite una chiamata a <xref:System.Diagnostics.EventLog.Delete%2A> Elimina automaticamente le origini registrate in tale registro. Ciò può rendere altre applicazioni che utilizzano tale registro non funzionanti.  
  
   
  
## Examples  
 Nell'esempio seguente elimina un registro dal computer locale. Nell'esempio si determina il log dalla relativa origine.  
  
> [!NOTE]
>  In un registro eventi potrebbero scrivere più origini. Prima di eliminare un log personalizzato, assicurarsi che non sono presenti altre origini la scrittura in tale registro.  
  
 [!code-cpp[Classic EventLog.DeleteEventSource Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.DeleteEventSource Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.DeleteEventSource Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.DeleteEventSource Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.DeleteEventSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.DeleteEventSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="logName" /> is an empty string ("") or <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The registry key for the event log could not be opened on the local computer.  \- or -  The log does not exist on the local computer.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">The event log was not cleared successfully.  -or-  The log cannot be opened. A Windows error code is not available.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per l'amministrazione informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="M:System.Diagnostics.EventLog.Clear" />
        <altmember cref="M:System.Diagnostics.EventLog.Close" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static void Delete (string logName, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Delete(string logName, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.Delete(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Delete (logName As String, machineName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Delete(System::String ^ logName, System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member Delete : string * string -&gt; unit" Usage="System.Diagnostics.EventLog.Delete (logName, machineName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoNotSupported("remote machine is not supported")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logName" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logName">The name of the log to delete. Possible values include: Application, Security, System, and any custom event logs on the specified computer.</param>
        <param name="machineName">The name of the computer to delete the log from, or "." for the local computer.</param>
        <summary>Removes an event log from the specified computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo quando il log che si desidera eliminare è in un computer remoto. È possibile eliminare tutti i log nel computer, purché si disponga di autorizzazioni adeguate.  
  
 <xref:System.Diagnostics.EventLog.Delete%2A> Rimuove il log specificato da `logName` dal computer specificato dal `machineName`. Se si desidera eliminare solo se l'origine registrata in un log, chiamare <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>. Se si desidera solo eliminare le voci di log, chiamare <xref:System.Diagnostics.EventLog.Clear%2A>. <xref:System.Diagnostics.EventLog.Delete%2A> e <xref:System.Diagnostics.EventLog.DeleteEventSource%2A> sono `static` metodi, pertanto possono essere chiamati sulla classe stessa. Non è necessario creare un'istanza di <xref:System.Diagnostics.EventLog> per chiamare dei metodi.  
  
 Questo metodo prima elimina il file che contiene il contenuto del log. Quindi, accede al Registro di sistema e rimuove tutte le origini evento registrate per tale registro. Se si ricrea il log in un secondo momento, è consigliabile registrare le origini evento anche in questo caso se sono debba essere riutilizzate. Se non registrare le origini eventi e altri utenti di scrittura a un'origine eventi senza specificare un nome di log, verrà creato l'origine evento nel registro eventi dell'applicazione. Pertanto, le applicazioni che precedentemente erano in grado di scrivere voci nel registro eliminato e ricreato scriverà nel registro applicazioni di invece perché ora contiene l'origine evento.  
  
> [!NOTE]
>  Ricreazione di un registro eventi può risultare difficile. Evitare l'eliminazione di alcuni dei registri eventi creato dal sistema, ad esempio il registro applicazione.  
  
 Eliminazione di un log tramite una chiamata a <xref:System.Diagnostics.EventLog.Delete%2A> Elimina automaticamente le origini registrate in tale registro. Ciò può rendere altre applicazioni che utilizzano tale registro non funzionanti.  
  
   
  
## Examples  
 Nell'esempio seguente elimina un registro dal computer specificato. Nell'esempio si determina il log dalla relativa origine.  
  
> [!NOTE]
>  In un registro eventi potrebbero scrivere più origini. Prima di eliminare un log personalizzato, assicurarsi che non sono presenti altre origini la scrittura in tale registro.  
  
 [!code-cpp[Classic EventLog.Delete1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.Delete1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.Delete1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.Delete1 Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.Delete1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.Delete1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="logName" /> is an empty string ("") or <see langword="null" />.  \- or -  <paramref name="machineName" /> is not a valid computer name.</exception>
        <exception cref="T:System.InvalidOperationException">The registry key for the event log could not be opened on the specified computer.  \- or -  The log does not exist on the specified computer.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">The event log was not cleared successfully.  -or-  The log cannot be opened. A Windows error code is not available.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per l'amministrazione informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="M:System.Diagnostics.EventLog.Clear" />
        <altmember cref="M:System.Diagnostics.EventLog.Close" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteEventSource">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Removes an application's event source registration from the event log.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteEventSource">
      <MemberSignature Language="C#" Value="public static void DeleteEventSource (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteEventSource(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteEventSource (source As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteEventSource(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member DeleteEventSource : string -&gt; unit" Usage="System.Diagnostics.EventLog.DeleteEventSource source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The name by which the application is registered in the event log system.</param>
        <summary>Removes the event source registration from the event log of the local computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per rimuovere la registrazione di un <xref:System.Diagnostics.EventLog.Source%2A> dal computer locale. <xref:System.Diagnostics.EventLog.DeleteEventSource%2A> accede al Registro di sistema nel computer locale e rimuove la registrazione dell'applicazione come un'origine valida degli eventi.  
  
 È possibile rimuovere il componente come origine valida degli eventi, se non è più necessario per scrivere voci in tale registro. Ad esempio, è possibile farlo se è necessario modificare il componente da un log a un altro. Poiché un'origine può essere registrata solo in un log alla volta, la modifica del log è necessario rimuovere la registrazione corrente.  
  
 <xref:System.Diagnostics.EventLog.DeleteEventSource%2A> Rimuove solo l'origine registrata in un log. Se si desidera rimuovere il log stesso, chiamare <xref:System.Diagnostics.EventLog.Delete%2A>. Se si desidera solo eliminare le voci di log, chiamare <xref:System.Diagnostics.EventLog.Clear%2A>. <xref:System.Diagnostics.EventLog.Delete%2A> e <xref:System.Diagnostics.EventLog.DeleteEventSource%2A> sono `static` metodi, pertanto possono essere chiamati sulla classe stessa. Non è necessario creare un'istanza di <xref:System.Diagnostics.EventLog> per chiamare dei metodi.  
  
 Eliminazione di un log tramite una chiamata a <xref:System.Diagnostics.EventLog.Delete%2A> Elimina automaticamente le origini registrate in tale registro. Ciò può rendere altre applicazioni che utilizzano tale registro non funzionanti.  
  
> [!NOTE]
>  Se un'origine è già stata mappata a un log e si modifica un nuovo registro, è necessario riavviare il computer rendere effettive le modifiche.  
  
   
  
## Examples  
 Nell'esempio seguente elimina un'origine dal computer locale. Nell'esempio determina il log dalla relativa origine e quindi Elimina il registro.  
  
> [!NOTE]
>  In un registro eventi potrebbero scrivere più origini. Prima di eliminare un log personalizzato, assicurarsi che non sono presenti altre origini la scrittura in tale registro.  
  
 [!code-cpp[Classic EventLog.DeleteEventSource Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.DeleteEventSource Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.DeleteEventSource Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.DeleteEventSource Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.DeleteEventSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.DeleteEventSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="source" /> parameter does not exist in the registry of the local computer.  \- or -  You do not have write access on the registry key for the event log.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per l'amministrazione informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.Delete(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.Clear" />
      </Docs>
    </Member>
    <Member MemberName="DeleteEventSource">
      <MemberSignature Language="C#" Value="public static void DeleteEventSource (string source, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteEventSource(string source, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.DeleteEventSource(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteEventSource (source As String, machineName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteEventSource(System::String ^ source, System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member DeleteEventSource : string * string -&gt; unit" Usage="System.Diagnostics.EventLog.DeleteEventSource (source, machineName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoNotSupported("remote machine is not supported")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The name by which the application is registered in the event log system.</param>
        <param name="machineName">The name of the computer to remove the registration from, or "." for the local computer.</param>
        <summary>Removes the application's event source registration from the specified computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo overload per rimuovere la registrazione di un <xref:System.Diagnostics.EventLog.Source%2A> da un computer remoto. <xref:System.Diagnostics.EventLog.DeleteEventSource%2A> accede al Registro di sistema sul computer specificato dal `machineName` e rimuove la registrazione dell'applicazione come un'origine valida degli eventi.  
  
 È possibile rimuovere il componente come origine valida degli eventi, se non è più necessario per scrivere voci in tale registro. Ad esempio, è possibile farlo se è necessario modificare il componente da un log a un altro. Poiché un'origine può essere registrata solo in un log alla volta, la modifica del log è necessario rimuovere la registrazione corrente.  
  
 <xref:System.Diagnostics.EventLog.DeleteEventSource%2A> Rimuove solo l'origine registrata in un log. Se si desidera rimuovere il log stesso, chiamare <xref:System.Diagnostics.EventLog.Delete%2A>. Se si desidera solo eliminare le voci di log, chiamare <xref:System.Diagnostics.EventLog.Clear%2A>. <xref:System.Diagnostics.EventLog.Delete%2A> e <xref:System.Diagnostics.EventLog.DeleteEventSource%2A> sono `static` metodi, pertanto possono essere chiamati sulla classe stessa. Non è necessario creare un'istanza di <xref:System.Diagnostics.EventLog> per chiamare dei metodi.  
  
 Eliminazione di un log tramite una chiamata a <xref:System.Diagnostics.EventLog.Delete%2A> Elimina automaticamente le origini registrate in tale registro. Ciò può rendere altre applicazioni che utilizzano tale registro non funzionanti.  
  
> [!NOTE]
>  Se un'origine è già stata mappata a un log e si modifica un nuovo registro, è necessario riavviare il computer rendere effettive le modifiche.  
  
   
  
## Examples  
 Nell'esempio seguente elimina un'origine dal computer specificato. Nell'esempio determina il log dalla relativa origine e quindi Elimina il registro.  
  
> [!NOTE]
>  In un registro eventi potrebbero scrivere più origini. Prima di eliminare un log personalizzato, assicurarsi che non sono presenti altre origini la scrittura in tale registro.  
  
 [!code-cpp[Classic EventLog.Delete1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.Delete1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.Delete1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.Delete1 Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.Delete1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.Delete1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="machineName" /> parameter is invalid.  \- or -  The <paramref name="source" /> parameter does not exist in the registry of the specified computer.  \- or -  You do not have write access on the registry key for the event log.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" /> cannot be deleted because in the registry, the parent registry key for <paramref name="source" /> does not contain a subkey with the same name.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per l'amministrazione informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.Delete(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="eventLog.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        <summary>Releases the unmanaged resources used by the <see cref="T:System.Diagnostics.EventLog" />, and optionally releases the managed resources.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene chiamato dal metodo pubblico `Dispose()` metodo e il <xref:System.Object.Finalize%2A> metodo. `Dispose()` richiama il metodo protetto `Dispose(Boolean)` metodo con il `disposing` parametro impostato su `true`. <xref:System.Object.Finalize%2A> richiama `Dispose` con `disposing` impostato su `false`.  
  
 Quando il `disposing` parametro è true, questo metodo rilascia tutte le risorse utilizzate dagli oggetti gestiti da questo <xref:System.Diagnostics.EventLog> riferimenti. Il metodo richiama il metodo `Dispose()` di ciascun oggetto cui viene fatto riferimento.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> può essere chiamato più volte da altri oggetti. Quando si esegue l'override <see langword="Dispose(Boolean)" /> prestare attenzione a non fare riferimento a oggetti già eliminati in una chiamata precedente a <see langword="Dispose" />. Per ulteriori informazioni su come implementare <see langword="Dispose(Boolean)" />, vedere [implementazione di un Method](~/docs/standard/garbage-collection/implementing-dispose.md) Dispose.  Per ulteriori informazioni <see langword="Dispose" /> e <see cref="M:System.Object.Finalize" />, vedere [pulizia backup Resources](~/docs/standard/garbage-collection/unmanaged.md) non gestito.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EnableRaisingEvents">
      <MemberSignature Language="C#" Value="public bool EnableRaisingEvents { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableRaisingEvents" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLog.EnableRaisingEvents" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableRaisingEvents As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableRaisingEvents { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableRaisingEvents : bool with get, set" Usage="System.Diagnostics.EventLog.EnableRaisingEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("If enabled raises event when a log is written.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the <see cref="T:System.Diagnostics.EventLog" /> receives <see cref="E:System.Diagnostics.EventLog.EntryWritten" /> event notifications.</summary>
        <value>
          <see langword="true" /> se l'oggetto <see cref="T:System.Diagnostics.EventLog" /> riceve notifica quando una voce viene inserita nel log; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Diagnostics.EventLog.EnableRaisingEvents%2A> proprietà determina se il <xref:System.Diagnostics.EventLog> genera eventi quando vengono scritte voci nel log. Quando la proprietà è `true`, componenti che ricevono il <xref:System.Diagnostics.EventLog.EntryWritten> evento ricevano una notifica ogni volta che viene scritta una voce nel log specificato nella <xref:System.Diagnostics.EventLog.Log%2A> proprietà. Se <xref:System.Diagnostics.EventLog.EnableRaisingEvents%2A> è `false`, non verranno generati eventi.  
  
> [!NOTE]
>  È possibile ricevere le notifiche degli eventi solo quando le voci vengono scritte nel computer locale. Non è possibile ricevere notifiche per voci scritte nei computer remoti.  
  
   
  
## Examples  
 L'esempio seguente viene gestito un <xref:System.Diagnostics.EventLog.EntryWritten> evento.  
  
 [!code-cpp[Classic EventLog.EnableRaisingEvents Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.EnableRaisingEvents Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.EnableRaisingEvents Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.EnableRaisingEvents Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.EnableRaisingEvents Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.EnableRaisingEvents Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The event log is on a remote computer.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="E:System.Diagnostics.EventLog.EntryWritten" />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="eventLog.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ends the initialization of an <see cref="T:System.Diagnostics.EventLog" /> used on a form or by another component. The initialization occurs at runtime.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] Progettazione ambiente utilizza questo metodo per terminare l'inizializzazione di un componente utilizzato in un form o da un altro componente. Il <xref:System.Diagnostics.EventLog.BeginInit%2A> metodo avvia l'inizializzazione. Utilizzando il <xref:System.Diagnostics.EventLog.BeginInit%2A> e <xref:System.Diagnostics.EventLog.EndInit%2A> metodi impedisce il controllo venga utilizzato prima che il completamento dell'inizializzazione.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="M:System.Diagnostics.EventLog.BeginInit" />
      </Docs>
    </Member>
    <Member MemberName="Entries">
      <MemberSignature Language="C#" Value="public System.Diagnostics.EventLogEntryCollection Entries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.EventLogEntryCollection Entries" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLog.Entries" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Entries As EventLogEntryCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::EventLogEntryCollection ^ Entries { System::Diagnostics::EventLogEntryCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Entries : System.Diagnostics.EventLogEntryCollection" Usage="System.Diagnostics.EventLog.Entries" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The entries in the log.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLogEntryCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the contents of the event log.</summary>
        <value>Oggetto <see cref="T:System.Diagnostics.EventLogEntryCollection" /> che contiene le voci del registro eventi. Ogni voce è associata a un'istanza della classe <see cref="T:System.Diagnostics.EventLogEntry" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Diagnostics.EventLog.Entries%2A> membro durante la lettura dal registro eventi.  
  
 Poiché la proprietà è di sola lettura, non è possibile modificare una voce o scrivere nel log utilizzando <xref:System.Diagnostics.EventLog.Entries%2A>. Specificare invece una <xref:System.Diagnostics.EventLog.Source%2A> e chiamare <xref:System.Diagnostics.EventLog.WriteEntry%2A> per scrivere una nuova voce di log. È possibile utilizzare <xref:System.Diagnostics.EventLog.Entries%2A> per contare il numero di voci nel registro eventi e visualizzare ogni <xref:System.Diagnostics.EventLogEntry> nella raccolta. Utilizzare indicizzata <xref:System.Diagnostics.EventLogEntryCollection.Item%2A> membro per recuperare informazioni su una voce specifica, ad esempio <xref:System.Diagnostics.EventLogEntry.Message%2A>, <xref:System.Diagnostics.EventLogEntry.Category%2A>, <xref:System.Diagnostics.EventLogEntry.TimeWritten%2A>, o <xref:System.Diagnostics.EventLogEntry.EntryType%2A>.  
  
 Non è necessario specificare un <xref:System.Diagnostics.EventLog.Source%2A> durante la lettura solo da un log. È possibile specificare solo il <xref:System.Diagnostics.EventLog.Log%2A> nome e <xref:System.Diagnostics.EventLog.MachineName%2A> delle proprietà (nome del computer server) per il <xref:System.Diagnostics.EventLog> istanza. In entrambi i casi il <xref:System.Diagnostics.EventLog.Entries%2A> membro viene popolato automaticamente con l'elenco delle voci del log eventi. È possibile selezionare l'indice appropriato per un elemento in questo elenco per leggere le singole voci.  
  
 Una differenza importante tra lettura e scrittura di voci di log è che non è necessario chiamare in modo esplicito un metodo di lettura. Dopo il <xref:System.Diagnostics.EventLog.Log%2A> e <xref:System.Diagnostics.EventLog.MachineName%2A> vengono specificate, il <xref:System.Diagnostics.EventLog.Entries%2A> proprietà viene popolata automaticamente. Se si modifica il valore di <xref:System.Diagnostics.EventLog.Log%2A> o <xref:System.Diagnostics.EventLog.MachineName%2A> proprietà, il <xref:System.Diagnostics.EventLog.Entries%2A> proprietà ricompilata alla successiva viene letta.  
  
> [!NOTE]
>  Non è necessario specificare il <xref:System.Diagnostics.EventLog.MachineName%2A> se ci si connette a un log. Se non si specifica il <xref:System.Diagnostics.EventLog.MachineName%2A>, il computer locale, ".", verrà utilizzato.  
  
   
  
## Examples  
 Nell'esempio seguente legge le voci nel registro eventi "MyNewLog", nel computer locale.  
  
 [!code-cpp[Classic EventLog.Entries Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.Entries Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.Entries Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.Entries Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.Entries Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.Entries Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Diagnostics.EventLogPermission">per l'amministrazione informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="T:System.Diagnostics.EventLogEntryCollection" />
        <altmember cref="T:System.Diagnostics.EventLogEntry" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEntry" />
      </Docs>
    </Member>
    <Member MemberName="EntryWritten">
      <MemberSignature Language="C#" Value="public event System.Diagnostics.EntryWrittenEventHandler EntryWritten;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Diagnostics.EntryWrittenEventHandler EntryWritten" />
      <MemberSignature Language="DocId" Value="E:System.Diagnostics.EventLog.EntryWritten" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event EntryWritten As EntryWrittenEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Diagnostics::EntryWrittenEventHandler ^ EntryWritten;" />
      <MemberSignature Language="F#" Value="member this.EntryWritten : System.Diagnostics.EntryWrittenEventHandler " Usage="member this.EntryWritten : System.Diagnostics.EntryWrittenEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Raised for each EventLog entry written.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EntryWrittenEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an entry is written to an event log on the local computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ottenere le notifiche degli eventi, è necessario impostare <xref:System.Diagnostics.EventLog.EnableRaisingEvents%2A> a `true`. È possibile ricevere le notifiche degli eventi solo quando le voci vengono scritte nel computer locale. Non è possibile ricevere notifiche per voci scritte nei computer remoti.  
  
 Quando si crea un delegato di <xref:System.Diagnostics.EventLog.EntryWritten>, si identifica il metodo con cui gestire l'evento. Per associare l'evento al gestore eventi in uso, aggiungere all'evento un'istanza del delegato. Il gestore eventi viene chiamato ogni volta che l'evento si verifica, fino a quando non venga rimosso il delegato. Per ulteriori informazioni sulla gestione degli eventi con i delegati, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
 Il sistema risponde a <xref:System.Diagnostics.EventLog.WriteEntry%2A> solo se l'ultimo evento di scrittura si è verificato almeno sei secondi. Ciò implica si riceverà solo uno <xref:System.Diagnostics.EventLog.EntryWritten> notifica degli eventi all'interno di un intervallo di sei secondi, anche se più di un evento di modifica log si verifica. Se si inserisce un intervallo di inattività sufficientemente lungo (circa 10 secondi) tra le chiamate a <xref:System.Diagnostics.EventLog.WriteEntry%2A>, hanno meno probabilità di perdita di un evento. Tuttavia, se gli eventi di scrittura si verificano con maggiore frequenza, si potrebbe non ricevere la notifica degli eventi fino all'intervallo successivo. In genere, le notifiche degli eventi mancanti non vengono persi, ma ritardati.  
  
   
  
## Examples  
 Nell'esempio seguente gestisce un'evento scritto della voce.  
  
 [!code-cpp[Classic EventLog.EntryWritten Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.EntryWritten Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.EntryWritten Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.EntryWritten Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.EntryWritten Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.EntryWritten Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Diagnostics.EventLogPermission">per l'amministrazione informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.EnableRaisingEvents" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Exists">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determines whether the specified log exists.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public static bool Exists (string logName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exists(string logName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.Exists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exists (logName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Exists(System::String ^ logName);" />
      <MemberSignature Language="F#" Value="static member Exists : string -&gt; bool" Usage="System.Diagnostics.EventLog.Exists logName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logName">The name of the log to search for. Possible values include: Application, Security, System, other application-specific logs (such as those associated with Active Directory), or any custom log on the computer.</param>
        <summary>Determines whether the log exists on the local computer.</summary>
        <returns>
          <see langword="true" /> if the log exists on the local computer; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per determinare se un log esiste nel computer locale. Se si desidera determinare la presenza di un'origine nel computer locale, utilizzare <xref:System.Diagnostics.EventLog.SourceExists%2A>.  
  
 Poiché questo metodo accede al Registro di sistema, è necessario disporre di autorizzazioni appropriate del Registro di sistema nel computer locale; in caso contrario, la query restituisce `false`.  
  
 Poiché è possibile assegnare a un nuovo log il nome di un log esistente nello stesso computer, utilizzare questo metodo prima di creare un nuovo log per determinare se l'oggetto specificato `logName` esiste già nel computer locale. Il `logName` parametro non viene fatta distinzione tra maiuscole e minuscole.  
  
 <xref:System.Diagnostics.EventLog.Exists%2A> è un `static` (metodo), pertanto può essere chiamato sulla classe stessa. Non è necessario creare un'istanza di <xref:System.Diagnostics.EventLog> chiamare <xref:System.Diagnostics.EventLog.Exists%2A>.  
  
   
  
## Examples  
 [!code-cpp[EventLog_Exists_1#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_Exists_1/CPP/eventlog_exists_1.cpp#1)]
 [!code-csharp[EventLog_Exists_1#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_Exists_1/CS/eventlog_exists_1.cs#1)]
 [!code-vb[EventLog_Exists_1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_Exists_1/VB/eventlog_exists_1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The logName is <see langword="null" /> or the value is empty.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per l'amministrazione informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.Delete(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public static bool Exists (string logName, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exists(string logName, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.Exists(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exists (logName As String, machineName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Exists(System::String ^ logName, System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member Exists : string * string -&gt; bool" Usage="System.Diagnostics.EventLog.Exists (logName, machineName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoNotSupported("remote machine is not supported")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logName" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logName">The log for which to search. Possible values include: Application, Security, System, other application-specific logs (such as those associated with Active Directory), or any custom log on the computer.</param>
        <param name="machineName">The name of the computer on which to search for the log, or "." for the local computer.</param>
        <summary>Determines whether the log exists on the specified computer.</summary>
        <returns>
          <see langword="true" /> if the log exists on the specified computer; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per determinare l'esistenza di un log in un computer remoto. Se si desidera determinare la presenza di un'origine in un computer remoto, utilizzare <xref:System.Diagnostics.EventLog.SourceExists%2A>.  
  
 Poiché questo metodo accede al Registro di sistema, è necessario disporre di autorizzazioni adeguate del computer specificato; in caso contrario, la query restituisce `false`.  
  
 Poiché è possibile assegnare a un nuovo log il nome di un log esistente nello stesso computer, utilizzare questo metodo prima di creare un nuovo log per determinare se uno con l'oggetto specificato `logName` esiste già nel server specificato dal `machineName` parametro. Il `logName` e `machineName` parametri non sono più distinzione maiuscole / minuscole.  
  
 <xref:System.Diagnostics.EventLog.Exists%2A> è un `static` (metodo), pertanto può essere chiamato sulla classe stessa. Non è necessario creare una nuova istanza della <xref:System.Diagnostics.EventLog> chiamare <xref:System.Diagnostics.EventLog.Exists%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="machineName" /> parameter is an invalid format. Make sure you have used proper syntax for the computer on which you are searching.  -or-  The <paramref name="logName" /> is <see langword="null" /> or the value is empty.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per l'amministrazione informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.Delete(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEventLogs">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Creates an array of the event logs.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEventLogs">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.EventLog[] GetEventLogs ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.EventLog[] GetEventLogs() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.GetEventLogs" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEventLogs () As EventLog()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Diagnostics::EventLog ^&gt; ^ GetEventLogs();" />
      <MemberSignature Language="F#" Value="static member GetEventLogs : unit -&gt; System.Diagnostics.EventLog[]" Usage="System.Diagnostics.EventLog.GetEventLogs " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLog[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Searches for all event logs on the local computer and creates an array of <see cref="T:System.Diagnostics.EventLog" /> objects that contain the list.</summary>
        <returns>An array of type <see cref="T:System.Diagnostics.EventLog" /> that represents the logs on the local computer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Matrice di <xref:System.Diagnostics.EventLog> oggetti è uno snapshot di tutti i registri eventi nel computer locale quando la chiamata a <xref:System.Diagnostics.EventLog.GetEventLogs%2A> viene eseguita. Ciò non è un insieme dinamico, pertanto non riflette l'eliminazione o la creazione di log in tempo reale. È necessario verificare che un registro nella matrice sia presente prima di leggere o scrivere a esso. La matrice include in genere almeno tre log: applicazione, sistema e sicurezza. Se si creano log personalizzato nel computer locale, verranno visualizzati anche della matrice.  
  
 Per recuperare l'elenco dei registri eventi, è necessario disporre di autorizzazioni adeguate. Queste autorizzazioni sono identiche a quelli necessari per chiamare <xref:System.Diagnostics.EventLog.Exists%2A> e <xref:System.Diagnostics.EventLog.SourceExists%2A>.  
  
   
  
## Examples  
 Nell'esempio seguente enumera il log di eventi definiti nel computer locale e vengono visualizzati i dettagli di configurazione per ogni log eventi.  
  
 [!code-cpp[EventLogProperties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogProperties/CPP/source.cpp#2)]
 [!code-csharp[EventLogProperties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogProperties/CS/source.cs#2)]
 [!code-vb[EventLogProperties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogProperties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">You do not have read access to the registry.  -or-  There is no event log service on the computer.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per l'amministrazione informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
      </Docs>
    </Member>
    <Member MemberName="GetEventLogs">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.EventLog[] GetEventLogs (string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.EventLog[] GetEventLogs(string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.GetEventLogs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEventLogs (machineName As String) As EventLog()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Diagnostics::EventLog ^&gt; ^ GetEventLogs(System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member GetEventLogs : string -&gt; System.Diagnostics.EventLog[]" Usage="System.Diagnostics.EventLog.GetEventLogs machineName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoNotSupported("remote machine is not supported")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLog[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="machineName">The computer on which to search for event logs.</param>
        <summary>Searches for all event logs on the given computer and creates an array of <see cref="T:System.Diagnostics.EventLog" /> objects that contain the list.</summary>
        <returns>An array of type <see cref="T:System.Diagnostics.EventLog" /> that represents the logs on the given computer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Matrice di <xref:System.Diagnostics.EventLog> oggetti è uno snapshot di tutti i registri eventi nel computer specificato per il `machineName` parametro quando la chiamata a <xref:System.Diagnostics.EventLog.GetEventLogs%2A> viene eseguita. Ciò non è un insieme dinamico, pertanto non riflette l'eliminazione o la creazione di log in tempo reale. È necessario verificare che un registro nella matrice sia presente prima di leggere o scrivere a esso. La matrice include in genere almeno tre log: applicazione, sistema e sicurezza. Se si creano log personalizzato nel computer specificato, verranno visualizzati anche della matrice.  
  
 <xref:System.Diagnostics.EventLog.GetEventLogs%2A> è un `static` metodo, pertanto può essere chiamato sul <xref:System.Diagnostics.EventLog> classe stessa. Non è necessario creare un'istanza di un <xref:System.Diagnostics.EventLog> oggetto di effettuare una chiamata al metodo.  
  
 Per recuperare l'elenco dei registri eventi, è necessario disporre di autorizzazioni adeguate. Queste autorizzazioni sono identiche a quelli necessari per chiamare <xref:System.Diagnostics.EventLog.Exists%2A> e <xref:System.Diagnostics.EventLog.SourceExists%2A>.  
  
   
  
## Examples  
 Nell'esempio seguente ottiene un elenco dei registri nel computer "myServer". Quindi, viene visualizzato il nome di ogni log.  
  
 [!code-cpp[Classic EventLog.GetEventLogs1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.GetEventLogs1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.GetEventLogs1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.GetEventLogs1 Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.GetEventLogs1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.GetEventLogs1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="machineName" /> parameter is an invalid computer name.</exception>
        <exception cref="T:System.InvalidOperationException">You do not have read access to the registry.  -or-  There is no event log service on the computer.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per l'amministrazione informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public string Log { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Log" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLog.Log" />
      <MemberSignature Language="VB.NET" Value="Public Property Log As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Log { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Log : string with get, set" Usage="System.Diagnostics.EventLog.Log" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.LogConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Name of the log that is read and written.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the log to read from or write to.</summary>
        <value>Nome del log. Può trattarsi di un nome di log personalizzato o dei log Applicazione, Sistema o Sicurezza. Il valore predefinito è una stringa vuota ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sono presenti tre file di log per impostazione predefinita nel server: applicazione, sistema e sicurezza. Applicazioni e servizi utilizzano file di log dell'applicazione. I driver di dispositivo utilizzano il file di registro di sistema. Il sistema genera gli eventi di controllo di esito positivo e negativo nel Registro di sicurezza quando il controllo è attivato. Se si dispone di altre applicazioni installate, come Active Directory in Windows Server, potrebbero essere presenti altri file di log predefinito. Inoltre, è possibile creare file di log personalizzati in un computer locale o remoto. I log personalizzati consentono di organizzare le voci selezionate in un modo più dettagliato rispetto a quanto è consentita quando i componenti di scrivere eventi nel registro dell'applicazione predefinito.  
  
> [!NOTE]
>  I nomi dei log sono limitati a otto caratteri. In base al sistema, MyLogSample1 e MyLogSample2 rappresentano lo stesso log.  
  
 Se si scrive in un registro eventi, non è sufficiente specificare il <xref:System.Diagnostics.EventLog.Log%2A> proprietà. È necessario associare un <xref:System.Diagnostics.EventLog.Source%2A> proprietà con la risorsa registro eventi per la connessione a un registro specifico. Non è necessario specificare un <xref:System.Diagnostics.EventLog.Source%2A> quando solo durante la lettura da un log, ma un'origine evento deve essere associata alla risorsa di log eventi nel Registro di sistema del server. È possibile specificare solo il <xref:System.Diagnostics.EventLog.Log%2A> name e <xref:System.Diagnostics.EventLog.MachineName%2A> (nome del computer server) per leggere da esso.  
  
> [!NOTE]
>  Non è necessario specificare il <xref:System.Diagnostics.EventLog.MachineName%2A> se ci si connette a un log. Se non si specifica il <xref:System.Diagnostics.EventLog.MachineName%2A>, il computer locale (".") verrà utilizzato.  
  
 Se il <xref:System.Diagnostics.EventLog.Source%2A> proprietà non è stata specificata, una chiamata a <xref:System.Diagnostics.EventLog.Log%2A> restituisce una stringa vuota se <xref:System.Diagnostics.EventLog.Log%2A> non è stato impostato in modo esplicito (impostando il <xref:System.Diagnostics.EventLog.Log%2A> proprietà, o tramite il costruttore). Se il <xref:System.Diagnostics.EventLog.Source%2A> è stata specificata, <xref:System.Diagnostics.EventLog.Log%2A> restituisce il nome del log in cui è stata registrata quell'origine.  
  
 Un'origine può essere registrata solo in un log alla volta. Se il <xref:System.Diagnostics.EventLog.Source%2A> proprietà è stata impostata per un'istanza di <xref:System.Diagnostics.EventLog>, non è possibile modificare il <xref:System.Diagnostics.EventLog.Log%2A> proprietà per tale <xref:System.Diagnostics.EventLog> senza modificare il valore di <xref:System.Diagnostics.EventLog.Source%2A> o chiamare <xref:System.Diagnostics.EventLog.DeleteEventSource%2A> prima. Se si modifica il <xref:System.Diagnostics.EventLog.Log%2A> proprietà dopo il <xref:System.Diagnostics.EventLog.Source%2A> proprietà è stata impostata, la scrittura di una voce di log genera un'eccezione.  
  
 Il sistema operativo archivia i registri eventi come file. Quando si usa <xref:System.Diagnostics.EventLogInstaller> o <xref:System.Diagnostics.EventLog.CreateEventSource%2A> per creare un nuovo registro eventi, il file associato viene archiviato nella directory %SystemRoot%\System32\Config nel computer specificato. Il nome del file è impostato aggiungendo i primi 8 caratteri di <xref:System.Diagnostics.EventLog.Log%2A> proprietà con l'estensione "evt".  
  
 Non è possibile creare un nuovo log utilizzando il <xref:System.Diagnostics.EventLog.Log%2A> proprietà autonomo (senza specificare un'origine per il log). È possibile chiamare <xref:System.Diagnostics.EventLog.CreateEventSource%2A>, passando un nuovo nome di log come parametro e quindi chiamare <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>. Tuttavia, lo scopo è in genere per creare (e scrivere voci in) nuovi log specifici dell'applicazione, o da cui leggere i log esistenti.  
  
 Se il <xref:System.Diagnostics.EventLog.Log%2A> valore viene modificato, il registro eventi viene chiuso e tutti gli handle di evento vengono rilasciati.  
  
> [!CAUTION]
>  Se si imposta la <xref:System.Diagnostics.EventLog.Log%2A> proprietà sul nome di un log che non esiste, il sistema associa il <xref:System.Diagnostics.EventLog> nel registro applicazioni, ma non avvisa l'utente che viene usato un log diverso da quello specificato.  
  
   
  
## Examples  
 Nell'esempio seguente legge le voci nel registro eventi "NewEventLog", nel computer locale.  
  
 [!code-cpp[Classic EventLog.Log Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.Log Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.Log Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.Log Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.Log Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.Log Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.Delete(System.String)" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="T:System.Diagnostics.EventLogEntryCollection" />
      </Docs>
    </Member>
    <Member MemberName="LogDisplayName">
      <MemberSignature Language="C#" Value="public string LogDisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LogDisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLog.LogDisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LogDisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LogDisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LogDisplayName : string" Usage="System.Diagnostics.EventLog.LogDisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the event log's friendly name.</summary>
        <value>Nome che rappresenta il registro eventi nel Visualizzatore eventi del sistema.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  In Windows Vista e versioni successive, gli utenti non dispone dell'autorizzazione per accedere al Registro di sicurezza. Se si sta eseguendo Windows Vista o in un secondo momento come un utente, si otterrà un <xref:System.Security.SecurityException> quando si tenta di accedere al nome visualizzato per un evento nel Registro di sicurezza.  
>   
>  In Windows Vista e versioni successive i privilegi di un utente sono determinati dalla funzionalità Controllo dell'account utente. Ai membri del gruppo Administrators predefinito vengono assegnati due token di accesso in fase di esecuzione, ovvero un token di accesso utente standard e un token di accesso amministratore. Per impostazione predefinita, viene assegnato il ruolo dell'utente standard. Per eseguire il codice che accede al Registro di sicurezza, è necessario elevare i privilegi da utente standard ad amministratore. È possibile farlo quando si avvia un'applicazione facendo clic con il pulsante destro del mouse sull'icona dell'applicazione e indicando l'opzione di esecuzione come amministratore.  
  
   
  
## Examples  
 Nell'esempio seguente enumera il log di eventi definiti nel computer locale e consente di visualizzare il <xref:System.Diagnostics.EventLog.LogDisplayName%2A> per ogni log eventi.  
  
 [!code-cpp[EventLogProperties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogProperties/CPP/source.cpp#2)]
 [!code-csharp[EventLogProperties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogProperties/CS/source.cs#2)]
 [!code-vb[EventLogProperties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogProperties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The specified <see cref="P:System.Diagnostics.EventLog.Log" /> does not exist in the registry for this computer.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per l'amministrazione informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Per poter leggere la chiave del Registro di sistema. Enumerazione associata: <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Read" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Per poter accedere al se chiave del Registro di sistema è una chiave remota. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="M:System.Diagnostics.EventLog.RegisterDisplayName(System.String,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="LogNameFromSourceName">
      <MemberSignature Language="C#" Value="public static string LogNameFromSourceName (string source, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string LogNameFromSourceName(string source, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.LogNameFromSourceName(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LogNameFromSourceName (source As String, machineName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LogNameFromSourceName(System::String ^ source, System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member LogNameFromSourceName : string * string -&gt; string" Usage="System.Diagnostics.EventLog.LogNameFromSourceName (source, machineName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoNotSupported("remote machine is not supported")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The name of the event source.</param>
        <param name="machineName">The name of the computer on which to look, or "." for the local computer.</param>
        <summary>Gets the name of the log to which the specified source is registered.</summary>
        <returns>The name of the log associated with the specified source in the registry.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'origine evento indica ciò che registra l'evento. È spesso il nome dell'applicazione o il nome del sottocomponente dell'applicazione, se l'applicazione è di grandi dimensioni. Servizi e applicazioni scrivono nel registro applicazioni o in un log personalizzato. I driver di dispositivo devono scrivere nel Registro di sistema.  
  
 Quando si crea una nuova origine, solo è possibile scrivere in un log alla volta, il sistema registra l'applicazione con il registro eventi come origine valida delle voci. Il <xref:System.Diagnostics.EventLog.Source%2A> proprietà può essere qualsiasi stringa, ma il nome non può essere utilizzato da altre origini nel computer. Un tentativo di creare un duplicato <xref:System.Diagnostics.EventLog.Source%2A> valore genera un'eccezione. Tuttavia, un singolo registro eventi può avere molte origini diverse scriverci dentro.  
  
   
  
## Examples  
 Nell'esempio seguente elimina un'origine dal computer locale. Nell'esempio determina il log dalla relativa origine e quindi Elimina il registro.  
  
> [!NOTE]
>  In un registro eventi potrebbero scrivere più origini. Prima di eliminare un log personalizzato, assicurarsi che non sono presenti altre origini la scrittura in tale registro.  
  
 [!code-cpp[Classic EventLog.DeleteEventSource Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.DeleteEventSource Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.DeleteEventSource Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.DeleteEventSource Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.DeleteEventSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.DeleteEventSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Diagnostics.EventLogPermission">per l'amministrazione informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLog.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string with get, set" Usage="System.Diagnostics.EventLog.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(".")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Name of the machine that this log get written to.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the computer on which to read or write events.</summary>
        <value>Nome del server in cui risiede il registro eventi. Il valore predefinito è il computer locale (".").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se si scrive in un registro eventi, è necessario associare un <xref:System.Diagnostics.EventLog.Source%2A> con l'oggetto registro eventi per la connessione a un registro specifico. Non è necessario specificare il <xref:System.Diagnostics.EventLog.Source%2A> proprietà durante la lettura solo da un log. È possibile specificare solo il <xref:System.Diagnostics.EventLog.Log%2A> name e <xref:System.Diagnostics.EventLog.MachineName%2A> (nome del computer server).  
  
> [!NOTE]
>  Non è necessario specificare il <xref:System.Diagnostics.EventLog.MachineName%2A> se ci si connette a un log. Se non si specifica il <xref:System.Diagnostics.EventLog.MachineName%2A>, il computer locale (".") verrà utilizzato.  
  
 Un'origine può essere registrata solo in un log alla volta. Se il <xref:System.Diagnostics.EventLog.Source%2A> proprietà è stata impostata per un'istanza di <xref:System.Diagnostics.EventLog>, non è possibile modificare il <xref:System.Diagnostics.EventLog.MachineName%2A> proprietà per tale <xref:System.Diagnostics.EventLog> senza modificare il valore di <xref:System.Diagnostics.EventLog.Source%2A> o chiamare <xref:System.Diagnostics.EventLog.DeleteEventSource%2A> prima. Se si modifica il <xref:System.Diagnostics.EventLog.MachineName%2A> proprietà, il <xref:System.Diagnostics.EventLog> chiude tutti gli handle e ldf per il log e l'origine nel nuovo computer.  
  
 Il <xref:System.Diagnostics.EventLog.MachineName%2A> valore non può essere una stringa vuota. Se non è esplicitamente impostato, il valore predefinito nel computer locale (".").  
  
   
  
## Examples  
 Nell'esempio seguente legge le voci nel registro eventi "NewEventLog", in un computer specifico.  
  
 [!code-cpp[Classic EventLog.MachineName Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.MachineName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.MachineName Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.MachineName Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.MachineName Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.MachineName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The computer name is invalid.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.Delete(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.GetEventLogs" />
      </Docs>
    </Member>
    <Member MemberName="MaximumKilobytes">
      <MemberSignature Language="C#" Value="public long MaximumKilobytes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumKilobytes" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLog.MaximumKilobytes" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumKilobytes As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumKilobytes { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumKilobytes : int64 with get, set" Usage="System.Diagnostics.EventLog.MaximumKilobytes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the maximum event log size in kilobytes.</summary>
        <value>Dimensione massima del registro eventi in KB. Il valore predefinito è 512, che indica una dimensione file massima di 512 KB.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Diagnostics.EventLog.MaximumKilobytes%2A> proprietà rappresenta il limite delle dimensioni del file di registro eventi. Quando il registro eventi raggiunge il limite delle dimensioni, l'applicazione configurato <xref:System.Diagnostics.EventLog.OverflowAction%2A> valore determina se le nuove voci vengono eliminate, o se le nuove voci sovrascrivono le voci meno recenti.  
  
> [!NOTE]
>  Questa proprietà rappresenta un'impostazione di configurazione per il log eventi rappresentato da questa istanza. Quando il registro eventi raggiunge la dimensione massima, questa proprietà specifica la modalità di gestione delle nuove voci scritte da tutte le origini di eventi registrate per il log eventi del sistema operativo.  
  
   
  
## Examples  
 Nell'esempio seguente enumera il log di eventi definiti nel computer locale e vengono visualizzati i dettagli di configurazione per ogni log eventi.  
  
 [!code-cpp[EventLogProperties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogProperties/CPP/source.cpp#2)]
 [!code-csharp[EventLogProperties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogProperties/CS/source.cs#2)]
 [!code-vb[EventLogProperties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogProperties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The specified value is less than 64, or greater than 4194240, or not an even multiple of 64.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Diagnostics.EventLog.Log" /> value is not a valid log name.  \- or -  The registry key for the event log could not be opened on the target computer.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per l'amministrazione informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.OverflowAction" />
        <altmember cref="M:System.Diagnostics.EventLog.ModifyOverflowPolicy(System.Diagnostics.OverflowAction,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="MinimumRetentionDays">
      <MemberSignature Language="C#" Value="public int MinimumRetentionDays { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinimumRetentionDays" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLog.MinimumRetentionDays" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MinimumRetentionDays As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinimumRetentionDays { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MinimumRetentionDays : int" Usage="System.Diagnostics.EventLog.MinimumRetentionDays" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of days to retain entries in the event log.</summary>
        <value>Numero di giorni per cui le voci vengono mantenute nel registro eventi. Il valore predefinito è 7.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Diagnostics.EventLog.MinimumRetentionDays%2A> proprietà per esaminare l'impostazione corrente per un registro eventi. Utilizzare <xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A> per modificare il numero minimo di giorni in cui ogni voce nel registro eventi deve essere mantenuta.  
  
 Il <xref:System.Diagnostics.EventLog.MinimumRetentionDays%2A> valore dipende dal comportamento di overflow configurato del registro eventi. Se il <xref:System.Diagnostics.OverflowAction> per un registro eventi è impostata su <xref:System.Diagnostics.OverflowAction.OverwriteAsNeeded>, quindi il <xref:System.Diagnostics.EventLog.MinimumRetentionDays%2A> valore è 0. Se il <xref:System.Diagnostics.OverflowAction> per un registro eventi è impostata su <xref:System.Diagnostics.OverflowAction.DoNotOverwrite>, quindi il <xref:System.Diagnostics.EventLog.MinimumRetentionDays%2A> valore è -1. Se il <xref:System.Diagnostics.OverflowAction> per un registro eventi è impostata su <xref:System.Diagnostics.OverflowAction.OverwriteOlder>, quindi il <xref:System.Diagnostics.EventLog.MinimumRetentionDays%2A> valore è maggiore di zero e rappresenta il numero di giorni per cui le voci del registro eventi quando il registro eventi è pieno.  
  
 Il comportamento di overflow si verifica solo quando un registro eventi raggiunge la dimensione massima. Quando un <xref:System.Diagnostics.EventLog> ha il relativo <xref:System.Diagnostics.EventLog.OverflowAction%2A> impostato su <xref:System.Diagnostics.OverflowAction.OverwriteOlder>e il registro eventi raggiunge la dimensione massima, quindi nuove voci vengono scritte solo se possono sostituire le voci la cui età supera il <xref:System.Diagnostics.EventLog.MinimumRetentionDays%2A> periodo. Mantenendo le voci di eventi per un periodo minimo è appropriato quando il registro eventi viene archiviato regolarmente. In caso contrario, si rischia di perdere le nuove voci quando il registro eventi raggiunge il limite. Per evitare la perdita di informazioni sul nuovo evento, impostare i giorni di memorizzazione minimo per gli eventi in base alla pianificazione dell'archiviazione per un determinato registro eventi.  
  
   
  
## Examples  
 Nell'esempio seguente enumera il log di eventi definiti nel computer locale e vengono visualizzati i dettagli di configurazione per ogni log eventi.  
  
 [!code-cpp[EventLogProperties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogProperties/CPP/source.cpp#2)]
 [!code-csharp[EventLogProperties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogProperties/CS/source.cs#2)]
 [!code-vb[EventLogProperties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogProperties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Diagnostics.EventLogPermission">per l'amministrazione informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.MaximumKilobytes" />
        <altmember cref="M:System.Diagnostics.EventLog.ModifyOverflowPolicy(System.Diagnostics.OverflowAction,System.Int32)" />
        <altmember cref="P:System.Diagnostics.EventLog.OverflowAction" />
      </Docs>
    </Member>
    <Member MemberName="ModifyOverflowPolicy">
      <MemberSignature Language="C#" Value="public void ModifyOverflowPolicy (System.Diagnostics.OverflowAction action, int retentionDays);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ModifyOverflowPolicy(valuetype System.Diagnostics.OverflowAction action, int32 retentionDays) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.ModifyOverflowPolicy(System.Diagnostics.OverflowAction,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ModifyOverflowPolicy (action As OverflowAction, retentionDays As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ModifyOverflowPolicy(System::Diagnostics::OverflowAction action, int retentionDays);" />
      <MemberSignature Language="F#" Value="member this.ModifyOverflowPolicy : System.Diagnostics.OverflowAction * int -&gt; unit" Usage="eventLog.ModifyOverflowPolicy (action, retentionDays)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Diagnostics.OverflowAction" />
        <Parameter Name="retentionDays" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="action">The overflow behavior for writing new entries to the event log.</param>
        <param name="retentionDays">The minimum number of days each event log entry is retained. This parameter is used only if <c>action</c> is set to <see cref="F:System.Diagnostics.OverflowAction.OverwriteOlder" />.</param>
        <summary>Changes the configured behavior for writing new entries when the event log reaches its maximum file size.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il comportamento di overflow per un registro eventi specifica che cosa avviene quando le nuove voci vengono scritti in un log che ha raggiunto le dimensioni massime del file.  
  
> [!NOTE]
>  Il comportamento di overflow viene usato solo quando un registro eventi raggiunge le dimensioni massime del file. Il comportamento di overflow non influenza la scrittura di una nuova voce in un log che può contenere voci registro eventi aggiuntivo.  
  
 Il <xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A> metodo consente di configurare il comportamento di overflow di un registro eventi. <xref:System.Diagnostics.EventLog> istanza. Dopo aver chiamato questo metodo per il registro eventi specificato dal <xref:System.Diagnostics.EventLog.Log%2A> proprietà, il <xref:System.Diagnostics.EventLog.OverflowAction%2A> e <xref:System.Diagnostics.EventLog.MinimumRetentionDays%2A> i valori delle proprietà riflettono il comportamento di overflow appena configurata.  
  
> [!NOTE]
>  Questa proprietà rappresenta un'impostazione di configurazione per il log eventi rappresentato da questa istanza. Quando il registro eventi raggiunge la dimensione massima, questa proprietà specifica la modalità di gestione delle nuove voci scritte da tutte le origini di eventi registrate per il log eventi del sistema operativo.  
  
 Impostare il `action` parametro a <xref:System.Diagnostics.OverflowAction.OverwriteAsNeeded> per indicare che una voce nuova sovrascrive quella meno recente quando il <xref:System.Diagnostics.EventLog> raggiunge le dimensioni massime. Se il `action` parametro è impostato su <xref:System.Diagnostics.OverflowAction.OverwriteAsNeeded>, il `retentionDays` valore del parametro viene ignorato.  
  
 Impostare il `action` parametro a <xref:System.Diagnostics.OverflowAction.OverwriteOlder> per indicare che ogni voce nuova sovrascrive le voci meno recenti quando il <xref:System.Diagnostics.EventLog> raggiunge le dimensioni massime. Specificare il numero di giorni per cui gli eventi devono essere mantenuti nel log utilizzando il `retentionDays` parametro. Gli eventi scritti entro il periodo di conservazione non vengono sovrascritte dalle nuove voci.  
  
 Impostare il `action` parametro <xref:System.Diagnostics.OverflowAction.DoNotOverwrite> per ignorare i nuovi eventi quando viene raggiunta la dimensione massima del registro. Se il `action` parametro è impostato su <xref:System.Diagnostics.OverflowAction.DoNotOverwrite>, il `retentionDays` valore del parametro viene ignorato.  
  
> [!CAUTION]
>  Impostazione dei criteri di overflow su <xref:System.Diagnostics.OverflowAction.DoNotOverwrite> specifica che le nuove voci vengono rimossi quando il registro eventi è pieno. Se si utilizza questa impostazione, verificare nel registro eventi viene regolarmente archiviato e chiuso per evitare di raggiungere il limite di dimensioni massime.  
  
   
  
## Examples  
 Nell'esempio seguente consente di visualizzare i criteri di overflow configurato per un registro eventi specificato e consente all'utente di selezionare una nuova impostazione di criteri di overflow per il log eventi.  
  
 [!code-cpp[EventLogProperties#3](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogProperties/CPP/source.cpp#3)]
 [!code-csharp[EventLogProperties#3](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogProperties/CS/source.cs#3)]
 [!code-vb[EventLogProperties#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogProperties/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="action" /> is not a valid <see cref="P:System.Diagnostics.EventLog.OverflowAction" /> value.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="retentionDays" /> is less than one, or larger than 365.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Diagnostics.EventLog.Log" /> value is not a valid log name.  \- or -  The registry key for the event log could not be opened on the target computer.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per l'amministrazione informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="T:System.Diagnostics.OverflowAction" />
        <altmember cref="P:System.Diagnostics.EventLog.MaximumKilobytes" />
        <altmember cref="P:System.Diagnostics.EventLog.OverflowAction" />
        <altmember cref="P:System.Diagnostics.EventLog.MinimumRetentionDays" />
      </Docs>
    </Member>
    <Member MemberName="OverflowAction">
      <MemberSignature Language="C#" Value="public System.Diagnostics.OverflowAction OverflowAction { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.OverflowAction OverflowAction" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLog.OverflowAction" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OverflowAction As OverflowAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::OverflowAction OverflowAction { System::Diagnostics::OverflowAction get(); };" />
      <MemberSignature Language="F#" Value="member this.OverflowAction : System.Diagnostics.OverflowAction" Usage="System.Diagnostics.EventLog.OverflowAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.OverflowAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the configured behavior for storing new entries when the event log reaches its maximum log file size.</summary>
        <value>Valore di <see cref="T:System.Diagnostics.OverflowAction" /> che specifica il comportamento configurato per l'archiviazione delle nuove voci quando il registro eventi raggiunge la dimensione massima. Il valore predefinito è <see cref="F:System.Diagnostics.OverflowAction.OverwriteOlder" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Registri eventi di aumento delle dimensioni man mano che vengono scritti nuovi eventi ad essi. Ogni log eventi ha un limite di dimensione massima configurata; il <xref:System.Diagnostics.EventLog.MaximumKilobytes%2A> proprietà definisce il numero massimo di KB consentiti per le dimensioni del file registro eventi.  
  
 Utilizzare il <xref:System.Diagnostics.EventLog.OverflowAction%2A> valore della proprietà per esaminare il comportamento di overflow configurato per un registro eventi la dimensione massima. Utilizzare il <xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A> metodo per modificare il comportamento di overflow per un registro eventi.  
  
> [!NOTE]
>  Il comportamento di overflow viene usato solo quando un registro eventi raggiunge le dimensioni massime del file. Il comportamento di overflow non influenza la scrittura di una nuova voce in un log che può contenere voci registro eventi aggiuntivo.  
  
   
  
## Examples  
 Nell'esempio seguente enumera il log di eventi definiti nel computer locale e vengono visualizzati i dettagli di configurazione per ogni log eventi.  
  
 [!code-cpp[EventLogProperties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogProperties/CPP/source.cpp#2)]
 [!code-csharp[EventLogProperties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogProperties/CS/source.cs#2)]
 [!code-vb[EventLogProperties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogProperties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Diagnostics.EventLogPermission">per l'amministrazione informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="T:System.Diagnostics.OverflowAction" />
        <altmember cref="P:System.Diagnostics.EventLog.MaximumKilobytes" />
        <altmember cref="M:System.Diagnostics.EventLog.ModifyOverflowPolicy(System.Diagnostics.OverflowAction,System.Int32)" />
        <altmember cref="P:System.Diagnostics.EventLog.MinimumRetentionDays" />
      </Docs>
    </Member>
    <Member MemberName="RegisterDisplayName">
      <MemberSignature Language="C#" Value="public void RegisterDisplayName (string resourceFile, long resourceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDisplayName(string resourceFile, int64 resourceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.RegisterDisplayName(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterDisplayName (resourceFile As String, resourceId As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterDisplayName(System::String ^ resourceFile, long resourceId);" />
      <MemberSignature Language="F#" Value="member this.RegisterDisplayName : string * int64 -&gt; unit" Usage="eventLog.RegisterDisplayName (resourceFile, resourceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceFile" Type="System.String" />
        <Parameter Name="resourceId" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="resourceFile">The fully specified path to a localized resource file.</param>
        <param name="resourceId">The resource identifier that indexes a localized string within the resource file.</param>
        <summary>Specifies the localized name of the event log, which is displayed in the server Event Viewer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare <xref:System.Diagnostics.EventLog.RegisterDisplayName%2A> per registrare e un nome localizzato visualizzato nel Visualizzatore eventi per registro eventi personalizzato.  
  
 Identificatore di risorsa specificato deve corrispondere a una stringa localizzata definita nel file di risorse. Il Visualizzatore eventi consente di visualizzare il nome registro eventi personalizzato utilizzando la stringa localizzata e le impostazioni cultura correnti. Ad esempio, è possibile definire più nomi di registro eventi localizzati nelle diverse impostazioni cultura nel file di risorse. Il Visualizzatore eventi consente di visualizzare la stringa localizzata corrispondente alle impostazioni cultura dell'utente corrente.  
  
 Se il Visualizzatore eventi non è possibile caricare la stringa localizzata dal file di risorse o se è stato registrato alcun nome visualizzato per il log eventi, il Visualizzatore eventi visualizza il nome registro eventi definito in <xref:System.Diagnostics.EventLog.Log%2A>.  
  
> [!NOTE]
>  Non è necessario registrare un nome visualizzato per i registri eventi predefiniti. Il sistema operativo registra i nomi visualizzati localizzata per i registri eventi dell'applicazione, sistema e sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente si determina se l'origine eventi denominata `SampleApplicationSource` è registrato nel computer locale. Se l'origine evento non esiste, l'esempio imposta il file di risorse di messaggio per l'origine e crea la nuova origine evento. Infine, l'esempio imposta il nome visualizzato localizzato per il registro eventi, usando il valore dell'identificatore di risorsa in `DisplayNameMsgId` e il percorso del file di risorse in `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 L'esempio Usa il seguente file di testo messaggio, compilato nella libreria di risorse EventLogMsgs. Un file di testo del messaggio è l'origine da cui viene creato il file di risorse di messaggio. Il file di testo del messaggio definisce il testo per la categoria, messaggio di evento e le stringhe di inserimento di parametro e identificatori di risorsa. In particolare, identificatore di risorsa 5001 è definito per il nome localizzato del registro eventi.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Diagnostics.EventLog.Log" /> value is not a valid log name.  \- or -  The registry key for the event log could not be opened on the target computer.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceFile" /> is <see langword="null" />.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per l'amministrazione informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.LogDisplayName" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLog.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Diagnostics.EventLog.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The application name that writes the log.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the source name to register and use when writing to the event log.</summary>
        <value>Nome registrato con il registro eventi come origine delle voci. Il valore predefinito è una stringa vuota ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'origine evento indica ciò che registra l'evento. È spesso il nome dell'applicazione o il nome del sottocomponente dell'applicazione, se l'applicazione è di grandi dimensioni. Servizi e applicazioni scrivono nel registro applicazioni o in un log personalizzato. I driver di dispositivo devono scrivere nel Registro di sistema.  
  
 Dovrai solo specificare un'origine evento, se si sta scrivendo su un registro eventi. Prima di scrivere una voce in un registro eventi, è necessario registrare l'origine evento con il registro eventi come origine valida degli eventi. Quando si scrive una voce di log, il sistema utilizza il <xref:System.Diagnostics.EventLog.Source%2A> proprietà per trovare il log appropriato in cui inserire la voce. Se si sta leggendo il registro eventi, è possibile specificare il <xref:System.Diagnostics.EventLog.Source%2A>, o un <xref:System.Diagnostics.EventLog.Log%2A> e <xref:System.Diagnostics.EventLog.MachineName%2A>.  
  
> [!NOTE]
>  Non è necessario specificare il <xref:System.Diagnostics.EventLog.MachineName%2A> se ci si connette a un log nel computer locale. Se non si specifica il <xref:System.Diagnostics.EventLog.MachineName%2A>, il computer locale (".") verrà utilizzato.  
  
 Uso <xref:System.Diagnostics.EventLog.WriteEvent%2A> e <xref:System.Diagnostics.EventLog.WriteEntry%2A> per scrivere eventi in un registro eventi. È necessario specificare un'origine evento per scrivere eventi; è necessario creare e configurare l'origine evento prima di scrivere la prima voce con l'origine.  
  
 Creare la nuova origine evento durante l'installazione dell'applicazione. Questo consente di tempo per il sistema operativo aggiornare l'elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l'elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l'operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodo. È necessario disporre dei diritti amministrativi sul computer per creare una nuova origine evento.  
  
 È possibile creare un'origine evento per un log eventi esistente o un nuovo registro eventi. Quando si crea una nuova origine per un nuovo registro eventi, il sistema registra l'origine di tale log, ma non viene creato il registro finché la prima voce viene scritto in essa.  
  
 L'origine deve essere univoco nel computer locale. un nuovo nome di origine non può corrispondere a un nome di origine esistente o un nome registro eventi esistente. Ogni origine può scrivere in un solo log eventi alla volta. Tuttavia, l'applicazione può utilizzare più origini per scrivere più registri eventi. Ad esempio, l'applicazione potrebbe richiedere più origini configurate per diversi log eventi o i file di risorse diverso.  
  
 Se si modifica il <xref:System.Diagnostics.EventLog.Source%2A> valore, il <xref:System.Diagnostics.EventLog> a cui è registrato verrà chiuso e tutti gli handle di evento vengono rilasciati.  
  
 L'origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Se l'applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un'origine con i file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci tramite identificatori di risorsa nel registro eventi. Creare un'origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo per scrivere stringhe direttamente il registro eventi utilizza tale origine.  
  
 Per modificare i dettagli di configurazione di un'origine esistente, è necessario eliminare l'origine e quindi crearlo nuovamente con la nuova configurazione. Se altre applicazioni o componenti usano l'origine esistente, creare una nuova origine con la configurazione aggiornata, piuttosto che l'eliminazione dell'origine esistente.  
  
> [!NOTE]
>  Se un'origine è già stata mappata a un log e si modifica un nuovo registro, è necessario riavviare il computer rendere effettive le modifiche.  
  
   
  
## Examples  
 L'esempio seguente viene creata l'origine `MySource` se non esiste già e viene scritta una voce nel registro eventi `MyNewLog`.  
  
 [!code-cpp[Classic EventLog.Source Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.Source Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.Source Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.Source Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.Source Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.Source Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The source name results in a registry key path longer than 254 characters.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SourceExists">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Searches a computer's registry for a given event source.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SourceExists">
      <MemberSignature Language="C#" Value="public static bool SourceExists (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SourceExists(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SourceExists (source As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SourceExists(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member SourceExists : string -&gt; bool" Usage="System.Diagnostics.EventLog.SourceExists source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The name of the event source.</param>
        <summary>Determines whether an event source is registered on the local computer.</summary>
        <returns>
          <see langword="true" /> if the event source is registered on the local computer; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per determinare la presenza di un'origine eventi nel computer locale. Se si desidera determinare la presenza di un log nel computer locale, utilizzare <xref:System.Diagnostics.EventLog.Exists%2A>.  
  
 Poiché questo metodo accede al Registro di sistema, è necessario disporre di autorizzazioni appropriate del Registro di sistema nel computer locale; in caso contrario, un <xref:System.Security.SecurityException> verrà generata.  
  
> [!NOTE]
>  Per cercare un'origine evento in Windows Vista e versioni successive o Windows Server 2003, è necessario disporre dei privilegi di amministratore.  
>   
>  Il motivo di questo requisito è che tutti i registri eventi, tra cui sicurezza, deve essere eseguita la ricerca per determinare se l'origine evento è univoco. A partire da Windows Vista, gli utenti non dispone dell'autorizzazione per accedere al Registro di sicurezza; Pertanto, un <xref:System.Security.SecurityException> viene generata un'eccezione.  
>   
>  A partire da Windows Vista, controllo dell'Account utente (UAC) determina i privilegi di un utente. Ai membri del gruppo Administrators predefinito vengono assegnati due token di accesso in fase di esecuzione, ovvero un token di accesso utente standard e un token di accesso amministratore. Per impostazione predefinita, viene assegnato il ruolo dell'utente standard. Per eseguire il codice che accede ai contatori delle prestazioni, è necessario elevare i privilegi da utente standard ad amministratore. È possibile farlo quando si avvia un'applicazione facendo clic con il pulsante destro del mouse sull'icona dell'applicazione e indicando l'opzione di esecuzione come amministratore.  
  
> [!NOTE]
>  Un servizio che viene eseguito sotto il <xref:System.ServiceProcess.ServiceAccount.LocalSystem> account non dispone dei privilegi necessari per l'esecuzione di questo metodo. La soluzione consiste nel verificare l'esistenza di origine dell'evento nel <xref:System.ServiceProcess.ServiceInstaller>, e se non esiste, per creare l'origine del programma di installazione.  
  
 Poiché è possibile assegnare a una nuova origine il nome di un'origine esistente nello stesso computer, utilizzare questo metodo prima di tentare di chiamare <xref:System.Diagnostics.EventLog.CreateEventSource%2A> per garantire che un'origine con il nome specificato da `source` non esiste già nel computer locale. Il `source` parametro non è più distinzione maiuscole/minuscole.  
  
   
  
## Examples  
 L'esempio seguente viene creata l'origine `MySource` se non esiste già e viene scritta una voce nel registro eventi `MyNewLog`.  
  
 [!code-cpp[Classic EventLog.Source Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.Source Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.Source Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.Source Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.Source Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.Source Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <paramref name="source" /> was not found, but some or all of the event logs could not be searched.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
      </Docs>
    </Member>
    <Member MemberName="SourceExists">
      <MemberSignature Language="C#" Value="public static bool SourceExists (string source, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SourceExists(string source, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.SourceExists(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SourceExists (source As String, machineName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SourceExists(System::String ^ source, System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member SourceExists : string * string -&gt; bool" Usage="System.Diagnostics.EventLog.SourceExists (source, machineName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoNotSupported("remote machine is not supported")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The name of the event source.</param>
        <param name="machineName">The name the computer on which to look, or "." for the local computer.</param>
        <summary>Determines whether an event source is registered on a specified computer.</summary>
        <returns>
          <see langword="true" /> if the event source is registered on the given computer; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per determinare la presenza di un'origine eventi nel computer specificato per il `machineName` parametro. Se si desidera determinare la presenza di un log nel computer specificato, utilizzare <xref:System.Diagnostics.EventLog.Exists%2A>.  
  
 Poiché questo metodo accede al Registro di sistema, è necessario disporre di autorizzazioni adeguate sul server specificato. in caso contrario, un <xref:System.Security.SecurityException> verrà generata.  
  
> [!NOTE]
>  Per cercare un'origine evento in Windows Vista e versioni successive o Windows Server 2003, è necessario disporre dei privilegi di amministratore.  
>   
>  Il motivo di questo requisito è che tutti i registri eventi, tra cui sicurezza, deve essere eseguita la ricerca per determinare se l'origine evento è univoco. A partire da Windows Vista, gli utenti non dispone dell'autorizzazione per accedere al Registro di sicurezza; Pertanto, un <xref:System.Security.SecurityException> viene generata un'eccezione.  
>   
>  A partire da Windows Vista, controllo dell'Account utente (UAC) determina i privilegi di un utente. Ai membri del gruppo Administrators predefinito vengono assegnati due token di accesso in fase di esecuzione, ovvero un token di accesso utente standard e un token di accesso amministratore. Per impostazione predefinita, viene assegnato il ruolo dell'utente standard. Per eseguire il codice che accede ai contatori delle prestazioni, è necessario elevare i privilegi da utente standard ad amministratore. È possibile farlo quando si avvia un'applicazione facendo clic con il pulsante destro del mouse sull'icona dell'applicazione e indicando l'opzione di esecuzione come amministratore.  
  
> [!NOTE]
>  Un servizio che viene eseguito sotto il <xref:System.ServiceProcess.ServiceAccount.LocalSystem> account non dispone dei privilegi necessari per l'esecuzione di questo metodo. La soluzione consiste nel verificare l'esistenza di origine dell'evento nel <xref:System.ServiceProcess.ServiceInstaller>, e se non esiste, per creare l'origine del programma di installazione.  
  
 Poiché è possibile assegnare a una nuova origine il nome di un'origine esistente nello stesso computer, utilizzare questo metodo prima di tentare di chiamare <xref:System.Diagnostics.EventLog.CreateEventSource%2A> per garantire che un'origine con il nome specificato da `source` non esiste già nel computer. Il `source` e `machineName` parametri non sono più distinzione maiuscole / minuscole.  
  
 <xref:System.Diagnostics.EventLog.SourceExists%2A> è un `static` (metodo), pertanto può essere chiamato sulla classe stessa. Non è necessario creare un'istanza di <xref:System.Diagnostics.EventLog> chiamare <xref:System.Diagnostics.EventLog.SourceExists%2A>.  
  
   
  
## Examples  
 L'esempio seguente viene creata l'origine `MySource` nel computer `MyServer`e viene scritta una voce nel registro eventi `MyNewLog`.  
  
 [!code-cpp[Classic EventLog.SourceExists1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.SourceExists1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.SourceExists1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.SourceExists1 Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.SourceExists1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.SourceExists1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="machineName" /> is an invalid computer name.</exception>
        <exception cref="T:System.Security.SecurityException">
          <paramref name="source" /> was not found, but some or all of the event logs could not be searched.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLog.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizingObject : System.ComponentModel.ISynchronizeInvoke with get, set" Usage="System.Diagnostics.EventLog.SynchronizingObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("An object that synchronizes event handler calls.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the object used to marshal the event handler calls issued as a result of an <see cref="T:System.Diagnostics.EventLog" /> entry written event.</summary>
        <value>Oggetto <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> usato per eseguire il marshalling delle chiamate del gestore eventi generate in seguito a un evento <see cref="E:System.Diagnostics.EventLog.EntryWritten" /> nel registro eventi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si <xref:System.Diagnostics.EventLog.SynchronizingObject%2A> viene `null`, metodi che gestiscono il <xref:System.Diagnostics.EventLog.EntryWritten> eventi vengono chiamati su un thread dal pool di thread di sistema. Per ulteriori informazioni sui pool di thread di sistema, vedere <xref:System.Threading.ThreadPool>.  
  
 Quando il <xref:System.Diagnostics.EventLog.EntryWritten> evento è gestito da un Windows Form visual componente, ad esempio un pulsante, l'accesso al componente tramite il pool di thread del sistema potrebbe non funzionare o potrebbe causare un'eccezione. Evitare questa situazione impostando <xref:System.Diagnostics.EventLog.SynchronizingObject%2A> a un componente di Windows Form, che fa sì che i metodi che gestiscono il <xref:System.Diagnostics.EventLog.EntryWritten> eventi da chiamare sullo stesso thread in cui è stato creato il componente.  
  
 Se il <xref:System.Diagnostics.EventLog> viene utilizzata all'interno [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] in una finestra di progettazione Windows Form <xref:System.Diagnostics.EventLog.SynchronizingObject%2A> viene impostata automaticamente sul controllo che contiene il <xref:System.Diagnostics.EventLog>. Ad esempio, se si inserisce un <xref:System.Diagnostics.EventLog> in una finestra di progettazione Form1 (che eredita dalla classe <xref:System.Windows.Forms.Form>) il <xref:System.Diagnostics.EventLog.SynchronizingObject%2A> proprietà di <xref:System.Diagnostics.EventLog> è impostato per l'istanza di Form1.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="E:System.Diagnostics.EventLog.EntryWritten" />
        <altmember cref="T:System.Threading.ThreadPool" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteEntry">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Writes an entry in the event log.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEntry(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEntry(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string -&gt; unit" Usage="eventLog.WriteEntry message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The string to write to the event log.</param>
        <summary>Writes an information type entry, with the given message text, to the event log.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per scrivere una voce di informazioni nel registro eventi associato a questo <xref:System.Diagnostics.EventLog> istanza. Se si desidera specificare qualsiasi altra <xref:System.Diagnostics.EventLogEntryType>, usare un overload diverso del <xref:System.Diagnostics.EventLog.WriteEntry%2A>.  
  
> [!NOTE]
>  Il `message` stringa non può contenere %*n*, dove *n* è un valore intero (ad esempio, %1), perché il Visualizzatore eventi lo considera come una stringa di inserimento. Poiché un protocollo Internet versione 6 (IPv6) indirizzo può contenere questa sequenza di caratteri, non è possibile accedere un messaggio di evento che contiene un indirizzo IPv6.  
  
 È necessario impostare il <xref:System.Diagnostics.EventLog.Source%2A> proprietà del <xref:System.Diagnostics.EventLog> componente prima di scrivere voci nel registro. È necessario creare e configurare l'origine evento prima di scrivere la prima voce con l'origine.  
  
 Creare la nuova origine evento durante l'installazione dell'applicazione. Questo consente di tempo per il sistema operativo aggiornare l'elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l'elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l'operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodo. È necessario disporre dei diritti amministrativi sul computer per creare una nuova origine evento.  
  
 Se l'origine specificata nel <xref:System.Diagnostics.EventLog.Source%2A> proprietà di questo <xref:System.Diagnostics.EventLog> istanza non è registrata nel computer in cui il componente sta scrivendo <xref:System.Diagnostics.EventLog.WriteEntry%2A> chiamate <xref:System.Diagnostics.EventLog.CreateEventSource%2A> e registra l'origine.  
  
> [!NOTE]
>  Se non si specifica un <xref:System.Diagnostics.EventLog.MachineName%2A> per il <xref:System.Diagnostics.EventLog> istanza prima di chiamare <xref:System.Diagnostics.EventLog.CreateEventSource%2A> o <xref:System.Diagnostics.EventLog.WriteEntry%2A>, il computer locale (".") equivale a.  
  
 Se il sistema deve registrare il <xref:System.Diagnostics.EventLog.Source%2A> tramite una chiamata a <xref:System.Diagnostics.EventLog.WriteEntry%2A> e il <xref:System.Diagnostics.EventLog.Log%2A> proprietà non è stata impostata sul <xref:System.Diagnostics.EventLog> per impostazione predefinita il log di istanza, nel registro applicazioni.  
  
> [!NOTE]
>  Molte eccezioni elencate in precedenza sono generate da errori generati durante il processo di registrazione di <xref:System.Diagnostics.EventLog.Source%2A>.  
  
 L'origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Il <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo scrive la stringa specificata direttamente nel registro eventi di; non utilizza un file di risorse localizzabili messaggio. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo scrivere gli eventi utilizzando un file di risorse messaggio localizzato.  
  
 Se l'applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un'origine con i file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci tramite identificatori di risorsa nel registro eventi. Creare un'origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo per scrivere stringhe direttamente il registro eventi utilizza tale origine.  
  
> [!NOTE]
>  Se si scrive una voce in un computer remoto, il valore del messaggio (la stringa di testo) potrebbe non essere quelli previsti se il computer remoto non è in esecuzione in .NET Framework.  
  
> [!NOTE]
>  Se il `message` parametro contiene un carattere null, il messaggio nel registro eventi viene terminato con il carattere NUL.  
  
   
  
## Examples  
 L'esempio seguente viene creata l'origine `MySource` se non esiste già e viene scritta una voce nel registro eventi `MyNewLog`.  
  
 [!code-cpp[Classic EventLog.CreateEventSource Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.CreateEventSource Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.CreateEventSource Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.CreateEventSource Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.CreateEventSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.CreateEventSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.Diagnostics.EventLog.Source" /> property of the <see cref="T:System.Diagnostics.EventLog" /> has not been set.  -or-  The method attempted to register a new event source, but the computer name in <see cref="P:System.Diagnostics.EventLog.MachineName" /> is not valid.  \- or -  The source is already registered for a different event log.  \- or -  The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \- or -  The source name results in a registry key path longer than 254 characters.</exception>
        <exception cref="T:System.InvalidOperationException">The registry key for the event log could not be opened.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">The operating system reported an error when writing the event entry to the event log. A Windows error code is not available.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.EventLogEntryType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEntry(string message, valuetype System.Diagnostics.EventLogEntryType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, type As EventLogEntryType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::EventLogEntryType type);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * System.Diagnostics.EventLogEntryType -&gt; unit" Usage="eventLog.WriteEntry (message, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="type" Type="System.Diagnostics.EventLogEntryType" />
      </Parameters>
      <Docs>
        <param name="message">The string to write to the event log.</param>
        <param name="type">One of the <see cref="T:System.Diagnostics.EventLogEntryType" /> values.</param>
        <summary>Writes an error, warning, information, success audit, or failure audit entry with the given message text to the event log.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per scrivere una voce di un oggetto specificato <xref:System.Diagnostics.EventLogEntryType> nel registro eventi. Il `type` è indicato da un'icona e del testo nella colonna di tipo nel Visualizzatore eventi per un log.  
  
> [!NOTE]
>  Il `message` stringa non può contenere %*n*, dove *n* è un valore intero (ad esempio, %1), perché il Visualizzatore eventi lo considera come una stringa di inserimento. Poiché un protocollo Internet versione 6 (IPv6) indirizzo può contenere questa sequenza di caratteri, non è possibile accedere un messaggio di evento che contiene un indirizzo IPv6.  
  
 È necessario impostare il <xref:System.Diagnostics.EventLog.Source%2A> proprietà del <xref:System.Diagnostics.EventLog> componente prima di scrivere voci nel registro. È necessario creare e configurare l'origine evento prima di scrivere la prima voce con l'origine.  
  
 Creare la nuova origine evento durante l'installazione dell'applicazione. Questo consente di tempo per il sistema operativo aggiornare l'elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l'elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l'operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodo. È necessario disporre dei diritti amministrativi sul computer per creare una nuova origine evento.  
  
 Se l'origine specificata nel <xref:System.Diagnostics.EventLog.Source%2A> proprietà di questo <xref:System.Diagnostics.EventLog> istanza non è registrata nel computer in cui il componente sta scrivendo <xref:System.Diagnostics.EventLog.WriteEntry%2A> chiamate <xref:System.Diagnostics.EventLog.CreateEventSource%2A> e registra l'origine.  
  
> [!NOTE]
>  Se non si specifica un <xref:System.Diagnostics.EventLog.MachineName%2A> per il <xref:System.Diagnostics.EventLog> istanza prima di chiamare <xref:System.Diagnostics.EventLog.CreateEventSource%2A> o <xref:System.Diagnostics.EventLog.WriteEntry%2A>, il computer locale (".") equivale a.  
  
 Se il sistema deve registrare il <xref:System.Diagnostics.EventLog.Source%2A> tramite una chiamata a <xref:System.Diagnostics.EventLog.WriteEntry%2A> e il <xref:System.Diagnostics.EventLog.Log%2A> proprietà non è stata impostata sul <xref:System.Diagnostics.EventLog> per impostazione predefinita il log di istanza, nel registro applicazioni.  
  
> [!NOTE]
>  Molte eccezioni elencate in precedenza sono generate da errori generati durante il processo di registrazione di <xref:System.Diagnostics.EventLog.Source%2A>.  
  
 L'origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Il <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo scrive la stringa specificata direttamente nel registro eventi di; non utilizza un file di risorse localizzabili messaggio. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo scrivere gli eventi utilizzando un file di risorse messaggio localizzato.  
  
 Se l'applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un'origine con i file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci tramite identificatori di risorsa nel registro eventi. Creare un'origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo per scrivere stringhe direttamente il registro eventi utilizza tale origine.  
  
> [!NOTE]
>  Se si scrive una voce in un computer remoto, il valore del messaggio (la stringa di testo) potrebbe non essere quelli previsti se il computer remoto non è in esecuzione in .NET Framework.  
  
> [!NOTE]
>  Se il `message` parametro contiene un carattere null, il messaggio nel registro eventi viene terminato con il carattere NUL.  
  
   
  
## Examples  
 Nell'esempio seguente scrive una voce di avviso in un registro eventi, "MyNewLog", nel computer locale.  
  
 [!code-cpp[Classic EventLog.WriteEntry2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.WriteEntry2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.WriteEntry2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.WriteEntry2 Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.WriteEntry2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.WriteEntry2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.Diagnostics.EventLog.Source" /> property of the <see cref="T:System.Diagnostics.EventLog" /> has not been set.  -or-  The method attempted to register a new event source, but the computer name in <see cref="P:System.Diagnostics.EventLog.MachineName" /> is not valid.  \- or -  The source is already registered for a different event log.  \- or -  The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \- or -  The source name results in a registry key path longer than 254 characters.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="type" /> is not a valid <see cref="T:System.Diagnostics.EventLogEntryType" />.</exception>
        <exception cref="T:System.InvalidOperationException">The registry key for the event log could not be opened.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">The operating system reported an error when writing the event entry to the event log. A Windows error code is not available.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public static void WriteEntry (string source, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteEntry(string source, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteEntry (source As String, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteEntry(System::String ^ source, System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member WriteEntry : string * string -&gt; unit" Usage="System.Diagnostics.EventLog.WriteEntry (source, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The source by which the application is registered on the specified computer.</param>
        <param name="message">The string to write to the event log.</param>
        <summary>Writes an information type entry with the given message text to the event log, using the specified registered event source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per scrivere una voce di informazioni nel registro eventi, utilizzare un'origine che è già registrata come un'origine evento per il log appropriato. Se si desidera specificare qualsiasi altra <xref:System.Diagnostics.EventLogEntryType>, usare un overload diverso del <xref:System.Diagnostics.EventLog.WriteEntry%2A>.  
  
 È necessario creare e configurare l'origine evento prima di scrivere la prima voce con l'origine. Creare la nuova origine evento durante l'installazione dell'applicazione. Questo consente di tempo per il sistema operativo aggiornare l'elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l'elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l'operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodo. È necessario disporre dei diritti amministrativi sul computer per creare una nuova origine evento.  
  
 L'origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Il <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo scrive la stringa specificata direttamente nel registro eventi di; non utilizza un file di risorse localizzabili messaggio. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo scrivere gli eventi utilizzando un file di risorse messaggio localizzato.  
  
 Se l'applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un'origine con i file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci tramite identificatori di risorsa nel registro eventi. Creare un'origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo per scrivere stringhe direttamente il registro eventi utilizza tale origine.  
  
> [!NOTE]
>  Se il `message` parametro contiene un carattere null, il messaggio nel registro eventi viene terminato con il carattere NUL.  
>   
>  Il `message` stringa non può contenere %*n*, dove *n* è un valore intero (ad esempio, %1), perché il Visualizzatore eventi lo considera come una stringa di inserimento. Poiché un protocollo Internet versione 6 (IPv6) indirizzo può contenere questa sequenza di caratteri, non è possibile accedere un messaggio di evento che contiene un indirizzo IPv6.  
  
   
  
## Examples  
 L'esempio seguente viene creata l'origine `MySource` se non esiste già e viene scritta una voce nel registro eventi `MyNewLog`.  
  
 [!code-cpp[Classic EventLog.WriteEntry1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.WriteEntry1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.WriteEntry1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.WriteEntry1 Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.WriteEntry1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.WriteEntry1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="source" /> value is an empty string ("").  \- or -  The <paramref name="source" /> value is <see langword="null" />.  \- or -  The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \- or -  The source name results in a registry key path longer than 254 characters.</exception>
        <exception cref="T:System.InvalidOperationException">The registry key for the event log could not be opened.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">The operating system reported an error when writing the event entry to the event log. A Windows error code is not available.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.EventLogEntryType type, int eventID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEntry(string message, valuetype System.Diagnostics.EventLogEntryType type, int32 eventID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, type As EventLogEntryType, eventID As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::EventLogEntryType type, int eventID);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * System.Diagnostics.EventLogEntryType * int -&gt; unit" Usage="eventLog.WriteEntry (message, type, eventID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="type" Type="System.Diagnostics.EventLogEntryType" />
        <Parameter Name="eventID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">The string to write to the event log.</param>
        <param name="type">One of the <see cref="T:System.Diagnostics.EventLogEntryType" /> values.</param>
        <param name="eventID">The application-specific identifier for the event.</param>
        <summary>Writes an entry with the given message text and application-defined event identifier to the event log.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per scrivere una voce con un parametro definito dall'applicazione `eventID` nel registro eventi. Il `eventID` con l'origine identificare in modo univoco un evento. Ogni applicazione può definire numerati eventi interni e le stringhe di descrizione alle quali vengono mappati. Nei visualizzatori eventi vengono visualizzati questi valori stringa per consentire all'utente di capire il problema e suggerire le azioni da intraprendere.  
  
> [!NOTE]
>  Il `message` stringa non può contenere %*n*, dove *n* è un valore intero (ad esempio, %1), perché il Visualizzatore eventi lo considera come una stringa di inserimento. Poiché un protocollo Internet versione 6 (IPv6) indirizzo può contenere questa sequenza di caratteri, non è possibile accedere un messaggio di evento che contiene un indirizzo IPv6.  
  
 Oltre all'identificatore dell'evento, è possibile specificare un <xref:System.Diagnostics.EventLogEntryType> per l'evento da scrivere nel registro eventi. Il `type` è indicato da un'icona e del testo nella colonna di tipo nel Visualizzatore eventi per un log. Questo parametro indica se il tipo di evento è errore, avviso, informazioni, controlli riusciti o controllo con esito negativo.  
  
 È necessario impostare il <xref:System.Diagnostics.EventLog.Source%2A> proprietà del <xref:System.Diagnostics.EventLog> componente prima di scrivere voci nel registro. È necessario creare e configurare l'origine evento prima di scrivere la prima voce con l'origine.  
  
 Creare la nuova origine evento durante l'installazione dell'applicazione. Questo consente di tempo per il sistema operativo aggiornare l'elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l'elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l'operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodo. È necessario disporre dei diritti amministrativi sul computer per creare una nuova origine evento.  
  
 Se l'origine specificata nel <xref:System.Diagnostics.EventLog.Source%2A> proprietà di questo <xref:System.Diagnostics.EventLog> istanza non è registrata nel computer in cui il componente sta scrivendo <xref:System.Diagnostics.EventLog.WriteEntry%2A> chiamate <xref:System.Diagnostics.EventLog.CreateEventSource%2A> e registra l'origine.  
  
> [!NOTE]
>  Se non si specifica un <xref:System.Diagnostics.EventLog.MachineName%2A> per il <xref:System.Diagnostics.EventLog> istanza prima di chiamare <xref:System.Diagnostics.EventLog.CreateEventSource%2A> o <xref:System.Diagnostics.EventLog.WriteEntry%2A>, il computer locale (".") equivale a.  
  
 Se il sistema deve registrare il <xref:System.Diagnostics.EventLog.Source%2A> tramite una chiamata a <xref:System.Diagnostics.EventLog.WriteEntry%2A> e il <xref:System.Diagnostics.EventLog.Log%2A> proprietà non è stata impostata sul <xref:System.Diagnostics.EventLog> per impostazione predefinita il log di istanza, nel registro applicazioni.  
  
> [!NOTE]
>  Molte eccezioni elencate in precedenza sono generate da errori generati durante il processo di registrazione di <xref:System.Diagnostics.EventLog.Source%2A>.  
  
 L'origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Il <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo scrive la stringa specificata direttamente nel registro eventi di; non utilizza un file di risorse localizzabili messaggio. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo scrivere gli eventi utilizzando un file di risorse messaggio localizzato.  
  
 Se l'applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un'origine con i file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci tramite identificatori di risorsa nel registro eventi. Creare un'origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo per scrivere stringhe direttamente il registro eventi utilizza tale origine.  
  
> [!NOTE]
>  Se si scrive una voce in un computer remoto, il valore del messaggio (la stringa di testo) potrebbe non essere quelli previsti se il computer remoto non è in esecuzione in .NET Framework.  
  
> [!NOTE]
>  Se il `message` parametro contiene un carattere null, il messaggio nel registro eventi viene terminato con il carattere NUL.  
  
   
  
## Examples  
 [!code-cpp[EventLog_WriteEntry_1_3#3](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_WriteEntry_1_3/CPP/eventlog_writeentry_1_3.cpp#3)]
 [!code-csharp[EventLog_WriteEntry_1_3#3](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_WriteEntry_1_3/CS/eventlog_writeentry_1_3.cs#3)]
 [!code-vb[EventLog_WriteEntry_1_3#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_WriteEntry_1_3/VB/eventlog_writeentry_1_3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.Diagnostics.EventLog.Source" /> property of the <see cref="T:System.Diagnostics.EventLog" /> has not been set.  -or-  The method attempted to register a new event source, but the computer name in <see cref="P:System.Diagnostics.EventLog.MachineName" /> is not valid.  \- or -  The source is already registered for a different event log.  \- or -  <paramref name="eventID" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />.  \- or -  The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \- or -  The source name results in a registry key path longer than 254 characters.</exception>
        <exception cref="T:System.InvalidOperationException">The registry key for the event log could not be opened.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="type" /> is not a valid <see cref="T:System.Diagnostics.EventLogEntryType" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">The operating system reported an error when writing the event entry to the event log. A Windows error code is not available.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public static void WriteEntry (string source, string message, System.Diagnostics.EventLogEntryType type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteEntry(string source, string message, valuetype System.Diagnostics.EventLogEntryType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteEntry (source As String, message As String, type As EventLogEntryType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteEntry(System::String ^ source, System::String ^ message, System::Diagnostics::EventLogEntryType type);" />
      <MemberSignature Language="F#" Value="static member WriteEntry : string * string * System.Diagnostics.EventLogEntryType -&gt; unit" Usage="System.Diagnostics.EventLog.WriteEntry (source, message, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="type" Type="System.Diagnostics.EventLogEntryType" />
      </Parameters>
      <Docs>
        <param name="source">The source by which the application is registered on the specified computer.</param>
        <param name="message">The string to write to the event log.</param>
        <param name="type">One of the <see cref="T:System.Diagnostics.EventLogEntryType" /> values.</param>
        <summary>Writes an error, warning, information, success audit, or failure audit entry with the given message text to the event log, using the specified registered event source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per scrivere una voce di un oggetto specificato <xref:System.Diagnostics.EventLogEntryType> nel registro eventi, utilizzando un'origine già registrata come un'origine evento per il log appropriato. Il `type` è indicato da un'icona e del testo nella colonna di tipo nel Visualizzatore eventi per un log.  
  
> [!NOTE]
>  Il `message` stringa non può contenere %*n*, dove *n* è un valore intero (ad esempio, %1), perché il Visualizzatore eventi lo considera come una stringa di inserimento. Poiché un protocollo Internet versione 6 (IPv6) indirizzo può contenere questa sequenza di caratteri, non è possibile accedere un messaggio di evento che contiene un indirizzo IPv6.  
  
 È necessario creare e configurare l'origine evento prima di scrivere la prima voce con l'origine. Creare la nuova origine evento durante l'installazione dell'applicazione. Questo consente di tempo per il sistema operativo aggiornare l'elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l'elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l'operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodo. È necessario disporre dei diritti amministrativi sul computer per creare una nuova origine evento.  
  
 L'origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Il <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo scrive la stringa specificata direttamente nel registro eventi di; non utilizza un file di risorse localizzabili messaggio. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo scrivere gli eventi utilizzando un file di risorse messaggio localizzato.  
  
 Se l'applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un'origine con i file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci tramite identificatori di risorsa nel registro eventi. Creare un'origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo per scrivere stringhe direttamente il registro eventi utilizza tale origine.  
  
> [!NOTE]
>  Se il `message` parametro contiene un carattere null, il messaggio nel registro eventi viene terminato con il carattere NUL.  
  
   
  
## Examples  
 Nell'esempio seguente scrive una voce di avviso in un registro eventi, "MyNewLog", nel computer locale.  
  
 [!code-cpp[Classic EventLog.WriteEntry3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.WriteEntry3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.WriteEntry3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.WriteEntry3 Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.WriteEntry3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.WriteEntry3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="source" /> value is an empty string ("").  \- or -  The <paramref name="source" /> value is <see langword="null" />.  \- or -  The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \- or -  The source name results in a registry key path longer than 254 characters.</exception>
        <exception cref="T:System.InvalidOperationException">The registry key for the event log could not be opened.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="type" /> is not a valid <see cref="T:System.Diagnostics.EventLogEntryType" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">The operating system reported an error when writing the event entry to the event log. A Windows error code is not available.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.EventLogEntryType type, int eventID, short category);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEntry(string message, valuetype System.Diagnostics.EventLogEntryType type, int32 eventID, int16 category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, type As EventLogEntryType, eventID As Integer, category As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::EventLogEntryType type, int eventID, short category);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * System.Diagnostics.EventLogEntryType * int * int16 -&gt; unit" Usage="eventLog.WriteEntry (message, type, eventID, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="type" Type="System.Diagnostics.EventLogEntryType" />
        <Parameter Name="eventID" Type="System.Int32" />
        <Parameter Name="category" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="message">The string to write to the event log.</param>
        <param name="type">One of the <see cref="T:System.Diagnostics.EventLogEntryType" /> values.</param>
        <param name="eventID">The application-specific identifier for the event.</param>
        <param name="category">The application-specific subcategory associated with the message.</param>
        <summary>Writes an entry with the given message text, application-defined event identifier, and application-defined category to the event log.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per scrivere una voce con un parametro definito dall'applicazione `category` nel registro eventi. Il Visualizzatore eventi utilizza la categoria per filtrare gli eventi scritti da un'origine evento. Il Visualizzatore eventi consente di visualizzare la categoria come valore numerico oppure è possibile utilizzare la categoria come identificatore di risorsa per visualizzare una stringa di categoria localizzata.  
  
> [!NOTE]
>  Il `category` parametro deve essere un valore positivo. I valori di categoria negativi vengono visualizzati come un numero positivo complementare nell'evento visualizzatore. Ad esempio – 10 viene visualizzato come 65,526, – 1 come 65.535.  
  
> [!NOTE]
>  Il `message` stringa non può contenere %*n*, dove *n* è un valore intero (ad esempio, %1), perché il Visualizzatore eventi lo considera come una stringa di inserimento. Poiché un protocollo Internet versione 6 (IPv6) indirizzo può contenere questa sequenza di caratteri, non è possibile accedere un messaggio di evento che contiene un indirizzo IPv6.  
  
 Per visualizzare le stringhe di categoria localizzata nel Visualizzatore eventi, è necessario utilizzare un'origine evento configurato con un file di risorse di categoria e impostare il `category` in un identificatore di risorsa nel file di risorse di categoria. Se l'origine evento non dispone di un file di risorse di categoria configurato o quelle specificate `category` indicizza una stringa nel file di risorse di categoria, nel Visualizzatore eventi viene visualizzato il valore numerico di categoria per tale voce. Configurare il file di risorse di categoria, oltre al numero di stringhe di categoria nel file di risorse, utilizzando il <xref:System.Diagnostics.EventLogInstaller> o <xref:System.Diagnostics.EventSourceCreationData> classe.  
  
 Oltre a categoria, è possibile specificare un identificatore di evento per l'evento da scrivere nel registro eventi. Identificatori di eventi, insieme all'origine evento, identificano in modo univoco un evento. Ogni applicazione può definire numerati eventi interni e le stringhe di descrizione alle quali vengono mappati. Nei visualizzatori eventi vengono visualizzati questi valori stringa per consentire all'utente di capire il problema e suggerire le azioni da intraprendere.  
  
 Infine, è possibile specificare un <xref:System.Diagnostics.EventLogEntryType> per l'evento da scrivere nel registro eventi. Il `type` è indicato da un'icona e del testo nella colonna di tipo nel Visualizzatore eventi per un log. Questo parametro indica se il tipo di evento è errore, avviso, informazioni, controlli riusciti o controllo con esito negativo.  
  
 È necessario impostare il <xref:System.Diagnostics.EventLog.Source%2A> proprietà del <xref:System.Diagnostics.EventLog> componente prima di scrivere voci nel registro. È necessario creare e configurare l'origine evento prima di scrivere la prima voce con l'origine.  
  
 Creare la nuova origine evento durante l'installazione dell'applicazione. Questo consente di tempo per il sistema operativo aggiornare l'elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l'elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l'operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodo. È necessario disporre dei diritti amministrativi sul computer per creare una nuova origine evento.  
  
 Se l'origine specificata nel <xref:System.Diagnostics.EventLog.Source%2A> proprietà di questo <xref:System.Diagnostics.EventLog> istanza non è registrata nel computer in cui il componente sta scrivendo <xref:System.Diagnostics.EventLog.WriteEntry%2A> chiamate <xref:System.Diagnostics.EventLog.CreateEventSource%2A> e registra l'origine.  
  
> [!NOTE]
>  Se non si specifica un <xref:System.Diagnostics.EventLog.MachineName%2A> per il <xref:System.Diagnostics.EventLog> istanza prima di chiamare <xref:System.Diagnostics.EventLog.CreateEventSource%2A> o <xref:System.Diagnostics.EventLog.WriteEntry%2A>, il computer locale (".") equivale a.  
  
 Se il sistema deve registrare il <xref:System.Diagnostics.EventLog.Source%2A> tramite una chiamata a <xref:System.Diagnostics.EventLog.WriteEntry%2A> e il <xref:System.Diagnostics.EventLog.Log%2A> proprietà non è stata impostata sul <xref:System.Diagnostics.EventLog> per impostazione predefinita il log di istanza, nel registro applicazioni.  
  
> [!NOTE]
>  Molte eccezioni elencate in precedenza sono generate da errori generati durante il processo di registrazione di <xref:System.Diagnostics.EventLog.Source%2A>.  
  
 L'origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Il <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo scrive la stringa specificata direttamente nel registro eventi di; non utilizza un file di risorse localizzabili messaggio. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo scrivere gli eventi utilizzando un file di risorse messaggio localizzato.  
  
 Se l'applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un'origine con i file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci tramite identificatori di risorsa nel registro eventi. Creare un'origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo per scrivere stringhe direttamente il registro eventi utilizza tale origine.  
  
> [!NOTE]
>  Se si scrive una voce in un computer remoto, il valore del messaggio (la stringa di testo) potrebbe non essere quelli previsti se il computer remoto non è in esecuzione in .NET Framework.  
  
> [!NOTE]
>  Se il `message` parametro contiene un carattere null, il messaggio nel registro eventi viene terminato con il carattere NUL.  
  
   
  
## Examples  
 [!code-cpp[EventLog_WriteEntry_1_3#3](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_WriteEntry_1_3/CPP/eventlog_writeentry_1_3.cpp#3)]
 [!code-csharp[EventLog_WriteEntry_1_3#3](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_WriteEntry_1_3/CS/eventlog_writeentry_1_3.cs#3)]
 [!code-vb[EventLog_WriteEntry_1_3#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_WriteEntry_1_3/VB/eventlog_writeentry_1_3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.Diagnostics.EventLog.Source" /> property of the <see cref="T:System.Diagnostics.EventLog" /> has not been set.  -or-  The method attempted to register a new event source, but the computer name in <see cref="P:System.Diagnostics.EventLog.MachineName" /> is not valid.  \- or -  The source is already registered for a different event log.  \- or -  <paramref name="eventID" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />.  \- or -  The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \- or -  The source name results in a registry key path longer than 254 characters.</exception>
        <exception cref="T:System.InvalidOperationException">The registry key for the event log could not be opened.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="type" /> is not a valid <see cref="T:System.Diagnostics.EventLogEntryType" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">The operating system reported an error when writing the event entry to the event log. A Windows error code is not available.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public static void WriteEntry (string source, string message, System.Diagnostics.EventLogEntryType type, int eventID);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteEntry(string source, string message, valuetype System.Diagnostics.EventLogEntryType type, int32 eventID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteEntry (source As String, message As String, type As EventLogEntryType, eventID As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteEntry(System::String ^ source, System::String ^ message, System::Diagnostics::EventLogEntryType type, int eventID);" />
      <MemberSignature Language="F#" Value="static member WriteEntry : string * string * System.Diagnostics.EventLogEntryType * int -&gt; unit" Usage="System.Diagnostics.EventLog.WriteEntry (source, message, type, eventID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="type" Type="System.Diagnostics.EventLogEntryType" />
        <Parameter Name="eventID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The source by which the application is registered on the specified computer.</param>
        <param name="message">The string to write to the event log.</param>
        <param name="type">One of the <see cref="T:System.Diagnostics.EventLogEntryType" /> values.</param>
        <param name="eventID">The application-specific identifier for the event.</param>
        <summary>Writes an entry with the given message text and application-defined event identifier to the event log, using the specified registered event source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per scrivere una voce con un parametro definito dall'applicazione `eventID` nel registro eventi, utilizzando un'origine già registrata come un'origine evento per il log appropriato. Il `eventID`, insieme a origine, identificare in modo univoco un evento. Ogni applicazione può definire numerati eventi interni e le stringhe di descrizione alle quali vengono mappati. I visualizzatori eventi presentano le stringhe all'utente per consentire all'utente di capire il problema e suggerire le azioni da intraprendere.  
  
> [!NOTE]
>  Il `message` stringa non può contenere %*n*, dove *n* è un valore intero (ad esempio, %1), perché il Visualizzatore eventi lo considera come una stringa di inserimento. Poiché un protocollo Internet versione 6 (IPv6) indirizzo può contenere questa sequenza di caratteri, non è possibile accedere un messaggio di evento che contiene un indirizzo IPv6.  
  
 Oltre all'identificatore dell'evento, questo overload del metodo <xref:System.Diagnostics.EventLog.WriteEntry%2A> consente di specificare un <xref:System.Diagnostics.EventLogEntryType> per l'evento da scrivere nel registro eventi. Il `type` è indicato da un'icona e del testo nella colonna di tipo nel Visualizzatore eventi per un log. Questo parametro indica se il tipo di evento è errore, avviso, informazioni, controlli riusciti o controllo con esito negativo.  
  
 È necessario creare e configurare l'origine evento prima di scrivere la prima voce con l'origine. Creare la nuova origine evento durante l'installazione dell'applicazione. Questo consente di tempo per il sistema operativo aggiornare l'elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l'elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l'operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodo. È necessario disporre dei diritti amministrativi sul computer per creare una nuova origine evento.  
  
 L'origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Il <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo scrive la stringa specificata direttamente nel registro eventi di; non utilizza un file di risorse localizzabili messaggio. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo scrivere gli eventi utilizzando un file di risorse messaggio localizzato.  
  
 Se l'applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un'origine con i file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci tramite identificatori di risorsa nel registro eventi. Creare un'origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo per scrivere stringhe direttamente il registro eventi utilizza tale origine.  
  
> [!NOTE]
>  Se il `message` parametro contiene un carattere null, il messaggio nel registro eventi viene terminato con il carattere NUL.  
  
   
  
## Examples  
 [!code-cpp[EventLog_WriteEntry_4#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_WriteEntry_4/CPP/eventlog_writeentry_4.cpp#1)]
 [!code-csharp[EventLog_WriteEntry_4#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_WriteEntry_4/CS/eventlog_writeentry_4.cs#1)]
 [!code-vb[EventLog_WriteEntry_4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_WriteEntry_4/VB/eventlog_writeentry_4.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="source" /> value is an empty string ("").  \- or -  The <paramref name="source" /> value is <see langword="null" />.  \- or -  <paramref name="eventID" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />.  \- or -  The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \- or -  The source name results in a registry key path longer than 254 characters.</exception>
        <exception cref="T:System.InvalidOperationException">The registry key for the event log could not be opened.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="type" /> is not a valid <see cref="T:System.Diagnostics.EventLogEntryType" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">The operating system reported an error when writing the event entry to the event log. A Windows error code is not available.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.EventLogEntryType type, int eventID, short category, byte[] rawData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEntry(string message, valuetype System.Diagnostics.EventLogEntryType type, int32 eventID, int16 category, unsigned int8[] rawData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, type As EventLogEntryType, eventID As Integer, category As Short, rawData As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::EventLogEntryType type, int eventID, short category, cli::array &lt;System::Byte&gt; ^ rawData);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * System.Diagnostics.EventLogEntryType * int * int16 * byte[] -&gt; unit" Usage="eventLog.WriteEntry (message, type, eventID, category, rawData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="type" Type="System.Diagnostics.EventLogEntryType" />
        <Parameter Name="eventID" Type="System.Int32" />
        <Parameter Name="category" Type="System.Int16" />
        <Parameter Name="rawData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="message">The string to write to the event log.</param>
        <param name="type">One of the <see cref="T:System.Diagnostics.EventLogEntryType" /> values.</param>
        <param name="eventID">The application-specific identifier for the event.</param>
        <param name="category">The application-specific subcategory associated with the message.</param>
        <param name="rawData">An array of bytes that holds the binary data associated with the entry.</param>
        <summary>Writes an entry with the given message text, application-defined event identifier, and application-defined category to the event log, and appends binary data to the message.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo overload per scrivere i dati specifici dell'evento definito dall'applicazione nel registro eventi. Il Visualizzatore eventi non interpretare i dati; i dati non elaborati vengono visualizzati solo in un formato esadecimale e testo combinato. Utilizzare i dati specifici dell'evento solo se necessario, includerlo solo se si è certi che risulterà utile per un utente di debug del problema. È inoltre possibile utilizzare dati specifici dell'evento per archiviare le informazioni che dell'applicazione può elaborare in modo indipendente da Visualizzatore eventi. Ad esempio, è stato possibile scrivere un visualizzatore in particolare per gli eventi o scrivere un programma che cerca il file di log e crea report che includono informazioni dai dati specifici dell'evento.  
  
 Oltre ai dati binari, è possibile specificare una categoria definita dall'applicazione e un identificatore eventi definito dall'applicazione. Il Visualizzatore eventi utilizza la categoria per filtrare gli eventi scritti da un'origine evento. Il Visualizzatore eventi consente di visualizzare la categoria come valore numerico oppure è possibile utilizzare la categoria come identificatore di risorsa per visualizzare una stringa di categoria localizzata.  
  
> [!NOTE]
>  Il `message` stringa non può contenere %*n*, dove *n* è un valore intero (ad esempio, %1), perché il Visualizzatore eventi lo considera come una stringa di inserimento. Poiché un protocollo Internet versione 6 (IPv6) indirizzo può contenere questa sequenza di caratteri, non è possibile accedere un messaggio di evento che contiene un indirizzo IPv6.  
  
> [!NOTE]
>  Il `category` parametro deve essere un valore positivo. I valori di categoria negativi vengono visualizzati come un numero positivo complementare nell'evento visualizzatore. Ad esempio – 10 viene visualizzato come 65,526, – 1 come 65.535.  
  
 Per visualizzare le stringhe di categoria localizzata nel Visualizzatore eventi, è necessario utilizzare un'origine evento configurato con un file di risorse di categoria e impostare il `category` in un identificatore di risorsa nel file di risorse di categoria. Se l'origine evento non dispone di un file di risorse di categoria configurato o quelle specificate `category` indicizza una stringa nel file di risorse di categoria, nel Visualizzatore eventi viene visualizzato il valore numerico di categoria per tale voce. Configurare il file di risorse di categoria, oltre al numero di stringhe di categoria nel file di risorse, utilizzando il <xref:System.Diagnostics.EventLogInstaller> o <xref:System.Diagnostics.EventSourceCreationData> classe.  
  
 Identificatori di eventi, insieme all'origine evento, identificano in modo univoco un evento. Ogni applicazione può definire numerati eventi interni e le stringhe di descrizione alle quali vengono mappati. Nei visualizzatori eventi vengono visualizzati questi valori stringa per consentire all'utente di capire il problema e suggerire le azioni da intraprendere.  
  
 Infine, è possibile specificare un <xref:System.Diagnostics.EventLogEntryType> per l'evento da scrivere nel registro eventi. Il `type` è indicato da un'icona e del testo nella colonna di tipo nel Visualizzatore eventi per un log. Questo parametro indica se il tipo di evento è errore, avviso, informazioni, controlli riusciti o controllo con esito negativo.  
  
 È necessario impostare il <xref:System.Diagnostics.EventLog.Source%2A> proprietà del <xref:System.Diagnostics.EventLog> componente prima di scrivere voci nel registro. È necessario creare e configurare l'origine evento prima di scrivere la prima voce con l'origine.  
  
 Creare la nuova origine evento durante l'installazione dell'applicazione. Questo consente di tempo per il sistema operativo aggiornare l'elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l'elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l'operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodo. È necessario disporre dei diritti amministrativi sul computer per creare una nuova origine evento.  
  
 Se l'origine specificata nel <xref:System.Diagnostics.EventLog.Source%2A> proprietà di questo <xref:System.Diagnostics.EventLog> istanza non è registrata nel computer in cui il componente sta scrivendo <xref:System.Diagnostics.EventLog.WriteEntry%2A> chiamate <xref:System.Diagnostics.EventLog.CreateEventSource%2A> e registra l'origine.  
  
> [!NOTE]
>  Se non si specifica un <xref:System.Diagnostics.EventLog.MachineName%2A> per il <xref:System.Diagnostics.EventLog> istanza prima di chiamare <xref:System.Diagnostics.EventLog.CreateEventSource%2A> o <xref:System.Diagnostics.EventLog.WriteEntry%2A>, il computer locale (".") equivale a.  
  
 Se il sistema deve registrare il <xref:System.Diagnostics.EventLog.Source%2A> tramite una chiamata a <xref:System.Diagnostics.EventLog.WriteEntry%2A> e il <xref:System.Diagnostics.EventLog.Log%2A> proprietà non è stata impostata sul <xref:System.Diagnostics.EventLog> per impostazione predefinita il log di istanza, nel registro applicazioni.  
  
> [!NOTE]
>  Molte eccezioni elencate in precedenza sono generate da errori generati durante il processo di registrazione di <xref:System.Diagnostics.EventLog.Source%2A>.  
  
 L'origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Il <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo scrive la stringa specificata direttamente nel registro eventi di; non utilizza un file di risorse localizzabili messaggio. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo scrivere gli eventi utilizzando un file di risorse messaggio localizzato.  
  
 Se l'applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un'origine con i file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci tramite identificatori di risorsa nel registro eventi. Creare un'origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo per scrivere stringhe direttamente il registro eventi utilizza tale origine.  
  
> [!NOTE]
>  Se si scrive una voce in un computer remoto, il valore del messaggio (la stringa di testo) potrebbe non essere quelli previsti se il computer remoto non è in esecuzione in .NET Framework.  
  
> [!NOTE]
>  Se il `message` parametro contiene un carattere null, il messaggio nel registro eventi viene terminato con il carattere NUL.  
  
   
  
## Examples  
 [!code-cpp[EventLog_WriteEntry_5#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_WriteEntry_5/CPP/eventlog_writeentry_5.cpp#1)]
 [!code-csharp[EventLog_WriteEntry_5#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_WriteEntry_5/CS/eventlog_writeentry_5.cs#1)]
 [!code-vb[EventLog_WriteEntry_5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_WriteEntry_5/VB/eventlog_writeentry_5.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.Diagnostics.EventLog.Source" /> property of the <see cref="T:System.Diagnostics.EventLog" /> has not been set.  -or-  The method attempted to register a new event source, but the computer name in <see cref="P:System.Diagnostics.EventLog.MachineName" /> is not valid.  \- or -  The source is already registered for a different event log.  \- or -  <paramref name="eventID" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />.  \- or -  The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \- or -  The source name results in a registry key path longer than 254 characters.</exception>
        <exception cref="T:System.InvalidOperationException">The registry key for the event log could not be opened.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="type" /> is not a valid <see cref="T:System.Diagnostics.EventLogEntryType" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">The operating system reported an error when writing the event entry to the event log. A Windows error code is not available.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public static void WriteEntry (string source, string message, System.Diagnostics.EventLogEntryType type, int eventID, short category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteEntry(string source, string message, valuetype System.Diagnostics.EventLogEntryType type, int32 eventID, int16 category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteEntry (source As String, message As String, type As EventLogEntryType, eventID As Integer, category As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteEntry(System::String ^ source, System::String ^ message, System::Diagnostics::EventLogEntryType type, int eventID, short category);" />
      <MemberSignature Language="F#" Value="static member WriteEntry : string * string * System.Diagnostics.EventLogEntryType * int * int16 -&gt; unit" Usage="System.Diagnostics.EventLog.WriteEntry (source, message, type, eventID, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="type" Type="System.Diagnostics.EventLogEntryType" />
        <Parameter Name="eventID" Type="System.Int32" />
        <Parameter Name="category" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="source">The source by which the application is registered on the specified computer.</param>
        <param name="message">The string to write to the event log.</param>
        <param name="type">One of the <see cref="T:System.Diagnostics.EventLogEntryType" /> values.</param>
        <param name="eventID">The application-specific identifier for the event.</param>
        <param name="category">The application-specific subcategory associated with the message.</param>
        <summary>Writes an entry with the given message text, application-defined event identifier, and application-defined category to the event log, using the specified registered event source. The <paramref name="category" /> can be used by the Event Viewer to filter events in the log.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per scrivere una voce con un parametro definito dall'applicazione `category` nel registro eventi, utilizzare un'origine che è già registrata come un'origine evento per il log appropriato. Il Visualizzatore eventi utilizza la categoria per filtrare gli eventi scritti da un'origine evento. Il Visualizzatore eventi consente di visualizzare la categoria come valore numerico oppure è possibile utilizzare la categoria come identificatore di risorsa per visualizzare una stringa di categoria localizzata.  
  
> [!NOTE]
>  Il `category` parametro deve essere un valore positivo. I valori di categoria negativi vengono visualizzati come un numero positivo complementare nell'evento visualizzatore. Ad esempio – 10 viene visualizzato come 65,526, – 1 come 65.535.  
  
 Per visualizzare le stringhe di categoria localizzata nel Visualizzatore eventi, è necessario utilizzare un'origine evento configurato con un file di risorse di categoria e impostare il `category` in un identificatore di risorsa nel file di risorse di categoria. Se l'origine evento non dispone di un file di risorse di categoria configurato o quelle specificate `category` indicizza una stringa nel file di risorse di categoria, nel Visualizzatore eventi viene visualizzato il valore numerico di categoria per tale voce. Configurare il file di risorse di categoria, oltre al numero di stringhe di categoria nel file di risorse, utilizzando il <xref:System.Diagnostics.EventLogInstaller> o <xref:System.Diagnostics.EventSourceCreationData> classe.  
  
 Oltre a categoria, è possibile specificare un identificatore di evento per l'evento da scrivere nel registro eventi. Identificatori di eventi, insieme all'origine evento, identificano in modo univoco un evento. Ogni applicazione può definire numerati eventi interni e le stringhe di descrizione alle quali vengono mappati. Nei visualizzatori eventi vengono visualizzati questi valori stringa per consentire all'utente di capire il problema e suggerire le azioni da intraprendere.  
  
 Infine, è possibile specificare un <xref:System.Diagnostics.EventLogEntryType> per l'evento da scrivere nel registro eventi. Il `type` è indicato da un'icona e del testo nella colonna di tipo nel Visualizzatore eventi per un log. Questo parametro indica se il tipo di evento è errore, avviso, informazioni, controlli riusciti o controllo con esito negativo.  
  
 È necessario creare e configurare l'origine evento prima di scrivere la prima voce con l'origine. Creare la nuova origine evento durante l'installazione dell'applicazione. Questo consente di tempo per il sistema operativo aggiornare l'elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l'elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l'operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodo. È necessario disporre dei diritti amministrativi sul computer per creare una nuova origine evento.  
  
 L'origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Il <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo scrive la stringa specificata direttamente nel registro eventi di; non utilizza un file di risorse localizzabili messaggio. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo scrivere gli eventi utilizzando un file di risorse messaggio localizzato.  
  
 Se l'applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un'origine con i file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci tramite identificatori di risorsa nel registro eventi. Creare un'origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo per scrivere stringhe direttamente il registro eventi utilizza tale origine.  
  
> [!NOTE]
>  Se il `message` parametro contiene un carattere null, il messaggio nel registro eventi viene terminato con il carattere NUL.  
>   
>  Il `message` stringa non può contenere %*n*, dove *n* è un valore intero (ad esempio, %1), perché il Visualizzatore eventi lo considera come una stringa di inserimento. Poiché un protocollo Internet versione 6 (IPv6) indirizzo può contenere questa sequenza di caratteri, non è possibile accedere un messaggio di evento che contiene un indirizzo IPv6.  
  
   
  
## Examples  
 [!code-cpp[EventLog_WriteEntry_1_3#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_WriteEntry_1_3/CPP/eventlog_writeentry_1_3.cpp#1)]
 [!code-csharp[EventLog_WriteEntry_1_3#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_WriteEntry_1_3/CS/eventlog_writeentry_1_3.cs#1)]
 [!code-vb[EventLog_WriteEntry_1_3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_WriteEntry_1_3/VB/eventlog_writeentry_1_3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="source" /> value is an empty string ("").  \- or -  The <paramref name="source" /> value is <see langword="null" />.  \- or -  <paramref name="eventID" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />.  \- or -  The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \- or -  The source name results in a registry key path longer than 254 characters.</exception>
        <exception cref="T:System.InvalidOperationException">The registry key for the event log could not be opened.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="type" /> is not a valid <see cref="T:System.Diagnostics.EventLogEntryType" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">The operating system reported an error when writing the event entry to the event log. A Windows error code is not available.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public static void WriteEntry (string source, string message, System.Diagnostics.EventLogEntryType type, int eventID, short category, byte[] rawData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteEntry(string source, string message, valuetype System.Diagnostics.EventLogEntryType type, int32 eventID, int16 category, unsigned int8[] rawData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteEntry (source As String, message As String, type As EventLogEntryType, eventID As Integer, category As Short, rawData As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteEntry(System::String ^ source, System::String ^ message, System::Diagnostics::EventLogEntryType type, int eventID, short category, cli::array &lt;System::Byte&gt; ^ rawData);" />
      <MemberSignature Language="F#" Value="static member WriteEntry : string * string * System.Diagnostics.EventLogEntryType * int * int16 * byte[] -&gt; unit" Usage="System.Diagnostics.EventLog.WriteEntry (source, message, type, eventID, category, rawData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="type" Type="System.Diagnostics.EventLogEntryType" />
        <Parameter Name="eventID" Type="System.Int32" />
        <Parameter Name="category" Type="System.Int16" />
        <Parameter Name="rawData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="source">The source by which the application is registered on the specified computer.</param>
        <param name="message">The string to write to the event log.</param>
        <param name="type">One of the <see cref="T:System.Diagnostics.EventLogEntryType" /> values.</param>
        <param name="eventID">The application-specific identifier for the event.</param>
        <param name="category">The application-specific subcategory associated with the message.</param>
        <param name="rawData">An array of bytes that holds the binary data associated with the entry.</param>
        <summary>Writes an entry with the given message text, application-defined event identifier, and application-defined category to the event log (using the specified registered event source) and appends binary data to the message.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per scrivere i dati specifici dell'evento definito dall'applicazione nel registro eventi, utilizzare un'origine già registrata come un'origine evento per il log appropriato. Il Visualizzatore eventi non interpretare i dati; i dati non elaborati vengono visualizzati solo in un formato esadecimale e testo combinato. Utilizzare i dati specifici dell'evento sporadicamente; includerlo solo se si è certi che risulterà utile. È inoltre possibile utilizzare dati specifici dell'evento per archiviare le informazioni che dell'applicazione può elaborare in modo indipendente da Visualizzatore eventi. Ad esempio, è stato possibile scrivere un visualizzatore in particolare per gli eventi o scrivere un programma che cerca il file di log e crea report che includono informazioni dai dati specifici dell'evento.  
  
 Oltre ai dati binari, è possibile specificare una categoria definita dall'applicazione e un identificatore eventi definito dall'applicazione. Il Visualizzatore eventi utilizza la categoria per filtrare gli eventi scritti da un'origine evento. Il Visualizzatore eventi consente di visualizzare la categoria come valore numerico oppure è possibile utilizzare la categoria come identificatore di risorsa per visualizzare una stringa di categoria localizzata.  
  
> [!NOTE]
>  Il `category` parametro deve essere un valore positivo. I valori di categoria negativi vengono visualizzati come un numero positivo complementare nell'evento visualizzatore. Ad esempio – 10 verrà visualizzato come 65,526, – 1 come 65.535.  
  
 Per visualizzare le stringhe di categoria localizzata nel Visualizzatore eventi, è necessario utilizzare un'origine evento configurato con un file di risorse di categoria e impostare il `category` in un identificatore di risorsa nel file di risorse di categoria. Se l'origine evento non dispone di un file di risorse di categoria configurato o quelle specificate `category` indicizza una stringa nel file di risorse di categoria, nel Visualizzatore eventi viene visualizzato il valore numerico di categoria per tale voce. Configurare il file di risorse di categoria, oltre al numero di stringhe di categoria nel file di risorse, utilizzando il <xref:System.Diagnostics.EventLogInstaller> o <xref:System.Diagnostics.EventSourceCreationData> classe.  
  
 Identificatori di eventi, con l'origine evento, identificano in modo univoco un evento. Ogni applicazione può definire numerati eventi interni e le stringhe di descrizione alle quali vengono mappati. Nei visualizzatori eventi vengono visualizzati questi valori stringa per consentire all'utente di capire il problema e suggerire le azioni da intraprendere.  
  
 Infine, è possibile specificare un <xref:System.Diagnostics.EventLogEntryType> per l'evento da scrivere nel registro eventi. Il `type` è indicato da un'icona e del testo nella colonna di tipo nel Visualizzatore eventi per un log. Questo parametro indica se il tipo di evento è errore, avviso, informazioni, controlli riusciti o controllo con esito negativo.  
  
 È necessario creare e configurare l'origine evento prima di scrivere la prima voce con l'origine. Creare la nuova origine evento durante l'installazione dell'applicazione. Questo consente di tempo per il sistema operativo aggiornare l'elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l'elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l'operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodo. È necessario disporre dei diritti amministrativi sul computer per creare una nuova origine evento.  
  
 L'origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Il <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo scrive la stringa specificata direttamente nel registro eventi di; non utilizza un file di risorse localizzabili messaggio. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo scrivere gli eventi utilizzando un file di risorse messaggio localizzato.  
  
 Se l'applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un'origine con i file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci tramite identificatori di risorsa nel registro eventi. Creare un'origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo per scrivere stringhe direttamente il registro eventi utilizza tale origine.  
  
> [!NOTE]
>  Se il `message` parametro contiene un carattere null, il messaggio nel registro eventi viene terminato con il carattere NUL.  
>   
>  Il `message` stringa non può contenere %*n*, dove *n* è un valore intero (ad esempio, %1), perché il Visualizzatore eventi lo considera come una stringa di inserimento. Poiché un protocollo Internet versione 6 (IPv6) indirizzo può contenere questa sequenza di caratteri, non è possibile accedere un messaggio di evento che contiene un indirizzo IPv6.  
  
   
  
## Examples  
 [!code-cpp[EventLog_WriteEntry_1_3#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_WriteEntry_1_3/CPP/eventlog_writeentry_1_3.cpp#2)]
 [!code-csharp[EventLog_WriteEntry_1_3#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_WriteEntry_1_3/CS/eventlog_writeentry_1_3.cs#2)]
 [!code-vb[EventLog_WriteEntry_1_3#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_WriteEntry_1_3/VB/eventlog_writeentry_1_3.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="source" /> value is an empty string ("").  \- or -  The <paramref name="source" /> value is <see langword="null" />.  \- or -  <paramref name="eventID" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />.  \- or -  The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \- or -  The source name results in a registry key path longer than 254 characters.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="type" /> is not a valid <see cref="T:System.Diagnostics.EventLogEntryType" />.</exception>
        <exception cref="T:System.InvalidOperationException">The registry key for the event log could not be opened.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">The operating system reported an error when writing the event entry to the event log. A Windows error code is not available.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteEvent">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Writes a localized event entry to the event log.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteEvent">
      <MemberSignature Language="C#" Value="public void WriteEvent (System.Diagnostics.EventInstance instance, params object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEvent(class System.Diagnostics.EventInstance instance, object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEvent (instance As EventInstance, ParamArray values As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEvent(System::Diagnostics::EventInstance ^ instance, ... cli::array &lt;System::Object ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="member this.WriteEvent : System.Diagnostics.EventInstance * obj[] -&gt; unit" Usage="eventLog.WriteEvent (instance, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Diagnostics.EventInstance" />
        <Parameter Name="values" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">An <see cref="T:System.Diagnostics.EventInstance" /> instance that represents a localized event log entry.</param>
        <param name="values">An array of strings to merge into the message text of the event log entry.</param>
        <summary>Writes a localized entry to the event log.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per scrivere una voce localizzata nel registro eventi. Specificare le proprietà evento con identificatori di risorsa piuttosto che i valori stringa. Il Visualizzatore eventi utilizza gli identificatori di risorsa per visualizzare le stringhe corrispondenti dal file di risorse localizzate per le <xref:System.Diagnostics.EventLog.Source%2A>. Prima di scrivere gli eventi utilizzando gli identificatori di risorsa, è necessario registrare l'origine con il corrispondente file di risorse.  
  
 L'input `instance` istanza specifica il messaggio di evento e le proprietà. Impostare il <xref:System.Diagnostics.EventInstance.InstanceId%2A> del `instance` di input per il messaggio definito nel file di risorse del messaggio di origine. È possibile impostare facoltativamente il <xref:System.Diagnostics.EventInstance.CategoryId%2A> e <xref:System.Diagnostics.EventInstance.EntryType%2A> del `instance` input per definire il tipo di categoria ed evento della voce di evento. È inoltre possibile specificare una matrice di stringhe indipendenti dal linguaggio per inserire il testo del messaggio localizzato. Impostare `values` a `null` se il messaggio di evento non contiene segnaposto di formattazione per le stringhe di sostituzione.  
  
 È necessario impostare il <xref:System.Diagnostics.EventLog.Source%2A> proprietà di <xref:System.Diagnostics.EventLog> componente prima di usare <xref:System.Diagnostics.EventLog.WriteEvent%2A>. L'origine specificata deve essere configurato per la scrittura di voci localizzate nel registro; l'origine deve avere almeno un file di risorse di messaggio definito.  
  
 È necessario creare e configurare l'origine evento prima di scrivere la prima voce con l'origine. Creare la nuova origine evento durante l'installazione dell'applicazione. Questo consente di tempo per il sistema operativo aggiornare l'elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l'elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l'operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodo. È necessario disporre dei diritti amministrativi sul computer per creare una nuova origine evento.  
  
 L'origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo se l'applicazione scrive i valori stringa direttamente nel registro eventi.  
  
 Se l'applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un'origine con i file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci tramite identificatori di risorsa nel registro eventi. Creare un'origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo per scrivere stringhe direttamente il registro eventi utilizza tale origine.  
  
> [!NOTE]
>  Se si scrive una voce per un computer remoto, il valore di `message` stringa potrebbe non essere quelli previsti se il computer remoto non è in esecuzione in .NET Framework. Inoltre, il `message` stringa non può contenere %*n*, dove *n* è un valore intero (ad esempio, %1), perché il Visualizzatore eventi lo considera come una stringa di inserimento. Poiché un protocollo Internet versione 6 (IPv6) indirizzo può contenere questa sequenza di caratteri, non è possibile accedere un messaggio di evento che contiene un indirizzo IPv6.  
  
   
  
## Examples  
 Nell'esempio seguente vengono scritte due voci nel registro eventi di controllo `myNewLog`. Nell'esempio viene creata una nuova origine evento e un nuovo registro eventi se non esistono nel computer locale. Il testo del messaggio di evento è specificato utilizzando un identificatore di risorsa in un file di risorse.  
  
 [!code-cpp[EventLog_WriteEvent#7](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#7)]
 [!code-csharp[EventLog_WriteEvent#7](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#7)]
 [!code-vb[EventLog_WriteEvent#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#7)]  
  
 L'esempio Usa il seguente file di testo messaggio, compilato nella libreria di risorse EventLogMsgs. Un file di testo del messaggio è l'origine da cui viene creato il file di risorse di messaggio. Il file di testo del messaggio definisce il testo per la categoria, messaggio di evento e le stringhe di inserimento di parametro e identificatori di risorsa.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.Diagnostics.EventLog.Source" /> property of the <see cref="T:System.Diagnostics.EventLog" /> has not been set.  -or-  The method attempted to register a new event source, but the computer name in <see cref="P:System.Diagnostics.EventLog.MachineName" /> is not valid.  \- or -  The source is already registered for a different event log.  \- or -  <paramref name="instance.InstanceId" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />.  \- or -  <paramref name="values" /> has more than 256 elements.  \- or -  One of the <paramref name="values" /> elements is longer than 32766 bytes.  \- or -  The source name results in a registry key path longer than 254 characters.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The registry key for the event log could not be opened.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">The operating system reported an error when writing the event entry to the event log. A Windows error code is not available.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
        <altmember cref="T:System.Diagnostics.EventInstance" />
      </Docs>
    </Member>
    <Member MemberName="WriteEvent">
      <MemberSignature Language="C#" Value="public void WriteEvent (System.Diagnostics.EventInstance instance, byte[] data, params object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEvent(class System.Diagnostics.EventInstance instance, unsigned int8[] data, object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Byte[],System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEvent (instance As EventInstance, data As Byte(), ParamArray values As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEvent(System::Diagnostics::EventInstance ^ instance, cli::array &lt;System::Byte&gt; ^ data, ... cli::array &lt;System::Object ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="member this.WriteEvent : System.Diagnostics.EventInstance * byte[] * obj[] -&gt; unit" Usage="eventLog.WriteEvent (instance, data, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Diagnostics.EventInstance" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="values" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">An <see cref="T:System.Diagnostics.EventInstance" /> instance that represents a localized event log entry.</param>
        <param name="data">An array of bytes that holds the binary data associated with the entry.</param>
        <param name="values">An array of strings to merge into the message text of the event log entry.</param>
        <summary>Writes an event log entry with the given event data, message replacement strings, and associated binary data.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per scrivere una voce localizzata con dati aggiuntivi specifici dell'evento nel registro eventi. Specificare le proprietà evento con identificatori di risorsa piuttosto che i valori stringa. Il Visualizzatore eventi utilizza gli identificatori di risorsa per visualizzare le stringhe corrispondenti dal file di risorse localizzate per le <xref:System.Diagnostics.EventLog.Source%2A>. Prima di scrivere gli eventi utilizzando gli identificatori di risorsa, è necessario registrare l'origine con il corrispondente file di risorse.  
  
 L'input `instance` istanza specifica il messaggio di evento e le proprietà. Impostare il <xref:System.Diagnostics.EventInstance.InstanceId%2A> del `instance` di input per il messaggio definito nel file di risorse del messaggio di origine. È possibile impostare facoltativamente il <xref:System.Diagnostics.EventInstance.CategoryId%2A> e <xref:System.Diagnostics.EventInstance.EntryType%2A> del `instance` input per definire il tipo di categoria ed evento della voce di evento. È inoltre possibile specificare una matrice di stringhe indipendenti dal linguaggio per inserire il testo del messaggio localizzato. Impostare `values` a `null` se il messaggio di evento non contiene segnaposto di formattazione per le stringhe di sostituzione.  
  
 Specificare i dati binari con un evento quando è necessario fornire dettagli aggiuntivi per l'evento. Ad esempio, utilizzare il `data` parametro per includere informazioni su un errore specifico. Il Visualizzatore eventi non interpretare i dati di evento associato. Visualizza i dati in un formato esadecimale e testo combinato. Utilizzare i dati specifici dell'evento sporadicamente; includerlo solo se si è certi che risulterà utile. È inoltre possibile utilizzare dati specifici dell'evento per archiviare le informazioni che dell'applicazione può elaborare in modo indipendente da Visualizzatore eventi. Ad esempio, è stato possibile scrivere un visualizzatore in particolare per gli eventi o scrivere un programma che cerca nel registro eventi e consente di creare report che includono le informazioni dai dati specifici dell'evento.  
  
 È necessario impostare il <xref:System.Diagnostics.EventLog.Source%2A> proprietà di <xref:System.Diagnostics.EventLog> componente prima del componente prima di usare <xref:System.Diagnostics.EventLog.WriteEvent%2A>. L'origine specificata deve essere configurato per la scrittura di voci localizzate nel registro; l'origine deve avere almeno un file di risorse di messaggio definito.  
  
 È necessario creare e configurare l'origine evento prima di scrivere la prima voce con l'origine. Creare la nuova origine evento durante l'installazione dell'applicazione. Questo consente di tempo per il sistema operativo aggiornare l'elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l'elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l'operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodo. È necessario disporre dei diritti amministrativi sul computer per creare una nuova origine evento.  
  
> [!NOTE]
>  Se non si specifica un <xref:System.Diagnostics.EventLog.MachineName%2A> per il <xref:System.Diagnostics.EventLog> istanza prima di chiamare <xref:System.Diagnostics.EventLog.WriteEvent%2A>, il computer locale (".") equivale a.  
  
 L'origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo se l'applicazione scrive i valori stringa direttamente nel registro eventi.  
  
 Se l'applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un'origine con i file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci tramite identificatori di risorsa nel registro eventi. Creare un'origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo per scrivere stringhe direttamente il registro eventi utilizza tale origine.  
  
> [!NOTE]
>  Se si scrive una voce per un computer remoto, il valore di `message` stringa potrebbe non essere quelli previsti se il computer remoto non è in esecuzione in .NET Framework. Inoltre, il `message` stringa non può contenere %*n*, dove *n* è un valore intero (ad esempio, %1), perché il Visualizzatore eventi lo considera come una stringa di inserimento. Poiché un protocollo Internet versione 6 (IPv6) indirizzo può contenere questa sequenza di caratteri, non è possibile accedere un messaggio di evento che contiene un indirizzo IPv6.  
  
   
  
## Examples  
 Nell'esempio seguente vengono scritte due voci nel registro eventi di controllo `myNewLog`. Nell'esempio viene creata una nuova origine evento e un nuovo registro eventi se non esistono nel computer locale. Il testo del messaggio di evento è specificato utilizzando un identificatore di risorsa in un file di risorse.  
  
 [!code-cpp[EventLog_WriteEvent#7](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#7)]
 [!code-csharp[EventLog_WriteEvent#7](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#7)]
 [!code-vb[EventLog_WriteEvent#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#7)]  
  
 L'esempio Usa il seguente file di testo messaggio, compilato nella libreria di risorse EventLogMsgs. Un file di testo del messaggio è l'origine da cui viene creato il file di risorse di messaggio. Il file di testo del messaggio definisce il testo per la categoria, messaggio di evento e le stringhe di inserimento di parametro e identificatori di risorsa.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.Diagnostics.EventLog.Source" /> property of the <see cref="T:System.Diagnostics.EventLog" /> has not been set.  -or-  The method attempted to register a new event source, but the computer name in <see cref="P:System.Diagnostics.EventLog.MachineName" /> is not valid.  \- or -  The source is already registered for a different event log.  \- or -  <paramref name="instance.InstanceId" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />.  \- or -  <paramref name="values" /> has more than 256 elements.  \- or -  One of the <paramref name="values" /> elements is longer than 32766 bytes.  \- or -  The source name results in a registry key path longer than 254 characters.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The registry key for the event log could not be opened.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">The operating system reported an error when writing the event entry to the event log. A Windows error code is not available.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
        <altmember cref="T:System.Diagnostics.EventInstance" />
      </Docs>
    </Member>
    <Member MemberName="WriteEvent">
      <MemberSignature Language="C#" Value="public static void WriteEvent (string source, System.Diagnostics.EventInstance instance, params object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteEvent(string source, class System.Diagnostics.EventInstance instance, object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteEvent (source As String, instance As EventInstance, ParamArray values As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteEvent(System::String ^ source, System::Diagnostics::EventInstance ^ instance, ... cli::array &lt;System::Object ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member WriteEvent : string * System.Diagnostics.EventInstance * obj[] -&gt; unit" Usage="System.Diagnostics.EventLog.WriteEvent (source, instance, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="instance" Type="System.Diagnostics.EventInstance" />
        <Parameter Name="values" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="source">The name of the event source registered for the application on the specified computer.</param>
        <param name="instance">An <see cref="T:System.Diagnostics.EventInstance" /> instance that represents a localized event log entry.</param>
        <param name="values">An array of strings to merge into the message text of the event log entry.</param>
        <summary>Writes an event log entry with the given event data and message replacement strings, using the specified registered event source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per scrivere una voce localizzata nel registro eventi, utilizzare un'origine già registrata come un'origine evento per il log appropriato. Specificare le proprietà evento con identificatori di risorsa piuttosto che i valori stringa. Il Visualizzatore eventi utilizza gli identificatori di risorsa per visualizzare le stringhe corrispondenti dal file di risorse localizzate per l'origine. Prima di scrivere gli eventi utilizzando gli identificatori di risorsa, è necessario registrare l'origine con il corrispondente file di risorse.  
  
 L'input `instance` istanza specifica il messaggio di evento e le proprietà. Impostare il <xref:System.Diagnostics.EventInstance.InstanceId%2A> del `instance` di input per il messaggio definito nel file di risorse del messaggio di origine. È possibile impostare facoltativamente il <xref:System.Diagnostics.EventInstance.CategoryId%2A> e <xref:System.Diagnostics.EventInstance.EntryType%2A> del `instance` input per definire il tipo di categoria ed evento della voce di evento. È inoltre possibile specificare una matrice di stringhe indipendenti dal linguaggio per inserire il testo del messaggio localizzato. Impostare `values` a `null` se il messaggio di evento non contiene segnaposto di formattazione per le stringhe di sostituzione.  
  
 L'origine specificata deve essere registrato per un registro eventi prima di usare <xref:System.Diagnostics.EventLog.WriteEvent%2A>. L'origine specificata deve essere configurato per la scrittura di voci localizzate nel registro; l'origine deve avere almeno un file di risorse di messaggio definito.  
  
 È necessario creare e configurare l'origine evento prima di scrivere la prima voce con l'origine. Creare la nuova origine evento durante l'installazione dell'applicazione. Questo consente di tempo per il sistema operativo aggiornare l'elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l'elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l'operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodo. È necessario disporre dei diritti amministrativi sul computer per creare una nuova origine evento.  
  
 L'origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo se l'applicazione scrive i valori stringa direttamente nel registro eventi.  
  
 Se l'applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un'origine con i file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci tramite identificatori di risorsa nel registro eventi. Creare un'origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo per scrivere stringhe direttamente il registro eventi utilizza tale origine.  
  
   
  
## Examples  
 Nell'esempio seguente scrive una voce di evento di tipo informativo e una voce di evento di avviso in un log eventi esistente. Il testo del messaggio di evento è specificato utilizzando un identificatore di risorsa in un file di risorse. Si presuppone che il file di risorse corrispondente è stato registrato per l'origine.  
  
 [!code-cpp[EventLog_WriteEvent#8](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#8)]
 [!code-csharp[EventLog_WriteEvent#8](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#8)]
 [!code-vb[EventLog_WriteEvent#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#8)]  
  
 L'esempio Usa il seguente file di testo messaggio, compilato nella libreria di risorse EventLogMsgs. Un file di testo del messaggio è l'origine da cui viene creato il file di risorse di messaggio. Il file di testo del messaggio definisce il testo per la categoria, messaggio di evento e le stringhe di inserimento di parametro e identificatori di risorsa.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="source" /> value is an empty string ("").  \- or -  The <paramref name="source" /> value is <see langword="null" />.  \- or -  <paramref name="instance.InstanceId" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />.  \- or -  <paramref name="values" /> has more than 256 elements.  \- or -  One of the <paramref name="values" /> elements is longer than 32766 bytes.  \- or -  The source name results in a registry key path longer than 254 characters.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The registry key for the event log could not be opened.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">The operating system reported an error when writing the event entry to the event log. A Windows error code is not available.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
        <altmember cref="T:System.Diagnostics.EventInstance" />
      </Docs>
    </Member>
    <Member MemberName="WriteEvent">
      <MemberSignature Language="C#" Value="public static void WriteEvent (string source, System.Diagnostics.EventInstance instance, byte[] data, params object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteEvent(string source, class System.Diagnostics.EventInstance instance, unsigned int8[] data, object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Byte[],System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteEvent (source As String, instance As EventInstance, data As Byte(), ParamArray values As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteEvent(System::String ^ source, System::Diagnostics::EventInstance ^ instance, cli::array &lt;System::Byte&gt; ^ data, ... cli::array &lt;System::Object ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member WriteEvent : string * System.Diagnostics.EventInstance * byte[] * obj[] -&gt; unit" Usage="System.Diagnostics.EventLog.WriteEvent (source, instance, data, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="instance" Type="System.Diagnostics.EventInstance" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="values" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="source">The name of the event source registered for the application on the specified computer.</param>
        <param name="instance">An <see cref="T:System.Diagnostics.EventInstance" /> instance that represents a localized event log entry.</param>
        <param name="data">An array of bytes that holds the binary data associated with the entry.</param>
        <param name="values">An array of strings to merge into the message text of the event log entry.</param>
        <summary>Writes an event log entry with the given event data, message replacement strings, and associated binary data, and using the specified registered event source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per scrivere una voce localizzata con dati aggiuntivi specifici dell'evento nel registro eventi, utilizzare un'origine già registrata come un'origine evento per il log appropriato. Specificare le proprietà evento con identificatori di risorsa piuttosto che i valori stringa. Il Visualizzatore eventi utilizza gli identificatori di risorsa per visualizzare le stringhe corrispondenti dal file di risorse localizzate per l'origine. Prima di scrivere gli eventi utilizzando gli identificatori di risorsa, è necessario registrare l'origine con il corrispondente file di risorse.  
  
 L'input `instance` istanza specifica il messaggio di evento e le proprietà. Impostare il <xref:System.Diagnostics.EventInstance.InstanceId%2A> del `instance` di input per il messaggio definito nel file di risorse del messaggio di origine. È possibile impostare facoltativamente il <xref:System.Diagnostics.EventInstance.CategoryId%2A> e <xref:System.Diagnostics.EventInstance.EntryType%2A> del `instance` input per definire il tipo di categoria ed evento della voce di evento. È inoltre possibile specificare una matrice di stringhe indipendenti dal linguaggio per inserire il testo del messaggio localizzato. Impostare `values` a `null` se il messaggio di evento non contiene segnaposto di formattazione per le stringhe di sostituzione.  
  
 Specificare i dati binari con un evento quando è necessario fornire dettagli aggiuntivi per l'evento. Ad esempio, utilizzare il `data` parametro per includere informazioni su un errore specifico. Il Visualizzatore eventi non interpretare i dati di evento associato. Visualizza i dati in un formato esadecimale e testo combinato. Utilizzare i dati specifici dell'evento sporadicamente; includerlo solo se si è certi che risulterà utile. È inoltre possibile utilizzare dati specifici dell'evento per archiviare le informazioni che dell'applicazione può elaborare in modo indipendente da Visualizzatore eventi. Ad esempio, è stato possibile scrivere un visualizzatore in particolare per gli eventi o scrivere un programma che cerca nel registro eventi e consente di creare report che includono le informazioni dai dati specifici dell'evento.  
  
 L'origine specificata deve essere registrato per un registro eventi prima di usare <xref:System.Diagnostics.EventLog.WriteEvent%2A>. L'origine specificata deve essere configurato per la scrittura di voci localizzate nel registro; l'origine deve avere almeno un file di risorse di messaggio definito.  
  
 È necessario creare e configurare l'origine evento prima di scrivere la prima voce con l'origine. Creare la nuova origine evento durante l'installazione dell'applicazione. Questo consente di tempo per il sistema operativo aggiornare l'elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l'elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l'operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodo. È necessario disporre dei diritti amministrativi sul computer per creare una nuova origine evento.  
  
 L'origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo se l'applicazione scrive i valori stringa direttamente nel registro eventi.  
  
 Se l'applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un'origine con i file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci tramite identificatori di risorsa nel registro eventi. Creare un'origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo per scrivere stringhe direttamente il registro eventi utilizza tale origine.  
  
   
  
## Examples  
 Nell'esempio seguente scrive una voce di evento di tipo informativo e una voce di evento di avviso in un log eventi esistente. Il testo del messaggio di evento è specificato utilizzando un identificatore di risorsa in un file di risorse. Si presuppone che il file di risorse corrispondente è stato registrato per l'origine.  
  
 [!code-cpp[EventLog_WriteEvent#8](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#8)]
 [!code-csharp[EventLog_WriteEvent#8](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#8)]
 [!code-vb[EventLog_WriteEvent#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#8)]  
  
 L'esempio Usa il seguente file di testo messaggio, compilato nella libreria di risorse EventLogMsgs. Un file di testo del messaggio è l'origine da cui viene creato il file di risorse di messaggio. Il file di testo del messaggio definisce il testo per la categoria, messaggio di evento e le stringhe di inserimento di parametro e identificatori di risorsa.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="source" /> value is an empty string ("").  \- or -  The <paramref name="source" /> value is <see langword="null" />.  \- or -  <paramref name="instance.InstanceId" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />.  \- or -  <paramref name="values" /> has more than 256 elements.  \- or -  One of the <paramref name="values" /> elements is longer than 32766 bytes.  \- or -  The source name results in a registry key path longer than 254 characters.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The registry key for the event log could not be opened.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">The operating system reported an error when writing the event entry to the event log. A Windows error code is not available.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">per scrivere le informazioni del registro eventi nel computer. Enumerazione associata: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
        <altmember cref="T:System.Diagnostics.EventInstance" />
      </Docs>
    </Member>
  </Members>
</Type>