<Type Name="EventSourceCreationData" FullName="System.Diagnostics.EventSourceCreationData">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e480b5de6b5eb24d84d78d5fba0c971c7cd54e85" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36741948" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventSourceCreationData" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventSourceCreationData extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventSourceCreationData" />
  <TypeSignature Language="VB.NET" Value="Public Class EventSourceCreationData" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventSourceCreationData" />
  <TypeSignature Language="F#" Value="type EventSourceCreationData = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Rappresenta le impostazioni di configurazione utilizzate per creare un'origine del log eventi sul computer locale o su un computer remoto.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Diagnostics.EventSourceCreationData> (classe) per configurare una nuova origine per la scrittura di voci localizzate in un registro eventi. Non è necessario utilizzare questa classe per leggere da un registro eventi.  
  
 Questa classe definisce le impostazioni di configurazione per una nuova origine evento e il log eventi associato. Il log eventi associato può essere nel computer locale o un computer remoto. Per creare una nuova origine per un registro eventi di nuovo o esistente nel computer locale, impostare il <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> e <xref:System.Diagnostics.EventSourceCreationData.Source%2A> proprietà di un' <xref:System.Diagnostics.EventSourceCreationData> e chiamare il <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> metodo. Questo metodo crea l'origine evento specificata nel <xref:System.Diagnostics.EventSourceCreationData.Source%2A> proprietà e registri per il registro eventi specificato in <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>. Questo comportamento è simile all'utilizzo di <xref:System.Diagnostics.EventLogInstaller> (classe) per registrare un'origine evento per un registro eventi.  
  
 Usare la <xref:System.Diagnostics.EventLog.WriteEvent%2A> e <xref:System.Diagnostics.EventLog.WriteEntry%2A> i metodi per scrivere eventi in un registro eventi. È necessario specificare un'origine evento per scrivere eventi; è necessario creare e configurare l'origine evento prima di scrivere la prima voce con l'origine.  
  
 Creare la nuova origine evento durante l'installazione dell'applicazione. Questo consente di tempo per il sistema operativo aggiornare l'elenco delle origini eventi registrati e le relative configurazioni. Se il sistema operativo non è aggiornato l'elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l'operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A> metodo. È necessario disporre dei diritti amministrativi sul computer per creare una nuova origine evento.  
  
 È possibile creare un'origine evento per un log eventi esistente o un nuovo registro eventi. Quando si crea una nuova origine per un nuovo registro eventi, il sistema registra l'origine di tale log, ma non viene creato il registro finché la prima voce viene scritto in essa.  
  
 Ogni origine può solo scrivere in un log eventi alla volta. Tuttavia, l'applicazione può utilizzare più origini per scrivere più registri eventi. Ad esempio, l'applicazione potrebbe essere necessario più origini configurate per diversi log eventi o i file di risorse diverso.  
  
 Per modificare i dettagli di configurazione di un'origine esistente, è necessario eliminare l'origine e quindi crearlo nuovamente con la nuova configurazione. Se altre applicazioni o componenti usano l'origine esistente, creare una nuova origine con la configurazione aggiornata, piuttosto che l'eliminazione dell'origine esistente.  
  
 È possibile registrare l'origine evento con le risorse localizzate per le stringhe di categoria e il messaggio di evento. L'applicazione può scrivere voci del registro eventi tramite identificatori di risorsa, anziché specificare la stringa effettiva. Il Visualizzatore eventi utilizza l'identificatore di risorsa per trovare e visualizzare la stringa corrispondente dal file di risorse localizzato in base alle impostazioni della lingua corrente. È possibile registrare un file separato per le categorie di eventi, messaggi e le stringhe di inserimento di parametro o è possibile registrare lo stesso file di risorse per tutti i tre tipi di stringhe. Usare la <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, e <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> proprietà per configurare l'origine per scrivere voci localizzate nel registro eventi. Se l'applicazione scrive i valori stringa direttamente nel registro eventi, è necessario impostare queste proprietà.  
  
 L'origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Il <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo scrive la stringa specificata direttamente nel registro eventi di; non utilizza un file di risorse localizzabili messaggio. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo scrivere gli eventi utilizzando un file di risorse messaggio localizzato.  
  
 Se l'applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un'origine con i file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci tramite identificatori di risorsa nel registro eventi. Quindi creare un'origine diversa senza file di risorse e usare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo per scrivere stringhe direttamente il registro eventi utilizza tale origine.  
  
   
  
## Examples  
 Esempio di codice seguente imposta le proprietà di configurazione per un'origine evento dagli argomenti della riga di comando. Gli argomenti di input specificano il nome dell'origine evento, nome registro eventi, nome del computer e file di risorse di messaggio di evento. L'esempio di codice verifica che l'origine non è in conflitto con un'origine evento esistente e quindi crea la nuova origine evento per il registro eventi specificato.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#1)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#1)]
 [!code-vb[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">per la chiamata a qualsiasi membro del <see cref="T:System.Diagnostics.EventSourceCreationData" /> con attendibilità totale. Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="T:System.Diagnostics.EventLogInstaller" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSourceCreationData (string source, string logName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string source, string logName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (source As String, logName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSourceCreationData(System::String ^ source, System::String ^ logName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSourceCreationData : string * string -&gt; System.Diagnostics.EventSourceCreationData" Usage="new System.Diagnostics.EventSourceCreationData (source, logName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="logName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Nome da registrare con il log eventi come origine delle voci.</param>
        <param name="logName">Nome del log in cui vengono scritte le voci dell'origine.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.EventSourceCreationData" /> con un'origine eventi e un nome di log eventi specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per scrivere voci in un registro eventi, è innanzitutto necessario creare un'origine evento per il log eventi. Per registrare una nuova origine, inizializzare un <xref:System.Diagnostics.EventSourceCreationData> dell'istanza, configurare le proprietà dell'istanza per l'applicazione e chiamare il <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> metodo. Dopo aver registrato l'origine, è possibile scrivere le voci di origine mediante il <xref:System.Diagnostics.EventLog.WriteEvent%2A> o <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodi.  
  
 È possibile registrare l'origine evento con le risorse localizzate per le stringhe di categoria e il messaggio di evento. L'applicazione può scrivere voci del registro eventi tramite identificatori di risorsa, anziché specificare la stringa effettiva. Il Visualizzatore eventi utilizza l'identificatore di risorsa per trovare e visualizzare la stringa corrispondente dal file di risorse localizzato in base alle impostazioni della lingua corrente. È possibile registrare un file separato per le categorie di eventi, messaggi e le stringhe di inserimento di parametro o è possibile registrare lo stesso file di risorse per tutti i tre tipi di stringhe. Usare la <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, e <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> proprietà per configurare l'origine per scrivere voci localizzate nel registro eventi. Se l'applicazione scrive i valori stringa direttamente nel registro eventi, è necessario impostare queste proprietà.  
  
 L'origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Se l'applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un'origine con i file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci tramite identificatori di risorsa nel registro eventi. Quindi creare un'origine diversa senza file di risorse e usare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A> metodo per scrivere stringhe direttamente nel registro eventi.  
  
 La tabella seguente illustra i valori di proprietà iniziali per un' <xref:System.Diagnostics.EventSourceCreationData>.  
  
|Proprietà|Valore iniziale|  
|--------------|-------------------|  
|<xref:System.Diagnostics.EventSourceCreationData.Source%2A>|Parametro `source`.|  
|<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>|Parametro `logName`.|  
|<xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>|Il computer locale (".").|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>|Zero|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>|`null` (`Nothing` in Visual Basic).|  
|<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>|`null` (`Nothing` in Visual Basic).|  
|<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>|`null` (`Nothing` in Visual Basic).|  
  
   
  
## Examples  
 Esempio di codice seguente determina se l'origine eventi denominata `SampleApplicationSource` è registrato nel computer locale. Se l'origine evento non esiste, l'esempio imposta il file di risorse di messaggio per l'origine e crea la nuova origine evento. Infine, l'esempio di codice imposta il nome visualizzato localizzato per il registro eventi, usando il valore dell'identificatore di risorsa in `DisplayNameMsgId` e il percorso del file di risorse in `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 L'esempio di codice Usa il seguente file di testo messaggio, compilato nella libreria di risorse EventLogMsgs. Un file di testo del messaggio è l'origine da cui viene creato il file di risorse di messaggio. Il file di testo del messaggio definisce il testo per la categoria, messaggio di evento e le stringhe di inserimento di parametro e identificatori di risorsa.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">per la chiamata a qualsiasi membro del <see cref="T:System.Diagnostics.EventSourceCreationData" /> con attendibilità totale. Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.LogName" />
      </Docs>
    </Member>
    <Member MemberName="CategoryCount">
      <MemberSignature Language="C#" Value="public int CategoryCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryCount : int with get, set" Usage="System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il numero di categorie nel file di risorse di categoria.</summary>
        <value>Numero di categorie nel file di risorse di categoria. Il valore predefinito è zero.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> e <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> categoria stringhe localizzate per le proprietà per scrivere eventi con. Il Visualizzatore eventi consente di visualizzare la categoria per una voce di evento se si fornisce una categoria quando si scrittura l'evento. Le categorie del registro eventi sono stringhe definite dall'applicazione che consentono di filtrare gli eventi, o forniscono ulteriori informazioni sull'evento. Ad esempio, l'applicazione può definire categorie separate per i diversi componenti o diverse operazioni.  
  
 Le categorie di eventi sono facoltative. Se l'applicazione non utilizza le categorie, non impostare il <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> e <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> proprietà.  
  
 Per informazioni dettagliate sulla definizione dei messaggi di evento e la creazione di file di risorse di eventi, vedere l'argomento "Messaggio del compilatore" nella documentazione di Platform SDK [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 Esempio di codice seguente determina se l'origine eventi denominata `SampleApplicationSource` è registrato nel computer locale. Se l'origine evento non esiste, l'esempio imposta il file di risorse di messaggio per l'origine e crea la nuova origine evento. Infine, l'esempio di codice imposta il nome visualizzato localizzato per il registro eventi, usando il valore dell'identificatore di risorsa in `DisplayNameMsgId` e il percorso del file di risorse in `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 L'esempio di codice Usa il seguente file di testo messaggio, compilato nella libreria di risorse EventLogMsgs. Un file di testo del messaggio è l'origine da cui viene creato il file di risorse di messaggio. Il file di testo del messaggio definisce il testo per la categoria, messaggio di evento e le stringhe di inserimento di parametro e identificatori di risorsa.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La proprietà è impostata su un valore negativo o maggiore di <see cref="F:System.UInt16.MaxValue" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">per la chiamata a qualsiasi membro del <see cref="T:System.Diagnostics.EventSourceCreationData" /> con attendibilità totale. Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CategoryResourceFile">
      <MemberSignature Language="C#" Value="public string CategoryResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il percorso del file di risorse che contiene le stringhe di categoria per l'origine.</summary>
        <value>Percorso del file di risorse di categoria. Il valore predefinito è una stringa vuota ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> e <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> categoria stringhe localizzate per le proprietà per scrivere eventi con. Il Visualizzatore eventi consente di visualizzare la categoria per una voce di evento se si fornisce una categoria quando si scrittura l'evento. Le categorie del registro eventi sono stringhe definite dall'applicazione che consentono di filtrare gli eventi, o forniscono ulteriori informazioni sull'evento. Ad esempio, l'applicazione può definire categorie separate per i diversi componenti o diverse operazioni.  
  
 Le categorie di eventi sono facoltative. Se l'applicazione non utilizza le categorie, non impostare il <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> e <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> proprietà.  
  
 Per informazioni dettagliate sulla definizione dei messaggi di evento e la creazione di file di risorse di eventi, vedere l'argomento "Messaggio del compilatore" nella documentazione di Platform SDK [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 Esempio di codice seguente determina se l'origine eventi denominata `SampleApplicationSource` è registrato nel computer locale. Se l'origine evento non esiste, l'esempio imposta il file di risorse di messaggio per l'origine e crea la nuova origine evento. Infine, l'esempio di codice imposta il nome visualizzato localizzato per il registro eventi, usando il valore dell'identificatore di risorsa in `DisplayNameMsgId` e il percorso del file di risorse in `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 L'esempio di codice Usa il seguente file di testo messaggio, compilato nella libreria di risorse EventLogMsgs. Un file di testo del messaggio è l'origine da cui viene creato il file di risorse di messaggio. Il file di testo del messaggio definisce il testo per la categoria, messaggio di evento e le stringhe di inserimento di parametro e identificatori di risorsa.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">per la chiamata a qualsiasi membro del <see cref="T:System.Diagnostics.EventSourceCreationData" /> con attendibilità totale. Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="LogName">
      <MemberSignature Language="C#" Value="public string LogName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LogName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberSignature Language="VB.NET" Value="Public Property LogName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LogName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LogName : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome del log eventi nel quale l'origine scrive le voci.</summary>
        <value>Nome del log eventi. Può trattarsi di un nome di log personalizzato o dei log Applicazione o Sistema. Il valore predefinito è "Applicazione".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> proprietà per identificare il registro eventi che l'applicazione scrive le voci con la nuova origine. Il registro eventi può essere un nuovo registro o un log esistente. Servizi e applicazioni scrivono nel registro applicazioni o in un log personalizzato. I driver di dispositivo devono scrivere nel Registro di sistema. Se non si imposta in modo esplicito il <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> proprietà, valore predefinito è il registro eventi nel registro applicazioni.  
  
> [!NOTE]
>  Il Registro di sicurezza è di sola lettura.  
  
 Per un log esistente per la nuova origine di destinazione, impostare il <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> proprietà sul nome del registro eventi esistente. Per creare un nuovo registro eventi per l'origine, è necessario impostare il <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> proprietà. I nomi dei log eventi devono essere composti da caratteri stampabili e non possono contenere i caratteri "*", "?" o "\\". I primi 8 caratteri del nome del registro eventi devono essere diversi dai primi 8 caratteri dei nomi esistenti dei registri eventi nel computer specificato.  
  
 Il sistema operativo archivia i registri eventi come file. Quando si usa <xref:System.Diagnostics.EventLogInstaller> o <xref:System.Diagnostics.EventLog.CreateEventSource%2A> i metodi per creare un nuovo registro eventi, il file associato viene archiviato nella directory %SystemRoot%\System32\Config nel computer specificato. Il nome del file è impostato aggiungendo i primi 8 caratteri di <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> proprietà con l'estensione "evt".  
  
   
  
## Examples  
 Esempio di codice seguente imposta le proprietà di configurazione per un'origine evento dagli argomenti della riga di comando. Gli argomenti di input specificano il nome dell'origine evento, nome registro eventi, nome del computer e file di risorse di messaggio di evento. In questo esempio fa parte di un esempio più esaustivo disponibile per il <xref:System.Diagnostics.EventSourceCreationData> classe.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">per la chiamata a qualsiasi membro del <see cref="T:System.Diagnostics.EventSourceCreationData" /> con attendibilità totale. Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Log" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome del computer in cui registrare l'origine eventi.</summary>
        <value>Nome del sistema in cui registrare l'origine eventi. Il valore predefinito è il computer locale (".").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> valore non può essere una stringa vuota. Se il nome del computer non è impostato in modo esplicito, il valore predefinito nel computer locale (".").  
  
 Quando si registra un'origine in un computer remoto, è necessario disporre dei diritti amministrativi sul computer per scrivere i valori del Registro di sistema con autorizzazioni sufficienti.  
  
   
  
## Examples  
 Esempio di codice seguente imposta le proprietà di configurazione per un'origine evento dagli argomenti della riga di comando. Gli argomenti di input specificano il nome dell'origine evento, nome registro eventi, nome del computer e file di risorse di messaggio di evento. In questo esempio fa parte di un esempio più esaustivo disponibile per il <xref:System.Diagnostics.EventSourceCreationData> classe.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il nome del computer non è valido.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">per la chiamata a qualsiasi membro del <see cref="T:System.Diagnostics.EventSourceCreationData" /> con attendibilità totale. Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MessageResourceFile">
      <MemberSignature Language="C#" Value="public string MessageResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MessageResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MessageResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il percorso del file di risorse del messaggio contenente le stringhe di formattazione del messaggio per l'origine.</summary>
        <value>Percorso del file di risorse del messaggio. Il valore predefinito è una stringa vuota ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> proprietà per configurare un'origine di log eventi per scrivere messaggi di evento localizzati. I messaggi di evento sono stringhe definite dall'applicazione che descrivono l'evento all'utente.  
  
 L'applicazione può scrivere voci del registro eventi tramite identificatori di risorsa. Un identificatore di risorsa indicizza un messaggio che si trova nel <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>. Il Visualizzatore eventi utilizza l'identificatore di risorsa per trovare e visualizzare la stringa corrispondente dal file di risorse messaggio localizzato in base alle impostazioni della lingua corrente.  
  
 L'origine evento deve essere configurato per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci localizzate per un'origine configurata con un file di risorse di messaggio.  
  
 Se l'applicazione scrive le stringhe di messaggio di evento direttamente, anziché utilizzare un identificatore di risorsa in un file di risorse localizzato, non impostare il <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> proprietà.  
  
 Per informazioni dettagliate sulla definizione dei messaggi di evento e la creazione di file di risorse di eventi, vedere l'argomento "Messaggio del compilatore" nella documentazione di Platform SDK [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 Esempio di codice seguente determina se l'origine eventi denominata `SampleApplicationSource` è registrato nel computer locale. Se l'origine evento non esiste, l'esempio imposta il file di risorse di messaggio per l'origine e crea la nuova origine evento. Infine, l'esempio di codice imposta il nome visualizzato localizzato per il registro eventi, usando il valore dell'identificatore di risorsa in `DisplayNameMsgId` e il percorso del file di risorse in `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 L'esempio di codice Usa il seguente file di testo messaggio, compilato nella libreria di risorse EventLogMsgs. Un file di testo del messaggio è l'origine da cui viene creato il file di risorse di messaggio. Il file di testo del messaggio definisce il testo per la categoria, messaggio di evento e le stringhe di inserimento di parametro e identificatori di risorsa.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">per la chiamata a qualsiasi membro del <see cref="T:System.Diagnostics.EventSourceCreationData" /> con attendibilità totale. Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="ParameterResourceFile">
      <MemberSignature Language="C#" Value="public string ParameterResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property ParameterResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParameterResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ParameterResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il percorso del file di risorse che contiene le stringhe dei parametri di messaggio per l'origine.</summary>
        <value>Percorso del file di risorse dei parametri. Il valore predefinito è una stringa vuota ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> proprietà per configurare un'origine di log eventi per scrivere i messaggi di evento localizzata con inserito le stringhe di parametri. Ogni messaggio di evento localizzata specificato nella <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> proprietà può contenere i segnaposto per le stringhe di inserimento. Questi segnaposto vengono utilizzati per specificare la posizione e l'identificatore di risorsa per una stringa indipendente dal linguaggio all'interno del messaggio di evento. Il Visualizzatore eventi sostituisce i segnaposto con le stringhe corrispondenti dal <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> e formatta il messaggio registro eventi per la voce di evento localizzata.  
  
 Ad esempio, la sezione seguente di un file di testo del messaggio definisce una stringa con un segnaposto per il parametro:  
  
```  
  
MessageId = 1501  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_STARTING  
Language=English  
Component %%6050 is starting.  
.  
```  
  
 All'interno del file di risorse di parametro, la stringa di inserimento deve essere definita con l'identificatore di risorsa che corrisponde al segnaposto, come illustrato di seguito:  
  
```  
MessageId = 6050  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_NAME_MSGID  
Language=English  
TRIGGER.EXE  
.  
```  
  
 L'origine evento deve essere configurato per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A> metodo per scrivere voci localizzate per un'origine configurata con un file di risorse di messaggio.  
  
 Se l'applicazione scrive le stringhe di messaggio di evento direttamente nel registro eventi o se il <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> proprietà non contiene messaggi di inserimento dei segnaposto di parametri, non impostare il <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> proprietà.  
  
 Per informazioni dettagliate sulla definizione dei messaggi di evento e la creazione di file di risorse di eventi, vedere l'argomento "Messaggio del compilatore" nella documentazione di Platform SDK [ http://msdn.microsoft.com ](http://msdn.microsoft.com/).  
  
   
  
## Examples  
 Esempio di codice seguente determina se l'origine eventi denominata `SampleApplicationSource` è registrato nel computer locale. Se l'origine evento non esiste, l'esempio imposta il file di risorse di messaggio per l'origine e crea la nuova origine evento. Infine, l'esempio di codice imposta il nome visualizzato localizzato per il registro eventi, usando il valore dell'identificatore di risorsa in `DisplayNameMsgId` e il percorso del file di risorse in `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 L'esempio di codice Usa il seguente file di testo messaggio, compilato nella libreria di risorse EventLogMsgs. Un file di testo del messaggio è l'origine da cui viene creato il file di risorse di messaggio. Il file di testo del messaggio definisce il testo per la categoria, messaggio di evento e le stringhe di inserimento di parametro e identificatori di risorsa. In particolare, il messaggio definito per l'identificatore di risorsa 1004 Usa un segnaposto per la stringa di un parametro definita per l'identificatore di risorsa 5002.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">per la chiamata a qualsiasi membro del <see cref="T:System.Diagnostics.EventSourceCreationData" /> con attendibilità totale. Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome da registrare con il log eventi come origine dell'evento.</summary>
        <value>Nome da registrare con il log eventi come origine delle voci. Il valore predefinito è una stringa vuota ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome di origine è spesso il nome dell'applicazione o il nome di un componente all'interno di un'applicazione di grandi dimensioni. Il <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> metodo utilizza il <xref:System.Diagnostics.EventSourceCreationData.Source%2A>, <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>, e <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> proprietà per creare i valori del Registro di sistema nel computer di destinazione per la nuova origine e il log eventi associato. Un nuovo nome di origine non può corrispondere a un nome di origine esistente o un nome registro eventi esistenti nel computer di destinazione.  
  
 Dopo aver creati i valori del Registro di sistema per l'origine, l'applicazione può utilizzare l'origine per scrivere voci nel registro eventi configurata.  
  
 Ogni origine può solo scrivere in un log eventi alla volta. Tuttavia, l'applicazione può utilizzare più origini per scrivere più registri eventi. Ad esempio, l'applicazione potrebbe richiedere più origini configurate per diversi log eventi o i file di risorse diverso.  
  
   
  
## Examples  
 Esempio di codice seguente imposta le proprietà di configurazione per un'origine evento dagli argomenti della riga di comando. Gli argomenti di input specificano il nome dell'origine evento, nome registro eventi, nome del computer e file di risorse di messaggio di evento. In questo esempio fa parte di un esempio più esaustivo disponibile per il <xref:System.Diagnostics.EventSourceCreationData> classe.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">per la chiamata a qualsiasi membro del <see cref="T:System.Diagnostics.EventSourceCreationData" /> con attendibilità totale. Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>