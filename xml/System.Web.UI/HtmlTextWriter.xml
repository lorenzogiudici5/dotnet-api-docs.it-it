<Type Name="HtmlTextWriter" FullName="System.Web.UI.HtmlTextWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="af8f991439f7736c149055fbe0947bc4fe033387" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52202763" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HtmlTextWriter : System.IO.TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HtmlTextWriter extends System.IO.TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class HtmlTextWriter&#xA;Inherits TextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlTextWriter : System::IO::TextWriter" />
  <TypeSignature Language="F#" Value="type HtmlTextWriter = class&#xA;    inherit TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Scrive caratteri di markup e testo in un flusso di output di un controllo server ASP.NET. Questa classe fornisce le funzionalità di formattazione utilizzate dai controlli server ASP.NET per il rendering di markup sui client.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter> classe viene utilizzata per eseguire il rendering HTML 4.0 per i browser desktop. Il <xref:System.Web.UI.HtmlTextWriter> è anche la classe di base per tutti i writer di markup nel <xref:System.Web.UI> dello spazio dei nomi, tra cui le <xref:System.Web.UI.ChtmlTextWriter>, <xref:System.Web.UI.Html32TextWriter>, e <xref:System.Web.UI.XhtmlTextWriter> classi. Queste classi vengono utilizzate per scrivere gli elementi, attributi e le informazioni di stile e il layout per tipi diversi di markup. Inoltre, queste classi vengono usate dalle classi adapter pagine e controlli associati a ogni linguaggio di markup.  
  
 Nella maggior parte dei casi, ASP.NET usa automaticamente il writer appropriato per il dispositivo richiedente. Tuttavia, se si crea un writer di testo personalizzato o se si desidera specificare un determinato writer per eseguire il rendering di una pagina per un dispositivo specifico, è necessario mappare il writer alla pagina di `controlAdapters` sezione del file con estensione dell'applicazione.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire l'override di <xref:System.Web.UI.Control.Render%2A> metodo di un controllo personalizzato derivato dal <xref:System.Web.UI.Control> classe. L'esempio di codice viene illustrato come usare vari <xref:System.Web.UI.HtmlTextWriter> metodi, proprietà e campi.  
  
 [!code-csharp[MarkupTextWriter_Samples1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#1)]
 [!code-vb[MarkupTextWriter_Samples1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.TextWriter" />
    <altmember cref="T:System.Web.UI.Control" />
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="T:System.Web.UI.Adapters.ControlAdapter" />
    <altmember cref="T:System.Web.UI.Adapters.PageAdapter" />
    <altmember cref="T:System.Web.UI.ChtmlTextWriter" />
    <altmember cref="T:System.Web.UI.Html32TextWriter" />
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
    <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.HtmlTextWriter" />.</summary>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.HtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.HtmlTextWriter" Usage="new System.Web.UI.HtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Istanza <see cref="T:System.IO.TextWriter" /> che esegue il rendering del contenuto del markup.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.HtmlTextWriter" /> che utilizza una stringa di tabulazioni predefinita.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> eseguire l'overload del <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> costruttore Usa il <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> costante quando è necessario il rientro di una riga. Chiama il <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> overload per inizializzare la nuova istanza.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> costruttore per creare una classe personalizzata <xref:System.Web.UI.HtmlTextWriter> oggetto denominato `StyledLabelHtmlWriter.` quando la `MyPage` classe personalizzata derivata dal <xref:System.Web.UI.Page> classe, viene richiesto da un client browser, viene utilizzato il `StyledLabelHtmlWriter` classe per il rendering del relativo contenuto nel flusso di output.  
  
 [!code-cpp[HtmlTextWriter_Methods3#10](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#10)]
 [!code-csharp[HtmlTextWriter_Methods3#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#10)]
 [!code-vb[HtmlTextWriter_Methods3#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.HtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.HtmlTextWriter" Usage="new System.Web.UI.HtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">Oggetto <see cref="T:System.IO.TextWriter" /> che esegue il rendering del contenuto del markup.</param>
        <param name="tabString">Stringa da utilizzare per eseguire il rendering di un rientro di riga.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.HtmlTextWriter" /> con un carattere di stringa di tabulazioni specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> eseguire l'overload del <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> costruttore Usa `tabString` quando è necessario il rientro di una riga. Chiama il <xref:System.IO.TextWriter.%23ctor%28System.IFormatProvider%29?displayProperty=nameWithType> costruttore di base per inizializzare la nuova istanza.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> costruttore per creare una classe personalizzata <xref:System.Web.UI.HtmlTextWriter> oggetto denominato `StyledLabelHtmlWriter.` quando la `MyPage` classe personalizzata derivata dal <xref:System.Web.UI.Page> classe, viene richiesto da un client browser, viene utilizzato il `StyledLabelHtmlWriter` classe per il rendering del relativo contenuto nel flusso di output.  
  
 [!code-cpp[HtmlTextWriter_Methods3#10](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#10)]
 [!code-csharp[HtmlTextWriter_Methods3#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#10)]
 [!code-vb[HtmlTextWriter_Methods3#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aggiunge il valore e l'attributo di markup specificato al tag di apertura dell'elemento creato dall'oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> con una chiamata successiva al metodo <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : string * string -&gt; unit&#xA;override this.AddAttribute : string * string -&gt; unit" Usage="htmlTextWriter.AddAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Stringa contenente il nome dell'attributo da aggiungere.</param>
        <param name="value">Stringa contenente il valore da assegnare all'attributo.</param>
        <summary>Aggiunge il valore e l'attributo di markup specificato al tag di apertura dell'elemento creato dall'oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> con una chiamata successiva al metodo <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> eseguire l'overload del <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%29> metodo, se l'attributo non è uno del <xref:System.Web.UI.HtmlTextWriterAttribute> valori, o se l'attributo non è noto fino alla fase di esecuzione.  
  
 Per un'istanza di qualsiasi elemento di markup specificato, il <xref:System.Web.UI.HtmlTextWriter> classe gestisce un elenco di attributi per quell'elemento. Quando la <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> viene chiamato il metodo eventuali attributi aggiunti dal <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metodo vengono sottoposti a rendering nel tag di apertura dell'elemento. L'elenco degli attributi verrà quindi cancellata dal <xref:System.Web.UI.HtmlTextWriter> oggetto.  
  
 Il modello di codifica per il rendering di elementi di markup è come segue:  
  
-   Usare il <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metodo per aggiungere attributi all'elemento.  
  
-   Usare il metodo <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>.  
  
-   Usare altri metodi in base alle esigenze per il rendering del contenuto trovato tra l'elemento tag di apertura e chiusura.  
  
-   Usare il metodo <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come chiamare le <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metodo prima di chiamare il <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> (metodo). Il codice chiama due overload diverso del <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> e due diversi overload di <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> prima di chiamare le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodo per eseguire il rendering di un `<span>` elemento nel flusso di output. Il <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%29> metodo viene utilizzato per definire l'attributo personalizzato denominato `CustomAttribute` e il valore personalizzato denominato `CustomAttributeValue` per il `<span>` che questo codice esegue il rendering.  
  
 [!code-csharp[MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#2)]
 [!code-vb[MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (key As HtmlTextWriterAttribute, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::Web::UI::HtmlTextWriterAttribute key, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string -&gt; unit&#xA;override this.AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string -&gt; unit" Usage="htmlTextWriter.AddAttribute (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Oggetto <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> che rappresenta l'attributo di markup da aggiungere al flusso di output.</param>
        <param name="value">Stringa contenente il valore da assegnare all'attributo.</param>
        <summary>Aggiunge l'attributo di markup e il valore dell'attributo al tag di apertura dell'elemento creato dall'oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> con una chiamata successiva al metodo <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> eseguire l'overload del <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> metodo per eseguire il rendering di un attributo di markup standard.  
  
 Per un'istanza di qualsiasi elemento di markup specificato, il <xref:System.Web.UI.HtmlTextWriter> classe gestisce un elenco di attributi per quell'elemento. Quando la <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodo viene chiamato, tutti gli attributi aggiunti dal <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metodo vengono sottoposti a rendering nel tag di apertura dell'elemento. L'elenco degli attributi verrà quindi cancellata dal <xref:System.Web.UI.HtmlTextWriter>.  
  
 Il modello di codifica per il rendering di elementi di markup è come segue:  
  
-   Usare il <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metodo per aggiungere attributi all'elemento.  
  
-   Usare il metodo <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>.  
  
-   Usare altri metodi in base alle esigenze per il rendering del contenuto trovato tra l'elemento tag di apertura e chiusura.  
  
-   Usare il metodo <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> overload del <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> metodo per aggiungere un `Onclick` attributo a un elemento di markup e quindi impostarne il valore per il codice ECMAScript seguente:  
  
```  
alert('Hello');  
```  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#1)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value, bool fEndode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value, bool fEndode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (name As String, value As String, fEndode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value, bool fEndode);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : string * string * bool -&gt; unit&#xA;override this.AddAttribute : string * string * bool -&gt; unit" Usage="htmlTextWriter.AddAttribute (name, value, fEndode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEndode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Stringa contenente il nome dell'attributo da aggiungere.</param>
        <param name="value">Stringa contenente il valore da assegnare all'attributo.</param>
        <param name="fEndode">
          <see langword="true" /> per codificare l'attributo e il relativo valore; in caso contrario, <see langword="false" />.</param>
        <summary>Aggiunge il valore e l'attributo di markup specificato al tag di apertura dell'elemento creato dall'oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> con una chiamata successiva del metodo <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />, con codifica aggiuntiva.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> eseguire l'overload del <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> metodo, se l'attributo non è uno del <xref:System.Web.UI.HtmlTextWriterAttribute> valori o se l'attributo non è noto fino alla fase di esecuzione e la codifica non è necessaria.  
  
 Per un'istanza di qualsiasi elemento di markup specificato, il <xref:System.Web.UI.HtmlTextWriter> classe gestisce un elenco di attributi per quell'elemento. Quando la <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> viene chiamato il metodo eventuali attributi aggiunti dal <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metodo vengono sottoposti a rendering nel tag di apertura dell'elemento. L'elenco degli attributi verrà quindi cancellata dal <xref:System.Web.UI.HtmlTextWriter> oggetto.  
  
 Usare la <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> metodo con `fEncode` impostato su `true`, se l'attributo può contenere un segno di virgolette ("), un segno di minore (<), o una e commerciale (&). La chiamata al metodo verrà codificare l'attributo per soddisfare i requisiti del dispositivo richiedente. È possibile impostare `fEncode` a `false`, se si sa che nessuno di questi caratteri viene generato o se si sa che l'attributo è già codificato.  
 
Se il tipo dell'attributo `Style`, il valore non può essere codificato anche se `fEndode` è `true`. Assicurarsi che il valore di stile CSS è conforme e non contenga codice dannoso.
  
 Il modello di codifica per il rendering di elementi di markup è come segue:  
  
-   Usare il <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metodo per aggiungere attributi all'elemento.  
  
-   Usare il metodo <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>.  
  
-   Usare altri metodi in base alle esigenze per il rendering del contenuto trovato tra l'elemento tag di apertura e chiusura.  
  
-   Usare il metodo <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> eseguire l'overload del <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> metodo per assicurarsi che un attributo personalizzato, denominato `myattribute`, e il relativo valore non sono codificati per un `<img>` elemento.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddAttribute (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddAttribute (name As String, value As String, key As HtmlTextWriterAttribute)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; unit&#xA;override this.AddAttribute : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; unit" Usage="htmlTextWriter.AddAttribute (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Stringa contenente il nome dell'attributo da aggiungere.</param>
        <param name="value">Stringa contenente il valore da assegnare all'attributo.</param>
        <param name="key">Oggetto <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> che rappresenta l'attributo.</param>
        <summary>Aggiunge il valore e l'attributo di markup specificato, oltre a un valore di enumerazione <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />, al tag di apertura dell'elemento creato dall'oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> con una chiamata successiva del metodo <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> eseguire l'overload del <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Web.UI.HtmlTextWriterAttribute%29> metodo solo quando si eredita dal <xref:System.Web.UI.HtmlTextWriter> classe. Consente di creare nuovi `name` e `key` coppie per gli attributi.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (key As HtmlTextWriterAttribute, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::Web::UI::HtmlTextWriterAttribute key, System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string * bool -&gt; unit&#xA;override this.AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string * bool -&gt; unit" Usage="htmlTextWriter.AddAttribute (key, value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">Oggetto <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> che rappresenta l'attributo di markup da aggiungere al flusso di output.</param>
        <param name="value">Stringa contenente il valore da assegnare all'attributo.</param>
        <param name="fEncode">
          <see langword="true" /> per codificare l'attributo e il relativo valore; in caso contrario, <see langword="false" />.</param>
        <summary>Aggiunge l'attributo di markup e il valore dell'attributo al tag di apertura dell'elemento creato dall'oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> con una chiamata successiva del metodo <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />, con codifica facoltativa.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> eseguire l'overload del <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> metodo per eseguire il rendering di un attributo di markup standard, con codifica facoltativa.  
  
 Per un'istanza di qualsiasi elemento di markup specificato, il <xref:System.Web.UI.HtmlTextWriter> classe gestisce un elenco di attributi per quell'elemento. Quando la <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> viene chiamato il metodo eventuali attributi aggiunti dal <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> vengono sottoposti a rendering nel tag di apertura dell'elemento. L'elenco degli attributi verrà quindi cancellata dal <xref:System.Web.UI.HtmlTextWriter> oggetto.  
  
 Usare la <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> metodo con `fEncode` impostato su `true`, se l'attributo può contenere un segno di virgolette ("), un segno di minore (<), o una e commerciale (&). La chiamata al metodo verrà codificare l'attributo per soddisfare i requisiti del dispositivo richiedente. È possibile impostare `fEncode` a `false`, se si sa che nessuno di questi caratteri viene generato o se si sa che l'attributo è già codificato.  
 
 Se il tipo dell'attributo `Style`, il valore non può essere codificato anche se `fEncode` è `true`. Assicurarsi che il valore di stile CSS è conforme e non contenga codice dannoso.

  
 Il modello di codifica per il rendering di elementi di markup è come segue:  
  
-   Usare il <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metodo per aggiungere attributi all'elemento.  
  
-   Usare il metodo <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>.  
  
-   Usare altri metodi in base alle esigenze per il rendering del contenuto trovato tra l'elemento tag di apertura e chiusura.  
  
-   Usare il metodo <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> metodo per assicurarsi che il valore stringa che viene assegnato a un `Alt` dell'attributo per un `<img>` elemento viene codificato per il dispositivo richiedente.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddStyleAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aggiunge un attributo di stile markup al tag di apertura dell'elemento creato dall'oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> con una chiamata successiva del metodo <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </MemberGroup>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddStyleAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddStyleAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddStyleAttribute : string * string -&gt; unit&#xA;override this.AddStyleAttribute : string * string -&gt; unit" Usage="htmlTextWriter.AddStyleAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Stringa contenente l'attributo di stile da aggiungere.</param>
        <param name="value">Stringa contenente il valore da assegnare all'attributo.</param>
        <summary>Aggiunge l'attributo di stile del markup specificato e il valore dell'attributo al tag del markup di apertura creato da una chiamata successiva del metodo <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> eseguire l'overload del <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%29> metodo quando lo stile non è un membro del <xref:System.Web.UI.HtmlTextWriterStyle> enumerazione o non è noto fino alla fase di esecuzione.  
  
 Il <xref:System.Web.UI.HtmlTextWriter> classe gestisce un elenco di stili per gli elementi di markup viene eseguito il rendering. Quando la <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodo viene chiamato, tutti gli stili che vengono aggiunti per il <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metodo vengono sottoposti a rendering nel tag di apertura dell'elemento. Viene quindi cancellato l'elenco degli stili.  
  
 Il modello di codifica per il rendering di elementi di markup è come segue:  
  
-   Usare il <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metodo per aggiungere gli stili di attributi all'elemento.  
  
-   Usare il metodo <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>.  
  
-   Usare altri metodi in base alle esigenze per il rendering del contenuto trovato tra l'elemento tag di apertura e chiusura.  
  
-   Usare il metodo <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> eseguire l'overload del <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%29> metodo per eseguire il rendering `font-size` e `color` gli attributi di stile in un `<p>` elemento. Questo esempio di codice Usa il <xref:System.Web.UI.HtmlTextWriter> classe per il rendering del contenuto del controllo.  
  
 [!code-cpp[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/CPP/htmltextwriter_addstyleattribute.cpp#1)]
 [!code-csharp[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/CS/htmltextwriter_addstyleattribute.cs#1)]
 [!code-vb[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/VB/htmltextwriter_addstyleattribute.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (System.Web.UI.HtmlTextWriterStyle key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(valuetype System.Web.UI.HtmlTextWriterStyle key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddStyleAttribute (key As HtmlTextWriterStyle, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddStyleAttribute(System::Web::UI::HtmlTextWriterStyle key, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddStyleAttribute : System.Web.UI.HtmlTextWriterStyle * string -&gt; unit&#xA;override this.AddStyleAttribute : System.Web.UI.HtmlTextWriterStyle * string -&gt; unit" Usage="htmlTextWriter.AddStyleAttribute (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Oggetto <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> che rappresenta l'attributo di stile da aggiungere al flusso di output.</param>
        <param name="value">Stringa contenente il valore da assegnare all'attributo.</param>
        <summary>Aggiunge l'attributo di stile markup associato al valore <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> specificato e il valore dell'attributo al tag del markup di apertura creato da una chiamata successiva del metodo <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> eseguire l'overload del <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%29> metodo quando lo stile è un membro del <xref:System.Web.UI.HtmlTextWriterStyle> enumerazione e, in genere prima della fase di esecuzione.  
  
 Il <xref:System.Web.UI.HtmlTextWriter> classe gestisce un elenco di stili per gli elementi di markup viene eseguito il rendering. Quando la <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodo viene chiamato, qualsiasi stile aggiunto tramite il <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metodo vengono sottoposti a rendering nel tag di apertura dell'elemento. Viene quindi cancellato l'elenco degli stili.  
  
 Il modello di codifica per il rendering di elementi di markup è come segue:  
  
-   Usare il <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metodo per aggiungere gli stili di attributi all'elemento.  
  
-   Usare il metodo <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>.  
  
-   Usare altri metodi in base alle esigenze per il rendering del contenuto trovato tra l'elemento tag di apertura e chiusura.  
  
-   Usare il metodo <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare parte di un override del <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodo in una classe derivata dal <xref:System.Web.UI.HtmlTextWriter> classe. Il codice controlla se un `<Label>` elemento viene eseguito il rendering. In questo caso, il <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> viene chiamato per verificare se un `Color` attributo di stile definito per il `<Label>` elemento. Se un `Color` attributo non è stato definito, il codice chiama l'overload del <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> per aggiungere il `Color` attributo all'attributo di stile e quindi impostarne il valore su `red`.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddStyleAttribute (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddStyleAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddStyleAttribute (name As String, value As String, key As HtmlTextWriterStyle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddStyleAttribute(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="abstract member AddStyleAttribute : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; unit&#xA;override this.AddStyleAttribute : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; unit" Usage="htmlTextWriter.AddStyleAttribute (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Stringa contenente l'attributo di stile da aggiungere.</param>
        <param name="value">Stringa contenente il valore da assegnare all'attributo.</param>
        <param name="key">Oggetto <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> che rappresenta l'attributo di stile da aggiungere.</param>
        <summary>Aggiunge l'attributo di stile del markup specificato e il valore dell'attributo, oltre a un valore di enumerazione <see cref="T:System.Web.UI.HtmlTextWriterStyle" />, al markup di apertura creato da una chiamata successiva del metodo <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> eseguire l'overload del <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%2CSystem.Web.UI.HtmlTextWriterStyle%29> metodo solo quando si eredita dal <xref:System.Web.UI.HtmlTextWriter> classe. Consente di creare nuovi `name` e `value` coppie per <xref:System.Web.UI.HtmlTextWriterStyle> attributi.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="BeginRender">
      <MemberSignature Language="C#" Value="public virtual void BeginRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.BeginRender" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginRender ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginRender();" />
      <MemberSignature Language="F#" Value="abstract member BeginRender : unit -&gt; unit&#xA;override this.BeginRender : unit -&gt; unit" Usage="htmlTextWriter.BeginRender " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Notifica a un oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> o a un oggetto di una classe derivata che si sta per eseguire il rendering di un controllo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter> implementazione della classe di <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> metodo non presenta alcuna funzionalità. È necessario eseguire l'override di <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> metodo in una classe derivata da <xref:System.Web.UI.HtmlTextWriter> per fornire la funzionalità di rendering. Ad esempio, in un linguaggio di markup che potrebbe richiedere `<p>` gli elementi da sottoporre a rendering immediatamente prima di un controllo, ma nei quali la necessità del `<p>` elemento viene determinato in precedenza, è possibile usare il <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> eseguire l'override.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.Control" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="htmlTextWriter.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chiude l'oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> e rilascia tutte le risorse di sistema a esso associate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa implementazione del <xref:System.Web.UI.HtmlTextWriter.Close%2A> chiamate al metodo il <xref:System.IO.TextWriter.Close%2A?displayProperty=nameWithType> metodo di base.  
  
 Segue una chiamata ai <xref:System.Web.UI.HtmlTextWriter.Close%2A> metodo, qualsiasi operazione sul <xref:System.Web.UI.HtmlTextWriter> oggetto potrebbe generare eccezioni perché sono state rilasciate tutte le relative risorse.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.IO.TextWriter.Close" />
        <altmember cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="DefaultTabString">
      <MemberSignature Language="C#" Value="public const string DefaultTabString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultTabString" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultTabString As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultTabString;" />
      <MemberSignature Language="F#" Value="val mutable DefaultTabString : string" Usage="System.Web.UI.HtmlTextWriter.DefaultTabString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Rappresenta un singolo carattere di tabulazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Singola scheda è rappresentata dal carattere ASCII 9.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come creare un costruttore che accetta un <xref:System.IO.TextWriter> oggetto come parametro e passa il <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> campo come argomento un parametro a una seconda versione del costruttore. Quando questo costruttore viene chiamato dal codice, il <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> campo consente di definire i criteri di rientro per l'istanza del writer di markup che viene usato da una pagina o un adapter.  
  
 [!code-csharp[MarkupTextWriter_Methods3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#1)]
 [!code-vb[MarkupTextWriter_Methods3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="DoubleQuoteChar">
      <MemberSignature Language="C#" Value="public const char DoubleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char DoubleQuoteChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.DoubleQuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Const DoubleQuoteChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char DoubleQuoteChar;" />
      <MemberSignature Language="F#" Value="val mutable DoubleQuoteChar : char" Usage="System.Web.UI.HtmlTextWriter.DoubleQuoteChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Rappresenta il carattere virgolette doppie (").</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> campo viene utilizzato il <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metodo per chiudere un attributo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire il rendering di un `border` dell'attributo per un `<table>` elemento. Il codice chiama il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo per eseguire il rendering dell'attributo e il valore e viene utilizzato il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo per eseguire il rendering le <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> e <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> campi.  
  
 Questo esempio di codice viene eseguito il rendering di markup seguente:  
  
 `border="1"`  
  
 [!code-csharp[MarkupTextWriter_Constants#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#6)]
 [!code-vb[MarkupTextWriter_Constants#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.Write" />
        <altmember cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EncodeAttributeValue">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Codifica il valore dell'attributo di markup specificato in base ai requisiti dell'oggetto <see cref="T:System.Web.HttpRequest" /> del contesto corrente.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected string EncodeAttributeValue (string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeAttributeValue(string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EncodeAttributeValue (value As String, fEncode As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ EncodeAttributeValue(System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="member this.EncodeAttributeValue : string * bool -&gt; string" Usage="htmlTextWriter.EncodeAttributeValue (value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Stringa contenente il valore dell'attributo da codificare.</param>
        <param name="fEncode">
          <see langword="true" /> per codificare il valore dell'attributo; in caso contrario, <see langword="false" />.</param>
        <summary>Codifica il valore dell'attributo di markup specificato in base ai requisiti dell'oggetto <see cref="T:System.Web.HttpRequest" /> del contesto corrente.</summary>
        <returns>Stringa contenente il valore dell'attributo codificato, <see langword="null" /> se <paramref name="value" /> è vuoto oppure il valore dell'attributo non codificato se <paramref name="fEncode" /> è <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> eseguire l'overload del <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> metodo, se l'attributo non è un <xref:System.Web.UI.HtmlTextWriterAttribute> valore di enumerazione o non è noto fino alla fase di esecuzione.  
  
 Il <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> metodo rimuove le virgolette doppie ("), la e commerciale (&) e minore di quanto non generati segni (<) in modo che i tag che non è valido, indipendentemente dall'input. L'effettiva codifica avviene mediante il <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> (metodo).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come chiamare il <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> metodo come parametro in un <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> chiamata al metodo e quindi consente di codificare un `color:blue` valore dell'attributo di stile.  
  
 [!code-cpp[HtmlTextWriter_Methods#5](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#5)]
 [!code-csharp[HtmlTextWriter_Methods#5](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#5)]
 [!code-vb[HtmlTextWriter_Methods#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected virtual string EncodeAttributeValue (System.Web.UI.HtmlTextWriterAttribute attrKey, string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string EncodeAttributeValue(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.Web.UI.HtmlTextWriterAttribute,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function EncodeAttributeValue (attrKey As HtmlTextWriterAttribute, value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ EncodeAttributeValue(System::Web::UI::HtmlTextWriterAttribute attrKey, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member EncodeAttributeValue : System.Web.UI.HtmlTextWriterAttribute * string -&gt; string&#xA;override this.EncodeAttributeValue : System.Web.UI.HtmlTextWriterAttribute * string -&gt; string" Usage="htmlTextWriter.EncodeAttributeValue (attrKey, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrKey">Oggetto <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> che rappresenta l'attributo di markup.</param>
        <param name="value">Stringa contenente il valore dell'attributo da codificare.</param>
        <summary>Codifica il valore dell'attributo di markup specificato in base ai requisiti dell'oggetto <see cref="T:System.Web.HttpRequest" /> del contesto corrente.</summary>
        <returns>Stringa contenente il valore dell'attributo codificato</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> metodo rimuove le virgolette doppie ("), la e commerciale (&) e minore di quanto non generati segni (<) in modo che i tag che non è valido, indipendentemente dall'input. L'effettiva codifica avviene mediante il <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="EncodeUrl">
      <MemberSignature Language="C#" Value="protected string EncodeUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeUrl(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EncodeUrl (url As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ EncodeUrl(System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.EncodeUrl : string -&gt; string" Usage="htmlTextWriter.EncodeUrl url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">Stringa contenente l'URL da codificare.</param>
        <summary>Esegue una codifica URL minima convertendo nella stringa "%20" gli spazi presenti nell'URL specificato.</summary>
        <returns>Stringa contenente l'URL codificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Codifica dell'URL di un carattere è costituito da un simbolo di percentuale (%), seguito dalla rappresentazione esadecimale a due cifre (maiuscole) del punto di codice latino ISO per il carattere. La rappresentazione esadecimale di uno spazio è 20.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come chiamare le <xref:System.Web.UI.HtmlTextWriter.EncodeUrl%2A> metodo per convertire gli spazi presenti l'URL che viene passato come parametro in un <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> chiamata al metodo.  
  
 [!code-cpp[HtmlTextWriter_Methods#6](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#6)]
 [!code-csharp[HtmlTextWriter_Methods#6](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#6)]
 [!code-vb[HtmlTextWriter_Methods#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.UrlPathEncode(System.String)" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public override System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding" Usage="System.Web.UI.HtmlTextWriter.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la codifica utilizzata dall'oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> per scrivere il contenuto nella pagina.</summary>
        <value>Oggetto <see cref="T:System.Text.Encoding" /> in cui viene scritto il markup nella pagina.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.Encoding%2A> proprietà ottenga il valore dalla base <xref:System.IO.TextWriter> oggetto.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.Encoding%2A> proprietà da scrivere il tipo di codifica che usa un controllo personalizzato per il rendering del testo per la pagina che lo contiene.  
  
 [!code-cpp[HtmlTextWriter_Properties#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CPP/htmltextwriter_properties1.cpp#2)]
 [!code-csharp[HtmlTextWriter_Properties#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CS/htmltextwriter_properties1.cs#2)]
 [!code-vb[HtmlTextWriter_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Properties/VB/htmltextwriter_properties1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="EndRender">
      <MemberSignature Language="C#" Value="public virtual void EndRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EndRender" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndRender ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndRender();" />
      <MemberSignature Language="F#" Value="abstract member EndRender : unit -&gt; unit&#xA;override this.EndRender : unit -&gt; unit" Usage="htmlTextWriter.EndRender " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Notifica a un oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> o a un oggetto di una classe derivata che un il rendering di un controllo è completato. È possibile utilizzare questo metodo per chiudere gli elementi markup aperti nel metodo <see cref="M:System.Web.UI.HtmlTextWriter.BeginRender" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter> implementazione della classe di <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> metodo non presenta alcuna funzionalità. È necessario eseguire l'override <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> in una classe derivata dal <xref:System.Web.UI.HtmlTextWriter> classe per fornire funzionalità di rendering.  
  
 È possibile usare la <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> metodo per chiudere tutti gli elementi markup aperti nel <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.BeginRender" />
      </Docs>
    </Member>
    <Member MemberName="EndTagLeftChars">
      <MemberSignature Language="C#" Value="public const string EndTagLeftChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EndTagLeftChars" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EndTagLeftChars" />
      <MemberSignature Language="VB.NET" Value="Public Const EndTagLeftChars As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EndTagLeftChars;" />
      <MemberSignature Language="F#" Value="val mutable EndTagLeftChars : string" Usage="System.Web.UI.HtmlTextWriter.EndTagLeftChars" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Rappresenta la parentesi uncinata aperta e la barra (&lt;/) del tag di chiusura di un elemento di markup.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.EndTagLeftChars> campo viene utilizzato il <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodo per costruire i tag di fine elemento di markup.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire il rendering del tag di chiusura di un `<table>` elemento di markup usando il <xref:System.Web.UI.HtmlTextWriter.EndTagLeftChars> e il <xref:System.Web.UI.HtmlTextWriter.TagRightChar> campi come valori di parametro nelle chiamate al <xref:System.Web.UI.HtmlTextWriter.Write%2A> (metodo).  
  
 Questo esempio di codice viene eseguito il rendering di markup seguente:  
  
 `</table>`  
  
 [!code-csharp[MarkupTextWriter_Constants#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#4)]
 [!code-vb[MarkupTextWriter_Constants#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EnterStyle">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Scrive il tag di apertura di un elemento di markup contenente attributi che implementano il layout e la formattazione dei caratteri dello stile specificato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EnterStyle(System.Web.UI.WebControls.Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EnterStyle(System::Web::UI::WebControls::Style ^ style);" />
      <MemberSignature Language="F#" Value="abstract member EnterStyle : System.Web.UI.WebControls.Style -&gt; unit&#xA;override this.EnterStyle : System.Web.UI.WebControls.Style -&gt; unit" Usage="htmlTextWriter.EnterStyle style" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
      </Parameters>
      <Docs>
        <param name="style">Oggetto <see cref="T:System.Web.UI.WebControls.Style" /> che specifica l'inizio dell'applicazione del layout e della formattazione al blocco di markup.</param>
        <summary>Scrive il tag di apertura di un elemento <see langword="&lt;span&gt;" /> contenente attributi che implementano il layout e la formattazione dei caratteri dello stile specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metodo per applicare stili, ad esempio la larghezza del bordo o un colore di sfondo, a un blocco di markup.  
  
 Il <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> e <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> metodi consentono a un adattatore di periferica o un controllo creare il markup che utilizza la formattazione dei caratteri dello stile specificato. Usare lo stesso valore per `style` nella <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metodo da utilizzare nel corrispondente <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> (metodo).  
  
 Il <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> eseguire l'overload del <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29> metodo esegue il rendering del tag di apertura di un `<span>` elemento. Questo metodo aggiunge quindi gli attributi di stile e gli attributi necessari per il tag di apertura del `<span>` elemento per visualizzare le impostazioni specificate dal <xref:System.Web.UI.WebControls.Style> oggetto. Se si desidera eseguire il rendering di un elemento di markup diversi per contenere gli attributi e gli attributi di stile, usare il <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> rapporto di overload.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare una classe personalizzata denominata `TextSample`, derivata dal <xref:System.Web.UI.WebControls.WebControl> (classe), che usa il <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metodo per applicare un <xref:System.Web.UI.WebControls.Style.ForeColor%2A> stile da una stringa di testo.  
  
 Il <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metodo esegue il rendering HTML `<span style="color:Navy;">`. Il <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> chiamata al metodo chiude il `<span>` elemento dopo il testo è stato eseguito il rendering.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.ExitStyle" />
      </Docs>
    </Member>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EnterStyle(System.Web.UI.WebControls.Style,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EnterStyle(System::Web::UI::WebControls::Style ^ style, System::Web::UI::HtmlTextWriterTag tag);" />
      <MemberSignature Language="F#" Value="abstract member EnterStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit&#xA;override this.EnterStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="htmlTextWriter.EnterStyle (style, tag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="style">Oggetto <see cref="T:System.Web.UI.WebControls.Style" /> che specifica l'inizio dell'applicazione del layout e della formattazione al blocco di markup.</param>
        <param name="tag">Oggetto <see cref="T:System.Web.UI.HtmlTextWriterTag" /> che specifica il tag di apertura dell'elemento di markup che conterrà l'oggetto stile specificato in <paramref name="style" />.</param>
        <summary>Scrive il tag di apertura di un elemento di markup contenente attributi che implementano il layout e la formattazione dei caratteri dello stile specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metodo per applicare stili, ad esempio la larghezza del bordo o un colore di sfondo, a un blocco di markup.  
  
 Il <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> e <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> metodi consentono a un adattatore di periferica o un controllo creare il markup che utilizza la formattazione dei caratteri dello stile specificato. Usare lo stesso valore per `style` nella <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metodo da utilizzare nel corrispondente <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> (metodo).  
  
 Il <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> eseguire l'overload del <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> metodo esegue il rendering dei tag di apertura dell'elemento specificato dalla `tag` parametro. Il <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> metodo aggiunge quindi gli attributi necessari e gli attributi di stile per il tag di apertura dell'elemento per visualizzare le impostazioni specificate per il <xref:System.Web.UI.WebControls.Style> oggetto. Usare la <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29> overload per il rendering del tag di apertura di un `<span>` elemento.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare una classe personalizzata denominata `TextSample`, derivata dal <xref:System.Web.UI.WebControls.WebControl> (classe), che usa il <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metodo per applicare un <xref:System.Web.UI.WebControls.Style.ForeColor%2A> stile da una stringa di testo.  
  
 Il <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metodo esegue il rendering HTML`<span style="color:Navy;">`. Il <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> chiamata al metodo chiude il `<span>` elemento dopo il testo è stato eseguito il rendering.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.ExitStyle" />
      </Docs>
    </Member>
    <Member MemberName="EqualsChar">
      <MemberSignature Language="C#" Value="public const char EqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char EqualsChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EqualsChar" />
      <MemberSignature Language="VB.NET" Value="Public Const EqualsChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char EqualsChar;" />
      <MemberSignature Language="F#" Value="val mutable EqualsChar : char" Usage="System.Web.UI.HtmlTextWriter.EqualsChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Rappresenta il segno di uguale (<see langword="=" />).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si potrebbe voler usare il <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> campo anziché il <xref:System.Web.UI.HtmlTextWriter.EqualsChar> campo durante la costruzione del delimitatore di apertura di un valore di attributo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire il rendering di `src` attributo e parte del relativo valore per un `<img>` elemento. Il codice Usa il <xref:System.Web.UI.HtmlTextWriter.EqualsChar> campo in un <xref:System.Web.UI.HtmlTextWriter.Write%2A> chiamata al metodo per eseguire il rendering il segno di uguale (=) tra il `src` attributo e il relativo valore.  
  
 Questo esempio di codice viene eseguito il rendering di markup seguente:  
  
 `src="/images/`  
  
 [!code-csharp[MarkupTextWriter_Constants#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#10)]
 [!code-vb[MarkupTextWriter_Constants#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      </Docs>
    </Member>
    <Member MemberName="EqualsDoubleQuoteString">
      <MemberSignature Language="C#" Value="public const string EqualsDoubleQuoteString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EqualsDoubleQuoteString" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      <MemberSignature Language="VB.NET" Value="Public Const EqualsDoubleQuoteString As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EqualsDoubleQuoteString;" />
      <MemberSignature Language="F#" Value="val mutable EqualsDoubleQuoteString : string" Usage="System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Rappresenta un segno di uguale (=) e un segno di virgolette doppie (") insieme in una stringa (=").</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> campo viene usato per il <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> e <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metodi per costruire il delimitatore di apertura dei valori di attributo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire il rendering di un `border` dell'attributo per un `<table>` elemento. Il codice chiama il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo per eseguire il rendering dell'attributo e il valore e viene utilizzato il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo per eseguire il rendering le <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> e <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> campi.  
  
 Questo esempio di codice viene eseguito il rendering di markup seguente:  
  
 `border="1"`  
  
 [!code-csharp[MarkupTextWriter_Constants#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#6)]
 [!code-vb[MarkupTextWriter_Constants#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ExitStyle">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Scrive il tag di chiusura di un elemento di markup per terminare il layout e la formattazione dei caratteri specificati.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.ExitStyle(System.Web.UI.WebControls.Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExitStyle(System::Web::UI::WebControls::Style ^ style);" />
      <MemberSignature Language="F#" Value="abstract member ExitStyle : System.Web.UI.WebControls.Style -&gt; unit&#xA;override this.ExitStyle : System.Web.UI.WebControls.Style -&gt; unit" Usage="htmlTextWriter.ExitStyle style" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
      </Parameters>
      <Docs>
        <param name="style">Oggetto <see cref="T:System.Web.UI.WebControls.Style" /> che specifica il layout e la formattazione da chiudere.</param>
        <summary>Scrive il tag di chiusura di un elemento <see langword="&lt;span&gt;" /> per terminare il layout e la formattazione dei caratteri specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> eseguire l'overload del <xref:System.Web.UI.HtmlTextWriter.ExitStyle%28System.Web.UI.WebControls.Style%29> metodo esegue il rendering del tag di chiusura di un `<span>` elemento dopo il tag di chiusura del controllo, la chiusura dell'elemento aperto dal corrispondente <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> chiamare.  
  
 Il <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> e <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metodi consentono a un adattatore di periferica o un controllo creare un markup che inizia e termina un blocco usando la formattazione dei caratteri dello stile specificato. Usare lo stesso valore per `style` nella <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metodo da utilizzare nel corrispondente <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> (metodo).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare una classe personalizzata denominata `TextSample`, derivata dal <xref:System.Web.UI.WebControls.WebControl> (classe), che usa il <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metodo per applicare un <xref:System.Web.UI.WebControls.Style.ForeColor%2A> stile da una stringa di testo.  
  
 Il <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metodo esegue il rendering HTML `<span style="color:Navy;">`. Il <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> chiamata al metodo chiude il `<span>` elemento dopo il testo è stato eseguito il rendering.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.ExitStyle(System.Web.UI.WebControls.Style,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExitStyle(System::Web::UI::WebControls::Style ^ style, System::Web::UI::HtmlTextWriterTag tag);" />
      <MemberSignature Language="F#" Value="abstract member ExitStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit&#xA;override this.ExitStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="htmlTextWriter.ExitStyle (style, tag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="style">Oggetto <see cref="T:System.Web.UI.WebControls.Style" /> che specifica il layout e la formattazione per arrestare l'applicazione al testo di output.</param>
        <param name="tag">Oggetto <see cref="T:System.Web.UI.HtmlTextWriterTag" /> che specifica il tag di chiusura dell'elemento di markup contenente gli attributi che applicavano lo stile specificato. Deve corrispondere alla chiave passata alla chiamata <see cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" /> corrispondente.</param>
        <summary>Scrive il tag di chiusura dell'elemento di markup specificato per terminare il layout e la formattazione dei caratteri specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> eseguire l'overload del <xref:System.Web.UI.HtmlTextWriter.ExitStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> metodo esegue il rendering del tag di chiusura dell'elemento specificato da `tag` dopo il tag di chiusura del controllo, chiudere l'elemento che è stato aperto dal corrispondente <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> chiamata al metodo.  
  
 Il <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> e <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metodi consentono a un adattatore di periferica o un controllo creare un markup che inizia e termina un blocco usando la formattazione dei caratteri dello stile specificato. Usare lo stesso valore per `style` nella <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metodo da utilizzare nel corrispondente <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> (metodo).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare una classe personalizzata denominata `TextSample`, derivata dal <xref:System.Web.UI.WebControls.WebControl> (classe), che usa il <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metodo per applicare un <xref:System.Web.UI.WebControls.Style.ForeColor%2A> stile da una stringa di testo.  
  
 Il <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metodo esegue il rendering HTML `<span style="color:Navy;">`. Il <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> chiamata al metodo chiude il `<span>` elemento dopo il testo è stato eseguito il rendering.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="FilterAttributes">
      <MemberSignature Language="C#" Value="protected virtual void FilterAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FilterAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.FilterAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub FilterAttributes ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void FilterAttributes();" />
      <MemberSignature Language="F#" Value="abstract member FilterAttributes : unit -&gt; unit&#xA;override this.FilterAttributes : unit -&gt; unit" Usage="htmlTextWriter.FilterAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rimuove tutti gli attributi markup e di stile su tutte le proprietà della pagina o del controllo server Web.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prima del rendering degli attributi in un elemento di markup, il <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> viene chiamato il metodo. A sua volta, il <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> chiamate al metodo il <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> e <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> metodi per ogni attributo e lo stile per il rendering.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare una classe personalizzata, derivata dal <xref:System.Web.UI.HtmlTextWriter> (classe), che esegue l'override di <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> (metodo). Quando viene chiamato, il <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> override controlla se il writer di testo esegue il rendering `<label>` o `<a>` elementi:  
  
-   Se un `<label>` viene eseguito il rendering di elemento, il <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> metodo controlla se un `style` attributo viene eseguito il rendering sull'elemento e, in caso contrario, viene creata una `style` attributo e lo imposta su `color: blue`.  
  
-   Se un' `<a>` viene eseguito il rendering di elemento, il <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> metodo determina se un' `href` attributo sia incluso in caso contrario, aggiunge un' `href` all'URL http://www.cohowinery.com.  
  
 [!code-cpp[HtmlTextWriter_Methods#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#4)]
 [!code-vb[HtmlTextWriter_Methods#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; unit&#xA;override this.Flush : unit -&gt; unit" Usage="htmlTextWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancella tutti i buffer per l'oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> corrente e consente la scrittura nel flusso di output dei dati memorizzati nel buffer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter> implementazione della classe del <xref:System.Web.UI.HtmlTextWriter.Flush%2A> metodo chiama semplicemente il <xref:System.IO.TextWriter.Flush%2A> metodo di base.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterAttribute GetAttributeKey (string attrName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterAttribute GetAttributeKey(string attrName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetAttributeKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAttributeKey (attrName As String) As HtmlTextWriterAttribute" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::UI::HtmlTextWriterAttribute GetAttributeKey(System::String ^ attrName);" />
      <MemberSignature Language="F#" Value="member this.GetAttributeKey : string -&gt; System.Web.UI.HtmlTextWriterAttribute" Usage="htmlTextWriter.GetAttributeKey attrName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrName">Stringa contenente l'attributo per cui ottenere l'oggetto <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />.</param>
        <summary>Ottiene il valore di enumerazione <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> corrispondente per l'attributo specificato.</summary>
        <returns>Valore di enumerazione <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> per l'attributo specificato; in caso contrario, valore <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> non valido se l'attributo non è un membro dell'enumerazione.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `attrName` viene `null` o una stringa vuota (""), o non è stata trovata nella tabella di nomi di attributo, il valore -1, tipizzata per un <xref:System.Web.UI.HtmlTextWriterAttribute> dell'oggetto, viene restituito.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare una classe, derivata dal <xref:System.Web.UI.HtmlTextWriter> (classe), che esegue l'override di <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> (metodo). I controlli di sostituzione se `tagKey` è uguale per il <xref:System.Web.UI.HtmlTextWriterTag.Font> campo, che indica che un `<font>` verrà eseguito il rendering di elemento di markup. Caso affermativo, chiama l'override di <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> metodo per verificare se il `<font>` elemento contiene un <xref:System.Web.UI.HtmlTextWriterAttribute.Size> attributo. Se il <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> restituisce `false`, il <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> chiamate al metodo il <xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A> metodo, che definisce il <xref:System.Web.UI.HtmlTextWriterAttribute.Size> e imposta il valore su `30pt`.  
  
 [!code-cpp[HtmlTextWriter_Methods#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#3)]
 [!code-vb[HtmlTextWriter_Methods#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.IsAttributeDefined" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeName">
      <MemberSignature Language="C#" Value="protected string GetAttributeName (System.Web.UI.HtmlTextWriterAttribute attrKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetAttributeName(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetAttributeName(System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAttributeName (attrKey As HtmlTextWriterAttribute) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetAttributeName(System::Web::UI::HtmlTextWriterAttribute attrKey);" />
      <MemberSignature Language="F#" Value="member this.GetAttributeName : System.Web.UI.HtmlTextWriterAttribute -&gt; string" Usage="htmlTextWriter.GetAttributeName attrKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="attrKey">Oggetto <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> per il quale ottenere il nome dell'attributo di markup.</param>
        <summary>Ottiene il nome dell'attributo di markup associato al valore <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> specificato.</summary>
        <returns>Stringa contenente il nome dell'attributo di markup.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.GetAttributeName%2A> metodo restituisce una stringa vuota (""), se `attrKey` non è valida <xref:System.Web.UI.HtmlTextWriterAttribute> valore.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.GetAttributeName%2A> metodo per convertire un <xref:System.Web.UI.HtmlTextWriterAttribute.Size> valore di enumerazione al relativo nome di stringa.  
  
 [!code-cpp[HtmlTextWriter_Methods3#6](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#6)]
 [!code-csharp[HtmlTextWriter_Methods3#6](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#6)]
 [!code-vb[HtmlTextWriter_Methods3#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetStyleKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterStyle GetStyleKey (string styleName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterStyle GetStyleKey(string styleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetStyleKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyleKey (styleName As String) As HtmlTextWriterStyle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::UI::HtmlTextWriterStyle GetStyleKey(System::String ^ styleName);" />
      <MemberSignature Language="F#" Value="member this.GetStyleKey : string -&gt; System.Web.UI.HtmlTextWriterStyle" Usage="htmlTextWriter.GetStyleKey styleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="styleName">Attributo di stile per il quale ottenere l'oggetto <see cref="T:System.Web.UI.HtmlTextWriterStyle" />.</param>
        <summary>Ottiene il valore di enumerazione <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> per lo stile specificato.</summary>
        <returns>Valore di enumerazione <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> corrispondente a <paramref name="styleName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.GetStyleKey%2A> metodo viene restituito il valore -1 tipizzata come una <xref:System.Web.UI.HtmlTextWriterStyle> valore, se `styleName` non corrisponde a qualsiasi <xref:System.Web.UI.HtmlTextWriterStyle> valore di enumerazione.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire l'override di <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodo in una classe derivata dal <xref:System.Web.UI.HtmlTextWriter> classe. Il <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> sostituzione determina se un `<label>` verrà eseguito il rendering di markup e, in questo caso, viene verificata l'elemento per un <xref:System.Web.UI.HtmlTextWriterStyle.Color> attributo. Se un <xref:System.Web.UI.HtmlTextWriterStyle.Color> attributo non è stato definito, il <xref:System.Web.UI.HtmlTextWriter.GetStyleKey%2A> metodo viene utilizzato come primo parametro in una chiamata al <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metodo per aggiungere un <xref:System.Web.UI.HtmlTextWriterStyle.Color> dell'attributo un `<label>` elemento di markup e impostare il <xref:System.Web.UI.HtmlTextWriterStyle.Color> dell'attributo`red`.  
  
 [!code-cpp[HtmlTextWriter_Methods#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#1)]
 [!code-vb[HtmlTextWriter_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetStyleName">
      <MemberSignature Language="C#" Value="protected string GetStyleName (System.Web.UI.HtmlTextWriterStyle styleKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetStyleName(valuetype System.Web.UI.HtmlTextWriterStyle styleKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetStyleName(System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyleName (styleKey As HtmlTextWriterStyle) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetStyleName(System::Web::UI::HtmlTextWriterStyle styleKey);" />
      <MemberSignature Language="F#" Value="member this.GetStyleName : System.Web.UI.HtmlTextWriterStyle -&gt; string" Usage="htmlTextWriter.GetStyleName styleKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleKey" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="styleKey">Oggetto <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> per il quale si desidera ottenere il nome dell'attributo di stile.</param>
        <summary>Ottiene il nome dell'attributo di stile markup associato al valore di enumerazione <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> specificato.</summary>
        <returns>Nome di attributo di stile associato al valore di enumerazione di <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> specificato in <paramref name="styleKey" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `styleKey` non è valida <xref:System.Web.UI.HtmlTextWriterStyle> oggetto, il <xref:System.Web.UI.HtmlTextWriter.GetStyleName%2A> metodo restituisce una stringa vuota ("").  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come controllare se un `<label>` elemento viene eseguito il rendering. Se pertanto verifica se un <xref:System.Web.UI.HtmlTextWriterStyle.Color> attributo di stile è stato definito nell'elemento. Se l'attributo non è stato definito, il <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> viene chiamato il metodo e il <xref:System.Web.UI.HtmlTextWriter.GetStyleName%2A> metodo converte il <xref:System.Web.UI.HtmlTextWriterStyle.Color> membro di enumerazione nella relativa rappresentazione di stringa da passare al <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> (metodo).  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetTagKey">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.HtmlTextWriterTag GetTagKey (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Web.UI.HtmlTextWriterTag GetTagKey(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetTagKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTagKey (tagName As String) As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::HtmlTextWriterTag GetTagKey(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member GetTagKey : string -&gt; System.Web.UI.HtmlTextWriterTag&#xA;override this.GetTagKey : string -&gt; System.Web.UI.HtmlTextWriterTag" Usage="htmlTextWriter.GetTagKey tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Elemento di markup per il quale ottenere l'oggetto <see cref="T:System.Web.UI.HtmlTextWriterTag" />.</param>
        <summary>Ottiene il valore di enumerazione di <see cref="T:System.Web.UI.HtmlTextWriterTag" /> associato all'elemento di markup specificato.</summary>
        <returns>Valore di enumerazione di <see cref="T:System.Web.UI.HtmlTextWriterTag" /> oppure, se <paramref name="tagName" /> non è associato a un valore <see cref="T:System.Web.UI.HtmlTextWriterTag" /> specifico, <see cref="F:System.Web.UI.HtmlTextWriterTag.Unknown" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `tagName` viene `null`, una stringa vuota (""), non trovata nella tabella dei nomi dei tag di markup, o il <xref:System.Web.UI.HtmlTextWriter.GetTagKey%2A> metodo restituisce il <xref:System.Web.UI.HtmlTextWriterTag.Unknown> campo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come sostituire l'overload dei metodi di <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodo che accetta una stringa come parametro. La stringa viene passata per la <xref:System.Web.UI.HtmlTextWriter.GetTagKey%2A> metodo, che lo converte in corrispondente <xref:System.Web.UI.HtmlTextWriterTag> membro di enumerazione e quindi lo passa al <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> overload che accetta un <xref:System.Web.UI.HtmlTextWriterTag> come parametro un valore di enumerazione.  
  
 [!code-cpp[HtmlTextWriter_Methods3#8](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#8)]
 [!code-csharp[HtmlTextWriter_Methods3#8](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#8)]
 [!code-vb[HtmlTextWriter_Methods3#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="GetTagName">
      <MemberSignature Language="C#" Value="protected virtual string GetTagName (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetTagName(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetTagName(System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTagName (tagKey As HtmlTextWriterTag) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetTagName(System::Web::UI::HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="F#" Value="abstract member GetTagName : System.Web.UI.HtmlTextWriterTag -&gt; string&#xA;override this.GetTagName : System.Web.UI.HtmlTextWriterTag -&gt; string" Usage="htmlTextWriter.GetTagName tagKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">Oggetto <see cref="T:System.Web.UI.HtmlTextWriterTag" /> per il quale ottenere l'elemento di markup.</param>
        <summary>Ottiene l'elemento di markup associato al valore di enumerazione di <see cref="T:System.Web.UI.HtmlTextWriterTag" /> specificato.</summary>
        <returns>Stringa che rappresenta l'elemento di markup.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `tagKey` non è valida <xref:System.Web.UI.HtmlTextWriterTag> valore, il <xref:System.Web.UI.HtmlTextWriter.GetTagName%2A> metodo restituisce una stringa vuota ("").  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come chiudere un `<font>` elemento usando la <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> (metodo). Il <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> chiamate al metodo il <xref:System.Web.UI.HtmlTextWriter.GetTagName%2A> metodo per convertire il <xref:System.Web.UI.HtmlTextWriterTag.Font> valore in una stringa.  
  
 [!code-cpp[HtmlTextWriter_Methods3#7](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#7)]
 [!code-csharp[HtmlTextWriter_Methods3#7](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#7)]
 [!code-vb[HtmlTextWriter_Methods3#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public int Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Indent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Property Indent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Indent { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Indent : int with get, set" Usage="System.Web.UI.HtmlTextWriter.Indent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il numero di posizioni di tabulazione per il rientro dell'inizio di ogni riga di markup.</summary>
        <value>Numero di posizioni di tabulazione per il rientro di ogni riga.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Viene eseguito alcun rientro per la scrittura della stringa specificata dal `tabString` parametro del <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> il numero di volte in cui vengono specificate dal costruttore di <xref:System.Web.UI.HtmlTextWriter.Indent%2A> proprietà.  
  
 Se il <xref:System.Web.UI.HtmlTextWriter.Indent%2A> proprietà è impostata su un valore negativo, viene modificata su 0 prima di essere salvate.  
  
   
  
## Examples  
 Esempio di codice seguente illustra come incrementare il valore assegnato al <xref:System.Web.UI.HtmlTextWriter.Indent%2A> proprietà quando sono stati aggiunti attributi al tag di apertura di un `<span>` elemento e il <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> chiamata al metodo. In questo modo aumenta il rientro per qualsiasi codice sottoposto a rendering all'interno di `<span>` elemento.  
  
 [!code-csharp[MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#2)]
 [!code-vb[MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OutputTabs" />
      </Docs>
    </Member>
    <Member MemberName="InnerWriter">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter InnerWriter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.TextWriter InnerWriter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.InnerWriter" />
      <MemberSignature Language="VB.NET" Value="Public Property InnerWriter As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::TextWriter ^ InnerWriter { System::IO::TextWriter ^ get(); void set(System::IO::TextWriter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InnerWriter : System.IO.TextWriter with get, set" Usage="System.Web.UI.HtmlTextWriter.InnerWriter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il writer di testo che scrive il contenuto interno dell'elemento di markup.</summary>
        <value>Oggetto <see cref="T:System.IO.TextWriter" /> che scrive il contenuto markup interno.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il contenuto markup interno è il testo racchiuso tra i tag di apertura e chiusura di un elemento di linguaggio di markup.  
  
 Se il <xref:System.Web.UI.HtmlTextWriter.InnerWriter%2A> è impostata su una <xref:System.IO.TextWriter> oggetto, ovvero un'istanza del <xref:System.Web.HttpWriter> (classe), questo fatto è indicato e viene salvato un altro riferimento.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare un controllo server Web personalizzato, derivato dal <xref:System.Web.UI.WebControls.WebControl> (classe), che esegue l'override di <xref:System.Web.UI.Control.Render%2A> (metodo). Usa il <xref:System.Web.UI.HtmlTextWriter> classe per scrivere un `<font>` elemento. Dopo che scrive il tag di apertura dell'elemento, Usa il <xref:System.Web.UI.HtmlTextWriter.InnerWriter%2A> proprietà per scrivere la stringa `"<br> The time on the server:"` e le concatena la stringa con il valore della <xref:System.DateTime.Now%2A?displayProperty=nameWithType> proprietà.  
  
 [!code-cpp[HtmlTextWriter_Properties#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CPP/htmltextwriter_properties1.cpp#3)]
 [!code-csharp[HtmlTextWriter_Properties#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CS/htmltextwriter_properties1.cs#3)]
 [!code-vb[HtmlTextWriter_Properties#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Properties/VB/htmltextwriter_properties1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpWriter" />
        <altmember cref="T:System.Web.UI.WebControls.WebControl" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAttributeDefined">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determina se viene eseguito il rendering dell'attributo di markup specificato e del relativo valore durante la chiamata successiva del metodo <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsAttributeDefined (key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsAttributeDefined(System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="member this.IsAttributeDefined : System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="htmlTextWriter.IsAttributeDefined key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="key">Oggetto <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> associato all'attributo di markup.</param>
        <summary>Determina se viene eseguito il rendering dell'attributo di markup specificato e del relativo valore durante la chiamata successiva del metodo <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <returns>
          <see langword="true" /> se viene eseguito il rendering dell'attributo durante la chiamata successiva del metodo <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ottenere il valore da assegnare al <xref:System.Web.UI.HtmlTextWriterAttribute> dell'oggetto, usare il <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%40%29> invece l'overload.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare una sostituzione del <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodo in una classe che eredita dal <xref:System.Web.UI.HtmlTextWriter> classe. Il <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> override che consente di controllare una `<font>` verrà eseguito il rendering di elemento di markup. Caso affermativo, chiama l'override di <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> metodo per verificare se il `<font>` elemento contiene un <xref:System.Web.UI.HtmlTextWriterAttribute.Size> attributo. In caso contrario, il <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> chiamate al metodo il <xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A> metodo, che definisce il <xref:System.Web.UI.HtmlTextWriterAttribute.Size> attributo e imposta il valore su `30pt`.  
  
 [!code-cpp[HtmlTextWriter_Methods#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#3)]
 [!code-vb[HtmlTextWriter_Methods#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key, [out] string&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsAttributeDefined (key As HtmlTextWriterAttribute, ByRef value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsAttributeDefined(System::Web::UI::HtmlTextWriterAttribute key, [Runtime::InteropServices::Out] System::String ^ % value);" />
      <MemberSignature Language="F#" Value="member this.IsAttributeDefined : System.Web.UI.HtmlTextWriterAttribute *  -&gt; bool" Usage="htmlTextWriter.IsAttributeDefined (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">Oggetto <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> associato all'attributo di markup.</param>
        <param name="value">Valore assegnato all'attributo.</param>
        <summary>Determina se viene eseguito il rendering dell'attributo di markup specificato e del relativo valore durante la chiamata successiva del metodo <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <returns>
          <see langword="true" /> se viene eseguito il rendering dell'attributo durante la chiamata successiva del metodo <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> restituzione del metodo `true`, il valore da assegnare al <xref:System.Web.UI.HtmlTextWriterAttribute> oggetto viene restituito nel `value` parametro.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsStyleAttributeDefined">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determina se viene eseguito il rendering di un attributo di stile markup durante la chiamata successiva del metodo <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsStyleAttributeDefined (key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsStyleAttributeDefined(System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="member this.IsStyleAttributeDefined : System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="htmlTextWriter.IsStyleAttributeDefined key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="key">Oggetto <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> associato all'attributo.</param>
        <summary>Determina se viene eseguito il rendering dell'attributo di stile markup specificato durante la chiamata successiva del metodo <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <returns>
          <see langword="true" /> se viene eseguito il rendering dell'attributo durante la chiamata successiva del metodo <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ottenere il valore che verrà eseguito il rendering con l'attributo di stile specificato, usare il <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%40%29> eseguire l'overload del <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> (metodo).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come controllare se un `<label>` elemento viene eseguito il rendering. In questo caso, il <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> metodo controlla se un <xref:System.Web.UI.HtmlTextWriterStyle.Color> attributo di stile è stato definito nell'elemento. Se il <xref:System.Web.UI.HtmlTextWriterStyle.Color> attributo non è stato definito, il <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metodo consente di definire le <xref:System.Web.UI.HtmlTextWriterStyle.Color> attributo e imposta il valore su `red`.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key, [out] string&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsStyleAttributeDefined (key As HtmlTextWriterStyle, ByRef value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsStyleAttributeDefined(System::Web::UI::HtmlTextWriterStyle key, [Runtime::InteropServices::Out] System::String ^ % value);" />
      <MemberSignature Language="F#" Value="member this.IsStyleAttributeDefined : System.Web.UI.HtmlTextWriterStyle *  -&gt; bool" Usage="htmlTextWriter.IsStyleAttributeDefined (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">Oggetto <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> associato all'attributo.</param>
        <param name="value">Valore assegnato all'attributo di stile.</param>
        <summary>Determina se viene eseguito il rendering dell'attributo di stile markup specificato e del relativo valore durante la chiamata successiva del metodo <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />.</summary>
        <returns>
          <see langword="true" /> se viene eseguito il rendering dell'attributo e del relativo valore durante la chiamata successiva del metodo <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> restituzione del metodo `true`, il valore da assegnare al <xref:System.Web.UI.HtmlTextWriterStyle> attributo viene restituito nel `value` parametro.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public virtual bool IsValidFormAttribute (string attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidFormAttribute(string attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsValidFormAttribute (attribute As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsValidFormAttribute(System::String ^ attribute);" />
      <MemberSignature Language="F#" Value="abstract member IsValidFormAttribute : string -&gt; bool&#xA;override this.IsValidFormAttribute : string -&gt; bool" Usage="htmlTextWriter.IsValidFormAttribute attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attribute">Stringa contenente il nome dell'attributo da controllare.</param>
        <summary>Controlla un attributo per assicurare che sia possibile eseguirne il rendering nel tag di apertura di un elemento di markup <see langword="&lt;form&gt;" />.</summary>
        <returns>Sempre <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter> implementazione della classe del <xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A> restituzione del metodo `true` per tutti gli attributi. Eseguire l'override di <xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A> per limitare gli attributi che è possono eseguire il rendering nel tag di apertura di un `<form>` elemento.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Eseguire l'override di <see cref="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" /> per restituire <see langword="true" /> solo per gli attributi che possono essere inclusi nel <see langword="&lt;form&gt;" /> elemento di markup per il quale la classe derivata dal <see cref="T:System.Web.UI.HtmlTextWriter" /> classe è destinata.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="NewLine">
      <MemberSignature Language="C#" Value="public override string NewLine { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLine" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.NewLine" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property NewLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NewLine { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NewLine : string with get, set" Usage="System.Web.UI.HtmlTextWriter.NewLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la stringa del terminatore di riga utilizzata dall'oggetto <see cref="T:System.Web.UI.HtmlTextWriter" />.</summary>
        <value>Stringa del terminatore di riga utilizzata dalla classe <see cref="T:System.Web.UI.HtmlTextWriter" /> corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa del terminatore di riga predefinito è un ritorno a capo seguito da un avanzamento riga ("\r\n").  
  
 La stringa del terminatore di riga viene scritto nel flusso di output ogni volta che uno del <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metodi viene chiamato. Se il <xref:System.Web.UI.HtmlTextWriter.NewLine%2A> è impostata su `null`, viene usato il carattere di nuova riga predefinita.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare una classe personalizzata, derivata dal <xref:System.Web.UI.HtmlTextWriter> (classe), che esegue l'override di <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> (metodo). Quando viene chiamato, il <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> override controlla se il writer di testo esegue il rendering `<label>` o `<a>` elementi. In questo caso, il <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> metodo determina se un attributo di stile viene definito per l'etichetta. Se è definito alcuno stile, il <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> metodo imposta il valore predefinito per il `style:color` attributo impostandolo sul blu. Il <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> metodo Usa quindi il <xref:System.Web.UI.HtmlTextWriter.NewLine%2A> proprietà per inserire una linea break nel tag di markup e scrive gli altri attributi definiti.  
  
 [!code-cpp[HtmlTextWriter_Methods#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#4)]
 [!code-vb[HtmlTextWriter_Methods#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.IO.TextWriter.NewLine" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="abstract member OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool&#xA;override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="htmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Stringa contenente il nome dell'attributo di cui eseguire il rendering.</param>
        <param name="value">Stringa contenente il valore assegnato all'attributo.</param>
        <param name="key">Oggetto <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> associato all'attributo di markup.</param>
        <summary>Determina se è possibile eseguire il rendering dell'attributo di markup specificato e del relativo valore nell'elemento di markup corrente.</summary>
        <returns>Sempre <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter> implementazione della classe del <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> metodo restituisce sempre `true`. Il <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> override possono determinare se per la pagina verrà visualizzato come un attributo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire l'override di <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> (metodo). Se un <xref:System.Web.UI.HtmlTextWriterAttribute.Size> viene eseguito il rendering di attributi, ma la <xref:System.Web.UI.HtmlTextWriterAttribute.Size> valore non è `30pt`, il <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> override chiama il <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metodo per aggiungere un <xref:System.Web.UI.HtmlTextWriterAttribute.Size> attributo e impostarne il valore su `30pt`.  
  
 [!code-csharp[MarkupTextWriter_Methods3#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#5)]
 [!code-vb[MarkupTextWriter_Methods3#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Se si eredita dal <see cref="T:System.Web.UI.HtmlTextWriter" /> (classe), è possibile eseguire l'override di <see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> metodo restituisca <see langword="false" /> per impedire che un attributo viene eseguito il rendering del tutto, viene eseguito il rendering in un determinato elemento o viene eseguito il rendering di un markup specifico. Ad esempio, se non si desidera l'oggetto derivato da <see cref="T:System.Web.UI.HtmlTextWriter" /> per eseguire il rendering le <see langword="bgcolor" /> dell'attributo <see langword="&lt;table&gt;" /> elementi, è possibile eseguire l'override la <see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> e restituire <see langword="false" /> quando <paramref name="name" /> passa <see langword="bgcolor" /> e il <see cref="P:System.Web.UI.HtmlTextWriter.TagName" /> valore della proprietà è <see langword="table" />.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="abstract member OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool&#xA;override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="htmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Stringa contenente il nome dell'attributo di stile di cui eseguire il rendering.</param>
        <param name="value">Stringa contenente il valore assegnato all'attributo di stile.</param>
        <param name="key">Oggetto <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> associato all'attributo di stile.</param>
        <summary>Determina se è possibile eseguire il rendering dell'attributo di stile markup specificato e del relativo valore nell'elemento di markup corrente.</summary>
        <returns>Sempre <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter> implementazione della classe del <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> metodo restituisce sempre `true`. Il <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> override possono determinare se per la pagina verrà visualizzato come un attributo di stile.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire l'override di <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> (metodo). Se un <xref:System.Web.UI.HtmlTextWriterStyle.Color> viene eseguito il rendering dell'attributo di stile, ma la <xref:System.Web.UI.HtmlTextWriterStyle.Color> il valore non è `purple`, il <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> eseguire l'override viene utilizzata la <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metodo per impostare il <xref:System.Web.UI.HtmlTextWriterStyle.Color> dell'attributo `purple`.  
  
 [!code-csharp[MarkupTextWriter_Methods3#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#6)]
 [!code-vb[MarkupTextWriter_Methods3#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Se si eredita dal <see cref="T:System.Web.UI.HtmlTextWriter" /> (classe), è possibile eseguire l'override di <see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" /> metodo restituisca <see langword="false" /> per impedire che un attributo di stile viene eseguito il rendering del tutto, viene eseguito il rendering in un determinato elemento o in corso di visualizzazione per un particolare linguaggio di markup. Ad esempio, se non si desidera l'oggetto derivato da <see cref="T:System.Web.UI.HtmlTextWriter" /> per eseguire il rendering le <see langword="color" /> attributo di stile da un <see langword="&lt;p&gt;" /> elemento, è possibile eseguire l'override di <see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" /> e restituire <see langword="false" /> quando <paramref name="name" /> passa <see langword="color" />e il <see cref="P:System.Web.UI.HtmlTextWriter.TagName" /> valore della proprietà è <see langword="p" />.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnTagRender (name As String, key As HtmlTextWriterTag) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnTagRender(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="abstract member OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool&#xA;override this.OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool" Usage="htmlTextWriter.OnTagRender (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Stringa contenente il nome dell'elemento di cui eseguire il rendering.</param>
        <param name="key">Oggetto <see cref="T:System.Web.UI.HtmlTextWriterTag" /> associato all'elemento.</param>
        <summary>Determina se verrà eseguito il rendering dell'elemento di markup specificato nella pagina richiedente.</summary>
        <returns>Sempre <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter> implementazione della classe del <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> metodo restituisce sempre `true`. Il <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> override possono determinare se per la pagina verrà visualizzato come un elemento.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire l'override di <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> (metodo). Se un <xref:System.Web.UI.HtmlTextWriterTag.Font> viene eseguito il rendering di elemento, il <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> eseguire l'override viene utilizzata la <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> metodo per determinare se un <xref:System.Web.UI.HtmlTextWriterAttribute.Size> attributo viene eseguito il rendering. Se non si usa la <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metodo per creare un <xref:System.Web.UI.HtmlTextWriterAttribute.Size> dell'attributo e impostarne il valore su `20pt`.  
  
 [!code-csharp[MarkupTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#4)]
 [!code-vb[MarkupTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Se si eredita dal <see cref="T:System.Web.UI.HtmlTextWriter" /> (classe), è possibile eseguire l'override di <see cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" /> metodo restituisca <see langword="false" /> per impedire il rendering del tutto o per un particolare linguaggio di markup di un elemento di markup. Ad esempio, se non si desidera l'oggetto derivato da <see cref="T:System.Web.UI.HtmlTextWriter" /> per eseguire il rendering le <see langword="&lt;font&gt;" /> elemento, è possibile eseguire l'override di <see cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" /> per restituire <see langword="false" /> quando viene richiesta una pagina che contiene un <see langword="&lt;font&gt;" /> elemento.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="OutputTabs">
      <MemberSignature Language="C#" Value="protected virtual void OutputTabs ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputTabs() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OutputTabs" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputTabs ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputTabs();" />
      <MemberSignature Language="F#" Value="abstract member OutputTabs : unit -&gt; unit&#xA;override this.OutputTabs : unit -&gt; unit" Usage="htmlTextWriter.OutputTabs " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrive una serie di stringhe di tabulazioni che rappresentano il livello di rientro di una riga di caratteri di markup.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> metodo viene utilizzato il <xref:System.Web.UI.HtmlTextWriter.Indent%2A> proprietà per determinare il numero di stringhe di tabulazioni da scrivere per ottenere il rientro desiderato.  
  
 La stringa di tabulazioni è specificata con il <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> costruttore. Se non viene specificata alcuna stringa di tabulazioni, i <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> costante (`\t`) viene usato.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire l'override di <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> metodo in una classe derivata dal <xref:System.Web.UI.HtmlTextWriter> classe. Il <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> eseguire sempre l'override viene utilizzata la <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> costante per eseguire il rientro.  
  
 [!code-cpp[HtmlTextWriter_Methods#7](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#7)]
 [!code-csharp[HtmlTextWriter_Methods#7](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#7)]
 [!code-vb[HtmlTextWriter_Methods#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.Indent" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </Member>
    <Member MemberName="PopEndTag">
      <MemberSignature Language="C#" Value="protected string PopEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string PopEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      <MemberSignature Language="VB.NET" Value="Protected Function PopEndTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ PopEndTag();" />
      <MemberSignature Language="F#" Value="member this.PopEndTag : unit -&gt; string" Usage="htmlTextWriter.PopEndTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rimuove l'elemento di markup salvato più di recente dall'elenco degli elementi di cui è stato eseguito il rendering.</summary>
        <returns>Oggetto <see cref="T:System.String" /> contenente l'elemento di markup di cui è stato eseguito il rendering più di recente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli elementi vengono aggiunti all'elenco degli elementi di markup sottoposto a rendering mediante il <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> (metodo). Il <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metodo rimuove gli elementi di markup dall'elenco chiamando il <xref:System.Web.UI.HtmlTextWriter.PopEndTag%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L'elenco di elementi di cui è stato eseguito il rendering è vuoto.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PushEndTag">
      <MemberSignature Language="C#" Value="protected void PushEndTag (string endTag);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void PushEndTag(string endTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub PushEndTag (endTag As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void PushEndTag(System::String ^ endTag);" />
      <MemberSignature Language="F#" Value="member this.PushEndTag : string -&gt; unit" Usage="htmlTextWriter.PushEndTag endTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="endTag">Tag di chiusura dell'elemento di markup.</param>
        <summary>Salva l'elemento di markup specificato affinché venga utilizzato in seguito per la generazione del tag di fine per un elemento di markup.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli elementi vengono aggiunti all'elenco di elementi di markup sottoposto a rendering quando il <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> chiamate al metodo il <xref:System.Web.UI.HtmlTextWriter.PushEndTag%2A> (metodo). Il <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metodo rimuove gli elementi di markup dall'elenco dopo il rendering del tag di fine per l'elemento.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttribute">
      <MemberSignature Language="C#" Value="protected static void RegisterAttribute (string name, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterAttribute(string name, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterAttribute(System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterAttribute (name As String, key As HtmlTextWriterAttribute)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterAttribute(System::String ^ name, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="static member RegisterAttribute : string * System.Web.UI.HtmlTextWriterAttribute -&gt; unit" Usage="System.Web.UI.HtmlTextWriter.RegisterAttribute (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Stringa contenente il nome dell'attributo di markup da registrare.</param>
        <param name="key">Oggetto <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> corrispondente al nome dell'attributo.</param>
        <summary>Registra gli attributi markup, che si tratti di valori letterali o di attributi generati in modo dinamico, dal file di origine affinché sia possibile eseguirne correttamente il rendering sul client richiedente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli attributi predefiniti del linguaggio di markup HTML vengono registrati dalle chiamate al <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> metodo quando il primo <xref:System.Web.UI.HtmlTextWriter> oggetto viene creato. Gli attributi dinamici possono essere registrati mediante il <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> metodo in altri momenti.  
  
 La tabella di registrazione utilizzata dal <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> metodo viene `static`, in modo che la registrazione di attributi si applica a tutti <xref:System.Web.UI.HtmlTextWriter> gli oggetti nel computer host.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStyle">
      <MemberSignature Language="C#" Value="protected static void RegisterStyle (string name, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterStyle(string name, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterStyle(System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterStyle (name As String, key As HtmlTextWriterStyle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterStyle(System::String ^ name, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="static member RegisterStyle : string * System.Web.UI.HtmlTextWriterStyle -&gt; unit" Usage="System.Web.UI.HtmlTextWriter.RegisterStyle (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Stringa passata dal file di origine che specifica il nome dello stile.</param>
        <param name="key">Oggetto <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> corrispondente allo stile specificato.</param>
        <summary>Registra le proprietà di stile markup, che si tratti di valori letterali o attributi generati in modo dinamico, dal file di origine in modo che sia possibile eseguirne correttamente il rendering sul client richiedente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli attributi il foglio CSS predefinite del linguaggio di markup HTML sono registrati dalle chiamate al <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> metodo quando il primo <xref:System.Web.UI.HtmlTextWriter> oggetto viene creato. Gli attributi di stile dinamica possono essere registrati utilizzando la <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> metodo in altri momenti.  
  
 La tabella di registrazione utilizzata dal <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> metodo viene `static`, in modo che la registrazione di attributi si applica a tutti <xref:System.Web.UI.HtmlTextWriter> gli oggetti nel computer host.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="RegisterTag">
      <MemberSignature Language="C#" Value="protected static void RegisterTag (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterTag(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterTag(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterTag (name As String, key As HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterTag(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="static member RegisterTag : string * System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="System.Web.UI.HtmlTextWriter.RegisterTag (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Stringa contenente il tag HTML.</param>
        <param name="key">Oggetto <see cref="T:System.Web.UI.HtmlTextWriterTag" /> che specifica l'elemento di cui eseguire il rendering.</param>
        <summary>Registra i tag del markup, che si tratti di valori letterali o di attributi generati in modo dinamico, dal file di origine in modo che sia possibile eseguirne correttamente il rendering sul client richiedente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I tag predefiniti del linguaggio HTML vengono registrati dalle chiamate al <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> metodo quando il primo <xref:System.Web.UI.HtmlTextWriter> oggetto viene creato. Tag dinamici possono essere registrati mediante il <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> metodo in altri momenti.  
  
 La tabella di registrazione utilizzata dal <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> metodo viene `static`, in modo che la registrazione di tag viene applicata a tutti <xref:System.Web.UI.HtmlTextWriter> gli oggetti nel computer host.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderAfterContent () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderAfterContent();" />
      <MemberSignature Language="F#" Value="abstract member RenderAfterContent : unit -&gt; string&#xA;override this.RenderAfterContent : unit -&gt; string" Usage="htmlTextWriter.RenderAfterContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrive qualsiasi testo o spaziatura presente dopo il contenuto e prima del tag di chiusura dell'elemento di markup nel flusso di output del markup.</summary>
        <returns>Stringa contenente la spaziatura o il testo da scrivere dopo il contenuto dell'elemento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> metodo può essere utile se si desidera inserire gli elementi figlio nell'elemento di markup corrente.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire l'override di <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> metodo in una classe derivata dal <xref:System.Web.UI.HtmlTextWriter> classe per determinare se un `<label>` elemento viene eseguito il rendering. In questo caso, il <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> sostituzione consente di inserire tag di chiusura di un `<font>` immediatamente prima del tag di chiusura dell'elemento di `<label>` elemento. Se un elemento diverso da `<label>` viene eseguito il rendering, il <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> viene usato il metodo di base.  
  
 [!code-cpp[HtmlTextWriter_Methods1#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#3)]
 [!code-vb[HtmlTextWriter_Methods1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Il <see cref="T:System.Web.UI.HtmlTextWriter" /> implementazione della classe del <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" /> restituzione del metodo <see langword="null" />. Eseguire l'override <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" /> se si desidera scrivere testo o spaziatura dopo il contenuto dell'elemento, ma prima del tag di chiusura.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderAfterTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderAfterTag();" />
      <MemberSignature Language="F#" Value="abstract member RenderAfterTag : unit -&gt; string&#xA;override this.RenderAfterTag : unit -&gt; string" Usage="htmlTextWriter.RenderAfterTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrive qualsiasi spaziatura o testo presente dopo il tag di chiusura per un elemento di markup.</summary>
        <returns>Spaziatura o testo da scrivere dopo il tag di chiusura dell'elemento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> metodo può essere utile se si desidera eseguire il rendering di tag di chiusura aggiuntiva dopo il tag dell'elemento.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire l'override di <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> metodo per determinare se una classe derivata dal <xref:System.Web.UI.HtmlTextWriter> classe esegue il rendering un `<label>` elemento. In questo caso, il <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> sostituzione consente di inserire tag di chiusura di un `<font>` elemento subito dopo il `<label>` elemento. Se non è un `<label>` elemento, il <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> viene usato il metodo di base.  
  
 [!code-cpp[HtmlTextWriter_Methods4#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#2)]
 [!code-vb[HtmlTextWriter_Methods4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Il <see cref="T:System.Web.UI.HtmlTextWriter" /> implementazione della classe del <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" /> restituzione del metodo <see langword="null" />. Eseguire l'override <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" /> se si desidera scrivere testo o spaziatura dopo il tag di chiusura dell'elemento.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderBeforeContent () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderBeforeContent();" />
      <MemberSignature Language="F#" Value="abstract member RenderBeforeContent : unit -&gt; string&#xA;override this.RenderBeforeContent : unit -&gt; string" Usage="htmlTextWriter.RenderBeforeContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrive qualsiasi testo o spaziatura prima del contenuto e dopo il tag di apertura di un elemento di markup.</summary>
        <returns>Testo o spaziatura da scrivere prima del contenuto dell'elemento. Se non se ne esegue l'override, il metodo <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> restituisce <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> metodo può essere utile se si desidera inserire gli elementi figlio nell'elemento di markup corrente prima del markup interno.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire l'override di <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> metodo per determinare se una classe derivata dal <xref:System.Web.UI.HtmlTextWriter> classe sta per eseguire il rendering di un `<label>` elemento. In questo caso, il <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> sostituzione consente di inserire tag di apertura di un `<font>` immediatamente dopo il tag di apertura dell'elemento il `<label>` elemento. Se non è un `<label>` elemento, il <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> viene usato il metodo di base.  
  
 [!code-cpp[HtmlTextWriter_Methods1#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#2)]
 [!code-vb[HtmlTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Il <see cref="T:System.Web.UI.HtmlTextWriter" /> implementazione della classe del <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> restituzione del metodo <see langword="null" />. Eseguire l'override <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> se si desidera scrivere testo o spaziatura dopo il tag di apertura, ma prima del contenuto dell'elemento.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderBeforeTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderBeforeTag();" />
      <MemberSignature Language="F#" Value="abstract member RenderBeforeTag : unit -&gt; string&#xA;override this.RenderBeforeTag : unit -&gt; string" Usage="htmlTextWriter.RenderBeforeTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrive qualsiasi testo o spaziatura presente prima del tag di apertura di un elemento di markup.</summary>
        <returns>Testo o spaziatura da scrivere prima del tag di apertura dell'elemento di markup. Se non se ne esegue l'override, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> metodo può essere utile se si desidera eseguire il rendering dei tag di apertura aggiuntivi prima del tag di apertura dell'elemento previsto.  
  
   
  
## Examples  
 Il codice seguente viene illustrato come eseguire l'override di <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> metodo per determinare se una classe derivata dal <xref:System.Web.UI.HtmlTextWriter> classe sta per eseguire il rendering di un `<label>` elemento. In questo caso, il <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> sostituzione consente di inserire tag di apertura di un `<font>` elemento immediatamente prima di `<label>` elemento. Se non esegue il rendering di un `<label>` elemento, il <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> viene usato il metodo di base.  
  
 [!code-cpp[HtmlTextWriter_Methods4#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#1)]
 [!code-vb[HtmlTextWriter_Methods4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Il <see cref="T:System.Web.UI.HtmlTextWriter" /> implementazione della classe del <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" /> restituzione del metodo <see langword="null" />. Eseguire l'override <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" /> se si vuole scrivere testo o spaziatura prima del tag di apertura dell'elemento.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RenderBeginTag">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Scrive il tag di apertura di un elemento di markup nel flusso di output.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderBeginTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member RenderBeginTag : string -&gt; unit&#xA;override this.RenderBeginTag : string -&gt; unit" Usage="htmlTextWriter.RenderBeginTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Stringa contenente il nome dell'elemento di markup per il quale eseguire il rendering del tag di apertura.</param>
        <summary>Scrive il tag di apertura dell'elemento di markup specificato nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> eseguire l'override del <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%28System.String%29> metodo, se l'elemento di markup non fa parte del <xref:System.Web.UI.HtmlTextWriterTag> valori di enumerazione.  
  
 Per generare un elemento di markup usando il <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodo, chiamare prima il <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> e il <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metodi, in base alle esigenze, per specificare eventuali attributi dell'elemento o gli attributi di stile che devono essere visualizzati nel tag di apertura dell'elemento. Dopo aver generato il codice interno, chiamare il <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metodo per generare il tag di chiusura.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come chiamare le <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodo in un controllo personalizzato per eseguire il rendering del tag di apertura di un non standard `MyTag` elemento. L'esempio di codice chiama quindi il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo per eseguire il rendering di markup interno e quindi chiama il <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metodo per chiudere l'elemento.  
  
 Questo esempio di codice genera il markup seguente:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderBeginTag (tagKey As HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderBeginTag(System::Web::UI::HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="F#" Value="abstract member RenderBeginTag : System.Web.UI.HtmlTextWriterTag -&gt; unit&#xA;override this.RenderBeginTag : System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="htmlTextWriter.RenderBeginTag tagKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">Uno dei valori di <see cref="T:System.Web.UI.HtmlTextWriterTag" /> che definisce il tag di apertura dell'elemento di markup di cui eseguire il rendering.</param>
        <summary>Scrive il tag di apertura dell'elemento di markup associato al valore di enumerazione di <see cref="T:System.Web.UI.HtmlTextWriterTag" /> specificato nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> eseguire l'overload del <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%28System.Web.UI.HtmlTextWriterTag%29> metodo, se l'elemento di markup è di tipo noto corrispondente a uno del <xref:System.Web.UI.HtmlTextWriterTag> valori di enumerazione.  
  
 Per generare un elemento di markup usando il <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodo, chiamare prima il <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> e il <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> metodi, in base alle esigenze, per specificare eventuali attributi dell'elemento o gli attributi di stile che devono essere visualizzati nel tag di apertura dell'elemento. Dopo aver generato il codice interno, chiamare il <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metodo per generare il tag di chiusura.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodo per restituire il tag di apertura di un `<img>` elemento. Gli attributi che vengono aggiunti all'elemento mediante il <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> metodo sarà nell'apertura `<img>` tag. Il <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metodo viene utilizzato per generare il tag di chiusura.  
  
 Questo esempio di codice genera il markup seguente:  
  
 `<img alt="Encoding &quot;Required&quot;" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderEndTag">
      <MemberSignature Language="C#" Value="public virtual void RenderEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderEndTag ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderEndTag();" />
      <MemberSignature Language="F#" Value="abstract member RenderEndTag : unit -&gt; unit&#xA;override this.RenderEndTag : unit -&gt; unit" Usage="htmlTextWriter.RenderEndTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrive il tag di fine di un elemento di markup nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare il <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metodo dopo il <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> l'overload del metodo e dopo che tutto il contenuto tra tag di apertura e chiusura (markup interno) dell'elemento è stato eseguito il rendering.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come chiamare il <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metodo dopo sia il <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodo che genera il tag di apertura e la <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo che esegue il rendering del markup interno tra il tag di apertura e chiusura della classe personalizzata `MyTag` elemento sono state chiamate.  
  
 Questo esempio di codice genera il markup seguente:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingChars">
      <MemberSignature Language="C#" Value="public const string SelfClosingChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingChars" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SelfClosingChars" />
      <MemberSignature Language="VB.NET" Value="Public Const SelfClosingChars As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ SelfClosingChars;" />
      <MemberSignature Language="F#" Value="val mutable SelfClosingChars : string" Usage="System.Web.UI.HtmlTextWriter.SelfClosingChars" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Rappresenta uno spazio e la barra di autochiusura (/) di un tag del markup.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.SelfClosingChars> campo viene usato negli elementi di markup che autochiusura. Ad esempio:  
  
 `<input type="submit" value="go"  />`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingTagEnd">
      <MemberSignature Language="C#" Value="public const string SelfClosingTagEnd;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingTagEnd" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
      <MemberSignature Language="VB.NET" Value="Public Const SelfClosingTagEnd As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ SelfClosingTagEnd;" />
      <MemberSignature Language="F#" Value="val mutable SelfClosingTagEnd : string" Usage="System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Rappresenta la barra di chiusura e la parentesi uncinata chiusa (/&gt;) di un elemento di markup a chiusura automatica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> campo viene utilizzato il <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodo durante la costruzione di elementi di markup a chiusura automatica.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire il rendering il valore di una classe personalizzata `FileName` seguita da una virgoletta di proprietà e i caratteri rappresentati dal <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> campo. L'esempio di codice chiama il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo e passa il <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> campo come argomento di parametro, chiudere l'elemento.  
  
 Questo esempio di codice viene eseguito il rendering di `FileName` valore della proprietà, quindi il markup seguente:  
  
 `" />`  
  
 [!code-csharp[MarkupTextWriter_Constants#11](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#11)]
 [!code-vb[MarkupTextWriter_Constants#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="SemicolonChar">
      <MemberSignature Language="C#" Value="public const char SemicolonChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SemicolonChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SemicolonChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SemicolonChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SemicolonChar;" />
      <MemberSignature Language="F#" Value="val mutable SemicolonChar : char" Usage="System.Web.UI.HtmlTextWriter.SemicolonChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Rappresenta il punto e virgola (;).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Passare il <xref:System.Web.UI.HtmlTextWriter.SemicolonChar> campo come argomento di parametro in un <xref:System.Web.UI.HtmlTextWriter.Write%2A> chiamata al metodo quando si desidera eseguire il rendering di un punto e virgola da un controllo personalizzato o di un adapter.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire il rendering manuale di una serie di stili in un elemento di markup. L'esempio di codice Usa il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo per eseguire il rendering `font-size` e `border-style` gli attributi di stile. Il <xref:System.Web.UI.HtmlTextWriter.SemicolonChar> campo viene usato come parametro del <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo per separare il valore della `font-size` attributo dall'inizio del `border-style` attributo.  
  
 Questo esempio di codice viene eseguito il rendering di markup seguente:  
  
 `style="font-size:12pt;border-style:ridge"`  
  
 [!code-csharp[MarkupTextWriter_Constants#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simplebutton.cs#7)]
 [!code-vb[MarkupTextWriter_Constants#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simplebutton.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.Write(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SingleQuoteChar">
      <MemberSignature Language="C#" Value="public const char SingleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SingleQuoteChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SingleQuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SingleQuoteChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SingleQuoteChar;" />
      <MemberSignature Language="F#" Value="val mutable SingleQuoteChar : char" Usage="System.Web.UI.HtmlTextWriter.SingleQuoteChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Rappresenta un apostrofo (').</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il <xref:System.Web.UI.HtmlTextWriter.SingleQuoteChar> campo quando è necessario eseguire il rendering di un apostrofo.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SlashChar">
      <MemberSignature Language="C#" Value="public const char SlashChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SlashChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SlashChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SlashChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SlashChar;" />
      <MemberSignature Language="F#" Value="val mutable SlashChar : char" Usage="System.Web.UI.HtmlTextWriter.SlashChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Rappresenta la barra (/).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il <xref:System.Web.UI.HtmlTextWriter.SlashChar> campo per il rendering della barra contrassegna quando si scrive un URL. Il <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metodo viene utilizzato il <xref:System.Web.UI.HtmlTextWriter.SlashChar> campo quando si scrive il tag di chiusura di un elemento di markup.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire il rendering manuale di `src` attributo di un `<img>` elemento. L'esempio di codice Usa il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo con il <xref:System.Web.UI.HtmlTextWriter.SlashChar> campo come parametro per eseguire il rendering barra contrassegna nel percorso che viene applicato al `src` attributo.  
  
 Questo esempio di codice viene eseguito il rendering di markup seguente:  
  
 `src="/images/`  
  
 [!code-csharp[MarkupTextWriter_Constants#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#10)]
 [!code-vb[MarkupTextWriter_Constants#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SpaceChar">
      <MemberSignature Language="C#" Value="public const char SpaceChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SpaceChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SpaceChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SpaceChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SpaceChar;" />
      <MemberSignature Language="F#" Value="val mutable SpaceChar : char" Usage="System.Web.UI.HtmlTextWriter.SpaceChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Rappresenta uno spazio ( ).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.SpaceChar> campo viene usato per il <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> e <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metodi durante la scrittura di separatori tra gli elementi e attributi.  
  
   
  
## Examples  
 In questa sezione vengono forniti due esempi di codice. Il primo esempio viene illustrato come creare una matrice di caratteri. Il secondo viene illustrato come usare la matrice.  
  
 Questi esempi di codice generano il markup seguente:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 Esempio di codice seguente viene illustrato come creare un <xref:System.Char> matrice che contiene il <xref:System.Web.UI.HtmlTextWriter.SpaceChar> campo.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 Esempio di codice seguente viene illustrato come utilizzare la matrice creata nell'esempio di codice precedente come parametro quando si chiama il <xref:System.Web.UI.HtmlTextWriter.Write%2A> (metodo).  
  
 [!code-csharp[MarkupTextWriter_Methods2#12](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#12)]
 [!code-vb[MarkupTextWriter_Methods2#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="StyleEqualsChar">
      <MemberSignature Language="C#" Value="public const char StyleEqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char StyleEqualsChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.StyleEqualsChar" />
      <MemberSignature Language="VB.NET" Value="Public Const StyleEqualsChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char StyleEqualsChar;" />
      <MemberSignature Language="F#" Value="val mutable StyleEqualsChar : char" Usage="System.Web.UI.HtmlTextWriter.StyleEqualsChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Rappresenta il carattere (<see langword=":" />) di stile utilizzato per impostare attributi di stile corrispondenti ai valori.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.StyleEqualsChar> campo viene utilizzato il <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> (metodo) per delimitare i nomi degli stili e i valori.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire il rendering di un `FontWeight` attributo e il valore di `bold` al tag di apertura di un elemento. L'esempio di codice Usa il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo con il <xref:System.Web.UI.HtmlTextWriter.StyleEqualsChar> campo come parametro per eseguire il rendering del carattere che imposta il valore di ogni attributo di stile.  
  
 Questo esempio di codice viene eseguito il rendering di markup seguente:  
  
 `FontWeight:"bold"`  
  
 [!code-csharp[MarkupTextWriter_Constants#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#5)]
 [!code-vb[MarkupTextWriter_Constants#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterTag TagKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.TagKey" />
      <MemberSignature Language="VB.NET" Value="Protected Property TagKey As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::HtmlTextWriterTag TagKey { System::Web::UI::HtmlTextWriterTag get(); void set(System::Web::UI::HtmlTextWriterTag value); };" />
      <MemberSignature Language="F#" Value="member this.TagKey : System.Web.UI.HtmlTextWriterTag with get, set" Usage="System.Web.UI.HtmlTextWriter.TagKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il valore di <see cref="T:System.Web.UI.HtmlTextWriterTag" /> per l'elemento di markup specificato.</summary>
        <value>Elemento di markup per il quale viene eseguito il rendering del tag di apertura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> proprietà può essere utilizzata solo per le classi che ereditano dal <xref:System.Web.UI.HtmlTextWriter> classe. È necessario leggere o impostare il <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> proprietà solo in una chiamata al <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> metodo; questo è l'unica volta impostarlo su un valore coerente.  
  
   
  
## Examples  
 L'esempio di codice seguente illustra una versione override del <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> metodo in una classe che deriva dal <xref:System.Web.UI.HtmlTextWriter> classe. Viene usato il valore della <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> proprietà per determinare se un controllo server utilizzando l'interfaccia personalizzata <xref:System.Web.UI.HtmlTextWriter> esegue il rendering di oggetto un `<label>` elemento di markup. Se si tratta, un `<font>` elemento con un `color` attributo impostato su `red` viene restituito per modificarne la formattazione di `<label>` testo dell'elemento.  
  
 [!code-cpp[HtmlTextWriter_Methods1#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#2)]
 [!code-vb[HtmlTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Non è possibile impostare il valore della proprietà.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.TagName" />
      </Docs>
    </Member>
    <Member MemberName="TagLeftChar">
      <MemberSignature Language="C#" Value="public const char TagLeftChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagLeftChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.TagLeftChar" />
      <MemberSignature Language="VB.NET" Value="Public Const TagLeftChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char TagLeftChar;" />
      <MemberSignature Language="F#" Value="val mutable TagLeftChar : char" Usage="System.Web.UI.HtmlTextWriter.TagLeftChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Rappresenta la parentesi uncinata aperta (&lt;) di un tag di markup.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.TagLeftChar> campo viene usato per il <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>, e <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metodi quando si scrive il tag di markup.  
  
   
  
## Examples  
 Esempio di codice seguente esegue il rendering il primo carattere del tag di apertura di un `<table>` elemento con il nome dell'elemento. L'esempio di codice Usa il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo con il <xref:System.Web.UI.HtmlTextWriter.TagLeftChar> campo come parametro.  
  
 Questo esempio di codice viene eseguito il rendering di markup seguente:  
  
 `<table`  
  
 [!code-csharp[MarkupTextWriter_Constants#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#9)]
 [!code-vb[MarkupTextWriter_Constants#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TagName">
      <MemberSignature Language="C#" Value="protected string TagName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TagName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.TagName" />
      <MemberSignature Language="VB.NET" Value="Protected Property TagName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ TagName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TagName : string with get, set" Usage="System.Web.UI.HtmlTextWriter.TagName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome del tag dell'elemento di markup di cui eseguire il rendering.</summary>
        <value>Nome del tag dell'elemento di markup di cui eseguire il rendering.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.TagName%2A> proprietà può essere utilizzata solo per le classi che ereditano dal <xref:System.Web.UI.HtmlTextWriter> classe. È necessario leggere o impostare il <xref:System.Web.UI.HtmlTextWriter.TagName%2A> proprietà solo in <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> chiamate al metodo; questo è l'unica volta impostarlo su un valore coerente.  
  
   
  
## Examples  
 L'esempio di codice seguente illustra una versione override del <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> metodo in una classe che deriva dal <xref:System.Web.UI.HtmlTextWriter> classe. L'esempio di codice controlla se l'elemento per il rendering è un `<label>` elemento chiamando il <xref:System.String.Compare%2A?displayProperty=nameWithType> metodo e quindi passando la <xref:System.Web.UI.HtmlTextWriter.TagName%2A> valore della proprietà e una stringa, `"label"`, come argomenti del parametro. Se un `<label>` elemento sta per essere eseguito il rendering, il tag di apertura di un `<font>` elemento, con un `color` attributo impostato su `red`, viene eseguito il rendering prima il `<label>` tag di apertura dell'elemento. Se l'elemento per il rendering non è un `<label>` elemento, la versione della classe di base del <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> viene chiamato il metodo.  
  
 [!code-cpp[HtmlTextWriter_Methods4#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#1)]
 [!code-vb[HtmlTextWriter_Methods4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.TagKey" />
      </Docs>
    </Member>
    <Member MemberName="TagRightChar">
      <MemberSignature Language="C#" Value="public const char TagRightChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagRightChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.TagRightChar" />
      <MemberSignature Language="VB.NET" Value="Public Const TagRightChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char TagRightChar;" />
      <MemberSignature Language="F#" Value="val mutable TagRightChar : char" Usage="System.Web.UI.HtmlTextWriter.TagRightChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Rappresenta la parentesi uncinata chiusa (&gt;) di un tag di markup.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.TagRightChar> campo viene usato per il <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>, e <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metodi quando si scrive il tag di markup.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire il rendering del tag di chiusura di un `<table>` elemento effettuando chiamate all'overload del <xref:System.Web.UI.HtmlTextWriter.Write%2A> (metodo). Per eseguire il rendering del carattere finale del tag, l'esempio di codice Usa il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo con il <xref:System.Web.UI.HtmlTextWriter.TagRightChar> campo come parametro.  
  
 Questo esempio di codice viene eseguito il rendering di markup seguente:  
  
 `</table>`  
  
 [!code-csharp[MarkupTextWriter_Constants#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#4)]
 [!code-vb[MarkupTextWriter_Constants#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Scrive il tipo di dati specificato nel flusso di output, insieme a qualsiasi spaziatura di tabulazione in sospeso.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(bool value);" />
      <MemberSignature Language="F#" Value="abstract member Write : bool -&gt; unit&#xA;override this.Write : bool -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Oggetto <see cref="T:System.Boolean" /> da scrivere nel flusso di output.</param>
        <summary>Scrive la rappresentazione testuale di un valore Boolean nel flusso di output, insieme a qualsiasi spaziatura di tabulazione in sospeso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo genera tutte le schede che sono in sospeso e quindi chiama il <xref:System.IO.TextWriter.Write%2A> metodo di base.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(char value);" />
      <MemberSignature Language="F#" Value="abstract member Write : char -&gt; unit&#xA;override this.Write : char -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Carattere Unicode da scrivere nel flusso di output.</param>
        <summary>Scrive la rappresentazione testuale di un carattere Unicode nel flusso di output, insieme a qualsiasi spaziatura di tabulazione in sospeso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo genera tutte le schede che sono in sospeso e quindi chiama il <xref:System.IO.TextWriter.Write%2A> metodo di base.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo alla fine del tag di apertura di un `<img>` elemento usando il <xref:System.Web.UI.HtmlTextWriter.TagRightChar> costante.  
  
 Questo esempio di codice viene eseguito il rendering di markup seguente:  
  
 `<img alt="A custom image">`  
  
 `</img>`  
  
 [!code-csharp[MarkupTextWriter_Samples1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#5)]
 [!code-vb[MarkupTextWriter_Samples1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="abstract member Write : char[] -&gt; unit&#xA;override this.Write : char[] -&gt; unit" Usage="htmlTextWriter.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di caratteri Unicode da scrivere nel flusso di output.</param>
        <summary>Scrive la rappresentazione testuale di una matrice di caratteri Unicode nel flusso di output, insieme a qualsiasi spaziatura di tabulazione in sospeso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo genera tutte le schede che sono in sospeso e quindi chiama il <xref:System.IO.TextWriter.Write%2A> metodo di base.  
  
   
  
## Examples  
 In questa sezione vengono forniti due esempi di codice. Il primo esempio viene illustrato come creare una matrice di caratteri. Il secondo viene illustrato come usare la matrice.  
  
 Questi esempi di codice generano il markup seguente:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 Esempio di codice seguente viene illustrato come creare una matrice di caratteri che compongono il testo `hello world`. Incluso nella matrice è il <xref:System.Web.UI.HtmlTextWriter.SpaceChar> campo, che consente di creare uno spazio tra le due parole.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo per eseguire il rendering di `hello world` matrice di caratteri creato nell'esempio di codice precedente a una pagina, quando il controllo contenente questo codice di esempio è incluso in una pagina.  
  
 [!code-csharp[MarkupTextWriter_Methods2#12](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#12)]
 [!code-vb[MarkupTextWriter_Methods2#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(double value);" />
      <MemberSignature Language="F#" Value="abstract member Write : double -&gt; unit&#xA;override this.Write : double -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Numero in virgola mobile e precisione doppia da scrivere nel flusso di output.</param>
        <summary>Scrive nel flusso di output la rappresentazione testuale di un numero in virgola mobile e precisione doppia e qualsiasi spaziatura di tabulazione in sospeso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo genera tutte le schede che sono in sospeso e quindi chiama il <xref:System.IO.TextWriter.Write%2A> metodo di base.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo per il rendering del valore della <xref:System.Double.MaxValue?displayProperty=nameWithType> campo.  
  
 Questo esempio di codice genera il markup seguente:  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#7)]
 [!code-vb[MarkupTextWriter_Methods1#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(int value);" />
      <MemberSignature Language="F#" Value="abstract member Write : int -&gt; unit&#xA;override this.Write : int -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Valore integer a 32 byte con segno da scrivere nel flusso di output.</param>
        <summary>Scrive nel flusso di output la rappresentazione testuale di un intero con segno a 32 byte e qualsiasi spaziatura di tabulazione in sospeso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo genera tutte le schede che sono in sospeso e quindi chiama il <xref:System.IO.TextWriter.Write%2A> metodo di base.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(long value);" />
      <MemberSignature Language="F#" Value="abstract member Write : int64 -&gt; unit&#xA;override this.Write : int64 -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Intero con segno a 64 byte da scrivere nel flusso di output.</param>
        <summary>Scrive nel flusso di output la rappresentazione testuale di un intero con segno a 64 byte e qualsiasi spaziatura di tabulazione in sospeso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo genera tutte le schede che sono in sospeso e quindi chiama il <xref:System.IO.TextWriter.Write%2A> metodo di base.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Write : obj -&gt; unit&#xA;override this.Write : obj -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Oggetto da scrivere nel flusso di output.</param>
        <summary>Scrive nel flusso di output la rappresentazione testuale di un oggetto e qualsiasi spaziatura di tabulazione in sospeso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo genera tutte le schede che sono in sospeso e quindi chiama il <xref:System.IO.TextWriter.Write%2A> metodo di base.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo per il rendering del valore della <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> proprietà.  
  
 Questo esempio di codice genera il markup seguente:  
  
 `This is a rendered CultureInfo object.`  
  
 `<bold>`  
  
 Il valore della <xref:System.Globalization.CultureInfo.CurrentCulture%2A> proprietà:  
  
 `</bold>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#8](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#8)]
 [!code-vb[MarkupTextWriter_Methods1#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(float value);" />
      <MemberSignature Language="F#" Value="abstract member Write : single -&gt; unit&#xA;override this.Write : single -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Numero in virgola mobile e precisione singola da scrivere nel flusso di output.</param>
        <summary>Scrive nel flusso di output la rappresentazione testuale di un numero in virgola mobile e precisione singola e qualsiasi spaziatura di tabulazione in sospeso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo genera tutte le schede che sono in sospeso e quindi chiama il <xref:System.IO.TextWriter.Write%2A> metodo di base.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo per il rendering del valore del <xref:System.Single.Epsilon?displayProperty=nameWithType> campo, che rappresenta il valore minimo possibile del <xref:System.Single> struttura.  
  
 Questo esempio di codice genera il markup seguente:  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#10)]
 [!code-vb[MarkupTextWriter_Methods1#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ s);" />
      <MemberSignature Language="F#" Value="abstract member Write : string -&gt; unit&#xA;override this.Write : string -&gt; unit" Usage="htmlTextWriter.Write s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Stringa da scrivere nel flusso di output.</param>
        <summary>Scrive nel flusso di output la stringa specificata e qualsiasi spaziatura di tabulazione in sospeso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo genera tutte le schede che sono in sospeso e quindi chiama il <xref:System.IO.TextWriter.Write%2A> metodo di base.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo per eseguire il rendering di una stringa compresa tra i tag di apertura e chiusura di un elemento di markup personalizzata.  
  
 Questo esempio di codice genera il markup seguente:  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="abstract member Write : string * obj -&gt; unit&#xA;override this.Write : string * obj -&gt; unit" Usage="htmlTextWriter.Write (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Stringa contenente zero o più elementi di formato.</param>
        <param name="arg0">Oggetto da formattare.</param>
        <summary>Scrive nel flusso di output una stringa di tabulazioni e una stringa formattata utilizzando la stessa semantica del metodo <see cref="M:System.String.Format(System.String,System.Object)" />, insieme a qualsiasi spaziatura di tabulazione in sospeso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo genera tutte le schede che sono in sospeso e quindi chiama il <xref:System.IO.TextWriter.Write%2A> metodo di base.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo per eseguire il rendering di una stringa formattata con il valore della <xref:System.Globalization.CultureInfo.CurrentCulture%2A> proprietà.  
  
 [!code-csharp[MarkupTextWriter_Methods1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#5)]
 [!code-vb[MarkupTextWriter_Methods1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="abstract member Write : string * obj[] -&gt; unit&#xA;override this.Write : string * obj[] -&gt; unit" Usage="htmlTextWriter.Write (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Stringa contenente zero o più elementi di formato.</param>
        <param name="arg">Matrice di oggetti da formattare.</param>
        <summary>Scrive una stringa formattata contenente la rappresentazione testuale di una matrice di oggetti nel flusso di output, insieme a qualsiasi spaziatura di tabulazione in sospeso. Il metodo utilizza la stessa semantica del metodo <see cref="M:System.String.Format(System.String,System.Object[])" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo genera tutte le schede che sono in sospeso e quindi chiama il <xref:System.IO.TextWriter.Write%2A> metodo di base.  
  
   
  
## Examples  
 In questa sezione sono riportati due esempi di codice. Il primo viene illustrato come eseguire il rendering di una stringa formattata e il contenuto di una matrice. Il secondo esempio viene illustrato come dichiarare la matrice.  
  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo per eseguire il rendering di una stringa formattata e il contenuto di una matrice di oggetti, denominato `curPriceTime`. La chiamata al metodo esegue il rendering il secondo membro della matrice prima di eseguire il rendering al primo membro.  
  
 [!code-csharp[MarkupTextWriter_Methods2#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#9)]
 [!code-vb[MarkupTextWriter_Methods2#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#9)]  
  
 Esempio di codice seguente illustra la dichiarazione di `curPriceTime` matrice di oggetti.  
  
 [!code-csharp[MarkupTextWriter_Methods2#14](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#14)]
 [!code-vb[MarkupTextWriter_Methods2#14](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member Write : char[] * int * int -&gt; unit&#xA;override this.Write : char[] * int * int -&gt; unit" Usage="htmlTextWriter.Write (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di caratteri da cui scrivere il testo nel flusso di output.</param>
        <param name="index">Posizione di indice di inizio scrittura all'interno della matrice.</param>
        <param name="count">Numero di caratteri da scrivere nel flusso di output.</param>
        <summary>Scrive la rappresentazione testuale di una sottomatrice di caratteri Unicode nel flusso di output, insieme a qualsiasi spaziatura di tabulazione in sospeso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo genera tutte le schede che sono in sospeso e quindi chiama il <xref:System.IO.TextWriter.Write%2A> metodo di base.  
  
   
  
## Examples  
 In questa sezione vengono forniti due esempi di codice. Il primo esempio viene illustrato come creare una matrice di caratteri. Il secondo viene illustrato come usare la matrice.  
  
 Questi esempi di codice generano il markup seguente:  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 Esempio di codice seguente viene illustrato come creare una matrice di caratteri che compongono il testo `hello world`. Incluso nella matrice è il <xref:System.Web.UI.HtmlTextWriter.SpaceChar> campo, che consente di creare uno spazio tra le due parole.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 La parte dell'esempio di codice seguente usa il `index` e `count` i parametri del <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo per eseguire il rendering i primi cinque caratteri della matrice creata nell'esempio precedente.  
  
 [!code-csharp[MarkupTextWriter_Methods2#11](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#11)]
 [!code-vb[MarkupTextWriter_Methods2#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="abstract member Write : string * obj * obj -&gt; unit&#xA;override this.Write : string * obj * obj -&gt; unit" Usage="htmlTextWriter.Write (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Stringa contenente zero o più elementi di formato.</param>
        <param name="arg0">Oggetto da formattare.</param>
        <param name="arg1">Oggetto da formattare.</param>
        <summary>Scrive una stringa formattata contenente la rappresentazione testuale di due oggetti nel flusso di output, insieme a qualsiasi spaziatura di tabulazione in sospeso. Il metodo utilizza la stessa semantica del metodo <see cref="M:System.String.Format(System.String,System.Object,System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo genera tutte le schede che sono in sospeso e quindi chiama il <xref:System.IO.TextWriter.Write%2A> metodo di base.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.Write%2A> metodo per eseguire il rendering di una stringa formattata e i valori del <xref:System.Globalization.CultureInfo.CurrentCulture%2A> e <xref:System.DateTime.Today%2A> proprietà.  
  
 [!code-csharp[MarkupTextWriter_Methods1#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#6)]
 [!code-vb[MarkupTextWriter_Methods1#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object,System.Object)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Scrive un attributo di markup e il relativo valore nel flusso di output.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteAttribute : string * string -&gt; unit&#xA;override this.WriteAttribute : string * string -&gt; unit" Usage="htmlTextWriter.WriteAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Attributo da scrivere nel flusso di output.</param>
        <param name="value">Valore assegnato all'attributo.</param>
        <summary>Scrive l'attributo di markup specificato e il relativo valore nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metodo per scrivere gli attributi markup e i relativi valori senza codifica. Il <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metodo scrive il valore dell'attributo racchiuso tra virgolette doppie ("). Se `value` viene `null`, il <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metodo scrive solo il nome dell'attributo.  
  
   
  
## Examples  
 Esempio di codice seguente dimostra il rendering un' `<img>` elemento nel quale entrambi gli overload del <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metodo viene chiamato. L'esempio di codice Usa il processo seguente:  
  
-   Le chiamate di <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> metodo, che esegue il rendering dei caratteri di apertura dell'elemento.  
  
-   Chiama il <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> esegue l'overload, quali operazioni di scrittura un' `alt` attributo e il relativo valore il `<img>` elemento.  
  
-   Chiama il <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> overload per il rendering di un oggetto personalizzato `myattribute` attributo, con un valore di `No "encoding" required`, quindi imposta `fEncode` a `false`.  
  
-   Chiude il tag di apertura dell'elemento e quindi chiama il <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metodo per chiudere il `<img>` elemento.  
  
 Questo esempio di codice genera il markup seguente:  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Nelle classi derivate, è possibile eseguire l'override di <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" /> metodo per definire regole personalizzate per la scrittura di attributi e i relativi valori. Ad esempio, è possibile scrivere del codice che consenta di <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" /> metodo scrivere un attributo con un valore vuoto.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttribute (name As String, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttribute(System::String ^ name, System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="abstract member WriteAttribute : string * string * bool -&gt; unit&#xA;override this.WriteAttribute : string * string * bool -&gt; unit" Usage="htmlTextWriter.WriteAttribute (name, value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Attributo di markup da scrivere nel flusso di output.</param>
        <param name="value">Valore assegnato all'attributo.</param>
        <param name="fEncode">
          <see langword="true" /> per codificare l'attributo e il valore assegnato. In caso contrario, <see langword="false" />.</param>
        <summary>Scrive il valore e l'attributo di markup specificati nel flusso di output e, se specificato, scrive il valore codificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metodo per scrivere gli attributi markup e i relativi valori con o senza codifica. Il <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metodo viene utilizzato il <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> metodo per eseguire la codifica.  
  
 Il <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metodo scrive il valore dell'attributo racchiuso tra virgolette doppie ("). Se `value` viene `null`, il <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metodo scrive solo il nome dell'attributo.  
  
   
  
## Examples  
 Esempio di codice seguente dimostra il rendering un' `<img>` elemento nel quale entrambi gli overload del <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metodo viene chiamato. L'esempio di codice Usa il processo seguente:  
  
-   Le chiamate di <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> metodo, che esegue il rendering dei caratteri di apertura dell'elemento.  
  
-   Chiama il <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> esegue l'overload, quali operazioni di scrittura un' `alt` attributo e il relativo valore il `<img>` elemento.  
  
-   Chiama il <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> overload per il rendering di un oggetto personalizzato `myattribute` attributo, con un valore di `No "encoding" required`, quindi imposta `fEncode` a `false`.  
  
-   Chiude il tag di apertura dell'elemento e quindi chiama il <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metodo per chiudere il `<img>` elemento.  
  
 Questo esempio di codice genera il markup seguente:  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Nelle classi derivate, è possibile eseguire l'override di <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" /> metodo per definire regole personalizzate per la scrittura di attributi e i relativi valori. Ad esempio, è possibile scrivere del codice che consenta di <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" /> metodo scrivere un attributo con un valore vuoto.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBeginTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member WriteBeginTag : string -&gt; unit&#xA;override this.WriteBeginTag : string -&gt; unit" Usage="htmlTextWriter.WriteBeginTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Elemento di markup di cui scrivere il tag di apertura.</param>
        <summary>Scrive l'eventuale spaziatura di tabulazione e il tag di apertura dell'elemento di markup specificato nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> (metodo) non scrive la parentesi angolare di chiusura (>) di tag di apertura dell'elemento di markup. In questo modo la scrittura di attributi markup al tag di apertura dell'elemento. Usare la <xref:System.Web.UI.HtmlTextWriter.TagRightChar> costante per chiudere il tag di apertura, quando si chiama il <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> (metodo). Usare la <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> metodo con il <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> costante quando si scrivono gli elementi di markup a chiusura automatica.  
  
 Il <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> metodo viene utilizzato dai controlli server personalizzati che non consente il mapping di attributo o tag e il rendering degli elementi di markup nello stesso modo per ogni richiesta.  
  
   
  
## Examples  
 Esempio di codice seguente dimostra il rendering un' `<img>` elemento nel quale entrambi gli overload del <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metodo viene chiamato. L'esempio di codice Usa il processo seguente:  
  
-   Le chiamate di <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> metodo, che esegue il rendering dei caratteri di apertura dell'elemento.  
  
-   Chiama il <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> esegue l'overload, quali operazioni di scrittura un' `alt` attributo e il relativo valore il `<img>` elemento.  
  
-   Chiama il <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> overload per il rendering di un oggetto personalizzato `myattribute` attributo, con un valore di `No "encoding" required`, quindi imposta `fEncode` a `false`.  
  
-   Chiude il tag di apertura dell'elemento e quindi chiama il <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metodo per chiudere il `<img>` elemento.  
  
 Questo esempio di codice genera il markup seguente:  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.TagRightChar" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public virtual void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBreak();" />
      <MemberSignature Language="F#" Value="abstract member WriteBreak : unit -&gt; unit&#xA;override this.WriteBreak : unit -&gt; unit" Usage="htmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrive un elemento di markup <see langword="&lt;br /&gt;" /> nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> interruzioni di metodo per eseguire il rendering di riga nel markup di controllo o scheda personalizzata. Il <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> metodo scrive uno spazio tra il `br` e `/` per una migliore compatibilità HTML.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come chiamare il <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> metodo per scrivere un `<br />` elemento per il browser richiedente dopo il <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> metodo scrive codificato `&lt;custID&gt; &amp; &lt;invoice#&gt;` markup.  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#2)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member WriteEncodedText : string -&gt; unit&#xA;override this.WriteEncodedText : string -&gt; unit" Usage="htmlTextWriter.WriteEncodedText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Stringa di testo da codificare e scrivere nel flusso di output.</param>
        <summary>Codifica il testo specificato per il dispositivo richiedente e quindi lo scrive nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> metodo quando una stringa contiene parentesi angolari (\< o >) o una e commerciale (&).  
  
 Il <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> metodo viene utilizzato il <xref:System.Web.HttpUtility.HtmlEncode%2A> metodo per eseguire la codifica e converte il carattere Unicode `00A0` a `&nbsp;`.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> metodo di scrivere il codice con codificato `&lt;custID&gt; &amp; &lt;invoice#&gt;` nel flusso di output. Il <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> scritture metodo `<br />`.  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#2)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> è <see langword="null" />.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrl">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrl(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedUrl (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedUrl(System::String ^ url);" />
      <MemberSignature Language="F#" Value="abstract member WriteEncodedUrl : string -&gt; unit&#xA;override this.WriteEncodedUrl : string -&gt; unit" Usage="htmlTextWriter.WriteEncodedUrl url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">Stringa dell'URL da codificare e scrivere nel flusso di output.</param>
        <summary>Codifica l'URL specificato e quindi lo scrive nel flusso di output. L'URL può includere parametri.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> metodo di codifica la stringa nel `url` parametro conforme alla specifica per la codifica URL. I parametri che seguono il delimitatore punto interrogativo (?) non sono codificati.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> metodo, che genera l'output seguente:  
  
 `http://localhost/Sample%20Folder/Sample%20%2b%20File.txt`  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#3)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrlParameter">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrlParameter (string urlText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrlParameter(string urlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedUrlParameter (urlText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedUrlParameter(System::String ^ urlText);" />
      <MemberSignature Language="F#" Value="abstract member WriteEncodedUrlParameter : string -&gt; unit&#xA;override this.WriteEncodedUrlParameter : string -&gt; unit" Usage="htmlTextWriter.WriteEncodedUrlParameter urlText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlText">Stringa del parametro URL da codificare e scrivere nel flusso di output.</param>
        <summary>Codifica il parametro URL specificato per la periferica richiedente, quindi lo scrive nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli spazi in parte il parametro di un URL sono codificati come segni più (+) e segni di uguale (=) sono codificati come `%3d`.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A> metodo, che genera l'output seguente:  
  
 `ID%3dCity+State`  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#4)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEndTag">
      <MemberSignature Language="C#" Value="public virtual void WriteEndTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEndTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEndTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member WriteEndTag : string -&gt; unit&#xA;override this.WriteEndTag : string -&gt; unit" Usage="htmlTextWriter.WriteEndTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Elemento per cui scrivere il tag di apertura.</param>
        <summary>Scrive l'eventuale spaziatura di tabulazione e il tag di chiusura dell'elemento di markup specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A differenza di <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> metodo, il <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metodo non ha la logica per rendere il tag di fine elemento corrisponda al tag di apertura.  
  
   
  
## Examples  
 Esempio di codice seguente dimostra il rendering un `<img>` elemento. L'esempio di codice Usa il processo seguente:  
  
-   Le chiamate di <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> metodo per eseguire il rendering dei caratteri di apertura dell'elemento.  
  
-   Chiama due overload del <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> metodo per scrivere gli attributi per il `<img>` elemento.  
  
-   Chiama il <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> metodo per chiudere il `<img>` elemento.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteFullBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteFullBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFullBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteFullBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteFullBeginTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member WriteFullBeginTag : string -&gt; unit&#xA;override this.WriteFullBeginTag : string -&gt; unit" Usage="htmlTextWriter.WriteFullBeginTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">Elemento da scrivere nel flusso di output.</param>
        <summary>Scrive l'eventuale spaziatura di tabulazione e il tag di apertura dell'elemento di markup specificato nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A> metodo scrive automaticamente le parentesi angolare di chiusura (>) del tag di apertura dell'elemento, a differenza di <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> metodo, che non scrive la parentesi angolare di chiusura. Usare <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A> per gli elementi di markup che sono privi di attributi.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Scrive dati in un flusso di output di <see cref="T:System.Web.UI.HtmlTextWriter" />, come specificato dai parametri di overload, seguiti da una stringa del terminatore di riga. Tutte le versioni di questo metodo scrivono qualsiasi spaziatura di tabulazione in sospeso nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa del terminatore di riga predefinito è un ritorno a capo seguito da un avanzamento riga ("\r\n"). Il <xref:System.IO.TextWriter.WriteLine%2A> metodo di base utilizzato per scrivere il `value` parametro.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine();" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : unit -&gt; unit&#xA;override this.WriteLine : unit -&gt; unit" Usage="htmlTextWriter.WriteLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrive un terminatore di riga nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa del terminatore di riga predefinito è un ritorno a capo seguito da un avanzamento riga ("\r\n"). Per ulteriori informazioni, vedere <xref:System.IO.TextWriter.WriteLine%2A>.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metodo per inserire una riga dopo un `<img>` elemento sottoposto a rendering.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(bool value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : bool -&gt; unit&#xA;override this.WriteLine : bool -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Valore Boolean da scrivere nel flusso di output.</param>
        <summary>Scrive qualsiasi spaziatura di tabulazione in sospeso e la rappresentazione testuale di un valore Boolean, seguita da una stringa del terminatore di riga nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa del terminatore di riga predefinito è un ritorno a capo seguito da un avanzamento riga ("\r\n"). Il <xref:System.IO.TextWriter.WriteLine%2A> metodo di base utilizzato per scrivere il `value` parametro.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(char value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : char -&gt; unit&#xA;override this.WriteLine : char -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Carattere da scrivere nel flusso di output.</param>
        <summary>Scrive qualsiasi spaziatura di tabulazione in sospeso e un carattere Unicode, seguito da una stringa del terminatore di riga, nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa del terminatore di riga predefinito è un ritorno a capo seguito da un avanzamento riga ("\r\n"). Il <xref:System.IO.TextWriter.WriteLine%2A> metodo di base utilizzato per scrivere il `value` parametro.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : char[] -&gt; unit&#xA;override this.WriteLine : char[] -&gt; unit" Usage="htmlTextWriter.WriteLine buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di caratteri da scrivere nel flusso di output.</param>
        <summary>Scrive qualsiasi spaziatura di tabulazione in sospeso e una matrice di caratteri Unicode, seguita da una stringa del terminatore di riga, nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa del terminatore di riga predefinito è un ritorno a capo seguito da un avanzamento riga ("\r\n"). Il <xref:System.IO.TextWriter.WriteLine%2A> metodo di base utilizzato per scrivere il `value` parametro.  
  
   
  
## Examples  
 In questa sezione vengono forniti due esempi di codice. Il primo esempio viene illustrato come creare una matrice. Il secondo viene illustrato come usare tale matrice.  
  
 Questi esempi di codice generano il markup seguente:  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 Esempio di codice seguente viene illustrato come creare una matrice di caratteri che compongono il testo `hello world`. Incluso nella matrice è il <xref:System.Web.UI.HtmlTextWriter.SpaceChar> campo, che consente di creare uno spazio tra le due parole.  
  
 [!code-csharp[MarkupTextWriter_Methods2#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#6)]
 [!code-vb[MarkupTextWriter_Methods2#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#6)]  
  
 Il codice seguente esegue il rendering di esempio il `hello world` matrice di caratteri che è stato creato nell'esempio precedente usando il <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> (metodo).  
  
 [!code-csharp[MarkupTextWriter_Methods2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#5)]
 [!code-vb[MarkupTextWriter_Methods2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(double value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : double -&gt; unit&#xA;override this.WriteLine : double -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Numero in virgola mobile e precisione doppia da scrivere nel flusso di output.</param>
        <summary>Scrive qualsiasi spaziatura di tabulazione in sospeso e la rappresentazione testuale di un numero in virgola mobile e precisione doppia, seguita da una stringa del terminatore di riga, nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa del terminatore di riga predefinito è un ritorno a capo seguito da un avanzamento riga ("\r\n"). Il <xref:System.IO.TextWriter.WriteLine%2A> metodo di base utilizzato per scrivere il `value` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metodo per il rendering del valore della <xref:System.Double.MaxValue?displayProperty=nameWithType> campo.  
  
 Questo esempio di codice genera il markup seguente:  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#3)]
 [!code-vb[MarkupTextWriter_Methods1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(int value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : int -&gt; unit&#xA;override this.WriteLine : int -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Valore integer a 32 byte con segno da scrivere nel flusso di output.</param>
        <summary>Scrive qualsiasi spaziatura di tabulazione in sospeso e la rappresentazione testuale di un intero con segno a 32 byte, seguita da una stringa del terminatore di riga, nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa del terminatore di riga predefinito è un ritorno a capo seguito da un avanzamento riga ("\r\n"). Il <xref:System.IO.TextWriter.WriteLine%2A> metodo di base utilizzato per scrivere il `value` parametro.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(long value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : int64 -&gt; unit&#xA;override this.WriteLine : int64 -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Intero con segno a 64 byte da scrivere nel flusso di output.</param>
        <summary>Scrive nel flusso di output qualsiasi spaziatura di tabulazione in sospeso e la rappresentazione testuale di un intero con segno a 64 byte, seguita da una stringa del terminatore di riga.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa del terminatore di riga predefinito è un ritorno a capo seguito da un avanzamento riga ("\r\n"). Il <xref:System.IO.TextWriter.WriteLine%2A> metodo di base utilizzato per scrivere il `value` parametro.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : obj -&gt; unit&#xA;override this.WriteLine : obj -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Oggetto da scrivere nel flusso di output.</param>
        <summary>Scrive qualsiasi spaziatura di tabulazione in sospeso e la rappresentazione testuale di un oggetto, seguita da una stringa del terminatore di riga, nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa del terminatore di riga predefinito è un ritorno a capo seguito da un avanzamento riga ("\r\n"). Il <xref:System.IO.TextWriter.WriteLine%2A> metodo di base utilizzato per scrivere il `value` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metodo per il rendering del valore della <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> proprietà a un controllo.  
  
 [!code-csharp[MarkupTextWriter_Methods1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#4)]
 [!code-vb[MarkupTextWriter_Methods1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(float value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : single -&gt; unit&#xA;override this.WriteLine : single -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Numero in virgola mobile e precisione singola da scrivere nel flusso di output.</param>
        <summary>Scrive qualsiasi spaziatura di tabulazione in sospeso e la rappresentazione testuale di un numero in virgola mobile e precisione singola, seguita da una stringa del terminatore di riga, nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa del terminatore di riga predefinito è un ritorno a capo seguito da un avanzamento riga ("\r\n"). Il <xref:System.IO.TextWriter.WriteLine%2A> metodo di base utilizzato per scrivere il `value` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metodo per il rendering del valore del <xref:System.Single.Epsilon?displayProperty=nameWithType> campo, che rappresenta il valore minimo possibile del <xref:System.Single> struttura.  
  
 Questo esempio di codice genera il markup seguente:  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#9)]
 [!code-vb[MarkupTextWriter_Methods1#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ s);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string -&gt; unit&#xA;override this.WriteLine : string -&gt; unit" Usage="htmlTextWriter.WriteLine s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Stringa da scrivere nel flusso di output.</param>
        <summary>Scrive qualsiasi spaziatura di tabulazione in sospeso e una stringa di testo, seguita da una stringa del terminatore di riga, nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa del terminatore di riga predefinito è un ritorno a capo seguito da un avanzamento riga ("\r\n"). Il <xref:System.IO.TextWriter.WriteLine%2A> metodo di base utilizzato per scrivere il `value` parametro.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : uint32 -&gt; unit&#xA;override this.WriteLine : uint32 -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">Valore integer a 4 byte senza segno da scrivere nel flusso di output.</param>
        <summary>Scrive qualsiasi spaziatura di tabulazione in sospeso e la rappresentazione testuale di un valore integer a 4 byte senza segno, seguita da una stringa del terminatore di riga, nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa del terminatore di riga predefinito è un ritorno a capo seguito da un avanzamento riga ("\r\n"). Il <xref:System.IO.TextWriter.WriteLine%2A> metodo di base utilizzato per scrivere il `value` parametro.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string * obj -&gt; unit&#xA;override this.WriteLine : string * obj -&gt; unit" Usage="htmlTextWriter.WriteLine (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Stringa contenente zero o più elementi di formato.</param>
        <param name="arg0">Oggetto da formattare.</param>
        <summary>Scrive qualsiasi spaziatura di tabulazione in sospeso e una stringa formattata contenente la rappresentazione testuale di un oggetto, seguita da una stringa del terminatore di riga, nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa del terminatore di riga predefinito è un ritorno a capo seguito da un avanzamento riga ("\r\n"). Il <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metodo utilizza la stessa semantica di <xref:System.String.Format%28System.String%2CSystem.Object%29> (metodo). Il <xref:System.IO.TextWriter.WriteLine%2A> metodo di base utilizzato per scrivere il `value` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metodo per eseguire il rendering di una stringa formattata con il valore della <xref:System.Globalization.CultureInfo.CurrentCulture%2A> proprietà.  
  
 [!code-csharp[MarkupTextWriter_Methods1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#1)]
 [!code-vb[MarkupTextWriter_Methods1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string * obj[] -&gt; unit&#xA;override this.WriteLine : string * obj[] -&gt; unit" Usage="htmlTextWriter.WriteLine (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Stringa contenente zero o più elementi di formato.</param>
        <param name="arg">Matrice di oggetti da formattare.</param>
        <summary>Scrive qualsiasi spaziatura di tabulazione in sospeso e una stringa formattata contenente la rappresentazione testuale di una matrice di oggetti, seguita da una stringa del terminatore di riga, nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa del terminatore di riga predefinito è un ritorno a capo seguito da un avanzamento riga ("\r\n"). Il <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metodo utilizza la stessa semantica di <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29> (metodo). Il <xref:System.IO.TextWriter.WriteLine%2A> metodo di base utilizzato per scrivere il `value` (metodo).  
  
   
  
## Examples  
 In questa sezione sono riportati due esempi di codice. Il primo viene illustrato come eseguire il rendering di una stringa e una matrice nel flusso di output. Il secondo viene illustrato come dichiarare la matrice.  
  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metodo per eseguire il rendering di una stringa formattata e il contenuto di una matrice di oggetti nel flusso di output.  
  
 [!code-csharp[MarkupTextWriter_Methods2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#2)]
 [!code-vb[MarkupTextWriter_Methods2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#2)]  
  
 Esempio di codice seguente viene illustrato come dichiarare una matrice di oggetti che è stato eseguito il rendering nell'esempio di codice precedente.  
  
 [!code-csharp[MarkupTextWriter_Methods2#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#7)]
 [!code-vb[MarkupTextWriter_Methods2#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : char[] * int * int -&gt; unit&#xA;override this.WriteLine : char[] * int * int -&gt; unit" Usage="htmlTextWriter.WriteLine (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di caratteri da cui scrivere il testo nel flusso di output.</param>
        <param name="index">Posizione di inizio scrittura all'interno della matrice di caratteri.</param>
        <param name="count">Numero di caratteri della matrice da scrivere nel flusso di output.</param>
        <summary>Scrive qualsiasi spaziatura di tabulazione in sospeso e una sottomatrice di caratteri Unicode, seguita da una stringa del terminatore di riga, nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa del terminatore di riga predefinito è un ritorno a capo seguito da un avanzamento riga ("\r\n"). Il <xref:System.IO.TextWriter.WriteLine%2A> metodo di base utilizzato per scrivere il `value` parametro.  
  
   
  
## Examples  
 In questa sezione sono riportati due esempi di codice. Il primo esempio viene illustrato come creare una matrice di caratteri. Il secondo viene illustrato come usare la matrice.  
  
 Questi esempi di codice generano il markup seguente:  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 Esempio di codice seguente viene illustrato come creare una matrice di caratteri che compongono il testo `hello world`. Incluso nella matrice è il <xref:System.Web.UI.HtmlTextWriter.SpaceChar> campo, che consente di creare uno spazio tra le due parole.  
  
 [!code-csharp[MarkupTextWriter_Methods2#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#6)]
 [!code-vb[MarkupTextWriter_Methods2#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#6)]  
  
 Il codice seguente viene illustrato come utilizzare il `index` e `count` i parametri del <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metodo per eseguire il rendering i primi cinque caratteri della matrice creata nell'esempio di codice precedente.  
  
 [!code-csharp[MarkupTextWriter_Methods2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#4)]
 [!code-vb[MarkupTextWriter_Methods2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string * obj * obj -&gt; unit&#xA;override this.WriteLine : string * obj * obj -&gt; unit" Usage="htmlTextWriter.WriteLine (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Stringa contenente zero o più elementi di formato.</param>
        <param name="arg0">Oggetto da formattare.</param>
        <param name="arg1">Oggetto da formattare.</param>
        <summary>Scrive qualsiasi spaziatura di tabulazione in sospeso e una stringa formattata contenente la rappresentazione testuale di due oggetti, seguita da una stringa del terminatore di riga, nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa del terminatore di riga predefinito è un ritorno a capo seguito da un avanzamento riga ("\r\n"). Il <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metodo utilizza la stessa semantica di <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%29> (metodo). Il <xref:System.IO.TextWriter.WriteLine%2A> metodo di base utilizzato per scrivere il `value` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metodo per eseguire il rendering di una stringa formattata e i valori del <xref:System.Globalization.CultureInfo.CurrentCulture%2A> proprietà e il <xref:System.DateTime.Today%2A> proprietà.  
  
 [!code-csharp[MarkupTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#2)]
 [!code-vb[MarkupTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineNoTabs">
      <MemberSignature Language="C#" Value="public void WriteLineNoTabs (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteLineNoTabs(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLineNoTabs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLineNoTabs (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteLineNoTabs(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.WriteLineNoTabs : string -&gt; unit" Usage="htmlTextWriter.WriteLineNoTabs s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Stringa da scrivere nel flusso di output.</param>
        <summary>Scrive una stringa, seguita da una stringa del terminatore di riga, nel flusso di output. Questo metodo ignora qualsiasi spaziatura di tabulazione specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il <xref:System.Web.UI.HtmlTextWriter.WriteLineNoTabs%2A> metodo anziché il <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> metodo quando non si desidera eseguire il rendering di qualsiasi spaziatura di tabulazione in anticipo rispetto alla stringa visualizzabile `s`.  
  
 La stringa del terminatore di riga predefinito è un ritorno a capo seguito da un avanzamento riga ("\r\n"). Il <xref:System.IO.TextWriter.WriteLine%2A> metodo di base utilizzato per scrivere il `value` parametro.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStyleAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Scrive un attributo di stile e il relativo valore nel flusso di output.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteStyleAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteStyleAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteStyleAttribute : string * string -&gt; unit&#xA;override this.WriteStyleAttribute : string * string -&gt; unit" Usage="htmlTextWriter.WriteStyleAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Attributo di stile da scrivere nel flusso di output.</param>
        <param name="value">Valore assegnato all'attributo di stile.</param>
        <summary>Scrive l'attributo di stile specificato nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> metodo scrive l'attributo di stile nel formato seguente:  
  
 `name` `=` `value` `;`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.Write" />
      </Docs>
    </Member>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteStyleAttribute (name As String, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteStyleAttribute(System::String ^ name, System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="abstract member WriteStyleAttribute : string * string * bool -&gt; unit&#xA;override this.WriteStyleAttribute : string * string * bool -&gt; unit" Usage="htmlTextWriter.WriteStyleAttribute (name, value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Attributo di stile da scrivere nel flusso di output.</param>
        <param name="value">Valore assegnato all'attributo di stile.</param>
        <param name="fEncode">
          <see langword="true" /> per codificare l'attributo di stile e il valore assegnato; in caso contrario, <see langword="false" />.</param>
        <summary>Scrive l'attributo di stile e il valore specificati nel flusso di output e codifica il valore, se specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> metodo scrive l'attributo di stile nel formato seguente:  
  
 `name` `=` `value` `;`  
  
 Il <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> metodo viene usato per codificare il `value` parametro.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.Write" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="WriteUrlEncodedString">
      <MemberSignature Language="C#" Value="protected void WriteUrlEncodedString (string text, bool argument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void WriteUrlEncodedString(string text, bool argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub WriteUrlEncodedString (text As String, argument As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void WriteUrlEncodedString(System::String ^ text, bool argument);" />
      <MemberSignature Language="F#" Value="member this.WriteUrlEncodedString : string * bool -&gt; unit" Usage="htmlTextWriter.WriteUrlEncodedString (text, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="argument" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">Stringa da codificare e scrivere nel flusso di output.</param>
        <param name="argument">
          <see langword="true" /> per codificare la stringa come una parte della sezione parametro dell'URL; <see langword="false" /> per codificare la stringa come parte della sezione percorso dell'URL.</param>
        <summary>Scrive la stringa specificata, codificandola secondo i requisiti URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString%2A> metodo codifica i caratteri che possono essere considerati come delimitatori URL (dipende dall'impostazione di `argument`) in stringhe nel formato `%xx`, se il codice ASCII è minore di 128; in caso contrario, `%uxxxx`, dove `x` è un cifra esadecimale.  
  
 Il <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> e <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A> metodi usano il <xref:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString%2A> metodo come metodo di utilità.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrl(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>