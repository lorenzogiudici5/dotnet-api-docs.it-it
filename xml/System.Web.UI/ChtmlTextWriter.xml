<Type Name="ChtmlTextWriter" FullName="System.Web.UI.ChtmlTextWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e805d8f6ad91bd3c25b09a87d994da94dd827dea" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39856700" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ChtmlTextWriter : System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChtmlTextWriter extends System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ChtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class ChtmlTextWriter&#xA;Inherits Html32TextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChtmlTextWriter : System::Web::UI::Html32TextWriter" />
  <TypeSignature Language="F#" Value="type ChtmlTextWriter = class&#xA;    inherit Html32TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Html32TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Scrive una serie di caratteri e testo specifici di cHTML nel flusso di output per un controllo server ASP.NET. La classe <see cref="T:System.Web.UI.ChtmlTextWriter" /> fornisce le funzionalità di formattazione utilizzate dai controlli server di ASP.NET per il rendering del contenuto cHTML sui client.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Compact HTML o cHTML, è un subset di 2.0 HTML, HTML 3.2 e HTML 4.0 e viene progettato per eseguire il rendering in dispositivi con memoria limitata e potenza della CPU, insieme a schermi di piccole dimensioni, limitati formattazione di funzionalità e un numero limitato di opzioni di input (ad esempio un telefono cellulare riempimento touch). Pertanto, cHTML non supporta quanto segue:  
  
-   Immagini JPEG.  
  
-   Tabelle.  
  
-   Le mappe immagine.  
  
-   Più tipi di carattere di carattere e stili.  
  
-   I colori di sfondo e immagini.  
  
-   Fotogrammi.  
  
-   Fogli di stile.  
  
 Il <xref:System.Web.UI.ChtmlTextWriter> deriva dalla classe la <xref:System.Web.UI.Html32TextWriter> classe e molte delle relative funzionalità vengono forniti dal <xref:System.Web.UI.Html32TextWriter> e la classe base per tutti i writer di testo di markup, ovvero il <xref:System.Web.UI.HtmlTextWriter> classe.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come creare una classe denominata `CustomChtmlTextWriter` che deriva dal <xref:System.Web.UI.ChtmlTextWriter> classe. Crea due costruttori che esegue l'override di <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> metodo per impedire il `bgcolor` attributo di stile impedisce la scrittura nel flusso di output del <xref:System.Web.UI.ChtmlTextWriter> oggetto. Viene inoltre creata una classe denominata `ChtmlCustomPageAdapter` che definisce un metodo, ovvero `CreateCustomChtmlTextWriter`, che crea e restituisce un'istanza del `CustomChtmlTextWriter` classe. Il `CustomChtmlTextWriter` quindi esegue il rendering del contenuto cHTML per una pagina in dispositivi con browser che usano markup cHTML.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.ChtmlTextWriter" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ChtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.ChtmlTextWriter" Usage="new System.Web.UI.ChtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Oggetto <see cref="T:System.IO.TextWriter" /> che esegue il rendering del contenuto del markup.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.ChtmlTextWriter" /> che utilizza la costante <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" /> per applicare il rientro alle righe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ChtmlTextWriter> classe dispone di due costruttori, ovvero standard per tutte le classi che derivano direttamente o indirettamente dal <xref:System.Web.UI.HtmlTextWriter> classe.  
  
 Il <xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A> costruttore che accetta un'istanza di <xref:System.IO.TextWriter> classe come parametro, chiama il secondo costruttore e lo passa due valori di parametro:  
  
-   Oggetto <xref:System.IO.TextWriter>.  
  
-   Il valore di stringa specificata nel <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> campo, che definisce la spaziatura di tabulazione utilizzato dal writer di testo XHTML.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come creare una classe denominata `ChtmlCustomPageAdapter` e definisce un metodo, ovvero `CreateCustomChtmlTextWriter`, che crea e restituisce un'istanza del `CustomChtmlTextWriter` classe. Il `CustomChtmlTextWriter` quindi esegue il rendering del contenuto cHTML per le pagine per i dispositivi con browser che usano markup cHTML.  
  
 Questo esempio di codice è parte di un esempio più esaustivo disponibile per il <xref:System.Web.UI.ChtmlTextWriter> classe.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ChtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.ChtmlTextWriter" Usage="new System.Web.UI.ChtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">Oggetto <see cref="T:System.IO.TextWriter" /> che esegue il rendering del contenuto del markup.</param>
        <param name="tabString">Numero di spazi definiti nella proprietà <see cref="P:System.Web.UI.HtmlTextWriter.Indent" />.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.ChtmlTextWriter" /> con il rientro della riga specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A> costruttore che accetta sia un'istanza del <xref:System.IO.TextWriter> classe e una stringa come parametri, le chiamate di <xref:System.Web.UI.Html32TextWriter> costruttore che accetta gli stessi parametri durante la creazione di un'istanza del <xref:System.Web.UI.ChtmlTextWriter> classe.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come creare una classe personalizzata denominata `CustomChtmlTextWriter` che deriva dal <xref:System.Web.UI.ChtmlTextWriter> classe. Crea due costruttori che è possibile usare per creare un'istanza della classe personalizzata con lo stesso modello, come tutte le classi che derivano direttamente o indirettamente, dal <xref:System.Web.UI.HtmlTextWriter> classe.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member AddRecognizedAttribute : string * string -&gt; unit&#xA;override this.AddRecognizedAttribute : string * string -&gt; unit" Usage="chtmlTextWriter.AddRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Elemento cHTML a cui aggiungere l'attributo.</param>
        <param name="attributeName">Attributo da aggiungere a <c>elementName</c>.</param>
        <summary>Aggiunge un attributo a un elemento cHTML dell'oggetto <see cref="T:System.Web.UI.ChtmlTextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A> metodo aggiunge un attributo a un elemento cHTML. L'attributo riconosciuta viene archiviato negli attributi riconosciuti <xref:System.Collections.Hashtable> raccolta del <xref:System.Web.UI.ChtmlTextWriter> oggetto cui fa riferimento il <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="GlobalSuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable GlobalSuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable GlobalSuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property GlobalSuppressedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ GlobalSuppressedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalSuppressedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.Collections.Hashtable" /> di attributi soppressi globalmente di cui non è possibile eseguire il rendering in elementi cHTML.</summary>
        <value>Classe <see cref="T:System.Collections.Hashtable" /> di attributi cHTML soppressi globalmente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nell'elenco seguente vengono visualizzati gli attributi soppressi globalmente vengono impostati quando una nuova istanza di <xref:System.Web.UI.ChtmlTextWriter> classe viene creata.  
  
|||  
|-|-|  
|`onclick`|`onmousemove`|  
|`ondblclick`|`onmouseout`|  
|`onmousedown`|`onkeypress`|  
|`onmouseup`|`onkeydown`|  
|`onmouseover`|`onkeyup`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="chtmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Attributo cHTML di cui eseguire il rendering.</param>
        <param name="value">Valore assegnato a <c>name</c>.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> associato a <c>name</c>.</param>
        <summary>Determina se viene eseguito il rendering dell'attributo cHTML specificato e del relativo valore nella pagina in cui viene sottoposta la richiesta. È possibile eseguire l'override del metodo <see cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> nelle classi che derivano dalla classe <see cref="T:System.Web.UI.ChtmlTextWriter" /> per escludere gli attributi di cui non si desidera eseguire il rendering in dispositivi che supportano cHTML.</summary>
        <returns>
          <see langword="true" /> per scrivere l'attributo e il relativo valore nel flusso di output di <see cref="T:System.Web.UI.ChtmlTextWriter" />. In caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, il <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> metodo impedisce di attributi soppressi globalmente elencati nel <xref:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes%2A> proprietà e gli attributi soppressi specifici elencati nel <xref:System.Web.UI.ChtmlTextWriter.SuppressedAttributes%2A> proprietà impedisce la scrittura nel flusso di output. È possibile ignorare il comportamento dei <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> metodo nelle classi che derivano dal <xref:System.Web.UI.ChtmlTextWriter> classe.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare una classe personalizzata che esegue l'override di <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> metodo per impedire il `bgcolor` attributo impedisce la scrittura nel flusso di output cHTML. Chiama quindi la funzionalità fornita da di base <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> metodo di <xref:System.Web.UI.ChtmlTextWriter> classe per garantire che venga utilizzato il comportamento predefinito, troppo.  
  
 Questo esempio di codice è parte di un esempio più esaustivo disponibile per il <xref:System.Web.UI.ChtmlTextWriter> classe.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="chtmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Stringa contenente il nome dell'attributo di stile di cui eseguire il rendering.</param>
        <param name="value">Stringa contenente il valore assegnato a <c>name</c>.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> associato a <c>name</c>.</param>
        <summary>Determina se è possibile eseguire il rendering dell'attributo di stile markup cHTML specificato e del relativo valore nell'elemento di markup corrente.</summary>
        <returns>
          <see langword="true" /> se è possibile eseguire il rendering dello stile. In caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender%2A> restituzione del metodo `false` quando `key` è uguale al <xref:System.Web.UI.HtmlTextWriterStyle.TextDecoration> campo e il valore è `"line-through"`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected override bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnTagRender (name As String, key As HtmlTextWriterTag) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnTagRender(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="override this.OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool" Usage="chtmlTextWriter.OnTagRender (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Stringa contenente il nome dell'elemento cHTML di cui eseguire il rendering.</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterTag" /> associato a <c>name</c>.</param>
        <summary>Determina se è stato eseguito il rendering dell'elemento di markup cHTML specificato nella pagina da cui viene effettuata la richiesta.</summary>
        <returns>
          <see langword="true" /> se è possibile eseguire il rendering dell'elemento di markup cHTML. In caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'elemento cHTML è una `span` elemento, il <xref:System.Web.UI.ChtmlTextWriter.OnTagRender%2A> restituzione del metodo `false`. Per tutti gli altri tag restituisce `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable RecognizedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable RecognizedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property RecognizedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ RecognizedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.Collections.Hashtable" /> di attributi riconosciuti di cui è possibile eseguire il rendering in elementi cHTML.</summary>
        <value>Classe <see cref="T:System.Collections.Hashtable" /> di attributi cHTML riconosciuti.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il <xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A> gli attributi di metodo per aggiungere riconosciuto nella raccolta di attributi riconosciuti.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRecognizedAttribute : string * string -&gt; unit&#xA;override this.RemoveRecognizedAttribute : string * string -&gt; unit" Usage="chtmlTextWriter.RemoveRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Elemento cHTML da cui rimuovere un attributo.</param>
        <param name="attributeName">Attributo da rimuovere da <c>elementName</c>.</param>
        <summary>Rimuove un attributo di un elemento cHTML dell'oggetto <see cref="T:System.Web.UI.ChtmlTextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A> metodo rimuove un attributo da un elemento cHTML. L'attributo riconosciuta viene rimossa dagli attributi riconosciuti <xref:System.Collections.Hashtable> raccolta del <xref:System.Web.UI.ChtmlTextWriter> oggetto cui fa riferimento il <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ SuppressedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SuppressedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.Collections.Hashtable" /> di attributi soppressi specificati dall'utente di cui non viene eseguito il rendering in elementi cHTML.</summary>
        <value>Classe <see cref="T:System.Collections.Hashtable" /> di attributi cHTML soppressi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A> metodo per aggiungere attributi alla raccolta di attributi soppressi.  
  
 L'elenco seguente illustra gli attributi soppressi predefiniti impostati per un `div` elemento durante una nuova istanza del <xref:System.Web.UI.ChtmlTextWriter> classe viene creata.  
  
|||  
|-|-|  
|`accesskey`|`gridlines`|  
|`cellspacing`|`rules`|  
|`cellpadding`||  
  
 L'elenco seguente illustra gli attributi soppressi predefiniti impostati per un `span` elemento durante una nuova istanza del <xref:System.Web.UI.ChtmlTextWriter> classe viene creata.  
  
|||  
|-|-|  
|`cellspacing`|`gridlines`|  
|`cellpadding`|`rules`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBreak();" />
      <MemberSignature Language="F#" Value="override this.WriteBreak : unit -&gt; unit" Usage="chtmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrive un elemento <see langword="br" /> nel flusso di output cHTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il <xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A> suddividere metodo per inserire una riga in un flusso di cHMTL.  
  
   
  
## Examples  
 In questa sezione sono riportati due esempi di codice. Il primo esempio di codice viene illustrato come creare una classe cHTML e proprietà personalizzate. Il secondo esempio di codice viene illustrato come usare una classe personalizzata in una pagina Web.  
  
 Usare l'oggetto personalizzato `ChtmlSimplelabelAdapter` adapter, aggiungere il codice seguente per entrambi i file a livello di computer appropriato nella sottodirectory per il browser della directory di configurazione di .NET Framework o a un file nella directory App_Browsers in Web browser personalizzato directory radice dell'applicazione.  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.SimpleLabel"  
   adapterType="AspNet.Samples.ChtmlSimpleLabelAdapter" />  
</controlAdapters>  
```  
  
 Esempio di codice seguente viene illustrato come creare una classe di adattatori cHTML denominata `ChtmlSimpleLabelAdapter` per una classe denominata `SimpleLabel`. Crea un oggetto personalizzato `Control` proprietà che consente il `ChtmlSimpleLabelAdapter` classe per accedere ai membri del `SimpleLabel` classe e quindi esegue l'override di <xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A> (metodo). Eseguire l'override si verificano le operazioni seguenti:  
  
-   Crea un riferimento a un <xref:System.Web.UI.ChtmlTextWriter> oggetto, denominato `w`, che deriva dal <xref:System.Web.UI.HtmlTextWriter> che viene passato come il `writer` parametro per il <xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A> (metodo).  
  
-   Crea una stringa e lo imposta uguale al `SimpleLabel.Text` valore.  
  
-   Chiama il <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> metodo per applicare gli stili definiti dal <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> proprietà dell'etichetta di cHTML nel flusso di output.  
  
-   Scrive il `Text` valore della proprietà per il flusso e si chiude il blocco di stile tramite la chiamata di <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> (metodo).  
  
-   Chiama il <xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A> metodo per eseguire il rendering di un `br` elemento nel flusso di output dopo il rendering di testo e stili.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.vb#2)]  
  
 Nell'esempio seguente viene illustrato come utilizzare il `SimpleLabel` classe in una pagina Web.  
  
 [!code-aspx-csharp[System.Web.UI.ChtmlTextWriter_Sample1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.aspx#3)]
 [!code-aspx-vb[System.Web.UI.ChtmlTextWriter_Sample1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public override void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEncodedText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEncodedText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="override this.WriteEncodedText : string -&gt; unit" Usage="chtmlTextWriter.WriteEncodedText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Stringa di testo da codificare e scrivere nel flusso di output.</param>
        <summary>Codifica il testo specificato per il dispositivo richiedente e quindi lo scrive nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il parametro di testo passato il <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> metodo `null` o ha una lunghezza pari a zero, quindi viene scritto alcun dato.  
  
 Usare la <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> metodo quando una stringa contiene parentesi angolari (\< o >) o una e commerciale (&) e si desidera garantire che vengono visualizzati correttamente nel dispositivo richiedente.  
  
 Il <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> metodo utilizza la classe di base <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
  </Members>
</Type>