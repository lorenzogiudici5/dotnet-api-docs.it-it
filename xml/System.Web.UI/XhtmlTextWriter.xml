<Type Name="XhtmlTextWriter" FullName="System.Web.UI.XhtmlTextWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="121aef5639a0a7b428d318ebbe3011384ac4ec67" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36375601" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XhtmlTextWriter : System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XhtmlTextWriter extends System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.XhtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class XhtmlTextWriter&#xA;Inherits HtmlTextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XhtmlTextWriter : System::Web::UI::HtmlTextWriter" />
  <TypeSignature Language="F#" Value="type XhtmlTextWriter = class&#xA;    inherit HtmlTextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HtmlTextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Scrive caratteri XHTML (Extensible Hypertext Markup Language), incluse tutte le variazioni di moduli XHTML derivanti da XTHML, nel flusso di output di un controllo server ASP.NET per dispositivi mobili. Eseguire l'override della classe <see cref="T:System.Web.UI.XhtmlTextWriter" /> per fornire rendering XHTML personalizzato per pagine e controlli server ASP.NET.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XHTML è un linguaggio di markup conforme a XML, basato su HTML 4.1, che consente di creare siti Web che sono adatti per più tipi di dispositivi. Consente di unire la facilità d'uso fornito da HTML con le linee guida elemento strict fornite da XML, per produrre un linguaggio di markup con un'ampia gamma di opzioni di stile e formato e con ambiguità ridotta dei tag. Il <xref:System.Web.UI.XhtmlTextWriter> classe fornisce le funzionalità di formattazione usato dai controlli server ASP.NET durante il rendering del contenuto XHTML ai client. È possibile utilizzare il <xref:System.Web.UI.XhtmlTextWriter.SetDocType%2A> metodo per specificare il tipo di XHTML il writer di testo il rendering. Tipi di documento supportati sono definiti nel <xref:System.Web.UI.XhtmlMobileDocType> enumerazione.  
  
 Il <xref:System.Web.UI.XhtmlTextWriter> classe esegue il rendering di due set di attributi per gli elementi. Un set è una raccolta di attributi comuni, a cui fa riferimento il <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> proprietà. Il secondo set è una raccolta di attributi specifici, a cui fa riferimento il <xref:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes%2A> proprietà. Per ulteriori informazioni sugli elementi e gli stili che eseguono il rendering, vedere la specifica modularizzazione XHTML il [sito Web World Wide Web Consortium (W3C)](http://go.microsoft.com/fwlink/?linkid=37125).  
  
 È possibile utilizzare i membri del <xref:System.Web.UI.XhtmlTextWriter> classe e tutte le classi derivate per creare il writer di testo personalizzato da utilizzare nel formato XHTML personalizzato pagina schede o schede di classe. È anche possibile creare classi derivate che eseguono l'override del comportamento standard della <xref:System.Web.UI.XhtmlTextWriter> classe.  
  
 Per impostazione predefinita, quando si lavora con i browser che supportano HTML 4.0, pagine e controlli ASP.NET il rendering del markup compatibile con lo standard XHTML 1.1. Per altre informazioni, vedere [standard XHTML in Visual Studio e ASP.NET](http://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97).  
  
 Il <xref:System.Web.UI.HtmlTextWriter> output XHTML, a meno che non si configuri ASP.NET in modo specifico per non eseguire il rendering di markup XHTML. Per altre informazioni, vedere [NIB: procedura: configurare XHTML per il Rendering in siti Web di ASP.NET](http://msdn.microsoft.com/library/42483a54-f1ae-44e1-88e6-4370f8690149).  
  
   
  
## Examples  
 L'esempio di codice in questa sezione contiene quattro parti. Nel primo esempio viene illustrato come creare una classe derivata. Il secondo esempio di codice viene illustrato come creare un controllo personalizzato. Il terzo esempio di codice viene illustrato come utilizzare il controllo personalizzato. Nel quarto esempio di codice fornisce il codice che è necessario per eseguire il controllo personalizzato.  
  
 Esempio di codice seguente viene illustrato come creare una classe personalizzata derivata dal <xref:System.Web.UI.XhtmlTextWriter> classe. Sono disponibili due costruttori, ovvero standard per tutte le classi che ereditano direttamente o indirettamente il <xref:System.Web.UI.HtmlTextWriter> classe. Il primo costruttore accetta un <xref:System.IO.TextWriter> oggetto come parametro e chiama il secondo costruttore, passando i seguenti due valori di parametro:  
  
-   Istanza di <xref:System.IO.TextWriter>.  
  
-   Il valore di <xref:System.Web.UI.HtmlTextWriter.DefaultTabString?displayProperty=nameWithType> proprietà, che definisce il rientro della riga predefinito utilizzato dal writer di testo XHTML.  
  
 Questo esempio di codice viene inoltre illustrato come eseguire l'override di <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> e <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> metodi per filtrare per il testo di dimensioni e sul colore, rispettivamente. Inoltre, viene eseguito l'override di <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> e <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> i metodi per scrivere un testo della stringa prima e dopo il rendering di un controllo.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#1)]  
  
 Esempio di codice seguente viene illustrato come creare un oggetto personalizzato <xref:System.Web.UI.WebControls.Label> controllo denominato `TestLabel` e un adapter personalizzato denominato `XhtmlTestLabelAdapter` che visualizza il contenuto del controllo nel formato XHTML.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.cs#1)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.vb#1)]  
  
 Esempio di codice seguente viene illustrato come utilizzare il controllo personalizzato `TestLabel` in una pagina Web ASP.NET.  
  
 [!code-aspx-csharp[System.Web.UI.XhtmlTextWriter_Sample1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.aspx#4)]
 [!code-aspx-vb[System.Web.UI.XhtmlTextWriter_Sample1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.aspx#4)]  
  
 Per utilizzare il controllo personalizzato nell'esempio di codice precedente, aggiungere il seguente `<controlAdapters>` elemento su uno dei due file. È possibile aggiungere file a livello di computer appropriato nella sottodirectory di un browser specifico, come una sottocartella della directory di configurazione di .NET Framework. In alternativa, è possibile aggiungere a un file del browser personalizzato nella directory App_Browsers sotto la radice dell'applicazione Web.  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.TestLabel"  
   adapterType="AspNet.Samples.XhtmlTestLabelAdapter" />  
</controlAdapters>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ChtmlTextWriter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.XhtmlTextWriter" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XhtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XhtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.XhtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.XhtmlTextWriter" Usage="new System.Web.UI.XhtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Istanza <see cref="T:System.IO.TextWriter" /> che esegue il rendering del contenuto XHTML.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.XhtmlTextWriter" /> che utilizza il rientro della riga specificato nel campo <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />. Se non si desidera modificare il rientro della riga predefinito, utilizzare il costruttore <see cref="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.XhtmlTextWriter.%23ctor%2A> costruttore che accetta un <xref:System.IO.TextWriter> dell'oggetto come un parametro chiama il secondo costruttore, il passaggio di due valori di parametro:  
  
-   Istanza di <xref:System.IO.TextWriter>.  
  
-   Il valore stringa specificato nella <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> campo, che definisce la spaziatura scheda utilizzata dal writer di testo XHTML.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come creare i due costruttori, ovvero standard per tutte le classi che derivano direttamente o indirettamente dal <xref:System.Web.UI.HtmlTextWriter> (classe), per una classe personalizzata derivata dal <xref:System.Web.UI.XhtmlTextWriter> classe.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XhtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XhtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.XhtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.XhtmlTextWriter" Usage="new System.Web.UI.XhtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">Istanza <see cref="T:System.IO.TextWriter" /> che esegue il rendering del contenuto XHTML.</param>
        <param name="tabString">Stringa utilizzata per eseguire il rendering di un rientro di riga.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.XhtmlTextWriter" /> con il rientro della riga specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente viene illustrato come creare i due costruttori, ovvero standard per tutte le classi che derivano direttamente o indirettamente dal <xref:System.Web.UI.HtmlTextWriter> (classe), per una classe personalizzata derivata dal <xref:System.Web.UI.XhtmlTextWriter> classe.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member AddRecognizedAttribute : string * string -&gt; unit&#xA;override this.AddRecognizedAttribute : string * string -&gt; unit" Usage="xhtmlTextWriter.AddRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Elemento XHTML a cui aggiungere l'attributo.</param>
        <param name="attributeName">Attributo da aggiungere.</param>
        <summary>Aggiunge un attributo a un elemento XHTML. La proprietà <see cref="T:System.Web.UI.XhtmlTextWriter" /> fa riferimento all'insieme di attributi specifici degli elementi per l'oggetto <see cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute%2A> metodo per aggiungere un attributo a un elemento XHTML. L'attributo aggiunto quindi vengano riconosciuto e sottoposto a rendering dal <xref:System.Web.UI.XhtmlTextWriter> oggetto. Per impedire che il processo di scrittura per il rendering di un attributo comune di un elemento XHTML, utilizzare il <xref:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute%2A> metodo.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CommonAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable CommonAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable CommonAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CommonAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ CommonAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommonAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.CommonAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.Collections.Hashtable" /> contenente gli attributi comuni dei markup per l'oggetto <see cref="T:System.Web.UI.XhtmlTextWriter" />.</summary>
        <value>Oggetto <see cref="T:System.Collections.Hashtable" /> contenente gli attributi comuni.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> insieme contiene gli attributi che sono consentiti negli elementi XHTML e che non vengono soppressi nel <xref:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes%2A> proprietà. Per ulteriori informazioni sugli attributi comuni, vedere la [sito Web World Wide Web Consortium (W3C)](http://go.microsoft.com/fwlink/?linkid=37125).  
  
 Quando una nuova istanza di <xref:System.Web.UI.XhtmlTextWriter> classe viene creata, gli attributi comuni che vengono inizializzati sono:  
  
-   `class`  
  
-   `id`  
  
-   `title`  
  
-   `xml:lang`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      </Docs>
    </Member>
    <Member MemberName="ElementSpecificAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable ElementSpecificAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable ElementSpecificAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ElementSpecificAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ ElementSpecificAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ElementSpecificAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.Collections.Hashtable" /> contenente gli attributi specifici degli elementi.</summary>
        <value>Oggetto <see cref="T:System.Collections.Hashtable" /> contenente gli attributi specifici degli elementi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute%2A> metodo per aggiungere riconosciuto attributi a un elemento XHTML. Per rimuovere gli attributi comuni in un elemento XHTML, utilizzare il <xref:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute%2A> metodo.  
  
 Quando una nuova istanza della <xref:System.Web.UI.XhtmlTextWriter> classe viene creata, la <xref:System.Collections.Hashtable> oggetto degli attributi specifici viene popolato con gli attributi riportati nella tabella seguente.  
  
|Elemento|Attributi|  
|-------------|----------------|  
|`<a>`|`accesskey`, `href`, `charset`, `hreflang`, `rel`, `type`, `rev`, `title`, `tabindex`|  
|`<base>`|`href`|  
|`<blockquote>`|`cite`|  
|`<br>`|`id`, `class`, `title`|  
|`<form>`|`action`, `method`, `enctype`|  
|`<head>`|`xml:lang`|  
|`<html>`|`version`, `xml:lang`, `xmlns`|  
|`<img>`|`src`, `alt`, `width`, `longdesc`, `height`|  
|`<input>`|`size`, `accesskey`, `title`, `name`, `type`, `disabled`, `value`, `src`, `checked`, `maxlength`, `tabindex`|  
|`<label>`|`accesskey`, `for`|  
|`<li>`|`value`|  
|`<link>`|`hreflang`, `rev`, `type`, `charset`, `rel`, `href`, `media`|  
|`<meta>`|`content`, `name`, `xml:lang`, `http-equiv`, `scheme`|  
|`<object>`|`codebase`, `classid`, `data`, `standby`, `name`, `type`, `height`, `archive`, `declare`, `width`, `tabindex`, `codetype`|  
|`<ol>`|`start`|  
|`<optgroup>`|`label`, `disabled`|  
|`<option>`|`selected`, `value`|  
|`<param>`|`id`, `name`, `valuetype`, `value`, `type`|  
|`<pre>`|`xml:space`|  
|`<q>`|`cite`|  
|`<select>`|`name`, `tabindex`, `disabled`, `multiple`, `size`|  
|`<style>`|`xml:lang`, `xml:space`, `type`, `title`, `media`|  
|`<table>`|`width`, `summary`|  
|`<textarea>`|`name`, `cols`, `accesskey`, `tabindex`, `rows`|  
|`<td>`|`headers`, `align`, `rowspan`, `colspan`, `axis`, `scope`, `abbr`, `valign`|  
|`<th>`|`headers`, `align`, `rowspan`, `colspan`, `axis`, `scope`, `abbr`, `valign`|  
|`<title>`|`xml:lang`|  
|`<tr>`|`align`, `valign`|  
  
 Per ulteriori informazioni sugli elementi e gli stili che eseguono il rendering, vedere la specifica modularizzazione XHTML il [sito Web World Wide Web Consortium (W3C)](http://go.microsoft.com/fwlink/?linkid=37125).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public override bool IsValidFormAttribute (string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsValidFormAttribute(string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsValidFormAttribute (attributeName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsValidFormAttribute(System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="override this.IsValidFormAttribute : string -&gt; bool" Usage="xhtmlTextWriter.IsValidFormAttribute attributeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attributeName">Nome di attributo da controllare.</param>
        <summary>Controlla un attributo XHTML per assicurare che sia possibile eseguirne il rendering nel tag di apertura di un elemento <see langword="&lt;form&gt;" />.</summary>
        <returns>
          <see langword="true" /> se è possibile applicare l'attributo a un elemento <see langword="&lt;form&gt;" />. In caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è utile per il rendering in modo condizionale un attributo a seconda se è supportato dal tipo di documento XHTML del dispositivo richiedente.  
  
   
  
## Examples  
 Esempio di codice seguente fa parte di un esempio più esaustivo che crea un oggetto personalizzato <xref:System.Web.UI.WebControls.Label> controllo e un adattatore che viene eseguito il rendering del contenuto di controllo nel formato XHTML.  
  
 Questo esempio di codice viene illustrato come creare una variabile booleana denominata `attTest` e impostarlo sul valore restituito risultante dalla chiamata di <xref:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute%2A> metodo con il valore del parametro "style". Se il <xref:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute%2A> metodo restituisce `true`, gli stili che sono associati con il controllo il rendering vengono eseguiti utilizzando il <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A?displayProperty=nameWithType> e <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A?displayProperty=nameWithType> metodi. Se il `attTest` valore `false`, gli stili non viene eseguiti. Al contrario, la pagina viene visualizzato il testo per il controllo, un `<br/>` elemento che viene eseguito il rendering dal <xref:System.Web.UI.XhtmlTextWriter.WriteBreak%2A> (metodo) e una stringa di testo che informa l'utente che il contenuto XHTML del controllo è stato eseguito in modo condizionale.  
  
 Questo esempio di codice fa parte di un esempio più esaustivo disponibile per il <xref:System.Web.UI.XhtmlTextWriter> classe.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.cs#3)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="xhtmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Attributo XHTML di cui eseguire il rendering.</param>
        <param name="value">Valore assegnato all'attributo XHTML.</param>
        <param name="key">Valore di enumerazione di <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> associato all'attributo XHTML.</param>
        <summary>Determina se è possibile eseguire il rendering dell'attributo XHTML specificato e del relativo valore nell'elemento di markup corrente.</summary>
        <returns>
          <see langword="true" /> se viene eseguito il rendering dell'attributo nella pagina. In caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire l'override di <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> metodo per verificare se un `size` viene eseguito il rendering di attributi per uno degli elementi che eseguono il rendering da questo writer di testo. Se un `size` attributo sottoposto a rendering, il codice controlla se il relativo valore è di 8 punti. In tal caso, il <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> metodo `true`, consentendo l'attributo e il relativo valore per il rendering. Se il valore è diverso dal punto di 8, il <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> metodo `false`, e l'attributo e il relativo valore non viene eseguiti. Se il parametro della chiave del <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> non corrisponde al metodo il <xref:System.Web.UI.HtmlTextWriterAttribute.Size> dell'attributo, la funzionalità di base del <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> viene chiamato, come definito nel <xref:System.Web.UI.XhtmlTextWriter> classe.  
  
 Questo esempio di codice fa parte di un esempio più esaustivo disponibile per il <xref:System.Web.UI.XhtmlTextWriter> classe.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="xhtmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Attributo di stile XHTML di cui eseguire il rendering.</param>
        <param name="value">Valore assegnato all'attributo di stile XHTML.</param>
        <param name="key">Valore di enumerazione di <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> associato all'attributo di stile XHTML.</param>
        <summary>Determina se è possibile eseguire il rendering dell'attributo di stile XHTML specificato e del relativo valore nell'elemento di markup corrente.</summary>
        <returns>
          <see langword="true" /> se viene eseguito il rendering dell'attributo di stile. In caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire l'override di <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> metodo per verificare se un <xref:System.Web.UI.HtmlTextWriterStyle.Color> viene eseguito il rendering di attributi per uno degli elementi che eseguono il rendering da questo writer di testo. Se un <xref:System.Web.UI.HtmlTextWriterStyle.Color> attributo sottoposto a rendering, il codice controlla se il valore è viola. Se il valore è viola, il <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> metodo `false` e l'attributo e il relativo valore non viene eseguiti. Se il <xref:System.Web.UI.HtmlTextWriterStyle.Color> attributo è impostato su qualsiasi altro valore, il <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> restituisce `true` e vengono restituiti l'attributo e il relativo valore. Se il parametro della chiave del <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> non corrisponde al metodo il <xref:System.Web.UI.HtmlTextWriterStyle.Color> dell'attributo, la funzionalità di base del <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> viene chiamato, come definito nel <xref:System.Web.UI.XhtmlTextWriter> classe.  
  
 Questo esempio di codice fa parte di un esempio più esaustivo disponibile per il <xref:System.Web.UI.XhtmlTextWriter> classe.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRecognizedAttribute : string * string -&gt; unit&#xA;override this.RemoveRecognizedAttribute : string * string -&gt; unit" Usage="xhtmlTextWriter.RemoveRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Elemento XHTML da cui rimuovere un attributo.</param>
        <param name="attributeName">Attributo da rimuovere dall'elemento XHTML specificato.</param>
        <summary>Rimuove un attributo dall'insieme <see cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" /> di un elemento.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetDocType">
      <MemberSignature Language="C#" Value="public virtual void SetDocType (System.Web.UI.XhtmlMobileDocType docType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDocType(valuetype System.Web.UI.XhtmlMobileDocType docType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.SetDocType(System.Web.UI.XhtmlMobileDocType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetDocType (docType As XhtmlMobileDocType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetDocType(System::Web::UI::XhtmlMobileDocType docType);" />
      <MemberSignature Language="F#" Value="abstract member SetDocType : System.Web.UI.XhtmlMobileDocType -&gt; unit&#xA;override this.SetDocType : System.Web.UI.XhtmlMobileDocType -&gt; unit" Usage="xhtmlTextWriter.SetDocType docType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="docType" Type="System.Web.UI.XhtmlMobileDocType" />
      </Parameters>
      <Docs>
        <param name="docType">Uno dei valori dell'enumerazione <see cref="T:System.Web.UI.XhtmlMobileDocType" />.</param>
        <summary>Specifica il tipo di documento XHTML di cui il writer di testo deve eseguire il rendering nella pagina o nel controllo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.XhtmlTextWriter.SetDocType%2A> metodo in una scheda di una pagina personalizzata per definire il tipo di XHTML che si desidera eseguire il rendering per il dispositivo richiedente. Tipi di documento supportati sono definiti nel <xref:System.Web.UI.XhtmlMobileDocType> enumerazione.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.XhtmlMobileDocType" />
      </Docs>
    </Member>
    <Member MemberName="SuppressCommonAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressCommonAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressCommonAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressCommonAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ SuppressCommonAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SuppressCommonAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.Collections.Hashtable" /> di elementi per cui vengono soppressi gli attributi <see cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />.</summary>
        <value>Un oggetto <see cref="T:System.Collections.Hashtable" /> di elementi che contengono un insieme di attributi <see cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" /> di cui non è stato eseguito il rendering.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La raccolta di attributi soppressi include un elenco di elementi XHTML per il quale <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> attributi non sono sottoposti a rendering.  
  
 Quando una nuova istanza del <xref:System.Web.UI.XhtmlTextWriter> classe viene creata, la <xref:System.Collections.Hashtable> oggetto degli elementi per cui <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> vengono soppressi gli attributi sono inclusi:  
  
-   `base`  
  
-   `meta`  
  
-   `br`  
  
-   `head`  
  
-   `title`  
  
-   `html`  
  
-   `style`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBreak();" />
      <MemberSignature Language="F#" Value="override this.WriteBreak : unit -&gt; unit" Usage="xhtmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrive un elemento <see langword="&lt;br/&gt;" /> nel flusso di output XHTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato come eseguire l'override del <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A?displayProperty=nameWithType> metodo per scrivere una stringa di testo con il <xref:System.Web.UI.HtmlTextWriter.Write%2A?displayProperty=nameWithType> (metodo) e una `<br/>` elemento con la <xref:System.Web.UI.XhtmlTextWriter.WriteBreak%2A> metodo.  
  
 [!code-csharp[system.web.ui.xhtmltextwriter_sample2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#4)]
 [!code-vb[system.web.ui.xhtmltextwriter_sample2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>