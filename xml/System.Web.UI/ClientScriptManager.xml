<Type Name="ClientScriptManager" FullName="System.Web.UI.ClientScriptManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e19ff5181caa07c458ad6ff38334f4d37a7d0917" />
    <Meta Name="ms.sourcegitcommit" Value="f9e3295b6cc303a611a73a84c4b27f9da792ad0d" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/26/2018" />
    <Meta Name="ms.locfileid" Value="31910622" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ClientScriptManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ClientScriptManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ClientScriptManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClientScriptManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClientScriptManager sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definisce i metodi per la gestione di script client nelle applicazioni Web.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Web.UI.ClientScriptManager> classe viene utilizzata per gestire gli script client e li aggiunge alle applicazioni Web. È possibile ottenere un riferimento al <xref:System.Web.UI.ClientScriptManager> classe il <xref:System.Web.UI.Page.ClientScript%2A> proprietà del <xref:System.Web.UI.Page> oggetto.  
  
 È possibile aggiungere uno script client a una pagina Web in modo dichiarativo, includendo lo script nel markup HTML della pagina. Tuttavia, esistono situazioni quando è necessario aggiungere lo script client in modo dinamico. Per aggiungere uno script in modo dinamico, usare il <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> (metodo), il <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> (metodo), il <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> metodo, o <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> (metodo), a seconda di come e quando si desidera aggiungere lo script. Per ulteriori informazioni, vedere [procedura: aggiungere Client Script in modo dinamico per ASP.NET Web Pages](http://msdn.microsoft.com/library/e89f1306-e43d-49ae-a66a-e18b71007666).  
  
 Il <xref:System.Web.UI.ClientScriptManager> classe identifica in modo univoco gli script da una chiave <xref:System.String> e <xref:System.Type>. Script con la stessa chiave e tipo sono considerati duplicati. Utilizzando il tipo di script consente di evitare confusi simili di script da diversi controlli utente che potrebbero essere in uso nella pagina.  
  
 La <xref:System.Web.UI.ClientScriptManager> classe può essere utilizzata per richiamare il callback client in situazioni quando è consigliabile eseguire il codice server dal client senza postback. Questo è definito l'esecuzione di un callback fuori banda al server. In un callback del client, una funzione di script client invia una richiesta asincrona a una pagina Web ASP.NET. La pagina Web esegue una versione modificata del normale ciclo di vita per elaborare il callback. Utilizzare il <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> metodo per ottenere un riferimento a una funzione di client che, quando richiamata, avvia un callback client per un evento del server. Per ulteriori informazioni, vedere [implementazione di callback Client senza postback](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185).  
  
> [!NOTE]
>  Gli script di callback non funzionerà nei browser meno recenti che non supportano il modello DOM (Document Object) e richiedono l'attivazione di ECMAScript sul client. Per verificare se il browser supporta i callback, utilizzare il <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> proprietà, è possibile accedere tramite il <xref:System.Web.HttpRequest.Browser%2A> proprietà intrinseca di ASP.NET <xref:System.Web.HttpContext.Request%2A> oggetto.  
  
 Utilizzare il <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> (metodo) e <xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A> metodo per definire un evento di postback del client. Questi metodi consentono di funzioni di script client, quando viene richiamato, per il server eseguire il postback della pagina. Un evento di postback client è diverso da un callback client in quanto la pagina Web viene completato un ciclo di vita normale al processo di evento di postback del client.  
  
> [!NOTE]
>  Se si utilizza un <xref:System.Web.UI.WebControls.Button> controllo e <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> è impostata su `false`, è possibile utilizzare il <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> per restituire il client di postback evento per il <xref:System.Web.UI.WebControls.Button> controllo.  
  
 Il <xref:System.Web.UI.WebControls.Button.OnClientClick%2A> proprietà del <xref:System.Web.UI.WebControls.Button> controllo <xref:System.Web.UI.WebControls.ImageButton> (controllo), e <xref:System.Web.UI.WebControls.LinkButton> controllo può essere utilizzato per eseguire lo script client.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> metodo la <xref:System.Web.UI.ClientScriptManager> classe. Nella pagina vengono definiti due script client: `PopupScript`, che visualizza un messaggio di avviso quando viene caricata la pagina, e `ButtonClickScript`, che definisce un gestore client per un pulsante HTML `onClick` evento.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="P:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback" />
    <altmember cref="P:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetCallbackEventReference">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ottiene un riferimento a una funzione client che, quando richiamata, avvia un callback client a un evento server.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(class System.Web.UI.Control control, string argument, string clientCallback, string context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, System::String ^ clientCallback, System::String ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Server <see cref="T:System.Web.UI.Control" /> che gestisce il callback client. Il controllo deve implementare l'interfaccia <see cref="T:System.Web.UI.ICallbackEventHandler" /> e fornire un metodo <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" />.</param>
        <param name="argument">Argomento passato al server dallo script client.  
  
 Metodo <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" />.</param>
        <param name="clientCallback">Nome del gestore eventi client che riceve il risultato dell'evento server riuscito.</param>
        <param name="context">Script client che viene valutato sul client prima di avviare il callback. Il risultato dello script viene restituito al gestore eventi client.</param>
        <summary>Ottiene un riferimento a una funzione client che, quando richiamata, avvia un callback client a un evento server. La funzione client per questo metodo di overload include un controllo, un argomento, uno script client e un contesto specificati.</summary>
        <returns>Nome di una funzione client che richiama il callback client.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29> metodo esegue un callback fuori banda per il server che è una versione modificata del normale ciclo di vita della pagina. Per ulteriori informazioni, vedere [implementazione di callback Client senza postback](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185).  
  
> [!NOTE]
>  Quando il browser Microsoft Internet Explorer (versione 5.0 o versione successiva), il meccanismo di script di callback viene implementato tramite l'oggetto Microsoft. XMLHTTP COM e richiede che il browser da impostare per l'esecuzione di controlli ActiveX. Per altri browser, viene utilizzato XMLHttpRequest utilizzando locale modello DOM del browser (Document Object). Per verificare se un browser supporta i callback client, utilizzare il <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> proprietà. Per verificare se un browser supporta XML tramite HTTP, utilizzare il <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A> proprietà. Entrambe le proprietà sono accessibili tramite il <xref:System.Web.HttpRequest.Browser%2A> proprietà di ASP.NET intrinseco <xref:System.Web.HttpContext.Request%2A> oggetto.  
  
 Il <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> overload di <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> metodo esegue un callback in modo sincrono utilizzando XML tramite HTTP. Quando si inviano i dati in modo sincrono in uno scenario di callback, callback sincrono restituito immediatamente e non blocca il browser. Nessun due callback sincroni possono eseguire contemporaneamente nel browser. Se mentre è in corso, viene generato un secondo callback sincrono, il secondo callback sincrono annullerà il primo e verrà restituito solo il secondo callback.  
  
 Per inviare dati in modo asincrono, utilizzare uno degli overload che accetta il `useAsync` parametro, che è un valore booleano valore che controlla questo comportamento. Nello scenario asincrono è possibile avere più callback in sospeso. Tuttavia, l'ordine in cui vengono restituiti potrebbe non corrispondere all'ordine in cui vengono avviate.  
  
 Inoltre, questo overload del <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> alcuna funzione di client per gestire il caso di una condizione di errore generato dal metodo consente di specificare il <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> (metodo). Per specificare un gestore di callback client degli errori, utilizzare uno degli overload che accetta il `clientErrorCallback` parametro.  
  
 Il <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29> metodo accetta una stringa facoltativa `argument` parametro e restituisce una stringa. Per passare o ricevere più valori, concatenare i valori di input o restituire stringa, rispettivamente.  
  
> [!NOTE]
>  Evitare di utilizzare lo stato di visualizzazione nell'implementazione di pagina o controllo proprietà che devono essere aggiornate durante le operazioni di callback di script. Se le proprietà sono di sopravvivenza di richieste di pagine, è possibile utilizzare lo stato della sessione.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare i due overload di <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> metodo in uno scenario di callback client che viene incrementato di numeri interi.  
  
 Vengono visualizzati due meccanismi di callback; la differenza tra di esse è l'utilizzo del `context` parametro. Oggetto `ReceiveServerData1` funzione di callback client è fornita mediante la `context` parametro. Al contrario, il `ReceiveServerData2` funzione di callback client è definito un `<script>` blocco nella pagina. Oggetto <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> metodo è il gestore del server che incrementa il valore che viene passato al metodo e <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> metodo restituisce il valore incrementato sotto forma di stringa. Se il <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> metodo restituisce un errore, il `ProcessCallBackError` viene chiamata la funzione di client.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/cs/getcallbackeventreference.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/vb/getcallbackeventreference.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">L’oggetto <see cref="T:System.Web.UI.Control" /> specificato è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">L'oggetto <see cref="T:System.Web.UI.Control" /> specificato non implementa l'interfaccia <see cref="T:System.Web.UI.ICallbackEventHandler" />.</exception>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(class System.Web.UI.Control control, string argument, string clientCallback, string context, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, System::String ^ clientCallback, System::String ^ context, bool useAsync);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Server <see cref="T:System.Web.UI.Control" /> che gestisce il callback client. Il controllo deve implementare l'interfaccia <see cref="T:System.Web.UI.ICallbackEventHandler" /> e fornire un metodo <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" />.</param>
        <param name="argument">Argomento passato al server dallo script client.  
  
 Metodo <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" />.</param>
        <param name="clientCallback">Nome del gestore eventi client che riceve il risultato dell'evento server riuscito.</param>
        <param name="context">Script client che viene valutato sul client prima di avviare il callback. Il risultato dello script viene restituito al gestore eventi client.</param>
        <param name="useAsync">
          <see langword="true" /> per eseguire il callback in modo asincrono; <see langword="false" /> per eseguire il callback in modo sincrono.</param>
        <summary>Ottiene un riferimento a una funzione client che, quando richiamata, avvia un callback client agli eventi server. La funzione client per questo metodo di overload include un controllo, un argomento, uno script client, un contesto e un valore Boolean specificati.</summary>
        <returns>Nome di una funzione client che richiama il callback client.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo overload del metodo di <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> metodo richiede un `useAsync` parametro, che consente di eseguire il callback client in modo asincrono, impostando il valore su `true`. Le versioni di overload del metodo che non richiedono la `useAsync` parametro impostato il valore su `false` per impostazione predefinita.  
  
 Per ulteriori informazioni su questo metodo, vedere la sezione Osservazioni per l'overload <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> metodo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">L’oggetto <see cref="T:System.Web.UI.Control" /> specificato è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">L'oggetto <see cref="T:System.Web.UI.Control" /> specificato non implementa l'interfaccia <see cref="T:System.Web.UI.ICallbackEventHandler" />.</exception>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCallbackEventReference (target As String, argument As String, clientCallback As String, context As String, clientErrorCallback As String, useAsync As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::String ^ target, System::String ^ argument, System::String ^ clientCallback, System::String ^ context, System::String ^ clientErrorCallback, bool useAsync);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="clientErrorCallback" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="target">Nome di un server <see cref="T:System.Web.UI.Control" /> che gestisce il callback client. Il controllo deve implementare l'interfaccia <see cref="T:System.Web.UI.ICallbackEventHandler" /> e fornire un metodo <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" />.</param>
        <param name="argument">Argomento passato al server dallo script client.  
  
 Metodo <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" />.</param>
        <param name="clientCallback">Nome del gestore eventi client che riceve il risultato dell'evento server riuscito.</param>
        <param name="context">Script client che viene valutato sul client prima di avviare il callback. Il risultato dello script viene restituito al gestore eventi client.</param>
        <param name="clientErrorCallback">Nome del gestore eventi client che riceve il risultato quando si verifica un errore nel gestore eventi server.</param>
        <param name="useAsync">
          <see langword="true" /> per eseguire il callback in modo asincrono; <see langword="false" /> per eseguire il callback in modo sincrono.</param>
        <summary>Ottiene un riferimento a una funzione client che, quando richiamata, avvia un callback client agli eventi server. La funzione client per questo metodo di overload include una destinazione, un argomento, uno script client, un contesto, un gestore errori e un valore Boolean specificati.</summary>
        <returns>Nome di una funzione client che richiama il callback client.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo overload di <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> metodo accetta un `target` stringa parametro anziché una <xref:System.Web.UI.Control> parametro. Utilizzare questo overload quando si desidera che il callback per tornare a un valore diverso da una stringa contenente il <xref:System.Web.UI.Control.UniqueID%2A> del controllo.  
  
 Inoltre, questo overload del metodo di <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> metodo richiede un `useAsync` e un `clientErrorCallback` parametro. Il `useAsync` parametro consente di eseguire il callback client in modo asincrono, impostando il valore su `true`. Le versioni di overload del metodo che non richiedono la `useAsync` parametro impostato il valore su `false` per impostazione predefinita. Il `clientErrorCallback` parametro consente di definire il nome della funzione di client che viene chiamato se il gestore del server, il <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> metodo, viene restituito un errore. Le versioni di overload del metodo che non richiedono la `clientErrorCallback` parametro impostato il valore su null.  
  
 Per ulteriori informazioni su questo metodo, vedere la sezione Osservazioni per l'overload <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> metodo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare i due overload di <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> metodo in uno scenario di callback client che viene incrementato di numeri interi.  
  
 Vengono visualizzati due meccanismi di callback; la differenza tra di esse è l'utilizzo del `context` parametro. Oggetto `ReceiveServerData1` funzione di callback client è fornita mediante la `context` parametro. Al contrario, il `ReceiveServerData2` funzione di callback client è definito un `<script>` blocco nella pagina. Oggetto <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> metodo è il gestore del server che incrementa il valore che viene passato al metodo e <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> metodo restituisce il valore incrementato sotto forma di stringa. Se il <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> metodo restituisce un errore, quindi la funzione di client `ProcessCallBackError` viene chiamato.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/cs/getcallbackeventreference.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/vb/getcallbackeventreference.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
        <altmember cref="P:System.Web.UI.Control.UniqueID" />
      </Docs>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(class System.Web.UI.Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, System::String ^ clientCallback, System::String ^ context, System::String ^ clientErrorCallback, bool useAsync);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="clientErrorCallback" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Server <see cref="T:System.Web.UI.Control" /> che gestisce il callback client. Il controllo deve implementare l'interfaccia <see cref="T:System.Web.UI.ICallbackEventHandler" /> e fornire un metodo <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" />.</param>
        <param name="argument">Argomento passato dallo script client al metodo <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> del server.</param>
        <param name="clientCallback">Nome del gestore eventi client che riceve il risultato dell'evento server riuscito.</param>
        <param name="context">Script client che viene valutato sul client prima di avviare il callback. Il risultato dello script viene restituito al gestore eventi client.</param>
        <param name="clientErrorCallback">Nome del gestore eventi client che riceve il risultato quando si verifica un errore nel gestore eventi server.</param>
        <param name="useAsync">
          <see langword="true" /> per eseguire il callback in modo asincrono; <see langword="false" /> per eseguire il callback in modo sincrono.</param>
        <summary>Ottiene un riferimento a una funzione client che, quando richiamata, avvia un callback client agli eventi server. La funzione client per questo metodo di overload include un controllo, un argomento, uno script client, un contesto, un gestore errori e un valore Boolean specificati.</summary>
        <returns>Nome di una funzione client che richiama il callback client.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo overload del metodo di <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> metodo richiede un `useAsync` e un `clientErrorCallback` parametro. Il `useAsync` parametro consente di eseguire il callback client in modo asincrono, impostando il valore su `true`. Le versioni di overload del metodo che non richiedono la `useAsync` parametro impostato il valore su `false` per impostazione predefinita. Il `clientErrorCallback` parametro consente di definire il nome della funzione di client che viene chiamato se il gestore del server (il <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> (metodo)) restituisce un errore. Le versioni di overload del metodo che non richiedono la `clientErrorCallback` parametro impostato il valore su null.  
  
 Per ulteriori informazioni su questo metodo, vedere la sezione Osservazioni per l'overload <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> metodo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">L’oggetto <see cref="T:System.Web.UI.Control" /> specificato è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">L'oggetto <see cref="T:System.Web.UI.Control" /> specificato non implementa l'interfaccia <see cref="T:System.Web.UI.ICallbackEventHandler" />.</exception>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPostBackClientHyperlink">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ottiene un riferimento, all'inizio del quale viene aggiunto <see langword="javascript:" />, utilizzabile in un evento client per eseguire il postback nel server.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPostBackClientHyperlink">
      <MemberSignature Language="C#" Value="public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackClientHyperlink(class System.Web.UI.Control control, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackClientHyperlink(System::Web::UI::Control ^ control, System::String ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Controllo server per l'elaborazione del postback.</param>
        <param name="argument">Parametro passato al controllo server.</param>
        <summary>Ottiene un riferimento, all'inizio del quale viene aggiunto <see langword="javascript:" />, utilizzabile in un evento client per eseguire il postback nel server per il controllo specificato e con gli argomenti dell'evento specificati.</summary>
        <returns>Una stringa che rappresenta una chiamata JavaScript alla funzione di postback contenente l'ID del controllo di destinazione e gli argomenti dell'evento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzo di <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> metodo richiede che il controllo che gestisce il postback per implementare il <xref:System.Web.UI.IPostBackEventHandler> interfaccia. Per implementare il <xref:System.Web.UI.IPostBackEventHandler> interfaccia per un <xref:System.Web.UI.Page>, utilizzare la direttiva.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A> metodo. Il controllo personalizzato, `MyControl`, implementa la <xref:System.Web.UI.IPostBackEventHandler> interfaccia. Quando si seleziona l'elemento ancoraggio HTML della pagina, il <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> del controllo personalizzato viene richiamato.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreferencecs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreferencevb.aspx#1)]  
  
 Esempio di codice riportato di seguito ha la stessa funzionalità dell'esempio precedente, tranne il fatto che invece di un controllo personalizzato, il <xref:System.Web.UI.Page> classe implementa il <xref:System.Web.UI.IPostBackEventHandler> interfaccia.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreference2cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreference2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetPostBackClientHyperlink">
      <MemberSignature Language="C#" Value="public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument, bool registerForEventValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackClientHyperlink(class System.Web.UI.Control control, string argument, bool registerForEventValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackClientHyperlink(System::Web::UI::Control ^ control, System::String ^ argument, bool registerForEventValidation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Controllo server per l'elaborazione del postback.</param>
        <param name="argument">Parametro passato al controllo server.</param>
        <param name="registerForEventValidation">
          <see langword="true" /> per registrare l'evento di postback per la convalida; <see langword="false" /> per non registrare l'evento di postback per la convalida.</param>
        <summary>Ottiene un riferimento, all'inizio del quale viene aggiunto <see langword="javascript:" />, utilizzabile in un evento client per eseguire il postback nel server per il controllo specificato con gli argomenti dell'evento specificati e un valore booleano che indica se registrare o meno il postback per la convalida dell'evento.</summary>
        <returns>Una stringa che rappresenta una chiamata JavaScript alla funzione di postback contenente l'ID del controllo di destinazione e gli argomenti dell'evento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzo di <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> metodo richiede che il controllo che gestisce il postback per implementare il <xref:System.Web.UI.IPostBackEventHandler> interfaccia. Per implementare il <xref:System.Web.UI.IPostBackEventHandler> interfaccia per un <xref:System.Web.UI.Page>, utilizzare la direttiva.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPostBackEventReference">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce una stringa utilizzabile in un evento client per causare il postback nel server.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.PostBackOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.PostBackOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostBackEventReference (options As PostBackOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::PostBackOptions ^ options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
      </Parameters>
      <Docs>
        <param name="options">Classe <see cref="T:System.Web.UI.PostBackOptions" /> che definisce il postback.</param>
        <summary>Restituisce una stringa utilizzabile in un evento client per causare il postback nel server. La stringa del riferimento è definita dall'istanza <see cref="T:System.Web.UI.PostBackOptions" /> specificata.</summary>
        <returns>Stringa che, quando viene trattata come script sul client, avvia il postback client.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per implementare il <xref:System.Web.UI.IPostBackEventHandler> interfaccia per un <xref:System.Web.UI.Page>, utilizzare la direttiva.  
  
 Il <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> metodo può essere utilizzato con il <xref:System.Web.UI.WebControls.Button> controllare quando il <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> proprietà `false`. In questo scenario, il <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> restituisce al client di postback evento per il <xref:System.Web.UI.WebControls.Button> controllo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il parametro <see cref="T:System.Web.UI.PostBackOptions" /> è <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <altmember cref="T:System.Web.UI.WebControls.Button" />
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.Control control, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.Control control, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::Control ^ control, System::String ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Classe <see cref="T:System.Web.UI.Control" /> del server che elabora il postback sul server.</param>
        <param name="argument">Stringa di argomenti facoltativi da passare al controllo che elabora il postback.</param>
        <summary>Restituisce una stringa utilizzabile in un evento client per causare il postback nel server. La stringa del riferimento è definita dal controllo specificato che gestisce il postback e da un argomento stringa contenente informazioni aggiuntive sull'evento.</summary>
        <returns>Stringa che, quando viene trattata come script nel client, avvia il postback.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per implementare il <xref:System.Web.UI.IPostBackEventHandler> interfaccia per un <xref:System.Web.UI.Page>, utilizzare la direttiva.  
  
 Il <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> metodo può essere utilizzato con il <xref:System.Web.UI.WebControls.Button> controllare quando il <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> proprietà `false`. In questo scenario, il <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> restituisce al client di postback evento per il <xref:System.Web.UI.WebControls.Button> controllo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> metodo. Il controllo personalizzato, `MyControl`, implementa la <xref:System.Web.UI.IPostBackEventHandler> interfaccia. Quando si fa clic sul pulsante nella pagina, il <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> del controllo personalizzato viene richiamato.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreferencecs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreferencevb.aspx#1)]  
  
 Esempio di codice riportato di seguito ha la stessa funzionalità dell'esempio precedente, tranne il fatto che invece di un controllo personalizzato, il <xref:System.Web.UI.Page> classe implementa il <xref:System.Web.UI.IPostBackEventHandler> interfaccia.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreference2cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreference2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore specificato per il parametro <see cref="T:System.Web.UI.Control" /> è <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.PostBackOptions options, bool registerForEventValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.PostBackOptions options, bool registerForEventValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostBackEventReference (options As PostBackOptions, registerForEventValidation As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::PostBackOptions ^ options, bool registerForEventValidation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="options">Classe <see cref="T:System.Web.UI.PostBackOptions" /> che definisce il postback.</param>
        <param name="registerForEventValidation">
          <see langword="true" /> per registrare un riferimento all'evento per la convalida; in caso contrario <see langword="false" />.</param>
        <summary>Restituisce una stringa utilizzabile in un evento client per causare il postback nel server. La stringa di riferimento è definita dall'oggetto <see cref="T:System.Web.UI.PostBackOptions" /> specificato. Facoltativamente, registra un riferimento all'evento per la convalida.</summary>
        <returns>Stringa che, quando viene trattata come script sul client, avvia il postback client.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per implementare il <xref:System.Web.UI.IPostBackEventHandler> interfaccia per un <xref:System.Web.UI.Page> oggetto, usare la direttiva.  
  
 Il <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> metodo può essere utilizzato con il <xref:System.Web.UI.WebControls.Button> controllare quando il <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> proprietà `false`. In questo scenario, il <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> restituisce al client di postback evento per il <xref:System.Web.UI.WebControls.Button> controllo.  
  
 Se `registerForEventValidation` è `true`, <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29> chiamate al metodo di <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> metodo per registrare il riferimento all'evento per la convalida con un ID di controllo univoco che rappresenta il controllo client che genera l'evento.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">L'elemento <see cref="T:System.Web.UI.PostBackOptions" /> è <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <altmember cref="T:System.Web.UI.WebControls.Button" />
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.Control control, string argument, bool registerForEventValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.Control control, string argument, bool registerForEventValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, bool registerForEventValidation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Classe <see cref="T:System.Web.UI.Control" /> del server che elabora il postback sul server.</param>
        <param name="argument">Stringa di argomenti facoltativi da passare a <c>control</c>.</param>
        <param name="registerForEventValidation">
          <see langword="true" /> per registrare un riferimento all'evento per la convalida; in caso contrario <see langword="false" />.</param>
        <summary>Restituisce una stringa utilizzabile in un evento client per causare il postback nel server. La stringa del riferimento è definita dal controllo specificato che gestisce il postback e da un argomento stringa contenente informazioni aggiuntive sull'evento. Facoltativamente, registra un riferimento all'evento per la convalida.</summary>
        <returns>Stringa che, quando viene trattata come script nel client, avvia il postback.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per implementare il <xref:System.Web.UI.IPostBackEventHandler> interfaccia per un <xref:System.Web.UI.Page>, utilizzare la direttiva.  
  
 Il <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> metodo può essere utilizzato con il <xref:System.Web.UI.WebControls.Button> controllare quando il <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> proprietà `false`. In questo scenario, il <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> restituisce al client di postback evento per il <xref:System.Web.UI.WebControls.Button> controllo.  
  
 Se `registerForEventValidation` è true, il <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29> chiamate al metodo di <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> metodo per registrare il riferimento all'evento per la convalida con un ID di controllo univoco che rappresenta il controllo client che genera l'evento.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore specificato per il parametro <see cref="T:System.Web.UI.Control" /> è <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="GetWebResourceUrl">
      <MemberSignature Language="C#" Value="public string GetWebResourceUrl (Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetWebResourceUrl(class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetWebResourceUrl(Type ^ type, System::String ^ resourceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">Tipo di risorsa.</param>
        <param name="resourceName">Nome completo della risorsa nell'assembly.</param>
        <summary>Ottiene un riferimento URL a una risorsa in un assembly.</summary>
        <returns>Riferimento URL alla risorsa.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A> metodo restituisce un riferimento URL a una risorsa incorporata in un assembly. Il riferimento restituito non è codificato in URL. Risorse possono essere qualsiasi file statico, immagini o file di script. Specificare il tipo in base all'oggetto che sarà possibile accedere alla risorsa.  
  
 Una risorsa Web registrata con la pagina è identificata in modo univoco il tipo e nome. Solo una risorsa con una coppia di nome e il tipo specificato può essere registrata con la pagina. Il tentativo di registrare una risorsa che è già registrata non crea un duplicato della risorsa registrata.  
  
 Il <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A> metodo viene utilizzato in combinazione con il <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> metodo per accedere alle risorse incorporate nell'assembly. Per ulteriori informazioni sull'utilizzo delle risorse nelle applicazioni, vedere [panoramica delle risorse pagina Web ASP.NET](http://msdn.microsoft.com/library/0936b3b2-9e6e-4abe-9c06-364efef9dbbd).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A> metodo. Il *tipo* parametro in questo esempio è impostato per il tipo di classe nell'assembly che contiene la risorsa. Il `resourceName` viene specificato con il percorso completo della risorsa, che include lo spazio dei nomi predefinito.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/clientscriptwebresource.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/clientscriptwebresource.aspx#1)]  
  
 Esempio di codice riportato di seguito viene illustrato come applicare a livello di codice il <xref:System.Web.UI.WebResourceAttribute> attributo dei metadati per contrassegnare l'assembly per le risorse che verranno servite. Compilare la classe seguente in una libreria di classi con uno spazio dei nomi predefinito impostato su `Samples.AspNet.CS.Controls` o `Samples.AspNet.VB.Controls`, a seconda del linguaggio in uso.  
  
 [!code-csharp[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/resource.cs#2)]
 [!code-vb[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/resource.vb#2)]  
  
 In questo esempio richiede un file JavaScript denominato `Script_include.js`. Il file. js è una risorsa incorporata nell'assembly che contiene il `ClientScriptResourceLabel` oggetto. Se si utilizza Visual Studio], nella finestra proprietà di progetto libreria di classi, impostare **azione di compilazione** alla **risorsa incorporata** quando viene selezionato il file di script. Se si compila la libreria nella riga di comando, utilizzare l'opzione per incorporare la risorsa.  
  
```  
function DoClick() {Form1.Message.value='Text from resource script.'}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il nome della risorsa Web è <see langword="null" />.  
  
 \- oppure -  
  
 La lunghezza del nome della risorsa Web è pari a zero.</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
        <altmember cref="T:System.Web.Handlers.AssemblyResourceLoader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsClientScriptBlockRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determina se il blocco di script client è registrato con l'oggetto <see cref="T:System.Web.UI.Page" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsClientScriptBlockRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptBlockRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptBlockRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsClientScriptBlockRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptBlockRegistered(System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Chiave del blocco di script client da cercare.</param>
        <summary>Determina se il blocco di script client è stato registrato con l'oggetto <see cref="T:System.Web.UI.Page" /> utilizzando la chiave specificata.</summary>
        <returns>
          <see langword="true" /> se il blocco di script client è registrato; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare questo metodo prima di chiamare il <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> metodo per evitare la registrazione di script duplicati. Ciò è particolarmente importante se lo script richiede una grande quantità di risorse server da creare.  
  
 Uno script client è identificato dalla rispettiva chiave e il relativo tipo. Script con la stessa chiave e tipo sono considerati duplicati.  
  
 Questo overload del metodo di <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> metodo chiama l'overload che accetta sia un `key` e un `type` parametro con il tipo è impostato come un <xref:System.Web.UI.Page> oggetto  
  
   
  
## Examples  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock" />
      </Docs>
    </Member>
    <Member MemberName="IsClientScriptBlockRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptBlockRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptBlockRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptBlockRegistered(Type ^ type, System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">Tipo di blocco di script client da cercare.</param>
        <param name="key">Chiave del blocco di script client da cercare.</param>
        <summary>Determina se il blocco di script client è stato registrato con l'oggetto <see cref="T:System.Web.UI.Page" /> utilizzando una chiave e un tipo.</summary>
        <returns>
          <see langword="true" /> se il blocco di script client è registrato; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare questo metodo prima di chiamare il <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> metodo per evitare la registrazione di script duplicati. Ciò è particolarmente importante se lo script richiede una grande quantità di risorse server da creare.  
  
 Uno script client è identificato dalla rispettiva chiave e il relativo tipo. Script con la stessa chiave e tipo sono considerati duplicati. Specificare il tipo in base all'oggetto che sarà possibile accedere alla risorsa. Ad esempio, quando si utilizza un `Page` istanza per accedere alla risorsa, specificare il `Page` tipo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> metodo. Si noti che, se la logica per cercare il blocco di script client esistenti sono stati rimossi, il codice sorgente HTML della pagina rendering non verrebbero script client duplicato, poiché il <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> metodo controlla la presenza di duplicati. Il vantaggio di controllo è possibile ridurre il calcolo non necessario.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il tipo di script client è <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsClientScriptIncludeRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determina se l'inclusione di script client è registrata con l'oggetto <see cref="T:System.Web.UI.Page" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsClientScriptIncludeRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptIncludeRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptIncludeRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsClientScriptIncludeRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptIncludeRegistered(System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Chiave dell'inclusione di script client da cercare.</param>
        <summary>Determina se l'inclusione di script client è stata registrata con l'oggetto <see cref="T:System.Web.UI.Page" /> utilizzando la chiave specificata.</summary>
        <returns>
          <see langword="true" /> se l'inclusione di script client è registrata; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare questo metodo prima di chiamare il <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> metodo per evitare la registrazione di script duplicati. Ciò è particolarmente importante se lo script richiede una grande quantità di risorse server da creare.  
  
 Includere uno script client è identificata dalla rispettiva chiave e il relativo tipo. Script con la stessa chiave e tipo sono considerati duplicati.  
  
 Questo overload del metodo di <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> metodo chiama l'overload che accetta sia un `key` e un `type` parametro con il tipo è impostato come un <xref:System.Web.UI.Page> oggetto.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" />
      </Docs>
    </Member>
    <Member MemberName="IsClientScriptIncludeRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptIncludeRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptIncludeRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptIncludeRegistered(Type ^ type, System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">Tipo di inclusione di script client da cercare.</param>
        <param name="key">Chiave dell'inclusione di script client da cercare.</param>
        <summary>Determina se l'inclusione di script client è stata registrata con l'oggetto <see cref="T:System.Web.UI.Page" /> utilizzando una chiave e un tipo.</summary>
        <returns>
          <see langword="true" /> se l'inclusione di script client è registrata; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare questo metodo prima di chiamare il <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> include metodo per evitare la registrazione di script client duplicate. Ciò è particolarmente importante se lo script richiede una grande quantità di risorse server da creare.  
  
 Includere uno script client è identificata dalla rispettiva chiave e il relativo tipo. Script con la stessa chiave e tipo sono considerati duplicati. Specificare il tipo in base all'oggetto che sarà possibile accedere alla risorsa. Ad esempio, quando si utilizza un'istanza di pagina per accedere alla risorsa, specificare il `Page` tipo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A> metodo. Si noti che, se sono stati rimossi alla logica di controllo per includere lo script client esistente, il codice sorgente HTML della pagina rendering non verrebbero script client duplicato, poiché il <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> metodo controlla la presenza di duplicati. Il vantaggio di controllo è possibile ridurre il calcolo non necessario.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/cs/clientscriptincludes.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/vb/clientscriptincludes.aspx#1)]  
  
 In questo esempio richiede un file JavaScript denominato `Script_include.js`, con il seguente contenuto:  
  
```  
function DoClick() {Form1.Message.value='Text from include script.'}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il tipo dell'inclusione di script client è <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsOnSubmitStatementRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determina se l'istruzione OnSubmit è registrata con l'oggetto <see cref="T:System.Web.UI.Page" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsOnSubmitStatementRegistered">
      <MemberSignature Language="C#" Value="public bool IsOnSubmitStatementRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOnSubmitStatementRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsOnSubmitStatementRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOnSubmitStatementRegistered(System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Chiave dell'istruzione OnSubmit da cercare.</param>
        <summary>Determina se l'istruzione OnSubmit è stata registrata con l'oggetto <see cref="T:System.Web.UI.Page" /> utilizzando la chiave specificata.</summary>
        <returns>
          <see langword="true" /> se l'istruzione OnSubmit è registrata; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare questo metodo prima di chiamare il <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> metodo per evitare la registrazione di istruzioni OnSubmit duplicate. Ciò è particolarmente importante se l'istruzione è richiesta una grande quantità di risorse server da creare.  
  
 Un'istruzione viene identificata dalla rispettiva chiave e il relativo tipo. Istruzioni con la stessa chiave e tipo sono considerate duplicati.  
  
 Questo overload del metodo di <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> metodo chiama l'overload che accetta sia un `key` e un `type` parametro con il tipo è impostato come un <xref:System.Web.UI.Page> oggetto  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsOnSubmitStatementRegistered">
      <MemberSignature Language="C#" Value="public bool IsOnSubmitStatementRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOnSubmitStatementRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOnSubmitStatementRegistered(Type ^ type, System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">Tipo di istruzione OnSubmit da cercare.</param>
        <param name="key">Chiave dell'istruzione OnSubmit da cercare.</param>
        <summary>Determina se l'istruzione OnSubmit è stata registrata con l'oggetto <see cref="T:System.Web.UI.Page" /> utilizzando la chiave e il tipo specificati.</summary>
        <returns>
          <see langword="true" /> se l'istruzione OnSubmit è registrata; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare questo metodo prima di chiamare il <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> metodo per evitare la registrazione di istruzioni duplicate. Ciò è particolarmente importante se l'istruzione è richiesta una grande quantità di risorse server da creare.  
  
 Un'istruzione viene identificata dalla rispettiva chiave e il relativo tipo. Istruzioni con la stessa chiave e tipo sono considerate duplicati. Specificare il tipo in base all'oggetto che sarà possibile accedere alla risorsa. Ad esempio, quando si utilizza un `Page` istanza per accedere alla risorsa, specificare il `Page` tipo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> metodo. Uno script denominato `OnSubmitScript` è registrato con il <xref:System.Web.UI.Page> in modo che quando il form della pagina viene inviato lo script viene richiamato.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/cs/clientscriptonsubmit.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/vb/clientscriptonsubmit.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il tipo di istruzione OnSubmit è <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsStartupScriptRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determina se lo script di avvio è registrato con l'oggetto <see cref="T:System.Web.UI.Page" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsStartupScriptRegistered">
      <MemberSignature Language="C#" Value="public bool IsStartupScriptRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsStartupScriptRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsStartupScriptRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsStartupScriptRegistered(System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Chiave dello script di avvio da cercare.</param>
        <summary>Determina se lo script di avvio è stato registrato con l'oggetto <see cref="T:System.Web.UI.Page" /> utilizzando la chiave specificata.</summary>
        <returns>
          <see langword="true" /> se lo script di avvio è stato registrato, altrimenti <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare questo metodo prima di chiamare il <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> metodo per evitare la registrazione di script duplicati. Ciò è particolarmente importante se lo script richiede una grande quantità di risorse server da creare.  
  
 Uno script di avvio è identificato in modo univoco la chiave e il relativo tipo. Script con la stessa chiave e tipo sono considerati duplicati.  
  
 Questo overload del metodo di <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> metodo chiama l'overload che accetta una stringa di entrambi `key` e un `type` parametro con il tipo è impostato come un <xref:System.Web.UI.Page> oggetto  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterStartupScript" />
      </Docs>
    </Member>
    <Member MemberName="IsStartupScriptRegistered">
      <MemberSignature Language="C#" Value="public bool IsStartupScriptRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsStartupScriptRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsStartupScriptRegistered(Type ^ type, System::String ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">Tipo di script di avvio da cercare.</param>
        <param name="key">Chiave dello script di avvio da cercare.</param>
        <summary>Determina se lo script di avvio è stato registrato con l'oggetto <see cref="T:System.Web.UI.Page" /> utilizzando la chiave e il tipo specificati.</summary>
        <returns>
          <see langword="true" /> se lo script di avvio è stato registrato, altrimenti <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare questo metodo prima di chiamare il <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> metodo per evitare la registrazione di script duplicati. Ciò è particolarmente importante se lo script richiede una grande quantità di risorse server da creare.  
  
 Uno script di avvio del client è identificato dalla rispettiva chiave e il relativo tipo. Script con la stessa chiave e tipo sono considerati duplicati.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> metodo. Si noti che, se la logica per cercare il blocco di script di avvio esistenti sono stati rimossi, il codice sorgente HTML della pagina rendering non verrebbero due script di avvio duplicato, poiché il <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> metodo controlla la presenza di duplicati. Il vantaggio di controllo è possibile ridurre il calcolo non necessario.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il tipo di script di avvio è <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterStartupScript" />
      </Docs>
    </Member>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public void RegisterArrayDeclaration (string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterArrayDeclaration(string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterArrayDeclaration (arrayName As String, arrayValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterArrayDeclaration(System::String ^ arrayName, System::String ^ arrayValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="arrayName">Nome di matrice da registrare.</param>
        <param name="arrayValue">Valore o valori della matrice da registrare.</param>
        <summary>Registra una dichiarazione di matrice JavaScript con l'oggetto <see cref="T:System.Web.UI.Page" /> utilizzando un nome e un valore di matrice.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> controlli per verificare l'esistenza di una matrice registrata con lo stesso nome come il nome specificato nella `arrayName` parametro e, in tal caso, aggiunge i valori specificati nel `arrayValue` parametro. Poiché il meccanismo di archiviazione sottostante si basa su un <xref:System.Collections.ArrayList>, i duplicati sono consentiti. Se una matrice registrata con lo stesso nome di `arrayName` parametro non esiste, viene creata e i valori nel `arrayValue` parametro aggiunto a esso.  
  
 Se si desiderano che i valori letterali stringa nella matrice JavaScript risultante, includere virgolette singole (') o virgolette doppie di escape (\\") nei `arrayValue` parametro. Il valore di `arrayValue` parametro deve essere un singolo elemento. Se più di un valore da aggiungere alla matrice, effettuare più chiamate utilizzando il <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> metodo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> e <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> metodi. Nell'esempio viene registrata una matrice e un valore nascosto e definisce la `OnClick` evento di un `<input>` per calcolare la somma di due valori della matrice e il valore hidden.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/cs/clientscriptregisterarray.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/vb/clientscriptregisterarray.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="arrayName" /> è <see langword="null" />.</exception>
        <altmember cref="Overload:System.String.Split" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptBlock">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registra lo script client con l'oggetto <see cref="T:System.Web.UI.Page" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptBlock (Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptBlock(class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptBlock(Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">Tipo di script client da registrare.</param>
        <param name="key">Chiave dello script client da registrare.</param>
        <param name="script">Valore letterale dello script client da registrare.</param>
        <summary>Registra lo script client con l'oggetto <see cref="T:System.Web.UI.Page" /> utilizzando un tipo, una chiave e un valore letterale di script.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uno script client è identificato dalla rispettiva chiave e il relativo tipo. Script con la stessa chiave e tipo sono considerati duplicati. Un solo script con un tipo specificato e una coppia di chiavi possono essere registrati con la pagina. Il tentativo di registrare uno script che è già registrato non crea un duplicato dello script.  
  
 Chiamare il <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> metodo per determinare se uno script client con una coppia di chiave e il tipo specificato è già registrato ed evitare inutili tentativi di aggiungere lo script.  
  
 In questo overload di <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> (metodo), è necessario assicurarsi che lo script fornito nel `script` parametro viene eseguito il wrapping un `<script>` blocco di elementi.  
  
 Il <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> metodo aggiunge un blocco di script nella parte superiore della pagina rendering. I blocchi di script non sono necessariamente restituiti nell'ordine che vengono registrati. Se l'ordine dei blocchi di script è importante, utilizzare un <xref:System.Text.StringBuilder> per raccogliere gli script in un'unica stringa dell'oggetto e quindi registrarli tutti in un blocco di script client singolo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> metodo.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager12#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.clientscriptmanager12/cs/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager12#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.clientscriptmanager12/vb/default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptBlock (Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptBlock(class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptBlock(Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">Tipo di script client da registrare.</param>
        <param name="key">Chiave dello script client da registrare.</param>
        <param name="script">Valore letterale dello script client da registrare.</param>
        <param name="addScriptTags">Valore Boolean che indica se aggiungere tag script.</param>
        <summary>Registra lo script client con l'oggetto <see cref="T:System.Web.UI.Page" /> utilizzando un tipo, una chiave, un valore letterale di script e un valore Boolean che indica se aggiungere tag script.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uno script client è identificato dalla rispettiva chiave e il relativo tipo. Script con la stessa chiave e tipo sono considerati duplicati. Un solo script con un tipo specificato e una coppia di chiavi possono essere registrati con la pagina. Il tentativo di registrare uno script che è già registrato non crea un duplicato dello script.  
  
 Chiamare il <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> metodo per determinare se uno script client con una coppia di chiave e il tipo specificato è già registrato. Ciò consente di evitare inutili tentativi di aggiungere lo script.  
  
 In questo overload del <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> (metodo), è possibile indicare se lo script fornito nel `script` parametro viene eseguito il wrapping con un `<script>` blocco di elementi tramite il `addScriptTags` parametro. Impostazione `addScriptTags` a `true` indica che il tag di script verrà aggiunto automaticamente.  
  
 Il <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> metodo aggiunge un blocco di script nella parte superiore della pagina rendering. I blocchi di script non sono necessariamente restituiti nell'ordine che vengono registrati. Se l'ordine dei blocchi di script è importante, utilizzare un <xref:System.Text.StringBuilder> per raccogliere gli script in un'unica stringa dell'oggetto e quindi registrarli tutti in un blocco di script client singolo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> metodo. Si noti che il `addScriptTags` parametro è impostato su `true` l'inizio e chiusura dello script non sono inclusi il `script` parametro.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il tipo di blocco di script client è <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptInclude">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registra l'inclusione di script client con l'oggetto <see cref="T:System.Web.UI.Page" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptInclude (string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptInclude(string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterClientScriptInclude (key As String, url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptInclude(System::String ^ key, System::String ^ url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Chiave dell'inclusione di script client da registrare.</param>
        <param name="url">URL dell'inclusione di script client da registrare.</param>
        <summary>Registra lo script client con l'oggetto <see cref="T:System.Web.UI.Page" /> utilizzando una chiave e un URL che consente allo script di essere chiamato dal client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Includere uno script client è identificata dalla rispettiva chiave e il relativo tipo. Script con la stessa chiave e tipo sono considerati duplicati. Un solo script con un tipo specificato e una coppia di chiavi possono essere registrati con la pagina. Il tentativo di registrare uno script che è già registrato non crea un duplicato dello script.  
  
 Chiamare il <xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A> metodo per determinare se includere uno script client con una chiave specificata e la coppia di tipo è già registrata ed evitare inutilmente il tentativo di aggiungere lo script.  
  
> [!NOTE]
>  Per risolvere l'URL del client, utilizzare il <xref:System.Web.UI.Control.ResolveClientUrl%2A> metodo. Questo metodo utilizza il contesto dell'URL in cui viene chiamato per risolvere il percorso.  
  
 Questo overload del metodo di <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> metodo chiama l'overload che accetta un `key`, un `URL`e un `type` parametro.  
  
 Il metodo aggiunge un blocco di script nella parte superiore della pagina rendering.  
  
   
  
## Examples  
 Per informazioni correlate, inclusa la sintassi, utilizzo e un esempio, vedere <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptInclude (Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptInclude(class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptInclude(Type ^ type, System::String ^ key, System::String ^ url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">Tipo di inclusione di script client da registrare.</param>
        <param name="key">Chiave dell'inclusione di script client da registrare.</param>
        <param name="url">URL dell'inclusione di script client da registrare.</param>
        <summary>Registra l'inclusione di script client con l'oggetto <see cref="T:System.Web.UI.Page" /> utilizzando un tipo, una chiave e un URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo overload di <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> metodo accetta *chiave* e *url* parametri per identificare lo script, nonché una `type` includere parametri per specificare l'identificazione dello script client. Specificare il tipo in base all'oggetto che sarà possibile accedere alla risorsa. Ad esempio, quando si utilizza un `Page` istanza per accedere alla risorsa, specificare il `Page` tipo.  
  
> [!NOTE]
>  Per risolvere l'URL del client, utilizzare il <xref:System.Web.UI.Control.ResolveClientUrl%2A> metodo. Questo metodo utilizza il contesto dell'URL in cui viene chiamato per risolvere il percorso.  
  
 Questo metodo aggiunge un blocco di script nella parte superiore della pagina rendering.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> metodo. Si noti che se la logica di controllo per includere lo script client esistenti sono stati rimossi, non esiste ancora non sarebbe script client duplicato nella pagina sottoposta a rendering perché il <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> metodo controlla la presenza di duplicati. Il vantaggio di controllo è possibile ridurre il calcolo non necessario.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/cs/clientscriptincludes.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/vb/clientscriptincludes.aspx#1)]  
  
 Questo esempio richiede un file JavaScript denominato Script_include. js con il seguente contenuto:  
  
```  
function DoClick() {Form1.Message.value='Text from include script.'}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il tipo dell'inclusione di script client è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">L'URL è <see langword="null" />.  
  
 \- oppure -  
  
 URL vuoto.</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptResource (Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptResource(class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptResource(Type ^ type, System::String ^ resourceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">Tipo di risorsa di script client da registrare.</param>
        <param name="resourceName">Nome di risorsa di script client da registrare.</param>
        <summary>Registra la risorsa di script client con l'oggetto <see cref="T:System.Web.UI.Page" /> utilizzando un tipo e un nome di risorsa.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> metodo viene utilizzato quando si accede a risorse compilate da assembly tramite il gestore WebResource.axd HTTP. Il <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> metodo registra lo script con il <xref:System.Web.UI.Page> dell'oggetto e impedisce la creazione di script duplicati. Questo metodo include il contenuto dell'URL della risorsa con un `<script>` blocco di elementi.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> metodo.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/clientscriptwebresource.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/clientscriptwebresource.aspx#1)]  
  
 Esempio di codice riportato di seguito viene illustrato come applicare a livello di codice il <xref:System.Web.UI.WebResourceAttribute> attributo dei metadati per contrassegnare l'assembly per le risorse che verranno servite.  
  
 [!code-csharp[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/resource.cs#2)]
 [!code-vb[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/resource.vb#2)]  
  
 In questo esempio richiede un file JavaScript denominato `Script_include.js`, con il seguente contenuto:  
  
```  
function DoClick() {Form1.Message.value='Text from resource script.'}  
```  
  
 Compilare il `Script_include.js` file come risorsa nel `Samples.AspNet.CS.Controls` assembly che contiene la `ClientScriptResourceLabel` classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il nome della risorsa client è <see langword="null" />.  
  
 \- oppure -  
  
 La lunghezza del nome della risorsa client è pari a zero.</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" />
        <altmember cref="T:System.Web.Handlers.AssemblyResourceLoader" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterExpandoAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registra una coppia nome/valore come attributo personalizzato (expando) del controllo specificato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterExpandoAttribute(string controlId, string attributeName, string attributeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterExpandoAttribute (controlId As String, attributeName As String, attributeValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterExpandoAttribute(System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="controlId">Controllo <see cref="T:System.Web.UI.Control" /> nella pagina contenente l'attributo personalizzato.</param>
        <param name="attributeName">Nome dell'attributo personalizzato da registrare.</param>
        <param name="attributeValue">Valore dell'attributo personalizzato.</param>
        <summary>Registra una coppia nome/valore come attributo personalizzato (expando) del controllo specificato, dati un ID di controllo, un nome attributo e un valore di attributo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> metodo registra una coppia nome/valore come un attributo personalizzato (expando) specificato <xref:System.Web.UI.Control>. L'attributo expando viene impostato in modo dinamico da JavaScript per mantenere la compatibilità XHTML per il rendering del markup del controllo. Le offerte e le barre rovesciate nei valori dell'attributo personalizzato (expando) vengono sottoposti a escape. Se non si desidera evitare, chiamare il <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> overload di metodo e impostare il `encode` parametro `false`.  
  
 Se l'attributo expando non viene trovato o non è possibile trovare il controllo per aggiungere l'attributo expando, lo script del client è ancora creato, ma non avrà alcun effetto del controllo.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.JScript.Expando" />
      </Docs>
    </Member>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterExpandoAttribute(string controlId, string attributeName, string attributeValue, bool encode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterExpandoAttribute (controlId As String, attributeName As String, attributeValue As String, encode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterExpandoAttribute(System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue, bool encode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="controlId">Controllo <see cref="T:System.Web.UI.Control" /> nella pagina contenente l'attributo personalizzato.</param>
        <param name="attributeName">Nome dell'attributo personalizzato da registrare.</param>
        <param name="attributeValue">Valore dell'attributo personalizzato.</param>
        <param name="encode">Valore Boolean che indica se codificare l'attributo personalizzato da registrare.</param>
        <summary>Registra una coppia nome/valore come attributo personalizzato (expando) del controllo specificato, dati un ID di controllo, un nome di attributo, un valore di attributo e un valore Boolean che indica se codificare il valore dell'attributo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> metodo registra una coppia nome/valore come un attributo personalizzato (expando) specificato <xref:System.Web.UI.Control>. L'attributo expando viene impostato in modo dinamico da JavaScript per mantenere la compatibilità XHTML per il rendering del markup del controllo. Impostare il `encode` parametro `true` se è necessario evitare le barre rovesciate nel valore dell'attributo expando.  
  
 Se l'attributo expando non viene trovato o non è possibile trovare il controllo per aggiungere l'attributo expando, lo script del client è ancora creato, ma non avrà alcun effetto del controllo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> metodo la <xref:System.Web.UI.ClientScriptManager> classe. Lo script client nella pagina sottoposta a rendering imposta il `title` attributo di un `<span>` elemento.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager6/cs/clientscriptexpando.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager6/vb/clientscriptexpando.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.JScript.Expando" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterForEventValidation">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registra un riferimento a un evento per la convalida.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (string uniqueId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForEventValidation(string uniqueId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForEventValidation (uniqueId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForEventValidation(System::String ^ uniqueId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId">ID univoco che rappresenta il controllo client che genera l'evento.</param>
        <summary>Registra un riferimento a un evento per la convalida con un ID di controllo univoco che rappresenta il controllo client che genera l'evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni ed esempi, vedere il <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> metodo.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> (metodo) e <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> metodo per registrare un callback per la convalida e convalidare che il callback originato dalla pagina.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager9#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/cs/eventvalidation2cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager9#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/vb/eventvalidation2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (System.Web.UI.PostBackOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForEventValidation(class System.Web.UI.PostBackOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForEventValidation (options As PostBackOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForEventValidation(System::Web::UI::PostBackOptions ^ options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
      </Parameters>
      <Docs>
        <param name="options">Oggetto <see cref="T:System.Web.UI.PostBackOptions" /> che specifica come viene generato uno script JavaScript client per avviare un evento di postback.</param>
        <summary>Registra un riferimento a un evento per la convalida con <see cref="T:System.Web.UI.PostBackOptions" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni ed esempi, vedere il <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> metodo.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.ValidateEvent" />
      </Docs>
    </Member>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (string uniqueId, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForEventValidation(string uniqueId, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForEventValidation (uniqueId As String, argument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForEventValidation(System::String ^ uniqueId, System::String ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId">ID univoco che rappresenta il controllo client che genera l'evento.</param>
        <param name="argument">Argomenti di evento passati con l'evento client.</param>
        <summary>Registra un riferimento a un evento per la convalida con un ID di controllo univoco e argomenti di evento che rappresentano il controllo client che genera l'evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> (metodo) e <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> metodo per registrare un callback per la convalida e per convalidare che il callback originato dalla pagina. Per migliorare la convalida illustrata nell'esempio, è possibile modificare la convalida `argument` parametro per contenere informazioni specifiche dell'utente, ad esempio un'identità o un ruolo  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/cs/EventValidationCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/vb/EventValidationVB.aspx#1)]  
  
 Esempio di codice seguente viene illustrato l'utilizzo di <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> metodo per registrare un callback per la convalida.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.clientscriptmanager10/cs/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.clientscriptmanager10/vb/default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il metodo viene chiamato prima del metodo <see cref="M:System.Web.UI.Page.Render(System.Web.UI.HtmlTextWriter)" />.</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public void RegisterHiddenField (string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterHiddenField(string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterHiddenField (hiddenFieldName As String, hiddenFieldInitialValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterHiddenField(System::String ^ hiddenFieldName, System::String ^ hiddenFieldInitialValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hiddenFieldName">Nome del campo nascosto da registrare.</param>
        <param name="hiddenFieldInitialValue">Valore iniziale del campo da registrare.</param>
        <summary>Registra un valore nascosto con l'oggetto <see cref="T:System.Web.UI.Page" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> metodo crea nascosta `<input>` elemento nella pagina HTML di cui è stato eseguito rendering.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> e <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> metodi. Nell'esempio viene registrata una matrice e un valore nascosto e definisce la `OnClick` evento di un `<input>` per calcolare la somma di due valori della matrice e il valore hidden.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/cs/clientscriptregisterarray.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/vb/clientscriptregisterarray.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hiddenFieldName" /> è <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.HiddenField" />
      </Docs>
    </Member>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public void RegisterOnSubmitStatement (Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterOnSubmitStatement(class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterOnSubmitStatement(Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">Tipo di istruzione OnSubmit da registrare.</param>
        <param name="key">Chiave dell'istruzione OnSubmit da registrare.</param>
        <param name="script">Valore letterale dell'istruzione OnSubmit da registrare.</param>
        <summary>Registra un'istruzione OnSubmit con l'oggetto <see cref="T:System.Web.UI.Page" /> utilizzando un tipo, una chiave e un valore letterale di script. L'istruzione viene eseguita quando viene inviato il controllo <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'istruzione OnSubmit è identificata in modo univoco la chiave e il relativo tipo. Istruzioni con la stessa chiave e tipo sono considerate duplicati. Solo un'istruzione con un tipo specificato e una coppia di chiavi può essere registrata con la pagina. Il tentativo di registrazione di un'istruzione che è già registrata, non crea un duplicato dell'istruzione.  
  
 Chiamare il <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> metodo per determinare se un'istruzione OnSubmit è già registrata con una coppia di chiave e tipo ed evitare inutili tentativi di aggiungere lo script.  
  
 Il `script` parametro il <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> metodo può contenere più comandi di script, purché siano correttamente delimitati da punto e virgola (;).  
  
 Il <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> aggiunge uno script che viene eseguito prima che la pagina viene inviata e offre la possibilità di annullare l'invio.  
  
 Per ulteriori informazioni sul form HTML e `OnSubmit` attributo, vedere il [sito Web World Wide Web Consortium (W3C)](http://go.microsoft.com/fwlink/?linkid=37125).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> metodo.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/cs/clientscriptonsubmit.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/vb/clientscriptonsubmit.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> è <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.HtmlControls.HtmlForm" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterStartupScript">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registra lo script di avvio con l'oggetto <see cref="T:System.Web.UI.Page" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public void RegisterStartupScript (Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterStartupScript(class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterStartupScript(Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">Tipo dello script di avvio da registrare.</param>
        <param name="key">Chiave dello script di avvio da registrare.</param>
        <param name="script">Valore letterale dello script di avvio da registrare.</param>
        <summary>Registra lo script di avvio con l'oggetto <see cref="T:System.Web.UI.Page" /> utilizzando un tipo, una chiave e un valore letterale di script.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uno script client è identificato dalla rispettiva chiave e il relativo tipo. Script con la stessa chiave e tipo sono considerati duplicati. Un solo script con un tipo specificato e una coppia di chiavi possono essere registrati con la pagina. Il tentativo di registrare uno script che è già registrato non crea un duplicato dello script.  
  
 Chiamare il <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> metodo per determinare se uno script di avvio con una coppia di chiave e il tipo è già registrato ed evitare inutili tentativi di aggiungere lo script.  
  
 In questo overload di <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> (metodo), è necessario assicurarsi che lo script fornito nel `script` parametro viene eseguito il wrapping con un `<script>` blocco di elementi.  
  
 Il blocco di script aggiunto dal <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> metodo viene eseguito al termine del caricamento della pagina ma prima della pagina <xref:System.Web.UI.Control.OnLoad%2A> viene generato l'evento. I blocchi di script non sono necessariamente restituiti nell'ordine che vengono registrati. Se l'ordine dei blocchi di script è importante, utilizzare un <xref:System.Text.StringBuilder> per raccogliere gli script in un'unica stringa dell'oggetto e quindi registrarli tutti in un blocco di script client singolo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> metodo. Si noti che sono inclusi l'inizio e chiusura dello script all'interno di `script` parametro. Per includere lo script di tag aggiunti in base a un'impostazione di parametri aggiuntivi, vedere il <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> metodo.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager11#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.clientscriptmanager11/cs/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager11#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.clientscriptmanager11/vb/default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public void RegisterStartupScript (Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterStartupScript(class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterStartupScript(Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">Tipo dello script di avvio da registrare.</param>
        <param name="key">Chiave dello script di avvio da registrare.</param>
        <param name="script">Valore letterale dello script di avvio da registrare.</param>
        <param name="addScriptTags">Valore Boolean che indica se aggiungere tag script.</param>
        <summary>Registra lo script di avvio con l'oggetto <see cref="T:System.Web.UI.Page" /> utilizzando un tipo, una chiave, un valore letterale di script e un valore Boolean che indica se aggiungere tag script.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uno script di avvio è identificato in modo univoco la chiave e il relativo tipo. Script con la stessa chiave e tipo sono considerati duplicati. Un solo script con un tipo specificato e una coppia di chiavi possono essere registrati con la pagina. Il tentativo di registrare uno script che è già registrato non crea un duplicato dello script.  
  
 Chiamare il <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> metodo per determinare se uno script di avvio con una coppia di chiave e il tipo è già registrato ed evitare inutili tentativi di aggiungere lo script.  
  
 In questo overload del <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> (metodo), è possibile indicare se lo script fornito nel `script` parametro viene eseguito il wrapping con un `<script>` blocco di elementi tramite il `addScriptTags` parametro. Impostazione `addScriptTags` a `true` indica che il tag di script verrà aggiunto automaticamente.  
  
 Il blocco di script aggiunto dal <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> metodo viene eseguito al termine del caricamento della pagina ma prima della pagina <xref:System.Web.UI.Control.OnLoad%2A> viene generato l'evento. I blocchi di script non sono necessariamente restituiti nell'ordine che vengono registrati. Se l'ordine dei blocchi di script è importante, utilizzare un <xref:System.Text.StringBuilder> per raccogliere gli script in un'unica stringa dell'oggetto e quindi registrarli tutti in un blocco di script client singolo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> metodo. Si noti che il `addScriptTags` parametro è impostato su `false` l'inizio e chiusura dello script sono inclusi il `script` parametro.  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)" />
        <altmember cref="F:System.Web.UI.HtmlTextWriterTag.Script" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateEvent">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convalida un evento client.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateEvent">
      <MemberSignature Language="C#" Value="public void ValidateEvent (string uniqueId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateEvent(string uniqueId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateEvent (uniqueId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateEvent(System::String ^ uniqueId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId">ID univoco che rappresenta il controllo client che genera l'evento.</param>
        <summary>Convalida un evento client registrato per la convalida degli eventi utilizzando il metodo <see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEvent">
      <MemberSignature Language="C#" Value="public void ValidateEvent (string uniqueId, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateEvent(string uniqueId, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateEvent (uniqueId As String, argument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateEvent(System::String ^ uniqueId, System::String ^ argument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId">ID univoco che rappresenta il controllo client che genera l'evento.</param>
        <param name="argument">Argomenti di evento passati con l'evento client.</param>
        <summary>Convalida un evento client registrato per la convalida degli eventi utilizzando il metodo <see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> (metodo) e <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> metodo per registrare un callback per la convalida e per convalidare che il callback originato dalla pagina. Per migliorare la convalida illustrata qui, è possibile modificare la convalida `argument` parametro per contenere informazioni specifiche dell'utente, ad esempio un'identità o un ruolo  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/cs/EventValidationCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/vb/EventValidationVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="uniqueId" /> è <see langword="null" /> o è una stringa vuota ("").</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>