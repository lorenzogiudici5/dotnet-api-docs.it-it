<Type Name="ScriptManager" FullName="System.Web.UI.ScriptManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a9923660b999d64c484a67da8c88091d677e8639" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34317744" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ScriptManager : System.Web.UI.Control, System.Web.UI.IPostBackDataHandler, System.Web.UI.IPostBackEventHandler, System.Web.UI.IScriptManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ScriptManager extends System.Web.UI.Control implements class System.Web.UI.IPostBackDataHandler, class System.Web.UI.IPostBackEventHandler, class System.Web.UI.IScriptManager" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ScriptManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ScriptManager&#xA;Inherits Control&#xA;Implements IPostBackDataHandler, IPostBackEventHandler, IScriptManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class ScriptManager : System::Web::UI::Control, System::Web::UI::IPostBackDataHandler, System::Web::UI::IPostBackEventHandler, System::Web::UI::IScriptManager" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackDataHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackEventHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IScriptManager</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Scripts")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.ScriptManagerDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(EmbeddedResourceFinder), "System.Web.Resources.ScriptManager.bmp")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.NonVisualControl</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Gestisce librerie di script e file di script, il rendering parziale della pagina e la generazione della classe proxy client per servizi Web e applicativi ASP.NET Ajax.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In questo argomento  
  
-   [Introduzione](#introduction)  
  
-   [Per il Rendering parziale della pagina](#partial_page_rendering)  
  
-   [Utilizzo del controllo ScriptManager con pagine Master, controlli utente e altri componenti figlio](#using_the_scriptmanager_control_with_master_pages__user_controls__and_other_child_components)  
  
-   [Registrazione e gestione degli script](#script_management_and_registration)  
  
-   [Riferimenti al servizio Web](#web_service_references)  
  
-   [Localizzazione](#localization)  
  
-   [Gestione degli errori](#error_handling)  
  
-   [Sintassi dichiarativa](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Introduzione  
 Il <xref:System.Web.UI.ScriptManager> controllo è fondamentale per la funzionalità Ajax in ASP.NET. Il controllo gestisce tutte le risorse di ASP.NET Ajax in una pagina. Ciò include il download di script Microsoft Ajax Library per il browser e il coordinamento degli aggiornamenti parziali della pagina che vengono abilitati usando <xref:System.Web.UI.UpdatePanel> controlli. Inoltre, il <xref:System.Web.UI.ScriptManager> controllo consente di eseguire le operazioni seguenti:  
  
-   Registrare script compatibili con gli aggiornamenti parziali della pagina. Per gestire le dipendenze tra gli script e la libreria di base, qualsiasi script registrato viene caricato dopo lo script Microsoft Ajax Library.  
  
-   Specificare se rilasciare o degli script di debug vengono inviati al browser.  
  
-   Fornire accesso ai metodi del servizio Web dallo script registrando i servizi Web con il <xref:System.Web.UI.ScriptManager> controllo.  
  
-   Fornire l'accesso per l'autenticazione ASP.NET, ruolo e profilo di servizi delle applicazioni da script client tramite la registrazione di questi servizi con il <xref:System.Web.UI.ScriptManager> controllo.  
  
-   Abilitare la visualizzazione delle impostazioni cultura specifiche di ECMAScript (JavaScript) e funzioni nel browser.  
  
-   Accedere alle risorse di localizzazione per i file di script incorporati o per i file script autonomo usando il <xref:System.Web.UI.ScriptReferenceBase.ResourceUICultures%2A> proprietà del <xref:System.Web.UI.ScriptReference> controllo.  
  
-   Registra controlli del server che implementano il <xref:System.Web.UI.IExtenderControl> o <xref:System.Web.UI.IScriptControl> interfacce con la <xref:System.Web.UI.ScriptManager> controllare in modo che viene eseguito il rendering degli script richiesti per i componenti client e i comportamenti.  
  
<a name="partial_page_rendering"></a>   
## <a name="partial-page-rendering"></a>Per il Rendering parziale della pagina  
 La possibilità di una pagina ASP.NET per il supporto per il rendering parziale della pagina è controllata dai fattori seguenti:  
  
-   Il <xref:System.Web.UI.ScriptManager> del controllo <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> proprietà deve essere `true` (il valore predefinito).  
  
-   Deve essere presente almeno un <xref:System.Web.UI.UpdatePanel> controllo nella pagina.  
  
-   Il <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> proprietà deve essere `true` (il valore predefinito). Se il <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> non è impostata in modo esplicito, il valore è basato sulle funzionalità del browser.  
  
 È possibile sostituire il valore di <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> proprietà in fase di esecuzione durante o prima della pagina <xref:System.Web.UI.Control.Init> evento. Se si tenta di modificare questa proprietà dopo la pagina <xref:System.Web.UI.Control.Init> si è verificato un evento, un <xref:System.InvalidOperationException> viene generata un'eccezione.  
  
 Quando è supportato per il rendering parziale della pagina, il <xref:System.Web.UI.ScriptManager> controllo esegue il rendering dello script per abilitare i postback asincroni e aggiornamenti a pagina parziale. Le aree della pagina da aggiornare vengono definite utilizzando <xref:System.Web.UI.UpdatePanel> controlli. Il <xref:System.Web.UI.ScriptManager> controllo gestisce i postback asincroni e aggiorna solo le aree della pagina che dovranno essere aggiornati. Per ulteriori informazioni sul rendering parziale della pagina, vedere [Cenni preliminari sul Rendering parziale della pagina](http://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49). Per ulteriori informazioni sulle condizioni che provocano un aggiornamento, vedere [Cenni preliminari sul controllo UpdatePanel](http://msdn.microsoft.com/library/29a2265d-9674-4c19-b70e-e5560ee9689a).  
  
<a name="using_the_scriptmanager_control_with_master_pages__user_controls__and_other_child_components"></a>   
## <a name="using-the-scriptmanager-control-with-master-pages-user-controls-and-other-child-components"></a>Utilizzo del controllo ScriptManager con pagine Master, controlli utente e altri componenti figlio  
 Una pagina può contenere un solo <xref:System.Web.UI.ScriptManager> controllo nella relativa gerarchia. Per registrare i servizi e gli script per pagine annidate, controlli utente o componenti quando la pagina padre ha già un <xref:System.Web.UI.ScriptManager> controllo, utilizzare il <xref:System.Web.UI.ScriptManagerProxy> controllo. Per ulteriori informazioni, vedere [utilizzando il controllo UpdatePanel con pagine Master](http://msdn.microsoft.com/library/b1c974d5-a6b2-4bb3-a3cc-61dd9dc0e1d6)  
  
<a name="script_management_and_registration"></a>   
## <a name="script-management-and-registration"></a>Registrazione e gestione degli script  
 Il <xref:System.Web.UI.ScriptManager> controllo consente di registrare uno script che viene quindi eseguito il rendering come parte della pagina. Il <xref:System.Web.UI.ScriptManager> metodi di registrazione di controllo possono essere suddivisa in tre categorie seguenti:  
  
-   Metodi di registrazione che garantiscono che le dipendenze script Microsoft Ajax Library vengono mantenute.  
  
-   I metodi di registrazione che non sono dipendenti da Microsoft Ajax Library, ma che sono compatibili con <xref:System.Web.UI.UpdatePanel> controlli.  
  
-   I metodi di registrazione che supportano l'utilizzo con <xref:System.Web.UI.UpdatePanel> controlli.  
  
 Per ulteriori informazioni su come creare e usare script Ajax in ASP.NET, vedere [creazione di Script Client personalizzato utilizzando la libreria Microsoft Ajax](http://msdn.microsoft.com/library/285e3a65-b42e-42c5-952d-baf184057899).  
  
### <a name="registering-script-that-is-dependent-on-the-microsoft-ajax-library"></a>Registrazione di Script che dipende dalla libreria Microsoft Ajax  
 È possibile utilizzare i metodi seguenti per registrare i file di script in modo che mantengano tutte le dipendenze di Microsoft Ajax Library.  
  
|Metodo|Definizione|  
|------------|----------------|  
|<xref:System.Web.UI.ScriptManager.RegisterScriptControl%2A>|Registra un server di controllo che implementa il <xref:System.Web.UI.IScriptControl> interfaccia utilizzata per definire un oggetto client. Il <xref:System.Web.UI.ScriptManager> controllo esegue il rendering dello script che supporta l'oggetto client.|  
|<xref:System.Web.UI.ScriptManager.RegisterExtenderControl%2A>|Registra un server di controllo che implementa il <xref:System.Web.UI.IExtenderControl> interfaccia utilizzata per definire un oggetto client. Il <xref:System.Web.UI.ScriptManager> controllo esegue il rendering dello script che supporta l'oggetto client.|  
  
### <a name="registering-partial-page-update-compatible-scripts"></a>La registrazione di script di aggiornamento parziale della pagina compatibile  
 È possibile utilizzare i metodi seguenti per registrare i file di script che non sono dipendenti da Microsoft Ajax Library ma che sono compatibili con <xref:System.Web.UI.UpdatePanel> controlli. Questi metodi corrispondono ai metodi simili del <xref:System.Web.UI.ClientScriptManager> controllo. In caso di script per il rendering per l'utilizzo all'interno di un <xref:System.Web.UI.UpdatePanel> di controllo, assicurarsi di chiamare i metodi del <xref:System.Web.UI.ScriptManager> controllo.  
  
|Metodo|Definizione|  
|------------|----------------|  
|<xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A>|Aggiunge un valore a una matrice JavaScript. Se la matrice non esiste, viene creato.|  
|<xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A>|Esegue il rendering di un `script` elemento dopo l'apertura della pagina `<form>` tag. Lo script è specificato come parametro di stringa.|  
|<xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A>|Esegue il rendering di un `script` elemento dopo l'apertura della pagina `<form>` tag. Il contenuto dello script viene specificato impostando il `src` attributo a un URL che punta a un file di script.|  
|<xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A>|Esegue il rendering di un `script` elemento dopo l'apertura della pagina `<form>` tag. Il contenuto dello script è specificato con un nome di risorsa in un assembly. Il `src` attributo viene popolato automaticamente con un URL da una chiamata a un gestore HTTP che recupera lo script denominato dall'assembly.|  
|<xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A>|Esegue il rendering di una coppia di attributi di nome/valore personalizzato (expando) nel markup per un controllo specificato.|  
|<xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A>|Esegue il rendering di un campo nascosto.|  
|<xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A>|Registra uno script che viene eseguito in risposta al `form` dell'elemento `submit` evento. Il `onSubmit` attributo fa riferimento lo script specificato.|  
|<xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A>|Esegue il rendering di un blocco di script di avvio appena prima della chiusura della pagina `</form>` tag. Lo script per eseguire il rendering è specificato come parametro di stringa.|  
  
 Quando si registrano i metodi, si specifica una coppia chiave/tipo per tale script. Se uno script con la stessa coppia chiave/tipo è già registrato, un nuovo script non è registrato. Analogamente, se si registra uno script con una coppia nome/tipo di risorsa che già esiste, il `script` elemento che fa riferimento alla risorsa non è aggiunto nuovamente. Quando si registra l'attributo expando di un attributo registrato in precedenza, viene generata un'eccezione. Registrazione duplicata di valori della matrice è consentita.  
  
 Quando si chiama il <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> o <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> (metodo), evitare di registrare script che eseguono funzioni inline. In alternativa, registrare uno script che contiene le definizioni di funzione come gestori eventi o definizioni di classe personalizzata per l'applicazione.  
  
### <a name="registration-methods-for-updatepanel-controls"></a>Metodi di registrazione per i controlli UpdatePanel  
 È possibile utilizzare i metodi seguenti per personalizzare gli aggiornamenti a pagina parziale quando si utilizza <xref:System.Web.UI.UpdatePanel> controlli.  
  
|Metodo|Definizione|  
|------------|----------------|  
|<xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A>|Registra un controllo come trigger per i postback asincroni.|  
|<xref:System.Web.UI.ScriptManager.RegisterDataItem%2A>|Invia dati personalizzati ai controlli durante il rendering parziale della pagina.|  
|<xref:System.Web.UI.ScriptManager.RegisterDispose%2A>|Registra uno script di eliminazione per un controllo compreso in un <xref:System.Web.UI.UpdatePanel> controllo. Lo script viene eseguito quando il controllo <xref:System.Web.UI.UpdatePanel> viene aggiornato o eliminato. Il metodo dispose viene usato per i componenti client che fanno parte di Microsoft Ajax Library e che dispongono di liberare risorse quando un componente non viene più utilizzato.|  
|<xref:System.Web.UI.ScriptManager.RegisterPostBackControl%2A>|Registra un controllo come trigger per un postback completo. Questo metodo viene utilizzato per i controlli all'interno di un <xref:System.Web.UI.UpdatePanel> controllo che altrimenti eseguirebbe postback asincroni.|  
  
<a name="web_service_references"></a>   
## <a name="web-service-references"></a>Riferimenti al servizio Web  
 È possibile registrare un servizio Web per essere chiamati da script client creando un <xref:System.Web.UI.ServiceReference> oggetto e aggiungerlo al <xref:System.Web.UI.ScriptManager.Services%2A> insieme il <xref:System.Web.UI.ScriptManager> controllo. ASP.NET genera un oggetto proxy client per ogni <xref:System.Web.UI.ServiceReference> oggetto di <xref:System.Web.UI.ScriptManager.Services%2A> insieme. È possibile aggiungere a livello di programmazione <xref:System.Web.UI.ServiceReference> oggetti per il <xref:System.Web.UI.ScriptManager.Services%2A> insieme per registrare i servizi Web in fase di esecuzione.  
  
 Per ulteriori informazioni su come accedere ai servizi Web in uno script, vedere [esporre servizi Web per lo Script Client in ASP.NET AJAX](http://msdn.microsoft.com/library/fe3f6e9e-0acd-44c9-bf0f-0a8598fc13b8) e [la chiamata di servizi Web da Script Client in ASP.NET AJAX](http://msdn.microsoft.com/library/fc06c224-f01a-45be-94af-bd71afbc07b0).  
  
<a name="localization"></a>   
## <a name="localization"></a>Localizzazione  
 Il <xref:System.Web.UI.ScriptManager> nella pagina sottoposta a rendering che puntano ai file di script localizzati appropriati, che possono essere file di script incorporati nell'assembly o file script autonomi controllo genera riferimenti.  
  
 Quando il <xref:System.Web.UI.ScriptManager.EnableScriptLocalization%2A> è impostata su `true`, <xref:System.Web.UI.ScriptManager> controllo recupera le risorse localizzate (ad esempio le stringhe localizzate) per le impostazioni cultura correnti, se presenti. Il <xref:System.Web.UI.ScriptManager> controllo offre le funzionalità seguenti per l'utilizzo di risorse localizzate:  
  
-   **I file che sono incorporati in un assembly di script**. Il <xref:System.Web.UI.ScriptManager> controllo determina il file script delle impostazioni cultura specifiche o impostazioni cultura di fallback da inviare al browser. A tale scopo, usando le impostazioni cultura specifiche <xref:System.Resources.NeutralResourcesLanguageAttribute> attributo dell'assembly, le risorse incluse con l'assembly e le impostazioni cultura dell'interfaccia utente del browser (se presente).  
  
-   **File script autonomi**. Il <xref:System.Web.UI.ScriptManager> controllo definisce l'elenco delle impostazioni cultura dell'interfaccia utente che sono supportati tramite il <xref:System.Web.UI.ScriptReferenceBase.ResourceUICultures%2A> proprietà del <xref:System.Web.UI.ScriptReference> oggetto.  
  
-   **In modalità di debug**. Il <xref:System.Web.UI.ScriptManager> controllo tenta di eseguire il rendering di un file di script specifico delle impostazioni cultura che contiene le informazioni di debug. Ad esempio, se la pagina è in modalità di debug e le impostazioni cultura correnti sono impostata su en-MX, il controllo esegue il rendering di un file di script con un nome, ad esempio `scriptname`. en-MX, se il file esiste. Se il file non esiste, il file di debug per le impostazioni cultura di fallback appropriata viene eseguito il rendering  
  
 Per ulteriori informazioni su come localizzare le risorse, vedere [localizzazione di risorse per librerie Cenni preliminari sul componente](http://msdn.microsoft.com/library/e6b15435-57c1-4dd1-9bd3-5d4c509685bb).  
  
<a name="error_handling"></a>   
## <a name="error-handling"></a>Gestione degli errori  
 Quando si verifica un errore di pagina durante i postback asincroni, il <xref:System.Web.UI.ScriptManager.AsyncPostBackError> viene generato l'evento. Il modo in cui vengono inviati gli errori sul server al client dipende il <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> proprietà, il <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> , proprietà e la sezione degli errori personalizzati del file Web. config. Per ulteriori informazioni, vedere [personalizzazione di gestione degli errori per i controlli UpdatePanel](http://msdn.microsoft.com/library/e15e7ffb-e4b2-4a89-b99e-16624a5861d0).  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Sintassi dichiarativa  
  
```  
<asp:ScriptManager  
    AllowCustomErrorsRedirect="True|False"  
    AsyncPostBackErrorMessage="string"  
    AsyncPostBackTimeout="integer"  
    AuthenticationService-Path="uri"  
    EnablePageMethods="True|False"  
    EnablePartialRendering="True|False"  
    EnableScriptGlobalization="True|False"  
    EnableScriptLocalization="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    LoadScriptsBeforeUI="True|False"  
    OnAsyncPostBackError="AsyncPostBackError event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnResolveScriptReference="ResolveScriptReference event handler"  
    OnUnload="Unload event handler"  
    ProfileService-LoadProperties="string"  
    ProfileService-Path="uri"  
    RoleService-LoadRoles="True|False"  
    RoleService-Path="uri"  
    runat="server"  
    ScriptMode="Auto|Inherit|Debug|Release"  
    ScriptPath="string"  
    SkinID="string"  
    SupportsPartialRendering="True|False"  
    Visible="True|False"  
>  
        <AuthenticationService  
            Path="uri"  
        />  
        <ProfileService  
            LoadProperties="string"  
            Path="uri"  
        />  
        <RoleService  
            LoadRoles="True|False"  
            Path="uri"  
        />  
        <Scripts>  
            <asp:ScriptReference  
                Assembly="string"  
                IgnoreScriptPath="True|False"  
                Name="string"  
                NotifyScriptLoaded="True|False"  
                Path="string"  
                ResourceUICultures="string"  
                ScriptMode="Auto|Debug|Inherit|Release"  
            />  
        </Scripts>  
        <Services>  
            <asp:ServiceReference  
                InlineScript="True|False"  
                Path="string"  
            />  
        </Services>  
</asp:ScriptManager>  
```  
  
   
  
## Examples  
 Gli esempi seguenti illustrano diversi scenari per l'utilizzo di <xref:System.Web.UI.ScriptManager> controllo.  
  
 **Abilitazione degli aggiornamenti a pagina parziale**  
  
 Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Web.UI.ScriptManager> controllo per abilitare gli aggiornamenti parziali della pagina. In questo esempio, un <xref:System.Web.UI.WebControls.Calendar> e <xref:System.Web.UI.WebControls.DropDownList> controllo sono all'interno di un <xref:System.Web.UI.UpdatePanel> controllo. Per impostazione predefinita, il valore della <xref:System.Web.UI.UpdatePanel.UpdateMode%2A> proprietà <xref:System.Web.UI.UpdatePanelUpdateMode.Always>e il valore della <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> proprietà è `true`. Di conseguenza, i controlli figlio del pannello provocano un postback asincrono.  
  
 [!code-aspx-csharp[System.Web.UI.UpdatePanel#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.UpdatePanel/CS/UpdatePanelExample1CS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.UpdatePanel#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.UpdatePanel/VB/UpdatePanelExample1VB.aspx#1)]  
  
 **Gestione degli errori di aggiornamento parziale della pagina e Script di registrazione**  
  
 Nell'esempio seguente viene illustrato come fornire personalizzato gestione degli errori durante gli aggiornamenti parziali della pagina. Per impostazione predefinita, quando si verifica un errore durante gli aggiornamenti parziali della pagina, viene visualizzata una finestra di messaggio JavaScript. In questo esempio viene illustrato come utilizzare la gestione, fornendo un gestore per errori personalizzata di <xref:System.Web.UI.ScriptManager.AsyncPostBackError> evento e impostando il <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> proprietà nel gestore eventi. È inoltre possibile impostare il <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> proprietà per specificare come viene utilizzata la sezione degli errori personalizzati del file Web. config quando si verifica un errore durante gli aggiornamenti parziali della pagina. In questo esempio, il valore predefinito di <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> viene utilizzata la proprietà. Ciò significa che, se il file Web. config contiene un elemento, tale elemento determina come vengono visualizzati errori. Per ulteriori informazioni, vedere [customErrors (Schema delle impostazioni ASP.NET) elemento](http://msdn.microsoft.com/library/288c32e2-df1f-4548-abda-de6b4cb989a6).  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.OnAsyncPostBackError#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.OnAsyncPostBackError/CS/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.OnAsyncPostBackError#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.OnAsyncPostBackError/VB/default.aspx#1)]  
  
 **Globalizzazione della data e ora in cui vengono visualizzati nel Browser**  
  
 Nell'esempio seguente viene illustrato come impostare il <xref:System.Web.UI.ScriptManager.EnableScriptGlobalization%2A> proprietà in modo che lo script client può visualizzare specifiche delle impostazioni cultura data e ora nel browser. Nell'esempio di `Culture` attributo della direttiva è impostato su `auto`. Di conseguenza, la prima lingua specificato nelle impostazioni del browser corrente determina le impostazioni cultura e le impostazioni cultura dell'interfaccia utente per la pagina. Per ulteriori informazioni, vedere [procedura: impostare le impostazioni cultura e le impostazioni cultura dell'interfaccia utente per la globalizzazione di pagine Web ASP.NET](http://msdn.microsoft.com/library/76091f86-f967-4687-a40f-de87bd8cc9a0).  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.EnableScriptGlobalization#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.EnableScriptGlobalization/CS/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.EnableScriptGlobalization#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.EnableScriptGlobalization/VB/default.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ScriptManagerProxy" />
    <altmember cref="T:System.Web.UI.UpdatePanel" />
    <altmember cref="T:System.Web.UI.ClientScriptManager" />
    <altmember cref="T:System.Web.UI.ScriptMode" />
    <altmember cref="T:System.Web.UI.ScriptReference" />
    <altmember cref="T:System.Web.UI.ServiceReference" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ScriptManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.ScriptManager" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore inizializza i campi interni utilizzati dal <xref:System.Web.UI.ScriptManager> controllo per tenere traccia delle informazioni sulla distribuzione, di controllo e di pagina.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHistoryPoint">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea un punto chiave di navigazione e lo aggiunge allo stack della cronologia del browser.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questi overload consentono di definire lo stato del server e, facoltativamente, il titolo della voce della cronologia nel browser. Quando si crea un punto di cronologia, i dati crittografati e serializzati e viene aggiunto all'URL della pagina Web e una voce è inclusa nello stack della cronologia del browser. È possibile utilizzare i dati dello stato per ricreare la pagina quando viene generato alcun evento di navigazione di server successive. Per ulteriori informazioni, vedere [la gestione della cronologia tramite Server controlli del Browser](http://msdn.microsoft.com/library/bad617c8-f84c-4d94-8852-60af400810e9).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHistoryPoint">
      <MemberSignature Language="C#" Value="public void AddHistoryPoint (System.Collections.Specialized.NameValueCollection state, string title);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHistoryPoint(class System.Collections.Specialized.NameValueCollection state, string title) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.AddHistoryPoint(System.Collections.Specialized.NameValueCollection,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHistoryPoint (state As NameValueCollection, title As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHistoryPoint(System::Collections::Specialized::NameValueCollection ^ state, System::String ^ title);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Collections.Specialized.NameValueCollection" />
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="state">Raccolta di coppie chiave/valore contenenti i dati relativi allo stato.</param>
        <param name="title">Il testo verrà aggiunto allo stack della cronologia del browser come titolo di questo stato.</param>
        <summary>Crea un punto chiave di navigazione e lo aggiunge allo stack della cronologia del browser, usando la raccolta dei dati dello stato specificato e il titolo dello stato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per creare un punto di cronologia quando si desidera salvare più di una coppia chiave/valore per i dati dello stato. Quando si crea un punto di cronologia, i dati crittografati e serializzati e viene aggiunto all'URL della pagina Web e una voce è inclusa nello stack della cronologia del browser. Se il `title` parametro `null`, come il titolo della voce di stato nello stack della cronologia viene usato il titolo della pagina Web.  
  
 È possibile utilizzare i dati dello stato per ricreare la pagina quando viene generato alcun evento di navigazione di server successive. Per ulteriori informazioni, vedere [la gestione della cronologia tramite Server controlli del Browser](http://msdn.microsoft.com/library/bad617c8-f84c-4d94-8852-60af400810e9).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHistoryPoint">
      <MemberSignature Language="C#" Value="public void AddHistoryPoint (string key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHistoryPoint(string key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.AddHistoryPoint(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHistoryPoint (key As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHistoryPoint(System::String ^ key, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Componente chiave della coppia chiave/valore che identifica lo stato della pagina Web.</param>
        <param name="value">Componente valore della coppia chiave/valore che identifica lo stato della pagina Web.</param>
        <summary>Crea un punto chiave di navigazione e lo aggiunge allo stack della cronologia del browser, usando la chiave e il valore di stato specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per creare un punto di cronologia quando si desidera salvare un valore per identificare lo stato. Quando si crea un punto di cronologia, i dati crittografati e serializzati e viene aggiunto all'URL della pagina Web e una voce è inclusa nello stack della cronologia del browser. Il titolo della pagina Web viene utilizzato come titolo della voce di stato nello stack della cronologia.  
  
 È possibile utilizzare i dati dello stato per ricreare la pagina quando viene generato alcun evento di navigazione di server successive. Per ulteriori informazioni, vedere [la gestione della cronologia tramite Server controlli del Browser](http://msdn.microsoft.com/library/bad617c8-f84c-4d94-8852-60af400810e9).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHistoryPoint">
      <MemberSignature Language="C#" Value="public void AddHistoryPoint (string key, string value, string title);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHistoryPoint(string key, string value, string title) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.AddHistoryPoint(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHistoryPoint (key As String, value As String, title As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHistoryPoint(System::String ^ key, System::String ^ value, System::String ^ title);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Componente chiave della coppia chiave/valore che identifica lo stato della pagina Web.</param>
        <param name="value">Componente valore della coppia chiave/valore che identifica lo stato della pagina Web.</param>
        <param name="title">Il testo verrà aggiunto allo stack della cronologia del browser come titolo di questo stato.</param>
        <summary>Crea un punto chiave di navigazione e lo aggiunge allo stack della cronologia del browser, usando la chiave, il valore e il titolo specificati per lo stato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per creare un punto di cronologia quando si desidera salvare un valore per identificare lo stato e un titolo per lo stato. Quando si crea un punto di cronologia, i dati crittografati e serializzati e viene aggiunto all'URL della pagina Web e una voce è inclusa nello stack della cronologia del browser. Se il `title` parametro `null`, come il titolo della voce di stato nello stack della cronologia viene usato il titolo della pagina Web.  
  
 È possibile utilizzare i dati dello stato per ricreare la pagina quando viene generato alcun evento di navigazione di server successive. Per ulteriori informazioni, vedere [la gestione della cronologia tramite Server controlli del Browser](http://msdn.microsoft.com/library/bad617c8-f84c-4d94-8852-60af400810e9).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AjaxFrameworkAssembly">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Assembly AjaxFrameworkAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly AjaxFrameworkAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AjaxFrameworkAssembly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AjaxFrameworkAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Assembly ^ AjaxFrameworkAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'assembly del framework Ajax usato dai componenti della pagina.</summary>
        <value>Assembly del framework Ajax.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AjaxFrameworkMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.AjaxFrameworkMode AjaxFrameworkMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.AjaxFrameworkMode AjaxFrameworkMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AjaxFrameworkMode" />
      <MemberSignature Language="VB.NET" Value="Public Property AjaxFrameworkMode As AjaxFrameworkMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::AjaxFrameworkMode AjaxFrameworkMode { System::Web::UI::AjaxFrameworkMode get(); void set(System::Web::UI::AjaxFrameworkMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.AjaxFrameworkMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che specifica come gli script client della libreria client Microsoft Ajax verranno inclusi nel client.</summary>
        <value>Valore di enumerazione <see cref="T:System.Web.UI.AjaxFrameworkMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.ScriptManager.AjaxFrameworkMode%2A> proprietà per abilitare tutti i file di script Microsoft Ajax, disabilitare tutti i file di script Microsoft Ajax o includere in modo esplicito singoli file di script.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come impostare il <xref:System.Web.UI.ScriptManager.AjaxFrameworkMode%2A> proprietà `Explicit` per indicare che gli script è possibile specificare in modo esplicito.  
  
```  
<asp:ScriptManager ID="sm1" AjaxFrameworkMode="Explicit" runat="server">   
<Scripts>   
    <asp:ScriptReference Name="MicrosoftAjaxCore.js" />   
    <asp:ScriptReference Name="MicrosoftAjaxComponentModel.js" />    
    <asp:ScriptReference Name="MicrosoftAjaxSerialization.js" />   
    <asp:ScriptReference Name="MicrosoftAjaxNetwork.js" />       
</Scripts>   
</asp:ScriptManager>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.AjaxFrameworkMode" />
      </Docs>
    </Member>
    <Member MemberName="AllowCustomErrorsRedirect">
      <MemberSignature Language="C#" Value="public bool AllowCustomErrorsRedirect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowCustomErrorsRedirect" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowCustomErrorsRedirect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowCustomErrorsRedirect { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che determina se la sezione degli errori personalizzati del file Web.config viene usata durante un errore in un postback asincrono.</summary>
        <value>
          <see langword="true" /> se l'impostazione degli errori personalizzati nel file Web.config viene usata per determinare il comportamento dell'errore durante i postback asincroni; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ScriptManager.AsyncPostBackError> evento viene generato quando si verifica un errore di pagina durante i postback asincroni. Modalità errori nel server vengono inviati al client dipende il <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> proprietà, il <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> proprietà e la sezione degli errori personalizzati del file Web. config.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackError">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.AsyncPostBackErrorEventArgs&gt; AsyncPostBackError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.AsyncPostBackErrorEventArgs&gt; AsyncPostBackError" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.AsyncPostBackError" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AsyncPostBackError As EventHandler(Of AsyncPostBackErrorEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::AsyncPostBackErrorEventArgs ^&gt; ^ AsyncPostBackError;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.AsyncPostBackErrorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in presenza di un errore della pagina durante un postback asincrono.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ScriptManager.AsyncPostBackError> evento viene generato quando si verifica un errore di pagina durante i postback asincroni. Modalità errori nel server vengono inviati al client dipende il <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> proprietà, il <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> proprietà e la sezione degli errori personalizzati del file Web. config.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come gestire il <xref:System.Web.UI.ScriptManager.AsyncPostBackError> evento per impostare il <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> proprietà (inviata al client) al messaggio di errore di eccezione del server.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/CS/ScriptManager_AsyncPostBackErrorMessageCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/VB/ScriptManager_AsyncPostBackErrorMessageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.OnAsyncPostBackError(System.Web.UI.AsyncPostBackErrorEventArgs)" />
        <altmember cref="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackErrorMessage">
      <MemberSignature Language="C#" Value="public string AsyncPostBackErrorMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AsyncPostBackErrorMessage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncPostBackErrorMessage As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AsyncPostBackErrorMessage { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il messaggio di errore inviato al client quando si verifica un'eccezione non gestita del server durante un postback asincrono.</summary>
        <value>Messaggio di errore. Il valore predefinito è una stringa vuota ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ScriptManager.AsyncPostBackError> evento viene generato quando si verifica un errore di pagina durante i postback asincroni. Modalità errori nel server vengono inviati al client dipende il <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> proprietà, il <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> proprietà e la sezione degli errori personalizzati del file Web. config.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come gestire il <xref:System.Web.UI.ScriptManager.AsyncPostBackError> evento per impostare il <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> proprietà (inviata al client) al messaggio di errore di eccezione del server.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/CS/ScriptManager_AsyncPostBackErrorMessageCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/VB/ScriptManager_AsyncPostBackErrorMessageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.ScriptManager.AsyncPostBackError" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackSourceElementID">
      <MemberSignature Language="C#" Value="public string AsyncPostBackSourceElementID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AsyncPostBackSourceElementID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AsyncPostBackSourceElementID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncPostBackSourceElementID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AsyncPostBackSourceElementID { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IScriptManagerInternal.AsyncPostBackSourceElementID</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'ID univoco del controllo che ha provocato il postback asincrono.</summary>
        <value>ID univoco di un controllo, se il controllo ha un ID; in caso contrario, una stringa vuota ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ScriptManager.AsyncPostBackSourceElementID%2A> proprietà contiene il valore dell'ID del controllo che ha provocato il postback asincrono, che può essere uno dei seguenti:  
  
-   Un postback di un controllo compreso in un <xref:System.Web.UI.UpdatePanel> controllo cui <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> è impostata su `true` (impostazione predefinita).  
  
-   Un postback di un controllo che è un trigger per un <xref:System.Web.UI.UpdatePanel> controllo.  
  
-   Un postback di un controllo registrato chiamando il <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> metodo il <xref:System.Web.UI.ScriptManager> controllo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackTimeout">
      <MemberSignature Language="C#" Value="public int AsyncPostBackTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AsyncPostBackTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AsyncPostBackTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncPostBackTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AsyncPostBackTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(90)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica il tempo, in secondi, prima del timeout dei postback asincroni in assenza di risposte.</summary>
        <value>Intero che rappresenta il timeout in secondi. Il valore predefinito è 90 secondi.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationService">
      <MemberSignature Language="C#" Value="public System.Web.UI.AuthenticationServiceManager AuthenticationService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.AuthenticationServiceManager AuthenticationService" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AuthenticationService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AuthenticationService As AuthenticationServiceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::AuthenticationServiceManager ^ AuthenticationService { System::Web::UI::AuthenticationServiceManager ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.AuthenticationServiceManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Web.UI.AuthenticationServiceManager" /> associato all'istanza di <see cref="T:System.Web.UI.ScriptManager" /> corrente.</summary>
        <value>Oggetto <see cref="T:System.Web.UI.AuthenticationServiceManager" /> per l'istanza di <see cref="T:System.Web.UI.ScriptManager" /> corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.AuthenticationServiceManager> oggetto restituito da questa proprietà rappresenta il servizio di autenticazione che è registrato con la pagina. Il servizio di autenticazione può essere definito nel <xref:System.Web.UI.ScriptManager> controllo o in un oggetto associato <xref:System.Web.UI.ScriptManagerProxy> controllo.  
  
 È possibile utilizzare il servizio di autenticazione ASP.NET o utilizzare un servizio di autenticazione personalizzato. È possibile aggiungere il servizio personalizzato nel markup includendo un `AuthenticationService` elemento all'interno di `asp:ScriptManager` elemento della pagina, come illustrato nell'esempio seguente.  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <AuthenticationService Path="MyAuthenticationService.asmx" />  
</asp:ScriptManager>  
```  
  
 È possibile configurare anche a livello di codice il <xref:System.Web.UI.AuthenticationServiceManager> oggetto. I servizi vengono registrati con il <xref:System.Web.UI.ScriptManager> controllo durante la pagina <xref:System.Web.UI.Control.PreRender> fase del ciclo di vita.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientNavigateHandler">
      <MemberSignature Language="C#" Value="public string ClientNavigateHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientNavigateHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ClientNavigateHandler" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientNavigateHandler As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ClientNavigateHandler { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome del metodo che gestisce l'evento [Sys.Application.navigate](http://msdn.microsoft.com/library/79ac04af-18b4-4106-9ab7-9cb10fbd0b93) nel client.</summary>
        <value>Il nome del metodo che gestisce [Navigate] (http://msdn.microsoft.com/library/79ac04af-18b4-4106-9ab7-9cb10fbd0b93) eventi sul client.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositeScript">
      <MemberSignature Language="C#" Value="public System.Web.UI.CompositeScriptReference CompositeScript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.CompositeScriptReference CompositeScript" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.CompositeScript" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompositeScript As CompositeScriptReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::CompositeScriptReference ^ CompositeScript { System::Web::UI::CompositeScriptReference ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.CompositeScriptReference</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un riferimento allo script composito che supporta la pagina Web.</summary>
        <value>Riferimento allo script composito.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni, vedere [la combinazione di script Client in uno Script composito](http://msdn.microsoft.com/library/d0f608d0-b4c8-4795-990b-ede68c1239b3).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyPageUrl">
      <MemberSignature Language="C#" Value="public virtual string EmptyPageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EmptyPageUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EmptyPageUrl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EmptyPageUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EmptyPageUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor(typeof(System.Web.UI.Design.UrlEditor), typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un URL su una pagina Web vuota.</summary>
        <value>URL da usare quando la pagina Web di destinazione è vuota.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ScriptManager.EmptyPageUrl%2A> proprietà supporta la cronologia del browser Ajax.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCdn">
      <MemberSignature Language="C#" Value="public bool EnableCdn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCdn" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableCdn" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableCdn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableCdn { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determina se la pagina corrente carica i riferimenti agli script client dai percorsi di rete per la distribuzione di contenuti (CDN).</summary>
        <value>
          <see langword="true" /> se i riferimenti agli script client vengono caricati dai percorsi CDN; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Non impostare questa proprietà su `true` se si imposta <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> a `true` già.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCdnFallback">
      <MemberSignature Language="C#" Value="public bool EnableCdnFallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCdnFallback" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableCdnFallback" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableCdnFallback As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableCdnFallback { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Abilita il caricamento della copia locale di uno script nel caso in cui la rete per la distribuzione di contenuti (CDN) non sia disponibile.</summary>
        <value>
          <see langword="true" /> se il valore di fallback della rete CDN è abilitato; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableHistory">
      <MemberSignature Language="C#" Value="public bool EnableHistory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableHistory" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableHistory" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableHistory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableHistory { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se la pagina Web supporta la gestione dei punti chiave di navigazione.</summary>
        <value>
          <see langword="true" /> se la pagina Web supporta l'aggiunta di punti chiave di navigazione nello stack della cronologia del browser; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.ScriptManager.EnableHistory%2A> proprietà per abilitare la gestione della cronologia in una pagina Web.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablePageMethods">
      <MemberSignature Language="C#" Value="public bool EnablePageMethods { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePageMethods" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnablePageMethods" />
      <MemberSignature Language="VB.NET" Value="Public Property EnablePageMethods As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnablePageMethods { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se i metodi di pagina statici pubblici in una pagina ASP.NET possono essere chiamati da script client.</summary>
        <value>
          <see langword="true" /> se metodi di pagina statici in una pagina ASP.NET possono essere chiamati da script client come metodi Web; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile aggiungere i metodi statici per una pagina ASP.NET e contrassegnarli come metodi Web. È quindi possibile chiamare questi metodi da script come se facessero parte di un servizio Web, ma senza creare un file con estensione asmx separato. Per creare metodi Web in una pagina, importare il <xref:System.Web.Services> dello spazio dei nomi e aggiungere un <xref:System.Web.Services.WebMethodAttribute> attributo a ogni metodo statico che si desidera esporre. I metodi devono essere contrassegnati come pubblici.  
  
 Per ulteriori informazioni, vedere [esporre servizi Web per lo Script Client in ASP.NET AJAX](http://msdn.microsoft.com/library/fe3f6e9e-0acd-44c9-bf0f-0a8598fc13b8).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablePartialRendering">
      <MemberSignature Language="C#" Value="public bool EnablePartialRendering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePartialRendering" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnablePartialRendering" />
      <MemberSignature Language="VB.NET" Value="Public Property EnablePartialRendering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnablePartialRendering { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che attiva il rendering parziale di una pagina, che consente a sua volta di aggiornare aree individuali della pagina usando i controlli <see cref="T:System.Web.UI.UpdatePanel" />.</summary>
        <value>
          <see langword="true" /> se il rendering parziale è attivato e gli aggiornamenti a pagina intera sono disattivati; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anche se il <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> proprietà `true`, per il rendering parziale della pagina potrebbe non verificarsi. Il browser potrebbe non supportare per il rendering parziale della pagina, o <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> è impostata su `false`.  
  
 È possibile sostituire il valore di <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> proprietà in fase di esecuzione durante o prima della pagina <xref:System.Web.UI.Control.Init> evento. Se si tenta di modificare questa proprietà dopo la pagina <xref:System.Web.UI.Control.Init> si è verificato un evento, un <xref:System.InvalidOperationException> viene generata un'eccezione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La proprietà <see cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" /> viene impostata dopo che l'evento <see cref="E:System.Web.UI.Control.Init" /> della pagina si è verificato.</exception>
        <altmember cref="T:System.Web.UI.UpdatePanel" />
        <altmember cref="P:System.Web.UI.ScriptManager.SupportsPartialRendering" />
      </Docs>
    </Member>
    <Member MemberName="EnableScriptGlobalization">
      <MemberSignature Language="C#" Value="public bool EnableScriptGlobalization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableScriptGlobalization" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableScriptGlobalization" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableScriptGlobalization As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableScriptGlobalization { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se il controllo <see cref="T:System.Web.UI.ScriptManager" /> esegue il rendering dello script che supporta l'analisi e la formattazione di informazioni specifiche delle impostazioni cultura.</summary>
        <value>
          <see langword="true" /> se è possibile visualizzare le informazioni specifiche delle impostazioni cultura; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando il <xref:System.Web.UI.ScriptManager.EnableScriptGlobalization%2A> è impostata su `true`, le funzioni di ECMAScript (JavaScript) globalizzate, ad esempio il metodo di visualizzano informazioni specifiche delle impostazioni cultura. Nel browser, nel codice server o nel file di configurazione del sito Web, è possono impostare le impostazioni cultura.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableScriptLocalization">
      <MemberSignature Language="C#" Value="public bool EnableScriptLocalization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableScriptLocalization" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableScriptLocalization" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableScriptLocalization As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableScriptLocalization { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se il controllo <see cref="T:System.Web.UI.ScriptManager" /> esegue il rendering delle versioni localizzate dei file di script.</summary>
        <value>
          <see langword="true" /> se verrà eseguito il rendering dei file di script localizzati; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando il <xref:System.Web.UI.ScriptManager.EnableScriptLocalization%2A> è impostata su `true`, <xref:System.Web.UI.ScriptManager> oggetto recupererà i file di script per le impostazioni cultura correnti se presenti. Ad esempio, una pagina è possibile specificare un file script denominato CustomScript. Se le impostazioni cultura fr-CA, il <xref:System.Web.UI.ScriptManager> oggetto tenta di recuperare un file script denominato CustomScript.fr CA.  
  
> [!NOTE]
>  Per impedire che un file di script viene eseguito il rendering di due volte il <xref:System.Web.UI.ScriptManager.EnableScriptLocalization%2A> non deve essere modificata durante un postback asincrono.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableSecureHistoryState">
      <MemberSignature Language="C#" Value="public bool EnableSecureHistoryState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableSecureHistoryState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableSecureHistoryState" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableSecureHistoryState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableSecureHistoryState { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se crittografare la stringa dello stato della cronologia.</summary>
        <value>
          <see langword="true" /> se la stringa dello stato della cronologia deve essere crittografata; in caso contrario <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  Questa proprietà deve ***mai*** impostare `false` in un sito web di produzione.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrent">
      <MemberSignature Language="C#" Value="public static System.Web.UI.ScriptManager GetCurrent (System.Web.UI.Page page);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.ScriptManager GetCurrent(class System.Web.UI.Page page) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetCurrent(System.Web.UI.Page)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::ScriptManager ^ GetCurrent(System::Web::UI::Page ^ page);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
      </Parameters>
      <Docs>
        <param name="page">Istanza della pagina da cui recuperare <see cref="T:System.Web.UI.ScriptManager" />.</param>
        <summary>Ottiene l'istanza <see cref="T:System.Web.UI.ScriptManager" /> per un oggetto <see cref="T:System.Web.UI.Page" /> specificato.</summary>
        <returns>Istanza <see cref="T:System.Web.UI.ScriptManager" /> corrente per l'oggetto <see cref="T:System.Web.UI.Page" /> selezionato oppure <see langword="null" /> se nessuna istanza è definita.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo statico per determinare se un <xref:System.Web.UI.ScriptManager> controllo è in una pagina o per accedere alle proprietà e metodi di un <xref:System.Web.UI.ScriptManager> controllo quando non si conosce il relativo ID.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="page" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredArrayDeclarations">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredArrayDeclaration&gt; GetRegisteredArrayDeclarations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredArrayDeclaration&gt; GetRegisteredArrayDeclarations() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredArrayDeclarations" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredArrayDeclarations () As ReadOnlyCollection(Of RegisteredArrayDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredArrayDeclaration ^&gt; ^ GetRegisteredArrayDeclarations();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredArrayDeclaration&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera una raccolta di sola lettura delle dichiarazioni di matrice ECMAScript (JavaScript) precedentemente registrate con l'oggetto <see cref="T:System.Web.UI.Page" />.</summary>
        <returns>Raccolta generica contenente le dichiarazioni di matrice.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="Overload:System.Web.UI.ScriptManager.RegisterArrayDeclaration" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredClientScriptBlocks">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt; GetRegisteredClientScriptBlocks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredScript&gt; GetRegisteredClientScriptBlocks() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredClientScriptBlocks" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredClientScriptBlocks () As ReadOnlyCollection(Of RegisteredScript)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredScript ^&gt; ^ GetRegisteredClientScriptBlocks();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera una matrice di sola lettura dei blocchi di script client precedentemente registrati con il controllo <see cref="T:System.Web.UI.ScriptManager" />.</summary>
        <returns>Raccolta generica contenente i blocchi di script client.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Blocchi di script client vengono registrati con il <xref:System.Web.UI.ScriptManager> controllo da utilizzare con un controllo compreso in un <xref:System.Web.UI.UpdatePanel> controllo.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ScriptManager.RegisterClientScriptBlock" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredDisposeScripts">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredDisposeScript&gt; GetRegisteredDisposeScripts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredDisposeScript&gt; GetRegisteredDisposeScripts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredDisposeScripts" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredDisposeScripts () As ReadOnlyCollection(Of RegisteredDisposeScript)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredDisposeScript ^&gt; ^ GetRegisteredDisposeScripts();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredDisposeScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera una raccolta di sola lettura degli script <see langword="dispose" /> precedentemente registrati con l'oggetto <see cref="T:System.Web.UI.Page" />.</summary>
        <returns>Raccolta generica contenente script <see langword="dispose" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto `dispose` script viene eseguito quando il <xref:System.Web.UI.UpdatePanel> controllo viene aggiornato o eliminato.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterDispose(System.Web.UI.Control,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredExpandoAttributes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredExpandoAttribute&gt; GetRegisteredExpandoAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredExpandoAttribute&gt; GetRegisteredExpandoAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredExpandoAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredExpandoAttributes () As ReadOnlyCollection(Of RegisteredExpandoAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredExpandoAttribute ^&gt; ^ GetRegisteredExpandoAttributes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredExpandoAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera una raccolta di sola lettura degli attributi personalizzati (expando) precedentemente registrati con l'oggetto <see cref="T:System.Web.UI.Page" />.</summary>
        <returns>Raccolta generica contenente attributi personalizzati.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un attributo personalizzato è una coppia nome/valore che può essere letto e impostata da script client.  
  
   
  
## Examples  
 <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>  
  
 <xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A>  
  
 <xref:System.Web.UI.RegisteredExpandoAttribute>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredHiddenFields">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredHiddenField&gt; GetRegisteredHiddenFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredHiddenField&gt; GetRegisteredHiddenFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredHiddenFields" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredHiddenFields () As ReadOnlyCollection(Of RegisteredHiddenField)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredHiddenField ^&gt; ^ GetRegisteredHiddenFields();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredHiddenField&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera una raccolta di sola lettura dei campi nascosti precedentemente registrati con l'oggetto <see cref="T:System.Web.UI.Page" />.</summary>
        <returns>Raccolta generica contenente campi nascosti.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.RegisteredHiddenField" />
        <altmember cref="Overload:System.Web.UI.ScriptManager.RegisterHiddenField" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredOnSubmitStatements">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt; GetRegisteredOnSubmitStatements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredScript&gt; GetRegisteredOnSubmitStatements() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredOnSubmitStatements" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredOnSubmitStatements () As ReadOnlyCollection(Of RegisteredScript)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredScript ^&gt; ^ GetRegisteredOnSubmitStatements();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera una raccolta di sola lettura delle istruzioni <see langword="onsubmit" /> precedentemente registrate con l'oggetto <see cref="T:System.Web.UI.Page" />.</summary>
        <returns>Raccolta generica contenente istruzioni <see langword="onsubmit" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un `onsubmit` istruzione è ECMAScript (JavaScript) eseguito quando il form viene inviato.  
  
   
  
## Examples  
 <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A>  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredStartupScripts">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt; GetRegisteredStartupScripts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredScript&gt; GetRegisteredStartupScripts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredStartupScripts" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredStartupScripts () As ReadOnlyCollection(Of RegisteredScript)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredScript ^&gt; ^ GetRegisteredStartupScripts();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera una raccolta di sola lettura degli script di avvio precedentemente registrati con l'oggetto <see cref="T:System.Web.UI.Page" />.</summary>
        <returns>Raccolta generica contenente script di avvio.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uno script di avvio è lo script client associato a un controllo che viene eseguito quando viene avviato il controllo.  
  
   
  
## Examples  
 <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A>  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>  
  
 <xref:System.Web.UI.ScriptManager.GetRegisteredStartupScripts%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStateString">
      <MemberSignature Language="C#" Value="public string GetStateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetStateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetStateString" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetStateString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera una stringa contenente le coppie nome/valore che rappresentano lo stato di una pagina Web.</summary>
        <returns>Stringa che contiene le coppie chiave/valore che rappresentano lo stato della pagina Web.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDebuggingEnabled">
      <MemberSignature Language="C#" Value="public bool IsDebuggingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDebuggingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.IsDebuggingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDebuggingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDebuggingEnabled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se verrà eseguito il rendering delle versioni di debug delle librerie di script client.</summary>
        <value>
          <see langword="true" /> se la richiesta corrente viene eseguita in modalità di debug; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ScriptManager.IsDebuggingEnabled%2A> restituisce proprietà `false` quando una delle seguenti condizioni è vera:  
  
-   Nell'elemento del file di configurazione, il `retail` attributo è impostato su `true`. Si esegue l'override di tutte le altre impostazioni.  
  
-   Il <xref:System.Web.UI.ScriptManager.ScriptMode%2A> è impostata su `Auto` o `Inherit`, e il debug non è abilitato nel `compilation` sezione del file Web. config radice dell'applicazione.  
  
-   La proprietà <xref:System.Web.UI.ScriptManager.ScriptMode%2A> è impostata su `Release`.  
  
    > [!NOTE]
    >  Il `debug` attributo della direttiva influisce sulle applicazioni compatibili con Ajax ASP.NET. Il <xref:System.Web.UI.ScriptManager> controllo utilizza solo le impostazioni nel file Web. config e nelle relative <xref:System.Web.UI.ScriptManager.IsDebuggingEnabled%2A> e <xref:System.Web.UI.ScriptManager.ScriptMode%2A> le proprietà per determinare se eseguire il rendering degli script di debug.  
  
 Per ulteriori informazioni, vedere [debug e traccia panoramica delle applicazioni Ajax](http://msdn.microsoft.com/library/92684ea0-7bb4-4a34-9203-3aa6394ce375).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.HttpContext.IsDebuggingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="IsInAsyncPostBack">
      <MemberSignature Language="C#" Value="public bool IsInAsyncPostBack { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInAsyncPostBack" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.IsInAsyncPostBack" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInAsyncPostBack As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInAsyncPostBack { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IScriptManagerInternal.IsInAsyncPostBack</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il postback corrente viene eseguito in modalità di rendering parziale.</summary>
        <value>
          <see langword="true" /> se il postback corrente viene eseguito in modalità di rendering parziale; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.ScriptManager.IsInAsyncPostBack%2A> proprietà in combinazione con il <xref:System.Web.UI.Page.IsPostBack%2A> proprietà per distinguere il caricamento della pagina iniziale, un aggiornamento parziale della pagina e un aggiornamento a pagina intera in <xref:System.Web.UI.Control.Load>, <xref:System.Web.UI.Page.InitComplete>, o <xref:System.Web.UI.Control.PreRender> eventi.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" />
      </Docs>
    </Member>
    <Member MemberName="IsNavigating">
      <MemberSignature Language="C#" Value="public bool IsNavigating { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNavigating" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.IsNavigating" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNavigating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNavigating { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se un evento <see cref="E:System.Web.UI.ScriptManager.Navigate" /> è attualmente in corso di elaborazione.</summary>
        <value>
          <see langword="true" /> se l’evento <see cref="E:System.Web.UI.ScriptManager.Navigate" /> è in corso di elaborazione; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.ScriptManager.IsNavigating%2A> proprietà per determinare se il <xref:System.Web.UI.ScriptManager.Navigate> è stato generato l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadPostData">
      <MemberSignature Language="C#" Value="protected virtual bool LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LoadPostData (postDataKey As String, postCollection As NameValueCollection) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LoadPostData(System::String ^ postDataKey, System::Collections::Specialized::NameValueCollection ^ postCollection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">Identificatore di chiave per il controllo.</param>
        <param name="postCollection">Raccolta di tutti i dati Post in arrivo.</param>
        <summary>Legge i dati del form inseriti dal browser al server e determina l'origine del postback asincrono.</summary>
        <returns>
          <see langword="true" /> se lo stato del controllo <see cref="T:System.Web.UI.ScriptManager" /> è cambiato in conseguenza di un postback; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ScriptManager.LoadPostData%2A> metodo viene utilizzato principalmente dagli sviluppatori di controlli per estendere le funzionalità del <xref:System.Web.UI.ScriptManager> controllo.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
      </Docs>
    </Member>
    <Member MemberName="LoadScriptsBeforeUI">
      <MemberSignature Language="C#" Value="public bool LoadScriptsBeforeUI { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LoadScriptsBeforeUI" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.LoadScriptsBeforeUI" />
      <MemberSignature Language="VB.NET" Value="Public Property LoadScriptsBeforeUI As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LoadScriptsBeforeUI { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se gli script vengono caricati prima o dopo il caricamento del markup dell'interfaccia utente della pagina.</summary>
        <value>
          <see langword="true" /> se gli script vengono caricati prima del markup dell'interfaccia utente; <see langword="false" /> se gli script vengono caricati dopo il markup dell'interfaccia utente. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> proprietà determina come script di <xref:System.Web.UI.ScriptManager.Scripts%2A> raccolta vengono caricati rispetto al markup dell'interfaccia utente della pagina.  
  
 Quando il <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> proprietà `true`, `script` elemento sottoposto a rendering prima del markup dell'interfaccia utente della pagina. In questo scenario, se gli elementi dell'interfaccia utente sono definiti negli script, l'interfaccia utente sarà completamente funzionale al momento del caricamento. Tuttavia, se lo script accede a elementi dell'interfaccia utente nel codice per cui le istanze non sono ancora state create, potrebbe verificarsi un errore. Per assicurarsi che gli elementi dell'interfaccia utente siano caricati prima di accedervi, gestire l'evento della classe.  
  
 Quando il <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> proprietà `false`, `script` elemento sottoposto a rendering dopo il rendering di markup dell'interfaccia utente della pagina. In questo scenario, l'interfaccia utente carica più rapidamente, ma potrebbe non essere completamente funzionale se gli script che definiscono altri elementi dell'interfaccia utente non sono stata completata durante il caricamento.  
  
 Non impostare questa proprietà su `true` se si imposta <xref:System.Web.UI.ScriptManager.EnableCdn%2A> a `true` già.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ScriptManager.Scripts" />
        <altmember cref="T:System.Web.UI.ScriptReference" />
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.HistoryEventArgs&gt; Navigate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.HistoryEventArgs&gt; Navigate" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.Navigate" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Navigate As EventHandler(Of HistoryEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::HistoryEventArgs ^&gt; ^ Navigate;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.HistoryEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente fa clic sul pulsante **Indietro** o **Aventi** del browser.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un utente sceglie il browser **nuovamente** pulsante, si accede tramite URL visualizzati in precedenza, che può includere URL che contengono dati relativi allo stato punto chiave di navigazione. Se il codice della pagina Web client rileva che l'URL contiene dati di stato della cronologia, effettua una richiesta di pagina del server. Questa funzione agisce come un evento di postback e <xref:System.Web.UI.ScriptManagerProxy> controllo server genera il `Navigate` evento. È possibile gestire questo evento e ricreare la pagina in base alle esigenze dell'applicazione Web tramite i dati dello stato che viene passati all'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAsyncPostBackError">
      <MemberSignature Language="C#" Value="protected internal virtual void OnAsyncPostBackError (System.Web.UI.AsyncPostBackErrorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnAsyncPostBackError(class System.Web.UI.AsyncPostBackErrorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnAsyncPostBackError(System.Web.UI.AsyncPostBackErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnAsyncPostBackError (e As AsyncPostBackErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnAsyncPostBackError(System::Web::UI::AsyncPostBackErrorEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.AsyncPostBackErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dati dell'evento di errore.</param>
        <summary>Genera l'evento <see cref="E:System.Web.UI.ScriptManager.AsyncPostBackError" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ScriptManager.AsyncPostBackError> evento viene generato quando si verifica un errore di pagina durante i postback asincroni. Modalità errori nel server vengono inviati al client dipende il <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> proprietà, il <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> proprietà e la sezione degli errori personalizzati del file Web. config.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come gestire il <xref:System.Web.UI.ScriptManager.AsyncPostBackError> evento per impostare il <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> proprietà (inviata al client) al messaggio di errore di eccezione del server.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/CS/ScriptManager_AsyncPostBackErrorMessageCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/VB/ScriptManager_AsyncPostBackErrorMessageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.ScriptManager.AsyncPostBackError" />
        <altmember cref="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Web.UI.Control.Init" /> e verifica che esista solo un controllo <see cref="T:System.Web.UI.ScriptManager" /> nella pagina.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Più di un'istanza dell'elemento <see cref="T:System.Web.UI.ScriptManager" /> è presente nella pagina.</exception>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override di questo metodo, chiamare la base <see cref="M:System.Web.UI.ScriptManager.OnInit(System.EventArgs)" /> metodo in modo che i file di script siano gestiti correttamente per il rendering parziale della pagina.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Web.UI.Control.PreRender" /> e registra i file di script e i servizi per gli aggiornamenti parziali della pagina.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per informazioni sul modello DOM, vedere il [modello oggetto documento (DOM) Level 1 Specification](http://go.microsoft.com/fwlink/?LinkId=73305) nel sito Web World Wide Web Consortium (W3C).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il browser che ha effettuato la richiesta di pagina parziale non supporta almeno DOM di livello 1.0.</exception>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override di questo metodo, chiamare la base <see cref="M:System.Web.UI.ScriptManager.OnPreRender(System.EventArgs)" /> metodo in modo che blocchi script e i servizi siano gestiti correttamente per il rendering parziale della pagina.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnResolveCompositeScriptReference">
      <MemberSignature Language="C#" Value="protected virtual void OnResolveCompositeScriptReference (System.Web.UI.CompositeScriptReferenceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResolveCompositeScriptReference(class System.Web.UI.CompositeScriptReferenceEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnResolveCompositeScriptReference(System.Web.UI.CompositeScriptReferenceEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnResolveCompositeScriptReference (e As CompositeScriptReferenceEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnResolveCompositeScriptReference(System::Web::UI::CompositeScriptReferenceEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.CompositeScriptReferenceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto che rappresenta il riferimento allo script composito.</param>
        <summary>Genera l'evento <see cref="E:System.Web.UI.ScriptManager.ResolveCompositeScriptReference" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResolveScriptReference">
      <MemberSignature Language="C#" Value="protected virtual void OnResolveScriptReference (System.Web.UI.ScriptReferenceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResolveScriptReference(class System.Web.UI.ScriptReferenceEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnResolveScriptReference(System.Web.UI.ScriptReferenceEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnResolveScriptReference (e As ScriptReferenceEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnResolveScriptReference(System::Web::UI::ScriptReferenceEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.ScriptReferenceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto che rappresenta lo script corrente.</param>
        <summary>Genera l'evento <see cref="E:System.Web.UI.ScriptManager.ResolveScriptReference" /> per ogni riferimento a script gestito dal controllo <see cref="T:System.Web.UI.ScriptManager" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene chiamato dal <xref:System.Web.UI.ScriptManager.OnPreRender%2A> gestore dell'evento, una volta per ogni <xref:System.Web.UI.ScriptReference> nel <xref:System.Web.UI.ScriptManager.Scripts%2A> insieme.  
  
 Il <xref:System.Web.UI.ScriptManager.ResolveScriptReference> evento viene generato dopo che le voci di script duplicati sono stati risolte.  
  
 Eseguire l'override di questo metodo per applicare i comportamenti dei singoli blocchi di script durante il postback o durante aggiornamenti a pagina parziale.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProfileService">
      <MemberSignature Language="C#" Value="public System.Web.UI.ProfileServiceManager ProfileService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ProfileServiceManager ProfileService" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ProfileService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProfileService As ProfileServiceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ProfileServiceManager ^ ProfileService { System::Web::UI::ProfileServiceManager ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ProfileServiceManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Web.UI.ProfileServiceManager" /> associato all'istanza di <see cref="T:System.Web.UI.ScriptManager" /> corrente.</summary>
        <value>Oggetto <see cref="T:System.Web.UI.ProfileServiceManager" /> per l'istanza di <see cref="T:System.Web.UI.ScriptManager" /> corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ProfileServiceManager> oggetto restituito da questa proprietà rappresenta il servizio profili è registrato con la pagina. Il servizio profili può essere definito nel <xref:System.Web.UI.ScriptManager> controllo o in un oggetto associato <xref:System.Web.UI.ScriptManagerProxy> controllo.  
  
 È possibile utilizzare il servizio di profilo ASP.NET o utilizzare un profilo personalizzato di servizio. È possibile aggiungere il servizio personalizzato nel markup includendo un `ProfileService` elemento all'interno di `asp:ScriptManager` elemento della pagina, come illustrato nell'esempio seguente.  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <ProfileService LoadProperties="propertyA,propertyB"  
    Path="MyProfileService.asmx" />  
</asp:ScriptManager>  
```  
  
 È possibile configurare anche a livello di codice il <xref:System.Web.UI.ProfileServiceManager> oggetto. I servizi vengono registrati con il <xref:System.Web.UI.ScriptManager> controllo durante la pagina <xref:System.Web.UI.Control.PreRender> fase del ciclo di vita.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RaisePostBackEvent (eventArgument As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RaisePostBackEvent(System::String ^ eventArgument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Stringa di coppie nome/valore che rappresentano lo stato della cronologia della pagina Web.</param>
        <summary>Elabora un evento di postback generato dal controllo <see cref="T:System.Web.UI.ScriptManager" /> e carica lo stato della cronologia della pagina Web.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostDataChangedEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RaisePostDataChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RaisePostDataChangedEvent ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RaisePostDataChangedEvent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Genera eventi per il controllo <see cref="T:System.Web.UI.ScriptManager" /> durante il postback al server.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ScriptManager.RaisePostDataChangedEvent%2A> metodo viene utilizzato principalmente dagli sviluppatori di controlli per estendere le funzionalità del <xref:System.Web.UI.ScriptManager> controllo. Per l'implementazione predefinita del <xref:System.Web.UI.ScriptManager> controllo, viene generato alcun evento.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterArrayDeclaration">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registra una dichiarazione di matrice di ECMAScript (JavaScript) con il controllo <see cref="T:System.Web.UI.ScriptManager" /> da usare con un controllo compreso in un controllo <see cref="T:System.Web.UI.UpdatePanel" /> e aggiunge la matrice alla pagina.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public static void RegisterArrayDeclaration (System.Web.UI.Control control, string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterArrayDeclaration(class System.Web.UI.Control control, string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Control,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterArrayDeclaration(System::Web::UI::Control ^ control, System::String ^ arrayName, System::String ^ arrayValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Controllo che registra la matrice.</param>
        <param name="arrayName">Nome della matrice da registrare.</param>
        <param name="arrayValue">Valore o valori della matrice da registrare.</param>
        <summary>Registra una dichiarazione di matrice di ECMAScript (JavaScript) con il controllo <see cref="T:System.Web.UI.ScriptManager" /> da usare con un controllo compreso in un controllo <see cref="T:System.Web.UI.UpdatePanel" /> e aggiunge la matrice alla pagina.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> metodo per registrare una matrice di script client compatibile con il rendering parziale della pagina e che non ha alcuna dipendenza di Microsoft Ajax Library. Questo metodo registra la matrice quando `control` rappresenta un controllo compreso in un <xref:System.Web.UI.UpdatePanel> controllo che viene aggiornato. Per registrare una matrice ogni volta che si verifica un postback asincrono, utilizzare il <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%28System.Web.UI.Page%2CSystem.String%2CSystem.String%29> overload di questo metodo.  
  
 Se si desidera registrare una matrice che non riguardano gli aggiornamenti a pagina parziale, se si desidera registrare la matrice solo una volta durante il rendering della pagina iniziale, utilizzare il <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> metodo la <xref:System.Web.UI.ClientScriptManager> classe. È possibile ottenere un riferimento al <xref:System.Web.UI.ClientScriptManager> dall'oggetto di <xref:System.Web.UI.Page.ClientScript%2A> proprietà della pagina.  
  
 Il <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> metodo determina se una matrice con il nome specificato nella `arrayName` parametro è già registrato. In tal caso, il metodo aggiunge i valori specificati in `arrayValue`. Poiché la matrice deve essere registrato è basata sul <xref:System.Collections.ArrayList> (classe), i duplicati sono consentiti. Se una matrice registrata con il nome in `arrayName` non esiste, la matrice viene creata e i valori in `arrayValue` vengono aggiunti.  
  
 Per includere valori letterali stringa nella matrice, utilizzare le virgolette singole (') o virgolette doppie di escape (\\") in `arrayValue`.  
  
 Si noti che JavaScript la virgola (,) come delimitatore nella matrice. È possibile specificare più valori della matrice passando una stringa delimitata da virgole in `arrayValue`. Separazione di due elementi con una virgola `arrayValue` è equivalente alla chiamata di <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> metodo due volte, una volta per ogni elemento.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="arrayName" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Page,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public static void RegisterArrayDeclaration (System.Web.UI.Page page, string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterArrayDeclaration(class System.Web.UI.Page page, string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Page,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterArrayDeclaration(System::Web::UI::Page ^ page, System::String ^ arrayName, System::String ^ arrayValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Oggetto pagina che registra la matrice.</param>
        <param name="arrayName">Nome della matrice da registrare.</param>
        <param name="arrayValue">Valore o valori della matrice da registrare.</param>
        <summary>Registra una dichiarazione di matrice di ECMAScript (JavaScript) con il controllo <see cref="T:System.Web.UI.ScriptManager" /> da usare con un controllo compreso in un controllo <see cref="T:System.Web.UI.UpdatePanel" /> e aggiunge la matrice alla pagina.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> metodo per registrare una matrice di script client compatibile con il rendering parziale della pagina e che non ha alcuna dipendenza di Microsoft Ajax Library. Questo metodo registra la matrice ogni volta che si verifica un postback asincrono. Per registrare una matrice per un controllo compreso in un <xref:System.Web.UI.UpdatePanel> in modo che la matrice viene registrata solo quando viene aggiornato il pannello di controllo, utilizzare il <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%28System.Web.UI.Control%2CSystem.String%2CSystem.String%29> overload di questo metodo.  
  
 Se si desidera registrare una matrice che non riguardano gli aggiornamenti a pagina parziale, se si desidera registrare la matrice solo una volta durante il rendering della pagina iniziale, utilizzare il <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> metodo la <xref:System.Web.UI.ClientScriptManager> classe. È possibile ottenere un riferimento al <xref:System.Web.UI.ClientScriptManager> dall'oggetto di <xref:System.Web.UI.Page.ClientScript%2A> proprietà della pagina.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="arrayName" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Control,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAsyncPostBackControl">
      <MemberSignature Language="C#" Value="public void RegisterAsyncPostBackControl (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterAsyncPostBackControl(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterAsyncPostBackControl(System::Web::UI::Control ^ control);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterAsyncPostBackControl(System.Web.UI.Control)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Controllo da registrare per i postback asincroni.</param>
        <summary>Registra un controllo come trigger per i postback asincroni.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> metodo consente di registrare i controlli server Web come trigger in modo da eseguire un postback asincrono anziché un postback sincrono. Quando il <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> proprietà di un <xref:System.Web.UI.UpdatePanel> NFS è impostata su `true` (ovvero l'impostazione predefinita), controlli di postback di <xref:System.Web.UI.UpdatePanel> controllo vengono registrati automaticamente come controlli di postback asincroni.  
  
 Utilizzare il <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> metodo per registrare i controlli all'esterno di un <xref:System.Web.UI.UpdatePanel> controllo come trigger per i postback asincroni e potenzialmente aggiorna il contenuto di un pannello di aggiornamento. Per aggiornare un <xref:System.Web.UI.UpdatePanel> controllare a livello di programmazione, chiamare il <xref:System.Web.UI.UpdatePanel.Update%2A> metodo.  
  
 È possibile aggiungere il trigger in modo dichiarativo utilizzando la `Triggers` elemento il <xref:System.Web.UI.UpdatePanel> controllo. In Visual Studio, usare la finestra di progettazione **UpdatePanelTrigger Editor della raccolta** finestra di dialogo.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come chiamare il <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> metodo per registrare un <xref:System.Web.UI.WebControls.Button> controllare in modo da provocare un aggiornamento di un <xref:System.Web.UI.UpdatePanel> contenuto del controllo. Il <xref:System.Web.UI.WebControls.Button> controllo non è all'interno di <xref:System.Web.UI.UpdatePanel> controllo. Vengono mostrati due pulsanti: `Button1` e `Button2`. `Button1` Aggiorna il contenuto del pannello, e `Button2` Aggiorna l'intera pagina.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/CS/ScriptManager1CS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/VB/ScriptManager1VB.aspx#1)]  
  
 Nell'esempio seguente viene illustrato come chiamare il <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> metodo per registrare un utente di controllare in modo da provocare un aggiornamento di un <xref:System.Web.UI.UpdatePanel> contenuto del controllo. Il primo esempio illustra una pagina con il controllo utente. Nel secondo esempio viene illustrato il controllo utente.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/CS/ScriptManager2CS.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/VB/ScriptManager2VB.aspx#2)]  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il controllo registrato non implementa le interfacce <see cref="T:System.Web.UI.INamingContainer" />, <see cref="T:System.Web.UI.IPostBackDataHandler" />, o <see cref="T:System.Web.UI.IPostBackEventHandler" />.</exception>
        <altmember cref="P:System.Web.UI.UpdatePanel.Triggers" />
        <altmember cref="M:System.Web.UI.UpdatePanel.Update" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptBlock">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registra un blocco di script client con il controllo <see cref="T:System.Web.UI.ScriptManager" /> da usare con un controllo compreso in un controllo <see cref="T:System.Web.UI.UpdatePanel" /> e quindi aggiunge il blocco di script alla pagina.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptBlock (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptBlock(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptBlock(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Controllo che registra il blocco di script client.</param>
        <param name="type">Tipo del blocco di script client. Questo parametro viene in genere specificato usando l'operatore <see langword="typeof" /> (C#) o l'operatore <see langword="GetType" /> (Visual Basic) per recuperare il tipo del controllo che sta registrando lo script.</param>
        <param name="key">Identificatore univoco per il blocco di script.</param>
        <param name="script">Script.</param>
        <param name="addScriptTags">
          <see langword="true" /> per includere il blocco di script nei tag <see langword="&lt;script&gt;" /> e <see langword="&lt;/script&gt;" />; in caso contrario, <see langword="false" />.</param>
        <summary>Registra un blocco di script client con il controllo <see cref="T:System.Web.UI.ScriptManager" /> da usare con un controllo compreso in un controllo <see cref="T:System.Web.UI.UpdatePanel" /> e quindi aggiunge il blocco di script alla pagina.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A> metodo per registrare un blocco di script client compatibile con il rendering parziale della pagina e che non ha alcuna dipendenza di Microsoft Ajax Library. Blocchi di script client vengono registrati tramite questo metodo vengono inviati alla pagina solo quando `control` rappresenta un controllo compreso in un <xref:System.Web.UI.UpdatePanel> controllo che viene aggiornato. Per registrare un blocco di script ogni volta che si verifica un postback asincrono, utilizzare il <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> overload di questo metodo.  
  
 Se si desidera registrare un blocco di script che non riguardano gli aggiornamenti a pagina parziale, se si desidera registrare il blocco di script solo una volta durante il rendering della pagina iniziale, utilizzare il <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> metodo la <xref:System.Web.UI.ClientScriptManager> classe. È possibile ottenere un riferimento al <xref:System.Web.UI.ClientScriptManager> dall'oggetto di <xref:System.Web.UI.Page.ClientScript%2A> proprietà della pagina.  
  
 Se `addScriptTags` è `true`, <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A> metodo aggiunge `<script>` tag per il blocco di script. Passare `false` se si desidera creare `<script>` tag, ad esempio quando si desidera impostare gli attributi specifici del `<script>` tag. Se `addScriptTags` è `false` e `script` parametro contiene più blocchi di script, viene generata un'eccezione.  
  
 Il <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A> metodo aggiunge un blocco di script alla pagina dopo l'apertura `<form>` tag. I blocchi di script non sono necessariamente output nello stesso ordine in cui sono registrati. Se l'ordine dei blocchi di script è importante, concatenare i blocchi di script in un'unica stringa (ad esempio, tramite il <xref:System.Text.StringBuilder> oggetto) e quindi li registra come un blocco di script client singolo.  
  
   
  
## Examples  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterClientScriptBlock#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptBlock/CS/ScriptManager_RegisterClientScriptBlockCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterClientScriptBlock#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptBlock/vb/ScriptManager_RegisterClientScriptBlockVB.aspx#1)]  
  
 [!code-xml[System.Web.UI.ScriptManager.RegisterClientScriptBlock#2](~/samples/snippets/common/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptBlock/Common/App_Data/Contacts.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il blocco di script client <paramref name="type" /> è <see langword="null" />.  \- o -  Il controllo che registra il blocco di script è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il controllo che registra il blocco di script non è presente nella struttura ad albero dei controlli della pagina.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptBlock (System.Web.UI.Page page, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptBlock(class System.Web.UI.Page page, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptBlock(System::Web::UI::Page ^ page, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="page">Oggetto pagina che registra il blocco di script client.</param>
        <param name="type">Tipo del blocco di script client. Questo parametro viene in genere specificato usando l'operatore <see langword="typeof" /> (C#) o l'operatore <see langword="GetType" /> (Visual Basic) per recuperare il tipo del controllo che sta registrando lo script.</param>
        <param name="key">Identificatore univoco per il blocco di script.</param>
        <param name="script">Script da registrare.</param>
        <param name="addScriptTags">
          <see langword="true" /> per includere il blocco di script nei tag <see langword="&lt;script&gt;" /> e <see langword="&lt;/script&gt;" />; in caso contrario, <see langword="false" />.</param>
        <summary>Registra un blocco di script client con il controllo <see cref="T:System.Web.UI.ScriptManager" /> da usare con un controllo compreso in un controllo <see cref="T:System.Web.UI.UpdatePanel" /> e quindi aggiunge il blocco di script alla pagina.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si registra un blocco di script utilizzando questo metodo, lo script viene eseguito il rendering di ogni volta che si verifica un postback asincrono. Per registrare un blocco di script per un controllo compreso in un <xref:System.Web.UI.UpdatePanel> controllare in modo da registrare lo script solo quando il <xref:System.Web.UI.UpdatePanel> controllo verrà aggiornato, usare il <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> overload di questo metodo.  
  
 Se si desidera registrare un blocco di script che non riguardano gli aggiornamenti a pagina parziale, se si desidera registrare il blocco di script solo una volta durante il rendering della pagina iniziale, utilizzare il <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> metodo la <xref:System.Web.UI.ClientScriptManager> classe. È possibile ottenere un riferimento al <xref:System.Web.UI.ClientScriptManager> dall'oggetto di <xref:System.Web.UI.Page.ClientScript%2A> proprietà della pagina.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il blocco di script <paramref name="type" /> è <see langword="null" />.  \- o -  La pagina che registra il blocco di script è <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptInclude">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registra un file di script client con il controllo <see cref="T:System.Web.UI.ScriptManager" /> da usare con un controllo compreso in un controllo <see cref="T:System.Web.UI.UpdatePanel" /> e quindi aggiunge un riferimento al file di script alla pagina.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptInclude (System.Web.UI.Control control, Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptInclude(class System.Web.UI.Control control, class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptInclude(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptInclude(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Controllo che registra il file di script client.</param>
        <param name="type">Tipo del file di script client. Questo parametro viene in genere specificato usando l'operatore typeof (C#) o l'operatore GetType (Visual Basic) per recuperare il tipo del controllo che sta registrando lo script.</param>
        <param name="key">Identificatore univoco per il file di script.</param>
        <param name="url">URL del file di script.</param>
        <summary>Registra un file di script client con il controllo <see cref="T:System.Web.UI.ScriptManager" /> da usare con un controllo compreso in un controllo <see cref="T:System.Web.UI.UpdatePanel" /> e quindi aggiunge un riferimento al file di script alla pagina.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> metodo per registrare un file di script client per una pagina o parte di una pagina che fa parte di aggiornamenti parziali della pagina. File di script client che vengono registrati tramite questo metodo vengono inviati alla pagina solo quando il `control` rappresenta un controllo compreso in un <xref:System.Web.UI.UpdatePanel> controllo che viene aggiornato. Per registrare un file di script ogni volta che si verifica un postback asincrono, utilizzare il <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%29> overload di questo metodo.  
  
 Se si desidera registrare un blocco di script che non riguardano gli aggiornamenti a pagina parziale, se si desidera registrare il blocco di script solo una volta durante il rendering della pagina iniziale, utilizzare il <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> metodo la <xref:System.Web.UI.ClientScriptManager> classe. È possibile ottenere un riferimento al <xref:System.Web.UI.ClientScriptManager> dall'oggetto di <xref:System.Web.UI.Page.ClientScript%2A> proprietà della pagina.  
  
 Il <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> metodo registra un file di script client nella pagina eseguendo il rendering di un `script` elemento il cui tag di apertura contiene un `src` attributo. Il `url` parametro viene utilizzato per impostare il `src` attributo. Per risolvere gli URL, utilizzare il <xref:System.Web.UI.Control.ResolveClientUrl%2A> metodo. Questo metodo utilizza il contesto dell'URL che viene chiamato per risolvere il percorso.  
  
 Sia il <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> e <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> metodi di eseguire il rendering dei file di script nel browser. Se uno script con lo stesso tipo e chiave (per un file di script) o lo stesso tipo e nome di risorsa (per una risorsa incorporata) è già stato eseguito, lo script non viene eseguito nuovamente.  
  
   
  
## Examples  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterClientScriptInclude#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptInclude/CS/ScriptManager_RegisterClientScriptIncludeCS.aspx#1)]  
  
 [!code-javascript[System.Web.UI.ScriptManager.RegisterClientScriptInclude#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptInclude/CS/scripts/script_alertdiv.js#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il file di script client <paramref name="type" /> è <see langword="null" />.  \- o -  Il controllo che registra il file di script è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il controllo che registra il file di script non è presente nella struttura ad albero dei controlli della pagina.  \- o -  <paramref name="url" /> è <see langword="null" />.  \- o -  <paramref name="url" /> è vuoto.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptInclude(System.Web.UI.Page,System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptInclude (System.Web.UI.Page page, Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptInclude(class System.Web.UI.Page page, class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptInclude(System.Web.UI.Page,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptInclude(System::Web::UI::Page ^ page, Type ^ type, System::String ^ key, System::String ^ url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Oggetto pagina che registra il file di script client.</param>
        <param name="type">Tipo del file di script client. Questo parametro viene in genere specificato usando l'operatore typeof (C#) o l'operatore GetType (Visual Basic) per recuperare il tipo del controllo che sta registrando lo script.</param>
        <param name="key">Identificatore univoco per il file di script.</param>
        <param name="url">URL del file di script.</param>
        <summary>Registra lo script client con il controllo <see cref="T:System.Web.UI.ScriptManager" /> ogni volta che si verifica un postback asincrono e quindi aggiunge un riferimento al file di script alla pagina.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si registra un file di script con questo metodo, lo script viene eseguito ogni volta che si verifica un postback asincrono. Per registrare un file di script per un controllo compreso in un <xref:System.Web.UI.UpdatePanel> controllare in modo da registrare lo script solo quando il <xref:System.Web.UI.UpdatePanel> controllo verrà aggiornato, usare il <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%29> overload di questo metodo.  
  
 Se si desidera registrare un blocco di script che non riguardano gli aggiornamenti a pagina parziale, se si desidera registrare il blocco di script solo una volta durante il rendering della pagina iniziale, utilizzare il <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> metodo la <xref:System.Web.UI.ClientScriptManager> classe. È possibile ottenere un riferimento al <xref:System.Web.UI.ClientScriptManager> dall'oggetto di <xref:System.Web.UI.Page.ClientScript%2A> proprietà della pagina.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il file di script client <paramref name="type" /> è <see langword="null" />.  \- o -  La pagina che registra il file di script è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="url" /> è <see langword="null" />.  \- o -  <paramref name="url" /> è vuoto.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptResource">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registra lo script client incorporato in un assembly con il controllo <see cref="T:System.Web.UI.ScriptManager" /> da usare con un controllo che partecipa al rendering parziale della pagina.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptResource (System.Web.UI.Control control, Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptResource(class System.Web.UI.Control control, class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Control,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptResource(System::Web::UI::Control ^ control, Type ^ type, System::String ^ resourceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Controllo che registra lo script.</param>
        <param name="type">Tipo dello script client. Questo parametro viene in genere specificato usando l'operatore typeof (C#) o l'operatore GetType (Visual Basic) per recuperare il tipo del controllo che sta registrando lo script.</param>
        <param name="resourceName">Identificatore per la risorsa.</param>
        <summary>Registra lo script client incorporato in un assembly con il controllo <see cref="T:System.Web.UI.ScriptManager" /> da usare con un controllo che partecipa al rendering parziale della pagina.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> metodo per registrare uno script che è compatibile con il rendering parziale della pagina e che non ha alcuna dipendenza di Microsoft Ajax Library. Le risorse di script che vengono registrate tramite questo metodo vengono registrate solo quando `control` rappresenta un controllo compreso in un <xref:System.Web.UI.UpdatePanel> controllo che viene aggiornato. Per registrare uno script ogni volta che si verifica un postback asincrono, utilizzare il <xref:System.Web.UI.ScriptManager.RegisterStartupScript%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> overload di questo metodo.  
  
 Se si desidera registrare un blocco di script che non riguardano gli aggiornamenti a pagina parziale, se si desidera registrare il blocco di script solo una volta durante il rendering della pagina iniziale, utilizzare il <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> metodo la <xref:System.Web.UI.ClientScriptManager> classe. È possibile ottenere un riferimento al <xref:System.Web.UI.ClientScriptManager> dall'oggetto di <xref:System.Web.UI.Page.ClientScript%2A> proprietà della pagina.  
  
 Il <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> metodo viene utilizzato durante l'accesso alle risorse da assembly tramite un gestore HTTP. Questo metodo include il contenuto dell'URL della risorsa in un `script` elemento.  
  
 Sia il <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> e <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> file di script di metodo carico nel browser. Se uno script con lo stesso tipo e chiave (per un file di script) o lo stesso tipo e nome di risorsa (per una risorsa incorporata) è già caricato, lo script non verrà ricaricato.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La risorsa client <paramref name="type" /> è <see langword="null" />.  \- o -  Il controllo che registra lo script è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il controllo che registra lo script non è presente nella struttura ad albero dei controlli della pagina.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Page,System.Type,System.String)" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptResource (System.Web.UI.Page page, Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptResource(class System.Web.UI.Page page, class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Page,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptResource(System::Web::UI::Page ^ page, Type ^ type, System::String ^ resourceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Oggetto pagina che registra lo script.</param>
        <param name="type">Tipo dello script client. Questo parametro viene in genere specificato usando l'operatore typeof (C#) o l'operatore GetType (Visual Basic) per recuperare il tipo del controllo che sta registrando lo script.</param>
        <param name="resourceName">Identificatore per la risorsa.</param>
        <summary>Registra un file di script client incorporato in un assembly con il controllo <see cref="T:System.Web.UI.ScriptManager" /> ogni volta che si verifica un postback asincrono.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si registra un file di script con questo metodo, lo script viene eseguito ogni volta che si verifica un postback asincrono. Per registrare uno script per un controllo compreso in un <xref:System.Web.UI.UpdatePanel> controllare in modo che lo script viene registrato solo quando il <xref:System.Web.UI.UpdatePanel> controllo verrà aggiornato, usare il <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%29> overload di questo metodo.  
  
 Se si desidera registrare un blocco di script che non riguardano gli aggiornamenti a pagina parziale, se si desidera registrare il blocco di script solo una volta durante il rendering della pagina iniziale, utilizzare il <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> metodo la <xref:System.Web.UI.ClientScriptManager> classe. È possibile ottenere un riferimento al <xref:System.Web.UI.ClientScriptManager> dall'oggetto di <xref:System.Web.UI.Page.ClientScript%2A> proprietà della pagina.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La risorsa client <paramref name="type" /> è <see langword="null" />.  \- o -  La pagina che registra lo script è <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Control,System.Type,System.String)" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterDataItem">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Invia dati personalizzati ai controlli durante il rendering parziale della pagina.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterDataItem">
      <MemberSignature Language="C#" Value="public void RegisterDataItem (System.Web.UI.Control control, string dataItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDataItem(class System.Web.UI.Control control, string dataItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterDataItem(System::Web::UI::Control ^ control, System::String ^ dataItem);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="dataItem" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Controllo che riceve i dati.</param>
        <param name="dataItem">Dati inviati al controllo.</param>
        <summary>Invia dati personalizzati a un controllo durante il rendering parziale della pagina.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> metodo per inviare dati dal server al client durante i postback asincroni, indipendentemente dal fatto che il controllo che riceve i dati all'interno di un <xref:System.Web.UI.UpdatePanel> controllo.  
  
 Il <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> metodo può essere chiamato solo durante un postback asincrono. Per determinare se un postback asincrono, utilizzare il <xref:System.Web.UI.ScriptManager.IsInAsyncPostBack%2A> proprietà. Questo metodo chiama l'overload che accetta un parametro denominato `isJsonSerialized` che è impostato su `false`. Quando il `isJsonSerialized` parametro è impostato su `false`, la stringa non è serializzata come JavaScript Object Notation (JSON). Per ulteriori informazioni sul formato JSON, vedere il [Introduzione a JSON](http://go.microsoft.com/fwlink/?LinkId=77297) sito Web.  
  
 Gli elementi di dati che sono registrati con il <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> metodo accessibili in script client durante e gli eventi dell'oggetto. Quando si gestiscono questi eventi, i dati personalizzati vengono passati in un oggetto argomento dell'evento. Ad esempio, se si fornisce un gestore per l'evento, i dati personalizzati viene passati nella classe, che espone una proprietà.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come inviare dati a due <xref:System.Web.UI.WebControls.Label> controlli in una pagina durante un postback asincrono. Il <xref:System.Web.UI.WebControls.Label> controlli non sono compresi in un <xref:System.Web.UI.UpdatePanel> controllo.  
  
> [!NOTE]
>  I dati inviati in questo esempio sono solo a scopo illustrativo. In un'applicazione reale, si utilizzerebbe il <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> metodo per inviare dati personalizzati dal server.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterDataItem#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/CS/ScriptManagerRegisterDataItemCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterDataItem#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/VB/ScriptManagerRegisterDataItemVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Il metodo <see cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" /> viene chiamato nel corso di un postback.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="dataItem" /> è già registrato per <paramref name="control" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterDataItem">
      <MemberSignature Language="C#" Value="public void RegisterDataItem (System.Web.UI.Control control, string dataItem, bool isJsonSerialized);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDataItem(class System.Web.UI.Control control, string dataItem, bool isJsonSerialized) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterDataItem(System::Web::UI::Control ^ control, System::String ^ dataItem, bool isJsonSerialized);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="dataItem" Type="System.String" />
        <Parameter Name="isJsonSerialized" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Controllo pagina che riceve i dati.</param>
        <param name="dataItem">Dati inviati al controllo.</param>
        <param name="isJsonSerialized">
          <see langword="true" /> per indicare che <c>dataItem</c> è serializzato come JSON; in caso contrario, <see langword="false" />.</param>
        <summary>Invia dati personalizzati a un controllo durante il rendering parziale della pagina e indica se i dati sono in formato JavaScript Object Notation (JSON).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> metodo per inviare dati dal server al client durante i postback asincroni, indipendentemente dal fatto che il controllo che riceve i dati all'interno di un <xref:System.Web.UI.UpdatePanel> controllo.  
  
 Se il `dataItem` parametro che si registra per `control` non è serializzato come JSON, impostare il `isJsonSerialized` parametro `false`. Questo evita la necessità di utilizzare la funzione per ogni stringa inviata al client. Per ulteriori informazioni sul formato JSON, vedere il [Introduzione a JSON](http://go.microsoft.com/fwlink/?LinkId=77297) sito Web.  
  
 Il <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> metodo può essere chiamato solo durante un postback asincrono. Per determinare se un postback asincrono, utilizzare il <xref:System.Web.UI.ScriptManager.IsInAsyncPostBack%2A> proprietà.  
  
 Gli elementi di dati che vengono registrati utilizzando il <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> metodo accessibili in script client durante e gli eventi dell'oggetto. Quando si gestiscono questi eventi, i dati personalizzati vengono passati in un oggetto argomento dell'evento. Ad esempio, se si fornisce un gestore per l'evento, i dati personalizzati viene passati nella classe, che espone una proprietà.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come inviare dati a due <xref:System.Web.UI.WebControls.Label> controlli in una pagina durante un postback asincrono. Il <xref:System.Web.UI.WebControls.Label> controlli non sono compresi in un <xref:System.Web.UI.UpdatePanel> controllo. Questo esempio viene illustrato l'overload che non accetta il `isJsonSerialized` parametro. In caso contrario, la procedura per il recupero della proprietà dell'oggetto è lo stesso come se non è stato utilizzato l'overload.  
  
> [!NOTE]
>  I dati inviati in questo esempio sono solo a scopo illustrativo. In un'applicazione reale, si utilizzerebbe il <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> metodo per inviare dati personalizzati dal server. Ad esempio, è possibile utilizzare l'elemento di dati per l'invio di informazioni sulla possibilità di nascondere o mostrare elementi client che non sono compresi in un <xref:System.Web.UI.UpdatePanel> controllo.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterDataItem#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/CS/ScriptManagerRegisterDataItemCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterDataItem#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/VB/ScriptManagerRegisterDataItemVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Il metodo <see cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" /> viene chiamato nel corso di un postback.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="dataItem" /> è già registrato per <paramref name="control" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterDispose">
      <MemberSignature Language="C#" Value="public void RegisterDispose (System.Web.UI.Control control, string disposeScript);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDispose(class System.Web.UI.Control control, string disposeScript) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterDispose(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterDispose(System::Web::UI::Control ^ control, System::String ^ disposeScript);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="disposeScript" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Controllo a cui è destinato lo script <see langword="dispose" />.</param>
        <param name="disposeScript">Script <see langword="dispose" />.</param>
        <summary>Registra uno script <see langword="dispose" /> per un controllo compreso in un controllo <see cref="T:System.Web.UI.UpdatePanel" />. Lo script viene eseguito quando il controllo <see cref="T:System.Web.UI.UpdatePanel" /> viene aggiornato o eliminato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> metodo registrare `dispose` script per i controlli presenti all'interno di un <xref:System.Web.UI.UpdatePanel> controllo. Durante i postback asincroni, <xref:System.Web.UI.UpdatePanel> controlli è possibile aggiornare, eliminare o creati. Quando un pannello viene aggiornato o eliminato, qualsiasi `dispose` gli script registrati per i controlli che si trovano all'interno di <xref:System.Web.UI.UpdatePanel> vengono chiamati. Negli scenari di sviluppo di pagina tipiche, non è necessario chiamare il <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> metodo.  
  
 Il <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> metodo è destinato all'utilizzo dagli sviluppatori di controlli per registrare uno script o creare controlli che ereditano dal <xref:System.Web.UI.IScriptControl> interfaccia. Ad esempio, è possibile utilizzare un `dispose` dello script se si sviluppa un controllo client utilizzando la composizione. Nel controllo, implementano <xref:System.Web.UI.IScriptControl> ed eseguire il rendering di singoli controlli. Si registra il `dispose` metodo di qualsiasi elemento che non corrisponde a un componente client definito, ad esempio `Sys.TextBox`. Se il controllo personalizzato compone elementi che corrispondono ai componenti client in Microsoft Ajax Library, non è necessario registrare un `dispose` uno script, in quanto `dispose` viene chiamato automaticamente. Pertanto, utilizzare il <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> metodo per i componenti client che fanno parte di Microsoft Ajax Library e che dispongono di liberare risorse quando un componente non viene più utilizzato.  
  
 Il <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> metodo può essere chiamato più volte per un controllo. Vengono aggregati più script. L'ordine degli script di eliminazione corrisponde all'ordine in cui gli script sono stati registrati.  
  
 Se si registra un `dispose` script per un controllo che non si trova in un <xref:System.Web.UI.UpdatePanel> controllo, viene generata un'eccezione. Il `dispose` script viene chiamato tra il e gli eventi della classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> è <see langword="null" />.  \- o -  <paramref name="disposeScript" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" />non viene trovato nella pagina.  \- o -  <paramref name="control" /> non è compreso in un controllo <see cref="T:System.Web.UI.UpdatePanel" />.</exception>
        <altmember cref="T:System.Web.UI.IScriptControl" />
      </Docs>
    </Member>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public static void RegisterExpandoAttribute (System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterExpandoAttribute(class System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterExpandoAttribute(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterExpandoAttribute(System::Web::UI::Control ^ control, System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue, bool encode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Controllo che registra l'attributo expando.</param>
        <param name="controlId">Controllo che contiene l'attributo personalizzato nella pagina.</param>
        <param name="attributeName">Nome dell'attributo personalizzato da registrare.</param>
        <param name="attributeValue">Valore dell'attributo personalizzato.</param>
        <param name="encode">
          <see langword="true" /> per codificare l'attributo personalizzato in corso di registrazione; in caso contrario, <see langword="false" />.</param>
        <summary>Registra una coppia nome/valore con il controllo <see cref="T:System.Web.UI.ScriptManager" /> come attributo personalizzato (expando) di un controllo specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A> metodo per registrare una proprietà personalizzati (expando) per un controllo che è compatibile con il rendering parziale della pagina e che non ha alcuna dipendenza di Microsoft Ajax Library.  
  
 Il <xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A> metodo registra una coppia nome/valore come attributo personalizzato per il controllo specificato. La proprietà è impostata in modo dinamico da ECMAScript (JavaScript) per mantenere la compatibilità XHTML per il rendering del markup del controllo. Impostare `encode` per `true` se è necessario eseguire l'escape di caratteri nel valore della proprietà dinamica.  
  
 Se il controllo a cui verrà aggiunto alla proprietà dinamica non viene trovato, verrà generato un errore di script.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> non si trova nella struttura ad albero dei controllo della pagina.  \- o -  <paramref name="controlId" /> è <see langword="null" />.  \- o -  <paramref name="controlId" /> è vuoto.  \- o -  <paramref name="attributeName" /> è <see langword="null" />.  \- o -  <paramref name="attributeName" /> è vuoto.  \- o -  <paramref name="attributeName" /> è già registrato.</exception>
        <altmember cref="T:System.Web.UI.ClientScriptManager" />
      </Docs>
    </Member>
    <Member MemberName="RegisterExtenderControl&lt;TExtenderControl&gt;">
      <MemberSignature Language="C#" Value="public void RegisterExtenderControl&lt;TExtenderControl&gt; (TExtenderControl extenderControl, System.Web.UI.Control targetControl) where TExtenderControl : System.Web.UI.Control, System.Web.UI.IExtenderControl;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterExtenderControl&lt;(class System.Web.UI.Control, class System.Web.UI.IExtenderControl) TExtenderControl&gt;(!!TExtenderControl extenderControl, class System.Web.UI.Control targetControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterExtenderControl``1(``0,System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterExtenderControl(Of TExtenderControl As {Control, IExtenderControl}) (extenderControl As TExtenderControl, targetControl As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TExtenderControl&gt;&#xA; where TExtenderControl : System::Web::UI::Control, System::Web::UI::IExtenderControl virtual void RegisterExtenderControl(TExtenderControl extenderControl, System::Web::UI::Control ^ targetControl);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterExtenderControl``1(``0,System.Web.UI.Control)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExtenderControl">
          <Constraints>
            <BaseTypeName>System.Web.UI.Control</BaseTypeName>
            <InterfaceName>System.Web.UI.IExtenderControl</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="extenderControl" Type="TExtenderControl" />
        <Parameter Name="targetControl" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <typeparam name="TExtenderControl">Controllo che implementa l'interfaccia <see cref="T:System.Web.UI.IExtenderControl" />.</typeparam>
        <param name="extenderControl">Controllo Extender da registrare.</param>
        <param name="targetControl">Controllo Script esteso dal controllo Extender.</param>
        <summary>Registra un controllo Extender con l'istanza <see cref="T:System.Web.UI.ScriptManager" /> corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene principalmente utilizzato dagli sviluppatori di controlli. Chiamare il <xref:System.Web.UI.ScriptManager.RegisterExtenderControl%2A> metodo da un controllo extender Ajax ASP.NET personalizzato durante il relativo `onInit` gestore eventi per registrare il controllo con la pagina. Per partecipare al rendering parziale della pagina deve essere registrato un controllo extender Ajax ASP.NET.  
  
 Il <xref:System.Web.UI.ScriptManager.RegisterExtenderControl%2A> metodo aggiunge un elenco interno dei controlli extender e dei controlli di script di destinazione che estendono il controllo extender specificato. Questo elenco viene elaborato durante la <xref:System.Web.UI.Control.PreRender> evento.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="extenderControl" /> è <see langword="null" />.  \- o -  <paramref name="targetControl" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterHiddenField">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registra un campo nascosto.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public static void RegisterHiddenField (System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterHiddenField(class System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Control,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterHiddenField(System::Web::UI::Control ^ control, System::String ^ hiddenFieldName, System::String ^ hiddenFieldInitialValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Controllo che registra il campo nascosto.</param>
        <param name="hiddenFieldName">Nome del campo nascosto da registrare.</param>
        <param name="hiddenFieldInitialValue">Valore iniziale del campo nascosto.</param>
        <summary>Registra un campo nascosto con il controllo <see cref="T:System.Web.UI.ScriptManager" /> per un controllo compreso in un controllo <see cref="T:System.Web.UI.UpdatePanel" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A> metodo per registrare un campo nascosto che è compatibile con il rendering parziale della pagina e che non ha alcuna dipendenza di Microsoft Ajax Library. Questo metodo registra il campo nascosto quando il controllo che registra il campo all'interno di un <xref:System.Web.UI.UpdatePanel> controllo che viene aggiornato. Per registrare un campo nascosto ogni volta che si verifica un postback asincrono, utilizzare il <xref:System.Web.UI.ScriptManager.RegisterHiddenField%28System.Web.UI.Page%2CSystem.String%2CSystem.String%29> overload di questo metodo.  
  
 Se si desidera registrare un campo nascosto che non riguardano gli aggiornamenti a pagina parziale, se si desidera registrare il campo nascosto solo una volta durante il rendering della pagina iniziale, utilizzare il <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> metodo la <xref:System.Web.UI.ClientScriptManager> classe. È possibile ottenere un riferimento al <xref:System.Web.UI.ClientScriptManager> dall'oggetto di <xref:System.Web.UI.Page.ClientScript%2A> proprietà della pagina.  
  
 Il <xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A> metodo crea nascosta `input` elemento nella pagina HTML di cui è stato eseguito rendering.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> è <see langword="null" />.  \- o -  <paramref name="hiddenFieldName" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> non si trova nella struttura ad albero dei controllo della pagina.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Page,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public static void RegisterHiddenField (System.Web.UI.Page page, string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterHiddenField(class System.Web.UI.Page page, string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Page,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterHiddenField(System::Web::UI::Page ^ page, System::String ^ hiddenFieldName, System::String ^ hiddenFieldInitialValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Oggetto pagina che registra il campo nascosto.</param>
        <param name="hiddenFieldName">Nome del campo nascosto da registrare.</param>
        <param name="hiddenFieldInitialValue">Valore iniziale del campo nascosto.</param>
        <summary>Registra un campo nascosto con il controllo <see cref="T:System.Web.UI.ScriptManager" /> durante ogni postback asincrono.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A> metodo per registrare un campo nascosto che è compatibile con il rendering parziale della pagina e che non ha alcuna dipendenza di Microsoft Ajax Library. Questo metodo registra il campo nascosto ogni volta che si verifica un postback asincrono. Per registrare un campo nascosto per un controllo compreso in un <xref:System.Web.UI.UpdatePanel> in modo che il campo viene registrato solo quando viene aggiornato il pannello di controllo, utilizzare il <xref:System.Web.UI.ScriptManager.RegisterHiddenField%28System.Web.UI.Control%2CSystem.String%2CSystem.String%29> overload di questo metodo.  
  
 Se si desidera registrare un campo nascosto che non riguardano gli aggiornamenti a pagina parziale, se si desidera registrare il campo nascosto solo una volta durante il rendering della pagina iniziale, utilizzare il <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> metodo la <xref:System.Web.UI.ClientScriptManager> classe. È possibile ottenere un riferimento al <xref:System.Web.UI.ClientScriptManager> dall'oggetto di <xref:System.Web.UI.Page.ClientScript%2A> proprietà della pagina.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="page" /> è <see langword="null" />.  \- o -  <paramref name="hiddenFieldName" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Control,System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterNamedClientScriptResource">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registra lo script client incorporato in un assembly con il controllo <see cref="T:System.Web.UI.ScriptManager" /> da usare con un controllo che partecipa al rendering parziale della pagina.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterNamedClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterNamedClientScriptResource (System.Web.UI.Control control, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterNamedClientScriptResource(class System.Web.UI.Control control, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterNamedClientScriptResource(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterNamedClientScriptResource(System::Web::UI::Control ^ control, System::String ^ resourceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Controllo che registra lo script.</param>
        <param name="resourceName">Identificatore per la risorsa.</param>
        <summary>Registra lo script client incorporato in un assembly con il controllo <see cref="T:System.Web.UI.ScriptManager" /> da usare con un controllo che partecipa al rendering parziale della pagina.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterNamedClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterNamedClientScriptResource (System.Web.UI.Page page, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterNamedClientScriptResource(class System.Web.UI.Page page, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterNamedClientScriptResource(System.Web.UI.Page,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterNamedClientScriptResource(System::Web::UI::Page ^ page, System::String ^ resourceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Oggetto pagina che registra lo script.</param>
        <param name="resourceName">Identificatore per la risorsa.</param>
        <summary>Registra lo script client incorporato in un assembly con il controllo <see cref="T:System.Web.UI.ScriptManager" /> da usare con un controllo che partecipa al rendering parziale della pagina.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterOnSubmitStatement">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registra il codice ECMAScript (JavaScript) eseguito quando il form viene inviato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public static void RegisterOnSubmitStatement (System.Web.UI.Control control, Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterOnSubmitStatement(class System.Web.UI.Control control, class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterOnSubmitStatement(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Controllo che registra l'istruzione <see langword="onsubmit" />.</param>
        <param name="type">Tipo dell'istruzione dello script client. Questo parametro viene in genere specificato usando l'operatore typeof (C#) o l'operatore GetType (Visual Basic) per recuperare il tipo del controllo che sta registrando lo script.</param>
        <param name="key">Identificatore univoco per l'istruzione dello script.</param>
        <param name="script">Script da registrare.</param>
        <summary>Registra il codice ECMAScript (JavaScript) con il controllo <see cref="T:System.Web.UI.ScriptManager" /> per un controllo usato con un controllo <see cref="T:System.Web.UI.UpdatePanel" /> eseguito quando il form viene inviato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A> aggiunge uno script che viene eseguito prima dell'invio del form, che consente di modificare l'invio o annullare l'operazione.  
  
 Utilizzare la <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A> metodo per eseguire il rendering di un `onsubmit` istruzione compatibile con il rendering parziale della pagina e che non ha alcuna dipendenza di Microsoft Ajax Library. Il codice JavaScript che è registrato con questo metodo viene inviato alla pagina solo quando il controllo che registra l'istruzione all'interno di un <xref:System.Web.UI.UpdatePanel> controllo che viene aggiornato. Per registrare il codice con ogni postback asincrono, utilizzare il <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%29> overload di questo metodo.  
  
 Se si desidera registrare il codice JavaScript che non riguardano gli aggiornamenti a pagina parziale, se si desidera registrare il codice solo una volta durante il rendering della pagina iniziale, utilizzare il <xref:System.Web.UI.Page.RegisterOnSubmitStatement%2A> metodo la <xref:System.Web.UI.ClientScriptManager> classe. È possibile ottenere un riferimento al <xref:System.Web.UI.ClientScriptManager> dall'oggetto di <xref:System.Web.UI.Page.ClientScript%2A> proprietà della pagina.  
  
 Il *script* parametro il <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A> metodo può contenere più comandi di script che sono delimitati da punti e virgola (;).  
  
 Per ulteriori informazioni sui moduli HTML e `onsubmit` eventi, vedere il [sito Web World Wide Web Consortium (W3C)](http://go.microsoft.com/fwlink/?linkid=37125).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> è <see langword="null" />.  \- o -  <paramref name="type" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> non si trova nella struttura ad albero dei controllo della pagina.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Page,System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public static void RegisterOnSubmitStatement (System.Web.UI.Page page, Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterOnSubmitStatement(class System.Web.UI.Page page, class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Page,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterOnSubmitStatement(System::Web::UI::Page ^ page, Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Oggetto pagina che registra l'istruzione <see langword="onsubmit" />.</param>
        <param name="type">Tipo dell'istruzione dello script client. Questo parametro viene in genere specificato usando l'operatore typeof (C#) o l'operatore GetType (Visual Basic) per recuperare il tipo del controllo che sta registrando lo script.</param>
        <param name="key">Identificatore univoco per l'istruzione dello script.</param>
        <param name="script">Script da registrare.</param>
        <summary>Registra il codice ECMAScript (JavaScript) con il controllo <see cref="T:System.Web.UI.ScriptManager" /> per un controllo usato con un controllo <see cref="T:System.Web.UI.UpdatePanel" /> eseguito quando il form viene inviato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La registrazione di codice JavaScript con questo metodo, lo script da includere ogni volta che si verifica un postback asincrono.  
  
> [!NOTE]
>  Codice da qualsiasi postback asincroni precedenti non viene rimosso. I nuovi postback asincroni aggiungono il codice a qualsiasi codice esistente per il `onsubmit` istruzione.  
  
 Per registrare il codice per un controllo compreso in un <xref:System.Web.UI.UpdatePanel> controllare in modo che il codice viene registrato solo quando il <xref:System.Web.UI.UpdatePanel> controllo verrà aggiornato, usare il <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%29> overload di questo metodo.  
  
 Se si desidera registrare il codice JavaScript che non riguardano gli aggiornamenti a pagina parziale, se si desidera registrare il codice solo una volta durante il rendering della pagina iniziale, utilizzare il <xref:System.Web.UI.Page.RegisterOnSubmitStatement%2A> metodo la <xref:System.Web.UI.ClientScriptManager> classe. È possibile ottenere un riferimento al <xref:System.Web.UI.ClientScriptManager> dall'oggetto di <xref:System.Web.UI.Page.ClientScript%2A> proprietà della pagina.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="page" /> è <see langword="null" />.  \- o -  <paramref name="type" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Control,System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterPostBackControl">
      <MemberSignature Language="C#" Value="public void RegisterPostBackControl (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterPostBackControl(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterPostBackControl(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterPostBackControl(System::Web::UI::Control ^ control);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterPostBackControl(System.Web.UI.Control)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Controllo da registrare per il postback.</param>
        <summary>Registra un controllo come trigger per un postback. Questo metodo viene usato per i controlli di postback all'interno di un controllo <see cref="T:System.Web.UI.UpdatePanel" /> che altrimenti eseguirebbe postback asincroni.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.ScriptManager.RegisterPostBackControl%2A> metodo per registrare i controlli di postback all'interno di un <xref:System.Web.UI.UpdatePanel> controllo come trigger. I controlli che vengono registrati utilizzando questo metodo per aggiornano un'intera pagina anziché aggiornare solo il <xref:System.Web.UI.UpdatePanel> contenuto del controllo. Registrazione di un controllo di postback con questo metodo all'esterno di un <xref:System.Web.UI.UpdatePanel> controllo non ha alcun effetto perché per impostazione predefinita questi controlli non eseguirebbe postback asincroni.  
  
 È possibile aggiungere il trigger in modo dichiarativo utilizzando la `Triggers` elemento il <xref:System.Web.UI.UpdatePanel> controllo. In Visual Studio, usare la finestra di progettazione **UpdatePanelTrigger Editor della raccolta** finestra di dialogo.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.UpdatePanel.Triggers" />
      </Docs>
    </Member>
    <Member MemberName="RegisterScriptControl&lt;TScriptControl&gt;">
      <MemberSignature Language="C#" Value="public void RegisterScriptControl&lt;TScriptControl&gt; (TScriptControl scriptControl) where TScriptControl : System.Web.UI.Control, System.Web.UI.IScriptControl;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScriptControl&lt;(class System.Web.UI.Control, class System.Web.UI.IScriptControl) TScriptControl&gt;(!!TScriptControl scriptControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterScriptControl``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterScriptControl(Of TScriptControl As {Control, IScriptControl}) (scriptControl As TScriptControl)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TScriptControl&gt;&#xA; where TScriptControl : System::Web::UI::Control, System::Web::UI::IScriptControl virtual void RegisterScriptControl(TScriptControl scriptControl);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterScriptControl``1(``0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TScriptControl">
          <Constraints>
            <BaseTypeName>System.Web.UI.Control</BaseTypeName>
            <InterfaceName>System.Web.UI.IScriptControl</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="scriptControl" Type="TScriptControl" />
      </Parameters>
      <Docs>
        <typeparam name="TScriptControl">Controllo che implementa l'interfaccia <see cref="T:System.Web.UI.IScriptControl" />.</typeparam>
        <param name="scriptControl">Controllo Script da registrare.</param>
        <summary>Registra un controllo Script con l'istanza <see cref="T:System.Web.UI.ScriptManager" /> corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene principalmente utilizzato dagli sviluppatori di controlli. Chiamare il <xref:System.Web.UI.ScriptManager.RegisterScriptControl%2A> metodo da un controllo script Ajax ASP.NET personalizzato durante il relativo `onInit` gestore eventi per registrare il controllo con la pagina. Per partecipare al rendering parziale della pagina deve essere registrato un controllo script Ajax ASP.NET.  
  
 Il <xref:System.Web.UI.ScriptManager.RegisterScriptControl%2A> metodo aggiunge il controllo extender specificato a un elenco interno dei controlli di script che viene elaborato durante la <xref:System.Web.UI.Control.PreRender> evento.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scriptControl" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterScriptDescriptors">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Istruisce il controllo <see cref="T:System.Web.UI.ScriptManager" /> a chiamare le classi <see cref="T:System.Web.UI.ScriptControl" /> o <see cref="T:System.Web.UI.ExtenderControl" /> in modo da restituire gli script che supportano l'oggetto client che rappresenta un controllo, un componente o un comportamento client.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterScriptDescriptors">
      <MemberSignature Language="C#" Value="public void RegisterScriptDescriptors (System.Web.UI.IExtenderControl extenderControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScriptDescriptors(class System.Web.UI.IExtenderControl extenderControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IExtenderControl)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterScriptDescriptors (extenderControl As IExtenderControl)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterScriptDescriptors(System::Web::UI::IExtenderControl ^ extenderControl);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterScriptDescriptors(System.Web.UI.IExtenderControl)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extenderControl" Type="System.Web.UI.IExtenderControl" />
      </Parameters>
      <Docs>
        <param name="extenderControl">Controllo Extender per il quale saranno registrati i descrittori dello script.</param>
        <summary>Esegue la richiamata a una classe <see cref="T:System.Web.UI.ExtenderControl" /> per restituire gli script dell'istanza di cui eseguire il rendering per supportare l'oggetto client che rappresenta un controllo, un componente o un comportamento client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ExtenderControl> classe chiama il <xref:System.Web.UI.ScriptManager.RegisterScriptDescriptors%2A> metodo nel relativo <xref:System.Web.UI.Control.Render%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Se si deriva dal <see cref="T:System.Web.UI.ExtenderControl" /> classe ed eseguire l'override di <see cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" /> (metodo), ma non si chiama il metodo della classe base, è necessario chiamare il <see cref="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IExtenderControl)" /> metodo. In questo modo il <see cref="T:System.Web.UI.ScriptManager" /> controllo per eseguire il rendering gli script dell'istanza che supportano l'oggetto client che rappresenta il controllo.</para>
        </block>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterExtenderControl``1(``0,System.Web.UI.Control)" />
        <altmember cref="T:System.Web.UI.ScriptDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="RegisterScriptDescriptors">
      <MemberSignature Language="C#" Value="public void RegisterScriptDescriptors (System.Web.UI.IScriptControl scriptControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScriptDescriptors(class System.Web.UI.IScriptControl scriptControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IScriptControl)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterScriptDescriptors (scriptControl As IScriptControl)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterScriptDescriptors(System::Web::UI::IScriptControl ^ scriptControl);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterScriptDescriptors(System.Web.UI.IScriptControl)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptControl" Type="System.Web.UI.IScriptControl" />
      </Parameters>
      <Docs>
        <param name="scriptControl">Controllo Script per il quale saranno registrati i descrittori dello script.</param>
        <summary>Chiama una classe <see cref="T:System.Web.UI.ScriptControl" /> per restituire gli script dell'istanza di cui eseguire il rendering per supportare l'oggetto client che rappresenta un controllo, un componente o un comportamento client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ScriptControl> classe chiama il <xref:System.Web.UI.ScriptManager.RegisterScriptDescriptors%2A> metodo durante il relativo <xref:System.Web.UI.Control.Render%2A> evento.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Se si deriva dal <see cref="T:System.Web.UI.ScriptControl" /> classe ed eseguire l'override di <see cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" /> (metodo), ma non si chiama il metodo della classe base, è necessario chiamare il <see cref="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IScriptControl)" /> metodo. In questo modo il <see cref="T:System.Web.UI.ScriptManager" /> controllo per eseguire il rendering gli script dell'istanza che supportano l'oggetto client che rappresenta il controllo.</para>
        </block>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterScriptControl``1(``0)" />
        <altmember cref="T:System.Web.UI.ScriptDescriptor" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterStartupScript">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registra un blocco di script di avvio con il controllo <see cref="T:System.Web.UI.ScriptManager" /> e aggiunge il blocco di script alla pagina.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public static void RegisterStartupScript (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterStartupScript(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterStartupScript(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Controllo che registra il blocco di script client.</param>
        <param name="type">Tipo del blocco di script client. Questo parametro viene in genere specificato usando l'operatore typeof (C#) o l'operatore GetType (Visual Basic) per recuperare il tipo del controllo che sta registrando lo script.</param>
        <param name="key">Identificatore univoco per il blocco di script.</param>
        <param name="script">Script da registrare.</param>
        <param name="addScriptTags">
          <see langword="true" /> per includere il blocco di script nei tag <see langword="&lt;script&gt;" /> e <see langword="&lt;/script&gt;" />; in caso contrario, <see langword="false" />.</param>
        <summary>Registra un blocco di script di avvio per un controllo compreso in un controllo <see cref="T:System.Web.UI.UpdatePanel" /> usando il controllo <see cref="T:System.Web.UI.ScriptManager" /> e aggiunge il blocco di script alla pagina.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A> metodo per registrare un blocco di script di avvio per una pagina che è compatibile con il rendering parziale della pagina e che non ha alcuna dipendenza di Microsoft Ajax Library. Blocchi di script di avvio che vengono registrati tramite questo metodo vengono inviati alla pagina solo quando il controllo che registra il blocco è all'interno di un <xref:System.Web.UI.UpdatePanel> controllo che viene aggiornato. Per registrare un blocco di script di avvio ogni volta che si verifica un postback asincrono, utilizzare il <xref:System.Web.UI.ScriptManager.RegisterStartupScript%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> overload di questo metodo.  
  
 Se si desidera registrare uno script di avvio che non riguardano gli aggiornamenti a pagina parziale, se si desidera registrare lo script solo una volta durante il rendering della pagina iniziale, utilizzare il <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> metodo la <xref:System.Web.UI.ClientScriptManager> classe. È possibile ottenere un riferimento al <xref:System.Web.UI.ClientScriptManager> dall'oggetto di <xref:System.Web.UI.Page.ClientScript%2A> proprietà della pagina.  
  
 Il blocco di script che esegue il rendering di <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A> metodo viene eseguito al termine del caricamento della pagina ma prima che i client della pagina `onload` viene generato l'evento. Blocchi di script di avvio si trovano nella parte inferiore della pagina ASP.NET di cui è stato eseguito rendering immediatamente prima di `</form>` tag.  
  
 Blocchi di script di avvio che vengono registrati tramite <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A> non sono necessariamente output nello stesso ordine in cui sono registrati. Se l'ordine dei blocchi di script di avvio è importante, utilizzare un <xref:System.Text.StringBuilder> dell'oggetto per la raccolta di blocchi di script in un'unica stringa e quindi registrarli tutti come un unico script di avvio.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> è <see langword="null" />.  \- o -  <paramref name="type" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> non si trova nella struttura ad albero dei controllo della pagina.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public static void RegisterStartupScript (System.Web.UI.Page page, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterStartupScript(class System.Web.UI.Page page, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterStartupScript(System::Web::UI::Page ^ page, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="page">Oggetto pagina che registra il blocco di script client.</param>
        <param name="type">Tipo del blocco di script client. Questo parametro viene in genere specificato usando l'operatore typeof (C#) o l'operatore GetType (Visual Basic) per recuperare il tipo del controllo che sta registrando lo script.</param>
        <param name="key">Identificatore univoco per il blocco di script.</param>
        <param name="script">Script da registrare.</param>
        <param name="addScriptTags">
          <see langword="true" /> per includere il blocco di script nei tag <see langword="&lt;script&gt;" /> e <see langword="&lt;/script&gt;" />; in caso contrario, <see langword="false" />.</param>
        <summary>Registra un blocco di script di avvio per ogni postback asincrono con il controllo <see cref="T:System.Web.UI.ScriptManager" /> e aggiunge il blocco di script alla pagina.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo per registrare un blocco di script di avvio che è incluso ogni volta che si verifica un postback asincrono. Per registrare un blocco di script per un controllo compreso in un <xref:System.Web.UI.UpdatePanel> controllare in modo che il blocco di script è registrato solo quando il <xref:System.Web.UI.UpdatePanel> controllo verrà aggiornato, usare il <xref:System.Web.UI.ScriptManager.RegisterStartupScript%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> overload di questo metodo.  
  
 Se si desidera registrare uno script di avvio che non riguardano gli aggiornamenti a pagina parziale, se si desidera registrare lo script solo una volta durante il rendering della pagina iniziale, utilizzare il <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> metodo la <xref:System.Web.UI.ClientScriptManager> classe. È possibile ottenere un riferimento al <xref:System.Web.UI.ClientScriptManager> dall'oggetto di <xref:System.Web.UI.Page.ClientScript%2A> proprietà della pagina.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Oggetto che riceve il contenuto del controllo da scrivere nella pagina.</param>
        <summary>Esegue il rendering del contenuto del controllo <see cref="T:System.Web.UI.ScriptManager" /> nel browser usando l'oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene utilizzato dagli sviluppatori di controlli per estendere il <xref:System.Web.UI.ScriptManager> controllo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override di questo metodo, chiamare la base <see cref="M:System.Web.UI.ScriptManager.Render(System.Web.UI.HtmlTextWriter)" /> metodo in modo che lo script client che definisce la classe viene eseguito il rendering della pagina.</para>
        </block>
        <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="ResolveCompositeScriptReference">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.CompositeScriptReferenceEventArgs&gt; ResolveCompositeScriptReference;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.CompositeScriptReferenceEventArgs&gt; ResolveCompositeScriptReference" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.ResolveCompositeScriptReference" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ResolveCompositeScriptReference As EventHandler(Of CompositeScriptReferenceEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::CompositeScriptReferenceEventArgs ^&gt; ^ ResolveCompositeScriptReference;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.CompositeScriptReferenceEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando uno script composito viene registrato con il controllo <see cref="T:System.Web.UI.ScriptManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveScriptReference">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.ScriptReferenceEventArgs&gt; ResolveScriptReference;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.ScriptReferenceEventArgs&gt; ResolveScriptReference" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.ResolveScriptReference" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ResolveScriptReference As EventHandler(Of ScriptReferenceEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::ScriptReferenceEventArgs ^&gt; ^ ResolveScriptReference;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.ScriptReferenceEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un membro della raccolta <see cref="P:System.Web.UI.ScriptManager.Scripts" /> viene registrato con il controllo <see cref="T:System.Web.UI.ScriptManager" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene generato una volta per ogni membro del <xref:System.Web.UI.ScriptManager.Scripts%2A> insieme durante la pagina <xref:System.Web.UI.Control.PreRender> evento. Usare questo evento per eseguire eventuali aggiornamenti prima che lo script viene eseguito il rendering della pagina.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoleService">
      <MemberSignature Language="C#" Value="public System.Web.UI.RoleServiceManager RoleService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.RoleServiceManager RoleService" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.RoleService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RoleService As RoleServiceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::RoleServiceManager ^ RoleService { System::Web::UI::RoleServiceManager ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.RoleServiceManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Web.UI.RoleServiceManager" /> associato all'istanza di <see cref="T:System.Web.UI.ScriptManager" /> corrente.</summary>
        <value>Oggetto <see cref="T:System.Web.UI.RoleServiceManager" /> per l'istanza di <see cref="T:System.Web.UI.ScriptManager" /> corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.RoleServiceManager> oggetto restituito da questa proprietà rappresenta il servizio di ruolo che è registrato con la pagina. Il servizio di ruolo può essere definito nel <xref:System.Web.UI.ScriptManager> controllo o in un oggetto associato <xref:System.Web.UI.ScriptManagerProxy> controllo. È possibile utilizzare il servizio di ruolo ASP.NET o utilizzare un servizio di ruolo personalizzata. È possibile aggiungere il servizio personalizzato nel markup includendo un `RoleService` elemento all'interno di `asp:ScriptManager` elemento della pagina, come illustrato nell'esempio seguente:  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <RoleService Path="MyRoleService.asmx" LoadRoles="True" />  
</asp:ScriptManager>  
```  
  
 È possibile configurare anche a livello di codice il <xref:System.Web.UI.RoleServiceManager> oggetto. I servizi vengono registrati con il <xref:System.Web.UI.ScriptManager> controllo durante la pagina <xref:System.Web.UI.Control.PreRender> fase del ciclo di vita.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScriptMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.ScriptMode ScriptMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ScriptMode ScriptMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ScriptMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ScriptMode As ScriptMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ScriptMode ScriptMode { System::Web::UI::ScriptMode get(); void set(System::Web::UI::ScriptMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che specifica se viene eseguito il rendering delle versioni di debug o finali delle librerie di script client.</summary>
        <value>Valore di enumerazione che indica la modalità corrente. Il valore predefinito è <see cref="F:System.Web.UI.ScriptMode.Auto" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ScriptManager.ScriptMode%2A> proprietà specifica se il <xref:System.Web.UI.ScriptManager> controllo deve eseguire il rendering di debug o rilascio di versioni di librerie di script client. Questo valore può essere sostituito dai valori impostati nel file di configurazione e nell'istruzione page.  
  
 Nella tabella seguente sono elencati i valori validi per questa proprietà.  
  
|Valore|Definizione|  
|-----------|----------------|  
|<xref:System.Web.UI.ScriptMode.Auto>|Versioni di debug di script client vengono utilizzate le librerie nella pagina Web quando il `retail` attributo dell'elemento di configurazione è impostato su `false`. In caso contrario, vengono utilizzate le versioni di rilascio delle librerie di script client.|  
|<xref:System.Web.UI.ScriptMode.Inherit>|Quando applicato al <xref:System.Web.UI.ScriptManager.ScriptMode%2A> proprietà del <xref:System.Web.UI.ScriptManager> dell'oggetto, questo valore è identico <xref:System.Web.UI.ScriptMode.Auto>.|  
|<xref:System.Web.UI.ScriptMode.Debug>|Versioni di debug di script client librerie sono utilizzate nella pagina Web, a meno che il `retail` attributo dell'elemento di configurazione è impostato su `true`.|  
|<xref:System.Web.UI.ScriptMode.Release>|Versioni di librerie di script client vengono utilizzate nella pagina Web, a meno che il `retail` attributo dell'elemento di configurazione è impostato su `false`.|  
  
> [!NOTE]
>  Il `debug` attributo della direttiva influisce sulle applicazioni compatibili con Ajax ASP.NET. Il <xref:System.Web.UI.ScriptManager> controllo utilizza solo le impostazioni nel file Web. config e nelle relative <xref:System.Web.UI.ScriptManager.IsDebuggingEnabled%2A> e <xref:System.Web.UI.ScriptManager.ScriptMode%2A> le proprietà per determinare se eseguire il rendering degli script di debug.  
  
 Per ulteriori informazioni, vedere [debug e traccia panoramica delle applicazioni Ajax](http://msdn.microsoft.com/library/92684ea0-7bb4-4a34-9203-3aa6394ce375).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La proprietà <see cref="P:System.Web.UI.ScriptManager.ScriptMode" /> non è inclusa nei valori <see cref="T:System.Web.UI.ScriptMode" />.</exception>
        <altmember cref="T:System.Web.UI.ScriptMode" />
      </Docs>
    </Member>
    <Member MemberName="ScriptPath">
      <MemberSignature Language="C#" Value="public string ScriptPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ScriptPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ScriptPath" />
      <MemberSignature Language="VB.NET" Value="Public Property ScriptPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ScriptPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This property is obsolete. Set the Path property on each individual ScriptReference instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il percorso radice usato per compilare i percorsi dei file ASP.NET Ajax e degli script personalizzati.</summary>
        <value>Percorso di archiviazione dei file di script. Il valore predefinito è una stringa vuota (""), interpretata come percorso relativo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ScriptManager.ScriptPath%2A> proprietà consente di specificare un assoluto, relativo, o blocca l'URL relativo dell'applicazione per tutti gli script nella pagina. Inclusi i blocchi di script personalizzati e di terze parti che sono registrati con corrente <xref:System.Web.UI.ScriptManager> istanza. Il <xref:System.Web.UI.ScriptManager.ScriptPath%2A> viene in genere impostata in modo dichiarativo come attributo di un `ScriptManager` elemento nella pagina, ma può essere impostato anche nel codice.  
  
 Se il `path` attributo o <xref:System.Web.UI.ScriptReferenceBase.Path%2A> proprietà è impostata per un <xref:System.Web.UI.ScriptReference> oggetto il <xref:System.Web.UI.ScriptManager.Scripts%2A> esegue l'override di raccolta, il valore del percorso di <xref:System.Web.UI.ScriptManager.ScriptPath%2A> valore per tale <xref:System.Web.UI.ScriptReference> istanza.  
  
 Se non <xref:System.Web.UI.ScriptReferenceBase.Path%2A> valore è specificato, il <xref:System.Web.UI.ScriptManager> controllo Cerca nella directory definita dal <xref:System.Web.UI.ScriptManager.ScriptPath%2A> fa riferimento a script di proprietà e viene risolto da loro <xref:System.Web.UI.ScriptReference.Name%2A> o <xref:System.Web.UI.ScriptReference.Assembly%2A> proprietà.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScriptResourceMapping">
      <MemberSignature Language="C#" Value="public static System.Web.UI.ScriptResourceMapping ScriptResourceMapping { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.UI.ScriptResourceMapping ScriptResourceMapping" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ScriptResourceMapping" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ScriptResourceMapping As ScriptResourceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::UI::ScriptResourceMapping ^ ScriptResourceMapping { System::Web::UI::ScriptResourceMapping ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptResourceMapping</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.Web.UI.ScriptResourceMapping" />.</summary>
        <value>Un oggetto <see cref="T:System.Web.UI.ScriptResourceMapping" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il metodo statico <xref:System.Web.UI.ScriptManager.ScriptResourceMapping%2A> proprietà restituisce un <xref:System.Web.UI.ScriptResourceMapping> oggetto che può contenere una raccolta di mapping che rappresentano il percorso della risorsa di script (reindirizzamento script). Questo insieme di mapping può essere mappato in base alle coppie nome/assembly o di nomi e può puntare a un <xref:System.Web.UI.ScriptResourceDefinition> oggetto.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come aggiungere un <xref:System.Web.UI.ScriptResourceDefinition> oggetto che può fare riferimento un <xref:System.Web.UI.ScriptManager> oggetto. Aggiungere il codice seguente nel file Global. asax nel `Application_Start` evento.  
  
```csharp  
ScriptResourceDefinition myScriptResDef = new ScriptResourceDefinition();  
myScriptResDef.Path = "~/Scripts/jquery-1.4.2.min.js";  
myScriptResDef.DebugPath = "~/Scripts/jquery-1.4.2.js";  
myScriptResDef.CdnPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.min.js";  
myScriptResDef.CdnDebugPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.js";  
ScriptManager.ScriptResourceMapping.AddDefinition("jquery", null, myScriptResDef);  
```  
  
```vb  
Dim myScriptResDef As New ScriptResourceDefinition()  
myScriptResDef.Path = "~/Scripts/jquery-1.4.2.min.js"  
myScriptResDef.DebugPath = "~/Scripts/jquery-1.4.2.js"  
myScriptResDef.CdnPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.min.js"  
myScriptResDef.CdnDebugPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.js"  
ScriptManager.ScriptResourceMapping.AddDefinition("jquery", Nothing, myScriptResDef)  
```  
  
 Nel markup per una pagina Web Form ASP.NET (file con estensione aspx), aggiungere il markup seguente all'interno di `form` elemento e prima di qualsiasi elemento o un codice che usa script jQuery.  
  
```  
<asp:ScriptManager ID="sm1" runat="server">  
  <Scripts>  
    <asp:ScriptReference Name="jquery"/>  
  </Scripts>  
</asp:ScriptManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scripts">
      <MemberSignature Language="C#" Value="public System.Web.UI.ScriptReferenceCollection Scripts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ScriptReferenceCollection Scripts" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.Scripts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Scripts As ScriptReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ScriptReferenceCollection ^ Scripts { System::Web::UI::ScriptReferenceCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.CollectionEditorBase, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.Web.UI.ScriptReferenceCollection" /> che contiene gli oggetti <see cref="T:System.Web.UI.ScriptReference" />, ciascuno dei quali rappresenta un file di script sottoposto a rendering sul client.</summary>
        <value>Oggetto <see cref="T:System.Web.UI.ScriptReferenceCollection" /> dell'istanza <see cref="T:System.Web.UI.ScriptManager" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ScriptReferenceCollection> oggetto restituito da questa proprietà è una raccolta di <xref:System.Web.UI.ScriptReference> oggetti, ognuno dei quali rappresenta un file di script. La raccolta include i riferimenti a tutti i file di script che è necessario per la funzionalità Ajax ASP.NET e file di script personalizzati. File di script personalizzato per eseguire il rendering possono essere definiti nel <xref:System.Web.UI.ScriptManager> controllo o in un oggetto associato <xref:System.Web.UI.ScriptManagerProxy> controllo.  
  
 È possibile aggiungere i file di script per la raccolta nel markup aggiungendo `asp:ScriptReference` elementi da un `Scripts` nodo all'interno di `asp:ScriptManager` elemento della pagina, come illustrato nell'esempio seguente.  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <Scripts>  
    <asp:ScriptReference Name="Script.js" />  
  </Scripts>  
</asp:ScriptManager>  
```  
  
 È inoltre possibile aggiungere un <xref:System.Web.UI.ScriptReference> dell'oggetto per il <xref:System.Web.UI.ScriptManager.Scripts%2A> insieme a livello di programmazione, utilizzando il <xref:System.Collections.ObjectModel.Collection%601.Add%2A> metodo il <xref:System.Web.UI.ScriptReferenceCollection> classe.  
  
 Il <xref:System.Web.UI.ScriptManager> controllo Registra i file di script durante il controllo <xref:System.Web.UI.Control.PreRender> evento.  
  
 Il <xref:System.Web.UI.ScriptManager.Scripts%2A> raccolta non contiene gli script Microsoft Ajax Library dei componenti di base. Gli script nella libreria di base il rendering vengono eseguiti automaticamente. non devono essere registrati con il <xref:System.Web.UI.ScriptManager> controllo. Tuttavia, se si desidera eseguire l'override di uno script di base o uno script di controllo e inserire una versione diversa dello script, è possibile aggiungere la versione per il <xref:System.Web.UI.ScriptManager.Scripts%2A> insieme.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Services">
      <MemberSignature Language="C#" Value="public System.Web.UI.ServiceReferenceCollection Services { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ServiceReferenceCollection Services" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.Services" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Services As ServiceReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ServiceReferenceCollection ^ Services { System::Web::UI::ServiceReferenceCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ServiceReferenceCollectionEditor, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ServiceReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.Web.UI.ServiceReferenceCollection" /> che contiene un oggetto <see cref="T:System.Web.UI.ServiceReference" /> per ogni servizio Web che ASP.NET espone nel client per la funzionalità Ajax.</summary>
        <value>Oggetto <see cref="T:System.Web.UI.ServiceReferenceCollection" /> per l'istanza di <see cref="T:System.Web.UI.ScriptManager" /> corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ServiceReferenceCollection> oggetto restituito da questa proprietà è una raccolta di <xref:System.Web.UI.ServiceReference> oggetti, ognuno dei quali rappresenta un servizio Web che è registrato con il <xref:System.Web.UI.ScriptManager> controllo. È possibile definire i servizi di <xref:System.Web.UI.ScriptManager> controllo o in un oggetto associato <xref:System.Web.UI.ScriptManagerProxy> controllo.  
  
 È possibile aggiungere servizi alla raccolta nel markup aggiungendo un `asp:ServiceReference` elemento da un `Services` elemento all'interno di `asp:ScriptManager` istanza nella pagina, come illustrato nell'esempio seguente.  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <Services>  
    <asp:ServiceReference Path="Service.asmx" />  
  </Services>  
</asp:ScriptManager>  
```  
  
 Anche a livello di codice, è possibile aggiungere un <xref:System.Web.UI.ServiceReference> dell'oggetto per il <xref:System.Web.UI.ScriptManager.Services%2A> raccolta utilizzando il <xref:System.Collections.ObjectModel.Collection%601.Add%2A> metodo la <xref:System.Web.UI.ServiceReferenceCollection> classe.  
  
 I servizi vengono registrati con il <xref:System.Web.UI.ScriptManager> durante la pagina <xref:System.Web.UI.Control.PreRender> fase del ciclo di vita.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetFocus">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Imposta lo stato attivo del browser sul controllo specificato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetFocus">
      <MemberSignature Language="C#" Value="public void SetFocus (string clientID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFocus(string clientID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.SetFocus(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFocus (clientID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFocus(System::String ^ clientID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clientID">ID del controllo che riceve lo stato attivo.</param>
        <summary>Imposta lo stato attivo del browser sul controllo specificato dall'ID.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ScriptManager.SetFocus%2A> metodo opera come il <xref:System.Web.UI.Page.SetFocus%2A> metodo per la <xref:System.Web.UI.Page> classe. Entrambi i metodi rendono attivo nella pagina Web al controllo con l'ID specificato. Il <xref:System.Web.UI.ScriptManager.SetFocus%2A> metodo la <xref:System.Web.UI.ScriptManager> classe viene utilizzata per impostare lo stato attivo durante un postback asincrono. Durante i postback e quando la pagina viene prima eseguito il rendering, il <xref:System.Web.UI.ScriptManager.SetFocus%2A> chiamate al metodo di <xref:System.Web.UI.Page.SetFocus%2A> metodo la <xref:System.Web.UI.Page> classe.  
  
 Se sono presenti più chiamate al <xref:System.Web.UI.ScriptManager.SetFocus%2A> metodo, il controllo nell'ultima chiamata riceve lo stato attivo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.SetFocus(System.String)" />
        <altmember cref="M:System.Web.UI.ScriptManager.SetFocus(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="SetFocus">
      <MemberSignature Language="C#" Value="public void SetFocus (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFocus(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.SetFocus(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFocus(System::Web::UI::Control ^ control);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Controllo che riceverà lo stato attivo.</param>
        <summary>Imposta lo stato attivo del browser sul controllo specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ScriptManager.SetFocus%2A> metodo opera come il <xref:System.Web.UI.Page.SetFocus%2A> metodo per la <xref:System.Web.UI.Page> classe. Entrambi i metodi rendono attivo nella pagina Web al controllo specificato. Il <xref:System.Web.UI.ScriptManager.SetFocus%2A> metodo la <xref:System.Web.UI.ScriptManager> classe viene utilizzata per impostare lo stato attivo durante un postback asincrono. Durante i postback e quando la pagina viene prima eseguito il rendering, il <xref:System.Web.UI.ScriptManager.SetFocus%2A> chiamate al metodo di <xref:System.Web.UI.Page.SetFocus%2A> metodo la <xref:System.Web.UI.Page> classe.  
  
 Se sono presenti più chiamate al <xref:System.Web.UI.ScriptManager.SetFocus%2A> (metodo), il controllo specificato nell'ultima chiamata riceve lo stato attivo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.SetFocus(System.Web.UI.Control)" />
        <altmember cref="M:System.Web.UI.ScriptManager.SetFocus(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SupportsPartialRendering">
      <MemberSignature Language="C#" Value="public bool SupportsPartialRendering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsPartialRendering" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.SupportsPartialRendering" />
      <MemberSignature Language="VB.NET" Value="Public Property SupportsPartialRendering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsPartialRendering { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il client supporta il rendering parziale della pagina.</summary>
        <value>
          <see langword="true" /> se il client supporta il rendering parziale della pagina; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> è impostata su `false`, <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> restituisce proprietà `false`.  
  
 Restituisce il controllo predefinito per determinare se è supportato per il rendering parziale della pagina `true` quando le condizioni seguenti sono vere:  
  
-   Il <xref:System.Web.Configuration.HttpCapabilitiesBase.W3CDomVersion%2A> valore della proprietà deve essere maggiore o uguale a 1.0.  
  
-   Il <xref:System.Web.Configuration.HttpCapabilitiesBase.EcmaScriptVersion%2A> valore della proprietà deve essere maggiore o uguale a 1.0.  
  
-   Il <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> il valore di proprietà deve essere impostato su `true`.  
  
 Quando il <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> è impostata in modo esplicito, questi controlli non vengono utilizzati.  
  
 Gli sviluppatori di controllo devono utilizzare il <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> proprietà per determinare se supportare per il rendering parziale della pagina.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La proprietà <see cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" /> è <see langword="false" /> e la proprietà <see cref="P:System.Web.UI.ScriptManager.SupportsPartialRendering" /> è stata impostata su <see langword="true" />.  \- o -  La proprietà <see cref="P:System.Web.UI.ScriptManager.SupportsPartialRendering" /> è stata impostata dopo l'evento <see cref="E:System.Web.UI.Control.Init" />.</exception>
        <altmember cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" />
        <altmember cref="T:System.Web.HttpBrowserCapabilities" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.LoadPostData">
      <MemberSignature Language="C#" Value="bool IPostBackDataHandler.LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IPostBackDataHandler#LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Function LoadPostData (postDataKey As String, postCollection As NameValueCollection) As Boolean Implements IPostBackDataHandler.LoadPostData" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Web.UI.IPostBackDataHandler.LoadPostData(System::String ^ postDataKey, System::Collections::Specialized::NameValueCollection ^ postCollection) = System::Web::UI::IPostBackDataHandler::LoadPostData;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">Identificatore di chiave per il controllo.</param>
        <param name="postCollection">Raccolta di tutti i dati Post in arrivo.</param>
        <summary>Per una descrizione di questo membro, vedere <see cref="M:System.Web.UI.IPostBackDataHandler.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />.</summary>
        <returns>
          <see langword="true" /> se lo stato del controllo <see cref="T:System.Web.UI.ScriptManager" /> è cambiato in conseguenza di un postback; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Web.UI.ScriptManager> a un'interfaccia <xref:System.Web.UI.IPostBackDataHandler>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
        <altmember cref="M:System.Web.UI.ScriptManager.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="void IPostBackDataHandler.RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IPostBackDataHandler#RaisePostDataChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Sub RaisePostDataChangedEvent () Implements IPostBackDataHandler.RaisePostDataChangedEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent() = System::Web::UI::IPostBackDataHandler::RaisePostDataChangedEvent;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Per una descrizione di questo membro, vedere <see cref="M:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Web.UI.ScriptManager> a un'interfaccia <xref:System.Web.UI.IPostBackDataHandler>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
        <altmember cref="M:System.Web.UI.ScriptManager.RaisePostDataChangedEvent" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackEventHandler.RaisePostBackEvent">
      <MemberSignature Language="C#" Value="void IPostBackEventHandler.RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub RaisePostBackEvent (eventArgument As String) Implements IPostBackEventHandler.RaisePostBackEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System::String ^ eventArgument) = System::Web::UI::IPostBackEventHandler::RaisePostBackEvent;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Stringa di coppie nome/valore che rappresentano lo stato della cronologia della pagina Web.</param>
        <summary>Abilita il controllo <see cref="T:System.Web.UI.ScriptManager" /> per elaborare un evento postback e caricare lo stato della cronologia della pagina Web.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.IsSecureConnection">
      <MemberSignature Language="C#" Value="bool System.Web.UI.IScriptManager.IsSecureConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.IScriptManager.IsSecureConnection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#IsSecureConnection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSecureConnection As Boolean Implements IScriptManager.IsSecureConnection" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Web.UI.IScriptManager.IsSecureConnection { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterArrayDeclaration (System.Web.UI.Control control, string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterArrayDeclaration(class System.Web.UI.Control control, string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterArrayDeclaration(System.Web.UI.Control,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterArrayDeclaration(System::Web::UI::Control ^ control, System::String ^ arrayName, System::String ^ arrayValue) = System::Web::UI::IScriptManager::RegisterArrayDeclaration;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="arrayName">To be added.</param>
        <param name="arrayValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterClientScriptBlock (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterClientScriptBlock(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterClientScriptBlock(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags) = System::Web::UI::IScriptManager::RegisterClientScriptBlock;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <param name="script">To be added.</param>
        <param name="addScriptTags">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterClientScriptInclude (System.Web.UI.Control control, Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterClientScriptInclude(class System.Web.UI.Control control, class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterClientScriptInclude(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterClientScriptInclude(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ url) = System::Web::UI::IScriptManager::RegisterClientScriptInclude;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <param name="url">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterClientScriptResource (System.Web.UI.Control control, Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterClientScriptResource(class System.Web.UI.Control control, class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterClientScriptResource(System.Web.UI.Control,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterClientScriptResource(System::Web::UI::Control ^ control, Type ^ type, System::String ^ resourceName) = System::Web::UI::IScriptManager::RegisterClientScriptResource;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="resourceName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterDispose">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterDispose (System.Web.UI.Control control, string disposeScript);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterDispose(class System.Web.UI.Control control, string disposeScript) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterDispose(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterDispose(System::Web::UI::Control ^ control, System::String ^ disposeScript) = System::Web::UI::IScriptManager::RegisterDispose;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="disposeScript" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="disposeScript">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterExpandoAttribute (System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterExpandoAttribute(class System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterExpandoAttribute(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterExpandoAttribute(System::Web::UI::Control ^ control, System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue, bool encode) = System::Web::UI::IScriptManager::RegisterExpandoAttribute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="controlId">To be added.</param>
        <param name="attributeName">To be added.</param>
        <param name="attributeValue">To be added.</param>
        <param name="encode">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterHiddenField">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterHiddenField (System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldValue);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterHiddenField(class System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterHiddenField(System.Web.UI.Control,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterHiddenField(System::Web::UI::Control ^ control, System::String ^ hiddenFieldName, System::String ^ hiddenFieldValue) = System::Web::UI::IScriptManager::RegisterHiddenField;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="hiddenFieldName">To be added.</param>
        <param name="hiddenFieldValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterOnSubmitStatement (System.Web.UI.Control control, Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterOnSubmitStatement(class System.Web.UI.Control control, class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterOnSubmitStatement(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterOnSubmitStatement(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script) = System::Web::UI::IScriptManager::RegisterOnSubmitStatement;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <param name="script">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterPostBackControl">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterPostBackControl (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterPostBackControl(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterPostBackControl(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterPostBackControl(System::Web::UI::Control ^ control) = System::Web::UI::IScriptManager::RegisterPostBackControl;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterPostBackControl(System.Web.UI.Control)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterStartupScript">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterStartupScript (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterStartupScript(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterStartupScript(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterStartupScript(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags) = System::Web::UI::IScriptManager::RegisterStartupScript;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <param name="script">To be added.</param>
        <param name="addScriptTags">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.SetFocusInternal">
      <MemberSignature Language="C#" Value="void IScriptManager.SetFocusInternal (string clientID);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.SetFocusInternal(string clientID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#SetFocusInternal(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub SetFocusInternal (clientID As String) Implements IScriptManager.SetFocusInternal" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.SetFocusInternal(System::String ^ clientID) = System::Web::UI::IScriptManager::SetFocusInternal;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clientID">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public override bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.Visible" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Visible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Visible { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Esegue l'override della proprietà <see cref="P:System.Web.UI.Control.Visible" /> ereditata dalla classe <see cref="T:System.Web.UI.Control" /> di base per impedire l'impostazione di questo valore.</summary>
        <value>
          <see langword="true" /> in tutti i casi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.Control.Visible%2A> viene eseguito l'override di proprietà nel <xref:System.Web.UI.ScriptManager> classe per impedire l'impostazione di questo valore. Oggetto <xref:System.NotImplementedException> errore si verifica quando viene assegnato un valore per questa proprietà.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Viene assegnato un valore alla proprietà <see cref="P:System.Web.UI.ScriptManager.Visible" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>