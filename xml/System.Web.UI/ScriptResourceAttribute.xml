<Type Name="ScriptResourceAttribute" FullName="System.Web.UI.ScriptResourceAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d073848e057665f8d947bc40cf2e76f1280fffcc" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36375985" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ScriptResourceAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ScriptResourceAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ScriptResourceAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ScriptResourceAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ScriptResourceAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ScriptResourceAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definisce una risorsa in un assembly che deve essere usata da un file script client. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ScriptResourceAttribute> (classe) è valido solo quando si utilizza nelle dichiarazioni di assembly. Che consente di abilitare una risorsa script incorporato specificato in un assembly. È possibile definire il nome della libreria di script incorporati, il nome del file di risorse per la raccolta di script e il nome che viene utilizzato in un file di script per il recupero dei valori della risorsa. Il <xref:System.Web.UI.ScriptManager> classe utilizza le proprietà in <xref:System.Web.UI.ScriptResourceAttribute> per determinare il nome della risorsa corretto per una raccolta di script. Il <xref:System.Web.UI.ScriptResourceAttribute.TypeName%2A> proprietà viene utilizzata con una chiave di risorsa per specificare una risorsa.  
  
> [!NOTE]
>  Il <xref:System.Web.UI.ScriptResourceAttribute> classe può essere utilizzata solo per identificare le risorse basate su testo per i file JavaScript. Per associare un file di immagine localizzato (binario) a una determinata lingua, è consigliabile archiviare solo il relativo URL come una risorsa localizzata, che quindi essere risolto e caricata nello script.  
  
   
  
## Examples  
 L'esempio seguente mostra un <xref:System.Web.UI.ScriptResourceAttribute> attributo per un file script denominato CheckAnswer che utilizza le risorse dai file di risorse VerificationResources. Il nome `Answer` viene utilizzato per fare riferimento a queste risorse.  
  
 [!code-csharp[LocalizingClientResourcesWalkthrough#3](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/AssemblyInfo.cs#3)]
 [!code-vb[LocalizingClientResourcesWalkthrough#3](~/samples/snippets/visualbasic/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/vb/AssemblyInfo.vb#3)]  
  
 Nell'esempio seguente viene illustrato come utilizzare le risorse negli script client. Le chiavi di risorsa (`Correct` e `Incorrect`) sono precedute dal prefisso `Answer` per identificare la definizione di risorsa script che contiene i valori.  
  
 [!code-javascript[LocalizingClientResourcesWalkthrough#1](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/CheckAnswer.js#1)]
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.ScriptResourceAttribute" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptResourceAttribute (string scriptName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string scriptName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptResourceAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (scriptName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ScriptResourceAttribute(System::String ^ scriptName);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ScriptResourceAttribute : string -&gt; System.Web.UI.ScriptResourceAttribute" Usage="new System.Web.UI.ScriptResourceAttribute scriptName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scriptName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scriptName">Nome della libreria di script.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.ScriptResourceAttribute" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptResourceAttribute (string scriptName, string stringResourceName, string stringResourceClientTypeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string scriptName, string stringResourceName, string stringResourceClientTypeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptResourceAttribute.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (scriptName As String, stringResourceName As String, stringResourceClientTypeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ScriptResourceAttribute(System::String ^ scriptName, System::String ^ stringResourceName, System::String ^ stringResourceClientTypeName);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ScriptResourceAttribute : string * string * string -&gt; System.Web.UI.ScriptResourceAttribute" Usage="new System.Web.UI.ScriptResourceAttribute (scriptName, stringResourceName, stringResourceClientTypeName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scriptName" Type="System.String" />
        <Parameter Name="stringResourceName" Type="System.String" />
        <Parameter Name="stringResourceClientTypeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scriptName">Nome della libreria di script.</param>
        <param name="stringResourceName">Nome del file di risorse per la libreria di script.</param>
        <param name="stringResourceClientTypeName">Nome del tipo da creare per i valori nel file di risorse.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.ScriptResourceAttribute" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ScriptResourceAttribute.%23ctor%2A> viene chiamato in genere tramite il <xref:System.Web.UI.ScriptResourceAttribute> attributo come attributo di assembly nel file AssemblyInfo dell'applicazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="scriptName" />, <paramref name="scriptResourceName" />, o <paramref name="typeName" /> è <see langword="null" /> o una stringa vuota ("").</exception>
      </Docs>
    </Member>
    <Member MemberName="ScriptName">
      <MemberSignature Language="C#" Value="public string ScriptName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ScriptName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptResourceAttribute.ScriptName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScriptName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ScriptName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ScriptName : string" Usage="System.Web.UI.ScriptResourceAttribute.ScriptName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il nome della libreria di script.</summary>
        <value>Nome della libreria di script.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio seguente mostra un <xref:System.Web.UI.ScriptResourceAttribute> attributo per un file script denominato CheckAnswer che utilizza le risorse dai file di risorse VerificationResources. Il nome `Answer` viene utilizzato per fare riferimento a queste risorse. In questo esempio, il <xref:System.Web.UI.ScriptResourceAttribute.ScriptName%2A> proprietà restituisce "LocalizingResources.CheckAnswer.js".  
  
 [!code-csharp[LocalizingClientResourcesWalkthrough#3](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/AssemblyInfo.cs#3)]
 [!code-vb[LocalizingClientResourcesWalkthrough#3](~/samples/snippets/visualbasic/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/vb/AssemblyInfo.vb#3)]  
  
 Nell'esempio seguente viene illustrato come utilizzare le risorse negli script client. Le chiavi di risorsa (`Correct` e `Incorrect`) sono precedute dal prefisso `Answer` per identificare la definizione di risorsa script che contiene i valori.  
  
 [!code-javascript[LocalizingClientResourcesWalkthrough#1](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/CheckAnswer.js#1)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScriptResourceName">
      <MemberSignature Language="C#" Value="public string ScriptResourceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ScriptResourceName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptResourceAttribute.ScriptResourceName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScriptResourceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ScriptResourceName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ScriptResourceName : string" Usage="System.Web.UI.ScriptResourceAttribute.ScriptResourceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This property is obsolete. Use StringResourceName instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il nome del file di risorse per la libreria di script.</summary>
        <value>Nome del file di risorse per la libreria di script.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio seguente mostra un <xref:System.Web.UI.ScriptResourceAttribute> attributo per un file script denominato CheckAnswer che utilizza le risorse dai file di risorse VerificationResources. Il nome `Answer` viene utilizzato per fare riferimento a queste risorse. In questo esempio, il <xref:System.Web.UI.ScriptResourceAttribute.ScriptResourceName%2A> proprietà restituisce "LocalizingResources". L'estensione del nome file non è incluso quando si definisce la <xref:System.Web.UI.ScriptResourceAttribute.ScriptResourceName%2A>.  
  
 [!code-csharp[LocalizingClientResourcesWalkthrough#3](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/AssemblyInfo.cs#3)]
 [!code-vb[LocalizingClientResourcesWalkthrough#3](~/samples/snippets/visualbasic/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/vb/AssemblyInfo.vb#3)]  
  
 Nell'esempio seguente viene illustrato come utilizzare le risorse negli script client. Le chiavi di risorsa (`Correct` e `Incorrect`) sono precedute dal prefisso `Answer` per identificare la definizione di risorsa script che contiene i valori.  
  
 [!code-javascript[LocalizingClientResourcesWalkthrough#1](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/CheckAnswer.js#1)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StringResourceClientTypeName">
      <MemberSignature Language="C#" Value="public string StringResourceClientTypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StringResourceClientTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptResourceAttribute.StringResourceClientTypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StringResourceClientTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StringResourceClientTypeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StringResourceClientTypeName : string" Usage="System.Web.UI.ScriptResourceAttribute.StringResourceClientTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il nome del tipo di client da creare per i valori nel file di risorse.</summary>
        <value>Nome del tipo di client.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringResourceName">
      <MemberSignature Language="C#" Value="public string StringResourceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StringResourceName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptResourceAttribute.StringResourceName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StringResourceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StringResourceName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StringResourceName : string" Usage="System.Web.UI.ScriptResourceAttribute.StringResourceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il nome del file di risorse per la libreria di script.</summary>
        <value>Nome del file di risorse.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptResourceAttribute.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string" Usage="System.Web.UI.ScriptResourceAttribute.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This property is obsolete. Use StringResourceClientTypeName instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il nome usato durante il recupero dei valori nel file di risorse.</summary>
        <value>Nome utilizzato nello script client durante il recupero dei valori nel file di risorse.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ScriptResourceAttribute.TypeName%2A> proprietà contiene il valore utilizzato per il recupero delle risorse localizzate negli script client. Lo script client deve includere il <xref:System.Web.UI.ScriptResourceAttribute.TypeName%2A> valore e il nome della chiave per la risorsa da localizzare.  
  
   
  
## Examples  
 L'esempio seguente mostra un <xref:System.Web.UI.ScriptResourceAttribute> attributo per un file script denominato CheckAnswer che utilizza le risorse dai file di risorse VerificationResources. Il nome `Answer` viene utilizzato per fare riferimento a queste risorse. In questo esempio, il <xref:System.Web.UI.ScriptResourceAttribute.TypeName%2A> proprietà restituisce "Risposta".  
  
 [!code-csharp[LocalizingClientResourcesWalkthrough#3](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/AssemblyInfo.cs#3)]
 [!code-vb[LocalizingClientResourcesWalkthrough#3](~/samples/snippets/visualbasic/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/vb/AssemblyInfo.vb#3)]  
  
 Nell'esempio seguente viene illustrato come utilizzare le risorse negli script client. Le chiavi di risorsa (`Correct` e `Incorrect`) sono precedute dal prefisso `Answer` per identificare la definizione di risorsa script che contiene i valori.  
  
 [!code-javascript[LocalizingClientResourcesWalkthrough#1](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/CheckAnswer.js#1)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>