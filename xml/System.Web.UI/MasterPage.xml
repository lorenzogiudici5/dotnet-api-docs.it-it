<Type Name="MasterPage" FullName="System.Web.UI.MasterPage">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c77d86cdc49e84146116313c92edadc98c7cfe08" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36376765" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MasterPage : System.Web.UI.UserControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MasterPage extends System.Web.UI.UserControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.MasterPage" />
  <TypeSignature Language="VB.NET" Value="Public Class MasterPage&#xA;Inherits UserControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class MasterPage : System::Web::UI::UserControl" />
  <TypeSignature Language="F#" Value="type MasterPage = class&#xA;    inherit UserControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.UserControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("Microsoft.VisualStudio.Web.WebForms.MasterPageWebFormDesigner, Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.ComponentModel.Design.IRootDesigner))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlBuilder(typeof(System.Web.UI.MasterPageControlBuilder))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Funge da modello e contenitore di unione per le pagine composte esclusivamente da controlli <see cref="T:System.Web.UI.WebControls.Content" /> e dai rispettivi controlli figlio.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una pagina master funziona come un contenitore di modelli e pagina di unione per le pagine di contenuto nell'applicazione Web ASP.NET. Pagine master forniscono un modo pratico per condividere un set di pagine di contenuto nella struttura e il contenuto. Segnaposto di contenuto consente di definire le sezioni della pagina master per sostituire con il contenuto dalle pagine di contenuto.  
  
 Quando si utilizza una pagina master e le relative pagine di contenuto, aggiungere i tag di documento XHTML richiesti (ad esempio `html`, `head`, e `body`) solo per la pagina master e non occorre creare altri file aspx (pagine ASP.NET) come Web autonoma numero di pagine. Le pagine contenute definiscono il contenuto da inserire nei segnaposto della pagina master.  
  
 Quando viene effettuata una richiesta HTTP per una pagina in fase di esecuzione, la pagina master e pagine di contenuto vengono combinate in un'unica classe con lo stesso nome di pagine di contenuto. Il valore risultante compilati, classe unione deriva dal <xref:System.Web.UI.Page> classe.  
  
 Una pagina master può contenere markup diretto e i controlli server, nonché controlli contenitore. Tutti gli elementi che si trova nella pagina master all'esterno di un <xref:System.Web.UI.WebControls.ContentPlaceHolder> controllo viene eseguito il rendering in tutte le pagine risultanti dall'unione della pagina master e pagine di contenuto.  
  
 Ogni pagina di contenuto che è correlato alla pagina master deve fare riferimento alla pagina master in un `MasterPageFile` attributo della direttiva. Contenuto delle pagine possono contenere solo un `@ Page` direttiva e uno o più <xref:System.Web.UI.WebControls.Content> controlli. Tutti i controlli di testo, markup e server di pagina deve essere inseriti all'interno di <xref:System.Web.UI.WebControls.Content> controlli. Si identifica il <xref:System.Web.UI.WebControls.ContentPlaceHolder> controllo di un master pagina che un <xref:System.Web.UI.WebControls.Content> controllo è associato, impostare il <xref:System.Web.UI.WebControls.Content.ContentPlaceHolderID%2A> proprietà del <xref:System.Web.UI.WebControls.Content> controllo.  
  
 In fase di esecuzione, il contenuto dinamico da ciascuna <xref:System.Web.UI.WebControls.Content> controllo nella pagina richiesta viene unita con la pagina master nella posizione esatta dell'oggetto correlato <xref:System.Web.UI.WebControls.ContentPlaceHolder> controllo. Qualsiasi altro markup e i controlli nella pagina master non sono interessati. Gestori eventi possono essere definiti nella classe master e nella pagina contenuto. Per altre informazioni, vedere [eventi in ASP.NET pagine Master e contenuto](http://msdn.microsoft.com/library/b3ab2d01-9e37-4788-82d0-c6065e3ff5bd).  
  
 Il <xref:System.Web.UI.MasterPage> classe è associata a file con estensione master. Questi file vengono compilati in fase di esecuzione come <xref:System.Web.UI.MasterPage> oggetti e vengono memorizzati nella cache nella memoria del server.  
  
 La pagina master viene resa disponibile per la pagina contenuto tramite il <xref:System.Web.UI.Page.Master%2A> proprietà della base <xref:System.Web.UI.Page> classe. Il <xref:System.Web.UI.Page.Master%2A> proprietà restituisce l'istanza della pagina master; tuttavia, è digitato come base <xref:System.Web.UI.MasterPage> classe. Per i controlli di accesso, le proprietà e funzioni della pagina master, il <xref:System.Web.UI.Page.Master%2A> proprietà può essere convertita in un <xref:System.Web.UI.MasterPage> oggetto. Il nome della classe della pagina master è stato definito tramite la `ClassName` attributo della direttiva.  
  
> [!NOTE]
>  I file con estensione master non sono disponibili per un browser.  
  
 Le direttive valide in una pagina master sono identici a quelli disponibili in un <xref:System.Web.UI.UserControl> oggetto. Possono includere gli attributi seguenti:  
  
-   `AutoEventWireup`  
  
-   `ClassName`  
  
-   `CodeFile`  
  
-   `CompilerMode`  
  
-   `CompilerOptions`  
  
-   `Debug`  
  
-   `Description`  
  
-   `EnableTheming`  
  
-   `EnableViewState`  
  
-   `Explicit`  
  
-   `Inherits`  
  
-   `Language`  
  
-   `LinePragmas`  
  
-   `MasterPageFile`  
  
-   `Src`  
  
-   `Strict`  
  
-   `WarningLevel`  
  
 Direttive delle pagine master non sostituire le direttive nelle singole pagine di contenuto.  
  
 Pagine master vengono spesso create in modo dichiarativo. Se si desidera creare una pagina master a livello di programmazione, derivare direttamente il <xref:System.Web.UI.MasterPage> classe. Oltre a estendere la <xref:System.Web.UI.MasterPage> (classe), è necessario creare il file con estensione master per visualizzare l'interfaccia utente (UI) che è associato con le classi che è stato richiamato nel file di origine.  
  
> [!NOTE]
>  Quando si crea una pagina master creando prima una classe personalizzata, è necessario includere tutti gli spazi dei nomi necessari per le classi che vengono utilizzate dalla pagina.  
  
 Per ulteriori informazioni sulle pagine master, vedere [pagine Master ASP.NET](http://msdn.microsoft.com/library/4e53eedf-8304-4e7a-aed1-691a2623b28b).  
  
   
  
## Examples  
 In questa sezione contiene quattro esempi di codice:  
  
-   Il primo esempio di codice viene illustrato come creare una pagina master in modo dichiarativo.  
  
-   Il secondo esempio di codice rappresenta la pagina contenuta che è associata alla pagina master che è stata creata nel primo esempio di codice.  
  
-   Il terzo esempio di codice viene illustrato come aggiungere una proprietà a una pagina master.  
  
-   Nel quarto esempio di codice viene illustrato come utilizzare una pagina contenuto per accedere a una proprietà pubblica della pagina master.  
  
 Nell'esempio seguente viene illustrato come creare una pagina master in modo dichiarativo e a aggiungere alcuni contenuti utilizzando una pagina di contenuto. La pagina Web è la pagina master denominata `MasterPageSample_1.master`.  
  
```csharp  
<%@ Master Language="C#" %>  
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">  
<html >  
<head runat="server">  
    <title>MasterPage Example</title>  
</head>  
<body>  
    <form id="form1" runat="server">  
    <div>  
        <asp:contentplaceholder id="ContentPlaceHolder1" runat="server" />  
    </div>  
    </form>  
</body>  
</html>  
```  
  
```vb  
<%@ Master Language="VB" %>  
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">  
<html >  
<head runat="server">  
    <title>MasterPage Example</title>  
</head>  
<body>  
    <form id="form1" runat="server">  
    <div>  
        <asp:contentplaceholder id="ContentPlaceHolder1" runat="server" />  
    </div>  
    </form>  
</body>  
</html>  
```  
  
 Nell'esempio seguente rappresenta la pagina contenuto associato `MasterPageSample_1.master`. Contiene una <xref:System.Web.UI.WebControls.Content> controllare e identifica il <xref:System.Web.UI.WebControls.ContentPlaceHolder> controllo che è associato il contenuto tramite il <xref:System.Web.UI.WebControls.Content.ContentPlaceHolderID%2A> proprietà.  
  
```csharp  
<%@ Page Language="C#" MasterPageFile="~/MasterPageSample_1cs.master" Title="Content Page"%>  
  
<asp:content   
    runat="server"  
    contentplaceholderid="ContentPlaceHolder1" >Hello, Master Pages!</asp:content>  
```  
  
```vb  
<%@ Page Language="VB" MasterPageFile="~/MasterPageSample_1vb.master" Title="Content Page"%>  
  
<asp:content   
    runat="server"  
    contentplaceholderid="ContentPlaceHolder1" >Hello, Master Pages!</asp:content>  
```  
  
 Nell'esempio seguente viene illustrato come aggiungere una proprietà a una pagina master. Il `ClassName` attributo viene utilizzato per denominare la pagina master.  
  
```csharp  
<%@ Master Language="C#" ClassName="MasterExample" %>  
  
<script runat="server">  
        public string SiteName  
        {  
            get { return "My Site Name"; }  
        }  
</script>  
  
<html >  
<head runat="server">  
    <title>MasterPage Example</title>  
</head>  
<body>  
    <form id="form1" runat="server">  
    <div>  
        <asp:contentplaceholder id="ContentPlaceHolder1" runat="server">  
        </asp:contentplaceholder>  
    </div>  
    </form>  
</body>  
</html>  
```  
  
```vb  
<%@ Master Language="VB" ClassName="MasterExample" %>  
  
<script runat="server">  
  Public ReadOnly Property SiteName() As String  
    Get  
      Return "My Site Name"  
    End Get  
  End Property  
  
</script>  
  
<html >  
<head runat="server">  
    <title>MasterPage Example</title>  
</head>  
<body>  
    <form id="form1" runat="server">  
    <div>  
        <asp:contentplaceholder id="ContentPlaceHolder1" runat="server">  
        </asp:contentplaceholder>  
    </div>  
    </form>  
</body>  
</html>  
```  
  
 Nell'esempio seguente viene illustrato come utilizzare una pagina contenuto per accedere alla proprietà pubblica `SiteName` della pagina master nell'esempio di codice precedente.  
  
```csharp  
<%@ Page Language="C#" MasterPageFile="~/MasterPage.master" Title="MasterPage Example" %>  
  
<script runat="server">  
  protected void Page_Load(object sender, EventArgs e)  
  {  
    MasterExample m = (MasterExample)Page.Master;  
    mylabel.Text = m.SiteName;  
  }  
</script>  
  
<asp:Content ID="Content1" ContentPlaceHolderID="ContentPlaceHolder1" runat="Server">  
    Hello, Master Pages!  
    <asp:Label runat="server" Text="Label" ID="mylabel"></asp:Label>  
</asp:Content>  
```  
  
```vb  
<%@ Page Language="VB" MasterPageFile="~/MasterPage.master" Title="MasterPage Example" %>  
  
<script runat="server">  
  
  Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs)  
    Dim m As MasterExample = CType(Page.Master, MasterPage)  
    mylabel.Text = m.SiteName  
  End Sub  
</script>  
  
<asp:Content ID="Content1" ContentPlaceHolderID="ContentPlaceHolder1" runat="Server">  
    Hello, Master Pages!  
    <asp:Label runat="server" Text="Label" ID="mylabel"></asp:Label>  
</asp:Content>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.MasterPageControlBuilder" />
    <altmember cref="T:System.Web.UI.WebControls.ContentPlaceHolder" />
    <altmember cref="T:System.Web.UI.WebControls.Content" />
    <altmember cref="T:System.Web.UI.UserControl" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MasterPage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.MasterPage.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MasterPage();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Crea una nuova istanza della classe <see cref="T:System.Web.UI.MasterPage" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddContentTemplate">
      <MemberSignature Language="C#" Value="protected internal void AddContentTemplate (string templateName, System.Web.UI.ITemplate template);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AddContentTemplate(string templateName, class System.Web.UI.ITemplate template) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.MasterPage.AddContentTemplate(System.String,System.Web.UI.ITemplate)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AddContentTemplate (templateName As String, template As ITemplate)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void AddContentTemplate(System::String ^ templateName, System::Web::UI::ITemplate ^ template);" />
      <MemberSignature Language="F#" Value="member this.AddContentTemplate : string * System.Web.UI.ITemplate -&gt; unit" Usage="masterPage.AddContentTemplate (templateName, template)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templateName" Type="System.String" />
        <Parameter Name="template" Type="System.Web.UI.ITemplate" />
      </Parameters>
      <Docs>
        <param name="templateName">Nome univoco per <see cref="T:System.Web.UI.WebControls.Content" />.</param>
        <param name="template">Oggetto <see cref="T:System.Web.UI.WebControls.Content" />.</param>
        <summary>Aggiunge un controllo <see cref="T:System.Web.UI.WebControls.Content" /> al dizionario <see cref="P:System.Web.UI.MasterPage.ContentTemplates" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le classi derivate pagina master possono aggiungere <xref:System.Web.UI.WebControls.Content> stabilire controlli per il <xref:System.Web.UI.MasterPage.ContentTemplates%2A> dizionario utilizzando il <xref:System.Web.UI.MasterPage.AddContentTemplate%2A> metodo. I tipi derivati non esegue l'override in genere il <xref:System.Web.UI.MasterPage.AddContentTemplate%2A> metodo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Un controllo <see cref="T:System.Web.UI.WebControls.Content" /> con lo stesso nome è già presente nel dizionario <see cref="P:System.Web.UI.MasterPage.ContentTemplates" />.</exception>
        <altmember cref="P:System.Web.UI.MasterPage.ContentTemplates" />
      </Docs>
    </Member>
    <Member MemberName="ContentPlaceHolders">
      <MemberSignature Language="C#" Value="protected internal System.Collections.IList ContentPlaceHolders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList ContentPlaceHolders" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.MasterPage.ContentPlaceHolders" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property ContentPlaceHolders As IList" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Collections::IList ^ ContentPlaceHolders { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContentPlaceHolders : System.Collections.IList" Usage="System.Web.UI.MasterPage.ContentPlaceHolders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un elenco di controlli <see cref="T:System.Web.UI.WebControls.ContentPlaceHolder" /> utilizzati dalla pagina master per definire diverse aree di contenuto.</summary>
        <value>Interfaccia <see cref="T:System.Collections.IList" /> di controlli <see cref="T:System.Web.UI.WebControls.ContentPlaceHolder" /> utilizzati dalla pagina master come segnaposto per i controlli <see cref="T:System.Web.UI.WebControls.Content" /> presenti nelle pagine contenuto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Derivato pagine master derivate accedono i <xref:System.Web.UI.MasterPage.ContentPlaceHolders%2A> proprietà per visualizzare l'elenco corrente <xref:System.Web.UI.WebControls.ContentPlaceHolder> controlli che sono contenuti dal master. I tipi derivati non esegue l'override in genere il <xref:System.Web.UI.MasterPage.ContentPlaceHolders%2A> proprietà.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentTemplates">
      <MemberSignature Language="C#" Value="protected internal System.Collections.IDictionary ContentTemplates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary ContentTemplates" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.MasterPage.ContentTemplates" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property ContentTemplates As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Collections::IDictionary ^ ContentTemplates { System::Collections::IDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContentTemplates : System.Collections.IDictionary" Usage="System.Web.UI.MasterPage.ContentTemplates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un elenco di controlli di contenuto associati alla pagina master.</summary>
        <value>Interfaccia <see cref="T:System.Collections.IList" /> di controlli di contenuto associati alla pagina master.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Derivato pagine master derivate accedono i <xref:System.Web.UI.MasterPage.ContentTemplates%2A> proprietà da recuperare corrente <xref:System.Web.UI.WebControls.Content> controlli, come definito dalle pagine di contenuto associate. I tipi derivati non esegue l'override in genere il <xref:System.Web.UI.MasterPage.ContentTemplates%2A> proprietà.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InstantiateInContentPlaceHolder">
      <MemberSignature Language="C#" Value="public void InstantiateInContentPlaceHolder (System.Web.UI.Control contentPlaceHolder, System.Web.UI.ITemplate template);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InstantiateInContentPlaceHolder(class System.Web.UI.Control contentPlaceHolder, class System.Web.UI.ITemplate template) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.MasterPage.InstantiateInContentPlaceHolder(System.Web.UI.Control,System.Web.UI.ITemplate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InstantiateInContentPlaceHolder (contentPlaceHolder As Control, template As ITemplate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InstantiateInContentPlaceHolder(System::Web::UI::Control ^ contentPlaceHolder, System::Web::UI::ITemplate ^ template);" />
      <MemberSignature Language="F#" Value="member this.InstantiateInContentPlaceHolder : System.Web.UI.Control * System.Web.UI.ITemplate -&gt; unit" Usage="masterPage.InstantiateInContentPlaceHolder (contentPlaceHolder, template)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentPlaceHolder" Type="System.Web.UI.Control" />
        <Parameter Name="template" Type="System.Web.UI.ITemplate" />
      </Parameters>
      <Docs>
        <param name="contentPlaceHolder">Controllo che rappresenta il contenitore del contenuto.</param>
        <param name="template">Istanza di <see cref="T:System.Web.UI.WebControls.Content" /> da utilizzare.</param>
        <summary>Fornisce un metodo per impostare il controllo del modello corrente su una pagina che possiede la pagina master.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Master">
      <MemberSignature Language="C#" Value="public System.Web.UI.MasterPage Master { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.MasterPage Master" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.MasterPage.Master" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Master As MasterPage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::MasterPage ^ Master { System::Web::UI::MasterPage ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Master : System.Web.UI.MasterPage" Usage="System.Web.UI.MasterPage.Master" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.MasterPage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la pagina master padre della pagina master corrente in scenari con pagine master annidate.</summary>
        <value>Pagina master padre della pagina master corrente; in caso contrario, <see langword="null" />, se la pagina master corrente non ha una pagina master padre.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.MasterPage.Master%2A> proprietà è di sola lettura, poiché le gerarchie delle pagine master non possono essere compilate in fase di esecuzione.  
  
   
  
## Examples  
 In questa sezione contiene tre esempi di codice. Il primo esempio di codice viene illustrato come creare una pagina master annidata`.` nel secondo esempio di codice viene illustrato come fare riferimento alla pagina master che è stata creata nel primo esempio di codice. Il terzo esempio di codice viene illustrato come utilizzare una pagina contenuto per fare riferimento alla pagina master che è stata creata nel secondo esempio di codice.  
  
 Esempio di codice seguente viene illustrato come creare una pagina master annidata e rappresenta la pagina master padre denominata `ParentMasterPage_1`.  
  
```csharp  
<%@ Master Language="C#" %>  
  
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">  
  
<html >  
<head runat="server">  
    <title>Nested Master Page Example</title>  
</head>  
<body>  
    <form id="form1" runat="server">  
    <h1>This is content in the parent master page.</h1>  
    <div>  
        <asp:contentplaceholder id="ContentPlaceHolder1" runat="server">  
        </asp:contentplaceholder>  
    </div>  
    </form>  
</body>  
</html>  
```  
  
```vb  
<%@ Master Language="VB" %>  
  
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">  
  
<html >  
<head runat="server">  
    <title>Nested Master Page Example</title>  
</head>  
<body>  
    <form id="form1" runat="server">  
    <h1>This is content in the parent master page.</h1>  
    <div>  
        <asp:contentplaceholder id="ContentPlaceHolder1" runat="server">  
        </asp:contentplaceholder>  
    </div>  
    </form>  
</body>  
</html>  
```  
  
 Esempio di codice seguente viene illustrato come utilizzare una pagina master annidata denominata `ChildMasterPage_1` che fa riferimento alla pagina master che è stata creata nell'esempio di codice precedente.  
  
```csharp  
<%@ Master Language="C#" MasterPageFile="~/ParentMasterPage_1cs.master" %>  
  
<asp:Content Runat="Server" ContentPlaceHolderID="ContentPlaceHolder1">  
    <h2>This is the content of a nested Master Page.</h2>  
    <div>  
        <asp:contentplaceholder id="ContentPlaceHolder2" runat="server">  
        </asp:contentplaceholder>  
    </div>  
</asp:Content>  
```  
  
```vb  
<%@ Master Language="VB" MasterPageFile="~/ParentMasterPage_1vb.master" %>  
  
<asp:Content Runat="Server" ContentPlaceHolderID="ContentPlaceHolder1">  
    <h2>This is the content of a nested Master Page.</h2>  
    <div>  
        <asp:contentplaceholder id="ContentPlaceHolder2" runat="server">  
        </asp:contentplaceholder>  
    </div>  
</asp:Content>  
```  
  
 Esempio di codice seguente viene illustrato come utilizzare una pagina contenuta denominata `ContentPage` che fa riferimento il `ChildMasterPage_1` che è stato creato nell'esempio di codice precedente.  
  
```csharp  
<%@ Page Language="C#" MasterPageFile="~/ChildMasterPage_1cs.master" Title="Untitled Page"%>  
  
<asp:content runat="server" contentplaceholderid="ContentPlaceHolder2">  
This is the content of a Content control.  
</asp:content>  
```  
  
```vb  
<%@ Page Language="VB" MasterPageFile="~/ChildMasterPage_1vb.master" Title="Untitled Page"%>  
  
<asp:content runat="server" contentplaceholderid="ContentPlaceHolder2">  
This is the content of a Content control.  
</asp:content>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MasterPageFile">
      <MemberSignature Language="C#" Value="public string MasterPageFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MasterPageFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.MasterPage.MasterPageFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MasterPageFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MasterPageFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MasterPageFile : string with get, set" Usage="System.Web.UI.MasterPage.MasterPageFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome della pagina master contenente il contenuto corrente.</summary>
        <value>Nome della pagina master padre della pagina master corrente; in caso contrario, <see langword="null" />, se la pagina master corrente non ha una pagina master padre.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 In questa sezione contiene tre esempi di codice. Il primo esempio di codice viene illustrato come creare una pagina master annidata`.` nel secondo esempio di codice viene illustrato come fare riferimento alla pagina master che è stata creata nel primo esempio di codice. Il terzo esempio di codice viene illustrato come utilizzare una pagina contenuto per fare riferimento alla pagina master che è stata creata nel secondo esempio di codice.  
  
 Esempio di codice seguente viene illustrato come creare una pagina master annidata e rappresenta la pagina master padre denominata `ParentMasterPage_1`.  
  
```csharp  
<%@ Master Language="C#" %>  
  
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">  
  
<html >  
<head runat="server">  
    <title>Nested Master Page Example</title>  
</head>  
<body>  
    <form id="form1" runat="server">  
    <h1>This is content in the parent master page.</h1>  
    <div>  
        <asp:contentplaceholder id="ContentPlaceHolder1" runat="server">  
        </asp:contentplaceholder>  
    </div>  
    </form>  
</body>  
</html>  
```  
  
```vb  
<%@ Master Language="VB" %>  
  
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">  
  
<html >  
<head runat="server">  
    <title>Nested Master Page Example</title>  
</head>  
<body>  
    <form id="form1" runat="server">  
    <h1>This is content in the parent master page.</h1>  
    <div>  
        <asp:contentplaceholder id="ContentPlaceHolder1" runat="server">  
        </asp:contentplaceholder>  
    </div>  
    </form>  
</body>  
</html>  
```  
  
 Esempio di codice seguente viene illustrato come utilizzare una pagina master annidata denominata `ChildMasterPage_1` che fa riferimento alla pagina master che è stata creata nell'esempio di codice precedente.  
  
```csharp  
<%@ Master Language="C#" MasterPageFile="~/ParentMasterPage_1cs.master" %>  
  
<asp:Content Runat="Server" ContentPlaceHolderID="ContentPlaceHolder1">  
    <h2>This is the content of a nested Master Page.</h2>  
    <div>  
        <asp:contentplaceholder id="ContentPlaceHolder2" runat="server">  
        </asp:contentplaceholder>  
    </div>  
</asp:Content>  
```  
  
```vb  
<%@ Master Language="VB" MasterPageFile="~/ParentMasterPage_1vb.master" %>  
  
<asp:Content Runat="Server" ContentPlaceHolderID="ContentPlaceHolder1">  
    <h2>This is the content of a nested Master Page.</h2>  
    <div>  
        <asp:contentplaceholder id="ContentPlaceHolder2" runat="server">  
        </asp:contentplaceholder>  
    </div>  
</asp:Content>  
```  
  
 Esempio di codice seguente viene illustrato come utilizzare una pagina contenuta denominata `ContentPage` che fa riferimento il `ChildMasterPage_1` che è stato creato nell'esempio di codice precedente.  
  
```csharp  
<%@ Page Language="C#" MasterPageFile="~/ChildMasterPage_1cs.master" Title="Untitled Page"%>  
  
<asp:content runat="server" contentplaceholderid="ContentPlaceHolder2">  
This is the content of a Content control.  
</asp:content>  
```  
  
```vb  
<%@ Page Language="VB" MasterPageFile="~/ChildMasterPage_1vb.master" Title="Untitled Page"%>  
  
<asp:content runat="server" contentplaceholderid="ContentPlaceHolder2">  
This is the content of a Content control.  
</asp:content>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La proprietà <see cref="P:System.Web.UI.MasterPage.MasterPageFile" /> può essere impostata esclusivamente nell'evento <see cref="E:System.Web.UI.Page.PreInit" /> o prima di esso.</exception>
      </Docs>
    </Member>
  </Members>
</Type>