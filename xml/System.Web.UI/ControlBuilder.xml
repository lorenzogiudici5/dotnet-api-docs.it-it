<Type Name="ControlBuilder" FullName="System.Web.UI.ControlBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f9f189e34352a9bc82c2ac71e575d4e05ef76238" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30611065" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ControlBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ControlBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ControlBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class ControlBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class ControlBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Supporta il parser della pagina nella compilazione di un controllo e dei controlli figlio in esso contenuti.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, ogni controllo in una pagina è associata a un valore predefinito <xref:System.Web.UI.ControlBuilder> classe. Durante l'analisi, il framework della pagina ASP.NET viene compilato un albero di <xref:System.Web.UI.ControlBuilder> oggetti corrispondenti all'albero dei controlli per la pagina. Il <xref:System.Web.UI.ControlBuilder> albero viene quindi usato per generare codice della pagina per creare l'albero controllo. Oltre ai controlli figlio, il <xref:System.Web.UI.ControlBuilder> definisce il comportamento della modalità di analisi del contenuto di tag del controllo. È possibile eseguire l'override di questo comportamento predefinito definendo la propria classe generatore di controllo personalizzato. Questa operazione viene eseguita applicando una <xref:System.Web.UI.ControlBuilderAttribute> attributo alla classe del generatore di controllo, come indicato di seguito:  
  
 `[ControlBuilderAttribute(typeof(ControlBuilderType))]`  
  
   
  
## Examples  
 L'esempio di codice seguente crea un <xref:System.Web.UI.WebControls.Table> controllo vengono definiti i cui attributi e contenuto in fase di compilazione della tabella. Di seguito è la riga di comando da utilizzare per compilare l'eseguibile.  
  
```vb  
vbc /r:System.dll /r:System.Web.dll /r:System.Drawing.dll /t:library /out:myWebAppPath/Bin/vb_mycontrolbuilder.dll myControlBuilder.vb  
```  
  
```csharp  
csc /t:library /out:myWebAppPath/Bin/cs_mycontrolbuilder.dll myControlBuilder.cs  
```  
  
 [!code-csharp[SystemWebUI_ControlBuilder_2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/SystemWebUI_ControlBuilder_2/CS/controlbuilder.cs#1)]
 [!code-vb[SystemWebUI_ControlBuilder_2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/SystemWebUI_ControlBuilder_2/VB/controlbuilder.vb#1)]  
  
 Esempio di codice seguente usa il controllo personalizzato precedente. In particolare, viene generata una tabella i cui attributi e contenuto sono definiti in fase di esecuzione. Si noti che i valori riportati nella direttiva riflettono la riga di comando precedente.  
  
 [!code-aspx-csharp[SystemWebUI_ControlBuilder_2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/SystemWebUI_ControlBuilder_2/CS/controlbuilder.aspx#2)]
 [!code-aspx-vb[SystemWebUI_ControlBuilder_2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/SystemWebUI_ControlBuilder_2/VB/controlbuilder.aspx#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.Control" />
    <altmember cref="T:System.Web.UI.WebControls.WebControl" />
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="T:System.Web.UI.ControlBuilderAttribute" />
    <altmember cref="T:System.Web.UI.ParseChildrenAttribute" />
    <altmember cref="T:System.Web.UI.PersistChildrenAttribute" />
    <altmember cref="M:System.Web.UI.Control.AddParsedSubObject(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.ControlBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo costruttore per creare una nuova istanza di <xref:System.Web.UI.ControlBuilder> classe.  
  
> [!NOTE]
>  Questo costruttore viene in genere utilizzato da ASP.NET durante l'analisi della pagina e la creazione della gerarchia dei controlli. Non è progettato per l'utilizzo nel codice.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowWhitespaceLiterals">
      <MemberSignature Language="C#" Value="public virtual bool AllowWhitespaceLiterals ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AllowWhitespaceLiterals() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlBuilder.AllowWhitespaceLiterals" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AllowWhitespaceLiterals () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool AllowWhitespaceLiterals();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determina se sono consentiti valori letterali con spazi nel contenuto tra i tag di apertura e di chiusura di un controllo. Questo metodo viene chiamato dal framework per le pagine ASP.NET.</summary>
        <returns>Restituisce sempre <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ControlBuilder.AllowWhitespaceLiterals%2A> metodo viene utilizzato per determinare se sono consentiti valori letterali di spazi vuoti nel contenuto tra i tag di apertura e chiusura di un controllo. Quando questo metodo restituisce `false`, i valori letterali di spazi vuoti vengono rimossi dal contenuto prima che il contenuto viene elaborato dal parser della pagina. Quando questo metodo restituisce `true`, i valori letterali con spazi non rimossi.  
  
 Questo metodo viene chiamato dal framework della pagina ASP.NET durante l'analisi e non deve essere chiamato direttamente nel codice creato.  
  
   
  
## Examples  
 [!code-csharp[ControlBuilderSamples_1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/ControlBuilderSamples_1/CS/ctrlbuilder_1.cs#4)]
 [!code-vb[ControlBuilderSamples_1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ControlBuilderSamples_1/VB/ctrlbuilder_1.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>È possibile eseguire l'override di questo metodo nella classe derivata per indicare se sono consentiti valori letterali di spazi vuoti nel controllo personalizzato.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="AppendLiteralString">
      <MemberSignature Language="C#" Value="public virtual void AppendLiteralString (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendLiteralString(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlBuilder.AppendLiteralString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AppendLiteralString (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AppendLiteralString(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Contenuto da aggiungere al controllo.</param>
        <summary>Aggiunge il contenuto literal specificato a un controllo. Questo metodo viene chiamato dal framework per le pagine ASP.NET.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eseguire l'override di <xref:System.Web.UI.ControlBuilder.AppendLiteralString%2A> metodo per controllare il contenuto come valore letterale tra il controllo tag di apertura e chiusura viene elaborato. Contenuto in formato letterale può essere qualsiasi testo che viene passato dal browser per il controllo del server. Ad esempio, gli elementi HTML e il testo tra i tag di apertura e chiusura, sono contenuto in formato letterale.  
  
   
  
## Examples  
 [!code-csharp[ControlBuilderSamples_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/ControlBuilderSamples_1/CS/ctrlbuilder_1.cs#3)]
 [!code-vb[ControlBuilderSamples_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ControlBuilderSamples_1/VB/ctrlbuilder_1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Il formato della stringa letterale non è corretto.</exception>
      </Docs>
    </Member>
    <Member MemberName="AppendSubBuilder">
      <MemberSignature Language="C#" Value="public virtual void AppendSubBuilder (System.Web.UI.ControlBuilder subBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendSubBuilder(class System.Web.UI.ControlBuilder subBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlBuilder.AppendSubBuilder(System.Web.UI.ControlBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AppendSubBuilder (subBuilder As ControlBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AppendSubBuilder(System::Web::UI::ControlBuilder ^ subBuilder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subBuilder" Type="System.Web.UI.ControlBuilder" />
      </Parameters>
      <Docs>
        <param name="subBuilder">Oggetto <see cref="T:System.Web.UI.ControlBuilder" /> assegnato al controllo figlio.</param>
        <summary>Aggiunge generatori all'oggetto <see cref="T:System.Web.UI.ControlBuilder" /> per qualsiasi controllo figlio che appartiene al controllo contenitore.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente esegue l'override di <xref:System.Web.UI.ControlBuilder.AppendSubBuilder%2A> metodo consente di generare un <xref:System.Exception> se il controllo è applicato il generatore di controllo tenta di inserire controlli in all'istanza di <xref:System.Web.UI.ControlCollection> classe.  
  
 [!code-csharp[ControlBuilderSamples_2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ControlBuilderSamples_2/cs/ctrlbuilder1.cs#1)]
 [!code-vb[ControlBuilderSamples_2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ControlBuilderSamples_2/VB/ctrlbuilder1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ControlBuilder" />
      </Docs>
    </Member>
    <Member MemberName="BindingContainerBuilder">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ControlBuilder BindingContainerBuilder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ControlBuilder BindingContainerBuilder" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlBuilder.BindingContainerBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property BindingContainerBuilder As ControlBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ControlBuilder ^ BindingContainerBuilder { System::Web::UI::ControlBuilder ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il generatore di controlli che corrisponde al contenitore di associazione per il controllo creato da questo generatore.</summary>
        <value>Il generatore di controlli che corrisponde al contenitore di associazione per il controllo.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingContainerType">
      <MemberSignature Language="C#" Value="public virtual Type BindingContainerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BindingContainerType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlBuilder.BindingContainerType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property BindingContainerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ BindingContainerType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il tipo di contenitore di associazione per il controllo creato da questo generatore.</summary>
        <value>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di contenitore di associazione per il controllo creato da questo generatore.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.Control.BindingContainer" />
      </Docs>
    </Member>
    <Member MemberName="BuildObject">
      <MemberSignature Language="C#" Value="public virtual object BuildObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BuildObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlBuilder.BuildObject" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BuildObject () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ BuildObject();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Compila un'istanza in fase di progettazione del controllo a cui questo oggetto <see cref="T:System.Web.UI.ControlBuilder" /> fa riferimento.</summary>
        <returns>Controllo compilato risultante.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseControl">
      <MemberSignature Language="C#" Value="public virtual void CloseControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CloseControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlBuilder.CloseControl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CloseControl ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CloseControl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Metodo chiamato dal parser per comunicare al generatore che l'analisi dei tag di apertura e di chiusura del controllo è terminata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.ControlBuilder.CloseControl%2A> metodo viene utilizzato dal parser per indicare al generatore che ha completato l'analisi del controllo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexPropertyEntries">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection ComplexPropertyEntries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection ComplexPropertyEntries" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlBuilder.ComplexPropertyEntries" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ComplexPropertyEntries As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ICollection ^ ComplexPropertyEntries { System::Collections::ICollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene una raccolta di voci di proprietà complesse.</summary>
        <value>Raccolta di voci di proprietà complesse.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se non sono presenti voci, viene restituito un insieme vuoto statico.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlType">
      <MemberSignature Language="C#" Value="public Type ControlType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ControlType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlBuilder.ControlType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ControlType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ControlType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Type" /> per il controllo da creare.</summary>
        <value>Oggetto <see cref="T:System.Type" /> per il controllo da creare.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Questo esempio sostituisce il <xref:System.Web.UI.ControlBuilder.OnAppendToParentBuilder%2A> metodo per verificare la <xref:System.Web.UI.ControlBuilder.ControlType%2A> proprietà per determinare il tipo di controllo di questo generatore viene applicata alla. Se è un `CustomTextBox`, il generatore verifica se il valore della <xref:System.Web.UI.ControlBuilder.HasAspCode%2A> proprietà è inclusa nel controllo. Se in tal caso, viene generata un'eccezione, se non la <xref:System.Web.UI.ControlBuilder.HasBody%2A> metodo viene chiamato.  
  
 [!code-csharp[ControlBuilderSamples_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ControlBuilderSamples_4/cs/controlbuilder_4.cs#1)]
 [!code-vb[ControlBuilderSamples_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ControlBuilderSamples_4/VB/controlbuilder_4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="CreateBuilderFromType">
      <MemberSignature Language="C#" Value="public static System.Web.UI.ControlBuilder CreateBuilderFromType (System.Web.UI.TemplateParser parser, System.Web.UI.ControlBuilder parentBuilder, Type type, string tagName, string id, System.Collections.IDictionary attribs, int line, string sourceFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.ControlBuilder CreateBuilderFromType(class System.Web.UI.TemplateParser parser, class System.Web.UI.ControlBuilder parentBuilder, class System.Type type, string tagName, string id, class System.Collections.IDictionary attribs, int32 line, string sourceFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlBuilder.CreateBuilderFromType(System.Web.UI.TemplateParser,System.Web.UI.ControlBuilder,System.Type,System.String,System.String,System.Collections.IDictionary,System.Int32,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::ControlBuilder ^ CreateBuilderFromType(System::Web::UI::TemplateParser ^ parser, System::Web::UI::ControlBuilder ^ parentBuilder, Type ^ type, System::String ^ tagName, System::String ^ id, System::Collections::IDictionary ^ attribs, int line, System::String ^ sourceFileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parser" Type="System.Web.UI.TemplateParser" />
        <Parameter Name="parentBuilder" Type="System.Web.UI.ControlBuilder" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="tagName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="attribs" Type="System.Collections.IDictionary" />
        <Parameter Name="line" Type="System.Int32" />
        <Parameter Name="sourceFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parser">Oggetto <see cref="T:System.Web.UI.TemplateParser" /> responsabile dell'analisi del controllo.</param>
        <param name="parentBuilder">Oggetto <see cref="T:System.Web.UI.ControlBuilder" /> responsabile della compilazione del controllo padre.</param>
        <param name="type">
          <see cref="T:System.Type" /> dell'oggetto che verrà creato dal generatore.</param>
        <param name="tagName">Nome del tag da creare. che consente al generatore di supportare più tipi di tag.</param>
        <param name="id">Attributo della proprietà <see cref="P:System.Web.UI.ControlBuilder.ID" /> assegnato al controllo.</param>
        <param name="attribs">Oggetto <see cref="T:System.Collections.IDictionary" /> contenente tutti gli attributi del tag specificato.</param>
        <param name="line">Numero di riga del file di origine per il controllo specificato.</param>
        <param name="sourceFileName">Nome del file di origine da utilizzare per la creazione del controllo.</param>
        <summary>Crea un oggetto <see cref="T:System.Web.UI.ControlBuilder" /> dal nome di tag e dal tipo di oggetto specificati, oltre ad altri parametri che definiscono il generatore.</summary>
        <returns>Generatore responsabile della creazione del controllo.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentFilterResolutionService">
      <MemberSignature Language="C#" Value="public System.Web.UI.IFilterResolutionService CurrentFilterResolutionService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.IFilterResolutionService CurrentFilterResolutionService" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlBuilder.CurrentFilterResolutionService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentFilterResolutionService As IFilterResolutionService" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::IFilterResolutionService ^ CurrentFilterResolutionService { System::Web::UI::IFilterResolutionService ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.IFilterResolutionService</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.Web.UI.IFilterResolutionService" /> che consente di gestire i servizi correlati ai filtri di periferica durante l'analisi e il mantenimento dei controlli nella finestra di progettazione.</summary>
        <value>Oggetto <see cref="T:System.Web.UI.IFilterResolutionService" /> che consente di gestire i servizi correlati ai filtri di dispositivo durante l'analisi e il mantenimento dei controlli nella finestra di progettazione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.IFilterResolutionService> è un'interfaccia specifica per l'utilizzo dei filtri di dispositivo da parte di un controllo in una finestra di progettazione. Quando i controlli vengono analizzati o mantenuti nella finestra di progettazione all'esterno del contesto di una richiesta del browser, il <xref:System.Web.UI.IFilterResolutionService> fornisce un modo per determinare se il controllo corrente è applicato un filtro denominato e se un filtro denominato fa parte di un filtro di dispositivo specifico gerarchia.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IFilterResolutionService" />
      </Docs>
    </Member>
    <Member MemberName="DeclareType">
      <MemberSignature Language="C#" Value="public virtual Type DeclareType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclareType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlBuilder.DeclareType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DeclareType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclareType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il tipo che verrà utilizzato dalla generazione del codice per dichiarare il controllo.</summary>
        <value>
          <see cref="T:System.Type" /> del controllo utilizzato dalla generazione del codice per dichiarare il controllo.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DesignerFilter">
      <MemberSignature Language="C#" Value="public static readonly string DesignerFilter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string DesignerFilter" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.ControlBuilder.DesignerFilter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DesignerFilter As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ DesignerFilter;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Rappresenta la stringa letterale <c>"__designer"</c>.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FChildrenAsProperties">
      <MemberSignature Language="C#" Value="protected bool FChildrenAsProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FChildrenAsProperties" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlBuilder.FChildrenAsProperties" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property FChildrenAsProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool FChildrenAsProperties { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che determina se il controllo ha un <see cref="T:System.Web.UI.ParseChildrenAttribute" /> con <see cref="P:System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties" /> impostato su <see langword="true" />.</summary>
        <value>
          <see langword="true" /> se il controllo contiene un oggetto <see cref="T:System.Web.UI.ParseChildrenAttribute" /> con la proprietà <see cref="P:System.Web.UI.ParseChildrenAttribute.ChildrenAsProperties" /> impostata su <see langword="true" />; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FIsNonParserAccessor">
      <MemberSignature Language="C#" Value="protected bool FIsNonParserAccessor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FIsNonParserAccessor" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlBuilder.FIsNonParserAccessor" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property FIsNonParserAccessor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool FIsNonParserAccessor { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che determina se il controllo implementa l'interfaccia <see cref="T:System.Web.UI.IParserAccessor" />.</summary>
        <value>
          <see langword="false" /> se il controllo implementa l'interfaccia <see cref="T:System.Web.UI.IParserAccessor" />; in caso contrario <see langword="true" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildControlType">
      <MemberSignature Language="C#" Value="public virtual Type GetChildControlType (string tagName, System.Collections.IDictionary attribs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetChildControlType(string tagName, class System.Collections.IDictionary attribs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlBuilder.GetChildControlType(System.String,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetChildControlType (tagName As String, attribs As IDictionary) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetChildControlType(System::String ^ tagName, System::Collections::IDictionary ^ attribs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
        <Parameter Name="attribs" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="tagName">Nome del tag del controllo figlio.</param>
        <param name="attribs">Matrice di attributi contenuti nel controllo figlio.</param>
        <summary>Ottiene l'oggetto <see cref="T:System.Type" /> del tipo di controllo corrispondente a un tag figlio. Questo metodo viene chiamato dal framework per le pagine ASP.NET.</summary>
        <returns>Oggetto <see cref="T:System.Type" /> del controllo figlio del controllo specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene chiamato dal framework della pagina ASP.NET durante l'analisi e non deve essere chiamato direttamente nel codice creato.  
  
   
  
## Examples  
 [!code-csharp[ControlBuilderSamples_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/ControlBuilderSamples_1/CS/ctrlbuilder_1.cs#2)]
 [!code-vb[ControlBuilderSamples_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ControlBuilderSamples_1/VB/ctrlbuilder_1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectPersistData">
      <MemberSignature Language="C#" Value="public System.Web.UI.ObjectPersistData GetObjectPersistData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.UI.ObjectPersistData GetObjectPersistData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlBuilder.GetObjectPersistData" />
      <MemberSignature Language="VB.NET" Value="Public Function GetObjectPersistData () As ObjectPersistData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::ObjectPersistData ^ GetObjectPersistData();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ObjectPersistData</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea l'oggetto <see cref="T:System.Web.UI.ObjectPersistData" /> per questo oggetto <see cref="T:System.Web.UI.ControlBuilder" />.</summary>
        <returns>Oggetto <see cref="T:System.Web.UI.ObjectPersistData" /> per <see cref="T:System.Web.UI.ControlBuilder" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.ObjectPersistData" />
      </Docs>
    </Member>
    <Member MemberName="GetResourceKey">
      <MemberSignature Language="C#" Value="public string GetResourceKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetResourceKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlBuilder.GetResourceKey" />
      <MemberSignature Language="VB.NET" Value="Public Function GetResourceKey () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetResourceKey();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera la chiave di risorsa per questo oggetto <see cref="T:System.Web.UI.ControlBuilder" />.</summary>
        <returns>Chiave di risorsa per questo oggetto <see cref="T:System.Web.UI.ControlBuilder" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.ControlBuilder.SetResourceKey(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasAspCode">
      <MemberSignature Language="C#" Value="public virtual bool HasAspCode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAspCode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlBuilder.HasAspCode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HasAspCode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HasAspCode { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il controllo contiene blocchi di codice.</summary>
        <value>
          <see langword="true" /> se il controllo contiene almeno un blocco di codice; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Questo esempio sostituisce il <xref:System.Web.UI.ControlBuilder.OnAppendToParentBuilder%2A> metodo per verificare la <xref:System.Web.UI.ControlBuilder.ControlType%2A> proprietà per determinare il tipo di controllo di questo generatore viene applicata alla. Se è un `CustomTextBox`, il generatore verifica se il valore della <xref:System.Web.UI.ControlBuilder.HasAspCode%2A> proprietà è inclusa nel controllo. Se in tal caso, viene generata un'eccezione, se non la <xref:System.Web.UI.ControlBuilder.HasBody%2A> metodo viene chiamato.  
  
 [!code-csharp[ControlBuilderSamples_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ControlBuilderSamples_4/cs/controlbuilder_4.cs#1)]
 [!code-vb[ControlBuilderSamples_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ControlBuilderSamples_4/VB/controlbuilder_4.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasBody">
      <MemberSignature Language="C#" Value="public virtual bool HasBody ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasBody() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlBuilder.HasBody" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasBody () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool HasBody();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determina se un controllo dispone di entrambi i tag di apertura e chiusura. Questo metodo viene chiamato dal framework per le pagine ASP.NET.</summary>
        <returns>
          <see langword="true" /> se il controllo dispone di un tag di apertura e di un tag di chiusura; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene chiamato dal framework della pagina ASP.NET durante l'analisi e non deve essere chiamato direttamente nel codice creato.  
  
   
  
## Examples  
 Questo esempio sostituisce il <xref:System.Web.UI.ControlBuilder.OnAppendToParentBuilder%2A> metodo per verificare la <xref:System.Web.UI.ControlBuilder.ControlType%2A> proprietà per determinare il tipo di controllo di questo generatore viene applicata alla. Se è un `CustomTextBox`, il generatore verifica se il valore della <xref:System.Web.UI.ControlBuilder.HasAspCode%2A> proprietà è inclusa nel controllo. Se in tal caso, viene generata un'eccezione, se non la <xref:System.Web.UI.ControlBuilder.HasBody%2A> metodo viene chiamato.  
  
 [!code-csharp[ControlBuilderSamples_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ControlBuilderSamples_4/cs/controlbuilder_4.cs#1)]
 [!code-vb[ControlBuilderSamples_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ControlBuilderSamples_4/VB/controlbuilder_4.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlDecodeLiterals">
      <MemberSignature Language="C#" Value="public virtual bool HtmlDecodeLiterals ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HtmlDecodeLiterals() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlBuilder.HtmlDecodeLiterals" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HtmlDecodeLiterals () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool HtmlDecodeLiterals();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determina se la stringa letterale di un controllo HTML deve essere decodificata in linguaggio HTML. Questo metodo viene chiamato dal framework per le pagine ASP.NET.</summary>
        <returns>
          <see langword="true" /> se la stringa letterale del controllo HTML deve essere decodificata; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una stringa letterale fa riferimento al testo tra i tag di apertura e chiusura di un controllo HTML. La codifica HTML è quando viene convertito in una rappresentazione di stringa che il browser visualizzerà, anziché interpretare come HTML. Caratteri, ad esempio il punto interrogativo (?), e commerciale (&), barra (/) di contrassegnare e spazi potrebbero essere troncati o danneggiati da alcuni browser, tali caratteri devono essere codificati quando sono presenti in `a` tag o nelle stringhe di query.  
  
 Il <xref:System.Web.UI.ControlBuilder.HtmlDecodeLiterals%2A> metodo viene chiamato dal framework della pagina ASP.NET durante l'analisi e non deve essere chiamato direttamente nel codice creato.  
  
   
  
## Examples  
 Nell'esempio seguente esegue l'override di <xref:System.Web.UI.ControlBuilder.HtmlDecodeLiterals%2A> metodo per consentire la decodifica HTML delle stringhe letterali in qualsiasi controllo a cui è applicato questo generatore.  
  
 [!code-csharp[ControlBuilderSamples_2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/ControlBuilderSamples_2/cs/ctrlbuilder1.cs#2)]
 [!code-vb[ControlBuilderSamples_2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ControlBuilderSamples_2/VB/ctrlbuilder1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlBuilder.ID" />
      <MemberSignature Language="VB.NET" Value="Public Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la proprietà ID per il controllo da compilare.</summary>
        <value>Proprietà ID del controllo.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InDesigner">
      <MemberSignature Language="C#" Value="protected bool InDesigner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InDesigner" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlBuilder.InDesigner" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property InDesigner As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool InDesigner { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Restituisce un valore che indica se l'oggetto <see cref="T:System.Web.UI.ControlBuilder" /> è in esecuzione nella finestra di progettazione.</summary>
        <value>
          <see langword="true" /> se l'oggetto <see cref="T:System.Web.UI.ControlBuilder" /> è in esecuzione nella finestra di progettazione; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio seguente usa il <xref:System.Web.UI.ControlBuilder.InDesigner%2A> proprietà quando il <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> metodo viene chiamato. Quando un controllo associato, questo generatore di <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> metodo determina se il controllo si accede in fase di progettazione tramite una finestra di progettazione. Il <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> restituisce il valore della <xref:System.Web.UI.ControlBuilder.InDesigner%2A> proprietà, quindi il <xref:System.Web.UI.ControlBuilder.SetTagInnerText%2A> metodo viene chiamato. Se il <xref:System.Web.UI.ControlBuilder.InDesigner%2A> è impostata su `false`, un <xref:System.Exception> viene generata un'eccezione. In caso contrario, il testo interno del controllo viene restituito nel <xref:System.Web.UI.ControlBuilder.SetTagInnerText%2A> chiamare.  
  
 [!code-csharp[ControlBuilderSamples_3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ControlBuilderSamples_3/cs/controlbuilder_samples3.cs#1)]
 [!code-vb[ControlBuilderSamples_3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ControlBuilderSamples_3/VB/controlbuilder_samples3.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Init">
      <MemberSignature Language="C#" Value="public virtual void Init (System.Web.UI.TemplateParser parser, System.Web.UI.ControlBuilder parentBuilder, Type type, string tagName, string id, System.Collections.IDictionary attribs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Init(class System.Web.UI.TemplateParser parser, class System.Web.UI.ControlBuilder parentBuilder, class System.Type type, string tagName, string id, class System.Collections.IDictionary attribs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlBuilder.Init(System.Web.UI.TemplateParser,System.Web.UI.ControlBuilder,System.Type,System.String,System.String,System.Collections.IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Init(System::Web::UI::TemplateParser ^ parser, System::Web::UI::ControlBuilder ^ parentBuilder, Type ^ type, System::String ^ tagName, System::String ^ id, System::Collections::IDictionary ^ attribs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parser" Type="System.Web.UI.TemplateParser" />
        <Parameter Name="parentBuilder" Type="System.Web.UI.ControlBuilder" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="tagName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="attribs" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="parser">Oggetto <see cref="T:System.Web.UI.TemplateParser" /> responsabile dell'analisi del controllo.</param>
        <param name="parentBuilder">Oggetto <see cref="T:System.Web.UI.ControlBuilder" /> responsabile della compilazione del controllo padre.</param>
        <param name="type">Oggetto <see cref="T:System.Type" /> assegnato al controllo che verrà creato dal generatore.</param>
        <param name="tagName">Nome del tag da creare. che consente al generatore di supportare più tipi di tag.</param>
        <param name="id">Attributo della proprietà <see cref="P:System.Web.UI.ControlBuilder.ID" /> assegnato al controllo.</param>
        <param name="attribs">Oggetto <see cref="T:System.Collections.IDictionary" /> contenente tutti gli attributi del tag specificato.</param>
        <summary>Inizializza l'oggetto <see cref="T:System.Web.UI.ControlBuilder" /> da utilizzare dopo la creazione della relativa istanza. Questo metodo viene chiamato dal framework per le pagine ASP.NET.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene chiamato dal framework della pagina ASP.NET durante l'analisi e non deve essere chiamato direttamente nel codice creato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InPageTheme">
      <MemberSignature Language="C#" Value="protected bool InPageTheme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InPageTheme" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlBuilder.InPageTheme" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property InPageTheme As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool InPageTheme { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore Boolean che indica se questo oggetto <see cref="T:System.Web.UI.ControlBuilder" /> viene utilizzato per generare temi di pagina.</summary>
        <value>
          <see langword="true" /> per utilizzare questo oggetto <see cref="T:System.Web.UI.ControlBuilder" /> per generare temi di pagina; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemType">
      <MemberSignature Language="C#" Value="public virtual string ItemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ItemType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlBuilder.ItemType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ItemType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ItemType { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il tipo impostato sul contenitore di associazione.</summary>
        <value>Tipo impostato sul contenitore di associazione.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Localize">
      <MemberSignature Language="C#" Value="public bool Localize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Localize" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlBuilder.Localize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Localize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Localize { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore Boolean che indica se il controllo creato da questo oggetto <see cref="T:System.Web.UI.ControlBuilder" /> è localizzato.</summary>
        <value>
          <see langword="true" /> per indicare che il controllo creato da questo oggetto <see cref="T:System.Web.UI.ControlBuilder" /> è localizzato; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamingContainerType">
      <MemberSignature Language="C#" Value="public Type NamingContainerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type NamingContainerType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlBuilder.NamingContainerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NamingContainerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ NamingContainerType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il tipo di contenitore di denominazione per il controllo creato da questo generatore.</summary>
        <value>
          <see cref="T:System.Type" /> che rappresenta il tipo di contenitore di denominazione per il controllo creato da questo generatore.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.ControlBuilder.ControlType" />
      </Docs>
    </Member>
    <Member MemberName="NeedsTagInnerText">
      <MemberSignature Language="C#" Value="public virtual bool NeedsTagInnerText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool NeedsTagInnerText() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlBuilder.NeedsTagInnerText" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function NeedsTagInnerText () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool NeedsTagInnerText();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determina se il generatore di controllo deve ottenere il testo interno. In questo caso, è necessario chiamare il metodo <see cref="M:System.Web.UI.ControlBuilder.SetTagInnerText(System.String)" />. Questo metodo viene chiamato dal framework per le pagine ASP.NET.</summary>
        <returns>
          <see langword="true" /> se il generatore di controllo deve ottenere il testo interno. Il valore predefinito è <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il testo interno è il testo tra i tag di apertura e chiusura del controllo.  
  
 Questo metodo viene chiamato dal framework della pagina ASP.NET durante l'analisi e non deve essere chiamato direttamente nel codice creato.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.Web.UI.ControlBuilder.InDesigner%2A> proprietà quando il <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> metodo viene chiamato. Quando un controllo associato, questo generatore di <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> determina se il controllo si accede in fase di progettazione tramite una finestra di progettazione. Il <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> restituisce il valore della <xref:System.Web.UI.ControlBuilder.InDesigner%2A> proprietà, quindi il <xref:System.Web.UI.ControlBuilder.SetTagInnerText%2A> metodo viene chiamato. Se il <xref:System.Web.UI.ControlBuilder.InDesigner%2A> è impostata su `false`, un <xref:System.Exception> viene generata un'eccezione. In caso contrario, il testo interno del controllo viene restituito nel <xref:System.Web.UI.ControlBuilder.SetTagInnerText%2A> chiamare.  
  
 [!code-csharp[ControlBuilderSamples_3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ControlBuilderSamples_3/cs/controlbuilder_samples3.cs#1)]
 [!code-vb[ControlBuilderSamples_3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ControlBuilderSamples_3/VB/controlbuilder_samples3.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAppendToParentBuilder">
      <MemberSignature Language="C#" Value="public virtual void OnAppendToParentBuilder (System.Web.UI.ControlBuilder parentBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnAppendToParentBuilder(class System.Web.UI.ControlBuilder parentBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlBuilder.OnAppendToParentBuilder(System.Web.UI.ControlBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnAppendToParentBuilder (parentBuilder As ControlBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnAppendToParentBuilder(System::Web::UI::ControlBuilder ^ parentBuilder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentBuilder" Type="System.Web.UI.ControlBuilder" />
      </Parameters>
      <Docs>
        <param name="parentBuilder">Oggetto <see cref="T:System.Web.UI.ControlBuilder" /> a cui viene aggiunto il generatore corrente.</param>
        <summary>Notifica all'oggetto <see cref="T:System.Web.UI.ControlBuilder" /> che viene aggiunto a un generatore di controllo padre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Questo esempio sostituisce il <xref:System.Web.UI.ControlBuilder.OnAppendToParentBuilder%2A> metodo per verificare la <xref:System.Web.UI.ControlBuilder.ControlType%2A> proprietà per determinare il tipo di controllo di questo generatore viene applicata alla. Se è un `CustomTextBox`, il generatore verifica se il valore della <xref:System.Web.UI.ControlBuilder.HasAspCode%2A> proprietà è inclusa nel controllo. Se in tal caso, viene generata un'eccezione, se non la <xref:System.Web.UI.ControlBuilder.HasBody%2A> metodo viene chiamato.  
  
 [!code-csharp[ControlBuilderSamples_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ControlBuilderSamples_4/cs/controlbuilder_4.cs#1)]
 [!code-vb[ControlBuilderSamples_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ControlBuilderSamples_4/VB/controlbuilder_4.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PageVirtualPath">
      <MemberSignature Language="C#" Value="public string PageVirtualPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PageVirtualPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlBuilder.PageVirtualPath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PageVirtualPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PageVirtualPath { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il percorso virtuale di una pagina da compilare a partire da questa istanza di <see cref="T:System.Web.UI.ControlBuilder" />.</summary>
        <value>Il percorso virtuale della pagina da compilare.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parser">
      <MemberSignature Language="C#" Value="protected internal System.Web.UI.TemplateParser Parser { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.TemplateParser Parser" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlBuilder.Parser" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property Parser As TemplateParser" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Web::UI::TemplateParser ^ Parser { System::Web::UI::TemplateParser ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.TemplateParser</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Web.UI.TemplateParser" /> responsabile dell'analisi del controllo.</summary>
        <value>Oggetto <see cref="T:System.Web.UI.TemplateParser" /> utilizzato per analizzare il controllo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà recupera il <xref:System.Web.UI.TemplateParser> responsabile dell'analisi del controllo.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.TemplateParser" />
      </Docs>
    </Member>
    <Member MemberName="ProcessGeneratedCode">
      <MemberSignature Language="C#" Value="public virtual void ProcessGeneratedCode (System.CodeDom.CodeCompileUnit codeCompileUnit, System.CodeDom.CodeTypeDeclaration baseType, System.CodeDom.CodeTypeDeclaration derivedType, System.CodeDom.CodeMemberMethod buildMethod, System.CodeDom.CodeMemberMethod dataBindingMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessGeneratedCode(class System.CodeDom.CodeCompileUnit codeCompileUnit, class System.CodeDom.CodeTypeDeclaration baseType, class System.CodeDom.CodeTypeDeclaration derivedType, class System.CodeDom.CodeMemberMethod buildMethod, class System.CodeDom.CodeMemberMethod dataBindingMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlBuilder.ProcessGeneratedCode(System.CodeDom.CodeCompileUnit,System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeMemberMethod)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ProcessGeneratedCode(System::CodeDom::CodeCompileUnit ^ codeCompileUnit, System::CodeDom::CodeTypeDeclaration ^ baseType, System::CodeDom::CodeTypeDeclaration ^ derivedType, System::CodeDom::CodeMemberMethod ^ buildMethod, System::CodeDom::CodeMemberMethod ^ dataBindingMethod);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeCompileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="baseType" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="derivedType" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="buildMethod" Type="System.CodeDom.CodeMemberMethod" />
        <Parameter Name="dataBindingMethod" Type="System.CodeDom.CodeMemberMethod" />
      </Parameters>
      <Docs>
        <param name="codeCompileUnit">Il contenitore radice di un grafico CodeDOM del controllo che viene compilato.</param>
        <param name="baseType">Il tipo base della pagina o controllo utente che contiene il controllo che viene compilato.</param>
        <param name="derivedType">Il tipo derivato della pagina o controllo utente che contiene il controllo che viene compilato.</param>
        <param name="buildMethod">Il codice che viene utilizzato per compilare il controllo.</param>
        <param name="dataBindingMethod">Il codice che viene utillizzato per compilare il metodo di associazione dati del controllo.</param>
        <summary>Consente a compilatori di controllo personalizzati di accedere al CodeDom (Code Document Object Model) generato e inserire e modificare il codice durante il processo di analisi e compilazione dei controlli.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nel modello di pagina a file singolo, il `baseType` e `derivedType` parametri sono gli stessi <xref:System.CodeDom.CodeTypeDeclaration> tipo, in genere deriva il <xref:System.Web.UI.Page> classe.  
  
 Nel modello di pagina code-behind, `baseType` è il <xref:System.CodeDom.CodeTypeDeclaration> tipo che rappresenta la classe parziale code-behind, che in genere è derivata dalla <xref:System.Web.UI.Page> classe. Il `derivedType` parametro è la classe che deriva dalla classe parziale che contiene il markup.  
  
 Per ulteriori informazioni sui modelli di pagina Web ASP.NET, vedere [Cenni preliminari sulla sintassi di ASP.NET Web Forms pagina](http://msdn.microsoft.com/library/09074b20-ece9-46fa-bc8f-ab2595ed2c02).  
  
 Per ulteriori informazioni su come usare il modello CodeDOM per rappresentare e generare codice sorgente, vedere [compilazione e generazione di codice sorgente dinamico](~/docs/framework/reflection-and-codedom/dynamic-source-code-generation-and-compilation.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceProvider">
      <MemberSignature Language="C#" Value="public IServiceProvider ServiceProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IServiceProvider ServiceProvider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlBuilder.ServiceProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServiceProvider As IServiceProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IServiceProvider ^ ServiceProvider { IServiceProvider ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto servizio per questo oggetto <see cref="T:System.Web.UI.ControlBuilder" />.</summary>
        <value>Interfaccia <see cref="T:System.IServiceProvider" /> che rappresenta l'oggetto servizio per questo <see cref="T:System.Web.UI.ControlBuilder" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.ControlBuilder.SetServiceProvider(System.IServiceProvider)" />
      </Docs>
    </Member>
    <Member MemberName="SetResourceKey">
      <MemberSignature Language="C#" Value="public void SetResourceKey (string resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResourceKey(string resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlBuilder.SetResourceKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetResourceKey (resourceKey As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetResourceKey(System::String ^ resourceKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resourceKey">Chiave di risorsa per questo oggetto <see cref="T:System.Web.UI.ControlBuilder" />.</param>
        <summary>Imposta la chiave di risorsa per questo oggetto <see cref="T:System.Web.UI.ControlBuilder" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.ControlBuilder.GetResourceKey" />
      </Docs>
    </Member>
    <Member MemberName="SetServiceProvider">
      <MemberSignature Language="C#" Value="public void SetServiceProvider (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetServiceProvider(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlBuilder.SetServiceProvider(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetServiceProvider (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetServiceProvider(IServiceProvider ^ serviceProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">Interfaccia <see cref="T:System.IServiceProvider" /> che rappresenta l'oggetto servizio per <see cref="T:System.Web.UI.ControlBuilder" />.</param>
        <summary>Imposta l'oggetto servizio per questo oggetto <see cref="T:System.Web.UI.ControlBuilder" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="SetTagInnerText">
      <MemberSignature Language="C#" Value="public virtual void SetTagInnerText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTagInnerText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlBuilder.SetTagInnerText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetTagInnerText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetTagInnerText(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Testo da fornire.</param>
        <summary>Fornisce all'oggetto <see cref="T:System.Web.UI.ControlBuilder" /> il testo interno del tag di controllo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene chiamato solo se <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> restituiva `true`.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.Web.UI.ControlBuilder.InDesigner%2A> proprietà quando il <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> metodo viene chiamato. Quando un controllo associato, questo generatore di <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> determina se il controllo si accede in fase di progettazione tramite una finestra di progettazione. Il <xref:System.Web.UI.ControlBuilder.NeedsTagInnerText%2A> restituisce il valore della <xref:System.Web.UI.ControlBuilder.InDesigner%2A> proprietà, quindi il <xref:System.Web.UI.ControlBuilder.SetTagInnerText%2A> metodo viene chiamato. Se il <xref:System.Web.UI.ControlBuilder.InDesigner%2A> è impostata su `false`, un <xref:System.Exception> viene generata un'eccezione. In caso contrario, il testo interno del controllo viene restituito nel <xref:System.Web.UI.ControlBuilder.SetTagInnerText%2A> chiamare.  
  
 [!code-csharp[ControlBuilderSamples_3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ControlBuilderSamples_3/cs/controlbuilder_samples3.cs#1)]
 [!code-vb[ControlBuilderSamples_3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ControlBuilderSamples_3/VB/controlbuilder_samples3.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubBuilders">
      <MemberSignature Language="C#" Value="public System.Collections.ArrayList SubBuilders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ArrayList SubBuilders" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlBuilder.SubBuilders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SubBuilders As ArrayList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ArrayList ^ SubBuilders { System::Collections::ArrayList ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ArrayList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un elenco di oggetti figlio <see cref="T:System.Web.UI.ControlBuilder" /> per questo oggetto <see cref="T:System.Web.UI.ControlBuilder" />.</summary>
        <value>Elenco di oggetti <see cref="T:System.Web.UI.ControlBuilder" /> figlio.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TagName">
      <MemberSignature Language="C#" Value="public string TagName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TagName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlBuilder.TagName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TagName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TagName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il nome del tag per il controllo da compilare.</summary>
        <value>Nome del tag per il controllo.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TemplatePropertyEntries">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection TemplatePropertyEntries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection TemplatePropertyEntries" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlBuilder.TemplatePropertyEntries" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemplatePropertyEntries As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ICollection ^ TemplatePropertyEntries { System::Collections::ICollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene una raccolta di voci di proprietà di modello.</summary>
        <value>Raccolta di voci di proprietà di modello.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se non sono presenti voci, viene restituito un insieme vuoto statico.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThemeResolutionService">
      <MemberSignature Language="C#" Value="public System.Web.UI.IThemeResolutionService ThemeResolutionService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.IThemeResolutionService ThemeResolutionService" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlBuilder.ThemeResolutionService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ThemeResolutionService As IThemeResolutionService" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::IThemeResolutionService ^ ThemeResolutionService { System::Web::UI::IThemeResolutionService ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.IThemeResolutionService</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.Web.UI.IThemeResolutionService" /> utilizzato in fase di progettazione per gestire i temi e le interfacce del controllo.</summary>
        <value>Oggetto <see cref="T:System.Web.UI.IThemeResolutionService" /> utilizzato in fase di progettazione per gestire i temi e le interfacce personalizzate del controllo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.IThemeResolutionService> interfaccia è un contenitore per uno o più <xref:System.Web.UI.ThemeProvider> oggetti, che forniscono il <xref:System.Web.UI.SkinBuilder> gli oggetti che si applicano i temi e interfacce dei controlli per i controlli quando vengono creati in una finestra di progettazione.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IThemeResolutionService" />
      </Docs>
    </Member>
  </Members>
</Type>