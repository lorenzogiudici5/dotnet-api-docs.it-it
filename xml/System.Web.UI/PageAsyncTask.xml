<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="PageAsyncTask.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac536cc8e3f70ac39686797a62234cd83eb5704a5b4.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">36cc8e3f70ac39686797a62234cd83eb5704a5b4</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Web.UI.PageAsyncTask">
          <source>Contains information about an asynchronous task registered to a page.</source>
          <target state="translated">Contiene informazioni su un'attività asincrona registrata in una pagina.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Web.UI.PageAsyncTask">
          <source>This class cannot be inherited.</source>
          <target state="translated">Questa classe non può essere ereditata.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>ASP.NET version 2.0 allows you to register multiple tasks to a page and run them asynchronously prior to rendering the page.</source>
          <target state="translated">In ASP.NET versione 2.0 consente di registrare più attività in una pagina e di eseguire in modo asincrono prima del rendering della pagina.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>You might specify that a task be run asynchronously if it is a slow process and you do not want other processes to be tied up while it is executing.</source>
          <target state="translated">È possibile specificare che un'attività da eseguire in modo asincrono se si tratta di un processo lento e non si desidera che altri processi rallentare mentre è in esecuzione.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>The asynchronous tasks can be executed in parallel or sequentially.</source>
          <target state="translated">Le attività asincrone possono essere eseguite in parallelo o sequenziale.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>A <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> object must be registered to the page through the <ph id="ph2">&lt;xref:System.Web.UI.Page.RegisterAsyncTask%2A&gt;</ph> method.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> oggetto deve essere registrato per la pagina tramite il <ph id="ph2">&lt;xref:System.Web.UI.Page.RegisterAsyncTask%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>The page itself does not have to be processed asynchronously to execute asynchronous tasks.</source>
          <target state="translated">La pagina stessa non deve essere elaborato in modo asincrono per eseguire attività asincrone.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>You can set the <ph id="ph1">`Async`</ph> attribute to either <ph id="ph2">`true`</ph> (as shown in the following code example) or <ph id="ph3">`false`</ph> on the page directive and the asynchronous tasks will still be processed asynchronously:</source>
          <target state="translated">È possibile impostare il <ph id="ph1">`Async`</ph> l'attributo <ph id="ph2">`true`</ph> (come illustrato nell'esempio di codice seguente) o <ph id="ph3">`false`</ph> nella pagina di direttiva e le attività asincrone verranno comunque elaborate in modo asincrono:</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>When the <ph id="ph1">`Async`</ph> attribute is set to <ph id="ph2">`false`</ph>, the thread that executes the page will be blocked until all asynchronous tasks are complete.</source>
          <target state="translated">Quando il <ph id="ph1">`Async`</ph> attributo è impostato su <ph id="ph2">`false`</ph>, il thread che esegue la pagina verrà bloccato fino al completamento di tutte le attività asincrone.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>Any asynchronous tasks registered before the <ph id="ph1">&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;</ph> event will be executed automatically by the page if they have not already been executed.</source>
          <target state="translated">Le attività asincrone registrate prima il <ph id="ph1">&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;</ph> evento verrà eseguito automaticamente dalla pagina se essi non sono già state eseguite.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>Those asynchronous tasks registered after the <ph id="ph1">&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;</ph> event must be executed explicitly through the <ph id="ph2">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</ph> method.</source>
          <target state="translated">Le attività asincrone registrate dopo il <ph id="ph1">&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;</ph> evento devono essere eseguite in modo esplicito tramite il <ph id="ph2">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</ph> method can also be used to start tasks before the <ph id="ph2">&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;</ph> event.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</ph> metodo può essere utilizzato anche per le attività prima di avviare il <ph id="ph2">&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;</ph> evento.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</ph> method executes all the registered asynchronous tasks on the page that have not been executed.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</ph> metodo esegue tutte le attività asincrone registrate nella pagina che non sono state eseguite.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>By default, an asynchronous task will time out if it has not completed within 45 seconds.</source>
          <target state="translated">Per impostazione predefinita, un'attività asincrona scadrà se non è stata completata entro 45 secondi.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>You can specify a different time-out value in either the Web.config file or the page directive.</source>
          <target state="translated">Il file Web. config o la direttiva di pagina, è possibile specificare un valore di timeout diverso.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>The <ph id="ph1">`&lt;pages&gt;`</ph> section of the Web.config file contains an <ph id="ph2">`asyncTimeout`</ph> attribute, as shown below.</source>
          <target state="translated">Il <ph id="ph1">`&lt;pages&gt;`</ph> sezione del file Web. config contiene un <ph id="ph2">`asyncTimeout`</ph> attributo, come illustrato di seguito.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>The page directive contains an <ph id="ph1">`AsyncTimeout`</ph> attribute.</source>
          <target state="translated">La direttiva di pagina contiene un <ph id="ph1">`AsyncTimeout`</ph> attributo.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>The following code example registers three asynchronous tasks to a page and executes them in parallel.</source>
          <target state="translated">Esempio di codice seguente registra tre attività asincrone a una pagina e li esegue in parallelo.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>Each task calls a method that merely causes the thread to sleep for 5 seconds.</source>
          <target state="translated">Ogni attività chiama un metodo che determina semplicemente che il thread per 5 secondi.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="T:System.Web.UI.PageAsyncTask">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> class.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
          <source>An event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> class using an event handler that enables the task to be canceled.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> utilizzando un gestore eventi che consente di annullare l'attività.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
          <source>This constructor wraps a <ph id="ph1">&lt;xref:System.Web.TaskEventHandler&gt;</ph> delegate so that the <ph id="ph2">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> object can integrate asynchronous code (based on <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objects) with the existing ASP.NET Web Forms asynchronous pages feature.</source>
          <target state="translated">Esegue il wrapping di questo costruttore un <ph id="ph1">&lt;xref:System.Web.TaskEventHandler&gt;</ph> delegare in modo che il <ph id="ph2">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> oggetto possibile integrare codice asincrono (in base a <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph> oggetti) con la funzionalità di asincrona pagine Web Form ASP.NET esistente.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
          <source>ASP.NET will signal the <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> object that is passed to a <ph id="ph2">&lt;xref:System.Web.TaskEventHandler&gt;</ph> delegate for cancellation based on the <ph id="ph3">&lt;xref:System.Web.UI.Page.AsyncTimeout%2A&gt;</ph> attribute set in the <ph id="ph4">`@ Page`</ph> directive of the Web page.</source>
          <target state="translated">ASP.NET segnalerà il <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> oggetto passato a un <ph id="ph2">&lt;xref:System.Web.TaskEventHandler&gt;</ph> delegato per l'annullamento in base il <ph id="ph3">&lt;xref:System.Web.UI.Page.AsyncTimeout%2A&gt;</ph> attributo impostato <ph id="ph4">`@ Page`</ph> direttiva della pagina Web.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
          <source>When the <ph id="ph1">&lt;xref:System.Web.UI.Page.AsyncTimeout%2A&gt;</ph> value has been reached, the <ph id="ph2">&lt;xref:System.Threading.CancellationToken&gt;</ph> object will be signaled.</source>
          <target state="translated">Quando il <ph id="ph1">&lt;xref:System.Web.UI.Page.AsyncTimeout%2A&gt;</ph> valore è stato raggiunto il <ph id="ph2">&lt;xref:System.Threading.CancellationToken&gt;</ph> oggetto verrà segnalato.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
          <source>The <ph id="ph1">`CancellationToken`</ph> parameter must be passed to any asynchronous APIs that are called by your implementation of the <ph id="ph2">&lt;xref:System.Web.TaskEventHandler&gt;</ph> class.</source>
          <target state="translated">Il <ph id="ph1">`CancellationToken`</ph> parametro deve essere passato a qualsiasi API asincrone che vengono chiamati dall'implementazione del <ph id="ph2">&lt;xref:System.Web.TaskEventHandler&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})">
          <source>An event handler.</source>
          <target state="translated">Gestore eventi.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> class using an event handler that enables the task to be handled.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> utilizzando un gestore eventi che consente di gestire l'attività.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)">
          <source>The handler to call when beginning an asynchronous task.</source>
          <target state="translated">Gestore da chiamare quando si inizia un'attività asincrona.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)">
          <source>The handler to call when the task is completed successfully within the time-out period.</source>
          <target state="translated">Gestore da chiamare quando l'attività viene completata correttamente entro il periodo di timeout.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)">
          <source>The handler to call when the task is not completed successfully within the time-out period.</source>
          <target state="translated">Gestore da chiamare quando l'attività non viene completata correttamente entro il periodo di timeout.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)">
          <source>The object that represents the state of the task.</source>
          <target state="translated">Oggetto che rappresenta lo stato dell'attività.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> class using the default value for executing in parallel.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> utilizzando il valore predefinito per l'esecuzione in parallelo.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)">
          <source>This implementation of the constructor sets the <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> property to <ph id="ph2">`false`</ph> so the asynchronous task is not processed in parallel with other tasks on the page.</source>
          <target state="translated">Questa implementazione del costruttore imposta la <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> proprietà <ph id="ph2">`false`</ph> affinché l'attività asincrona non viene elaborata in parallelo con altre attività nella pagina.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="beginHandler" /&gt;</ph> parameter or <ph id="ph2">&lt;paramref name="endHandler" /&gt;</ph> parameter is not specified.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="beginHandler" /&gt;</ph> o <ph id="ph2">&lt;paramref name="endHandler" /&gt;</ph> non è specificato.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>The handler to call when beginning an asynchronous task.</source>
          <target state="translated">Gestore da chiamare quando si inizia un'attività asincrona.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>The handler to call when the task is completed successfully within the time-out period.</source>
          <target state="translated">Gestore da chiamare quando l'attività viene completata correttamente entro il periodo di timeout.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>The handler to call when the task is not completed successfully within the time-out period.</source>
          <target state="translated">Gestore da chiamare quando l'attività non viene completata correttamente entro il periodo di timeout.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>The object that represents the state of the task.</source>
          <target state="translated">Oggetto che rappresenta lo stato dell'attività.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>The value that indicates whether the task can be processed in parallel with other tasks.</source>
          <target state="translated">Valore che indica se l'attività può essere elaborata in parallelo con altre attività.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> class using the specified value for executing in parallel.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> utilizzando il valore specificato per l'esecuzione in parallelo.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>This implementation of the constructor allows you to set whether the asynchronous task will be processed in parallel with other tasks on the page.</source>
          <target state="translated">Questa implementazione del costruttore consente di specificare se l'attività asincrona verrà elaborato in parallelo con altre attività nella pagina.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>The following code example creates three asynchronous tasks that are processed in parallel to each other.</source>
          <target state="translated">Esempio di codice seguente crea tre attività asincrone che vengono elaborate in parallelo tra loro.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>This example is part of a larger example found in the <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> class overview.</source>
          <target state="translated">In questo esempio fa parte di un esempio più esaustivo disponibile nel <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> Cenni preliminari sulla classe.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="beginHandler" /&gt;</ph> parameter or <ph id="ph2">&lt;paramref name="endHandler" /&gt;</ph> parameter is not specified.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="beginHandler" /&gt;</ph> o <ph id="ph2">&lt;paramref name="endHandler" /&gt;</ph> non è specificato.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="P:System.Web.UI.PageAsyncTask.BeginHandler">
          <source>Gets the method to call when beginning an asynchronous task.</source>
          <target state="translated">Ottiene il metodo da chiamare quando si inizia un'attività asincrona.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.BeginHandler">
          <source>A <ph id="ph1">&lt;see cref="T:System.Web.BeginEventHandler" /&gt;</ph> delegate that represents the method to call when beginning the asynchronous task.</source>
          <target state="translated">Delegato <ph id="ph1">&lt;see cref="T:System.Web.BeginEventHandler" /&gt;</ph> che rappresenta il metodo da chiamare quando si inizia l'attività asincrona.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.BeginHandler">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.BeginHandler%2A&gt;</ph> delegate is set in the constructor.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.BeginHandler%2A&gt;</ph> delegato è impostato nel costruttore.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.BeginHandler">
          <source>The following code example registers three asynchronous tasks to a page and executes them in parallel.</source>
          <target state="translated">Esempio di codice seguente registra tre attività asincrone a una pagina e li esegue in parallelo.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.BeginHandler">
          <source>Each task calls a method that merely causes the thread to sleep for 5 seconds.</source>
          <target state="translated">Ogni attività chiama un metodo che determina semplicemente che il thread per 5 secondi.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.BeginHandler">
          <source>A <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.BeginHandler%2A&gt;</ph> delegate is specified for each task.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.BeginHandler%2A&gt;</ph> delegato specificato per ogni attività.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="P:System.Web.UI.PageAsyncTask.EndHandler">
          <source>Gets the method to call when the task completes successfully within the time-out period.</source>
          <target state="translated">Ottiene il metodo da chiamare quando l'attività viene completata correttamente entro il periodo di timeout.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.EndHandler">
          <source>An <ph id="ph1">&lt;see cref="T:System.Web.EndEventHandler" /&gt;</ph> delegate that represents the method to call when the task completes successfully within the time-out period.</source>
          <target state="translated">Delegato <ph id="ph1">&lt;see cref="T:System.Web.EndEventHandler" /&gt;</ph> che rappresenta il metodo da chiamare quando l'attività viene completata correttamente entro il periodo di timeout.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.EndHandler">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.EndHandler%2A&gt;</ph> delegate is set in the constructor.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.EndHandler%2A&gt;</ph> delegato è impostato nel costruttore.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.EndHandler">
          <source>The following code example registers three asynchronous tasks to a page and executes them in parallel.</source>
          <target state="translated">Esempio di codice seguente registra tre attività asincrone a una pagina e li esegue in parallelo.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.EndHandler">
          <source>Each task calls a method that merely causes the thread to sleep for 5 seconds.</source>
          <target state="translated">Ogni attività chiama un metodo che determina semplicemente che il thread per 5 secondi.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.EndHandler">
          <source>An <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.EndHandler%2A&gt;</ph> delegate is specified for each task.</source>
          <target state="translated">Un <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.EndHandler%2A&gt;</ph> delegato specificato per ogni attività.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source>Gets a value that indicates whether the task can be processed in parallel with other tasks.</source>
          <target state="translated">Ottiene un valore che indica se l'attività può essere elaborata in parallelo con altre attività.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the task should be processed in parallel with other tasks; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'attività deve essere elaborata in parallelo con altre attività; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> property is set in the constructor.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> proprietà è impostata nel costruttore.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source>When multiple tasks are registered in a page and the <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>, then those tasks are processed concurrently.</source>
          <target state="translated">Quando più attività vengono registrate in una pagina e <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> è impostata su <ph id="ph2">`true`</ph>, tali attività vengono elaborate simultaneamente.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source>However, if the <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>, then those tasks are processed sequentially.</source>
          <target state="translated">Tuttavia, se il <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> è impostata su <ph id="ph2">`false`</ph>, tali attività vengono elaborate in sequenza.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source>For example, if a page contained two asynchronous tasks that each took 5 seconds to complete and <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> is set to <ph id="ph2">`true`</ph>, both tasks will complete in 5 seconds.</source>
          <target state="translated">Ad esempio, se una pagina contenuta due attività asincrone e ciascuna richiede 5 secondi per completare e <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> è impostato su <ph id="ph2">`true`</ph>, entrambe le attività verranno completata entro 5 secondi.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source>If <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> is set to <ph id="ph2">`false`</ph> for these same two tasks, then the first task will complete in 5 seconds and the second task will complete 5 seconds after the completion of the first task.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> è impostato su <ph id="ph2">`false`</ph> per questi due attività, quindi la prima attività verrà completata entro 5 secondi e la seconda attività 5 secondi dopo il completamento della prima attività.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source>The following code example defines three asynchronous tasks that are each set to be processed in parallel.</source>
          <target state="translated">L'esempio di codice seguente definisce tre attività asincrone che vengono impostate da elaborare in parallelo.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source>This example is part of a larger example found in the <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> class overview.</source>
          <target state="translated">In questo esempio fa parte di un esempio più esaustivo disponibile nel <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> Cenni preliminari sulla classe.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.Web.UI.PageAsyncTask.State">
          <source>Gets an object that represents the state of the task.</source>
          <target state="translated">Ottiene un oggetto che rappresenta lo stato dell'attività.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.State">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the state of the task.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> che rappresenta lo stato dell'attività.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.State">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.State%2A&gt;</ph> property is set in the constructor and cannot be modified during execution of the asynchronous task.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.State%2A&gt;</ph> proprietà viene impostata nel costruttore e non può essere modificato durante l'esecuzione dell'attività asincrona.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.State">
          <source>You can differentiate asynchronous tasks in a page by assigning unique string values to their respective <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.State%2A&gt;</ph> properties.</source>
          <target state="translated">È possibile distinguere le attività asincrone in una pagina tramite l'assegnazione di valori stringa univoci alle rispettive <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.State%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.State">
          <source>The following code example creates three asynchronous tasks and gives them unique values for their <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.State%2A&gt;</ph> properties.</source>
          <target state="translated">Esempio di codice seguente crea tre attività asincrone e vengono assegnati valori univoci per i relativi <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.State%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.State">
          <source>This example is part of a larger example found in the <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> class overview.</source>
          <target state="translated">In questo esempio fa parte di un esempio più esaustivo disponibile nel <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> Cenni preliminari sulla classe.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.Web.UI.PageAsyncTask.TimeoutHandler">
          <source>Gets the method to call when the task does not complete successfully within the time-out period.</source>
          <target state="translated">Ottiene il metodo da chiamare quando l'attività non viene completata correttamente entro il periodo di timeout.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.TimeoutHandler">
          <source>An <ph id="ph1">&lt;see cref="T:System.Web.EndEventHandler" /&gt;</ph> delegate that represents the method to call when the task does not complete successfully within the time-out period.</source>
          <target state="translated">Delegato <ph id="ph1">&lt;see cref="T:System.Web.EndEventHandler" /&gt;</ph> che rappresenta il metodo da chiamare quando l'attività non viene completata correttamente entro il periodo di timeout.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.TimeoutHandler">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A&gt;</ph> delegate is set in the constructor.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A&gt;</ph> delegato è impostato nel costruttore.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.TimeoutHandler">
          <source>The following code example registers three asynchronous tasks to a page and executes them in parallel.</source>
          <target state="translated">Esempio di codice seguente registra tre attività asincrone a una pagina e li esegue in parallelo.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.TimeoutHandler">
          <source>Each task calls a method that merely causes the thread to sleep for 5 seconds.</source>
          <target state="translated">Ogni attività chiama un metodo che determina semplicemente che il thread per 5 secondi.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.TimeoutHandler">
          <source>A <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A&gt;</ph> delegate is specified for each task.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A&gt;</ph> delegato specificato per ogni attività.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>