<Type Name="PageAsyncTask" FullName="System.Web.UI.PageAsyncTask">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9200f0d5a36d7d9b1c59b031ca32d0e2c5500b69" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36376651" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class PageAsyncTask" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PageAsyncTask extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.PageAsyncTask" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PageAsyncTask" />
  <TypeSignature Language="C++ CLI" Value="public ref class PageAsyncTask sealed" />
  <TypeSignature Language="F#" Value="type PageAsyncTask = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Contiene informazioni su un'attività asincrona registrata in una pagina. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In ASP.NET versione 2.0 consente di registrare più attività a una pagina ed eseguirli in modo asincrono prima del rendering della pagina. È possibile specificare che un'attività da eseguire in modo asincrono se si tratta di un processo lenta e non si desidera che siano in mentre è in esecuzione altri processi. Le attività asincrone possono essere eseguite in parallelo o in modo sequenziale.  
  
 Un <xref:System.Web.UI.PageAsyncTask> oggetto deve essere registrato per la pagina tramite il <xref:System.Web.UI.Page.RegisterAsyncTask%2A> metodo. La pagina stessa non deve essere elaborate in modo asincrono per l'esecuzione di attività asincrone. È possibile impostare il `Async` attribuire a uno `true` (come illustrato nell'esempio di codice seguente) o `false` nella pagina di direttiva e le attività asincrone verranno comunque elaborate in modo asincrono:  
  
 `<%@ Page Async="true" %>`  
  
 Quando il `Async` attributo è impostato su `false`, il thread che esegue la pagina verrà bloccato fino al completamento di tutte le attività asincrone.  
  
 Le attività asincrone registrate prima il <xref:System.Web.UI.Page.PreRenderComplete> evento verrà eseguito automaticamente dalla pagina se essi non sono già state eseguite. Le attività asincrone registrate dopo il <xref:System.Web.UI.Page.PreRenderComplete> evento deve essere eseguito in modo esplicito tramite il <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> metodo. Il <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> metodo può essere utilizzato anche per avviare le attività prima di <xref:System.Web.UI.Page.PreRenderComplete> evento. Il <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> metodo esegue tutte le attività asincrone registrate nella pagina che non sono state eseguite.  
  
 Per impostazione predefinita, un'attività asincrona scadrà se non è stata completata entro 45 secondi. È possibile specificare un valore di timeout diverso nel file Web. config o la direttiva di pagina. Il `<pages>` sezione del file Web. config contiene un `asyncTimeout` attributo, come illustrato di seguito.  
  
 `<system.web>`  
  
 `<pages asyncTimeout="30">`  
  
 `</pages>`  
  
 `</system.web>`  
  
 La direttiva page contiene un `AsyncTimeout` attributo.  
  
 `<%@ Page AsyncTimeout="30" %>`  
  
   
  
## Examples  
 Esempio di codice seguente registra tre attività asincrone a una pagina e li esegue in parallelo. Ogni attività chiama un metodo che semplicemente fa sì che il thread per 5 secondi.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.PageAsyncTask" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As Func(Of CancellationToken, Task))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(Func&lt;System::Threading::CancellationToken, System::Threading::Tasks::Task ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Gestore eventi.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.PageAsyncTask" /> utilizzando un gestore eventi che consente di annullare l'attività.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esegue il wrapping di questo costruttore un <xref:System.Web.TaskEventHandler> delegare in modo che il <xref:System.Web.UI.PageAsyncTask> oggetto possibile integrare codice asincrono (in base a <xref:System.Threading.Tasks.Task> oggetti) con la funzionalità asincrona pagine Web Form ASP.NET esistente. ASP.NET segnalerà il <xref:System.Threading.CancellationToken> oggetto che viene passato a un <xref:System.Web.TaskEventHandler> delegato per l'annullamento in base al <xref:System.Web.UI.Page.AsyncTimeout%2A> attributo impostato `@ Page` direttiva della pagina Web. Quando il <xref:System.Web.UI.Page.AsyncTimeout%2A> è stato raggiunto il valore, il <xref:System.Threading.CancellationToken> oggetto verrà segnalato. Il `CancellationToken` parametro deve essere passato a qualsiasi API asincrone che vengono chiamati dall'implementazione del <xref:System.Web.TaskEventHandler> classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (Func&lt;System.Threading.Tasks.Task&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As Func(Of Task))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(Func&lt;System::Threading::Tasks::Task ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : Func&lt;System.Threading.Tasks.Task&gt; -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Gestore eventi.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.PageAsyncTask" /> utilizzando un gestore eventi che consente di gestire l'attività.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.BeginEventHandler beginHandler, class System.Web.EndEventHandler endHandler, class System.Web.EndEventHandler timeoutHandler, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (beginHandler As BeginEventHandler, endHandler As EndEventHandler, timeoutHandler As EndEventHandler, state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(System::Web::BeginEventHandler ^ beginHandler, System::Web::EndEventHandler ^ endHandler, System::Web::EndEventHandler ^ timeoutHandler, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : System.Web.BeginEventHandler * System.Web.EndEventHandler * System.Web.EndEventHandler * obj -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask (beginHandler, endHandler, timeoutHandler, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="timeoutHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="beginHandler">Gestore da chiamare quando si inizia un'attività asincrona.</param>
        <param name="endHandler">Gestore da chiamare quando l'attività viene completata correttamente entro il periodo di timeout.</param>
        <param name="timeoutHandler">Gestore da chiamare quando l'attività non viene completata correttamente entro il periodo di timeout.</param>
        <param name="state">Oggetto che rappresenta lo stato dell'attività.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.PageAsyncTask" /> utilizzando il valore predefinito per l'esecuzione in parallelo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa implementazione del costruttore imposta la <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> proprietà `false` in modo che l'attività asincrona non viene elaborata in parallelo con altre attività nella pagina.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il parametro <paramref name="beginHandler" /> o <paramref name="endHandler" /> non è specificato.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.BeginEventHandler beginHandler, class System.Web.EndEventHandler endHandler, class System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (beginHandler As BeginEventHandler, endHandler As EndEventHandler, timeoutHandler As EndEventHandler, state As Object, executeInParallel As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(System::Web::BeginEventHandler ^ beginHandler, System::Web::EndEventHandler ^ endHandler, System::Web::EndEventHandler ^ timeoutHandler, System::Object ^ state, bool executeInParallel);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : System.Web.BeginEventHandler * System.Web.EndEventHandler * System.Web.EndEventHandler * obj * bool -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask (beginHandler, endHandler, timeoutHandler, state, executeInParallel)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="timeoutHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="executeInParallel" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="beginHandler">Gestore da chiamare quando si inizia un'attività asincrona.</param>
        <param name="endHandler">Gestore da chiamare quando l'attività viene completata correttamente entro il periodo di timeout.</param>
        <param name="timeoutHandler">Gestore da chiamare quando l'attività non viene completata correttamente entro il periodo di timeout.</param>
        <param name="state">Oggetto che rappresenta lo stato dell'attività.</param>
        <param name="executeInParallel">Valore che indica se l'attività può essere elaborata in parallelo con altre attività.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.PageAsyncTask" /> utilizzando il valore specificato per l'esecuzione in parallelo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa implementazione del costruttore consente di specificare se l'attività asincrona verrà elaborato in parallelo con altre attività nella pagina.  
  
   
  
## Examples  
 Esempio di codice seguente crea tre attività asincrone che vengono elaborate in parallelo tra loro. In questo esempio fa parte di un esempio più esaustivo disponibile nel <xref:System.Web.UI.PageAsyncTask> Cenni preliminari sulla classe.  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il parametro <paramref name="beginHandler" /> o <paramref name="endHandler" /> non è specificato.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginHandler">
      <MemberSignature Language="C#" Value="public System.Web.BeginEventHandler BeginHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.BeginEventHandler BeginHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.BeginHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BeginHandler As BeginEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::BeginEventHandler ^ BeginHandler { System::Web::BeginEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BeginHandler : System.Web.BeginEventHandler" Usage="System.Web.UI.PageAsyncTask.BeginHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.BeginEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il metodo da chiamare quando si inizia un'attività asincrona.</summary>
        <value>Delegato <see cref="T:System.Web.BeginEventHandler" /> che rappresenta il metodo da chiamare quando si inizia l'attività asincrona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> delegato viene impostato nel costruttore.  
  
   
  
## Examples  
 Esempio di codice seguente registra tre attività asincrone a una pagina e li esegue in parallelo. Ogni attività chiama un metodo che semplicemente fa sì che il thread per 5 secondi. Oggetto <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> delegato specificato per ogni attività.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndHandler">
      <MemberSignature Language="C#" Value="public System.Web.EndEventHandler EndHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.EndEventHandler EndHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.EndHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndHandler As EndEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::EndEventHandler ^ EndHandler { System::Web::EndEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EndHandler : System.Web.EndEventHandler" Usage="System.Web.UI.PageAsyncTask.EndHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.EndEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il metodo da chiamare quando l'attività viene completata correttamente entro il periodo di timeout.</summary>
        <value>Delegato <see cref="T:System.Web.EndEventHandler" /> che rappresenta il metodo da chiamare quando l'attività viene completata correttamente entro il periodo di timeout.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> delegato viene impostato nel costruttore.  
  
   
  
## Examples  
 Esempio di codice seguente registra tre attività asincrone a una pagina e li esegue in parallelo. Ogni attività chiama un metodo che semplicemente fa sì che il thread per 5 secondi. Un <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> delegato specificato per ogni attività.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInParallel">
      <MemberSignature Language="C#" Value="public bool ExecuteInParallel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExecuteInParallel" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.ExecuteInParallel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExecuteInParallel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExecuteInParallel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecuteInParallel : bool" Usage="System.Web.UI.PageAsyncTask.ExecuteInParallel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se l'attività può essere elaborata in parallelo con altre attività.</summary>
        <value>
          <see langword="true" /> se l'attività deve essere elaborata in parallelo con altre attività; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> viene impostata nel costruttore. Quando più attività vengono registrate in una pagina e il <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> è impostata su `true`, tali attività vengono elaborate simultaneamente. Tuttavia, se il <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> è impostata su `false`, tali attività vengono elaborate in sequenza. Ad esempio, se una pagina contenuta due attività asincrone e ciascuna richiede 5 secondi per completare e <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> è impostata su `true`, entrambe le attività verranno completata entro 5 secondi. Se <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> è impostata su `false` per questi stessi due attività, quindi la prima attività verrà completata entro 5 secondi e la seconda attività verrà completata dopo il completamento della prima attività di 5 secondi.  
  
   
  
## Examples  
 Esempio di codice seguente definisce tre attività asincrone che vengono impostate da elaborare in parallelo. In questo esempio fa parte di un esempio più esaustivo disponibile nel <xref:System.Web.UI.PageAsyncTask> Cenni preliminari sulla classe.  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public object State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object State" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ State { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.State : obj" Usage="System.Web.UI.PageAsyncTask.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto che rappresenta lo stato dell'attività.</summary>
        <value>Oggetto <see cref="T:System.Object" /> che rappresenta lo stato dell'attività.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.PageAsyncTask.State%2A> proprietà viene impostata nel costruttore e non può essere modificato durante l'esecuzione dell'attività asincrona. È possibile differenziare le attività asincrone in una pagina tramite l'assegnazione di valori stringa univoci per le rispettive <xref:System.Web.UI.PageAsyncTask.State%2A> proprietà.  
  
   
  
## Examples  
 Esempio di codice seguente crea tre attività asincrone e offre loro valori univoci per i relativi <xref:System.Web.UI.PageAsyncTask.State%2A> proprietà. In questo esempio fa parte di un esempio più esaustivo disponibile nel <xref:System.Web.UI.PageAsyncTask> Cenni preliminari sulla classe.  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeoutHandler">
      <MemberSignature Language="C#" Value="public System.Web.EndEventHandler TimeoutHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.EndEventHandler TimeoutHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.TimeoutHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeoutHandler As EndEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::EndEventHandler ^ TimeoutHandler { System::Web::EndEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeoutHandler : System.Web.EndEventHandler" Usage="System.Web.UI.PageAsyncTask.TimeoutHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.EndEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il metodo da chiamare quando l'attività non viene completata correttamente entro il periodo di timeout.</summary>
        <value>Delegato <see cref="T:System.Web.EndEventHandler" /> che rappresenta il metodo da chiamare quando l'attività non viene completata correttamente entro il periodo di timeout.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> delegato viene impostato nel costruttore.  
  
   
  
## Examples  
 Esempio di codice seguente registra tre attività asincrone a una pagina e li esegue in parallelo. Ogni attività chiama un metodo che semplicemente fa sì che il thread per 5 secondi. Oggetto <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> delegato specificato per ogni attività.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>