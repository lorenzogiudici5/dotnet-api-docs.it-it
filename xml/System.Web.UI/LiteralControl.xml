<Type Name="LiteralControl" FullName="System.Web.UI.LiteralControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b7bf9ffd82c87519839ec5f6af3f44d135607cd7" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36576265" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LiteralControl : System.Web.UI.Control, System.Web.UI.ITextControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LiteralControl extends System.Web.UI.Control implements class System.Web.UI.ITextControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.LiteralControl" />
  <TypeSignature Language="VB.NET" Value="Public Class LiteralControl&#xA;Inherits Control&#xA;Implements ITextControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class LiteralControl : System::Web::UI::Control, System::Web::UI::ITextControl" />
  <TypeSignature Language="F#" Value="type LiteralControl = class&#xA;    inherit Control&#xA;    interface ITextControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.ITextControl</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta gli elementi HTML, il testo e qualsiasi altra stringa in una pagina ASP.NET per i quali non è necessaria l'elaborazione nel server.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET compila tutti gli elementi HTML e testo leggibile che non richiedono l'elaborazione sul lato server in istanze di questa classe. Ad esempio, un elemento HTML che non contiene un `runat="server"` coppia attributo/valore nel tag di apertura viene compilato in un <xref:System.Web.UI.LiteralControl> oggetto. <xref:System.Web.UI.LiteralControl> gli oggetti non mantengono lo stato di visualizzazione, il contenuto di un <xref:System.Web.UI.LiteralControl> oggetto deve essere ricreato a ogni richiesta.  
  
 Valore letterali controlli si comportano come contenitori di testo, vale a dire che è possibile estrarre il testo dal controllo e rimuovere il controllo server padre controllo literal <xref:System.Web.UI.ControlCollection> insieme attraverso il padre <xref:System.Web.UI.Control.Controls%2A> proprietà. Pertanto, quando si sviluppa un controllo personalizzato derivato dal <xref:System.Web.UI.LiteralControl> classe, assicurarsi che il controllo del codice vengono eseguite le necessarie pre-elaborazione passaggi stesso, anziché tramite una chiamata al <xref:System.Web.UI.LiteralControl.Render%2A?displayProperty=nameWithType> metodo eseguirle utilizzando. In genere, è consigliabile impostare tale per migliorare il tempo di risposta dell'applicazione Web.  
  
 È possibile aggiungere o rimuovere i controlli di valore letterali da un pagina o un controllo server a livello di programmazione utilizzando il <xref:System.Web.UI.ControlCollection.Add%2A?displayProperty=nameWithType> o <xref:System.Web.UI.ControlCollection.Remove%2A?displayProperty=nameWithType> metodo, rispettivamente.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare l'overload <xref:System.Web.UI.LiteralControl.%23ctor%2A> costruttore quando si esegue l'override di <xref:System.Web.UI.Control.CreateChildControls%2A?displayProperty=nameWithType> metodo. Nel codice vengono aggiunti due nuovi <xref:System.Web.UI.LiteralControl> oggetti e una <xref:System.Web.UI.WebControls.TextBox> controllo server corrente del controllo server Web <xref:System.Web.UI.Control.Controls%2A?displayProperty=nameWithType> proprietà.  
  
 [!code-csharp[SystemWebUILiteralControl#1](~/samples/snippets/csharp/VS_Snippets_WebNet/SystemWebUILiteralControl/CS/controlcreatechildcontrols.cs#1)]
 [!code-vb[SystemWebUILiteralControl#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/SystemWebUILiteralControl/VB/controlcreatechildcontrols.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.Control" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.LiteralControl" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LiteralControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.LiteralControl.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LiteralControl();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.LiteralControl" /> che contiene una stringa letterale di cui eseguire il rendering sulla pagina ASP.NET richiesta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente crea una classe `CustLiteralControlClass`, che estende la <xref:System.Web.UI.LiteralControl> classe. Crea un'istanza della classe denominata `myLiteralControlClass1` mediante il costruttore che non specifica il testo del <xref:System.Web.UI.LiteralControl> oggetto. Dopo aver creato l'oggetto, il <xref:System.Web.UI.LiteralControl.Text%2A> proprietà viene utilizzata per impostare il testo in essa contenuti.  
  
 [!code-csharp[LiteralControlSample#4](~/samples/snippets/csharp/VS_Snippets_WebNet/LiteralControlSample/CS/customliteralcontrol.cs.aspx#4)]
 [!code-vb[LiteralControlSample#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LiteralControlSample/VB/customliteralcontrol.vb.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LiteralControl (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.LiteralControl.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LiteralControl(System::String ^ text);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.LiteralControl : string -&gt; System.Web.UI.LiteralControl" Usage="new System.Web.UI.LiteralControl text" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Il testo di cui eseguire il rendering sulla pagina Web richiesta.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.LiteralControl" /> con il testo specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio di codice seguente crea due istanze del <xref:System.Web.UI.LiteralControl> classe utilizzando il <xref:System.Web.UI.LiteralControl.%23ctor%2A> costruttore. Le due istanze di eseguire il rendering di tag di apertura e chiusura di un elemento HTML H3 e includono il testo da visualizzare all'interno dei tag H3.  
  
 [!code-csharp[SystemWebUILiteralControl#1](~/samples/snippets/csharp/VS_Snippets_WebNet/SystemWebUILiteralControl/CS/controlcreatechildcontrols.cs#1)]
 [!code-vb[SystemWebUILiteralControl#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/SystemWebUILiteralControl/VB/controlcreatechildcontrols.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.LiteralControl.Text" />
      </Docs>
    </Member>
    <Member MemberName="CreateControlCollection">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.ControlCollection CreateControlCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.ControlCollection CreateControlCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.LiteralControl.CreateControlCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateControlCollection () As ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::ControlCollection ^ CreateControlCollection();" />
      <MemberSignature Language="F#" Value="override this.CreateControlCollection : unit -&gt; System.Web.UI.ControlCollection" Usage="literalControl.CreateControlCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un oggetto <see cref="T:System.Web.UI.EmptyControlCollection" /> per la classe <see cref="T:System.Web.UI.LiteralControl" /> corrente.</summary>
        <returns>Oggetto <see cref="T:System.Web.UI.EmptyControlCollection" /> per il controllo corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, <xref:System.Web.UI.LiteralControl> oggetti contengono solo testo e non i controlli server figlio. Se si desidera modificare questo comportamento, è necessario eseguire l'override di questo metodo.  
  
   
  
## Examples  
 Nel codice seguente viene eseguito l'override di <xref:System.Web.UI.LiteralControl.CreateControlCollection%2A> metodo per creare un'istanza del <xref:System.Web.UI.ControlCollection> classe anziché un'istanza del <xref:System.Web.UI.EmptyControlCollection> (classe).  
  
 [!code-csharp[LiteralControlSample#2](~/samples/snippets/csharp/VS_Snippets_WebNet/LiteralControlSample/CS/customliteralcontrol.cs#2)]
 [!code-vb[LiteralControlSample#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LiteralControlSample/VB/customliteralcontrol.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Control.CreateControlCollection" />
        <altmember cref="T:System.Web.UI.EmptyControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.LiteralControl.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (output As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ output);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="literalControl.Render output" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="output">Classe <see cref="T:System.Web.UI.HtmlTextWriter" /> che esegue il rendering del contenuto di <see cref="T:System.Web.UI.LiteralControl" /> sul client richiedente.</param>
        <summary>Scrive il contenuto dell'oggetto <see cref="T:System.Web.UI.LiteralControl" /> nella pagina ASP.NET.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si crea un server personalizzato controllo e si desidera eseguire il rendering HTML o un testo specifico a un client, è possibile migliorare le prestazioni del controllo passando il valore della <xref:System.Web.UI.LiteralControl.Text%2A> proprietà per il <xref:System.Web.UI.Control.Render%2A?displayProperty=nameWithType> metodo invece di chiamare il <xref:System.Web.UI.LiteralControl.Render%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public virtual string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.LiteralControl.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Web.UI.LiteralControl.Text" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.ITextControl.Text</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il contenuto di testo dell'oggetto <see cref="T:System.Web.UI.LiteralControl" />.</summary>
        <value>Un valore <see cref="T:System.String" /> che rappresenta il testo del controllo. Il valore predefinito è <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente crea una classe `CustLiteralControlClass`, che estende la <xref:System.Web.UI.LiteralControl> classe. Crea un'istanza della classe denominata `myLiteralControlClass1` mediante il costruttore che non specifica il testo del <xref:System.Web.UI.LiteralControl> oggetto. Dopo aver creato l'oggetto, il <xref:System.Web.UI.LiteralControl.Text%2A> proprietà viene utilizzata per impostare il testo in essa contenuti.  
  
 [!code-csharp[LiteralControlSample#4](~/samples/snippets/csharp/VS_Snippets_WebNet/LiteralControlSample/CS/customliteralcontrol.cs.aspx#4)]
 [!code-vb[LiteralControlSample#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LiteralControlSample/VB/customliteralcontrol.vb.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>