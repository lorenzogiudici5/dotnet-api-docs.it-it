<Type Name="IDynamicPropertyTypeProvider" FullName="System.Workflow.ComponentModel.IDynamicPropertyTypeProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="61313e735ad62d2a78070697f17789382904c86a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36448407" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDynamicPropertyTypeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDynamicPropertyTypeProvider" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDynamicPropertyTypeProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDynamicPropertyTypeProvider" />
  <TypeSignature Language="F#" Value="type IDynamicPropertyTypeProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="86b26-101">Fornisce un tipo di proprietà all'infrastruttura dell'associazione.</span>
      <span class="sxs-lookup">
        <span data-stu-id="86b26-101">Provides a property type to the bind infrastructure.</span>
      </span>
      <span data-ttu-id="86b26-102">L'implementazione avviene mediante attività che contengono una proprietà di tipo variabile, dove il tipo può variare a seconda delle altre impostazioni delle attività.</span>
      <span class="sxs-lookup">
        <span data-stu-id="86b26-102">It is implemented by activities that contain a property of variable type, where the type can vary depending on other activity settings.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <span data-ttu-id="86b26-103">Questa interfaccia consente all'attività padre di associare due proprietà e indicare all'infrastruttura dell'associazione il tipo da utilizzare per la convalida dell'associazione.</span><span class="sxs-lookup"><span data-stu-id="86b26-103">This interface allows the parent activity to associate two properties and indicate to the bind infrastructure the type to be used in validating the bind.</span></span> <span data-ttu-id="86b26-104">Ad esempio, è possibile avere un'attività con due proprietà `TypeProperty` e `ValueProperty`, dove `TypeProperty` specifica un tipo valido per il valore di `ValueProperty`.</span><span class="sxs-lookup"><span data-stu-id="86b26-104">For example, you might have an activity with two properties, `TypeProperty` and `ValueProperty`, where `TypeProperty` specifies a valid type for the value of `ValueProperty`.</span></span> <span data-ttu-id="86b26-105">In tal caso, l'attività padre implementa l'interfaccia <xref:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider>.</span><span class="sxs-lookup"><span data-stu-id="86b26-105">In such a case, the parent activity implements the <xref:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider> interface.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetAccessType">
      <MemberSignature Language="C#" Value="public System.Workflow.ComponentModel.Compiler.AccessTypes GetAccessType (IServiceProvider serviceProvider, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Workflow.ComponentModel.Compiler.AccessTypes GetAccessType(class System.IServiceProvider serviceProvider, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(System.IServiceProvider,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessType (serviceProvider As IServiceProvider, propertyName As String) As AccessTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::ComponentModel::Compiler::AccessTypes GetAccessType(IServiceProvider ^ serviceProvider, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="abstract member GetAccessType : IServiceProvider * string -&gt; System.Workflow.ComponentModel.Compiler.AccessTypes" Usage="iDynamicPropertyTypeProvider.GetAccessType (serviceProvider, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Compiler.AccessTypes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">
          <span data-ttu-id="86b26-106">Un oggetto che implementa <see cref="T:System.IServiceProvider" /> per fornire accesso ai servizi utilizzati nella fase di progettazione, se necessari.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86b26-106">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are needed.</span>
          </span>
        </param>
        <param name="propertyName">
          <span data-ttu-id="86b26-107">Nome della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86b26-107">The name of the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86b26-108">Restituisce il tipo di accesso per la proprietà specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86b26-108">Returns the access type for the specified property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86b26-109">Valore di enumerazione di <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> che indica il livello di accesso della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86b26-109">An <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> enumeration value that denotes the access level of the property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b26-110">Questo oggetto viene utilizzato in fase di compilazione per controllare se le proprietà sono associate correttamente fra loro.</span><span class="sxs-lookup"><span data-stu-id="86b26-110">Used at compile time to validate if the properties are correctly bound to one other.</span></span> <span data-ttu-id="86b26-111">Senza questa interfaccia, queste informazioni vengono derivate direttamente dai metodi di richiamo e impostazione delle proprietà.</span><span class="sxs-lookup"><span data-stu-id="86b26-111">Without this interface, this information is inferred directly from property getter/setters.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyType">
      <MemberSignature Language="C#" Value="public Type GetPropertyType (IServiceProvider serviceProvider, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetPropertyType(class System.IServiceProvider serviceProvider, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(System.IServiceProvider,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPropertyType (serviceProvider As IServiceProvider, propertyName As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetPropertyType(IServiceProvider ^ serviceProvider, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="abstract member GetPropertyType : IServiceProvider * string -&gt; Type" Usage="iDynamicPropertyTypeProvider.GetPropertyType (serviceProvider, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">
          <span data-ttu-id="86b26-112">Oggetto che implementa <see cref="T:System.IServiceProvider" /> per fornire accesso ai servizi utilizzati nella fase di progettazione eventualmente necessari.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86b26-112">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design-time services if they are needed.</span>
          </span>
        </param>
        <param name="propertyName">
          <span data-ttu-id="86b26-113">Nome della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86b26-113">The name of the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86b26-114">Restituisce l'oggetto <see cref="T:System.Type" /> della proprietà specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86b26-114">Returns the <see cref="T:System.Type" /> of the specified property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86b26-115">Oggetto <see cref="T:System.Type" /> della proprietà il cui nome è passato come parametro <paramref name="propertyName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86b26-115">The <see cref="T:System.Type" /> for the property whose name is passed as the <paramref name="propertyName" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b26-116">Questo oggetto viene utilizzato in fase di compilazione per controllare se le proprietà sono associate correttamente fra loro.</span><span class="sxs-lookup"><span data-stu-id="86b26-116">Used at compile time to validate if the properties are correctly bound to one other.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>