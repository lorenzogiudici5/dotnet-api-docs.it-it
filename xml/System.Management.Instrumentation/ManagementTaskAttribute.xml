<Type Name="ManagementTaskAttribute" FullName="System.Management.Instrumentation.ManagementTaskAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="307a5db2b23c336bf8b079627c6ff3cf4060253b" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37756820" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ManagementTaskAttribute : System.Management.Instrumentation.ManagementMemberAttribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManagementTaskAttribute extends System.Management.Instrumentation.ManagementMemberAttribute" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.ManagementTaskAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManagementTaskAttribute&#xA;Inherits ManagementMemberAttribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManagementTaskAttribute sealed : System::Management::Instrumentation::ManagementMemberAttribute" />
  <TypeSignature Language="F#" Value="type ManagementTaskAttribute = class&#xA;    inherit ManagementMemberAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Management.Instrumentation.ManagementMemberAttribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The ManagementTask attribute indicates that the target method implements a WMI method.  Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries. The [MI APIs](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, il nome del metodo WMI sarà il nome del metodo di destinazione. La classe padre di questo attributo, <xref:System.Management.Instrumentation.ManagementMemberAttribute>, include un parametro del nome. È possibile usare tale parametro per modificare il nome del metodo che viene esposta tramite WMI senza modificare il nome del metodo interno.  
  
 Il metodo deve essere pubblico e può essere statico. Può includere qualsiasi combinazione di [in], [out], [in/out], oggetto o matrice di parametri per riferimento. I parametri di matrice non possono essere multidimensionali o matrici a causa delle limitazioni imposte da WMI.  
  
 Il tipo restituito del metodo può essere: void, scalare, string, datetime o dell'oggetto. Non può essere una matrice.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come contrassegnare un metodo con l'attributo ManagementTask per esporre il metodo WMI. Il metodo verrà visualizzata in WMI come ResetCounters.  
  
```csharp  
// Use the ManagementTask attribute to specify that a method  
// is exposed to WMI through this provider. Consumers will be  
// able to execute this method through WMI.  
[ManagementTask]  
public void ResetCounters()  
{  
    counter.Reset();  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Management.Instrumentation.ManagementConfigurationAttribute" />
    <altmember cref="T:System.Management.Instrumentation.ManagementEnumeratorAttribute" />
    <altmember cref="T:System.Management.Instrumentation.ManagementProbeAttribute" />
    <altmember cref="T:System.Management.Instrumentation.ManagementKeyAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManagementTaskAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.ManagementTaskAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManagementTaskAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.ManagementTaskAttribute" /> class. This is the default constructor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schema">
      <MemberSignature Language="C#" Value="public Type Schema { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Schema" />
      <MemberSignature Language="DocId" Value="P:System.Management.Instrumentation.ManagementTaskAttribute.Schema" />
      <MemberSignature Language="VB.NET" Value="Public Property Schema As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Schema { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Schema : Type with get, set" Usage="System.Management.Instrumentation.ManagementTaskAttribute.Schema" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that defines the type of output that the method that is marked with the ManagementTask attribute will output.</summary>
        <value>Oggetto <see cref="T:System.Type" /> valore che indica il tipo di output che verrà restituito dal metodo contrassegnato dall'attributo ManagementTask.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il tipo restituito <xref:System.Object?displayProperty=nameWithType>, l'output dovrebbe essere considerata come un valore di tipo <xref:System.Object?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>