<Type Name="ManagementEntityAttribute" FullName="System.Management.Instrumentation.ManagementEntityAttribute">
  <TypeSignature Language="C#" Value="public sealed class ManagementEntityAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManagementEntityAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.ManagementEntityAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManagementEntityAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManagementEntityAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="91e57-101">L'attributo ManagementEntity indica che una classe fornisce informazioni sulla gestione esposte tramite un provider WMI.</span><span class="sxs-lookup"><span data-stu-id="91e57-101">The ManagementEntity attribute indicates that a class provides management information exposed through a WMI provider.</span></span>  
  
 <span data-ttu-id="91e57-102">Nota: le librerie .NET di WMI sono ora considerate in stato finale e non saranno disponibili altri sviluppi, miglioramenti o aggiornamenti per i problemi non correlati alla sicurezza che interessano queste librerie.</span><span class="sxs-lookup"><span data-stu-id="91e57-102">Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries.</span></span> <span data-ttu-id="91e57-103">Per tutte le nuove attività di sviluppo devono essere usate le [API MI](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx).</span><span class="sxs-lookup"><span data-stu-id="91e57-103">The [MI APIs](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91e57-104">La classe contrassegnata da questo attributo deve essere pubblica.</span><span class="sxs-lookup"><span data-stu-id="91e57-104">The class marked by this attribute must be public.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91e57-105">Nell'esempio seguente viene illustrato come utilizzare l'attributo ManagementEntity per contrassegnare una classe.</span><span class="sxs-lookup"><span data-stu-id="91e57-105">The following example shows how to use the ManagementEntity attribute to mark a class.</span></span>  
  
```  
// Use the ManagementEntity attribute on the class to specify that this // class contains management information that is available from  
// provider.  
  
    [ManagementEntity(Name = "MortgageCalc")]  
    public class MortgageCalcWMIProvider  
    {  
    }  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManagementEntityAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.ManagementEntityAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManagementEntityAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91e57-106">Inizializza una nuova istanza della classe <see cref="T:System.Management.ManagementEntityAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="91e57-106">Initializes a new instance of the <see cref="T:System.Management.ManagementEntityAttribute" /> class.</span></span> <span data-ttu-id="91e57-107">È il costruttore predefinito.</span><span class="sxs-lookup"><span data-stu-id="91e57-107">This is the default constructor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91e57-108">Questo costruttore non accetta un parametro di nome.</span><span class="sxs-lookup"><span data-stu-id="91e57-108">This constructor does not take a name parameter.</span></span> <span data-ttu-id="91e57-109">Se non si specifica un nome utilizzando il <xref:System.Management.Instrumentation.ManagementEntityAttribute.Name> parametro, il nome della classe WMI associata utilizzerà il nome della classe con attributo.</span><span class="sxs-lookup"><span data-stu-id="91e57-109">If you do not specify a name by using the <xref:System.Management.Instrumentation.ManagementEntityAttribute.Name> parameter, the name of the associated WMI class will default to the name of the attributed class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="External">
      <MemberSignature Language="C#" Value="public bool External { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool External" />
      <MemberSignature Language="DocId" Value="P:System.Management.Instrumentation.ManagementEntityAttribute.External" />
      <MemberSignature Language="VB.NET" Value="Public Property External As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool External { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="91e57-110">Ottiene o imposta un valore che specifica se la classe rappresenta una classe WMI in un provider implementato esterno all'assembly corrente.</span><span class="sxs-lookup"><span data-stu-id="91e57-110">Gets or sets a value that specifies whether the class represents a WMI class in a provider implemented external to the current assembly.</span></span></summary>
        <value><span data-ttu-id="91e57-111">Valore booleano uguale a true se la classe rappresenta una classe WMI esterna e uguale a false in caso contrario.</span><span class="sxs-lookup"><span data-stu-id="91e57-111">A boolean value that is true if the class represents an external WMI class and false otherwise.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91e57-112">Viene utilizzato quando si implementano i provider che implementano le classi che estendono le classi WMI esistenti astratte.</span><span class="sxs-lookup"><span data-stu-id="91e57-112">This is used when implementing providers that implement classes that extend existing abstract WMI classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Management.Instrumentation.ManagementEntityAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="91e57-113">Ottiene o imposta il nome della classe WMI.</span><span class="sxs-lookup"><span data-stu-id="91e57-113">Gets or sets the name of the WMI class.</span></span></summary>
        <value><span data-ttu-id="91e57-114">Stringa contenente il nome della classe WMI.</span><span class="sxs-lookup"><span data-stu-id="91e57-114">A string that contains the name of the WMI class.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91e57-115">Se non si specifica il nome della classe WMI impostando questa proprietà, la classe WMI utilizzerà il nome della classe con attributo.</span><span class="sxs-lookup"><span data-stu-id="91e57-115">If you do not specify the name of the WMI class by setting this property, the WMI class will default to the name of the attributed class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91e57-116">Nell'esempio seguente, il parametro Name viene utilizzato per impostare il nome della classe WMI rappresentata dalla classe MortgageCalcWMIProvider.</span><span class="sxs-lookup"><span data-stu-id="91e57-116">In the following example, the Name parameter is used to set the name of the WMI class represented by the MortgageCalcWMIProvider class.</span></span> <span data-ttu-id="91e57-117">Imposta il nome su MortgageCalculator.</span><span class="sxs-lookup"><span data-stu-id="91e57-117">It sets the name to MortgageCalculator.</span></span> <span data-ttu-id="91e57-118">Se il nome di parametro non è utilizzato, il corrispondente nome della classe c# MortgageCalcWMIProvider in questo caso, viene utilizzato come nome della classe WMI.</span><span class="sxs-lookup"><span data-stu-id="91e57-118">If the Name parameter is not used, the corresponding C# class name, MortgageCalcWMIProvider in this case, is used as the WMI class name.</span></span>  
  
```  
[ManagementEntity(Name = "MortgageCalculator")]  
public class MortgageCalcWMIProvider  
{  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Singleton">
      <MemberSignature Language="C#" Value="public bool Singleton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Singleton" />
      <MemberSignature Language="DocId" Value="P:System.Management.Instrumentation.ManagementEntityAttribute.Singleton" />
      <MemberSignature Language="VB.NET" Value="Public Property Singleton As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Singleton { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="91e57-119">Specifica se la classe associata rappresenta una classe WMI singleton.</span><span class="sxs-lookup"><span data-stu-id="91e57-119">Specifies whether the associated class represents a singleton WMI class.</span></span></summary>
        <value><span data-ttu-id="91e57-120">Valore booleano uguale a true se la classe rappresenta una classe WMI singleton e uguale a false in caso contrario.</span><span class="sxs-lookup"><span data-stu-id="91e57-120">A boolean value that is true if the class represents a singleton WMI class and false otherwise.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91e57-121">Una classe WMI singleton è per i quali è sempre possibile una sola istanza.</span><span class="sxs-lookup"><span data-stu-id="91e57-121">A singleton WMI class is one for which there can only ever be a single instance.</span></span> <span data-ttu-id="91e57-122">Anche se è possibile codificare la logica per garantire che solo una singola istanza di una classe WMI viene sempre creata, viene fornito l'attributo di parametro per consentire l'esecuzione di attività semplice e coerente.</span><span class="sxs-lookup"><span data-stu-id="91e57-122">Although you could code the logic to ensure that only a single instance of a WMI class is ever created, this parameter attribute is provided to make the task easy and consistent.</span></span>  
  
 <span data-ttu-id="91e57-123">Quando si utilizzano le classi WMI singleton, le applicazioni client devono utilizzare una sintassi speciale.</span><span class="sxs-lookup"><span data-stu-id="91e57-123">When working with singleton WMI classes, client applications must use special syntax.</span></span> <span data-ttu-id="91e57-124">Per altre informazioni, vedere il Describing un argomento di percorso dell'oggetto istanza in MSDN online library presso [ http://www.msdn.com ](http://www.msdn.com/).</span><span class="sxs-lookup"><span data-stu-id="91e57-124">For more information, see the Describing an Instance Object Path topic in the MSDN online library at [http://www.msdn.com](http://www.msdn.com/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91e57-125">Frammento di codice riportato di seguito viene illustrato come utilizzare il parametro Singleton per indicare che una classe c# corrisponde a una classe WMI singleton.</span><span class="sxs-lookup"><span data-stu-id="91e57-125">The following code snippet demonstrates how to use the Singleton parameter to indicate that a C# class corresponds to a singleton WMI class.</span></span>  
  
```  
[ManagementEntity(Singleton=true)]  
public class SingletonSample  
```  
  
 <span data-ttu-id="91e57-126">Per un esempio completo, l'utilizzo di un provider che implementa una classe singleton, vedere [procedura: creare un Provider disaccoppiati base](http://msdn.microsoft.com/library/1dabd442-c1ff-40a1-bb0e-d7b3566c2300).</span><span class="sxs-lookup"><span data-stu-id="91e57-126">For a complete, working example of a provider that implements a singleton class, see [How to: Create a Basic Decoupled Provider](http://msdn.microsoft.com/library/1dabd442-c1ff-40a1-bb0e-d7b3566c2300).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>