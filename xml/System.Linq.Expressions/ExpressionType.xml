<Type Name="ExpressionType" FullName="System.Linq.Expressions.ExpressionType">
  <TypeSignature Language="C#" Value="public enum ExpressionType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ExpressionType extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.ExpressionType" />
  <TypeSignature Language="VB.NET" Value="Public Enum ExpressionType" />
  <TypeSignature Language="C++ CLI" Value="public enum class ExpressionType" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><span data-ttu-id="66759-101">Descrive i tipi di nodo per i nodi di un albero delle espressioni.</span><span class="sxs-lookup"><span data-stu-id="66759-101">Describes the node types for the nodes of an expression tree.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66759-102">Per ulteriori informazioni su ogni valore di enumerazione di questo tipo, vedere [Panoramica di Dynamic Language Runtime](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md).</span><span class="sxs-lookup"><span data-stu-id="66759-102">For more information about each enumeration value of this type, see [Dynamic Language Runtime Overview](~/docs/framework/reflection-and-codedom/dynamic-language-runtime-overview.md).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="Add" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Add = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Add" />
      <MemberSignature Language="VB.NET" Value="Add" />
      <MemberSignature Language="C++ CLI" Value="Add" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-103">Operazione di addizione, ad esempio <c>a + b</c>, senza controllo dell'overflow, per operandi numerici.</span><span class="sxs-lookup"><span data-stu-id="66759-103">An addition operation, such as <c>a + b</c>, without overflow checking, for numeric operands.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="AddAssign" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType AddAssign = int32(63)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.AddAssign" />
      <MemberSignature Language="VB.NET" Value="AddAssign" />
      <MemberSignature Language="C++ CLI" Value="AddAssign" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>63</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-104">Operazione di assegnazione composta di addizione, ad esempio <c>(a += b)</c>, senza controllo dell'overflow, per operandi numerici.</span><span class="sxs-lookup"><span data-stu-id="66759-104">An addition compound assignment operation, such as <c>(a += b)</c>, without overflow checking, for numeric operands.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="AddAssignChecked" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType AddAssignChecked = int32(74)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />
      <MemberSignature Language="VB.NET" Value="AddAssignChecked" />
      <MemberSignature Language="C++ CLI" Value="AddAssignChecked" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>74</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-105">Operazione di assegnazione composta di addizione, ad esempio <c>(a += b)</c>, con controllo dell'overflow, per operandi numerici.</span><span class="sxs-lookup"><span data-stu-id="66759-105">An addition compound assignment operation, such as <c>(a += b)</c>, with overflow checking, for numeric operands.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="AddChecked">
      <MemberSignature Language="C#" Value="AddChecked" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType AddChecked = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.AddChecked" />
      <MemberSignature Language="VB.NET" Value="AddChecked" />
      <MemberSignature Language="C++ CLI" Value="AddChecked" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-106">Operazione di addizione, ad esempio <c>(a + b)</c>, con controllo dell'overflow, per operandi numerici.</span><span class="sxs-lookup"><span data-stu-id="66759-106">An addition operation, such as <c>(a + b)</c>, with overflow checking, for numeric operands.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="And" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType And = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.And" />
      <MemberSignature Language="VB.NET" Value="And" />
      <MemberSignature Language="C++ CLI" Value="And" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-107">Operazione <see langword="AND" /> bit per bit o logica, ad esempio <c>(a &amp; b)</c> in C# e <c>(a And b)</c> in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-107">A bitwise or logical <see langword="AND" /> operation, such as <c>(a &amp; b)</c> in C# and <c>(a And b)</c> in Visual Basic.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="AndAlso">
      <MemberSignature Language="C#" Value="AndAlso" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType AndAlso = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.AndAlso" />
      <MemberSignature Language="VB.NET" Value="AndAlso" />
      <MemberSignature Language="C++ CLI" Value="AndAlso" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-108">Operazione <see langword="AND" /> condizionale che valuta il secondo operando solo se il primo operando restituisce <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="66759-108">A conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="true" />.</span></span> <span data-ttu-id="66759-109">Corrisponde a un'operazione <c>(a &amp;&amp; b)</c> in C# e <c>(AndAlso b)</c> in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-109">It corresponds to <c>(a &amp;&amp; b)</c> in C# and <c>(a AndAlso b)</c> in Visual Basic.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="AndAssign" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType AndAssign = int32(64)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.AndAssign" />
      <MemberSignature Language="VB.NET" Value="AndAssign" />
      <MemberSignature Language="C++ CLI" Value="AndAssign" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>64</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-110">Operazione di assegnazione composta <see langword="AND" /> bit per bit o logica, ad esempio <c>(a &amp;= b)</c> in C#.</span><span class="sxs-lookup"><span data-stu-id="66759-110">A bitwise or logical <see langword="AND" /> compound assignment operation, such as <c>(a &amp;= b)</c> in C#.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="ArrayIndex" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType ArrayIndex = int32(5)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.ArrayIndex" />
      <MemberSignature Language="VB.NET" Value="ArrayIndex" />
      <MemberSignature Language="C++ CLI" Value="ArrayIndex" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-111">Operazione di indicizzazione in una matrice unidimensionale, ad esempio <c>array[index]</c> in C# o <c>array(index)</c> in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-111">An indexing operation in a one-dimensional array, such as <c>array[index]</c> in C# or <c>array(index)</c> in Visual Basic.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="ArrayLength">
      <MemberSignature Language="C#" Value="ArrayLength" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType ArrayLength = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.ArrayLength" />
      <MemberSignature Language="VB.NET" Value="ArrayLength" />
      <MemberSignature Language="C++ CLI" Value="ArrayLength" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-112">Operazione che ottiene la lunghezza di una matrice unidimensionale, ad esempio <c>array.Length</c>.</span><span class="sxs-lookup"><span data-stu-id="66759-112">An operation that obtains the length of a one-dimensional array, such as <c>array.Length</c>.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Assign">
      <MemberSignature Language="C#" Value="Assign" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Assign = int32(46)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Assign" />
      <MemberSignature Language="VB.NET" Value="Assign" />
      <MemberSignature Language="C++ CLI" Value="Assign" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>46</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-113">Operazione di assegnazione, ad esempio <c>(a = b)</c>.</span><span class="sxs-lookup"><span data-stu-id="66759-113">An assignment operation, such as <c>(a = b)</c>.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="Block" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Block = int32(47)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Block" />
      <MemberSignature Language="VB.NET" Value="Block" />
      <MemberSignature Language="C++ CLI" Value="Block" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>47</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-114">Blocco di espressioni.</span><span class="sxs-lookup"><span data-stu-id="66759-114">A block of expressions.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="Call" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Call = int32(6)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Call" />
      <MemberSignature Language="VB.NET" Value="Call" />
      <MemberSignature Language="C++ CLI" Value="Call" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>6</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-115">Chiamata a un metodo, ad esempio nell'espressione <c>obj.sampleMethod()</c>.</span><span class="sxs-lookup"><span data-stu-id="66759-115">A method call, such as in the <c>obj.sampleMethod()</c> expression.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Coalesce">
      <MemberSignature Language="C#" Value="Coalesce" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Coalesce = int32(7)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Coalesce" />
      <MemberSignature Language="VB.NET" Value="Coalesce" />
      <MemberSignature Language="C++ CLI" Value="Coalesce" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>7</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-116">Nodo che rappresenta un'operazione di unione Null, ad esempio <c>(a ?? b)</c> in C# o <c>If(a, b)</c> in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-116">A node that represents a null coalescing operation, such as <c>(a ?? b)</c> in C# or <c>If(a, b)</c> in Visual Basic.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Conditional">
      <MemberSignature Language="C#" Value="Conditional" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Conditional = int32(8)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Conditional" />
      <MemberSignature Language="VB.NET" Value="Conditional" />
      <MemberSignature Language="C++ CLI" Value="Conditional" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>8</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-117">Operazione condizionale, ad esempio <c>a &gt; b ? a : b</c> in C# o <c>If(a &gt; b, a, b)</c> in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-117">A conditional operation, such as <c>a &gt; b ? a : b</c> in C# or <c>If(a &gt; b, a, b)</c> in Visual Basic.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="Constant" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Constant = int32(9)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Constant" />
      <MemberSignature Language="VB.NET" Value="Constant" />
      <MemberSignature Language="C++ CLI" Value="Constant" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>9</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-118">Valore costante.</span><span class="sxs-lookup"><span data-stu-id="66759-118">A constant value.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="Convert" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Convert = int32(10)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Convert" />
      <MemberSignature Language="VB.NET" Value="Convert" />
      <MemberSignature Language="C++ CLI" Value="Convert" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>10</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-119">Operazione di casting o conversione, ad esempio <c>(SampleType)obj</c> in C# o <c>CType(obj, SampleType)</c> in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-119">A cast or conversion operation, such as <c>(SampleType)obj</c> in C#or <c>CType(obj, SampleType)</c> in Visual Basic.</span></span> <span data-ttu-id="66759-120">Nel caso di una conversione numerica, se il valore convertito è troppo lungo per il tipo di destinazione non viene generata alcuna eccezione.</span><span class="sxs-lookup"><span data-stu-id="66759-120">For a numeric conversion, if the converted value is too large for the destination type, no exception is thrown.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="ConvertChecked">
      <MemberSignature Language="C#" Value="ConvertChecked" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType ConvertChecked = int32(11)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />
      <MemberSignature Language="VB.NET" Value="ConvertChecked" />
      <MemberSignature Language="C++ CLI" Value="ConvertChecked" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>11</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-121">Operazione di casting o conversione, ad esempio <c>(SampleType)obj</c> in C# o <c>CType(obj, SampleType)</c> in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-121">A cast or conversion operation, such as <c>(SampleType)obj</c> in C#or <c>CType(obj, SampleType)</c> in Visual Basic.</span></span> <span data-ttu-id="66759-122">Nel caso di una conversione numerica, se il valore convertito è troppo lungo per il tipo di destinazione viene generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="66759-122">For a numeric conversion, if the converted value does not fit the destination type, an exception is thrown.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="DebugInfo">
      <MemberSignature Language="C#" Value="DebugInfo" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType DebugInfo = int32(48)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.DebugInfo" />
      <MemberSignature Language="VB.NET" Value="DebugInfo" />
      <MemberSignature Language="C++ CLI" Value="DebugInfo" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>48</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-123">Informazioni sul debug.</span><span class="sxs-lookup"><span data-stu-id="66759-123">Debugging information.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="Decrement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Decrement = int32(49)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Decrement" />
      <MemberSignature Language="VB.NET" Value="Decrement" />
      <MemberSignature Language="C++ CLI" Value="Decrement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>49</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-124">Operazione di decremento unaria, ad esempio <c>(a - 1)</c> in C# e Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-124">A unary decrement operation, such as <c>(a - 1)</c> in C# and Visual Basic.</span></span> <span data-ttu-id="66759-125">È necessario che l'oggetto <c>a</c> non venga modificato sul posto.</span><span class="sxs-lookup"><span data-stu-id="66759-125">The object <c>a</c> should not be modified in place.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="Default" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Default = int32(51)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Default" />
      <MemberSignature Language="VB.NET" Value="Default" />
      <MemberSignature Language="C++ CLI" Value="Default" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>51</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-126">Valore predefinito.</span><span class="sxs-lookup"><span data-stu-id="66759-126">A default value.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="Divide" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Divide = int32(12)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Divide" />
      <MemberSignature Language="VB.NET" Value="Divide" />
      <MemberSignature Language="C++ CLI" Value="Divide" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>12</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-127">Operazione di divisione, ad esempio <c>(a / b)</c>, per operandi numerici.</span><span class="sxs-lookup"><span data-stu-id="66759-127">A division operation, such as <c>(a / b)</c>, for numeric operands.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="DivideAssign" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType DivideAssign = int32(65)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.DivideAssign" />
      <MemberSignature Language="VB.NET" Value="DivideAssign" />
      <MemberSignature Language="C++ CLI" Value="DivideAssign" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>65</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-128">Operazione di assegnazione composta di divisione, ad esempio <c>(a /= b)</c>, per operandi numerici.</span><span class="sxs-lookup"><span data-stu-id="66759-128">An division compound assignment operation, such as <c>(a /= b)</c>, for numeric operands.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="Dynamic" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Dynamic = int32(50)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Dynamic" />
      <MemberSignature Language="VB.NET" Value="Dynamic" />
      <MemberSignature Language="C++ CLI" Value="Dynamic" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>50</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-129">Operazione dinamica.</span><span class="sxs-lookup"><span data-stu-id="66759-129">A dynamic operation.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="Equal" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Equal = int32(13)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Equal" />
      <MemberSignature Language="VB.NET" Value="Equal" />
      <MemberSignature Language="C++ CLI" Value="Equal" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>13</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-130">Nodo che rappresenta un confronto delle uguaglianze, ad esempio <c>(a == b)</c> in C# o <c>(a = b)</c> in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-130">A node that represents an equality comparison, such as <c>(a == b)</c> in C# or <c>(a = b)</c> in Visual Basic.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOr">
      <MemberSignature Language="C#" Value="ExclusiveOr" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType ExclusiveOr = int32(14)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />
      <MemberSignature Language="VB.NET" Value="ExclusiveOr" />
      <MemberSignature Language="C++ CLI" Value="ExclusiveOr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>14</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-131">Operazione <see langword="XOR" /> bit per bit o logica, ad esempio <c>(a ^ b)</c> in C# o <c>(a Xor b)</c> in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-131">A bitwise or logical <see langword="XOR" /> operation, such as <c>(a ^ b)</c> in C# or <c>(a Xor b)</c> in Visual Basic.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="ExclusiveOrAssign" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType ExclusiveOrAssign = int32(66)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />
      <MemberSignature Language="VB.NET" Value="ExclusiveOrAssign" />
      <MemberSignature Language="C++ CLI" Value="ExclusiveOrAssign" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>66</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-132">Operazione di assegnazione composta <see langword="XOR" /> bit per bit o logica, ad esempio <c>(a ^= b)</c> in C#.</span><span class="sxs-lookup"><span data-stu-id="66759-132">A bitwise or logical <see langword="XOR" /> compound assignment operation, such as <c>(a ^= b)</c> in C#.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Extension">
      <MemberSignature Language="C#" Value="Extension" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Extension = int32(52)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Extension" />
      <MemberSignature Language="VB.NET" Value="Extension" />
      <MemberSignature Language="C++ CLI" Value="Extension" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>52</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-133">Espressione di estensione.</span><span class="sxs-lookup"><span data-stu-id="66759-133">An extension expression.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="Goto" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Goto = int32(53)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Goto" />
      <MemberSignature Language="VB.NET" Value="Goto" />
      <MemberSignature Language="C++ CLI" Value="Goto" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>53</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-134">Espressione "go to", ad esempio <c>goto Label</c> in C# o <c>GoTo Label</c> in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-134">A "go to" expression, such as <c>goto Label</c> in C# or <c>GoTo Label</c> in Visual Basic.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="GreaterThan" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType GreaterThan = int32(15)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.GreaterThan" />
      <MemberSignature Language="VB.NET" Value="GreaterThan" />
      <MemberSignature Language="C++ CLI" Value="GreaterThan" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>15</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-135">Confronto "maggiore di", ad esempio <c>(a &gt; b)</c>.</span><span class="sxs-lookup"><span data-stu-id="66759-135">A "greater than" comparison, such as <c>(a &gt; b)</c>.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="GreaterThanOrEqual" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType GreaterThanOrEqual = int32(16)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />
      <MemberSignature Language="VB.NET" Value="GreaterThanOrEqual" />
      <MemberSignature Language="C++ CLI" Value="GreaterThanOrEqual" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-136">Confronto "maggiore o uguale a", ad esempio <c>(a &gt;= b)</c>.</span><span class="sxs-lookup"><span data-stu-id="66759-136">A "greater than or equal to" comparison, such as <c>(a &gt;= b)</c>.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="Increment" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Increment = int32(54)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Increment" />
      <MemberSignature Language="VB.NET" Value="Increment" />
      <MemberSignature Language="C++ CLI" Value="Increment" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>54</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-137">Operazione di incremento unaria, ad esempio <c>(a + 1)</c> in C# e Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-137">A unary increment operation, such as <c>(a + 1)</c> in C# and Visual Basic.</span></span> <span data-ttu-id="66759-138">È necessario che l'oggetto <c>a</c> non venga modificato sul posto.</span><span class="sxs-lookup"><span data-stu-id="66759-138">The object <c>a</c> should not be modified in place.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="Index" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Index = int32(55)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Index" />
      <MemberSignature Language="VB.NET" Value="Index" />
      <MemberSignature Language="C++ CLI" Value="Index" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>55</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-139">Operazione di indicizzazione o operazione che accede a una proprietà che accetta argomenti.</span><span class="sxs-lookup"><span data-stu-id="66759-139">An index operation or an operation that accesses a property that takes arguments.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="Invoke" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Invoke = int32(17)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Invoke" />
      <MemberSignature Language="VB.NET" Value="Invoke" />
      <MemberSignature Language="C++ CLI" Value="Invoke" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>17</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-140">Operazione che richiama un delegato o un'espressione lambda, ad esempio <c>sampleDelegate.Invoke()</c>.</span><span class="sxs-lookup"><span data-stu-id="66759-140">An operation that invokes a delegate or lambda expression, such as <c>sampleDelegate.Invoke()</c>.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="IsFalse" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType IsFalse = int32(84)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.IsFalse" />
      <MemberSignature Language="VB.NET" Value="IsFalse" />
      <MemberSignature Language="C++ CLI" Value="IsFalse" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>84</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-141">Valore condizionale <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="66759-141">A <see langword="false" /> condition value.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="IsTrue" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType IsTrue = int32(83)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.IsTrue" />
      <MemberSignature Language="VB.NET" Value="IsTrue" />
      <MemberSignature Language="C++ CLI" Value="IsTrue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>83</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-142">Valore condizionale <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="66759-142">A <see langword="true" /> condition value.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="Label" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Label = int32(56)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Label" />
      <MemberSignature Language="VB.NET" Value="Label" />
      <MemberSignature Language="C++ CLI" Value="Label" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>56</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-143">Etichetta.</span><span class="sxs-lookup"><span data-stu-id="66759-143">A label.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="Lambda" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Lambda = int32(18)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Lambda" />
      <MemberSignature Language="VB.NET" Value="Lambda" />
      <MemberSignature Language="C++ CLI" Value="Lambda" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>18</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-144">Espressione lambda, ad esempio <c>a =&gt; a + a</c> in C# o <c>Function(a) a + a</c> in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-144">A lambda expression, such as <c>a =&gt; a + a</c> in C# or <c>Function(a) a + a</c> in Visual Basic.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="LeftShift">
      <MemberSignature Language="C#" Value="LeftShift" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType LeftShift = int32(19)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.LeftShift" />
      <MemberSignature Language="VB.NET" Value="LeftShift" />
      <MemberSignature Language="C++ CLI" Value="LeftShift" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>19</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-145">Operazione di scorrimento a sinistra bit per bit, ad esempio <c>(a &lt;&lt; b)</c>.</span><span class="sxs-lookup"><span data-stu-id="66759-145">A bitwise left-shift operation, such as <c>(a &lt;&lt; b)</c>.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="LeftShiftAssign" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType LeftShiftAssign = int32(67)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />
      <MemberSignature Language="VB.NET" Value="LeftShiftAssign" />
      <MemberSignature Language="C++ CLI" Value="LeftShiftAssign" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>67</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-146">Assegnazione composta di scorrimento a sinistra bit per bit, ad esempio <c>(a &lt;&lt;= b)</c>.</span><span class="sxs-lookup"><span data-stu-id="66759-146">A bitwise left-shift compound assignment, such as <c>(a &lt;&lt;= b)</c>.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="LessThan" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType LessThan = int32(20)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.LessThan" />
      <MemberSignature Language="VB.NET" Value="LessThan" />
      <MemberSignature Language="C++ CLI" Value="LessThan" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>20</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-147">Confronto "minore di", ad esempio <c>(a &lt; b)</c>.</span><span class="sxs-lookup"><span data-stu-id="66759-147">A "less than" comparison, such as <c>(a &lt; b)</c>.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="LessThanOrEqual" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType LessThanOrEqual = int32(21)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />
      <MemberSignature Language="VB.NET" Value="LessThanOrEqual" />
      <MemberSignature Language="C++ CLI" Value="LessThanOrEqual" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>21</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-148">Confronto "minore o uguale a", ad esempio <c>(a &lt;= b)</c>.</span><span class="sxs-lookup"><span data-stu-id="66759-148">A "less than or equal to" comparison, such as <c>(a &lt;= b)</c>.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="ListInit" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType ListInit = int32(22)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.ListInit" />
      <MemberSignature Language="VB.NET" Value="ListInit" />
      <MemberSignature Language="C++ CLI" Value="ListInit" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>22</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-149">Operazione che crea un nuovo oggetto <see cref="T:System.Collections.IEnumerable" /> e lo inizializza da un elenco di elementi, ad esempio <c>new List&lt;SampleType&gt;(){ a, b, c }</c> in C# o <c>Dim sampleList = { a, b, c }</c> in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-149">An operation that creates a new <see cref="T:System.Collections.IEnumerable" /> object and initializes it from a list of elements, such as <c>new List&lt;SampleType&gt;(){ a, b, c }</c> in C# or <c>Dim sampleList = { a, b, c }</c> in Visual Basic.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="Loop" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Loop = int32(58)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Loop" />
      <MemberSignature Language="VB.NET" Value="Loop" />
      <MemberSignature Language="C++ CLI" Value="Loop" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>58</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-150">Ciclo, ad esempio <c>for</c> o <c>while</c>.</span><span class="sxs-lookup"><span data-stu-id="66759-150">A loop, such as <c>for</c> or <c>while</c>.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="MemberAccess">
      <MemberSignature Language="C#" Value="MemberAccess" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType MemberAccess = int32(23)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.MemberAccess" />
      <MemberSignature Language="VB.NET" Value="MemberAccess" />
      <MemberSignature Language="C++ CLI" Value="MemberAccess" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>23</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-151">Operazione che legge da un campo o una proprietà, ad esempio <c>obj.SampleProperty</c>.</span><span class="sxs-lookup"><span data-stu-id="66759-151">An operation that reads from a field or property, such as <c>obj.SampleProperty</c>.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="MemberInit">
      <MemberSignature Language="C#" Value="MemberInit" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType MemberInit = int32(24)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.MemberInit" />
      <MemberSignature Language="VB.NET" Value="MemberInit" />
      <MemberSignature Language="C++ CLI" Value="MemberInit" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>24</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-152">Operazione che crea un nuovo oggetto e ne inizializza uno o più membri, ad esempio <c>new Point { X = 1, Y = 2 }</c> in C# o <c>New Point With {.X = 1, .Y = 2}</c> in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-152">An operation that creates a new object and initializes one or more of its members, such as <c>new Point { X = 1, Y = 2 }</c> in C# or <c>New Point With {.X = 1, .Y = 2}</c> in Visual Basic.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Modulo">
      <MemberSignature Language="C#" Value="Modulo" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Modulo = int32(25)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Modulo" />
      <MemberSignature Language="VB.NET" Value="Modulo" />
      <MemberSignature Language="C++ CLI" Value="Modulo" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>25</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-153">Operazione di resto aritmetica, ad esempio <c>(a % b)</c> in C# o <c>(a Mod b)</c> in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-153">An arithmetic remainder operation, such as <c>(a % b)</c> in C# or <c>(a Mod b)</c> in Visual Basic.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="ModuloAssign" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType ModuloAssign = int32(68)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />
      <MemberSignature Language="VB.NET" Value="ModuloAssign" />
      <MemberSignature Language="C++ CLI" Value="ModuloAssign" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>68</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-154">Operazione di assegnazione composta di resto aritmetica, ad esempio <c>(a %= b)</c> in C#.</span><span class="sxs-lookup"><span data-stu-id="66759-154">An arithmetic remainder compound assignment operation, such as <c>(a %= b)</c> in C#.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="Multiply" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Multiply = int32(26)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Multiply" />
      <MemberSignature Language="VB.NET" Value="Multiply" />
      <MemberSignature Language="C++ CLI" Value="Multiply" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>26</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-155">Operazione di moltiplicazione, ad esempio <c>(a \* b)</c>, senza controllo dell'overflow, per operandi numerici.</span><span class="sxs-lookup"><span data-stu-id="66759-155">A multiplication operation, such as <c>(a \* b)</c>, without overflow checking, for numeric operands.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="MultiplyAssign" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType MultiplyAssign = int32(69)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />
      <MemberSignature Language="VB.NET" Value="MultiplyAssign" />
      <MemberSignature Language="C++ CLI" Value="MultiplyAssign" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>69</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-156">Operazione di assegnazione composta di moltiplicazione, ad esempio <c>(a \*= b)</c>, senza controllo dell'overflow, per operandi numerici.</span><span class="sxs-lookup"><span data-stu-id="66759-156">A multiplication compound assignment operation, such as <c>(a \*= b)</c>, without overflow checking, for numeric operands.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="MultiplyAssignChecked" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType MultiplyAssignChecked = int32(75)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />
      <MemberSignature Language="VB.NET" Value="MultiplyAssignChecked" />
      <MemberSignature Language="C++ CLI" Value="MultiplyAssignChecked" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>75</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-157">Operazione di assegnazione composta di moltiplicazione, ad esempio <c>(a \*= b)</c>, con controllo dell'overflow, per operandi numerici.</span><span class="sxs-lookup"><span data-stu-id="66759-157">A multiplication compound assignment operation, such as <c>(a \*= b)</c>, that has overflow checking, for numeric operands.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="MultiplyChecked">
      <MemberSignature Language="C#" Value="MultiplyChecked" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType MultiplyChecked = int32(27)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />
      <MemberSignature Language="VB.NET" Value="MultiplyChecked" />
      <MemberSignature Language="C++ CLI" Value="MultiplyChecked" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>27</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-158">Operazione di moltiplicazione, ad esempio <c>(a \* b)</c>, con controllo dell'overflow, per operandi numerici.</span><span class="sxs-lookup"><span data-stu-id="66759-158">An multiplication operation, such as <c>(a \* b)</c>, that has overflow checking, for numeric operands.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="Negate" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Negate = int32(28)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Negate" />
      <MemberSignature Language="VB.NET" Value="Negate" />
      <MemberSignature Language="C++ CLI" Value="Negate" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>28</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-159">Operazione di negazione aritmetica, ad esempio <c>(-a)</c>.</span><span class="sxs-lookup"><span data-stu-id="66759-159">An arithmetic negation operation, such as <c>(-a)</c>.</span></span> <span data-ttu-id="66759-160">È necessario che l'oggetto <c>a</c> non venga modificato sul posto.</span><span class="sxs-lookup"><span data-stu-id="66759-160">The object <c>a</c> should not be modified in place.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="NegateChecked">
      <MemberSignature Language="C#" Value="NegateChecked" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType NegateChecked = int32(30)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.NegateChecked" />
      <MemberSignature Language="VB.NET" Value="NegateChecked" />
      <MemberSignature Language="C++ CLI" Value="NegateChecked" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>30</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-161">Operazione di negazione aritmetica, ad esempio <c>(-a)</c>, con controllo dell'overflow.</span><span class="sxs-lookup"><span data-stu-id="66759-161">An arithmetic negation operation, such as <c>(-a)</c>, that has overflow checking.</span></span> <span data-ttu-id="66759-162">È necessario che l'oggetto <c>a</c> non venga modificato sul posto.</span><span class="sxs-lookup"><span data-stu-id="66759-162">The object <c>a</c> should not be modified in place.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="New" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType New = int32(31)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.New" />
      <MemberSignature Language="VB.NET" Value="New" />
      <MemberSignature Language="C++ CLI" Value="New" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>31</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-163">Operazione che chiama un costruttore per creare un nuovo oggetto, ad esempio <c>new SampleType()</c>.</span><span class="sxs-lookup"><span data-stu-id="66759-163">An operation that calls a constructor to create a new object, such as <c>new SampleType()</c>.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="NewArrayBounds">
      <MemberSignature Language="C#" Value="NewArrayBounds" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType NewArrayBounds = int32(33)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />
      <MemberSignature Language="VB.NET" Value="NewArrayBounds" />
      <MemberSignature Language="C++ CLI" Value="NewArrayBounds" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>33</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-164">Operazione che crea una nuova matrice in cui sono specificati i limiti per ogni dimensione, ad esempio <c>new SampleType[dim1, dim2]</c> in C# o <c>New SampleType(dim1, dim2)</c> in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-164">An operation that creates a new array, in which the bounds for each dimension are specified, such as <c>new SampleType[dim1, dim2]</c> in C# or <c>New SampleType(dim1, dim2)</c> in Visual Basic.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="NewArrayInit">
      <MemberSignature Language="C#" Value="NewArrayInit" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType NewArrayInit = int32(32)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />
      <MemberSignature Language="VB.NET" Value="NewArrayInit" />
      <MemberSignature Language="C++ CLI" Value="NewArrayInit" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>32</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-165">Operazione che crea una nuova matrice unidimensionale e la inizializza da un elenco di elementi, ad esempio <c>new SampleType[]{a, b, c}</c> in C# o <c>New SampleType(){a, b, c}</c> in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-165">An operation that creates a new one-dimensional array and initializes it from a list of elements, such as <c>new SampleType[]{a, b, c}</c> in C# or <c>New SampleType(){a, b, c}</c> in Visual Basic.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="Not" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Not = int32(34)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Not" />
      <MemberSignature Language="VB.NET" Value="Not" />
      <MemberSignature Language="C++ CLI" Value="Not" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>34</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-166">Operazione di negazione logica o di complemento bit per bit.</span><span class="sxs-lookup"><span data-stu-id="66759-166">A bitwise complement or logical negation operation.</span></span> <span data-ttu-id="66759-167">In C# è equivalente a <c>(~a)</c> per i tipi integrali e a <c>(!a)</c> per i valori booleani.</span><span class="sxs-lookup"><span data-stu-id="66759-167">In C#, it is equivalent to <c>(~a)</c> for integral types and to <c>(!a)</c> for Boolean values.</span></span> <span data-ttu-id="66759-168">In Visual Basic è equivalente a <c>(Not a)</c>.</span><span class="sxs-lookup"><span data-stu-id="66759-168">In Visual Basic, it is equivalent to <c>(Not a)</c>.</span></span> <span data-ttu-id="66759-169">È necessario che l'oggetto <c>a</c> non venga modificato sul posto.</span><span class="sxs-lookup"><span data-stu-id="66759-169">The object <c>a</c> should not be modified in place.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="NotEqual" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType NotEqual = int32(35)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.NotEqual" />
      <MemberSignature Language="VB.NET" Value="NotEqual" />
      <MemberSignature Language="C++ CLI" Value="NotEqual" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>35</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-170">Confronto di disuguaglianza, ad esempio <c>(a != b)</c> in C# o <c>(a &lt;&gt; b)</c> in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-170">An inequality comparison, such as <c>(a != b)</c> in C# or <c>(a &lt;&gt; b)</c> in Visual Basic.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="OnesComplement">
      <MemberSignature Language="C#" Value="OnesComplement" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType OnesComplement = int32(82)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.OnesComplement" />
      <MemberSignature Language="VB.NET" Value="OnesComplement" />
      <MemberSignature Language="C++ CLI" Value="OnesComplement" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>82</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-171">Operazione di complemento a uno, ad esempio <c>(~a)</c> in C#.</span><span class="sxs-lookup"><span data-stu-id="66759-171">A ones complement operation, such as <c>(~a)</c> in C#.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="Or" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Or = int32(36)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Or" />
      <MemberSignature Language="VB.NET" Value="Or" />
      <MemberSignature Language="C++ CLI" Value="Or" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>36</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-172">Operazione <see langword="OR" /> bit per bit o logica, ad esempio <c>(a | b)</c> in C# o <c>(a Or b)</c> in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-172">A bitwise or logical <see langword="OR" /> operation, such as <c>(a | b)</c> in C# or <c>(a Or b)</c> in Visual Basic.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="OrAssign" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType OrAssign = int32(70)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.OrAssign" />
      <MemberSignature Language="VB.NET" Value="OrAssign" />
      <MemberSignature Language="C++ CLI" Value="OrAssign" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>70</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-173">Assegnazione composta <see langword="OR" /> bit per bit o logica, ad esempio <c>(a |= b)</c> in C#.</span><span class="sxs-lookup"><span data-stu-id="66759-173">A bitwise or logical <see langword="OR" /> compound assignment, such as <c>(a |= b)</c> in C#.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="OrElse">
      <MemberSignature Language="C#" Value="OrElse" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType OrElse = int32(37)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.OrElse" />
      <MemberSignature Language="VB.NET" Value="OrElse" />
      <MemberSignature Language="C++ CLI" Value="OrElse" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>37</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-174">Operazione <see langword="OR" /> condizionale di corto circuito, ad esempio <c>(a || b)</c> in C# o <c>(a OrElse b)</c> in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-174">A short-circuiting conditional <see langword="OR" /> operation, such as <c>(a || b)</c> in C# or <c>(a OrElse b)</c> in Visual Basic.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="Parameter" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Parameter = int32(38)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Parameter" />
      <MemberSignature Language="VB.NET" Value="Parameter" />
      <MemberSignature Language="C++ CLI" Value="Parameter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>38</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-175">Riferimento a un parametro o una variabile definiti nel contesto dell'espressione.</span><span class="sxs-lookup"><span data-stu-id="66759-175">A reference to a parameter or variable that is defined in the context of the expression.</span></span> <span data-ttu-id="66759-176">Per ulteriori informazioni, vedere <see cref="T:System.Linq.Expressions.ParameterExpression" />.</span><span class="sxs-lookup"><span data-stu-id="66759-176">For more information, see <see cref="T:System.Linq.Expressions.ParameterExpression" />.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="PostDecrementAssign">
      <MemberSignature Language="C#" Value="PostDecrementAssign" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType PostDecrementAssign = int32(80)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign" />
      <MemberSignature Language="VB.NET" Value="PostDecrementAssign" />
      <MemberSignature Language="C++ CLI" Value="PostDecrementAssign" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>80</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-177">Decremento suffisso unario, ad esempio <c>(a--)</c>.</span><span class="sxs-lookup"><span data-stu-id="66759-177">A unary postfix decrement, such as <c>(a--)</c>.</span></span> <span data-ttu-id="66759-178">È necessario che l'oggetto <c>a</c> venga modificato sul posto.</span><span class="sxs-lookup"><span data-stu-id="66759-178">The object <c>a</c> should be modified in place.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="PostIncrementAssign">
      <MemberSignature Language="C#" Value="PostIncrementAssign" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType PostIncrementAssign = int32(79)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign" />
      <MemberSignature Language="VB.NET" Value="PostIncrementAssign" />
      <MemberSignature Language="C++ CLI" Value="PostIncrementAssign" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>79</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-179">Incremento suffisso unario, ad esempio <c>(a++)</c>.</span><span class="sxs-lookup"><span data-stu-id="66759-179">A unary postfix increment, such as <c>(a++)</c>.</span></span> <span data-ttu-id="66759-180">È necessario che l'oggetto <c>a</c> venga modificato sul posto.</span><span class="sxs-lookup"><span data-stu-id="66759-180">The object <c>a</c> should be modified in place.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="Power" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Power = int32(39)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Power" />
      <MemberSignature Language="VB.NET" Value="Power" />
      <MemberSignature Language="C++ CLI" Value="Power" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>39</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-181">Operazione matematica che eleva un numero a potenza, ad esempio <c>(a ^ b)</c> in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-181">A mathematical operation that raises a number to a power, such as <c>(a ^ b)</c> in Visual Basic.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="PowerAssign" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType PowerAssign = int32(71)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.PowerAssign" />
      <MemberSignature Language="VB.NET" Value="PowerAssign" />
      <MemberSignature Language="C++ CLI" Value="PowerAssign" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>71</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-182">Operazione di assegnazione composta che eleva un numero a potenza, ad esempio <c>(a ^= b)</c> in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-182">A compound assignment operation that raises a number to a power, such as <c>(a ^= b)</c> in Visual Basic.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="PreDecrementAssign">
      <MemberSignature Language="C#" Value="PreDecrementAssign" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType PreDecrementAssign = int32(78)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign" />
      <MemberSignature Language="VB.NET" Value="PreDecrementAssign" />
      <MemberSignature Language="C++ CLI" Value="PreDecrementAssign" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>78</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-183">Decremento prefisso unario, ad esempio <c>(--a)</c>.</span><span class="sxs-lookup"><span data-stu-id="66759-183">A unary prefix decrement, such as <c>(--a)</c>.</span></span> <span data-ttu-id="66759-184">È necessario che l'oggetto <c>a</c> venga modificato sul posto.</span><span class="sxs-lookup"><span data-stu-id="66759-184">The object <c>a</c> should be modified in place.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="PreIncrementAssign">
      <MemberSignature Language="C#" Value="PreIncrementAssign" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType PreIncrementAssign = int32(77)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign" />
      <MemberSignature Language="VB.NET" Value="PreIncrementAssign" />
      <MemberSignature Language="C++ CLI" Value="PreIncrementAssign" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>77</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-185">Incremento prefisso unario, ad esempio <c>(++a)</c>.</span><span class="sxs-lookup"><span data-stu-id="66759-185">A unary prefix increment, such as <c>(++a)</c>.</span></span> <span data-ttu-id="66759-186">È necessario che l'oggetto <c>a</c> venga modificato sul posto.</span><span class="sxs-lookup"><span data-stu-id="66759-186">The object <c>a</c> should be modified in place.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Quote">
      <MemberSignature Language="C#" Value="Quote" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Quote = int32(40)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Quote" />
      <MemberSignature Language="VB.NET" Value="Quote" />
      <MemberSignature Language="C++ CLI" Value="Quote" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>40</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-187">Espressione che ha un valore costante di tipo <see cref="T:System.Linq.Expressions.Expression" />.</span><span class="sxs-lookup"><span data-stu-id="66759-187">An expression that has a constant value of type <see cref="T:System.Linq.Expressions.Expression" />.</span></span> <span data-ttu-id="66759-188">Un nodo <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> può contenere riferimenti ai parametri definiti nel contesto dell'espressione che rappresenta.</span><span class="sxs-lookup"><span data-stu-id="66759-188">A <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> node can contain references to parameters that are defined in the context of the expression it represents.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="RightShift">
      <MemberSignature Language="C#" Value="RightShift" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType RightShift = int32(41)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.RightShift" />
      <MemberSignature Language="VB.NET" Value="RightShift" />
      <MemberSignature Language="C++ CLI" Value="RightShift" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>41</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-189">Operazione di scorrimento a destra bit per bit, ad esempio <c>(a &gt;&gt; b)</c>.</span><span class="sxs-lookup"><span data-stu-id="66759-189">A bitwise right-shift operation, such as <c>(a &gt;&gt; b)</c>.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="RightShiftAssign" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType RightShiftAssign = int32(72)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />
      <MemberSignature Language="VB.NET" Value="RightShiftAssign" />
      <MemberSignature Language="C++ CLI" Value="RightShiftAssign" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>72</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-190">Operazione di assegnazione composta di scorrimento a destra bit per bit, ad esempio <c>(a &gt;&gt;= b)</c>.</span><span class="sxs-lookup"><span data-stu-id="66759-190">A bitwise right-shift compound assignment operation, such as <c>(a &gt;&gt;= b)</c>.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="RuntimeVariables">
      <MemberSignature Language="C#" Value="RuntimeVariables" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType RuntimeVariables = int32(57)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />
      <MemberSignature Language="VB.NET" Value="RuntimeVariables" />
      <MemberSignature Language="C++ CLI" Value="RuntimeVariables" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>57</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-191">Elenco di variabili di run-time.</span><span class="sxs-lookup"><span data-stu-id="66759-191">A list of run-time variables.</span></span> <span data-ttu-id="66759-192">Per ulteriori informazioni, vedere <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span><span class="sxs-lookup"><span data-stu-id="66759-192">For more information, see <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="Subtract" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Subtract = int32(42)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Subtract" />
      <MemberSignature Language="VB.NET" Value="Subtract" />
      <MemberSignature Language="C++ CLI" Value="Subtract" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>42</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-193">Operazione di sottrazione, ad esempio <c>(a - b)</c>, senza controllo dell'overflow, per operandi numerici.</span><span class="sxs-lookup"><span data-stu-id="66759-193">A subtraction operation, such as <c>(a - b)</c>, without overflow checking, for numeric operands.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="SubtractAssign" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType SubtractAssign = int32(73)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />
      <MemberSignature Language="VB.NET" Value="SubtractAssign" />
      <MemberSignature Language="C++ CLI" Value="SubtractAssign" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>73</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-194">Operazione di assegnazione composta di sottrazione, ad esempio <c>(a -= b)</c>, senza controllo dell'overflow, per operandi numerici.</span><span class="sxs-lookup"><span data-stu-id="66759-194">A subtraction compound assignment operation, such as <c>(a -= b)</c>, without overflow checking, for numeric operands.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="SubtractAssignChecked" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType SubtractAssignChecked = int32(76)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />
      <MemberSignature Language="VB.NET" Value="SubtractAssignChecked" />
      <MemberSignature Language="C++ CLI" Value="SubtractAssignChecked" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>76</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-195">Operazione di assegnazione composta di sottrazione, ad esempio <c>(a -= b)</c>, con controllo dell'overflow, per operandi numerici.</span><span class="sxs-lookup"><span data-stu-id="66759-195">A subtraction compound assignment operation, such as <c>(a -= b)</c>, that has overflow checking, for numeric operands.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="SubtractChecked">
      <MemberSignature Language="C#" Value="SubtractChecked" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType SubtractChecked = int32(43)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />
      <MemberSignature Language="VB.NET" Value="SubtractChecked" />
      <MemberSignature Language="C++ CLI" Value="SubtractChecked" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>43</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-196">Operazione di sottrazione aritmetica, ad esempio <c>(a - b)</c>, con controllo dell'overflow, per operandi numerici.</span><span class="sxs-lookup"><span data-stu-id="66759-196">An arithmetic subtraction operation, such as <c>(a - b)</c>, that has overflow checking, for numeric operands.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="Switch" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Switch = int32(59)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Switch" />
      <MemberSignature Language="VB.NET" Value="Switch" />
      <MemberSignature Language="C++ CLI" Value="Switch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>59</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-197">Operazione di switch, ad esempio <see langword="switch" /> in C# o <see langword="Select Case" /> in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-197">A switch operation, such as <see langword="switch" /> in C# or <see langword="Select Case" /> in Visual Basic.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="Throw" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Throw = int32(60)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Throw" />
      <MemberSignature Language="VB.NET" Value="Throw" />
      <MemberSignature Language="C++ CLI" Value="Throw" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>60</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-198">Operazione che genera un'eccezione, ad esempio <c>throw new Exception()</c>.</span><span class="sxs-lookup"><span data-stu-id="66759-198">An operation that throws an exception, such as <c>throw new Exception()</c>.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Try">
      <MemberSignature Language="C#" Value="Try" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Try = int32(61)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Try" />
      <MemberSignature Language="VB.NET" Value="Try" />
      <MemberSignature Language="C++ CLI" Value="Try" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>61</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-199">Espressione <see langword="try-catch" />.</span><span class="sxs-lookup"><span data-stu-id="66759-199">A <see langword="try-catch" /> expression.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="TypeAs">
      <MemberSignature Language="C#" Value="TypeAs" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType TypeAs = int32(44)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.TypeAs" />
      <MemberSignature Language="VB.NET" Value="TypeAs" />
      <MemberSignature Language="C++ CLI" Value="TypeAs" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>44</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-200">Riferimento esplicito o conversione boxing in cui viene specificato <see langword="null" /> se la conversione non riesce, ad esempio <c>(obj as SampleType)</c> in C# o <c>TryCast(obj, SampleType)</c> in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-200">An explicit reference or boxing conversion in which <see langword="null" /> is supplied if the conversion fails, such as <c>(obj as SampleType)</c> in C# or <c>TryCast(obj, SampleType)</c> in Visual Basic.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="TypeEqual">
      <MemberSignature Language="C#" Value="TypeEqual" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType TypeEqual = int32(81)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.TypeEqual" />
      <MemberSignature Language="VB.NET" Value="TypeEqual" />
      <MemberSignature Language="C++ CLI" Value="TypeEqual" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>81</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-201">Test di tipo esatto.</span><span class="sxs-lookup"><span data-stu-id="66759-201">An exact type test.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="TypeIs">
      <MemberSignature Language="C#" Value="TypeIs" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType TypeIs = int32(45)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.TypeIs" />
      <MemberSignature Language="VB.NET" Value="TypeIs" />
      <MemberSignature Language="C++ CLI" Value="TypeIs" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>45</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-202">Tipo di test, ad esempio <c>obj is SampleType</c> in C# o <c>TypeOf obj is SampleType</c> in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="66759-202">A type test, such as <c>obj is SampleType</c> in C# or <c>TypeOf obj is SampleType</c> in Visual Basic.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="UnaryPlus">
      <MemberSignature Language="C#" Value="UnaryPlus" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType UnaryPlus = int32(29)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />
      <MemberSignature Language="VB.NET" Value="UnaryPlus" />
      <MemberSignature Language="C++ CLI" Value="UnaryPlus" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>29</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-203">Operazione con più unario, ad esempio <c>(+a)</c>.</span><span class="sxs-lookup"><span data-stu-id="66759-203">A unary plus operation, such as <c>(+a)</c>.</span></span> <span data-ttu-id="66759-204">Il risultato di un'operazione con il più unario predefinita è il valore dell'operando, ma le implementazioni definite dall'utente possono dare risultati insoliti.</span><span class="sxs-lookup"><span data-stu-id="66759-204">The result of a predefined unary plus operation is the value of the operand, but user-defined implementations might have unusual results.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Unbox">
      <MemberSignature Language="C#" Value="Unbox" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Linq.Expressions.ExpressionType Unbox = int32(62)" />
      <MemberSignature Language="DocId" Value="F:System.Linq.Expressions.ExpressionType.Unbox" />
      <MemberSignature Language="VB.NET" Value="Unbox" />
      <MemberSignature Language="C++ CLI" Value="Unbox" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <MemberValue>62</MemberValue>
      <Docs>
        <summary><span data-ttu-id="66759-205">Operazione di unboxing del tipo di valore, ad esempio le istruzioni <see langword="unbox" /> e <see langword="unbox.any" /> in MSIL.</span><span class="sxs-lookup"><span data-stu-id="66759-205">An unbox value type operation, such as <see langword="unbox" /> and <see langword="unbox.any" /> instructions in MSIL.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>