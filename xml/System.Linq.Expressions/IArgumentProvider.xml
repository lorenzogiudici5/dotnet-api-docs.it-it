<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IArgumentProvider.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5bb1b0a12225c49cd06302a4822210d08cda2957f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bb1b0a12225c49cd06302a4822210d08cda2957f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>Provides an internal interface for accessing the arguments of multiple tree nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression, and InexExpression).</source>
          <target state="translated">Fornisce un'interfaccia interna per l’accesso agli argomenti di più nodi dell'albero (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression e InexExpression).</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>You should not use this API.</source>
          <target state="translated">Non usare questa API.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>It is only public due to DLL refactoring and exists only for internal performance optimizations.</source>
          <target state="translated">È pubblica solo per via del refactoring DLL ed esiste solo per le ottimizzazioni delle prestazioni interne.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>This enables two optimizations which reduce the size of expression trees.</source>
          <target state="translated">Consente due ottimizzazioni che riducono le dimensioni degli alberi delle espressioni.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>The first enables the tree nodes to hold onto an IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> instead of a ReadOnlyCollection.</source>
          <target state="translated">La prima consente ai nodi dell'albero di contenere un oggetto IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> anziché un oggetto ReadOnlyCollection.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> saves the cost of allocating the ReadOnlyCollection for each node.</source>
          <target state="translated">L’elemento IList <ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> consente di risparmiare il costo di allocazione dell’oggetto ReadOnlyCollection per ogni nodo.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>The second enables creating specialized subclasses that hold onto a specific number of arguments (for example, Block2, Block3, Block4).</source>
          <target state="translated">La seconda ottimizzazione consente di creare sottoclassi specializzate che contengono un numero specifico di argomenti (ad esempio, Block2, Block3, Block4).</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>Therefore, these nodes avoid allocating both a ReadOnlyCollection and an array for storing their elements, saving 32 bytes per node.</source>
          <target state="translated">Questi nodi, quindi, evitano l’allocazione di un oggetto ReadOnlyCollection e di una matrice per l'archiviazione dei relativi elementi, consentendo di risparmiare 32 byte per ogni nodo.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>The expression tree nodes continue to expose the original LINQ properties of ReadOnlyCollections.</source>
          <target state="translated">I nodi della struttura ad albero dell’espressione continuano a esporre le proprietà LINQ originali degli oggetti ReadOnlyCollection.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>The nodes do this by re-using a field for storing both the array or an element that would normally be stored in the array.</source>
          <target state="translated">A tale scopo, i nodi riutilizzano un campo per archiviare sia la matrice che un elemento che verrebbe normalmente archiviato nella matrice.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>For the array case, the collection is typed to IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> instead of ReadOnlyCollection<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph>.</source>
          <target state="translated">Nel caso della matrice, la raccolta è tipizzata in IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> anziché in ReadOnlyCollection<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>When the node is initially constructed it is an array.</source>
          <target state="translated">Quando il nodo viene inizialmente costruito è una matrice.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>When the compiler accesses the members it uses this interface.</source>
          <target state="translated">Quando il compilatore accede ai membri usa tale interfaccia.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>Accessing array elements promotes the array to a ReadOnlyCollection.</source>
          <target state="translated">L’accesso agli elementi della matrice alza di livello la matrice a un oggetto ReadOnlyCollection.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>For the object case we store the first argument in a field typed to object.</source>
          <target state="translated">Nel caso dell’oggetto, viene memorizzato il primo argomento in un campo tipizzato all'oggetto.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>When the node is initially constructed, the field holds the Expression.</source>
          <target state="translated">Quando il nodo viene inizialmente costruito, il campo contiene l'oggetto Expression.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>The compiler accesses arguments through this interface, and the accessor for the first argument uses Expression.ReturnObject to return the object that handles the Expression or ReadOnlyCollection case.</source>
          <target state="translated">Il compilatore accede agli argomenti tramite questa interfaccia e la funzione di accesso per il primo argomento usa Expression.ReturnObject per restituire l'oggetto che gestisce il caso Expression o ReadOnlyCollection.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>When the user accesses the ReadOnlyCollection, then the object field is updated to hold directly onto the ReadOnlyCollection.</source>
          <target state="translated">Quando l'utente accede a ReadOnlyCollection, il campo dell’oggetto viene aggiornato per contenere direttamente l’oggetto ReadOnlyCollection.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>It is important that the Expressions consistently return the same ReadOnlyCollection.</source>
          <target state="translated">È importante che le espressioni restituiscano in modo coerente lo stesso oggetto ReadOnlyCollection.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>Otherwise, the re-writer tree walker will break.</source>
          <target state="translated">In caso contrario, verrà interrotto il processo di scrittura del treewalker.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>It is a breaking change from LINQ v1 to return different ReadOnlyCollections form the same Expression node.</source>
          <target state="translated">Si tratta di una modifica sostanziale rispetto a LINQ v1, che ha il fine di restituire oggetti ReadOnlyCollections diversi che formano lo stesso nodo Expression.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>Currently users can rely on object identity to tell if the node has changed.</source>
          <target state="translated">Attualmente, gli utenti possono usare l’identità dell'oggetto per sapere se il nodo è stato modificato.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>Storing the ReadOnlyCollection in an overloaded field both reduces memory usage and maintains compatibility for the public API.</source>
          <target state="translated">L’archiviazione di ReadOnlyCollection in un campo di overload consente di ridurre l'uso della memoria e garantire la compatibilità per l'API pubblica.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
          <source>Returns the number of arguments to the expression tree node.</source>
          <target state="translated">Restituisce il numero di argomenti per il nodo dell'albero delle espressioni.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
          <source>You should not use this type.</source>
          <target state="translated">Non usare questo tipo.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
          <source>It is only public due to assembly refactoring, and it is used internally for performance optimizations.</source>
          <target state="translated">Essendo solo di tipo pubblico a causa del refactoring di assembly si usa internamente per le ottimizzazioni delle prestazioni.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
          <source>The number of arguments to the expression tree node as <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>.</source>
          <target state="translated">Il numero di argomenti per il nodo dell'albero dell'espressione come <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <source>The index of the argument.</source>
          <target state="translated">Indice dell’argomento.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <source>Returns the argument at index, throwing if index is out of bounds.</source>
          <target state="translated">Restituisce l'argomento in corrispondenza dell'indice, generando un'eccezione se l'indice non è compreso nell'intervallo.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <source>You should not use this type.</source>
          <target state="translated">Non usare questo tipo.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <source>It is only public due to assembly refactoring, and it is used internally for performance optimizations.</source>
          <target state="translated">Essendo solo di tipo pubblico a causa del refactoring di assembly si usa internamente per le ottimizzazioni delle prestazioni.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <source>The argument at index, throwing if index is out of bounds as <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated">Argomento in corrispondenza dell'indice, che genera un'eccezione se l'indice non è compreso nell'intervallo <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>