<Type Name="Expression&lt;TDelegate&gt;" FullName="System.Linq.Expressions.Expression&lt;TDelegate&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="852b4062c851ab4301c9efb34c1ebacc0ca1b9fe" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Expression&lt;TDelegate&gt; : System.Linq.Expressions.LambdaExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Expression`1&lt;TDelegate&gt; extends System.Linq.Expressions.LambdaExpression" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.Expression`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Expression(Of TDelegate)&#xA;Inherits LambdaExpression" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TDelegate&gt;&#xA;public ref class Expression sealed : System::Linq::Expressions::LambdaExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TDelegate" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Linq.Expressions.LambdaExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TDelegate">
      <span data-ttu-id="4f993-101">Tipo del delegato rappresentato dall'oggetto <see cref="T:System.Linq.Expressions.Expression`1" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4f993-101">The type of the delegate that the <see cref="T:System.Linq.Expressions.Expression`1" /> represents.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="4f993-102">Rappresenta un'espressione lambda fortemente tipizzata come una struttura di dati sotto forma di un albero delle espressioni.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4f993-102">Represents a strongly typed lambda expression as a data structure in the form of an expression tree.</span>
      </span>
      <span data-ttu-id="4f993-103">Questa classe non può essere ereditata.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4f993-103">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f993-104">Quando un'espressione lambda viene assegnata a una variabile, un campo o un parametro il cui tipo è <xref:System.Linq.Expressions.Expression%601>, il compilatore genera le istruzioni per compilare un albero delle espressioni.</span><span class="sxs-lookup"><span data-stu-id="4f993-104">When a lambda expression is assigned to a variable, field, or parameter whose type is <xref:System.Linq.Expressions.Expression%601>, the compiler emits instructions to build an expression tree.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4f993-105">Una conversione da un'espressione lambda per digitare `Expression<D>` (`Expression(Of D)` in Visual Basic) è presente se la conversione dall'espressione lambda a un delegato di tipo `D` esiste.</span><span class="sxs-lookup"><span data-stu-id="4f993-105">A conversion from a lambda expression to type `Expression<D>` (`Expression(Of D)` in Visual Basic) exists if a conversion from the lambda expression to a delegate of type `D` exists.</span></span> <span data-ttu-id="4f993-106">Tuttavia, la conversione potrebbe non riuscire, ad esempio, se il corpo dell'espressione lambda è un blocco.</span><span class="sxs-lookup"><span data-stu-id="4f993-106">However, the conversion may fail, for example, if the body of the lambda expression is a block.</span></span> <span data-ttu-id="4f993-107">Ciò significa che i delegati e gli alberi delle espressioni si comportano allo stesso modo per quanto riguarda la risoluzione dell'overload.</span><span class="sxs-lookup"><span data-stu-id="4f993-107">This means that delegates and expression trees behave similarly with regard to overload resolution.</span></span>  
  
 <span data-ttu-id="4f993-108">L'albero delle espressioni è una rappresentazione di dati in memoria dell'espressione lambda.</span><span class="sxs-lookup"><span data-stu-id="4f993-108">The expression tree is an in-memory data representation of the lambda expression.</span></span> <span data-ttu-id="4f993-109">L'albero delle espressioni rende trasparente ed esplicita la struttura dell'espressione lambda.</span><span class="sxs-lookup"><span data-stu-id="4f993-109">The expression tree makes the structure of the lambda expression transparent and explicit.</span></span> <span data-ttu-id="4f993-110">Come con qualsiasi altra struttura di dati, è possibile interagire con i dati nell'albero delle espressioni.</span><span class="sxs-lookup"><span data-stu-id="4f993-110">You can interact with the data in the expression tree just as you can with any other data structure.</span></span>  
  
 <span data-ttu-id="4f993-111">La possibilità di gestire le espressioni come strutture di dati consente alle API di ricevere il codice utente in un formato che può essere controllato, trasformare ed elaborato in modo personalizzato.</span><span class="sxs-lookup"><span data-stu-id="4f993-111">The ability to treat expressions as data structures enables APIs to receive user code in a format that can be inspected, transformed, and processed in a custom manner.</span></span> <span data-ttu-id="4f993-112">Ad esempio, il [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] implementazione dell'accesso ai dati utilizza questa funzionalità per convertire gli alberi delle espressioni per istruzioni Transact-SQL che possono essere valutate dal database.</span><span class="sxs-lookup"><span data-stu-id="4f993-112">For example, the [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] data access implementation uses this facility to translate expression trees to Transact-SQL statements that can be evaluated by the database.</span></span>  
  
 <span data-ttu-id="4f993-113">Molti operatori query standard definiti nel <xref:System.Linq.Queryable> classe dispone di uno o più parametri di tipo <xref:System.Linq.Expressions.Expression%601>.</span><span class="sxs-lookup"><span data-stu-id="4f993-113">Many standard query operators defined in the <xref:System.Linq.Queryable> class have one or more parameters of type <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="4f993-114">Il <xref:System.Linq.Expressions.Expression.NodeType%2A> di un <xref:System.Linq.Expressions.Expression%601> è <xref:System.Linq.Expressions.ExpressionType.Lambda>.</span><span class="sxs-lookup"><span data-stu-id="4f993-114">The <xref:System.Linq.Expressions.Expression.NodeType%2A> of an <xref:System.Linq.Expressions.Expression%601> is <xref:System.Linq.Expressions.ExpressionType.Lambda>.</span></span>  
  
 <span data-ttu-id="4f993-115">Utilizzare il <xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.ParameterExpression%7D%29> o <xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.ParameterExpression%5B%5D%29> metodo per creare un <xref:System.Linq.Expressions.Expression%601> oggetto.</span><span class="sxs-lookup"><span data-stu-id="4f993-115">Use the <xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.ParameterExpression%7D%29> or <xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.ParameterExpression%5B%5D%29> method to create an <xref:System.Linq.Expressions.Expression%601> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f993-116">Esempio di codice riportato di seguito viene illustrato come rappresenta un'espressione lambda come codice eseguibile sotto forma di un delegato e come dati sotto forma di un albero delle espressioni.</span><span class="sxs-lookup"><span data-stu-id="4f993-116">The following code example demonstrates how to represent a lambda expression both as executable code in the form of a delegate and as data in the form of an expression tree.</span></span> <span data-ttu-id="4f993-117">Viene inoltre illustrato come riconvertire la struttura ad albero dell'espressione nel codice eseguibile utilizzando il <xref:System.Linq.Expressions.Expression%601.Compile%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="4f993-117">It also demonstrates how to turn the expression tree back into executable code by using the <xref:System.Linq.Expressions.Expression%601.Compile%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.ExpressionT/CS/ExpressionT.cs#1)]
 [!code-vb[System.Linq.Expressions.ExpressionT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.ExpressionT/VB/ExpressionT.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected internal override System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Accept(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function Accept (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Linq::Expressions::Expression ^ Accept(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public TDelegate Compile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TDelegate Compile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Compile" />
      <MemberSignature Language="VB.NET" Value="Public Function Compile () As TDelegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TDelegate Compile();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TDelegate</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4f993-118">Compila l'espressione lambda descritta dalla struttura ad albero dell'espressione in codice eseguibile e produce un delegato che rappresenta l'espressione lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f993-118">Compiles the lambda expression described by the expression tree into executable code and produces a delegate that represents the lambda expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4f993-119">Delegato di tipo <paramref name="TDelegate" /> che rappresenta l'espressione lambda compilata descritta dall'oggetto <see cref="T:System.Linq.Expressions.Expression`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f993-119">A delegate of type <paramref name="TDelegate" /> that represents the compiled lambda expression described by the <see cref="T:System.Linq.Expressions.Expression`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f993-120">Il <xref:System.Linq.Expressions.Expression%601.Compile%2A> metodo produce un delegato del tipo `TDelegate` in fase di esecuzione.</span><span class="sxs-lookup"><span data-stu-id="4f993-120">The <xref:System.Linq.Expressions.Expression%601.Compile%2A> method produces a delegate of type `TDelegate` at runtime.</span></span> <span data-ttu-id="4f993-121">Quando viene eseguito il delegato, presenta il comportamento descritto dalla semantica del <xref:System.Linq.Expressions.Expression%601>.</span><span class="sxs-lookup"><span data-stu-id="4f993-121">When that delegate is executed, it has the behavior described by the semantics of the <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="4f993-122">Il <xref:System.Linq.Expressions.Expression%601.Compile%2A> metodo può essere utilizzato per ottenere il valore di qualsiasi albero delle espressioni.</span><span class="sxs-lookup"><span data-stu-id="4f993-122">The <xref:System.Linq.Expressions.Expression%601.Compile%2A> method can be used to obtain the value of any expression tree.</span></span> <span data-ttu-id="4f993-123">Innanzitutto, creare un'espressione lambda che contiene l'espressione come corpo utilizzando il <xref:System.Linq.Expressions.Expression.Lambda%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="4f993-123">First, create a lambda expression that has the expression as its body by using the <xref:System.Linq.Expressions.Expression.Lambda%2A> method.</span></span> <span data-ttu-id="4f993-124">Chiamare quindi <xref:System.Linq.Expressions.Expression%601.Compile%2A> per ottenere un delegato ed eseguire il delegato per ottenere il valore dell'espressione.</span><span class="sxs-lookup"><span data-stu-id="4f993-124">Then call <xref:System.Linq.Expressions.Expression%601.Compile%2A> to obtain a delegate, and execute the delegate to obtain the value of the expression.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f993-125">Esempio di codice riportato di seguito viene illustrato come <xref:System.Linq.Expressions.Expression%601.Compile%2A> viene utilizzato per eseguire un albero delle espressioni.</span><span class="sxs-lookup"><span data-stu-id="4f993-125">The following code example demonstrates how <xref:System.Linq.Expressions.Expression%601.Compile%2A> is used to execute an expression tree.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionT#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.ExpressionT/CS/ExpressionT.cs#2)]
 [!code-vb[System.Linq.Expressions.ExpressionT#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.ExpressionT/VB/ExpressionT.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public TDelegate Compile (bool preferInterpretation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TDelegate Compile(bool preferInterpretation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compile (preferInterpretation As Boolean) As TDelegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TDelegate Compile(bool preferInterpretation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TDelegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preferInterpretation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="preferInterpretation">
          <span data-ttu-id="4f993-126">
            <see langword="true" /> per indicare che l'espressione deve essere compilata in un formato interpretato, se disponibile; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f993-126">
              <see langword="true" /> to indicate that the expression should be compiled to an interpreted form, if it is available; <see langword="false" /> otherwise.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4f993-127">Compila l'espressione lambda descritta dall'albero delle espressioni nel codice interpretato o compilato e produce un delegato che rappresenta l'espressione lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f993-127">Compiles the lambda expression described by the expression tree into interpreted or compiled code and produces a delegate that represents the lambda expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4f993-128">Un delegato che rappresenta l'espressione lambda compilata descritta da <see cref="T:System.Linq.Expressions.Expression`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f993-128">A delegate that represents the compiled lambda expression described by the <see cref="T:System.Linq.Expressions.Expression`1" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public TDelegate Compile (System.Runtime.CompilerServices.DebugInfoGenerator debugInfoGenerator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TDelegate Compile(class System.Runtime.CompilerServices.DebugInfoGenerator debugInfoGenerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TDelegate Compile(System::Runtime::CompilerServices::DebugInfoGenerator ^ debugInfoGenerator);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TDelegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="debugInfoGenerator" Type="System.Runtime.CompilerServices.DebugInfoGenerator" />
      </Parameters>
      <Docs>
        <param name="debugInfoGenerator">
          <span data-ttu-id="4f993-129">Generatore delle informazioni di debug utilizzato dal compilatore per contrassegnare i punti della sequenza e annotare le variabili locali.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f993-129">Debugging information generator used by the compiler to mark sequence points and annotate local variables.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4f993-130">Produce un delegato che rappresenta l'espressione lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f993-130">Produces a delegate that represents the lambda expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4f993-131">Un delegato che contiene la versione compilata del lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f993-131">A delegate containing the compiled version of the lambda.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression&lt;TDelegate&gt; Update (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression`1&lt;!TDelegate&gt; Update(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (body As Expression, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Update(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="4f993-132">Proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> del risultato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f993-132">The <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property of the result.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="4f993-133">Proprietà <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> del risultato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f993-133">The <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> property of the result.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4f993-134">Crea una nuova espressione simile a questa, ma che usa gli elementi figlio specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f993-134">Creates a new expression that is like this one, but using the supplied children.</span>
          </span>
          <span data-ttu-id="4f993-135">Se tutti gli elementi figlio sono uguali, verrà restituita questa espressione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f993-135">If all of the children are the same, it will return this expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4f993-136">Questa espressione se nessun elemento figlio viene modificato o un'espressione con gli elementi figlio aggiornati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4f993-136">This expression if no children are changed or an expression with the updated children.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>